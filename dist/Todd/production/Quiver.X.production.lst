

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Jan 15 21:05:02 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	text72,local,class=CODE,merge=1,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	intentry,global,class=CODE,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	dabs	1,0x920,80
   112                           	dabs	1,0x8A0,80
   113                           	dabs	1,0x820,80
   114                           	dabs	1,0x7A0,80
   115                           	dabs	1,0x742,46
   116                           	dabs	1,0x720,34
   117                           	dabs	1,0x6A0,80
   118                           	dabs	1,0x620,80
   119                           	dabs	1,0x5BA,54
   120                           	dabs	1,0x2482,0,_cosArray
   121                           	dabs	1,0x238A,0,_modArray
   122                           	dabs	1,0x7E,2
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  008F                     	;# 
   157  0090                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0095                     	;# 
   163  0096                     	;# 
   164  0097                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  0110                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  011D                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182  018F                     	;# 
   183  0190                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0194                     	;# 
   190  0195                     	;# 
   191  0196                     	;# 
   192  0197                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  0199                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019D                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019E                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  019F                     	;# 
   216  020D                     	;# 
   217  020F                     	;# 
   218  0210                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021E                     	;# 
   240  021F                     	;# 
   241  028C                     	;# 
   242  028D                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  029D                     	;# 
   252  029E                     	;# 
   253  029F                     	;# 
   254  030C                     	;# 
   255  030D                     	;# 
   256  0311                     	;# 
   257  0311                     	;# 
   258  0312                     	;# 
   259  0313                     	;# 
   260  0318                     	;# 
   261  0318                     	;# 
   262  0319                     	;# 
   263  031A                     	;# 
   264  031C                     	;# 
   265  031C                     	;# 
   266  031D                     	;# 
   267  031E                     	;# 
   268  038C                     	;# 
   269  038D                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  040C                     	;# 
   274  040D                     	;# 
   275  0411                     	;# 
   276  0411                     	;# 
   277  0412                     	;# 
   278  0413                     	;# 
   279  0414                     	;# 
   280  0415                     	;# 
   281  0416                     	;# 
   282  0417                     	;# 
   283  0418                     	;# 
   284  0418                     	;# 
   285  0419                     	;# 
   286  041A                     	;# 
   287  041B                     	;# 
   288  041C                     	;# 
   289  041D                     	;# 
   290  041E                     	;# 
   291  048D                     	;# 
   292  0491                     	;# 
   293  0491                     	;# 
   294  0492                     	;# 
   295  0492                     	;# 
   296  0493                     	;# 
   297  0493                     	;# 
   298  0493                     	;# 
   299  0494                     	;# 
   300  0494                     	;# 
   301  0495                     	;# 
   302  0495                     	;# 
   303  0496                     	;# 
   304  0496                     	;# 
   305  0497                     	;# 
   306  0497                     	;# 
   307  0595                     	;# 
   308  0596                     	;# 
   309  0597                     	;# 
   310  059C                     	;# 
   311  059D                     	;# 
   312  059E                     	;# 
   313  0611                     	;# 
   314  0611                     	;# 
   315  0612                     	;# 
   316  0613                     	;# 
   317  0614                     	;# 
   318  0614                     	;# 
   319  0615                     	;# 
   320  0616                     	;# 
   321  0617                     	;# 
   322  0617                     	;# 
   323  0618                     	;# 
   324  0619                     	;# 
   325  061A                     	;# 
   326  061A                     	;# 
   327  061B                     	;# 
   328  061C                     	;# 
   329  061D                     	;# 
   330  061D                     	;# 
   331  061E                     	;# 
   332  061F                     	;# 
   333  0FE4                     	;# 
   334  0FE5                     	;# 
   335  0FE6                     	;# 
   336  0FE7                     	;# 
   337  0FE8                     	;# 
   338  0FE9                     	;# 
   339  0FEA                     	;# 
   340  0FEB                     	;# 
   341  0FED                     	;# 
   342  0FEE                     	;# 
   343  0FEF                     	;# 
   344  0000                     	;# 
   345  0001                     	;# 
   346  0002                     	;# 
   347  0003                     	;# 
   348  0004                     	;# 
   349  0005                     	;# 
   350  0006                     	;# 
   351  0007                     	;# 
   352  0008                     	;# 
   353  0009                     	;# 
   354  000A                     	;# 
   355  000B                     	;# 
   356  000C                     	;# 
   357  000D                     	;# 
   358  000E                     	;# 
   359  000F                     	;# 
   360  0010                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0014                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  008C                     	;# 
   375  008D                     	;# 
   376  008E                     	;# 
   377  008F                     	;# 
   378  0090                     	;# 
   379  0091                     	;# 
   380  0092                     	;# 
   381  0093                     	;# 
   382  0094                     	;# 
   383  0095                     	;# 
   384  0096                     	;# 
   385  0097                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010D                     	;# 
   395  010E                     	;# 
   396  010F                     	;# 
   397  0110                     	;# 
   398  0116                     	;# 
   399  0117                     	;# 
   400  011D                     	;# 
   401  018C                     	;# 
   402  018D                     	;# 
   403  018F                     	;# 
   404  0190                     	;# 
   405  0191                     	;# 
   406  0191                     	;# 
   407  0192                     	;# 
   408  0193                     	;# 
   409  0193                     	;# 
   410  0194                     	;# 
   411  0195                     	;# 
   412  0196                     	;# 
   413  0197                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  0199                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019A                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019C                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019D                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019E                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  019F                     	;# 
   437  020D                     	;# 
   438  020F                     	;# 
   439  0210                     	;# 
   440  0211                     	;# 
   441  0211                     	;# 
   442  0212                     	;# 
   443  0212                     	;# 
   444  0213                     	;# 
   445  0213                     	;# 
   446  0214                     	;# 
   447  0214                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0216                     	;# 
   452  0216                     	;# 
   453  0217                     	;# 
   454  0217                     	;# 
   455  0219                     	;# 
   456  021A                     	;# 
   457  021B                     	;# 
   458  021C                     	;# 
   459  021D                     	;# 
   460  021E                     	;# 
   461  021F                     	;# 
   462  028C                     	;# 
   463  028D                     	;# 
   464  0291                     	;# 
   465  0291                     	;# 
   466  0292                     	;# 
   467  0293                     	;# 
   468  0298                     	;# 
   469  0298                     	;# 
   470  0299                     	;# 
   471  029A                     	;# 
   472  029D                     	;# 
   473  029E                     	;# 
   474  029F                     	;# 
   475  030C                     	;# 
   476  030D                     	;# 
   477  0311                     	;# 
   478  0311                     	;# 
   479  0312                     	;# 
   480  0313                     	;# 
   481  0318                     	;# 
   482  0318                     	;# 
   483  0319                     	;# 
   484  031A                     	;# 
   485  031C                     	;# 
   486  031C                     	;# 
   487  031D                     	;# 
   488  031E                     	;# 
   489  038C                     	;# 
   490  038D                     	;# 
   491  0394                     	;# 
   492  0395                     	;# 
   493  0396                     	;# 
   494  040C                     	;# 
   495  040D                     	;# 
   496  0411                     	;# 
   497  0411                     	;# 
   498  0412                     	;# 
   499  0413                     	;# 
   500  0414                     	;# 
   501  0415                     	;# 
   502  0416                     	;# 
   503  0417                     	;# 
   504  0418                     	;# 
   505  0418                     	;# 
   506  0419                     	;# 
   507  041A                     	;# 
   508  041B                     	;# 
   509  041C                     	;# 
   510  041D                     	;# 
   511  041E                     	;# 
   512  048D                     	;# 
   513  0491                     	;# 
   514  0491                     	;# 
   515  0492                     	;# 
   516  0492                     	;# 
   517  0493                     	;# 
   518  0493                     	;# 
   519  0493                     	;# 
   520  0494                     	;# 
   521  0494                     	;# 
   522  0495                     	;# 
   523  0495                     	;# 
   524  0496                     	;# 
   525  0496                     	;# 
   526  0497                     	;# 
   527  0497                     	;# 
   528  0595                     	;# 
   529  0596                     	;# 
   530  0597                     	;# 
   531  059C                     	;# 
   532  059D                     	;# 
   533  059E                     	;# 
   534  0611                     	;# 
   535  0611                     	;# 
   536  0612                     	;# 
   537  0613                     	;# 
   538  0614                     	;# 
   539  0614                     	;# 
   540  0615                     	;# 
   541  0616                     	;# 
   542  0617                     	;# 
   543  0617                     	;# 
   544  0618                     	;# 
   545  0619                     	;# 
   546  061A                     	;# 
   547  061A                     	;# 
   548  061B                     	;# 
   549  061C                     	;# 
   550  061D                     	;# 
   551  061D                     	;# 
   552  061E                     	;# 
   553  061F                     	;# 
   554  0FE4                     	;# 
   555  0FE5                     	;# 
   556  0FE6                     	;# 
   557  0FE7                     	;# 
   558  0FE8                     	;# 
   559  0FE9                     	;# 
   560  0FEA                     	;# 
   561  0FEB                     	;# 
   562  0FED                     	;# 
   563  0FEE                     	;# 
   564  0FEF                     	;# 
   565  0000                     	;# 
   566  0001                     	;# 
   567  0002                     	;# 
   568  0003                     	;# 
   569  0004                     	;# 
   570  0005                     	;# 
   571  0006                     	;# 
   572  0007                     	;# 
   573  0008                     	;# 
   574  0009                     	;# 
   575  000A                     	;# 
   576  000B                     	;# 
   577  000C                     	;# 
   578  000D                     	;# 
   579  000E                     	;# 
   580  000F                     	;# 
   581  0010                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  008F                     	;# 
   599  0090                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0094                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  010E                     	;# 
   617  010F                     	;# 
   618  0110                     	;# 
   619  0116                     	;# 
   620  0117                     	;# 
   621  011D                     	;# 
   622  018C                     	;# 
   623  018D                     	;# 
   624  018F                     	;# 
   625  0190                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0197                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  020D                     	;# 
   659  020F                     	;# 
   660  0210                     	;# 
   661  0211                     	;# 
   662  0211                     	;# 
   663  0212                     	;# 
   664  0212                     	;# 
   665  0213                     	;# 
   666  0213                     	;# 
   667  0214                     	;# 
   668  0214                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0216                     	;# 
   673  0216                     	;# 
   674  0217                     	;# 
   675  0217                     	;# 
   676  0219                     	;# 
   677  021A                     	;# 
   678  021B                     	;# 
   679  021C                     	;# 
   680  021D                     	;# 
   681  021E                     	;# 
   682  021F                     	;# 
   683  028C                     	;# 
   684  028D                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  029D                     	;# 
   694  029E                     	;# 
   695  029F                     	;# 
   696  030C                     	;# 
   697  030D                     	;# 
   698  0311                     	;# 
   699  0311                     	;# 
   700  0312                     	;# 
   701  0313                     	;# 
   702  0318                     	;# 
   703  0318                     	;# 
   704  0319                     	;# 
   705  031A                     	;# 
   706  031C                     	;# 
   707  031C                     	;# 
   708  031D                     	;# 
   709  031E                     	;# 
   710  038C                     	;# 
   711  038D                     	;# 
   712  0394                     	;# 
   713  0395                     	;# 
   714  0396                     	;# 
   715  040C                     	;# 
   716  040D                     	;# 
   717  0411                     	;# 
   718  0411                     	;# 
   719  0412                     	;# 
   720  0413                     	;# 
   721  0414                     	;# 
   722  0415                     	;# 
   723  0416                     	;# 
   724  0417                     	;# 
   725  0418                     	;# 
   726  0418                     	;# 
   727  0419                     	;# 
   728  041A                     	;# 
   729  041B                     	;# 
   730  041C                     	;# 
   731  041D                     	;# 
   732  041E                     	;# 
   733  048D                     	;# 
   734  0491                     	;# 
   735  0491                     	;# 
   736  0492                     	;# 
   737  0492                     	;# 
   738  0493                     	;# 
   739  0493                     	;# 
   740  0493                     	;# 
   741  0494                     	;# 
   742  0494                     	;# 
   743  0495                     	;# 
   744  0495                     	;# 
   745  0496                     	;# 
   746  0496                     	;# 
   747  0497                     	;# 
   748  0497                     	;# 
   749  0595                     	;# 
   750  0596                     	;# 
   751  0597                     	;# 
   752  059C                     	;# 
   753  059D                     	;# 
   754  059E                     	;# 
   755  0611                     	;# 
   756  0611                     	;# 
   757  0612                     	;# 
   758  0613                     	;# 
   759  0614                     	;# 
   760  0614                     	;# 
   761  0615                     	;# 
   762  0616                     	;# 
   763  0617                     	;# 
   764  0617                     	;# 
   765  0618                     	;# 
   766  0619                     	;# 
   767  061A                     	;# 
   768  061A                     	;# 
   769  061B                     	;# 
   770  061C                     	;# 
   771  061D                     	;# 
   772  061D                     	;# 
   773  061E                     	;# 
   774  061F                     	;# 
   775  0FE4                     	;# 
   776  0FE5                     	;# 
   777  0FE6                     	;# 
   778  0FE7                     	;# 
   779  0FE8                     	;# 
   780  0FE9                     	;# 
   781  0FEA                     	;# 
   782  0FEB                     	;# 
   783  0FED                     	;# 
   784  0FEE                     	;# 
   785  0FEF                     	;# 
   786  0000                     	;# 
   787  0001                     	;# 
   788  0002                     	;# 
   789  0003                     	;# 
   790  0004                     	;# 
   791  0005                     	;# 
   792  0006                     	;# 
   793  0007                     	;# 
   794  0008                     	;# 
   795  0009                     	;# 
   796  000A                     	;# 
   797  000B                     	;# 
   798  000C                     	;# 
   799  000D                     	;# 
   800  000E                     	;# 
   801  000F                     	;# 
   802  0010                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  008C                     	;# 
   817  008D                     	;# 
   818  008E                     	;# 
   819  008F                     	;# 
   820  0090                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0097                     	;# 
   828  0099                     	;# 
   829  009A                     	;# 
   830  009B                     	;# 
   831  009B                     	;# 
   832  009C                     	;# 
   833  009D                     	;# 
   834  009E                     	;# 
   835  010C                     	;# 
   836  010D                     	;# 
   837  010E                     	;# 
   838  010F                     	;# 
   839  0110                     	;# 
   840  0116                     	;# 
   841  0117                     	;# 
   842  011D                     	;# 
   843  018C                     	;# 
   844  018D                     	;# 
   845  018F                     	;# 
   846  0190                     	;# 
   847  0191                     	;# 
   848  0191                     	;# 
   849  0192                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0194                     	;# 
   853  0195                     	;# 
   854  0196                     	;# 
   855  0197                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  0199                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019A                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019C                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019D                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019E                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  020D                     	;# 
   880  020F                     	;# 
   881  0210                     	;# 
   882  0211                     	;# 
   883  0211                     	;# 
   884  0212                     	;# 
   885  0212                     	;# 
   886  0213                     	;# 
   887  0213                     	;# 
   888  0214                     	;# 
   889  0214                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0216                     	;# 
   894  0216                     	;# 
   895  0217                     	;# 
   896  0217                     	;# 
   897  0219                     	;# 
   898  021A                     	;# 
   899  021B                     	;# 
   900  021C                     	;# 
   901  021D                     	;# 
   902  021E                     	;# 
   903  021F                     	;# 
   904  028C                     	;# 
   905  028D                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0298                     	;# 
   911  0298                     	;# 
   912  0299                     	;# 
   913  029A                     	;# 
   914  029D                     	;# 
   915  029E                     	;# 
   916  029F                     	;# 
   917  030C                     	;# 
   918  030D                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0318                     	;# 
   924  0318                     	;# 
   925  0319                     	;# 
   926  031A                     	;# 
   927  031C                     	;# 
   928  031C                     	;# 
   929  031D                     	;# 
   930  031E                     	;# 
   931  038C                     	;# 
   932  038D                     	;# 
   933  0394                     	;# 
   934  0395                     	;# 
   935  0396                     	;# 
   936  040C                     	;# 
   937  040D                     	;# 
   938  0411                     	;# 
   939  0411                     	;# 
   940  0412                     	;# 
   941  0413                     	;# 
   942  0414                     	;# 
   943  0415                     	;# 
   944  0416                     	;# 
   945  0417                     	;# 
   946  0418                     	;# 
   947  0418                     	;# 
   948  0419                     	;# 
   949  041A                     	;# 
   950  041B                     	;# 
   951  041C                     	;# 
   952  041D                     	;# 
   953  041E                     	;# 
   954  048D                     	;# 
   955  0491                     	;# 
   956  0491                     	;# 
   957  0492                     	;# 
   958  0492                     	;# 
   959  0493                     	;# 
   960  0493                     	;# 
   961  0493                     	;# 
   962  0494                     	;# 
   963  0494                     	;# 
   964  0495                     	;# 
   965  0495                     	;# 
   966  0496                     	;# 
   967  0496                     	;# 
   968  0497                     	;# 
   969  0497                     	;# 
   970  0595                     	;# 
   971  0596                     	;# 
   972  0597                     	;# 
   973  059C                     	;# 
   974  059D                     	;# 
   975  059E                     	;# 
   976  0611                     	;# 
   977  0611                     	;# 
   978  0612                     	;# 
   979  0613                     	;# 
   980  0614                     	;# 
   981  0614                     	;# 
   982  0615                     	;# 
   983  0616                     	;# 
   984  0617                     	;# 
   985  0617                     	;# 
   986  0618                     	;# 
   987  0619                     	;# 
   988  061A                     	;# 
   989  061A                     	;# 
   990  061B                     	;# 
   991  061C                     	;# 
   992  061D                     	;# 
   993  061D                     	;# 
   994  061E                     	;# 
   995  061F                     	;# 
   996  0FE4                     	;# 
   997  0FE5                     	;# 
   998  0FE6                     	;# 
   999  0FE7                     	;# 
  1000  0FE8                     	;# 
  1001  0FE9                     	;# 
  1002  0FEA                     	;# 
  1003  0FEB                     	;# 
  1004  0FED                     	;# 
  1005  0FEE                     	;# 
  1006  0FEF                     	;# 
  1007  0000                     	;# 
  1008  0001                     	;# 
  1009  0002                     	;# 
  1010  0003                     	;# 
  1011  0004                     	;# 
  1012  0005                     	;# 
  1013  0006                     	;# 
  1014  0007                     	;# 
  1015  0008                     	;# 
  1016  0009                     	;# 
  1017  000A                     	;# 
  1018  000B                     	;# 
  1019  000C                     	;# 
  1020  000D                     	;# 
  1021  000E                     	;# 
  1022  000F                     	;# 
  1023  0010                     	;# 
  1024  0011                     	;# 
  1025  0012                     	;# 
  1026  0013                     	;# 
  1027  0014                     	;# 
  1028  0015                     	;# 
  1029  0016                     	;# 
  1030  0016                     	;# 
  1031  0017                     	;# 
  1032  0018                     	;# 
  1033  0019                     	;# 
  1034  001A                     	;# 
  1035  001B                     	;# 
  1036  001C                     	;# 
  1037  008C                     	;# 
  1038  008D                     	;# 
  1039  008E                     	;# 
  1040  008F                     	;# 
  1041  0090                     	;# 
  1042  0091                     	;# 
  1043  0092                     	;# 
  1044  0093                     	;# 
  1045  0094                     	;# 
  1046  0095                     	;# 
  1047  0096                     	;# 
  1048  0097                     	;# 
  1049  0099                     	;# 
  1050  009A                     	;# 
  1051  009B                     	;# 
  1052  009B                     	;# 
  1053  009C                     	;# 
  1054  009D                     	;# 
  1055  009E                     	;# 
  1056  010C                     	;# 
  1057  010D                     	;# 
  1058  010E                     	;# 
  1059  010F                     	;# 
  1060  0110                     	;# 
  1061  0116                     	;# 
  1062  0117                     	;# 
  1063  011D                     	;# 
  1064  018C                     	;# 
  1065  018D                     	;# 
  1066  018F                     	;# 
  1067  0190                     	;# 
  1068  0191                     	;# 
  1069  0191                     	;# 
  1070  0192                     	;# 
  1071  0193                     	;# 
  1072  0193                     	;# 
  1073  0194                     	;# 
  1074  0195                     	;# 
  1075  0196                     	;# 
  1076  0197                     	;# 
  1077  0199                     	;# 
  1078  0199                     	;# 
  1079  0199                     	;# 
  1080  019A                     	;# 
  1081  019A                     	;# 
  1082  019A                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019D                     	;# 
  1093  019D                     	;# 
  1094  019E                     	;# 
  1095  019E                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  019F                     	;# 
  1099  019F                     	;# 
  1100  020D                     	;# 
  1101  020F                     	;# 
  1102  0210                     	;# 
  1103  0211                     	;# 
  1104  0211                     	;# 
  1105  0212                     	;# 
  1106  0212                     	;# 
  1107  0213                     	;# 
  1108  0213                     	;# 
  1109  0214                     	;# 
  1110  0214                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0215                     	;# 
  1114  0216                     	;# 
  1115  0216                     	;# 
  1116  0217                     	;# 
  1117  0217                     	;# 
  1118  0219                     	;# 
  1119  021A                     	;# 
  1120  021B                     	;# 
  1121  021C                     	;# 
  1122  021D                     	;# 
  1123  021E                     	;# 
  1124  021F                     	;# 
  1125  028C                     	;# 
  1126  028D                     	;# 
  1127  0291                     	;# 
  1128  0291                     	;# 
  1129  0292                     	;# 
  1130  0293                     	;# 
  1131  0298                     	;# 
  1132  0298                     	;# 
  1133  0299                     	;# 
  1134  029A                     	;# 
  1135  029D                     	;# 
  1136  029E                     	;# 
  1137  029F                     	;# 
  1138  030C                     	;# 
  1139  030D                     	;# 
  1140  0311                     	;# 
  1141  0311                     	;# 
  1142  0312                     	;# 
  1143  0313                     	;# 
  1144  0318                     	;# 
  1145  0318                     	;# 
  1146  0319                     	;# 
  1147  031A                     	;# 
  1148  031C                     	;# 
  1149  031C                     	;# 
  1150  031D                     	;# 
  1151  031E                     	;# 
  1152  038C                     	;# 
  1153  038D                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  040C                     	;# 
  1158  040D                     	;# 
  1159  0411                     	;# 
  1160  0411                     	;# 
  1161  0412                     	;# 
  1162  0413                     	;# 
  1163  0414                     	;# 
  1164  0415                     	;# 
  1165  0416                     	;# 
  1166  0417                     	;# 
  1167  0418                     	;# 
  1168  0418                     	;# 
  1169  0419                     	;# 
  1170  041A                     	;# 
  1171  041B                     	;# 
  1172  041C                     	;# 
  1173  041D                     	;# 
  1174  041E                     	;# 
  1175  048D                     	;# 
  1176  0491                     	;# 
  1177  0491                     	;# 
  1178  0492                     	;# 
  1179  0492                     	;# 
  1180  0493                     	;# 
  1181  0493                     	;# 
  1182  0493                     	;# 
  1183  0494                     	;# 
  1184  0494                     	;# 
  1185  0495                     	;# 
  1186  0495                     	;# 
  1187  0496                     	;# 
  1188  0496                     	;# 
  1189  0497                     	;# 
  1190  0497                     	;# 
  1191  0595                     	;# 
  1192  0596                     	;# 
  1193  0597                     	;# 
  1194  059C                     	;# 
  1195  059D                     	;# 
  1196  059E                     	;# 
  1197  0611                     	;# 
  1198  0611                     	;# 
  1199  0612                     	;# 
  1200  0613                     	;# 
  1201  0614                     	;# 
  1202  0614                     	;# 
  1203  0615                     	;# 
  1204  0616                     	;# 
  1205  0617                     	;# 
  1206  0617                     	;# 
  1207  0618                     	;# 
  1208  0619                     	;# 
  1209  061A                     	;# 
  1210  061A                     	;# 
  1211  061B                     	;# 
  1212  061C                     	;# 
  1213  061D                     	;# 
  1214  061D                     	;# 
  1215  061E                     	;# 
  1216  061F                     	;# 
  1217  0FE4                     	;# 
  1218  0FE5                     	;# 
  1219  0FE6                     	;# 
  1220  0FE7                     	;# 
  1221  0FE8                     	;# 
  1222  0FE9                     	;# 
  1223  0FEA                     	;# 
  1224  0FEB                     	;# 
  1225  0FED                     	;# 
  1226  0FEE                     	;# 
  1227  0FEF                     	;# 
  1228  0000                     	;# 
  1229  0001                     	;# 
  1230  0002                     	;# 
  1231  0003                     	;# 
  1232  0004                     	;# 
  1233  0005                     	;# 
  1234  0006                     	;# 
  1235  0007                     	;# 
  1236  0008                     	;# 
  1237  0009                     	;# 
  1238  000A                     	;# 
  1239  000B                     	;# 
  1240  000C                     	;# 
  1241  000D                     	;# 
  1242  000E                     	;# 
  1243  000F                     	;# 
  1244  0010                     	;# 
  1245  0011                     	;# 
  1246  0012                     	;# 
  1247  0013                     	;# 
  1248  0014                     	;# 
  1249  0015                     	;# 
  1250  0016                     	;# 
  1251  0016                     	;# 
  1252  0017                     	;# 
  1253  0018                     	;# 
  1254  0019                     	;# 
  1255  001A                     	;# 
  1256  001B                     	;# 
  1257  001C                     	;# 
  1258  008C                     	;# 
  1259  008D                     	;# 
  1260  008E                     	;# 
  1261  008F                     	;# 
  1262  0090                     	;# 
  1263  0091                     	;# 
  1264  0092                     	;# 
  1265  0093                     	;# 
  1266  0094                     	;# 
  1267  0095                     	;# 
  1268  0096                     	;# 
  1269  0097                     	;# 
  1270  0099                     	;# 
  1271  009A                     	;# 
  1272  009B                     	;# 
  1273  009B                     	;# 
  1274  009C                     	;# 
  1275  009D                     	;# 
  1276  009E                     	;# 
  1277  010C                     	;# 
  1278  010D                     	;# 
  1279  010E                     	;# 
  1280  010F                     	;# 
  1281  0110                     	;# 
  1282  0116                     	;# 
  1283  0117                     	;# 
  1284  011D                     	;# 
  1285  018C                     	;# 
  1286  018D                     	;# 
  1287  018F                     	;# 
  1288  0190                     	;# 
  1289  0191                     	;# 
  1290  0191                     	;# 
  1291  0192                     	;# 
  1292  0193                     	;# 
  1293  0193                     	;# 
  1294  0194                     	;# 
  1295  0195                     	;# 
  1296  0196                     	;# 
  1297  0197                     	;# 
  1298  0199                     	;# 
  1299  0199                     	;# 
  1300  0199                     	;# 
  1301  019A                     	;# 
  1302  019A                     	;# 
  1303  019A                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019C                     	;# 
  1312  019D                     	;# 
  1313  019D                     	;# 
  1314  019D                     	;# 
  1315  019E                     	;# 
  1316  019E                     	;# 
  1317  019E                     	;# 
  1318  019F                     	;# 
  1319  019F                     	;# 
  1320  019F                     	;# 
  1321  020D                     	;# 
  1322  020F                     	;# 
  1323  0210                     	;# 
  1324  0211                     	;# 
  1325  0211                     	;# 
  1326  0212                     	;# 
  1327  0212                     	;# 
  1328  0213                     	;# 
  1329  0213                     	;# 
  1330  0214                     	;# 
  1331  0214                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0215                     	;# 
  1335  0216                     	;# 
  1336  0216                     	;# 
  1337  0217                     	;# 
  1338  0217                     	;# 
  1339  0219                     	;# 
  1340  021A                     	;# 
  1341  021B                     	;# 
  1342  021C                     	;# 
  1343  021D                     	;# 
  1344  021E                     	;# 
  1345  021F                     	;# 
  1346  028C                     	;# 
  1347  028D                     	;# 
  1348  0291                     	;# 
  1349  0291                     	;# 
  1350  0292                     	;# 
  1351  0293                     	;# 
  1352  0298                     	;# 
  1353  0298                     	;# 
  1354  0299                     	;# 
  1355  029A                     	;# 
  1356  029D                     	;# 
  1357  029E                     	;# 
  1358  029F                     	;# 
  1359  030C                     	;# 
  1360  030D                     	;# 
  1361  0311                     	;# 
  1362  0311                     	;# 
  1363  0312                     	;# 
  1364  0313                     	;# 
  1365  0318                     	;# 
  1366  0318                     	;# 
  1367  0319                     	;# 
  1368  031A                     	;# 
  1369  031C                     	;# 
  1370  031C                     	;# 
  1371  031D                     	;# 
  1372  031E                     	;# 
  1373  038C                     	;# 
  1374  038D                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  040C                     	;# 
  1379  040D                     	;# 
  1380  0411                     	;# 
  1381  0411                     	;# 
  1382  0412                     	;# 
  1383  0413                     	;# 
  1384  0414                     	;# 
  1385  0415                     	;# 
  1386  0416                     	;# 
  1387  0417                     	;# 
  1388  0418                     	;# 
  1389  0418                     	;# 
  1390  0419                     	;# 
  1391  041A                     	;# 
  1392  041B                     	;# 
  1393  041C                     	;# 
  1394  041D                     	;# 
  1395  041E                     	;# 
  1396  048D                     	;# 
  1397  0491                     	;# 
  1398  0491                     	;# 
  1399  0492                     	;# 
  1400  0492                     	;# 
  1401  0493                     	;# 
  1402  0493                     	;# 
  1403  0493                     	;# 
  1404  0494                     	;# 
  1405  0494                     	;# 
  1406  0495                     	;# 
  1407  0495                     	;# 
  1408  0496                     	;# 
  1409  0496                     	;# 
  1410  0497                     	;# 
  1411  0497                     	;# 
  1412  0595                     	;# 
  1413  0596                     	;# 
  1414  0597                     	;# 
  1415  059C                     	;# 
  1416  059D                     	;# 
  1417  059E                     	;# 
  1418  0611                     	;# 
  1419  0611                     	;# 
  1420  0612                     	;# 
  1421  0613                     	;# 
  1422  0614                     	;# 
  1423  0614                     	;# 
  1424  0615                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0617                     	;# 
  1428  0618                     	;# 
  1429  0619                     	;# 
  1430  061A                     	;# 
  1431  061A                     	;# 
  1432  061B                     	;# 
  1433  061C                     	;# 
  1434  061D                     	;# 
  1435  061D                     	;# 
  1436  061E                     	;# 
  1437  061F                     	;# 
  1438  0FE4                     	;# 
  1439  0FE5                     	;# 
  1440  0FE6                     	;# 
  1441  0FE7                     	;# 
  1442  0FE8                     	;# 
  1443  0FE9                     	;# 
  1444  0FEA                     	;# 
  1445  0FEB                     	;# 
  1446  0FED                     	;# 
  1447  0FEE                     	;# 
  1448  0FEF                     	;# 
  1449  0000                     	;# 
  1450  0001                     	;# 
  1451  0002                     	;# 
  1452  0003                     	;# 
  1453  0004                     	;# 
  1454  0005                     	;# 
  1455  0006                     	;# 
  1456  0007                     	;# 
  1457  0008                     	;# 
  1458  0009                     	;# 
  1459  000A                     	;# 
  1460  000B                     	;# 
  1461  000C                     	;# 
  1462  000D                     	;# 
  1463  000E                     	;# 
  1464  000F                     	;# 
  1465  0010                     	;# 
  1466  0011                     	;# 
  1467  0012                     	;# 
  1468  0013                     	;# 
  1469  0014                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001C                     	;# 
  1479  008C                     	;# 
  1480  008D                     	;# 
  1481  008E                     	;# 
  1482  008F                     	;# 
  1483  0090                     	;# 
  1484  0091                     	;# 
  1485  0092                     	;# 
  1486  0093                     	;# 
  1487  0094                     	;# 
  1488  0095                     	;# 
  1489  0096                     	;# 
  1490  0097                     	;# 
  1491  0099                     	;# 
  1492  009A                     	;# 
  1493  009B                     	;# 
  1494  009B                     	;# 
  1495  009C                     	;# 
  1496  009D                     	;# 
  1497  009E                     	;# 
  1498  010C                     	;# 
  1499  010D                     	;# 
  1500  010E                     	;# 
  1501  010F                     	;# 
  1502  0110                     	;# 
  1503  0116                     	;# 
  1504  0117                     	;# 
  1505  011D                     	;# 
  1506  018C                     	;# 
  1507  018D                     	;# 
  1508  018F                     	;# 
  1509  0190                     	;# 
  1510  0191                     	;# 
  1511  0191                     	;# 
  1512  0192                     	;# 
  1513  0193                     	;# 
  1514  0193                     	;# 
  1515  0194                     	;# 
  1516  0195                     	;# 
  1517  0196                     	;# 
  1518  0197                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  0199                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019A                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019C                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019D                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  019F                     	;# 
  1542  020D                     	;# 
  1543  020F                     	;# 
  1544  0210                     	;# 
  1545  0211                     	;# 
  1546  0211                     	;# 
  1547  0212                     	;# 
  1548  0212                     	;# 
  1549  0213                     	;# 
  1550  0213                     	;# 
  1551  0214                     	;# 
  1552  0214                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0215                     	;# 
  1556  0216                     	;# 
  1557  0216                     	;# 
  1558  0217                     	;# 
  1559  0217                     	;# 
  1560  0219                     	;# 
  1561  021A                     	;# 
  1562  021B                     	;# 
  1563  021C                     	;# 
  1564  021D                     	;# 
  1565  021E                     	;# 
  1566  021F                     	;# 
  1567  028C                     	;# 
  1568  028D                     	;# 
  1569  0291                     	;# 
  1570  0291                     	;# 
  1571  0292                     	;# 
  1572  0293                     	;# 
  1573  0298                     	;# 
  1574  0298                     	;# 
  1575  0299                     	;# 
  1576  029A                     	;# 
  1577  029D                     	;# 
  1578  029E                     	;# 
  1579  029F                     	;# 
  1580  030C                     	;# 
  1581  030D                     	;# 
  1582  0311                     	;# 
  1583  0311                     	;# 
  1584  0312                     	;# 
  1585  0313                     	;# 
  1586  0318                     	;# 
  1587  0318                     	;# 
  1588  0319                     	;# 
  1589  031A                     	;# 
  1590  031C                     	;# 
  1591  031C                     	;# 
  1592  031D                     	;# 
  1593  031E                     	;# 
  1594  038C                     	;# 
  1595  038D                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  040C                     	;# 
  1600  040D                     	;# 
  1601  0411                     	;# 
  1602  0411                     	;# 
  1603  0412                     	;# 
  1604  0413                     	;# 
  1605  0414                     	;# 
  1606  0415                     	;# 
  1607  0416                     	;# 
  1608  0417                     	;# 
  1609  0418                     	;# 
  1610  0418                     	;# 
  1611  0419                     	;# 
  1612  041A                     	;# 
  1613  041B                     	;# 
  1614  041C                     	;# 
  1615  041D                     	;# 
  1616  041E                     	;# 
  1617  048D                     	;# 
  1618  0491                     	;# 
  1619  0491                     	;# 
  1620  0492                     	;# 
  1621  0492                     	;# 
  1622  0493                     	;# 
  1623  0493                     	;# 
  1624  0493                     	;# 
  1625  0494                     	;# 
  1626  0494                     	;# 
  1627  0495                     	;# 
  1628  0495                     	;# 
  1629  0496                     	;# 
  1630  0496                     	;# 
  1631  0497                     	;# 
  1632  0497                     	;# 
  1633  0595                     	;# 
  1634  0596                     	;# 
  1635  0597                     	;# 
  1636  059C                     	;# 
  1637  059D                     	;# 
  1638  059E                     	;# 
  1639  0611                     	;# 
  1640  0611                     	;# 
  1641  0612                     	;# 
  1642  0613                     	;# 
  1643  0614                     	;# 
  1644  0614                     	;# 
  1645  0615                     	;# 
  1646  0616                     	;# 
  1647  0617                     	;# 
  1648  0617                     	;# 
  1649  0618                     	;# 
  1650  0619                     	;# 
  1651  061A                     	;# 
  1652  061A                     	;# 
  1653  061B                     	;# 
  1654  061C                     	;# 
  1655  061D                     	;# 
  1656  061D                     	;# 
  1657  061E                     	;# 
  1658  061F                     	;# 
  1659  0FE4                     	;# 
  1660  0FE5                     	;# 
  1661  0FE6                     	;# 
  1662  0FE7                     	;# 
  1663  0FE8                     	;# 
  1664  0FE9                     	;# 
  1665  0FEA                     	;# 
  1666  0FEB                     	;# 
  1667  0FED                     	;# 
  1668  0FEE                     	;# 
  1669  0FEF                     	;# 
  1670  0000                     	;# 
  1671  0001                     	;# 
  1672  0002                     	;# 
  1673  0003                     	;# 
  1674  0004                     	;# 
  1675  0005                     	;# 
  1676  0006                     	;# 
  1677  0007                     	;# 
  1678  0008                     	;# 
  1679  0009                     	;# 
  1680  000A                     	;# 
  1681  000B                     	;# 
  1682  000C                     	;# 
  1683  000D                     	;# 
  1684  000E                     	;# 
  1685  000F                     	;# 
  1686  0010                     	;# 
  1687  0011                     	;# 
  1688  0012                     	;# 
  1689  0013                     	;# 
  1690  0014                     	;# 
  1691  0015                     	;# 
  1692  0016                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  0019                     	;# 
  1697  001A                     	;# 
  1698  001B                     	;# 
  1699  001C                     	;# 
  1700  008C                     	;# 
  1701  008D                     	;# 
  1702  008E                     	;# 
  1703  008F                     	;# 
  1704  0090                     	;# 
  1705  0091                     	;# 
  1706  0092                     	;# 
  1707  0093                     	;# 
  1708  0094                     	;# 
  1709  0095                     	;# 
  1710  0096                     	;# 
  1711  0097                     	;# 
  1712  0099                     	;# 
  1713  009A                     	;# 
  1714  009B                     	;# 
  1715  009B                     	;# 
  1716  009C                     	;# 
  1717  009D                     	;# 
  1718  009E                     	;# 
  1719  010C                     	;# 
  1720  010D                     	;# 
  1721  010E                     	;# 
  1722  010F                     	;# 
  1723  0110                     	;# 
  1724  0116                     	;# 
  1725  0117                     	;# 
  1726  011D                     	;# 
  1727  018C                     	;# 
  1728  018D                     	;# 
  1729  018F                     	;# 
  1730  0190                     	;# 
  1731  0191                     	;# 
  1732  0191                     	;# 
  1733  0192                     	;# 
  1734  0193                     	;# 
  1735  0193                     	;# 
  1736  0194                     	;# 
  1737  0195                     	;# 
  1738  0196                     	;# 
  1739  0197                     	;# 
  1740  0199                     	;# 
  1741  0199                     	;# 
  1742  0199                     	;# 
  1743  019A                     	;# 
  1744  019A                     	;# 
  1745  019A                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019C                     	;# 
  1752  019C                     	;# 
  1753  019C                     	;# 
  1754  019D                     	;# 
  1755  019D                     	;# 
  1756  019D                     	;# 
  1757  019E                     	;# 
  1758  019E                     	;# 
  1759  019E                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  019F                     	;# 
  1763  020D                     	;# 
  1764  020F                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0219                     	;# 
  1782  021A                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021D                     	;# 
  1786  021E                     	;# 
  1787  021F                     	;# 
  1788  028C                     	;# 
  1789  028D                     	;# 
  1790  0291                     	;# 
  1791  0291                     	;# 
  1792  0292                     	;# 
  1793  0293                     	;# 
  1794  0298                     	;# 
  1795  0298                     	;# 
  1796  0299                     	;# 
  1797  029A                     	;# 
  1798  029D                     	;# 
  1799  029E                     	;# 
  1800  029F                     	;# 
  1801  030C                     	;# 
  1802  030D                     	;# 
  1803  0311                     	;# 
  1804  0311                     	;# 
  1805  0312                     	;# 
  1806  0313                     	;# 
  1807  0318                     	;# 
  1808  0318                     	;# 
  1809  0319                     	;# 
  1810  031A                     	;# 
  1811  031C                     	;# 
  1812  031C                     	;# 
  1813  031D                     	;# 
  1814  031E                     	;# 
  1815  038C                     	;# 
  1816  038D                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  040C                     	;# 
  1821  040D                     	;# 
  1822  0411                     	;# 
  1823  0411                     	;# 
  1824  0412                     	;# 
  1825  0413                     	;# 
  1826  0414                     	;# 
  1827  0415                     	;# 
  1828  0416                     	;# 
  1829  0417                     	;# 
  1830  0418                     	;# 
  1831  0418                     	;# 
  1832  0419                     	;# 
  1833  041A                     	;# 
  1834  041B                     	;# 
  1835  041C                     	;# 
  1836  041D                     	;# 
  1837  041E                     	;# 
  1838  048D                     	;# 
  1839  0491                     	;# 
  1840  0491                     	;# 
  1841  0492                     	;# 
  1842  0492                     	;# 
  1843  0493                     	;# 
  1844  0493                     	;# 
  1845  0493                     	;# 
  1846  0494                     	;# 
  1847  0494                     	;# 
  1848  0495                     	;# 
  1849  0495                     	;# 
  1850  0496                     	;# 
  1851  0496                     	;# 
  1852  0497                     	;# 
  1853  0497                     	;# 
  1854  0595                     	;# 
  1855  0596                     	;# 
  1856  0597                     	;# 
  1857  059C                     	;# 
  1858  059D                     	;# 
  1859  059E                     	;# 
  1860  0611                     	;# 
  1861  0611                     	;# 
  1862  0612                     	;# 
  1863  0613                     	;# 
  1864  0614                     	;# 
  1865  0614                     	;# 
  1866  0615                     	;# 
  1867  0616                     	;# 
  1868  0617                     	;# 
  1869  0617                     	;# 
  1870  0618                     	;# 
  1871  0619                     	;# 
  1872  061A                     	;# 
  1873  061A                     	;# 
  1874  061B                     	;# 
  1875  061C                     	;# 
  1876  061D                     	;# 
  1877  061D                     	;# 
  1878  061E                     	;# 
  1879  061F                     	;# 
  1880  0FE4                     	;# 
  1881  0FE5                     	;# 
  1882  0FE6                     	;# 
  1883  0FE7                     	;# 
  1884  0FE8                     	;# 
  1885  0FE9                     	;# 
  1886  0FEA                     	;# 
  1887  0FEB                     	;# 
  1888  0FED                     	;# 
  1889  0FEE                     	;# 
  1890  0FEF                     	;# 
  1891  0000                     	;# 
  1892  0001                     	;# 
  1893  0002                     	;# 
  1894  0003                     	;# 
  1895  0004                     	;# 
  1896  0005                     	;# 
  1897  0006                     	;# 
  1898  0007                     	;# 
  1899  0008                     	;# 
  1900  0009                     	;# 
  1901  000A                     	;# 
  1902  000B                     	;# 
  1903  000C                     	;# 
  1904  000D                     	;# 
  1905  000E                     	;# 
  1906  000F                     	;# 
  1907  0010                     	;# 
  1908  0011                     	;# 
  1909  0012                     	;# 
  1910  0013                     	;# 
  1911  0014                     	;# 
  1912  0015                     	;# 
  1913  0016                     	;# 
  1914  0016                     	;# 
  1915  0017                     	;# 
  1916  0018                     	;# 
  1917  0019                     	;# 
  1918  001A                     	;# 
  1919  001B                     	;# 
  1920  001C                     	;# 
  1921  008C                     	;# 
  1922  008D                     	;# 
  1923  008E                     	;# 
  1924  008F                     	;# 
  1925  0090                     	;# 
  1926  0091                     	;# 
  1927  0092                     	;# 
  1928  0093                     	;# 
  1929  0094                     	;# 
  1930  0095                     	;# 
  1931  0096                     	;# 
  1932  0097                     	;# 
  1933  0099                     	;# 
  1934  009A                     	;# 
  1935  009B                     	;# 
  1936  009B                     	;# 
  1937  009C                     	;# 
  1938  009D                     	;# 
  1939  009E                     	;# 
  1940  010C                     	;# 
  1941  010D                     	;# 
  1942  010E                     	;# 
  1943  010F                     	;# 
  1944  0110                     	;# 
  1945  0116                     	;# 
  1946  0117                     	;# 
  1947  011D                     	;# 
  1948  018C                     	;# 
  1949  018D                     	;# 
  1950  018F                     	;# 
  1951  0190                     	;# 
  1952  0191                     	;# 
  1953  0191                     	;# 
  1954  0192                     	;# 
  1955  0193                     	;# 
  1956  0193                     	;# 
  1957  0194                     	;# 
  1958  0195                     	;# 
  1959  0196                     	;# 
  1960  0197                     	;# 
  1961  0199                     	;# 
  1962  0199                     	;# 
  1963  0199                     	;# 
  1964  019A                     	;# 
  1965  019A                     	;# 
  1966  019A                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019B                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019C                     	;# 
  1975  019D                     	;# 
  1976  019D                     	;# 
  1977  019D                     	;# 
  1978  019E                     	;# 
  1979  019E                     	;# 
  1980  019E                     	;# 
  1981  019F                     	;# 
  1982  019F                     	;# 
  1983  019F                     	;# 
  1984  020D                     	;# 
  1985  020F                     	;# 
  1986  0210                     	;# 
  1987  0211                     	;# 
  1988  0211                     	;# 
  1989  0212                     	;# 
  1990  0212                     	;# 
  1991  0213                     	;# 
  1992  0213                     	;# 
  1993  0214                     	;# 
  1994  0214                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0216                     	;# 
  1999  0216                     	;# 
  2000  0217                     	;# 
  2001  0217                     	;# 
  2002  0219                     	;# 
  2003  021A                     	;# 
  2004  021B                     	;# 
  2005  021C                     	;# 
  2006  021D                     	;# 
  2007  021E                     	;# 
  2008  021F                     	;# 
  2009  028C                     	;# 
  2010  028D                     	;# 
  2011  0291                     	;# 
  2012  0291                     	;# 
  2013  0292                     	;# 
  2014  0293                     	;# 
  2015  0298                     	;# 
  2016  0298                     	;# 
  2017  0299                     	;# 
  2018  029A                     	;# 
  2019  029D                     	;# 
  2020  029E                     	;# 
  2021  029F                     	;# 
  2022  030C                     	;# 
  2023  030D                     	;# 
  2024  0311                     	;# 
  2025  0311                     	;# 
  2026  0312                     	;# 
  2027  0313                     	;# 
  2028  0318                     	;# 
  2029  0318                     	;# 
  2030  0319                     	;# 
  2031  031A                     	;# 
  2032  031C                     	;# 
  2033  031C                     	;# 
  2034  031D                     	;# 
  2035  031E                     	;# 
  2036  038C                     	;# 
  2037  038D                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  040C                     	;# 
  2042  040D                     	;# 
  2043  0411                     	;# 
  2044  0411                     	;# 
  2045  0412                     	;# 
  2046  0413                     	;# 
  2047  0414                     	;# 
  2048  0415                     	;# 
  2049  0416                     	;# 
  2050  0417                     	;# 
  2051  0418                     	;# 
  2052  0418                     	;# 
  2053  0419                     	;# 
  2054  041A                     	;# 
  2055  041B                     	;# 
  2056  041C                     	;# 
  2057  041D                     	;# 
  2058  041E                     	;# 
  2059  048D                     	;# 
  2060  0491                     	;# 
  2061  0491                     	;# 
  2062  0492                     	;# 
  2063  0492                     	;# 
  2064  0493                     	;# 
  2065  0493                     	;# 
  2066  0493                     	;# 
  2067  0494                     	;# 
  2068  0494                     	;# 
  2069  0495                     	;# 
  2070  0495                     	;# 
  2071  0496                     	;# 
  2072  0496                     	;# 
  2073  0497                     	;# 
  2074  0497                     	;# 
  2075  0595                     	;# 
  2076  0596                     	;# 
  2077  0597                     	;# 
  2078  059C                     	;# 
  2079  059D                     	;# 
  2080  059E                     	;# 
  2081  0611                     	;# 
  2082  0611                     	;# 
  2083  0612                     	;# 
  2084  0613                     	;# 
  2085  0614                     	;# 
  2086  0614                     	;# 
  2087  0615                     	;# 
  2088  0616                     	;# 
  2089  0617                     	;# 
  2090  0617                     	;# 
  2091  0618                     	;# 
  2092  0619                     	;# 
  2093  061A                     	;# 
  2094  061A                     	;# 
  2095  061B                     	;# 
  2096  061C                     	;# 
  2097  061D                     	;# 
  2098  061D                     	;# 
  2099  061E                     	;# 
  2100  061F                     	;# 
  2101  0FE4                     	;# 
  2102  0FE5                     	;# 
  2103  0FE6                     	;# 
  2104  0FE7                     	;# 
  2105  0FE8                     	;# 
  2106  0FE9                     	;# 
  2107  0FEA                     	;# 
  2108  0FEB                     	;# 
  2109  0FED                     	;# 
  2110  0FEE                     	;# 
  2111  0FEF                     	;# 
  2112  0000                     	;# 
  2113  0001                     	;# 
  2114  0002                     	;# 
  2115  0003                     	;# 
  2116  0004                     	;# 
  2117  0005                     	;# 
  2118  0006                     	;# 
  2119  0007                     	;# 
  2120  0008                     	;# 
  2121  0009                     	;# 
  2122  000A                     	;# 
  2123  000B                     	;# 
  2124  000C                     	;# 
  2125  000D                     	;# 
  2126  000E                     	;# 
  2127  000F                     	;# 
  2128  0010                     	;# 
  2129  0011                     	;# 
  2130  0012                     	;# 
  2131  0013                     	;# 
  2132  0014                     	;# 
  2133  0015                     	;# 
  2134  0016                     	;# 
  2135  0016                     	;# 
  2136  0017                     	;# 
  2137  0018                     	;# 
  2138  0019                     	;# 
  2139  001A                     	;# 
  2140  001B                     	;# 
  2141  001C                     	;# 
  2142  008C                     	;# 
  2143  008D                     	;# 
  2144  008E                     	;# 
  2145  008F                     	;# 
  2146  0090                     	;# 
  2147  0091                     	;# 
  2148  0092                     	;# 
  2149  0093                     	;# 
  2150  0094                     	;# 
  2151  0095                     	;# 
  2152  0096                     	;# 
  2153  0097                     	;# 
  2154  0099                     	;# 
  2155  009A                     	;# 
  2156  009B                     	;# 
  2157  009B                     	;# 
  2158  009C                     	;# 
  2159  009D                     	;# 
  2160  009E                     	;# 
  2161  010C                     	;# 
  2162  010D                     	;# 
  2163  010E                     	;# 
  2164  010F                     	;# 
  2165  0110                     	;# 
  2166  0116                     	;# 
  2167  0117                     	;# 
  2168  011D                     	;# 
  2169  018C                     	;# 
  2170  018D                     	;# 
  2171  018F                     	;# 
  2172  0190                     	;# 
  2173  0191                     	;# 
  2174  0191                     	;# 
  2175  0192                     	;# 
  2176  0193                     	;# 
  2177  0193                     	;# 
  2178  0194                     	;# 
  2179  0195                     	;# 
  2180  0196                     	;# 
  2181  0197                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  020D                     	;# 
  2206  020F                     	;# 
  2207  0210                     	;# 
  2208  0211                     	;# 
  2209  0211                     	;# 
  2210  0212                     	;# 
  2211  0212                     	;# 
  2212  0213                     	;# 
  2213  0213                     	;# 
  2214  0214                     	;# 
  2215  0214                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0216                     	;# 
  2220  0216                     	;# 
  2221  0217                     	;# 
  2222  0217                     	;# 
  2223  0219                     	;# 
  2224  021A                     	;# 
  2225  021B                     	;# 
  2226  021C                     	;# 
  2227  021D                     	;# 
  2228  021E                     	;# 
  2229  021F                     	;# 
  2230  028C                     	;# 
  2231  028D                     	;# 
  2232  0291                     	;# 
  2233  0291                     	;# 
  2234  0292                     	;# 
  2235  0293                     	;# 
  2236  0298                     	;# 
  2237  0298                     	;# 
  2238  0299                     	;# 
  2239  029A                     	;# 
  2240  029D                     	;# 
  2241  029E                     	;# 
  2242  029F                     	;# 
  2243  030C                     	;# 
  2244  030D                     	;# 
  2245  0311                     	;# 
  2246  0311                     	;# 
  2247  0312                     	;# 
  2248  0313                     	;# 
  2249  0318                     	;# 
  2250  0318                     	;# 
  2251  0319                     	;# 
  2252  031A                     	;# 
  2253  031C                     	;# 
  2254  031C                     	;# 
  2255  031D                     	;# 
  2256  031E                     	;# 
  2257  038C                     	;# 
  2258  038D                     	;# 
  2259  0394                     	;# 
  2260  0395                     	;# 
  2261  0396                     	;# 
  2262  040C                     	;# 
  2263  040D                     	;# 
  2264  0411                     	;# 
  2265  0411                     	;# 
  2266  0412                     	;# 
  2267  0413                     	;# 
  2268  0414                     	;# 
  2269  0415                     	;# 
  2270  0416                     	;# 
  2271  0417                     	;# 
  2272  0418                     	;# 
  2273  0418                     	;# 
  2274  0419                     	;# 
  2275  041A                     	;# 
  2276  041B                     	;# 
  2277  041C                     	;# 
  2278  041D                     	;# 
  2279  041E                     	;# 
  2280  048D                     	;# 
  2281  0491                     	;# 
  2282  0491                     	;# 
  2283  0492                     	;# 
  2284  0492                     	;# 
  2285  0493                     	;# 
  2286  0493                     	;# 
  2287  0493                     	;# 
  2288  0494                     	;# 
  2289  0494                     	;# 
  2290  0495                     	;# 
  2291  0495                     	;# 
  2292  0496                     	;# 
  2293  0496                     	;# 
  2294  0497                     	;# 
  2295  0497                     	;# 
  2296  0595                     	;# 
  2297  0596                     	;# 
  2298  0597                     	;# 
  2299  059C                     	;# 
  2300  059D                     	;# 
  2301  059E                     	;# 
  2302  0611                     	;# 
  2303  0611                     	;# 
  2304  0612                     	;# 
  2305  0613                     	;# 
  2306  0614                     	;# 
  2307  0614                     	;# 
  2308  0615                     	;# 
  2309  0616                     	;# 
  2310  0617                     	;# 
  2311  0617                     	;# 
  2312  0618                     	;# 
  2313  0619                     	;# 
  2314  061A                     	;# 
  2315  061A                     	;# 
  2316  061B                     	;# 
  2317  061C                     	;# 
  2318  061D                     	;# 
  2319  061D                     	;# 
  2320  061E                     	;# 
  2321  061F                     	;# 
  2322  0FE4                     	;# 
  2323  0FE5                     	;# 
  2324  0FE6                     	;# 
  2325  0FE7                     	;# 
  2326  0FE8                     	;# 
  2327  0FE9                     	;# 
  2328  0FEA                     	;# 
  2329  0FEB                     	;# 
  2330  0FED                     	;# 
  2331  0FEE                     	;# 
  2332  0FEF                     	;# 
  2333  0000                     	;# 
  2334  0001                     	;# 
  2335  0002                     	;# 
  2336  0003                     	;# 
  2337  0004                     	;# 
  2338  0005                     	;# 
  2339  0006                     	;# 
  2340  0007                     	;# 
  2341  0008                     	;# 
  2342  0009                     	;# 
  2343  000A                     	;# 
  2344  000B                     	;# 
  2345  000C                     	;# 
  2346  000D                     	;# 
  2347  000E                     	;# 
  2348  000F                     	;# 
  2349  0010                     	;# 
  2350  0011                     	;# 
  2351  0012                     	;# 
  2352  0013                     	;# 
  2353  0014                     	;# 
  2354  0015                     	;# 
  2355  0016                     	;# 
  2356  0016                     	;# 
  2357  0017                     	;# 
  2358  0018                     	;# 
  2359  0019                     	;# 
  2360  001A                     	;# 
  2361  001B                     	;# 
  2362  001C                     	;# 
  2363  008C                     	;# 
  2364  008D                     	;# 
  2365  008E                     	;# 
  2366  008F                     	;# 
  2367  0090                     	;# 
  2368  0091                     	;# 
  2369  0092                     	;# 
  2370  0093                     	;# 
  2371  0094                     	;# 
  2372  0095                     	;# 
  2373  0096                     	;# 
  2374  0097                     	;# 
  2375  0099                     	;# 
  2376  009A                     	;# 
  2377  009B                     	;# 
  2378  009B                     	;# 
  2379  009C                     	;# 
  2380  009D                     	;# 
  2381  009E                     	;# 
  2382  010C                     	;# 
  2383  010D                     	;# 
  2384  010E                     	;# 
  2385  010F                     	;# 
  2386  0110                     	;# 
  2387  0116                     	;# 
  2388  0117                     	;# 
  2389  011D                     	;# 
  2390  018C                     	;# 
  2391  018D                     	;# 
  2392  018F                     	;# 
  2393  0190                     	;# 
  2394  0191                     	;# 
  2395  0191                     	;# 
  2396  0192                     	;# 
  2397  0193                     	;# 
  2398  0193                     	;# 
  2399  0194                     	;# 
  2400  0195                     	;# 
  2401  0196                     	;# 
  2402  0197                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  0199                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019A                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019B                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019C                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019D                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019E                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  019F                     	;# 
  2426  020D                     	;# 
  2427  020F                     	;# 
  2428  0210                     	;# 
  2429  0211                     	;# 
  2430  0211                     	;# 
  2431  0212                     	;# 
  2432  0212                     	;# 
  2433  0213                     	;# 
  2434  0213                     	;# 
  2435  0214                     	;# 
  2436  0214                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0215                     	;# 
  2440  0216                     	;# 
  2441  0216                     	;# 
  2442  0217                     	;# 
  2443  0217                     	;# 
  2444  0219                     	;# 
  2445  021A                     	;# 
  2446  021B                     	;# 
  2447  021C                     	;# 
  2448  021D                     	;# 
  2449  021E                     	;# 
  2450  021F                     	;# 
  2451  028C                     	;# 
  2452  028D                     	;# 
  2453  0291                     	;# 
  2454  0291                     	;# 
  2455  0292                     	;# 
  2456  0293                     	;# 
  2457  0298                     	;# 
  2458  0298                     	;# 
  2459  0299                     	;# 
  2460  029A                     	;# 
  2461  029D                     	;# 
  2462  029E                     	;# 
  2463  029F                     	;# 
  2464  030C                     	;# 
  2465  030D                     	;# 
  2466  0311                     	;# 
  2467  0311                     	;# 
  2468  0312                     	;# 
  2469  0313                     	;# 
  2470  0318                     	;# 
  2471  0318                     	;# 
  2472  0319                     	;# 
  2473  031A                     	;# 
  2474  031C                     	;# 
  2475  031C                     	;# 
  2476  031D                     	;# 
  2477  031E                     	;# 
  2478  038C                     	;# 
  2479  038D                     	;# 
  2480  0394                     	;# 
  2481  0395                     	;# 
  2482  0396                     	;# 
  2483  040C                     	;# 
  2484  040D                     	;# 
  2485  0411                     	;# 
  2486  0411                     	;# 
  2487  0412                     	;# 
  2488  0413                     	;# 
  2489  0414                     	;# 
  2490  0415                     	;# 
  2491  0416                     	;# 
  2492  0417                     	;# 
  2493  0418                     	;# 
  2494  0418                     	;# 
  2495  0419                     	;# 
  2496  041A                     	;# 
  2497  041B                     	;# 
  2498  041C                     	;# 
  2499  041D                     	;# 
  2500  041E                     	;# 
  2501  048D                     	;# 
  2502  0491                     	;# 
  2503  0491                     	;# 
  2504  0492                     	;# 
  2505  0492                     	;# 
  2506  0493                     	;# 
  2507  0493                     	;# 
  2508  0493                     	;# 
  2509  0494                     	;# 
  2510  0494                     	;# 
  2511  0495                     	;# 
  2512  0495                     	;# 
  2513  0496                     	;# 
  2514  0496                     	;# 
  2515  0497                     	;# 
  2516  0497                     	;# 
  2517  0595                     	;# 
  2518  0596                     	;# 
  2519  0597                     	;# 
  2520  059C                     	;# 
  2521  059D                     	;# 
  2522  059E                     	;# 
  2523  0611                     	;# 
  2524  0611                     	;# 
  2525  0612                     	;# 
  2526  0613                     	;# 
  2527  0614                     	;# 
  2528  0614                     	;# 
  2529  0615                     	;# 
  2530  0616                     	;# 
  2531  0617                     	;# 
  2532  0617                     	;# 
  2533  0618                     	;# 
  2534  0619                     	;# 
  2535  061A                     	;# 
  2536  061A                     	;# 
  2537  061B                     	;# 
  2538  061C                     	;# 
  2539  061D                     	;# 
  2540  061D                     	;# 
  2541  061E                     	;# 
  2542  061F                     	;# 
  2543  0FE4                     	;# 
  2544  0FE5                     	;# 
  2545  0FE6                     	;# 
  2546  0FE7                     	;# 
  2547  0FE8                     	;# 
  2548  0FE9                     	;# 
  2549  0FEA                     	;# 
  2550  0FEB                     	;# 
  2551  0FED                     	;# 
  2552  0FEE                     	;# 
  2553  0FEF                     	;# 
  2554  0000                     	;# 
  2555  0001                     	;# 
  2556  0002                     	;# 
  2557  0003                     	;# 
  2558  0004                     	;# 
  2559  0005                     	;# 
  2560  0006                     	;# 
  2561  0007                     	;# 
  2562  0008                     	;# 
  2563  0009                     	;# 
  2564  000A                     	;# 
  2565  000B                     	;# 
  2566  000C                     	;# 
  2567  000D                     	;# 
  2568  000E                     	;# 
  2569  000F                     	;# 
  2570  0010                     	;# 
  2571  0011                     	;# 
  2572  0012                     	;# 
  2573  0013                     	;# 
  2574  0014                     	;# 
  2575  0015                     	;# 
  2576  0016                     	;# 
  2577  0016                     	;# 
  2578  0017                     	;# 
  2579  0018                     	;# 
  2580  0019                     	;# 
  2581  001A                     	;# 
  2582  001B                     	;# 
  2583  001C                     	;# 
  2584  008C                     	;# 
  2585  008D                     	;# 
  2586  008E                     	;# 
  2587  008F                     	;# 
  2588  0090                     	;# 
  2589  0091                     	;# 
  2590  0092                     	;# 
  2591  0093                     	;# 
  2592  0094                     	;# 
  2593  0095                     	;# 
  2594  0096                     	;# 
  2595  0097                     	;# 
  2596  0099                     	;# 
  2597  009A                     	;# 
  2598  009B                     	;# 
  2599  009B                     	;# 
  2600  009C                     	;# 
  2601  009D                     	;# 
  2602  009E                     	;# 
  2603  010C                     	;# 
  2604  010D                     	;# 
  2605  010E                     	;# 
  2606  010F                     	;# 
  2607  0110                     	;# 
  2608  0116                     	;# 
  2609  0117                     	;# 
  2610  011D                     	;# 
  2611  018C                     	;# 
  2612  018D                     	;# 
  2613  018F                     	;# 
  2614  0190                     	;# 
  2615  0191                     	;# 
  2616  0191                     	;# 
  2617  0192                     	;# 
  2618  0193                     	;# 
  2619  0193                     	;# 
  2620  0194                     	;# 
  2621  0195                     	;# 
  2622  0196                     	;# 
  2623  0197                     	;# 
  2624  0199                     	;# 
  2625  0199                     	;# 
  2626  0199                     	;# 
  2627  019A                     	;# 
  2628  019A                     	;# 
  2629  019A                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019B                     	;# 
  2634  019B                     	;# 
  2635  019C                     	;# 
  2636  019C                     	;# 
  2637  019C                     	;# 
  2638  019D                     	;# 
  2639  019D                     	;# 
  2640  019D                     	;# 
  2641  019E                     	;# 
  2642  019E                     	;# 
  2643  019E                     	;# 
  2644  019F                     	;# 
  2645  019F                     	;# 
  2646  019F                     	;# 
  2647  020D                     	;# 
  2648  020F                     	;# 
  2649  0210                     	;# 
  2650  0211                     	;# 
  2651  0211                     	;# 
  2652  0212                     	;# 
  2653  0212                     	;# 
  2654  0213                     	;# 
  2655  0213                     	;# 
  2656  0214                     	;# 
  2657  0214                     	;# 
  2658  0215                     	;# 
  2659  0215                     	;# 
  2660  0215                     	;# 
  2661  0216                     	;# 
  2662  0216                     	;# 
  2663  0217                     	;# 
  2664  0217                     	;# 
  2665  0219                     	;# 
  2666  021A                     	;# 
  2667  021B                     	;# 
  2668  021C                     	;# 
  2669  021D                     	;# 
  2670  021E                     	;# 
  2671  021F                     	;# 
  2672  028C                     	;# 
  2673  028D                     	;# 
  2674  0291                     	;# 
  2675  0291                     	;# 
  2676  0292                     	;# 
  2677  0293                     	;# 
  2678  0298                     	;# 
  2679  0298                     	;# 
  2680  0299                     	;# 
  2681  029A                     	;# 
  2682  029D                     	;# 
  2683  029E                     	;# 
  2684  029F                     	;# 
  2685  030C                     	;# 
  2686  030D                     	;# 
  2687  0311                     	;# 
  2688  0311                     	;# 
  2689  0312                     	;# 
  2690  0313                     	;# 
  2691  0318                     	;# 
  2692  0318                     	;# 
  2693  0319                     	;# 
  2694  031A                     	;# 
  2695  031C                     	;# 
  2696  031C                     	;# 
  2697  031D                     	;# 
  2698  031E                     	;# 
  2699  038C                     	;# 
  2700  038D                     	;# 
  2701  0394                     	;# 
  2702  0395                     	;# 
  2703  0396                     	;# 
  2704  040C                     	;# 
  2705  040D                     	;# 
  2706  0411                     	;# 
  2707  0411                     	;# 
  2708  0412                     	;# 
  2709  0413                     	;# 
  2710  0414                     	;# 
  2711  0415                     	;# 
  2712  0416                     	;# 
  2713  0417                     	;# 
  2714  0418                     	;# 
  2715  0418                     	;# 
  2716  0419                     	;# 
  2717  041A                     	;# 
  2718  041B                     	;# 
  2719  041C                     	;# 
  2720  041D                     	;# 
  2721  041E                     	;# 
  2722  048D                     	;# 
  2723  0491                     	;# 
  2724  0491                     	;# 
  2725  0492                     	;# 
  2726  0492                     	;# 
  2727  0493                     	;# 
  2728  0493                     	;# 
  2729  0493                     	;# 
  2730  0494                     	;# 
  2731  0494                     	;# 
  2732  0495                     	;# 
  2733  0495                     	;# 
  2734  0496                     	;# 
  2735  0496                     	;# 
  2736  0497                     	;# 
  2737  0497                     	;# 
  2738  0595                     	;# 
  2739  0596                     	;# 
  2740  0597                     	;# 
  2741  059C                     	;# 
  2742  059D                     	;# 
  2743  059E                     	;# 
  2744  0611                     	;# 
  2745  0611                     	;# 
  2746  0612                     	;# 
  2747  0613                     	;# 
  2748  0614                     	;# 
  2749  0614                     	;# 
  2750  0615                     	;# 
  2751  0616                     	;# 
  2752  0617                     	;# 
  2753  0617                     	;# 
  2754  0618                     	;# 
  2755  0619                     	;# 
  2756  061A                     	;# 
  2757  061A                     	;# 
  2758  061B                     	;# 
  2759  061C                     	;# 
  2760  061D                     	;# 
  2761  061D                     	;# 
  2762  061E                     	;# 
  2763  061F                     	;# 
  2764  0FE4                     	;# 
  2765  0FE5                     	;# 
  2766  0FE6                     	;# 
  2767  0FE7                     	;# 
  2768  0FE8                     	;# 
  2769  0FE9                     	;# 
  2770  0FEA                     	;# 
  2771  0FEB                     	;# 
  2772  0FED                     	;# 
  2773  0FEE                     	;# 
  2774  0FEF                     	;# 
  2775  0000                     	;# 
  2776  0001                     	;# 
  2777  0002                     	;# 
  2778  0003                     	;# 
  2779  0004                     	;# 
  2780  0005                     	;# 
  2781  0006                     	;# 
  2782  0007                     	;# 
  2783  0008                     	;# 
  2784  0009                     	;# 
  2785  000A                     	;# 
  2786  000B                     	;# 
  2787  000C                     	;# 
  2788  000D                     	;# 
  2789  000E                     	;# 
  2790  000F                     	;# 
  2791  0010                     	;# 
  2792  0011                     	;# 
  2793  0012                     	;# 
  2794  0013                     	;# 
  2795  0014                     	;# 
  2796  0015                     	;# 
  2797  0016                     	;# 
  2798  0016                     	;# 
  2799  0017                     	;# 
  2800  0018                     	;# 
  2801  0019                     	;# 
  2802  001A                     	;# 
  2803  001B                     	;# 
  2804  001C                     	;# 
  2805  008C                     	;# 
  2806  008D                     	;# 
  2807  008E                     	;# 
  2808  008F                     	;# 
  2809  0090                     	;# 
  2810  0091                     	;# 
  2811  0092                     	;# 
  2812  0093                     	;# 
  2813  0094                     	;# 
  2814  0095                     	;# 
  2815  0096                     	;# 
  2816  0097                     	;# 
  2817  0099                     	;# 
  2818  009A                     	;# 
  2819  009B                     	;# 
  2820  009B                     	;# 
  2821  009C                     	;# 
  2822  009D                     	;# 
  2823  009E                     	;# 
  2824  010C                     	;# 
  2825  010D                     	;# 
  2826  010E                     	;# 
  2827  010F                     	;# 
  2828  0110                     	;# 
  2829  0116                     	;# 
  2830  0117                     	;# 
  2831  011D                     	;# 
  2832  018C                     	;# 
  2833  018D                     	;# 
  2834  018F                     	;# 
  2835  0190                     	;# 
  2836  0191                     	;# 
  2837  0191                     	;# 
  2838  0192                     	;# 
  2839  0193                     	;# 
  2840  0193                     	;# 
  2841  0194                     	;# 
  2842  0195                     	;# 
  2843  0196                     	;# 
  2844  0197                     	;# 
  2845  0199                     	;# 
  2846  0199                     	;# 
  2847  0199                     	;# 
  2848  019A                     	;# 
  2849  019A                     	;# 
  2850  019A                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019C                     	;# 
  2857  019C                     	;# 
  2858  019C                     	;# 
  2859  019D                     	;# 
  2860  019D                     	;# 
  2861  019D                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019E                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  019F                     	;# 
  2868  020D                     	;# 
  2869  020F                     	;# 
  2870  0210                     	;# 
  2871  0211                     	;# 
  2872  0211                     	;# 
  2873  0212                     	;# 
  2874  0212                     	;# 
  2875  0213                     	;# 
  2876  0213                     	;# 
  2877  0214                     	;# 
  2878  0214                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0215                     	;# 
  2882  0216                     	;# 
  2883  0216                     	;# 
  2884  0217                     	;# 
  2885  0217                     	;# 
  2886  0219                     	;# 
  2887  021A                     	;# 
  2888  021B                     	;# 
  2889  021C                     	;# 
  2890  021D                     	;# 
  2891  021E                     	;# 
  2892  021F                     	;# 
  2893  028C                     	;# 
  2894  028D                     	;# 
  2895  0291                     	;# 
  2896  0291                     	;# 
  2897  0292                     	;# 
  2898  0293                     	;# 
  2899  0298                     	;# 
  2900  0298                     	;# 
  2901  0299                     	;# 
  2902  029A                     	;# 
  2903  029D                     	;# 
  2904  029E                     	;# 
  2905  029F                     	;# 
  2906  030C                     	;# 
  2907  030D                     	;# 
  2908  0311                     	;# 
  2909  0311                     	;# 
  2910  0312                     	;# 
  2911  0313                     	;# 
  2912  0318                     	;# 
  2913  0318                     	;# 
  2914  0319                     	;# 
  2915  031A                     	;# 
  2916  031C                     	;# 
  2917  031C                     	;# 
  2918  031D                     	;# 
  2919  031E                     	;# 
  2920  038C                     	;# 
  2921  038D                     	;# 
  2922  0394                     	;# 
  2923  0395                     	;# 
  2924  0396                     	;# 
  2925  040C                     	;# 
  2926  040D                     	;# 
  2927  0411                     	;# 
  2928  0411                     	;# 
  2929  0412                     	;# 
  2930  0413                     	;# 
  2931  0414                     	;# 
  2932  0415                     	;# 
  2933  0416                     	;# 
  2934  0417                     	;# 
  2935  0418                     	;# 
  2936  0418                     	;# 
  2937  0419                     	;# 
  2938  041A                     	;# 
  2939  041B                     	;# 
  2940  041C                     	;# 
  2941  041D                     	;# 
  2942  041E                     	;# 
  2943  048D                     	;# 
  2944  0491                     	;# 
  2945  0491                     	;# 
  2946  0492                     	;# 
  2947  0492                     	;# 
  2948  0493                     	;# 
  2949  0493                     	;# 
  2950  0493                     	;# 
  2951  0494                     	;# 
  2952  0494                     	;# 
  2953  0495                     	;# 
  2954  0495                     	;# 
  2955  0496                     	;# 
  2956  0496                     	;# 
  2957  0497                     	;# 
  2958  0497                     	;# 
  2959  0595                     	;# 
  2960  0596                     	;# 
  2961  0597                     	;# 
  2962  059C                     	;# 
  2963  059D                     	;# 
  2964  059E                     	;# 
  2965  0611                     	;# 
  2966  0611                     	;# 
  2967  0612                     	;# 
  2968  0613                     	;# 
  2969  0614                     	;# 
  2970  0614                     	;# 
  2971  0615                     	;# 
  2972  0616                     	;# 
  2973  0617                     	;# 
  2974  0617                     	;# 
  2975  0618                     	;# 
  2976  0619                     	;# 
  2977  061A                     	;# 
  2978  061A                     	;# 
  2979  061B                     	;# 
  2980  061C                     	;# 
  2981  061D                     	;# 
  2982  061D                     	;# 
  2983  061E                     	;# 
  2984  061F                     	;# 
  2985  0FE4                     	;# 
  2986  0FE5                     	;# 
  2987  0FE6                     	;# 
  2988  0FE7                     	;# 
  2989  0FE8                     	;# 
  2990  0FE9                     	;# 
  2991  0FEA                     	;# 
  2992  0FEB                     	;# 
  2993  0FED                     	;# 
  2994  0FEE                     	;# 
  2995  0FEF                     	;# 
  2996  0000                     	;# 
  2997  0001                     	;# 
  2998  0002                     	;# 
  2999  0003                     	;# 
  3000  0004                     	;# 
  3001  0005                     	;# 
  3002  0006                     	;# 
  3003  0007                     	;# 
  3004  0008                     	;# 
  3005  0009                     	;# 
  3006  000A                     	;# 
  3007  000B                     	;# 
  3008  000C                     	;# 
  3009  000D                     	;# 
  3010  000E                     	;# 
  3011  000F                     	;# 
  3012  0010                     	;# 
  3013  0011                     	;# 
  3014  0012                     	;# 
  3015  0013                     	;# 
  3016  0014                     	;# 
  3017  0015                     	;# 
  3018  0016                     	;# 
  3019  0016                     	;# 
  3020  0017                     	;# 
  3021  0018                     	;# 
  3022  0019                     	;# 
  3023  001A                     	;# 
  3024  001B                     	;# 
  3025  001C                     	;# 
  3026  008C                     	;# 
  3027  008D                     	;# 
  3028  008E                     	;# 
  3029  008F                     	;# 
  3030  0090                     	;# 
  3031  0091                     	;# 
  3032  0092                     	;# 
  3033  0093                     	;# 
  3034  0094                     	;# 
  3035  0095                     	;# 
  3036  0096                     	;# 
  3037  0097                     	;# 
  3038  0099                     	;# 
  3039  009A                     	;# 
  3040  009B                     	;# 
  3041  009B                     	;# 
  3042  009C                     	;# 
  3043  009D                     	;# 
  3044  009E                     	;# 
  3045  010C                     	;# 
  3046  010D                     	;# 
  3047  010E                     	;# 
  3048  010F                     	;# 
  3049  0110                     	;# 
  3050  0116                     	;# 
  3051  0117                     	;# 
  3052  011D                     	;# 
  3053  018C                     	;# 
  3054  018D                     	;# 
  3055  018F                     	;# 
  3056  0190                     	;# 
  3057  0191                     	;# 
  3058  0191                     	;# 
  3059  0192                     	;# 
  3060  0193                     	;# 
  3061  0193                     	;# 
  3062  0194                     	;# 
  3063  0195                     	;# 
  3064  0196                     	;# 
  3065  0197                     	;# 
  3066  0199                     	;# 
  3067  0199                     	;# 
  3068  0199                     	;# 
  3069  019A                     	;# 
  3070  019A                     	;# 
  3071  019A                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019B                     	;# 
  3077  019C                     	;# 
  3078  019C                     	;# 
  3079  019C                     	;# 
  3080  019D                     	;# 
  3081  019D                     	;# 
  3082  019D                     	;# 
  3083  019E                     	;# 
  3084  019E                     	;# 
  3085  019E                     	;# 
  3086  019F                     	;# 
  3087  019F                     	;# 
  3088  019F                     	;# 
  3089  020D                     	;# 
  3090  020F                     	;# 
  3091  0210                     	;# 
  3092  0211                     	;# 
  3093  0211                     	;# 
  3094  0212                     	;# 
  3095  0212                     	;# 
  3096  0213                     	;# 
  3097  0213                     	;# 
  3098  0214                     	;# 
  3099  0214                     	;# 
  3100  0215                     	;# 
  3101  0215                     	;# 
  3102  0215                     	;# 
  3103  0216                     	;# 
  3104  0216                     	;# 
  3105  0217                     	;# 
  3106  0217                     	;# 
  3107  0219                     	;# 
  3108  021A                     	;# 
  3109  021B                     	;# 
  3110  021C                     	;# 
  3111  021D                     	;# 
  3112  021E                     	;# 
  3113  021F                     	;# 
  3114  028C                     	;# 
  3115  028D                     	;# 
  3116  0291                     	;# 
  3117  0291                     	;# 
  3118  0292                     	;# 
  3119  0293                     	;# 
  3120  0298                     	;# 
  3121  0298                     	;# 
  3122  0299                     	;# 
  3123  029A                     	;# 
  3124  029D                     	;# 
  3125  029E                     	;# 
  3126  029F                     	;# 
  3127  030C                     	;# 
  3128  030D                     	;# 
  3129  0311                     	;# 
  3130  0311                     	;# 
  3131  0312                     	;# 
  3132  0313                     	;# 
  3133  0318                     	;# 
  3134  0318                     	;# 
  3135  0319                     	;# 
  3136  031A                     	;# 
  3137  031C                     	;# 
  3138  031C                     	;# 
  3139  031D                     	;# 
  3140  031E                     	;# 
  3141  038C                     	;# 
  3142  038D                     	;# 
  3143  0394                     	;# 
  3144  0395                     	;# 
  3145  0396                     	;# 
  3146  040C                     	;# 
  3147  040D                     	;# 
  3148  0411                     	;# 
  3149  0411                     	;# 
  3150  0412                     	;# 
  3151  0413                     	;# 
  3152  0414                     	;# 
  3153  0415                     	;# 
  3154  0416                     	;# 
  3155  0417                     	;# 
  3156  0418                     	;# 
  3157  0418                     	;# 
  3158  0419                     	;# 
  3159  041A                     	;# 
  3160  041B                     	;# 
  3161  041C                     	;# 
  3162  041D                     	;# 
  3163  041E                     	;# 
  3164  048D                     	;# 
  3165  0491                     	;# 
  3166  0491                     	;# 
  3167  0492                     	;# 
  3168  0492                     	;# 
  3169  0493                     	;# 
  3170  0493                     	;# 
  3171  0493                     	;# 
  3172  0494                     	;# 
  3173  0494                     	;# 
  3174  0495                     	;# 
  3175  0495                     	;# 
  3176  0496                     	;# 
  3177  0496                     	;# 
  3178  0497                     	;# 
  3179  0497                     	;# 
  3180  0595                     	;# 
  3181  0596                     	;# 
  3182  0597                     	;# 
  3183  059C                     	;# 
  3184  059D                     	;# 
  3185  059E                     	;# 
  3186  0611                     	;# 
  3187  0611                     	;# 
  3188  0612                     	;# 
  3189  0613                     	;# 
  3190  0614                     	;# 
  3191  0614                     	;# 
  3192  0615                     	;# 
  3193  0616                     	;# 
  3194  0617                     	;# 
  3195  0617                     	;# 
  3196  0618                     	;# 
  3197  0619                     	;# 
  3198  061A                     	;# 
  3199  061A                     	;# 
  3200  061B                     	;# 
  3201  061C                     	;# 
  3202  061D                     	;# 
  3203  061D                     	;# 
  3204  061E                     	;# 
  3205  061F                     	;# 
  3206  0FE4                     	;# 
  3207  0FE5                     	;# 
  3208  0FE6                     	;# 
  3209  0FE7                     	;# 
  3210  0FE8                     	;# 
  3211  0FE9                     	;# 
  3212  0FEA                     	;# 
  3213  0FEB                     	;# 
  3214  0FED                     	;# 
  3215  0FEE                     	;# 
  3216  0FEF                     	;# 
  3217  0000                     	;# 
  3218  0001                     	;# 
  3219  0002                     	;# 
  3220  0003                     	;# 
  3221  0004                     	;# 
  3222  0005                     	;# 
  3223  0006                     	;# 
  3224  0007                     	;# 
  3225  0008                     	;# 
  3226  0009                     	;# 
  3227  000A                     	;# 
  3228  000B                     	;# 
  3229  000C                     	;# 
  3230  000D                     	;# 
  3231  000E                     	;# 
  3232  000F                     	;# 
  3233  0010                     	;# 
  3234  0011                     	;# 
  3235  0012                     	;# 
  3236  0013                     	;# 
  3237  0014                     	;# 
  3238  0015                     	;# 
  3239  0016                     	;# 
  3240  0016                     	;# 
  3241  0017                     	;# 
  3242  0018                     	;# 
  3243  0019                     	;# 
  3244  001A                     	;# 
  3245  001B                     	;# 
  3246  001C                     	;# 
  3247  008C                     	;# 
  3248  008D                     	;# 
  3249  008E                     	;# 
  3250  008F                     	;# 
  3251  0090                     	;# 
  3252  0091                     	;# 
  3253  0092                     	;# 
  3254  0093                     	;# 
  3255  0094                     	;# 
  3256  0095                     	;# 
  3257  0096                     	;# 
  3258  0097                     	;# 
  3259  0099                     	;# 
  3260  009A                     	;# 
  3261  009B                     	;# 
  3262  009B                     	;# 
  3263  009C                     	;# 
  3264  009D                     	;# 
  3265  009E                     	;# 
  3266  010C                     	;# 
  3267  010D                     	;# 
  3268  010E                     	;# 
  3269  010F                     	;# 
  3270  0110                     	;# 
  3271  0116                     	;# 
  3272  0117                     	;# 
  3273  011D                     	;# 
  3274  018C                     	;# 
  3275  018D                     	;# 
  3276  018F                     	;# 
  3277  0190                     	;# 
  3278  0191                     	;# 
  3279  0191                     	;# 
  3280  0192                     	;# 
  3281  0193                     	;# 
  3282  0193                     	;# 
  3283  0194                     	;# 
  3284  0195                     	;# 
  3285  0196                     	;# 
  3286  0197                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  0199                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019A                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019C                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019D                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019E                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  020D                     	;# 
  3311  020F                     	;# 
  3312  0210                     	;# 
  3313  0211                     	;# 
  3314  0211                     	;# 
  3315  0212                     	;# 
  3316  0212                     	;# 
  3317  0213                     	;# 
  3318  0213                     	;# 
  3319  0214                     	;# 
  3320  0214                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0216                     	;# 
  3325  0216                     	;# 
  3326  0217                     	;# 
  3327  0217                     	;# 
  3328  0219                     	;# 
  3329  021A                     	;# 
  3330  021B                     	;# 
  3331  021C                     	;# 
  3332  021D                     	;# 
  3333  021E                     	;# 
  3334  021F                     	;# 
  3335  028C                     	;# 
  3336  028D                     	;# 
  3337  0291                     	;# 
  3338  0291                     	;# 
  3339  0292                     	;# 
  3340  0293                     	;# 
  3341  0298                     	;# 
  3342  0298                     	;# 
  3343  0299                     	;# 
  3344  029A                     	;# 
  3345  029D                     	;# 
  3346  029E                     	;# 
  3347  029F                     	;# 
  3348  030C                     	;# 
  3349  030D                     	;# 
  3350  0311                     	;# 
  3351  0311                     	;# 
  3352  0312                     	;# 
  3353  0313                     	;# 
  3354  0318                     	;# 
  3355  0318                     	;# 
  3356  0319                     	;# 
  3357  031A                     	;# 
  3358  031C                     	;# 
  3359  031C                     	;# 
  3360  031D                     	;# 
  3361  031E                     	;# 
  3362  038C                     	;# 
  3363  038D                     	;# 
  3364  0394                     	;# 
  3365  0395                     	;# 
  3366  0396                     	;# 
  3367  040C                     	;# 
  3368  040D                     	;# 
  3369  0411                     	;# 
  3370  0411                     	;# 
  3371  0412                     	;# 
  3372  0413                     	;# 
  3373  0414                     	;# 
  3374  0415                     	;# 
  3375  0416                     	;# 
  3376  0417                     	;# 
  3377  0418                     	;# 
  3378  0418                     	;# 
  3379  0419                     	;# 
  3380  041A                     	;# 
  3381  041B                     	;# 
  3382  041C                     	;# 
  3383  041D                     	;# 
  3384  041E                     	;# 
  3385  048D                     	;# 
  3386  0491                     	;# 
  3387  0491                     	;# 
  3388  0492                     	;# 
  3389  0492                     	;# 
  3390  0493                     	;# 
  3391  0493                     	;# 
  3392  0493                     	;# 
  3393  0494                     	;# 
  3394  0494                     	;# 
  3395  0495                     	;# 
  3396  0495                     	;# 
  3397  0496                     	;# 
  3398  0496                     	;# 
  3399  0497                     	;# 
  3400  0497                     	;# 
  3401  0595                     	;# 
  3402  0596                     	;# 
  3403  0597                     	;# 
  3404  059C                     	;# 
  3405  059D                     	;# 
  3406  059E                     	;# 
  3407  0611                     	;# 
  3408  0611                     	;# 
  3409  0612                     	;# 
  3410  0613                     	;# 
  3411  0614                     	;# 
  3412  0614                     	;# 
  3413  0615                     	;# 
  3414  0616                     	;# 
  3415  0617                     	;# 
  3416  0617                     	;# 
  3417  0618                     	;# 
  3418  0619                     	;# 
  3419  061A                     	;# 
  3420  061A                     	;# 
  3421  061B                     	;# 
  3422  061C                     	;# 
  3423  061D                     	;# 
  3424  061D                     	;# 
  3425  061E                     	;# 
  3426  061F                     	;# 
  3427  0FE4                     	;# 
  3428  0FE5                     	;# 
  3429  0FE6                     	;# 
  3430  0FE7                     	;# 
  3431  0FE8                     	;# 
  3432  0FE9                     	;# 
  3433  0FEA                     	;# 
  3434  0FEB                     	;# 
  3435  0FED                     	;# 
  3436  0FEE                     	;# 
  3437  0FEF                     	;_modArray
  3438                           
  3439                           	psect	idataBANK0
  3440  2D19                     __pidataBANK0:	
  3441                           
  3442                           ;initializer for _baseline_mod_time
  3443  2D19  34D0               	retlw	208
  3444  2D1A  3407               	retlw	7
  3445  2D1B  3400               	retlw	0
  3446  2D1C  3400               	retlw	0
  3447                           
  3448                           ;initializer for _delay_time
  3449  2D1D  34D0               	retlw	208
  3450  2D1E  3407               	retlw	7
  3451  2D1F  3400               	retlw	0
  3452  2D20  3400               	retlw	0
  3453                           
  3454                           ;initializer for _bottom_push_state
  3455  2D21  3401               	retlw	1
  3456  2D22  3400               	retlw	0
  3457                           
  3458                           ;initializer for _long_press_limit
  3459  2D23  34E8               	retlw	232
  3460  2D24  3403               	retlw	3
  3461                           
  3462                           ;initializer for _top_push_state
  3463  2D25  3406               	retlw	6
  3464  2D26  3400               	retlw	0
  3465                           
  3466                           ;initializer for _blink_rate
  3467  2D27  3414               	retlw	20
  3468                           
  3469                           ;initializer for _longTap_state
  3470  2D28  34FF               	retlw	255
  3471                           
  3472                           ;initializer for _num_taps
  3473  2D29  3404               	retlw	4
  3474                           
  3475                           ;initializer for _switchBypass_state
  3476  2D2A  34FF               	retlw	255
  3477                           
  3478                           	psect	idataBANK2
  3479  07FE                     __pidataBANK2:	
  3480                           
  3481                           ;initializer for _presetChannel
  3482  07FE  3401               	retlw	1
  3483                           
  3484                           	psect	idataBANK3
  3485  2D9E                     __pidataBANK3:	
  3486                           
  3487                           ;initializer for _knob1_prev
  3488  2D9E  34D0               	retlw	208
  3489  2D9F  3407               	retlw	7
  3490                           
  3491                           ;initializer for _knob2_prev
  3492  2DA0  34D0               	retlw	208
  3493  2DA1  3407               	retlw	7
  3494                           
  3495                           ;initializer for _knob3_prev
  3496  2DA2  34D0               	retlw	208
  3497  2DA3  3407               	retlw	7
  3498                           
  3499                           ;initializer for _knob4_prev
  3500  2DA4  34D0               	retlw	208
  3501  2DA5  3407               	retlw	7
  3502                           
  3503                           ;initializer for _knob5_prev
  3504  2DA6  34D0               	retlw	208
  3505  2DA7  3407               	retlw	7
  3506                           
  3507                           ;initializer for _mod_counter
  3508  2DA8  3401               	retlw	1
  3509  2DA9  3400               	retlw	0
  3510                           
  3511                           ;initializer for _mod_delay_time
  3512  2DAA  34D0               	retlw	208
  3513  2DAB  3407               	retlw	7
  3514                           
  3515                           ;initializer for _symmetry
  3516  2DAC  34B4               	retlw	180
  3517  2DAD  3400               	retlw	0
  3518                           
  3519                           ;initializer for _tap_iteration
  3520  2DAE  3401               	retlw	1
  3521  2DAF  3400               	retlw	0
  3522                           
  3523                           ;initializer for _blink_state
  3524  2DB0  3401               	retlw	1
  3525                           
  3526                           ;initializer for _currentBypassState
  3527  2DB1  34FF               	retlw	255
  3528                           
  3529                           ;initializer for _expSwitchState
  3530  2DB2  34FF               	retlw	255
  3531                           
  3532                           ;initializer for _expressModeCnst
  3533  2DB3  3402               	retlw	2
  3534                           
  3535                           ;initializer for _expressionChannel
  3536  2DB4  3401               	retlw	1
  3537                           
  3538                           ;initializer for _mod_time_changed
  3539  2DB5  3401               	retlw	1
  3540                           
  3541                           ;initializer for _presetModeCnst
  3542  2DB6  3401               	retlw	1
  3543                           
  3544                           ;initializer for _switchTap_state
  3545  2DB7  34FF               	retlw	255
  3546                           
  3547                           	psect	idataBANK4
  3548  1801                     __pidataBANK4:	
  3549                           
  3550                           ;initializer for _blink_delay
  3551  1801  3464               	retlw	100
  3552  1802  3400               	retlw	0
  3553                           
  3554                           ;initializer for _switchBypass_up
  3555  1803  3401               	retlw	1
  3556  1804  3400               	retlw	0
  3557                           
  3558                           	psect	stringtext
  3559  2800                     __pstringtext:	
  3560  2800                     exp@coeff:	
  3561  2800  3400               	retlw	0
  3562  2801  3480               	retlw	128
  3563  2802  343F               	retlw	63
  3564  2803  3472               	retlw	114
  3565  2804  3431               	retlw	49
  3566  2805  343F               	retlw	63
  3567  2806  34FE               	retlw	254
  3568  2807  3475               	retlw	117
  3569  2808  343E               	retlw	62
  3570  2809  3458               	retlw	88
  3571  280A  3463               	retlw	99
  3572  280B  343D               	retlw	61
  3573  280C  3495               	retlw	149
  3574  280D  341D               	retlw	29
  3575  280E  343C               	retlw	60
  3576  280F  34C5               	retlw	197
  3577  2810  34AE               	retlw	174
  3578  2811  343A               	retlw	58
  3579  2812  3479               	retlw	121
  3580  2813  3421               	retlw	33
  3581  2814  3439               	retlw	57
  3582  2815  3494               	retlw	148
  3583  2816  3480               	retlw	128
  3584  2817  3437               	retlw	55
  3585  2818  3493               	retlw	147
  3586  2819  34A7               	retlw	167
  3587  281A  3435               	retlw	53
  3588  281B  3456               	retlw	86
  3589  281C  3415               	retlw	21
  3590  281D  3434               	retlw	52
  3591  281E                     __end_ofexp@coeff:	
  3592  281E                     log@coeff:	
  3593  281E  3400               	retlw	0
  3594  281F  3400               	retlw	0
  3595  2820  3400               	retlw	0
  3596  2821  3400               	retlw	0
  3597  2822  3480               	retlw	128
  3598  2823  343F               	retlw	63
  3599  2824  34F0               	retlw	240
  3600  2825  34FF               	retlw	255
  3601  2826  34BE               	retlw	190
  3602  2827  34E2               	retlw	226
  3603  2828  34A9               	retlw	169
  3604  2829  343E               	retlw	62
  3605  282A  3483               	retlw	131
  3606  282B  3476               	retlw	118
  3607  282C  34BE               	retlw	190
  3608  282D  34AE               	retlw	174
  3609  282E  342B               	retlw	43
  3610  282F  343E               	retlw	62
  3611  2830  343C               	retlw	60
  3612  2831  34C3               	retlw	195
  3613  2832  34BD               	retlw	189
  3614  2833  34D2               	retlw	210
  3615  2834  3413               	retlw	19
  3616  2835  343D               	retlw	61
  3617  2836  3478               	retlw	120
  3618  2837  34D3               	retlw	211
  3619  2838  34BB               	retlw	187
  3620  2839                     __end_oflog@coeff:	
  3621  2839                     sin@coeff_a:	
  3622  2839  34F4               	retlw	244
  3623  283A  344A               	retlw	74
  3624  283B  3448               	retlw	72
  3625  283C  3495               	retlw	149
  3626  283D  3495               	retlw	149
  3627  283E  34C7               	retlw	199
  3628  283F  34C1               	retlw	193
  3629  2840  34DC               	retlw	220
  3630  2841  3445               	retlw	69
  3631  2842  34DC               	retlw	220
  3632  2843  346D               	retlw	109
  3633  2844  34C3               	retlw	195
  3634  2845  34B3               	retlw	179
  3635  2846  3433               	retlw	51
  3636  2847  3440               	retlw	64
  3637  2848                     __end_ofsin@coeff_a:	
  3638  2848                     sin@coeff_b:	
  3639  2848  3434               	retlw	52
  3640  2849  3401               	retlw	1
  3641  284A  3448               	retlw	72
  3642  284B  349D               	retlw	157
  3643  284C  34B0               	retlw	176
  3644  284D  3445               	retlw	69
  3645  284E  3400               	retlw	0
  3646  284F  34DA               	retlw	218
  3647  2850  3442               	retlw	66
  3648  2851  3400               	retlw	0
  3649  2852  3480               	retlw	128
  3650  2853  343F               	retlw	63
  3651  2854                     __end_ofsin@coeff_b:	
  3652  000B                     _INTCONbits	set	11
  3653  0011                     _PIR1bits	set	17
  3654  000C                     _PORTAbits	set	12
  3655  000E                     _PORTCbits	set	14
  3656  000F                     _PORTDbits	set	15
  3657  0010                     _PORTEbits	set	16
  3658  001B                     _PR2	set	27
  3659  001C                     _T2CONbits	set	28
  3660  005F                     _GIE	set	95
  3661  005E                     _PEIE	set	94
  3662  0069                     _RB1	set	105
  3663  009D                     _ADCON0bits	set	157
  3664  009E                     _ADCON1bits	set	158
  3665  009C                     _ADRESH	set	156
  3666  009B                     _ADRESL	set	155
  3667  0095                     _OPTION_REGbits	set	149
  3668  0099                     _OSCCONbits	set	153
  3669  008D                     _TRISBbits	set	141
  3670  008E                     _TRISCbits	set	142
  3671  008F                     _TRISDbits	set	143
  3672  0090                     _TRISEbits	set	144
  3673  048D                     _RCIE	set	1165
  3674  011D                     _APFCONbits	set	285
  3675  010D                     _LATBbits	set	269
  3676  010F                     _LATDbits	set	271
  3677  0190                     _ANSELEbits	set	400
  3678  0192                     _PMADRH	set	402
  3679  0191                     _PMADRL	set	401
  3680  0195                     _PMCON1bits	set	405
  3681  0196                     _PMCON2	set	406
  3682  0194                     _PMDATH	set	404
  3683  0193                     _PMDATL	set	403
  3684  0199                     _RCREG	set	409
  3685  019D                     _RCSTAbits	set	413
  3686  019B                     _SPBRG	set	411
  3687  019A                     _TXREG	set	410
  3688  019E                     _TXSTAbits	set	414
  3689  0291                     _CCPR1	set	657
  3690  0298                     _CCPR2	set	664
  3691  0293                     _CCP1CONbits	set	659
  3692  029A                     _CCP2CONbits	set	666
  3693  029D                     _CCPTMRS0	set	669
  3694  029E                     _CCPTMRS1	set	670
  3695  029F                     _CCPTMRS2	set	671
  3696  0311                     _CCPR3	set	785
  3697  0318                     _CCPR4	set	792
  3698  031C                     _CCPR5	set	796
  3699  0313                     _CCP3CONbits	set	787
  3700  031A                     _CCP4CONbits	set	794
  3701  031E                     _CCP5CONbits	set	798
  3702  030C                     _TRISFbits	set	780
  3703  030D                     _TRISGbits	set	781
  3704  038C                     _LATFbits	set	908
  3705  038D                     _LATGbits	set	909
  3706  040C                     _ANSELFbits	set	1036
  3707  061F                     _CCP10CONbits	set	1567
  3708  0613                     _CCP6CONbits	set	1555
  3709  0616                     _CCP7CONbits	set	1558
  3710  0619                     _CCP8CONbits	set	1561
  3711  061C                     _CCP9CONbits	set	1564
  3712                           
  3713                           ; #config settings
  3714  0000                     
  3715                           	psect	cinit
  3716  02F5                     start_initialization:	
  3717  02F5                     __initialization:		;BIGRAM
  3718                           
  3719                           ; Clear objects allocated to BIGRAM
  3720  02F5  308A               	movlw	low (0+9098)
  3721  02F6  0084               	movwf	4
  3722  02F7  3023               	movlw	high (0+9098)
  3723  02F8  0085               	movwf	5
  3724  02F9  3066               	movlw	102
  3725  02FA  00FE               	movwf	btemp
  3726  02FB  3002               	movlw	2
  3727  02FC  00FF               	movwf	btemp+1
  3728  02FD  31AC  24FE  3182   	fcall	clear_ram0
  3729                           
  3730                           ; Clear objects allocated to BANK0
  3731  0300  3052               	movlw	low __pbssBANK0
  3732  0301  0084               	movwf	4
  3733  0302  3000               	movlw	high __pbssBANK0
  3734  0303  0085               	movwf	5
  3735  0304  300E               	movlw	14
  3736  0305  00FE               	movwf	btemp
  3737  0306  3000               	movlw	0
  3738  0307  00FF               	movwf	btemp+1
  3739  0308  31AC  24FE  3182   	fcall	clear_ram0
  3740                           
  3741                           ; Clear objects allocated to BANK2
  3742  030B  0022               	movlb	2	; select bank2
  3743  030C  01EA               	clrf	__pbssBANK2& (0+127)
  3744  030D  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3745                           
  3746                           ; Clear objects allocated to BANK3
  3747  030E  30A0               	movlw	low __pbssBANK3
  3748  030F  0084               	movwf	4
  3749  0310  3001               	movlw	high __pbssBANK3
  3750  0311  0085               	movwf	5
  3751  0312  302D               	movlw	45
  3752  0313  00FE               	movwf	btemp
  3753  0314  3000               	movlw	0
  3754  0315  00FF               	movwf	btemp+1
  3755  0316  31AC  24FE  3182   	fcall	clear_ram0
  3756                           
  3757                           ; Clear objects allocated to BANK4
  3758  0319  3020               	movlw	low __pbssBANK4
  3759  031A  0084               	movwf	4
  3760  031B  3002               	movlw	high __pbssBANK4
  3761  031C  0085               	movwf	5
  3762  031D  303E               	movlw	62
  3763  031E  00FE               	movwf	btemp
  3764  031F  3000               	movlw	0
  3765  0320  00FF               	movwf	btemp+1
  3766  0321  31AC  24FE  3182   	fcall	clear_ram0
  3767                           
  3768                           ; Clear objects allocated to BANK5
  3769  0324  30A0               	movlw	low __pbssBANK5
  3770  0325  0084               	movwf	4
  3771  0326  3002               	movlw	high __pbssBANK5
  3772  0327  0085               	movwf	5
  3773  0328  302C               	movlw	44
  3774  0329  00FE               	movwf	btemp
  3775  032A  3000               	movlw	0
  3776  032B  00FF               	movwf	btemp+1
  3777  032C  31AC  24FE  3182   	fcall	clear_ram0
  3778                           
  3779                           ; Clear objects allocated to BANK6
  3780  032F  3020               	movlw	low __pbssBANK6
  3781  0330  0084               	movwf	4
  3782  0331  3003               	movlw	high __pbssBANK6
  3783  0332  0085               	movwf	5
  3784  0333  3040               	movlw	64
  3785  0334  00FE               	movwf	btemp
  3786  0335  3000               	movlw	0
  3787  0336  00FF               	movwf	btemp+1
  3788  0337  31AC  24FE  3182   	fcall	clear_ram0
  3789                           
  3790                           ; Clear objects allocated to BANK7
  3791  033A  30A0               	movlw	low __pbssBANK7
  3792  033B  0084               	movwf	4
  3793  033C  3003               	movlw	high __pbssBANK7
  3794  033D  0085               	movwf	5
  3795  033E  3040               	movlw	64
  3796  033F  00FE               	movwf	btemp
  3797  0340  3000               	movlw	0
  3798  0341  00FF               	movwf	btemp+1
  3799  0342  31AC  24FE  3182   	fcall	clear_ram0
  3800                           
  3801                           ; Initialize objects allocated to BANK0
  3802  0345  3019               	movlw	low __pidataBANK0
  3803  0346  0084               	movwf	4
  3804  0347  30AD               	movlw	(high __pidataBANK0)| (0+128)
  3805  0348  0085               	movwf	5
  3806  0349  3040               	movlw	low __pdataBANK0
  3807  034A  0086               	movwf	6
  3808  034B  3000               	movlw	high __pdataBANK0
  3809  034C  0087               	movwf	7
  3810  034D  3000               	movlw	0
  3811  034E  00FF               	movwf	btemp+1
  3812  034F  3012               	movlw	18
  3813  0350  31AC  24F2  3182   	fcall	init_ram
  3814                           
  3815                           ; Initialize objects allocated to BANK2
  3816  0353  3187  27FE  3182   	fcall	__pidataBANK2	;fetch initializer
  3817  0356  00EC               	movwf	__pdataBANK2& (0+127)
  3818                           
  3819                           ; Initialize objects allocated to BANK3
  3820  0357  309E               	movlw	low __pidataBANK3
  3821  0358  0084               	movwf	4
  3822  0359  30AD               	movlw	(high __pidataBANK3)| (0+128)
  3823  035A  0085               	movwf	5
  3824  035B  30CD               	movlw	low __pdataBANK3
  3825  035C  0086               	movwf	6
  3826  035D  3001               	movlw	high __pdataBANK3
  3827  035E  0087               	movwf	7
  3828  035F  3000               	movlw	0
  3829  0360  00FF               	movwf	btemp+1
  3830  0361  301A               	movlw	26
  3831  0362  31AC  24F2  3182   	fcall	init_ram
  3832                           
  3833                           ; Initialize objects allocated to BANK4
  3834  0365  3001               	movlw	low __pidataBANK4
  3835  0366  0084               	movwf	4
  3836  0367  3098               	movlw	(high __pidataBANK4)| (0+128)
  3837  0368  0085               	movwf	5
  3838  0369  3066               	movlw	low __pdataBANK4
  3839  036A  0086               	movwf	6
  3840  036B  3002               	movlw	high __pdataBANK4
  3841  036C  0087               	movwf	7
  3842  036D  3000               	movlw	0
  3843  036E  00FF               	movwf	btemp+1
  3844  036F  3004               	movlw	4
  3845  0370  31AC  24F2         	fcall	init_ram
  3846  0372                     end_of_initialization:	
  3847                           ;End of C runtime variable initialization code
  3848                           
  3849  0372                     __end_of__initialization:	
  3850  0372  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3851  0373  0020               	movlb	0
  3852  0374  3183  2B76         	ljmp	_main	;jump to C main() function
  3853                           
  3854                           	psect	bssBANK0
  3855  0052                     __pbssBANK0:	
  3856  0052                     _tap_timer:	
  3857  0052                     	ds	4
  3858  0056                     _timer:	
  3859  0056                     	ds	4
  3860  005A                     _UQEnd:	
  3861  005A                     	ds	1
  3862  005B                     _UQFront:	
  3863  005B                     	ds	1
  3864  005C                     _doubleTap_state:	
  3865  005C                     	ds	1
  3866  005D                     _longBypass_state:	
  3867  005D                     	ds	1
  3868  005E                     _mode2_state:	
  3869  005E                     	ds	1
  3870  005F                     _presetSaveMode:	
  3871  005F                     	ds	1
  3872                           
  3873                           	psect	dataBANK0
  3874  0040                     __pdataBANK0:	
  3875  0040                     _baseline_mod_time:	
  3876  0040                     	ds	4
  3877  0044                     _delay_time:	
  3878  0044                     	ds	4
  3879  0048                     _bottom_push_state:	
  3880  0048                     	ds	2
  3881  004A                     _long_press_limit:	
  3882  004A                     	ds	2
  3883  004C                     _top_push_state:	
  3884  004C                     	ds	2
  3885  004E                     _blink_rate:	
  3886  004E                     	ds	1
  3887  004F                     _longTap_state:	
  3888  004F                     	ds	1
  3889  0050                     _num_taps:	
  3890  0050                     	ds	1
  3891  0051                     _switchBypass_state:	
  3892  0051                     	ds	1
  3893                           
  3894                           	psect	bssBANK2
  3895  016A                     __pbssBANK2:	
  3896  016A                     _suspend_blink:	
  3897  016A                     	ds	1
  3898  016B                     _switchTap_pressed:	
  3899  016B                     	ds	1
  3900                           
  3901                           	psect	dataBANK2
  3902  016C                     __pdataBANK2:	
  3903  016C                     _presetChannel:	
  3904  016C                     	ds	1
  3905                           
  3906                           	psect	bssBANK3
  3907  01A0                     __pbssBANK3:	
  3908  01A0                     _double_timer:	
  3909  01A0                     	ds	4
  3910  01A4                     _mod_timer:	
  3911  01A4                     	ds	4
  3912  01A8                     _sub_timer:	
  3913  01A8                     	ds	4
  3914  01AC                     _knob_1_pos:	
  3915  01AC                     	ds	2
  3916  01AE                     _knob_2_pos:	
  3917  01AE                     	ds	2
  3918  01B0                     _knob_3_pos:	
  3919  01B0                     	ds	2
  3920  01B2                     _knob_4_pos:	
  3921  01B2                     	ds	2
  3922  01B4                     _knob_5_pos:	
  3923  01B4                     	ds	2
  3924  01B6                     _longBypass_timer:	
  3925  01B6                     	ds	2
  3926  01B8                     _longTap_timer:	
  3927  01B8                     	ds	2
  3928  01BA                     _switchBypass_pressed:	
  3929  01BA                     	ds	2
  3930  01BC                     _tmpModDelay:	
  3931  01BC                     	ds	2
  3932  01BE                     _adjust_mod_delay:	
  3933  01BE                     	ds	1
  3934  01BF                     _bottomTactile_pressed:	
  3935  01BF                     	ds	1
  3936  01C0                     _bypass_turning_on:	
  3937  01C0                     	ds	1
  3938  01C1                     _isInitialized:	
  3939  01C1                     	ds	1
  3940  01C2                     _longBypass_down:	
  3941  01C2                     	ds	1
  3942  01C3                     _longBypass_save:	
  3943  01C3                     	ds	1
  3944  01C4                     _longBypass_start:	
  3945  01C4                     	ds	1
  3946  01C5                     _longTap_start:	
  3947  01C5                     	ds	1
  3948  01C6                     _mode1_state:	
  3949  01C6                     	ds	1
  3950  01C7                     _modulation_changed:	
  3951  01C7                     	ds	1
  3952  01C8                     _preset_blink:	
  3953  01C8                     	ds	1
  3954  01C9                     _preset_programmning_on:	
  3955  01C9                     	ds	1
  3956  01CA                     _reset_sub_delay:	
  3957  01CA                     	ds	1
  3958  01CB                     _switchTap_down:	
  3959  01CB                     	ds	1
  3960  01CC                     _topTactile_pressed:	
  3961  01CC                     	ds	1
  3962                           
  3963                           	psect	dataBANK3
  3964  01CD                     __pdataBANK3:	
  3965  01CD                     _knob1_prev:	
  3966  01CD                     	ds	2
  3967  01CF                     _knob2_prev:	
  3968  01CF                     	ds	2
  3969  01D1                     _knob3_prev:	
  3970  01D1                     	ds	2
  3971  01D3                     _knob4_prev:	
  3972  01D3                     	ds	2
  3973  01D5                     _knob5_prev:	
  3974  01D5                     	ds	2
  3975  01D7                     _mod_counter:	
  3976  01D7                     	ds	2
  3977  01D9                     _mod_delay_time:	
  3978  01D9                     	ds	2
  3979  01DB                     _symmetry:	
  3980  01DB                     	ds	2
  3981  01DD                     _tap_iteration:	
  3982  01DD                     	ds	2
  3983  01DF                     _blink_state:	
  3984  01DF                     	ds	1
  3985  01E0                     _currentBypassState:	
  3986  01E0                     	ds	1
  3987  01E1                     _expSwitchState:	
  3988  01E1                     	ds	1
  3989  01E2                     _expressModeCnst:	
  3990  01E2                     	ds	1
  3991  01E3                     _expressionChannel:	
  3992  01E3                     	ds	1
  3993  01E4                     _mod_time_changed:	
  3994  01E4                     	ds	1
  3995  01E5                     _presetModeCnst:	
  3996  01E5                     	ds	1
  3997  01E6                     _switchTap_state:	
  3998  01E6                     	ds	1
  3999                           
  4000                           	psect	bssBANK4
  4001  0220                     __pbssBANK4:	
  4002  0220                     _tap_history:	
  4003  0220                     	ds	20
  4004  0234                     USARTWriteInt@F3536:	
  4005  0234                     	ds	5
  4006  0239                     _ledState:	
  4007  0239                     	ds	4
  4008  023D                     _tap_total:	
  4009  023D                     	ds	4
  4010  0241                     _test_timer:	
  4011  0241                     	ds	4
  4012  0245                     _adjusted_pot_value:	
  4013  0245                     	ds	2
  4014  0247                     _debounce_bypass:	
  4015  0247                     	ds	2
  4016  0249                     _debounce_count:	
  4017  0249                     	ds	2
  4018  024B                     _debounce_mode1:	
  4019  024B                     	ds	2
  4020  024D                     _debounce_mode2:	
  4021  024D                     	ds	2
  4022  024F                     _delayfound:	
  4023  024F                     	ds	2
  4024  0251                     _errno:	
  4025  0251                     	ds	2
  4026  0253                     _mod_value:	
  4027  0253                     	ds	2
  4028  0255                     _oldBaseTime:	
  4029  0255                     	ds	2
  4030  0257                     _oldSymmetry:	
  4031  0257                     	ds	2
  4032  0259                     _switchBypass_toggle:	
  4033  0259                     	ds	2
  4034  025B                     _tmpVal:	
  4035  025B                     	ds	2
  4036  025D                     _iCnt:	
  4037  025D                     	ds	1
  4038                           
  4039                           	psect	dataBANK4
  4040  0266                     __pdataBANK4:	
  4041  0266                     _blink_delay:	
  4042  0266                     	ds	2
  4043  0268                     _switchBypass_up:	
  4044  0268                     	ds	2
  4045                           
  4046                           	psect	bssBANK5
  4047  02A0                     __pbssBANK5:	
  4048  02A0                     _tap:	
  4049  02A0                     	ds	44
  4050                           
  4051                           	psect	bssBANK6
  4052  0320                     __pbssBANK6:	
  4053  0320                     _URBuff:	
  4054  0320                     	ds	64
  4055                           
  4056                           	psect	bssBANK7
  4057  03A0                     __pbssBANK7:	
  4058  03A0                     _myBuf:	
  4059  03A0                     	ds	64
  4060                           
  4061                           	psect	clrtext
  4062  2CFE                     clear_ram0:	
  4063                           ;	Called with FSR0 containing the base address, and
  4064                           ;	btemp/btemp+1 has the size to clear
  4065                           
  4066  2CFE  0064               	clrwdt	;clear the watchdog before getting into this loop
  4067  2CFF                     clrloop0:	
  4068  2CFF  0180               	clrf	0	;clear RAM location pointed to by FSR
  4069  2D00  3101               	addfsr 0,1
  4070  2D01  3001               	movlw	1
  4071  2D02  02FE               	subwf	126,f
  4072  2D03  3000               	movlw	0
  4073  2D04  3BFF               	subwfb	127,f
  4074  2D05  087F               	movf	127,w
  4075  2D06  047E               	iorwf	126,w
  4076  2D07  1903               	btfsc	3,2
  4077  2D08  3400               	retlw	0	;all done for this memory range, return
  4078  2D09  2CFF               	goto	clrloop0	;have we reached the end yet?
  4079                           
  4080                           	psect	inittext
  4081  2CF2                     init_ram:	
  4082  2CF2  00FE               	movwf	126
  4083  2CF3                     initloop:	
  4084  2CF3  0012               	moviw fsr0++
  4085  2CF4  001E               	movwi fsr1++
  4086  2CF5  3001               	movlw	1
  4087  2CF6  02FE               	subwf	126,f
  4088  2CF7  3000               	movlw	0
  4089  2CF8  3BFF               	subwfb	127,f
  4090  2CF9  087F               	movf	127,w
  4091  2CFA  047E               	iorwf	126,w
  4092  2CFB  1903               	btfsc	3,2
  4093  2CFC  3400               	retlw	0
  4094  2CFD  2CF3               	goto	initloop
  4095                           
  4096                           	psect	cstackBANK5
  4097  02CC                     __pcstackBANK5:	
  4098  02CC                     _main$2851:	
  4099                           
  4100                           ; 3 bytes @ 0x0
  4101  02CC                     	ds	3
  4102  02CF                     _main$2852:	
  4103                           
  4104                           ; 3 bytes @ 0x3
  4105  02CF                     	ds	3
  4106  02D2                     _main$2853:	
  4107                           
  4108                           ; 3 bytes @ 0x6
  4109  02D2                     	ds	3
  4110                           
  4111                           	psect	cstackBANK4
  4112  025E                     __pcstackBANK4:	
  4113  025E                     ??_main:	
  4114                           
  4115                           ; 1 bytes @ 0x0
  4116  025E                     	ds	8
  4117                           
  4118                           	psect	cstackBANK3
  4119  01E7                     __pcstackBANK3:	
  4120  01E7                     scaleA100kPot@pwm:	
  4121  01E7                     scaleA10kPot@pwm:	
  4122                           ; 3 bytes @ 0x0
  4123                           
  4124  01E7                     scaleiA10kPot@pwm:	
  4125                           ; 3 bytes @ 0x0
  4126                           
  4127                           
  4128                           ; 3 bytes @ 0x0
  4129  01E7                     	ds	3
  4130  01EA                     _scaleA100kPot$2856:	
  4131  01EA                     _scaleA10kPot$2860:	
  4132                           ; 3 bytes @ 0x3
  4133                           
  4134  01EA                     _scaleiA10kPot$2862:	
  4135                           ; 3 bytes @ 0x3
  4136                           
  4137                           
  4138                           ; 3 bytes @ 0x3
  4139  01EA                     	ds	3
  4140  01ED                     _scaleA100kPot$2857:	
  4141  01ED                     _scaleA10kPot$2861:	
  4142                           ; 3 bytes @ 0x6
  4143                           
  4144  01ED                     _scaleiA10kPot$2863:	
  4145                           ; 3 bytes @ 0x6
  4146                           
  4147                           
  4148                           ; 3 bytes @ 0x6
  4149  01ED                     	ds	3
  4150                           
  4151                           	psect	cstackBANK2
  4152  0120                     __pcstackBANK2:	
  4153  0120                     ?___fttol:	
  4154  0120                     ___fttol@f1:	
  4155                           ; 4 bytes @ 0x0
  4156                           
  4157                           
  4158                           ; 3 bytes @ 0x0
  4159  0120                     	ds	4
  4160  0124                     ??___fttol:	
  4161                           
  4162                           ; 1 bytes @ 0x4
  4163  0124                     	ds	4
  4164  0128                     ___fttol@sign1:	
  4165                           
  4166                           ; 1 bytes @ 0x8
  4167  0128                     	ds	1
  4168  0129                     ___fttol@lval:	
  4169                           
  4170                           ; 4 bytes @ 0x9
  4171  0129                     	ds	4
  4172  012D                     ___fttol@exp1:	
  4173                           
  4174                           ; 1 bytes @ 0xD
  4175  012D                     	ds	1
  4176  012E                     ?_set_subdivision:	
  4177  012E                     ?_modTri:	
  4178                           ; 2 bytes @ 0xE
  4179                           
  4180  012E                     ?_modSaw:	
  4181                           ; 2 bytes @ 0xE
  4182                           
  4183  012E                     ?___wmul:	
  4184                           ; 2 bytes @ 0xE
  4185                           
  4186  012E                     ?_floor:	
  4187                           ; 2 bytes @ 0xE
  4188                           
  4189  012E                     set_subdivision@x:	
  4190                           ; 3 bytes @ 0xE
  4191                           
  4192  012E                     getModulationDelayTime@subDiv:	
  4193                           ; 2 bytes @ 0xE
  4194                           
  4195  012E                     ___wmul@multiplier:	
  4196                           ; 2 bytes @ 0xE
  4197                           
  4198  012E                     modTri@angle:	
  4199                           ; 2 bytes @ 0xE
  4200                           
  4201  012E                     modSaw@angle:	
  4202                           ; 3 bytes @ 0xE
  4203                           
  4204  012E                     floor@x:	
  4205                           ; 3 bytes @ 0xE
  4206                           
  4207                           
  4208                           ; 3 bytes @ 0xE
  4209  012E                     	ds	2
  4210  0130                     set_subdivision@y:	
  4211  0130                     ___wmul@multiplicand:	
  4212                           ; 2 bytes @ 0x10
  4213                           
  4214                           
  4215                           ; 2 bytes @ 0x10
  4216  0130                     	ds	1
  4217  0131                     ??_floor:	
  4218  0131                     modTri@inflection:	
  4219                           ; 1 bytes @ 0x11
  4220                           
  4221  0131                     modSaw@inflection:	
  4222                           ; 3 bytes @ 0x11
  4223                           
  4224                           
  4225                           ; 3 bytes @ 0x11
  4226  0131                     	ds	1
  4227  0132                     ___wmul@product:	
  4228  0132                     set_subdivision@scalar:	
  4229                           ; 2 bytes @ 0x12
  4230                           
  4231  0132                     floor@i:	
  4232                           ; 3 bytes @ 0x12
  4233                           
  4234                           
  4235                           ; 3 bytes @ 0x12
  4236  0132                     	ds	2
  4237  0134                     ?_modCos:	
  4238  0134                     ?_eval_poly:	
  4239                           ; 2 bytes @ 0x14
  4240                           
  4241  0134                     modCos@angle:	
  4242                           ; 3 bytes @ 0x14
  4243                           
  4244  0134                     eval_poly@x:	
  4245                           ; 3 bytes @ 0x14
  4246                           
  4247  0134                     _modTri$2869:	
  4248                           ; 3 bytes @ 0x14
  4249                           
  4250  0134                     _modSaw$2870:	
  4251                           ; 3 bytes @ 0x14
  4252                           
  4253                           
  4254                           ; 3 bytes @ 0x14
  4255  0134                     	ds	1
  4256  0135                     set_subdivision@tmpX:	
  4257  0135                     floor@expon:	
  4258                           ; 2 bytes @ 0x15
  4259                           
  4260                           
  4261                           ; 2 bytes @ 0x15
  4262  0135                     	ds	2
  4263  0137                     ?___ftsub:	
  4264  0137                     eval_poly@d:	
  4265                           ; 3 bytes @ 0x17
  4266                           
  4267  0137                     modCos@inflection:	
  4268                           ; 2 bytes @ 0x17
  4269                           
  4270  0137                     modTri@shift:	
  4271                           ; 3 bytes @ 0x17
  4272                           
  4273  0137                     ___ftsub@f2:	
  4274                           ; 3 bytes @ 0x17
  4275                           
  4276  0137                     _modSaw$2871:	
  4277                           ; 3 bytes @ 0x17
  4278                           
  4279                           
  4280                           ; 3 bytes @ 0x17
  4281  0137                     	ds	2
  4282  0139                     eval_poly@n:	
  4283                           
  4284                           ; 2 bytes @ 0x19
  4285  0139                     	ds	1
  4286  013A                     ??_modCos:	
  4287  013A                     modSaw@mod:	
  4288                           ; 1 bytes @ 0x1A
  4289                           
  4290  013A                     modTri@period:	
  4291                           ; 2 bytes @ 0x1A
  4292                           
  4293  013A                     ___ftsub@f1:	
  4294                           ; 3 bytes @ 0x1A
  4295                           
  4296                           
  4297                           ; 3 bytes @ 0x1A
  4298  013A                     	ds	1
  4299  013B                     eval_poly@res:	
  4300                           
  4301                           ; 3 bytes @ 0x1B
  4302  013B                     	ds	1
  4303  013C                     modSaw@shift:	
  4304  013C                     _modCos$2868:	
  4305                           ; 3 bytes @ 0x1C
  4306                           
  4307                           
  4308                           ; 3 bytes @ 0x1C
  4309  013C                     	ds	1
  4310  013D                     modTri@tmpVal:	
  4311                           
  4312                           ; 3 bytes @ 0x1D
  4313  013D                     	ds	1
  4314  013E                     ?_sin:	
  4315  013E                     ?_log:	
  4316                           ; 3 bytes @ 0x1E
  4317                           
  4318  013E                     ?_ldexp:	
  4319                           ; 3 bytes @ 0x1E
  4320                           
  4321  013E                     sin@f:	
  4322                           ; 3 bytes @ 0x1E
  4323                           
  4324  013E                     ldexp@value:	
  4325                           ; 3 bytes @ 0x1E
  4326                           
  4327  013E                     log@x:	
  4328                           ; 3 bytes @ 0x1E
  4329                           
  4330                           
  4331                           ; 3 bytes @ 0x1E
  4332  013E                     	ds	1
  4333  013F                     modCos@shift:	
  4334  013F                     modSaw@period:	
  4335                           ; 3 bytes @ 0x1F
  4336                           
  4337                           
  4338                           ; 3 bytes @ 0x1F
  4339  013F                     	ds	2
  4340  0141                     ??_sin:	
  4341  0141                     ??_log:	
  4342                           ; 1 bytes @ 0x21
  4343                           
  4344  0141                     ldexp@newexp:	
  4345                           ; 1 bytes @ 0x21
  4346                           
  4347                           
  4348                           ; 2 bytes @ 0x21
  4349  0141                     	ds	1
  4350  0142                     ?_modSawRev:	
  4351  0142                     log@exponent:	
  4352                           ; 2 bytes @ 0x22
  4353                           
  4354  0142                     modCos@period:	
  4355                           ; 2 bytes @ 0x22
  4356                           
  4357  0142                     modSawRev@angle:	
  4358                           ; 3 bytes @ 0x22
  4359                           
  4360  0142                     sin@y:	
  4361                           ; 3 bytes @ 0x22
  4362                           
  4363                           
  4364                           ; 3 bytes @ 0x22
  4365  0142                     	ds	1
  4366  0143                     ??_ldexp:	
  4367                           
  4368                           ; 1 bytes @ 0x23
  4369  0143                     	ds	2
  4370  0145                     modCos@tmpVal:	
  4371  0145                     modSawRev@inflection:	
  4372                           ; 3 bytes @ 0x25
  4373                           
  4374  0145                     _ldexp$2654:	
  4375                           ; 3 bytes @ 0x25
  4376                           
  4377  0145                     _sin$2875:	
  4378                           ; 3 bytes @ 0x25
  4379                           
  4380                           
  4381                           ; 3 bytes @ 0x25
  4382  0145                     	ds	3
  4383  0148                     ??_modSawRev:	
  4384  0148                     ?_modSquare:	
  4385                           ; 1 bytes @ 0x28
  4386                           
  4387  0148                     ?_exp:	
  4388                           ; 2 bytes @ 0x28
  4389                           
  4390  0148                     modSquare@angle:	
  4391                           ; 3 bytes @ 0x28
  4392                           
  4393  0148                     sin@x2:	
  4394                           ; 3 bytes @ 0x28
  4395                           
  4396  0148                     exp@x:	
  4397                           ; 3 bytes @ 0x28
  4398                           
  4399                           
  4400                           ; 3 bytes @ 0x28
  4401  0148                     	ds	3
  4402  014B                     ??_exp:	
  4403  014B                     sin@sgn:	
  4404                           ; 1 bytes @ 0x2B
  4405                           
  4406  014B                     modSquare@inflection:	
  4407                           ; 1 bytes @ 0x2B
  4408                           
  4409                           
  4410                           ; 3 bytes @ 0x2B
  4411  014B                     	ds	1
  4412  014C                     ?_cos:	
  4413  014C                     cos@f:	
  4414                           ; 3 bytes @ 0x2C
  4415                           
  4416  014C                     _exp$2876:	
  4417                           ; 3 bytes @ 0x2C
  4418                           
  4419                           
  4420                           ; 3 bytes @ 0x2C
  4421  014C                     	ds	2
  4422  014E                     modSquare@tmpVal:	
  4423                           
  4424                           ; 2 bytes @ 0x2E
  4425  014E                     	ds	1
  4426  014F                     _exp$2617:	
  4427  014F                     _cos$2872:	
  4428                           ; 3 bytes @ 0x2F
  4429                           
  4430                           
  4431                           ; 3 bytes @ 0x2F
  4432  014F                     	ds	1
  4433  0150                     ??_updateModulationArray:	
  4434                           
  4435                           ; 1 bytes @ 0x30
  4436  0150                     	ds	2
  4437  0152                     ??_calcCosArray:	
  4438  0152                     exp@exponent:	
  4439                           ; 1 bytes @ 0x32
  4440                           
  4441                           
  4442                           ; 2 bytes @ 0x32
  4443  0152                     	ds	2
  4444  0154                     exp@sign:	
  4445  0154                     updateModulationArray@angleFactor:	
  4446                           ; 1 bytes @ 0x34
  4447                           
  4448                           
  4449                           ; 2 bytes @ 0x34
  4450  0154                     	ds	1
  4451  0155                     ?_pow:	
  4452  0155                     pow@x:	
  4453                           ; 3 bytes @ 0x35
  4454                           
  4455                           
  4456                           ; 3 bytes @ 0x35
  4457  0155                     	ds	1
  4458  0156                     updateModulationArray@iAngle_2353:	
  4459  0156                     calcCosArray@tmpVal:	
  4460                           ; 1 bytes @ 0x36
  4461                           
  4462                           
  4463                           ; 3 bytes @ 0x36
  4464  0156                     	ds	1
  4465  0157                     updateModulationArray@subDiv:	
  4466                           
  4467                           ; 2 bytes @ 0x37
  4468  0157                     	ds	1
  4469  0158                     pow@y:	
  4470                           
  4471                           ; 3 bytes @ 0x38
  4472  0158                     	ds	1
  4473  0159                     calcCosArray@iAngle:	
  4474  0159                     updateModulationArray@thisAngle:	
  4475                           ; 1 bytes @ 0x39
  4476                           
  4477                           
  4478                           ; 2 bytes @ 0x39
  4479  0159                     	ds	2
  4480  015B                     ??_pow:	
  4481  015B                     updateModulationArray@iAngle:	
  4482                           ; 1 bytes @ 0x3B
  4483                           
  4484                           
  4485                           ; 1 bytes @ 0x3B
  4486  015B                     	ds	1
  4487  015C                     _pow$2873:	
  4488                           
  4489                           ; 3 bytes @ 0x3C
  4490  015C                     	ds	3
  4491  015F                     _pow$2874:	
  4492                           
  4493                           ; 3 bytes @ 0x3F
  4494  015F                     	ds	3
  4495  0162                     pow@sign:	
  4496                           
  4497                           ; 1 bytes @ 0x42
  4498  0162                     	ds	1
  4499  0163                     pow@yi:	
  4500                           
  4501                           ; 4 bytes @ 0x43
  4502  0163                     	ds	4
  4503  0167                     ?_scaleA10kPot:	
  4504  0167                     ?_scaleiA10kPot:	
  4505                           ; 2 bytes @ 0x47
  4506                           
  4507  0167                     ?_scaleA100kPot:	
  4508                           ; 2 bytes @ 0x47
  4509                           
  4510  0167                     scaleA100kPot@input:	
  4511                           ; 2 bytes @ 0x47
  4512                           
  4513  0167                     scaleA10kPot@input:	
  4514                           ; 3 bytes @ 0x47
  4515                           
  4516  0167                     scaleiA10kPot@input:	
  4517                           ; 3 bytes @ 0x47
  4518                           
  4519                           
  4520                           ; 3 bytes @ 0x47
  4521  0167                     	ds	3
  4522                           
  4523                           	psect	cstackBANK1
  4524  00A0                     __pcstackBANK1:	
  4525  00A0                     ?___ftge:	
  4526  00A0                     ?_set_leds_top:	
  4527                           ; 1 bit 
  4528                           
  4529  00A0                     ?_USARTInit:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  00A0                     ??_ConfigureOscillator:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  00A0                     ??_InitApp:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  00A0                     ??_InitializeTaps:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  00A0                     ??_init_adc:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  00A0                     ??_init_pwm:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  00A0                     ??_init_timer2:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  00A0                     ??_init_timer0:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  00A0                     ?_set_leds_bottom:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  00A0                     ?_setLongBypassState:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  00A0                     ?_setLongTapState:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  00A0                     ?_updateSwitchBypassState:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  00A0                     ?_getModulationSubdivision:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  00A0                     ?_adc_convert:	
  4569                           ; 2 bytes @ 0x0
  4570                           
  4571  00A0                     ?_FLASH_ReadWord:	
  4572                           ; 2 bytes @ 0x0
  4573                           
  4574  00A0                     ?_getSwitchBypassState:	
  4575                           ; 2 bytes @ 0x0
  4576                           
  4577  00A0                     ?___awdiv:	
  4578                           ; 2 bytes @ 0x0
  4579                           
  4580  00A0                     ?___ftpack:	
  4581                           ; 2 bytes @ 0x0
  4582                           
  4583  00A0                     ?_frexp:	
  4584                           ; 3 bytes @ 0x0
  4585                           
  4586  00A0                     ?___lmul:	
  4587                           ; 3 bytes @ 0x0
  4588                           
  4589  00A0                     ?___aldiv:	
  4590                           ; 4 bytes @ 0x0
  4591                           
  4592  00A0                     FLASH_ReadWord@flashAddr:	
  4593                           ; 4 bytes @ 0x0
  4594                           
  4595  00A0                     set_leds_top@x:	
  4596                           ; 2 bytes @ 0x0
  4597                           
  4598  00A0                     set_leds_bottom@x:	
  4599                           ; 2 bytes @ 0x0
  4600                           
  4601  00A0                     updateSwitchBypassState@state:	
  4602                           ; 2 bytes @ 0x0
  4603                           
  4604  00A0                     setLongBypassState@f_state:	
  4605                           ; 2 bytes @ 0x0
  4606                           
  4607  00A0                     setLongTapState@f_state:	
  4608                           ; 2 bytes @ 0x0
  4609                           
  4610  00A0                     USARTInit@baud_rate:	
  4611                           ; 2 bytes @ 0x0
  4612                           
  4613  00A0                     ___awdiv@divisor:	
  4614                           ; 2 bytes @ 0x0
  4615                           
  4616  00A0                     ___ftpack@arg:	
  4617                           ; 2 bytes @ 0x0
  4618                           
  4619  00A0                     ___ftge@ff1:	
  4620                           ; 3 bytes @ 0x0
  4621                           
  4622  00A0                     frexp@value:	
  4623                           ; 3 bytes @ 0x0
  4624                           
  4625  00A0                     ___lmul@multiplier:	
  4626                           ; 3 bytes @ 0x0
  4627                           
  4628  00A0                     ___aldiv@divisor:	
  4629                           ; 4 bytes @ 0x0
  4630                           
  4631                           
  4632                           ; 4 bytes @ 0x0
  4633  00A0                     	ds	1
  4634  00A1                     InitializeTaps@itap:	
  4635                           
  4636                           ; 2 bytes @ 0x1
  4637  00A1                     	ds	1
  4638  00A2                     ??_getModulationSubdivision:	
  4639  00A2                     ??_USARTInit:	
  4640                           ; 1 bytes @ 0x2
  4641                           
  4642  00A2                     ??_adc_convert:	
  4643                           ; 1 bytes @ 0x2
  4644                           
  4645  00A2                     ??_FLASH_ReadWord:	
  4646                           ; 1 bytes @ 0x2
  4647                           
  4648  00A2                     ??_set_leds_bottom:	
  4649                           ; 1 bytes @ 0x2
  4650                           
  4651  00A2                     ??_setLongBypassState:	
  4652                           ; 1 bytes @ 0x2
  4653                           
  4654  00A2                     ??_setLongTapState:	
  4655                           ; 1 bytes @ 0x2
  4656                           
  4657  00A2                     ??_updateSwitchBypassState:	
  4658                           ; 1 bytes @ 0x2
  4659                           
  4660  00A2                     ??_getSwitchBypassState:	
  4661                           ; 1 bytes @ 0x2
  4662                           
  4663  00A2                     FLASH_ReadWord@GIEBitValue:	
  4664                           ; 1 bytes @ 0x2
  4665                           
  4666  00A2                     set_leds_top@ledState:	
  4667                           ; 1 bytes @ 0x2
  4668                           
  4669  00A2                     ___awdiv@dividend:	
  4670                           ; 2 bytes @ 0x2
  4671                           
  4672                           
  4673                           ; 2 bytes @ 0x2
  4674  00A2                     	ds	1
  4675  00A3                     adc_convert@channel:	
  4676  00A3                     ___ftpack@exp:	
  4677                           ; 1 bytes @ 0x3
  4678                           
  4679  00A3                     frexp@eptr:	
  4680                           ; 1 bytes @ 0x3
  4681                           
  4682  00A3                     ___ftge@ff2:	
  4683                           ; 1 bytes @ 0x3
  4684                           
  4685                           
  4686                           ; 3 bytes @ 0x3
  4687  00A3                     	ds	1
  4688  00A4                     ??_set_leds_top:	
  4689  00A4                     ??_ReadSavedSettings:	
  4690                           ; 1 bytes @ 0x4
  4691                           
  4692  00A4                     ??_resetRingLEDs:	
  4693                           ; 1 bytes @ 0x4
  4694                           
  4695  00A4                     ??_setPresetDisplay:	
  4696                           ; 1 bytes @ 0x4
  4697                           
  4698  00A4                     ??_setExpressionDisplay:	
  4699                           ; 1 bytes @ 0x4
  4700                           
  4701  00A4                     ??_frexp:	
  4702                           ; 1 bytes @ 0x4
  4703                           
  4704  00A4                     ??___awdiv:	
  4705                           ; 1 bytes @ 0x4
  4706                           
  4707  00A4                     ___ftpack@sign:	
  4708                           ; 1 bytes @ 0x4
  4709                           
  4710  00A4                     ___lmul@multiplicand:	
  4711                           ; 1 bytes @ 0x4
  4712                           
  4713  00A4                     ___aldiv@dividend:	
  4714                           ; 4 bytes @ 0x4
  4715                           
  4716                           
  4717                           ; 4 bytes @ 0x4
  4718  00A4                     	ds	1
  4719  00A5                     ??___ftpack:	
  4720  00A5                     ___awdiv@counter:	
  4721                           ; 1 bytes @ 0x5
  4722                           
  4723                           
  4724                           ; 1 bytes @ 0x5
  4725  00A5                     	ds	1
  4726  00A6                     ??___ftge:	
  4727  00A6                     setPresetDisplay@ledChannel:	
  4728                           ; 1 bytes @ 0x6
  4729                           
  4730  00A6                     setExpressionDisplay@ledChannel:	
  4731                           ; 1 bytes @ 0x6
  4732                           
  4733  00A6                     ___awdiv@sign:	
  4734                           ; 1 bytes @ 0x6
  4735                           
  4736                           
  4737                           ; 1 bytes @ 0x6
  4738  00A6                     	ds	1
  4739  00A7                     ??_update_mode:	
  4740  00A7                     ??_update_selectMode:	
  4741                           ; 1 bytes @ 0x7
  4742                           
  4743  00A7                     ??_setPedalMode:	
  4744                           ; 1 bytes @ 0x7
  4745                           
  4746  00A7                     ___awdiv@quotient:	
  4747                           ; 1 bytes @ 0x7
  4748                           
  4749                           
  4750                           ; 2 bytes @ 0x7
  4751  00A7                     	ds	1
  4752  00A8                     ??___lmul:	
  4753  00A8                     ??___aldiv:	
  4754                           ; 1 bytes @ 0x8
  4755                           
  4756  00A8                     ?___altoft:	
  4757                           ; 1 bytes @ 0x8
  4758                           
  4759  00A8                     ?___awtoft:	
  4760                           ; 3 bytes @ 0x8
  4761                           
  4762  00A8                     ?___lltoft:	
  4763                           ; 3 bytes @ 0x8
  4764                           
  4765  00A8                     ___awtoft@c:	
  4766                           ; 3 bytes @ 0x8
  4767                           
  4768  00A8                     ___lmul@product:	
  4769                           ; 2 bytes @ 0x8
  4770                           
  4771  00A8                     ___altoft@c:	
  4772                           ; 4 bytes @ 0x8
  4773                           
  4774  00A8                     ___lltoft@c:	
  4775                           ; 4 bytes @ 0x8
  4776                           
  4777                           
  4778                           ; 4 bytes @ 0x8
  4779  00A8                     	ds	1
  4780  00A9                     ___aldiv@counter:	
  4781                           
  4782                           ; 1 bytes @ 0x9
  4783  00A9                     	ds	1
  4784  00AA                     ___aldiv@sign:	
  4785                           
  4786                           ; 1 bytes @ 0xA
  4787  00AA                     	ds	1
  4788  00AB                     ??___awtoft:	
  4789  00AB                     ___aldiv@quotient:	
  4790                           ; 1 bytes @ 0xB
  4791                           
  4792                           
  4793                           ; 4 bytes @ 0xB
  4794  00AB                     	ds	1
  4795  00AC                     ?_wait_ms:	
  4796  00AC                     ??___altoft:	
  4797                           ; 1 bytes @ 0xC
  4798                           
  4799  00AC                     ??___lltoft:	
  4800                           ; 1 bytes @ 0xC
  4801                           
  4802  00AC                     wait_ms@timeSec:	
  4803                           ; 1 bytes @ 0xC
  4804                           
  4805                           
  4806                           ; 2 bytes @ 0xC
  4807  00AC                     	ds	1
  4808  00AD                     ___awtoft@sign:	
  4809  00AD                     ___lltoft@exp:	
  4810                           ; 1 bytes @ 0xD
  4811                           
  4812                           
  4813                           ; 1 bytes @ 0xD
  4814  00AD                     	ds	1
  4815  00AE                     ??_wait_ms:	
  4816  00AE                     ?___ftmul:	
  4817                           ; 1 bytes @ 0xE
  4818                           
  4819  00AE                     ___altoft@exp:	
  4820                           ; 3 bytes @ 0xE
  4821                           
  4822  00AE                     ___ftmul@f1:	
  4823                           ; 1 bytes @ 0xE
  4824                           
  4825  00AE                     wait_ms@timemsl:	
  4826                           ; 3 bytes @ 0xE
  4827                           
  4828                           
  4829                           ; 4 bytes @ 0xE
  4830  00AE                     	ds	1
  4831  00AF                     ___altoft@sign:	
  4832                           
  4833                           ; 1 bytes @ 0xF
  4834  00AF                     	ds	2
  4835  00B1                     ___ftmul@f2:	
  4836                           
  4837                           ; 3 bytes @ 0x11
  4838  00B1                     	ds	1
  4839  00B2                     ??_read_bottom_tactile:	
  4840  00B2                     ??_read_top_tactile:	
  4841                           ; 1 bytes @ 0x12
  4842                           
  4843  00B2                     ??_solidring_tactiles:	
  4844                           ; 1 bytes @ 0x12
  4845                           
  4846  00B2                     ??_ring_tactiles:	
  4847                           ; 1 bytes @ 0x12
  4848                           
  4849  00B2                     ?_setSwitchBypassRelays:	
  4850                           ; 1 bytes @ 0x12
  4851                           
  4852  00B2                     setSwitchBypassRelays@f_state:	
  4853                           ; 1 bytes @ 0x12
  4854                           
  4855                           
  4856                           ; 2 bytes @ 0x12
  4857  00B2                     	ds	1
  4858  00B3                     ring_tactiles@iLed:	
  4859                           
  4860                           ; 2 bytes @ 0x13
  4861  00B3                     	ds	1
  4862  00B4                     ??_setSwitchBypassRelays:	
  4863  00B4                     ??___ftmul:	
  4864                           ; 1 bytes @ 0x14
  4865                           
  4866  00B4                     solidring_tactiles@ring_delay:	
  4867                           ; 1 bytes @ 0x14
  4868                           
  4869                           
  4870                           ; 1 bytes @ 0x14
  4871  00B4                     	ds	1
  4872  00B5                     ring_tactiles@iLed_1544:	
  4873                           
  4874                           ; 2 bytes @ 0x15
  4875  00B5                     	ds	1
  4876  00B6                     ?_setSwitchBypassState:	
  4877  00B6                     setSwitchBypassState@f_state:	
  4878                           ; 1 bytes @ 0x16
  4879                           
  4880                           
  4881                           ; 2 bytes @ 0x16
  4882  00B6                     	ds	1
  4883  00B7                     ??_showSave:	
  4884                           
  4885                           ; 1 bytes @ 0x17
  4886  00B7                     	ds	1
  4887  00B8                     ??_setSwitchBypassState:	
  4888  00B8                     ?_setDoublePressState:	
  4889                           ; 1 bytes @ 0x18
  4890                           
  4891  00B8                     ___ftmul@exp:	
  4892                           ; 1 bytes @ 0x18
  4893                           
  4894  00B8                     setDoublePressState@f_state:	
  4895                           ; 1 bytes @ 0x18
  4896                           
  4897                           
  4898                           ; 2 bytes @ 0x18
  4899  00B8                     	ds	1
  4900  00B9                     ___ftmul@f3_as_product:	
  4901                           
  4902                           ; 3 bytes @ 0x19
  4903  00B9                     	ds	1
  4904  00BA                     ??_initSwitchBypass:	
  4905  00BA                     ??_setDoublePressState:	
  4906                           ; 1 bytes @ 0x1A
  4907                           
  4908  00BA                     initSwitchBypass@initState:	
  4909                           ; 1 bytes @ 0x1A
  4910                           
  4911                           
  4912                           ; 2 bytes @ 0x1A
  4913  00BA                     	ds	2
  4914  00BC                     ??_updateSwitchBypass:	
  4915  00BC                     ??_updateSwitchTap:	
  4916                           ; 1 bytes @ 0x1C
  4917                           
  4918  00BC                     ___ftmul@cntr:	
  4919                           ; 1 bytes @ 0x1C
  4920                           
  4921                           
  4922                           ; 1 bytes @ 0x1C
  4923  00BC                     	ds	1
  4924  00BD                     ___ftmul@sign:	
  4925                           
  4926                           ; 1 bytes @ 0x1D
  4927  00BD                     	ds	1
  4928  00BE                     ?___ftneg:	
  4929  00BE                     ___ftneg@f1:	
  4930                           ; 3 bytes @ 0x1E
  4931                           
  4932                           
  4933                           ; 3 bytes @ 0x1E
  4934  00BE                     	ds	3
  4935  00C1                     ??___ftneg:	
  4936  00C1                     ?___ftadd:	
  4937                           ; 1 bytes @ 0x21
  4938                           
  4939  00C1                     ___ftadd@f1:	
  4940                           ; 3 bytes @ 0x21
  4941                           
  4942                           
  4943                           ; 3 bytes @ 0x21
  4944  00C1                     	ds	1
  4945  00C2                     updateSwitchTap@tapCntDivisor:	
  4946                           
  4947                           ; 2 bytes @ 0x22
  4948  00C2                     	ds	2
  4949  00C4                     updateSwitchTap@iCnt:	
  4950  00C4                     ___ftadd@f2:	
  4951                           ; 1 bytes @ 0x24
  4952                           
  4953                           
  4954                           ; 3 bytes @ 0x24
  4955  00C4                     	ds	3
  4956  00C7                     ??___ftadd:	
  4957                           
  4958                           ; 1 bytes @ 0x27
  4959  00C7                     	ds	4
  4960  00CB                     ___ftadd@sign:	
  4961                           
  4962                           ; 1 bytes @ 0x2B
  4963  00CB                     	ds	1
  4964  00CC                     ___ftadd@exp2:	
  4965                           
  4966                           ; 1 bytes @ 0x2C
  4967  00CC                     	ds	1
  4968  00CD                     ___ftadd@exp1:	
  4969                           
  4970                           ; 1 bytes @ 0x2D
  4971  00CD                     	ds	1
  4972  00CE                     ?___ftdiv:	
  4973  00CE                     ___ftdiv@f2:	
  4974                           ; 3 bytes @ 0x2E
  4975                           
  4976                           
  4977                           ; 3 bytes @ 0x2E
  4978  00CE                     	ds	3
  4979  00D1                     ___ftdiv@f1:	
  4980                           
  4981                           ; 3 bytes @ 0x31
  4982  00D1                     	ds	3
  4983  00D4                     ??___ftdiv:	
  4984                           
  4985                           ; 1 bytes @ 0x34
  4986  00D4                     	ds	4
  4987  00D8                     ___ftdiv@cntr:	
  4988                           
  4989                           ; 1 bytes @ 0x38
  4990  00D8                     	ds	1
  4991  00D9                     ___ftdiv@f3:	
  4992                           
  4993                           ; 3 bytes @ 0x39
  4994  00D9                     	ds	3
  4995  00DC                     ___ftdiv@exp:	
  4996                           
  4997                           ; 1 bytes @ 0x3C
  4998  00DC                     	ds	1
  4999  00DD                     ___ftdiv@sign:	
  5000                           
  5001                           ; 1 bytes @ 0x3D
  5002  00DD                     	ds	1
  5003  00DE                     ?_map:	
  5004  00DE                     map@x:	
  5005                           ; 3 bytes @ 0x3E
  5006                           
  5007                           
  5008                           ; 3 bytes @ 0x3E
  5009  00DE                     	ds	3
  5010  00E1                     map@in_min:	
  5011                           
  5012                           ; 3 bytes @ 0x41
  5013  00E1                     	ds	3
  5014  00E4                     map@in_max:	
  5015                           
  5016                           ; 3 bytes @ 0x44
  5017  00E4                     	ds	3
  5018  00E7                     map@out_min:	
  5019                           
  5020                           ; 3 bytes @ 0x47
  5021  00E7                     	ds	3
  5022  00EA                     map@out_max:	
  5023                           
  5024                           ; 3 bytes @ 0x4A
  5025  00EA                     	ds	3
  5026  00ED                     ??_map:	
  5027  00ED                     _map$2854:	
  5028                           ; 1 bytes @ 0x4D
  5029                           
  5030                           
  5031                           ; 3 bytes @ 0x4D
  5032  00ED                     	ds	3
  5033  00F0                     ??_scaleA10kPot:	
  5034  00F0                     ??_scaleiA10kPot:	
  5035                           ; 1 bytes @ 0x50
  5036                           
  5037  00F0                     ??_scaleA100kPot:	
  5038                           ; 1 bytes @ 0x50
  5039                           
  5040  00F0                     ??_set_subdivision:	
  5041                           ; 1 bytes @ 0x50
  5042                           
  5043  00F0                     ??_getModulationDelayTime:	
  5044                           ; 1 bytes @ 0x50
  5045                           
  5046  00F0                     ??_cos:	
  5047                           ; 1 bytes @ 0x50
  5048                           
  5049  00F0                     ??_modTri:	
  5050                           ; 1 bytes @ 0x50
  5051                           
  5052  00F0                     ??_modSquare:	
  5053                           ; 1 bytes @ 0x50
  5054                           
  5055  00F0                     ??_modSaw:	
  5056                           ; 1 bytes @ 0x50
  5057                           
  5058  00F0                     ??_eval_poly:	
  5059                           ; 1 bytes @ 0x50
  5060                           
  5061  00F0                     ??___wmul:	
  5062                           ; 1 bytes @ 0x50
  5063                           
  5064  00F0                     ??___ftsub:	
  5065                           ; 1 bytes @ 0x50
  5066                           
  5067                           
  5068                           	psect	cstackCOMMON
  5069  0070                     __pcstackCOMMON:	
  5070                           ; 1 bytes @ 0x50
  5071                           
  5072  0070                     ?_calcCosArray:	
  5073  0070                     ?_ConfigureOscillator:	
  5074                           ; 1 bytes @ 0x0
  5075                           
  5076  0070                     ?_InitApp:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     ?_InitializeTaps:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     ?_initSwitchBypass:	
  5083                           ; 1 bytes @ 0x0
  5084                           
  5085  0070                     ?_ReadSavedSettings:	
  5086                           ; 1 bytes @ 0x0
  5087                           
  5088  0070                     ?_update_mode:	
  5089                           ; 1 bytes @ 0x0
  5090                           
  5091  0070                     ?_update_selectMode:	
  5092                           ; 1 bytes @ 0x0
  5093                           
  5094  0070                     ?_updateSwitchBypass:	
  5095                           ; 1 bytes @ 0x0
  5096                           
  5097  0070                     ?_updateSwitchTap:	
  5098                           ; 1 bytes @ 0x0
  5099                           
  5100  0070                     ?_read_bottom_tactile:	
  5101                           ; 1 bytes @ 0x0
  5102                           
  5103  0070                     ?_read_top_tactile:	
  5104                           ; 1 bytes @ 0x0
  5105                           
  5106  0070                     ?_getModulationDelayTime:	
  5107                           ; 1 bytes @ 0x0
  5108                           
  5109  0070                     ?_updateModulationArray:	
  5110                           ; 1 bytes @ 0x0
  5111                           
  5112  0070                     ?_init_adc:	
  5113                           ; 1 bytes @ 0x0
  5114                           
  5115  0070                     ?_init_pwm:	
  5116                           ; 1 bytes @ 0x0
  5117                           
  5118  0070                     ?_init_timer2:	
  5119                           ; 1 bytes @ 0x0
  5120                           
  5121  0070                     ?_init_timer0:	
  5122                           ; 1 bytes @ 0x0
  5123                           
  5124  0070                     ?_solidring_tactiles:	
  5125                           ; 1 bytes @ 0x0
  5126                           
  5127  0070                     ?_ring_tactiles:	
  5128                           ; 1 bytes @ 0x0
  5129                           
  5130  0070                     ?_resetRingLEDs:	
  5131                           ; 1 bytes @ 0x0
  5132                           
  5133  0070                     ?_setPedalMode:	
  5134                           ; 1 bytes @ 0x0
  5135                           
  5136  0070                     ?_setPresetDisplay:	
  5137                           ; 1 bytes @ 0x0
  5138                           
  5139  0070                     ?_setExpressionDisplay:	
  5140                           ; 1 bytes @ 0x0
  5141                           
  5142  0070                     ?_isr:	
  5143                           ; 1 bytes @ 0x0
  5144                           
  5145  0070                     ?_main:	
  5146                           ; 1 bytes @ 0x0
  5147                           
  5148  0070                     ?_showSave:	
  5149                           ; 1 bytes @ 0x0
  5150                           
  5151  0070                     ?i1_set_leds_top:	
  5152                           ; 1 bytes @ 0x0
  5153                           
  5154  0070                     ?i1_getModulationSubdivision:	
  5155                           ; 1 bytes @ 0x0
  5156                           
  5157  0070                     ?i1___awdiv:	
  5158                           ; 2 bytes @ 0x0
  5159                           
  5160  0070                     ?i1___lmul:	
  5161                           ; 2 bytes @ 0x0
  5162                           
  5163  0070                     i1set_leds_top@x:	
  5164                           ; 4 bytes @ 0x0
  5165                           
  5166  0070                     i1___awdiv@divisor:	
  5167                           ; 2 bytes @ 0x0
  5168                           
  5169  0070                     i1___lmul@multiplier:	
  5170                           ; 2 bytes @ 0x0
  5171                           
  5172                           
  5173                           ; 4 bytes @ 0x0
  5174  0070                     	ds	2
  5175  0072                     ??i1_getModulationSubdivision:	
  5176  0072                     i1set_leds_top@ledState:	
  5177                           ; 1 bytes @ 0x2
  5178                           
  5179  0072                     i1___awdiv@dividend:	
  5180                           ; 2 bytes @ 0x2
  5181                           
  5182                           
  5183                           ; 2 bytes @ 0x2
  5184  0072                     	ds	2
  5185  0074                     ??i1_set_leds_top:	
  5186  0074                     ??i1___awdiv:	
  5187                           ; 1 bytes @ 0x4
  5188                           
  5189  0074                     i1___lmul@multiplicand:	
  5190                           ; 1 bytes @ 0x4
  5191                           
  5192                           
  5193                           ; 4 bytes @ 0x4
  5194  0074                     	ds	1
  5195  0075                     i1___awdiv@counter:	
  5196                           
  5197                           ; 1 bytes @ 0x5
  5198  0075                     	ds	1
  5199  0076                     i1___awdiv@sign:	
  5200                           
  5201                           ; 1 bytes @ 0x6
  5202  0076                     	ds	1
  5203  0077                     i1___awdiv@quotient:	
  5204                           
  5205                           ; 2 bytes @ 0x7
  5206  0077                     	ds	1
  5207  0078                     ??i1___lmul:	
  5208  0078                     i1___lmul@product:	
  5209                           ; 1 bytes @ 0x8
  5210                           
  5211                           
  5212                           ; 4 bytes @ 0x8
  5213  0078                     	ds	4
  5214  007C                     ??i1___aldiv:	
  5215                           
  5216                           ; 1 bytes @ 0xC
  5217  007C                     	ds	1
  5218  007D                     isr@subDiv:	
  5219                           
  5220                           ; 1 bytes @ 0xD
  5221  007D                     	ds	1
  5222                           
  5223                           	psect	cstackBANK0
  5224  0020                     __pcstackBANK0:	
  5225  0020                     ?i1___aldiv:	
  5226  0020                     i1___aldiv@divisor:	
  5227                           ; 4 bytes @ 0x0
  5228                           
  5229                           
  5230                           ; 4 bytes @ 0x0
  5231  0020                     	ds	4
  5232  0024                     i1___aldiv@dividend:	
  5233                           
  5234                           ; 4 bytes @ 0x4
  5235  0024                     	ds	4
  5236  0028                     i1___aldiv@counter:	
  5237                           
  5238                           ; 1 bytes @ 0x8
  5239  0028                     	ds	1
  5240  0029                     i1___aldiv@sign:	
  5241                           
  5242                           ; 1 bytes @ 0x9
  5243  0029                     	ds	1
  5244  002A                     i1___aldiv@quotient:	
  5245                           
  5246                           ; 4 bytes @ 0xA
  5247  002A                     	ds	4
  5248  002E                     ?_modulation:	
  5249  002E                     modulation@x:	
  5250                           ; 4 bytes @ 0xE
  5251                           
  5252                           
  5253                           ; 4 bytes @ 0xE
  5254  002E                     	ds	4
  5255  0032                     modulation@y:	
  5256                           
  5257                           ; 4 bytes @ 0x12
  5258  0032                     	ds	4
  5259  0036                     ??_modulation:	
  5260                           
  5261                           ; 1 bytes @ 0x16
  5262  0036                     	ds	4
  5263  003A                     ??_isr:	
  5264                           
  5265                           ; 1 bytes @ 0x1A
  5266  003A                     	ds	6
  5267                           
  5268                           	psect	maintext
  5269  0376                     __pmaintext:	
  5270 ;;
  5271 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  5272 ;;
  5273 ;; *************** function _main *****************
  5274 ;; Defined at:
  5275 ;;		line 69 in file "main.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : B1F/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5292 ;;      Totals:         0       0       0       0       0       8       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5293 ;;Total ram usage:       17 bytes
  5294 ;; Hardware stack levels required when called:    9
  5295 ;; This function calls:
  5296 ;;		_ConfigureOscillator
  5297 ;;		_InitApp
  5298 ;;		_InitializeTaps
  5299 ;;		_ReadSavedSettings
  5300 ;;		_USARTInit
  5301 ;;		___awtoft
  5302 ;;		___fttol
  5303 ;;		_adc_convert
  5304 ;;		_calcCosArray
  5305 ;;		_getModulationDelayTime
  5306 ;;		_initSwitchBypass
  5307 ;;		_map
  5308 ;;		_read_bottom_tactile
  5309 ;;		_read_top_tactile
  5310 ;;		_scaleA100kPot
  5311 ;;		_scaleA10kPot
  5312 ;;		_scaleiA10kPot
  5313 ;;		_set_subdivision
  5314 ;;		_updateModulationArray
  5315 ;;		_updateSwitchBypass
  5316 ;;		_updateSwitchTap
  5317 ;;		_update_mode
  5318 ;;		_update_selectMode
  5319 ;; This function is called by:
  5320 ;;		Startup code after reset
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function _main
  5326  0376                     _main:	
  5327                           
  5328                           ;main.c: 70: LATBbits.LATB5 = 0;
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5332  0376  0022               	movlb	2	; select bank2
  5333  0377  128D               	bcf	13,5	;volatile
  5334                           
  5335                           ;main.c: 71: calcCosArray();
  5336  0378  31A6  26FD  3183   	fcall	_calcCosArray
  5337                           
  5338                           ;main.c: 79: USARTInit(31250);
  5339  037B  3012               	movlw	18
  5340  037C  0021               	movlb	1	; select bank1
  5341  037D  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5342  037E  307A               	movlw	122
  5343  037F  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5344  0380  31A2  2293  3183   	fcall	_USARTInit
  5345                           
  5346                           ;main.c: 80: ConfigureOscillator();
  5347  0383  31AC  24CB  3183   	fcall	_ConfigureOscillator
  5348                           
  5349                           ;main.c: 81: InitApp();
  5350  0386  31AF  2702  3183   	fcall	_InitApp
  5351                           
  5352                           ;main.c: 83: PORTEbits.RE0 = 1;
  5353  0389  0020               	movlb	0	; select bank0
  5354  038A  1410               	bsf	16,0	;volatile
  5355                           
  5356                           ;main.c: 84: PORTEbits.RE1 = 1;
  5357  038B  1490               	bsf	16,1	;volatile
  5358                           
  5359                           ;main.c: 85: PORTDbits.RD6 = 1;
  5360  038C  170F               	bsf	15,6	;volatile
  5361                           
  5362                           ;main.c: 86: PORTDbits.RD5 = 1;
  5363  038D  168F               	bsf	15,5	;volatile
  5364                           
  5365                           ;main.c: 87: PORTCbits.RC0 = 1;
  5366  038E  140E               	bsf	14,0	;volatile
  5367                           
  5368                           ;main.c: 88: PORTDbits.RD7 = 1;
  5369  038F  178F               	bsf	15,7	;volatile
  5370                           
  5371                           ;main.c: 92: InitializeTaps();
  5372  0390  3187  27D8  3183   	fcall	_InitializeTaps
  5373                           
  5374                           ;main.c: 93: initSwitchBypass();
  5375  0393  31AD  250A  3183   	fcall	_initSwitchBypass
  5376                           
  5377                           ;main.c: 96: ReadSavedSettings();
  5378  0396  3198  2005  3183   	fcall	_ReadSavedSettings
  5379                           
  5380                           ;main.c: 97: LATBbits.LATB5 = 0;
  5381  0399  0022               	movlb	2	; select bank2
  5382  039A  128D               	bcf	13,5	;volatile
  5383  039B                     l9384:	
  5384                           ;main.c: 98: while (1) {
  5385                           
  5386                           
  5387                           ;main.c: 101: update_mode();
  5388  039B  31AF  27C8  3183   	fcall	_update_mode
  5389                           
  5390                           ;main.c: 102: update_selectMode();
  5391  039E  31A5  2551  3183   	fcall	_update_selectMode
  5392                           
  5393                           ;main.c: 105: updateSwitchBypass();
  5394  03A1  3192  2241  3183   	fcall	_updateSwitchBypass
  5395                           
  5396                           ;main.c: 106: if (presetSaveMode != 1) {
  5397  03A4  0020               	movlb	0	; select bank0
  5398  03A5  035F               	decf	_presetSaveMode,w
  5399  03A6  1903               	btfsc	3,2
  5400  03A7  2BAB               	goto	l9394
  5401                           
  5402                           ;main.c: 107: updateSwitchTap();
  5403  03A8  318B  23D2  3183   	fcall	_updateSwitchTap
  5404  03AB                     l9394:	
  5405                           
  5406                           ;main.c: 108: }
  5407                           ;main.c: 110: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5408  03AB  0020               	movlb	0	; select bank0
  5409  03AC  035F               	decf	_presetSaveMode,w
  5410  03AD  1903               	btfsc	3,2
  5411  03AE  2BBA               	goto	l9400
  5412  03AF  085E               	movf	_mode2_state,w
  5413  03B0  0023               	movlb	3	; select bank3
  5414  03B1  0665               	xorwf	_presetModeCnst^(0+384),w
  5415  03B2  1903               	skipnz
  5416  03B3  2BBA               	goto	l9400
  5417                           
  5418                           ;main.c: 111: read_bottom_tactile();
  5419  03B4  31A3  231F  3183   	fcall	_read_bottom_tactile
  5420                           
  5421                           ;main.c: 112: read_top_tactile();
  5422  03B7  31A3  2369  3183   	fcall	_read_top_tactile
  5423  03BA                     l9400:	
  5424                           
  5425                           ;main.c: 113: }
  5426                           ;main.c: 116: knob_1_pos = adc_convert(0);
  5427  03BA  3000               	movlw	0
  5428  03BB  31AD  252B  3183   	fcall	_adc_convert
  5429  03BE  0021               	movlb	1	; select bank1
  5430  03BF  0821               	movf	(?_adc_convert+1)^(0+128),w
  5431  03C0  0023               	movlb	3	; select bank3
  5432  03C1  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5433  03C2  0021               	movlb	1	; select bank1
  5434  03C3  0820               	movf	?_adc_convert^(0+128),w
  5435  03C4  0023               	movlb	3	; select bank3
  5436  03C5  00AC               	movwf	_knob_1_pos^(0+384)
  5437                           
  5438                           ;main.c: 117: knob_2_pos = adc_convert(1);
  5439  03C6  3001               	movlw	1
  5440  03C7  31AD  252B  3183   	fcall	_adc_convert
  5441  03CA  0021               	movlb	1	; select bank1
  5442  03CB  0821               	movf	(?_adc_convert+1)^(0+128),w
  5443  03CC  0023               	movlb	3	; select bank3
  5444  03CD  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5445  03CE  0021               	movlb	1	; select bank1
  5446  03CF  0820               	movf	?_adc_convert^(0+128),w
  5447  03D0  0023               	movlb	3	; select bank3
  5448  03D1  00AE               	movwf	_knob_2_pos^(0+384)
  5449                           
  5450                           ;main.c: 118: knob_3_pos = adc_convert(2);
  5451  03D2  3002               	movlw	2
  5452  03D3  31AD  252B  3183   	fcall	_adc_convert
  5453  03D6  0021               	movlb	1	; select bank1
  5454  03D7  0821               	movf	(?_adc_convert+1)^(0+128),w
  5455  03D8  0023               	movlb	3	; select bank3
  5456  03D9  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5457  03DA  0021               	movlb	1	; select bank1
  5458  03DB  0820               	movf	?_adc_convert^(0+128),w
  5459  03DC  0023               	movlb	3	; select bank3
  5460  03DD  00B0               	movwf	_knob_3_pos^(0+384)
  5461                           
  5462                           ;main.c: 119: knob_4_pos = adc_convert(3);
  5463  03DE  3003               	movlw	3
  5464  03DF  31AD  252B  3183   	fcall	_adc_convert
  5465  03E2  0021               	movlb	1	; select bank1
  5466  03E3  0821               	movf	(?_adc_convert+1)^(0+128),w
  5467  03E4  0023               	movlb	3	; select bank3
  5468  03E5  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5469  03E6  0021               	movlb	1	; select bank1
  5470  03E7  0820               	movf	?_adc_convert^(0+128),w
  5471  03E8  0023               	movlb	3	; select bank3
  5472  03E9  00B2               	movwf	_knob_4_pos^(0+384)
  5473                           
  5474                           ;main.c: 120: knob_5_pos = adc_convert(4);
  5475  03EA  3004               	movlw	4
  5476  03EB  31AD  252B  3183   	fcall	_adc_convert
  5477  03EE  0021               	movlb	1	; select bank1
  5478  03EF  0821               	movf	(?_adc_convert+1)^(0+128),w
  5479  03F0  0023               	movlb	3	; select bank3
  5480  03F1  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5481  03F2  0021               	movlb	1	; select bank1
  5482  03F3  0820               	movf	?_adc_convert^(0+128),w
  5483  03F4  0023               	movlb	3	; select bank3
  5484  03F5  00B4               	movwf	_knob_5_pos^(0+384)
  5485                           
  5486                           ;main.c: 124: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5487  03F6  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5488  03F7  0024               	movlb	4	; select bank4
  5489  03F8  00DE               	movwf	??_main^(0+512)
  5490  03F9  0023               	movlb	3	; select bank3
  5491  03FA  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5492  03FB  0024               	movlb	4	; select bank4
  5493  03FC  00DF               	movwf	(??_main^(0+512)+1)
  5494  03FD  0ADE               	incf	??_main^(0+512),f
  5495  03FE  1903               	skipnz
  5496  03FF  0ADF               	incf	(??_main^(0+512)+1),f
  5497  0400  0023               	movlb	3	; select bank3
  5498  0401  082C               	movf	_knob_1_pos^(0+384),w
  5499  0402  0024               	movlb	4	; select bank4
  5500  0403  075E               	addwf	??_main^(0+512),w
  5501  0404  00E0               	movwf	(??_main+2)^(0+512)
  5502  0405  0023               	movlb	3	; select bank3
  5503  0406  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5504  0407  0024               	movlb	4	; select bank4
  5505  0408  3D5F               	addwfc	(??_main+1)^(0+512),w
  5506  0409  00E1               	movwf	(??_main+3)^(0+512)
  5507  040A  0861               	movf	(??_main+3)^(0+512),w
  5508  040B  3A80               	xorlw	128
  5509  040C  00E2               	movwf	(??_main+4)^(0+512)
  5510  040D  3080               	movlw	128
  5511  040E  0262               	subwf	(??_main+4)^(0+512),w
  5512  040F  1D03               	skipz
  5513  0410  2C13               	goto	u10365
  5514  0411  3004               	movlw	4
  5515  0412  0260               	subwf	(??_main+2)^(0+512),w
  5516  0413                     u10365:	
  5517  0413  1803               	skipnc
  5518  0414  2C35               	goto	l9414
  5519  0415  0023               	movlb	3	; select bank3
  5520  0416  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5521  0417  0024               	movlb	4	; select bank4
  5522  0418  00DE               	movwf	??_main^(0+512)
  5523  0419  0023               	movlb	3	; select bank3
  5524  041A  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5525  041B  0024               	movlb	4	; select bank4
  5526  041C  00DF               	movwf	(??_main^(0+512)+1)
  5527  041D  0ADE               	incf	??_main^(0+512),f
  5528  041E  1903               	skipnz
  5529  041F  0ADF               	incf	(??_main^(0+512)+1),f
  5530  0420  0023               	movlb	3	; select bank3
  5531  0421  082C               	movf	_knob_1_pos^(0+384),w
  5532  0422  0024               	movlb	4	; select bank4
  5533  0423  075E               	addwf	??_main^(0+512),w
  5534  0424  00E0               	movwf	(??_main+2)^(0+512)
  5535  0425  0023               	movlb	3	; select bank3
  5536  0426  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5537  0427  0024               	movlb	4	; select bank4
  5538  0428  3D5F               	addwfc	(??_main+1)^(0+512),w
  5539  0429  00E1               	movwf	(??_main+3)^(0+512)
  5540  042A  0861               	movf	(??_main+3)^(0+512),w
  5541  042B  3A80               	xorlw	128
  5542  042C  00E2               	movwf	(??_main+4)^(0+512)
  5543  042D  307F               	movlw	127
  5544  042E  0262               	subwf	(??_main+4)^(0+512),w
  5545  042F  1D03               	skipz
  5546  0430  2C33               	goto	u10375
  5547  0431  30FD               	movlw	253
  5548  0432  0260               	subwf	(??_main+2)^(0+512),w
  5549  0433                     u10375:	
  5550  0433  1803               	skipnc
  5551  0434  2C93               	goto	l9424
  5552  0435                     l9414:	
  5553                           
  5554                           ;main.c: 125: knob1_prev = knob_1_pos;
  5555  0435  0023               	movlb	3	; select bank3
  5556  0436  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5557  0437  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5558  0438  082C               	movf	_knob_1_pos^(0+384),w
  5559  0439  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5560                           
  5561                           ;main.c: 126: CCPR4 = scaleA10kPot(knob1_prev);
  5562  043A  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5563  043B  0021               	movlb	1	; select bank1
  5564  043C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5565  043D  0023               	movlb	3	; select bank3
  5566  043E  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5567  043F  0021               	movlb	1	; select bank1
  5568  0440  00A8               	movwf	___awtoft@c^(0+128)
  5569  0441  31AE  262D  3183   	fcall	___awtoft
  5570  0444  0021               	movlb	1	; select bank1
  5571  0445  0828               	movf	?___awtoft^(0+128),w
  5572  0446  0025               	movlb	5	; select bank5
  5573  0447  00CC               	movwf	_main$2851^(0+640)
  5574  0448  0021               	movlb	1	; select bank1
  5575  0449  0829               	movf	(?___awtoft+1)^(0+128),w
  5576  044A  0025               	movlb	5	; select bank5
  5577  044B  00CD               	movwf	(_main$2851+1)^(0+640)
  5578  044C  0021               	movlb	1	; select bank1
  5579  044D  082A               	movf	(?___awtoft+2)^(0+128),w
  5580  044E  0025               	movlb	5	; select bank5
  5581  044F  00CE               	movwf	(_main$2851+2)^(0+640)
  5582                           
  5583                           ;main.c: 126: CCPR4 = scaleA10kPot(knob1_prev);
  5584  0450  084C               	movf	_main$2851^(0+640),w
  5585  0451  0022               	movlb	2	; select bank2
  5586  0452  00E7               	movwf	scaleA10kPot@input^(0+256)
  5587  0453  0025               	movlb	5	; select bank5
  5588  0454  084D               	movf	(_main$2851+1)^(0+640),w
  5589  0455  0022               	movlb	2	; select bank2
  5590  0456  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5591  0457  0025               	movlb	5	; select bank5
  5592  0458  084E               	movf	(_main$2851+2)^(0+640),w
  5593  0459  0022               	movlb	2	; select bank2
  5594  045A  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5595  045B  319B  23B6  3183   	fcall	_scaleA10kPot
  5596  045E  0022               	movlb	2	; select bank2
  5597  045F  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5598  0460  0026               	movlb	6	; select bank6
  5599  0461  0099               	movwf	25	;volatile
  5600  0462  0022               	movlb	2	; select bank2
  5601  0463  0867               	movf	?_scaleA10kPot^(0+256),w
  5602  0464  0026               	movlb	6	; select bank6
  5603  0465  0098               	movwf	24	;volatile
  5604                           
  5605                           ;main.c: 127: CCPR5 = scaleiA10kPot(knob1_prev);
  5606  0466  0023               	movlb	3	; select bank3
  5607  0467  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5608  0468  0021               	movlb	1	; select bank1
  5609  0469  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5610  046A  0023               	movlb	3	; select bank3
  5611  046B  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5612  046C  0021               	movlb	1	; select bank1
  5613  046D  00A8               	movwf	___awtoft@c^(0+128)
  5614  046E  31AE  262D  3183   	fcall	___awtoft
  5615  0471  0021               	movlb	1	; select bank1
  5616  0472  0828               	movf	?___awtoft^(0+128),w
  5617  0473  0025               	movlb	5	; select bank5
  5618  0474  00CF               	movwf	_main$2852^(0+640)
  5619  0475  0021               	movlb	1	; select bank1
  5620  0476  0829               	movf	(?___awtoft+1)^(0+128),w
  5621  0477  0025               	movlb	5	; select bank5
  5622  0478  00D0               	movwf	(_main$2852+1)^(0+640)
  5623  0479  0021               	movlb	1	; select bank1
  5624  047A  082A               	movf	(?___awtoft+2)^(0+128),w
  5625  047B  0025               	movlb	5	; select bank5
  5626  047C  00D1               	movwf	(_main$2852+2)^(0+640)
  5627                           
  5628                           ;main.c: 127: CCPR5 = scaleiA10kPot(knob1_prev);
  5629  047D  084F               	movf	_main$2852^(0+640),w
  5630  047E  0022               	movlb	2	; select bank2
  5631  047F  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5632  0480  0025               	movlb	5	; select bank5
  5633  0481  0850               	movf	(_main$2852+1)^(0+640),w
  5634  0482  0022               	movlb	2	; select bank2
  5635  0483  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5636  0484  0025               	movlb	5	; select bank5
  5637  0485  0851               	movf	(_main$2852+2)^(0+640),w
  5638  0486  0022               	movlb	2	; select bank2
  5639  0487  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5640  0488  319E  2664  3183   	fcall	_scaleiA10kPot
  5641  048B  0022               	movlb	2	; select bank2
  5642  048C  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5643  048D  0026               	movlb	6	; select bank6
  5644  048E  009D               	movwf	29	;volatile
  5645  048F  0022               	movlb	2	; select bank2
  5646  0490  0867               	movf	?_scaleiA10kPot^(0+256),w
  5647  0491  0026               	movlb	6	; select bank6
  5648  0492  009C               	movwf	28	;volatile
  5649  0493                     l9424:	
  5650                           
  5651                           ;main.c: 129: }
  5652                           ;main.c: 133: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5653  0493  0023               	movlb	3	; select bank3
  5654  0494  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5655  0495  0024               	movlb	4	; select bank4
  5656  0496  00DE               	movwf	??_main^(0+512)
  5657  0497  0023               	movlb	3	; select bank3
  5658  0498  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5659  0499  0024               	movlb	4	; select bank4
  5660  049A  00DF               	movwf	(??_main^(0+512)+1)
  5661  049B  0ADE               	incf	??_main^(0+512),f
  5662  049C  1903               	skipnz
  5663  049D  0ADF               	incf	(??_main^(0+512)+1),f
  5664  049E  0023               	movlb	3	; select bank3
  5665  049F  082E               	movf	_knob_2_pos^(0+384),w
  5666  04A0  0024               	movlb	4	; select bank4
  5667  04A1  075E               	addwf	??_main^(0+512),w
  5668  04A2  00E0               	movwf	(??_main+2)^(0+512)
  5669  04A3  0023               	movlb	3	; select bank3
  5670  04A4  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5671  04A5  0024               	movlb	4	; select bank4
  5672  04A6  3D5F               	addwfc	(??_main+1)^(0+512),w
  5673  04A7  00E1               	movwf	(??_main+3)^(0+512)
  5674  04A8  0861               	movf	(??_main+3)^(0+512),w
  5675  04A9  3A80               	xorlw	128
  5676  04AA  00E2               	movwf	(??_main+4)^(0+512)
  5677  04AB  3080               	movlw	128
  5678  04AC  0262               	subwf	(??_main+4)^(0+512),w
  5679  04AD  1D03               	skipz
  5680  04AE  2CB1               	goto	u10385
  5681  04AF  3004               	movlw	4
  5682  04B0  0260               	subwf	(??_main+2)^(0+512),w
  5683  04B1                     u10385:	
  5684  04B1  1803               	skipnc
  5685  04B2  2CD3               	goto	l9428
  5686  04B3  0023               	movlb	3	; select bank3
  5687  04B4  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5688  04B5  0024               	movlb	4	; select bank4
  5689  04B6  00DE               	movwf	??_main^(0+512)
  5690  04B7  0023               	movlb	3	; select bank3
  5691  04B8  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5692  04B9  0024               	movlb	4	; select bank4
  5693  04BA  00DF               	movwf	(??_main^(0+512)+1)
  5694  04BB  0ADE               	incf	??_main^(0+512),f
  5695  04BC  1903               	skipnz
  5696  04BD  0ADF               	incf	(??_main^(0+512)+1),f
  5697  04BE  0023               	movlb	3	; select bank3
  5698  04BF  082E               	movf	_knob_2_pos^(0+384),w
  5699  04C0  0024               	movlb	4	; select bank4
  5700  04C1  075E               	addwf	??_main^(0+512),w
  5701  04C2  00E0               	movwf	(??_main+2)^(0+512)
  5702  04C3  0023               	movlb	3	; select bank3
  5703  04C4  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5704  04C5  0024               	movlb	4	; select bank4
  5705  04C6  3D5F               	addwfc	(??_main+1)^(0+512),w
  5706  04C7  00E1               	movwf	(??_main+3)^(0+512)
  5707  04C8  0861               	movf	(??_main+3)^(0+512),w
  5708  04C9  3A80               	xorlw	128
  5709  04CA  00E2               	movwf	(??_main+4)^(0+512)
  5710  04CB  307F               	movlw	127
  5711  04CC  0262               	subwf	(??_main+4)^(0+512),w
  5712  04CD  1D03               	skipz
  5713  04CE  2CD1               	goto	u10395
  5714  04CF  30FD               	movlw	253
  5715  04D0  0260               	subwf	(??_main+2)^(0+512),w
  5716  04D1                     u10395:	
  5717  04D1  1803               	skipnc
  5718  04D2  2D49               	goto	l366
  5719  04D3                     l9428:	
  5720                           
  5721                           ;main.c: 134: knob2_prev = knob_2_pos;
  5722  04D3  0023               	movlb	3	; select bank3
  5723  04D4  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5724  04D5  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5725  04D6  082E               	movf	_knob_2_pos^(0+384),w
  5726  04D7  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5727                           
  5728                           ;main.c: 135: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5729  04D8  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5730  04D9  0024               	movlb	4	; select bank4
  5731  04DA  00DE               	movwf	??_main^(0+512)
  5732  04DB  0023               	movlb	3	; select bank3
  5733  04DC  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5734  04DD  0024               	movlb	4	; select bank4
  5735  04DE  00DF               	movwf	(??_main^(0+512)+1)
  5736  04DF  0ADE               	incf	??_main^(0+512),f
  5737  04E0  1903               	skipnz
  5738  04E1  0ADF               	incf	(??_main^(0+512)+1),f
  5739  04E2  085E               	movf	??_main^(0+512),w
  5740  04E3  3EFF               	addlw	255
  5741  04E4  0021               	movlb	1	; select bank1
  5742  04E5  00A8               	movwf	___awtoft@c^(0+128)
  5743  04E6  3003               	movlw	3
  5744  04E7  0024               	movlb	4	; select bank4
  5745  04E8  3D5F               	addwfc	(??_main+1)^(0+512),w
  5746  04E9  0021               	movlb	1	; select bank1
  5747  04EA  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5748  04EB  31AE  262D  3183   	fcall	___awtoft
  5749  04EE  0021               	movlb	1	; select bank1
  5750  04EF  0828               	movf	?___awtoft^(0+128),w
  5751  04F0  0025               	movlb	5	; select bank5
  5752  04F1  00D2               	movwf	_main$2853^(0+640)
  5753  04F2  0021               	movlb	1	; select bank1
  5754  04F3  0829               	movf	(?___awtoft+1)^(0+128),w
  5755  04F4  0025               	movlb	5	; select bank5
  5756  04F5  00D3               	movwf	(_main$2853+1)^(0+640)
  5757  04F6  0021               	movlb	1	; select bank1
  5758  04F7  082A               	movf	(?___awtoft+2)^(0+128),w
  5759  04F8  0025               	movlb	5	; select bank5
  5760  04F9  00D4               	movwf	(_main$2853+2)^(0+640)
  5761                           
  5762                           ;main.c: 135: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5763  04FA  0852               	movf	_main$2853^(0+640),w
  5764  04FB  0022               	movlb	2	; select bank2
  5765  04FC  00E7               	movwf	scaleA100kPot@input^(0+256)
  5766  04FD  0025               	movlb	5	; select bank5
  5767  04FE  0853               	movf	(_main$2853+1)^(0+640),w
  5768  04FF  0022               	movlb	2	; select bank2
  5769  0500  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5770  0501  0025               	movlb	5	; select bank5
  5771  0502  0854               	movf	(_main$2853+2)^(0+640),w
  5772  0503  0022               	movlb	2	; select bank2
  5773  0504  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5774  0505  3198  20FD  3183   	fcall	_scaleA100kPot
  5775  0508  0022               	movlb	2	; select bank2
  5776  0509  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5777  050A  0025               	movlb	5	; select bank5
  5778  050B  0092               	movwf	18	;volatile
  5779  050C  0022               	movlb	2	; select bank2
  5780  050D  0867               	movf	?_scaleA100kPot^(0+256),w
  5781  050E  0025               	movlb	5	; select bank5
  5782  050F  0091               	movwf	17	;volatile
  5783                           
  5784                           ;main.c: 136: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5785  0510  0023               	movlb	3	; select bank3
  5786  0511  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5787  0512  0024               	movlb	4	; select bank4
  5788  0513  00DE               	movwf	??_main^(0+512)
  5789  0514  0023               	movlb	3	; select bank3
  5790  0515  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5791  0516  0024               	movlb	4	; select bank4
  5792  0517  00DF               	movwf	(??_main^(0+512)+1)
  5793  0518  0ADE               	incf	??_main^(0+512),f
  5794  0519  1903               	skipnz
  5795  051A  0ADF               	incf	(??_main^(0+512)+1),f
  5796  051B  085E               	movf	??_main^(0+512),w
  5797  051C  3EFF               	addlw	255
  5798  051D  0021               	movlb	1	; select bank1
  5799  051E  00A8               	movwf	___awtoft@c^(0+128)
  5800  051F  3003               	movlw	3
  5801  0520  0024               	movlb	4	; select bank4
  5802  0521  3D5F               	addwfc	(??_main+1)^(0+512),w
  5803  0522  0021               	movlb	1	; select bank1
  5804  0523  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5805  0524  31AE  262D  3183   	fcall	___awtoft
  5806  0527  0021               	movlb	1	; select bank1
  5807  0528  0828               	movf	?___awtoft^(0+128),w
  5808  0529  0025               	movlb	5	; select bank5
  5809  052A  00D2               	movwf	_main$2853^(0+640)
  5810  052B  0021               	movlb	1	; select bank1
  5811  052C  0829               	movf	(?___awtoft+1)^(0+128),w
  5812  052D  0025               	movlb	5	; select bank5
  5813  052E  00D3               	movwf	(_main$2853+1)^(0+640)
  5814  052F  0021               	movlb	1	; select bank1
  5815  0530  082A               	movf	(?___awtoft+2)^(0+128),w
  5816  0531  0025               	movlb	5	; select bank5
  5817  0532  00D4               	movwf	(_main$2853+2)^(0+640)
  5818                           
  5819                           ;main.c: 136: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5820  0533  0852               	movf	_main$2853^(0+640),w
  5821  0534  0022               	movlb	2	; select bank2
  5822  0535  00E7               	movwf	scaleA100kPot@input^(0+256)
  5823  0536  0025               	movlb	5	; select bank5
  5824  0537  0853               	movf	(_main$2853+1)^(0+640),w
  5825  0538  0022               	movlb	2	; select bank2
  5826  0539  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5827  053A  0025               	movlb	5	; select bank5
  5828  053B  0854               	movf	(_main$2853+2)^(0+640),w
  5829  053C  0022               	movlb	2	; select bank2
  5830  053D  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5831  053E  3198  20FD  3183   	fcall	_scaleA100kPot
  5832  0541  0022               	movlb	2	; select bank2
  5833  0542  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5834  0543  0025               	movlb	5	; select bank5
  5835  0544  0099               	movwf	25	;volatile
  5836  0545  0022               	movlb	2	; select bank2
  5837  0546  0867               	movf	?_scaleA100kPot^(0+256),w
  5838  0547  0025               	movlb	5	; select bank5
  5839  0548  0098               	movwf	24	;volatile
  5840  0549                     l366:	
  5841                           
  5842                           ;main.c: 137: }
  5843                           ;main.c: 147: oldSymmetry = symmetry;
  5844  0549  0023               	movlb	3	; select bank3
  5845  054A  085C               	movf	(_symmetry+1)^(0+384),w
  5846  054B  0024               	movlb	4	; select bank4
  5847  054C  00D8               	movwf	(_oldSymmetry+1)^(0+512)
  5848  054D  0023               	movlb	3	; select bank3
  5849  054E  085B               	movf	_symmetry^(0+384),w
  5850  054F  0024               	movlb	4	; select bank4
  5851  0550  00D7               	movwf	_oldSymmetry^(0+512)
  5852                           
  5853                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5854  0551  0023               	movlb	3	; select bank3
  5855  0552  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5856  0553  0024               	movlb	4	; select bank4
  5857  0554  00DE               	movwf	??_main^(0+512)
  5858  0555  0023               	movlb	3	; select bank3
  5859  0556  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5860  0557  0024               	movlb	4	; select bank4
  5861  0558  00DF               	movwf	(??_main^(0+512)+1)
  5862  0559  0ADE               	incf	??_main^(0+512),f
  5863  055A  1903               	skipnz
  5864  055B  0ADF               	incf	(??_main^(0+512)+1),f
  5865  055C  0023               	movlb	3	; select bank3
  5866  055D  0830               	movf	_knob_3_pos^(0+384),w
  5867  055E  0024               	movlb	4	; select bank4
  5868  055F  075E               	addwf	??_main^(0+512),w
  5869  0560  00E0               	movwf	(??_main+2)^(0+512)
  5870  0561  0023               	movlb	3	; select bank3
  5871  0562  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5872  0563  0024               	movlb	4	; select bank4
  5873  0564  3D5F               	addwfc	(??_main+1)^(0+512),w
  5874  0565  00E1               	movwf	(??_main+3)^(0+512)
  5875  0566  0861               	movf	(??_main+3)^(0+512),w
  5876  0567  3A80               	xorlw	128
  5877  0568  00E2               	movwf	(??_main+4)^(0+512)
  5878  0569  3080               	movlw	128
  5879  056A  0262               	subwf	(??_main+4)^(0+512),w
  5880  056B  1D03               	skipz
  5881  056C  2D6F               	goto	u10405
  5882  056D  3004               	movlw	4
  5883  056E  0260               	subwf	(??_main+2)^(0+512),w
  5884  056F                     u10405:	
  5885  056F  1803               	skipnc
  5886  0570  2D91               	goto	l9442
  5887  0571  0023               	movlb	3	; select bank3
  5888  0572  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5889  0573  0024               	movlb	4	; select bank4
  5890  0574  00DE               	movwf	??_main^(0+512)
  5891  0575  0023               	movlb	3	; select bank3
  5892  0576  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5893  0577  0024               	movlb	4	; select bank4
  5894  0578  00DF               	movwf	(??_main^(0+512)+1)
  5895  0579  0ADE               	incf	??_main^(0+512),f
  5896  057A  1903               	skipnz
  5897  057B  0ADF               	incf	(??_main^(0+512)+1),f
  5898  057C  0023               	movlb	3	; select bank3
  5899  057D  0830               	movf	_knob_3_pos^(0+384),w
  5900  057E  0024               	movlb	4	; select bank4
  5901  057F  075E               	addwf	??_main^(0+512),w
  5902  0580  00E0               	movwf	(??_main+2)^(0+512)
  5903  0581  0023               	movlb	3	; select bank3
  5904  0582  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5905  0583  0024               	movlb	4	; select bank4
  5906  0584  3D5F               	addwfc	(??_main+1)^(0+512),w
  5907  0585  00E1               	movwf	(??_main+3)^(0+512)
  5908  0586  0861               	movf	(??_main+3)^(0+512),w
  5909  0587  3A80               	xorlw	128
  5910  0588  00E2               	movwf	(??_main+4)^(0+512)
  5911  0589  307F               	movlw	127
  5912  058A  0262               	subwf	(??_main+4)^(0+512),w
  5913  058B  1D03               	skipz
  5914  058C  2D8F               	goto	u10415
  5915  058D  30FD               	movlw	253
  5916  058E  0260               	subwf	(??_main+2)^(0+512),w
  5917  058F                     u10415:	
  5918  058F  1803               	skipnc
  5919  0590  2DDB               	goto	l9446
  5920  0591                     l9442:	
  5921                           
  5922                           ;main.c: 149: knob3_prev = knob_3_pos;
  5923  0591  0023               	movlb	3	; select bank3
  5924  0592  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5925  0593  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5926  0594  0830               	movf	_knob_3_pos^(0+384),w
  5927  0595  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5928                           
  5929                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5930  0596  3080               	movlw	128
  5931  0597  0021               	movlb	1	; select bank1
  5932  0598  00EA               	movwf	map@out_max^(0+128)
  5933  0599  309D               	movlw	157
  5934  059A  00EB               	movwf	(map@out_max+1)^(0+128)
  5935  059B  3043               	movlw	67
  5936  059C  00EC               	movwf	(map@out_max+2)^(0+128)
  5937  059D  3000               	movlw	0
  5938  059E  00E7               	movwf	map@out_min^(0+128)
  5939  059F  3034               	movlw	52
  5940  05A0  00E8               	movwf	(map@out_min+1)^(0+128)
  5941  05A1  3042               	movlw	66
  5942  05A2  00E9               	movwf	(map@out_min+2)^(0+128)
  5943  05A3  30C0               	movlw	192
  5944  05A4  00E4               	movwf	map@in_max^(0+128)
  5945  05A5  307F               	movlw	127
  5946  05A6  00E5               	movwf	(map@in_max+1)^(0+128)
  5947  05A7  3044               	movlw	68
  5948  05A8  00E6               	movwf	(map@in_max+2)^(0+128)
  5949  05A9  3000               	movlw	0
  5950  05AA  00E1               	movwf	map@in_min^(0+128)
  5951  05AB  3000               	movlw	0
  5952  05AC  00E2               	movwf	(map@in_min+1)^(0+128)
  5953  05AD  3000               	movlw	0
  5954  05AE  00E3               	movwf	(map@in_min+2)^(0+128)
  5955  05AF  0023               	movlb	3	; select bank3
  5956  05B0  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5957  05B1  0021               	movlb	1	; select bank1
  5958  05B2  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5959  05B3  0023               	movlb	3	; select bank3
  5960  05B4  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5961  05B5  0021               	movlb	1	; select bank1
  5962  05B6  00A8               	movwf	___awtoft@c^(0+128)
  5963  05B7  31AE  262D  3183   	fcall	___awtoft
  5964  05BA  0021               	movlb	1	; select bank1
  5965  05BB  0828               	movf	?___awtoft^(0+128),w
  5966  05BC  00DE               	movwf	map@x^(0+128)
  5967  05BD  0829               	movf	(?___awtoft+1)^(0+128),w
  5968  05BE  00DF               	movwf	(map@x+1)^(0+128)
  5969  05BF  082A               	movf	(?___awtoft+2)^(0+128),w
  5970  05C0  00E0               	movwf	(map@x+2)^(0+128)
  5971  05C1  319A  2209  3183   	fcall	_map
  5972  05C4  0021               	movlb	1	; select bank1
  5973  05C5  085E               	movf	?_map^(0+128),w
  5974  05C6  0022               	movlb	2	; select bank2
  5975  05C7  00A0               	movwf	___fttol@f1^(0+256)
  5976  05C8  0021               	movlb	1	; select bank1
  5977  05C9  085F               	movf	(?_map+1)^(0+128),w
  5978  05CA  0022               	movlb	2	; select bank2
  5979  05CB  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5980  05CC  0021               	movlb	1	; select bank1
  5981  05CD  0860               	movf	(?_map+2)^(0+128),w
  5982  05CE  0022               	movlb	2	; select bank2
  5983  05CF  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5984  05D0  3199  2182  3183   	fcall	___fttol
  5985  05D3  0022               	movlb	2	; select bank2
  5986  05D4  0821               	movf	(?___fttol^(0+256)+1),w
  5987  05D5  0023               	movlb	3	; select bank3
  5988  05D6  00DC               	movwf	(_symmetry+1)^(0+384)
  5989  05D7  0022               	movlb	2	; select bank2
  5990  05D8  0820               	movf	?___fttol^(0+256),w
  5991  05D9  0023               	movlb	3	; select bank3
  5992  05DA  00DB               	movwf	_symmetry^(0+384)
  5993  05DB                     l9446:	
  5994                           
  5995                           ;main.c: 157: }
  5996                           ;main.c: 159: if (oldSymmetry - symmetry >= 2 || oldSymmetry - symmetry <= -2) {
  5997  05DB  0023               	movlb	3	; select bank3
  5998  05DC  095B               	comf	_symmetry^(0+384),w
  5999  05DD  0024               	movlb	4	; select bank4
  6000  05DE  00DE               	movwf	??_main^(0+512)
  6001  05DF  0023               	movlb	3	; select bank3
  6002  05E0  095C               	comf	(_symmetry+1)^(0+384),w
  6003  05E1  0024               	movlb	4	; select bank4
  6004  05E2  00DF               	movwf	(??_main^(0+512)+1)
  6005  05E3  0ADE               	incf	??_main^(0+512),f
  6006  05E4  1903               	skipnz
  6007  05E5  0ADF               	incf	(??_main^(0+512)+1),f
  6008  05E6  0857               	movf	_oldSymmetry^(0+512),w
  6009  05E7  075E               	addwf	??_main^(0+512),w
  6010  05E8  00E0               	movwf	(??_main+2)^(0+512)
  6011  05E9  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6012  05EA  3D5F               	addwfc	(??_main+1)^(0+512),w
  6013  05EB  00E1               	movwf	(??_main+3)^(0+512)
  6014  05EC  0861               	movf	(??_main+3)^(0+512),w
  6015  05ED  3A80               	xorlw	128
  6016  05EE  00E2               	movwf	(??_main+4)^(0+512)
  6017  05EF  3080               	movlw	128
  6018  05F0  0262               	subwf	(??_main+4)^(0+512),w
  6019  05F1  1D03               	skipz
  6020  05F2  2DF5               	goto	u10425
  6021  05F3  3002               	movlw	2
  6022  05F4  0260               	subwf	(??_main+2)^(0+512),w
  6023  05F5                     u10425:	
  6024  05F5  1803               	skipnc
  6025  05F6  2E13               	goto	l374
  6026  05F7  0023               	movlb	3	; select bank3
  6027  05F8  095B               	comf	_symmetry^(0+384),w
  6028  05F9  0024               	movlb	4	; select bank4
  6029  05FA  00DE               	movwf	??_main^(0+512)
  6030  05FB  0023               	movlb	3	; select bank3
  6031  05FC  095C               	comf	(_symmetry+1)^(0+384),w
  6032  05FD  0024               	movlb	4	; select bank4
  6033  05FE  00DF               	movwf	(??_main^(0+512)+1)
  6034  05FF  0ADE               	incf	??_main^(0+512),f
  6035  0600  1903               	skipnz
  6036  0601  0ADF               	incf	(??_main^(0+512)+1),f
  6037  0602  0857               	movf	_oldSymmetry^(0+512),w
  6038  0603  075E               	addwf	??_main^(0+512),w
  6039  0604  00E0               	movwf	(??_main+2)^(0+512)
  6040  0605  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6041  0606  3D5F               	addwfc	(??_main+1)^(0+512),w
  6042  0607  00E1               	movwf	(??_main+3)^(0+512)
  6043  0608  0861               	movf	(??_main+3)^(0+512),w
  6044  0609  3A80               	xorlw	128
  6045  060A  00E2               	movwf	(??_main+4)^(0+512)
  6046  060B  307F               	movlw	127
  6047  060C  0262               	subwf	(??_main+4)^(0+512),w
  6048  060D  1D03               	skipz
  6049  060E  2E11               	goto	u10435
  6050  060F  30FF               	movlw	255
  6051  0610  0260               	subwf	(??_main+2)^(0+512),w
  6052  0611                     u10435:	
  6053  0611  1803               	skipnc
  6054  0612  2E16               	goto	l9450
  6055  0613                     l374:	
  6056                           
  6057                           ;main.c: 161: modulation_changed = 1;
  6058  0613  0023               	movlb	3	; select bank3
  6059  0614  01C7               	clrf	_modulation_changed^(0+384)
  6060  0615  0AC7               	incf	_modulation_changed^(0+384),f
  6061  0616                     l9450:	
  6062                           
  6063                           ;main.c: 162: }
  6064                           ;main.c: 171: oldBaseTime = baseline_mod_time;
  6065  0616  0020               	movlb	0	; select bank0
  6066  0617  0841               	movf	_baseline_mod_time+1,w	;volatile
  6067  0618  0024               	movlb	4	; select bank4
  6068  0619  00D6               	movwf	(_oldBaseTime+1)^(0+512)
  6069  061A  0020               	movlb	0	; select bank0
  6070  061B  0840               	movf	_baseline_mod_time,w	;volatile
  6071  061C  0024               	movlb	4	; select bank4
  6072  061D  00D5               	movwf	_oldBaseTime^(0+512)
  6073                           
  6074                           ;main.c: 172: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6075  061E  0023               	movlb	3	; select bank3
  6076  061F  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6077  0620  0024               	movlb	4	; select bank4
  6078  0621  00DE               	movwf	??_main^(0+512)
  6079  0622  0023               	movlb	3	; select bank3
  6080  0623  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6081  0624  0024               	movlb	4	; select bank4
  6082  0625  00DF               	movwf	(??_main^(0+512)+1)
  6083  0626  0ADE               	incf	??_main^(0+512),f
  6084  0627  1903               	skipnz
  6085  0628  0ADF               	incf	(??_main^(0+512)+1),f
  6086  0629  0023               	movlb	3	; select bank3
  6087  062A  0832               	movf	_knob_4_pos^(0+384),w
  6088  062B  0024               	movlb	4	; select bank4
  6089  062C  075E               	addwf	??_main^(0+512),w
  6090  062D  00E0               	movwf	(??_main+2)^(0+512)
  6091  062E  0023               	movlb	3	; select bank3
  6092  062F  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6093  0630  0024               	movlb	4	; select bank4
  6094  0631  3D5F               	addwfc	(??_main+1)^(0+512),w
  6095  0632  00E1               	movwf	(??_main+3)^(0+512)
  6096  0633  0861               	movf	(??_main+3)^(0+512),w
  6097  0634  3A80               	xorlw	128
  6098  0635  00E2               	movwf	(??_main+4)^(0+512)
  6099  0636  3080               	movlw	128
  6100  0637  0262               	subwf	(??_main+4)^(0+512),w
  6101  0638  1D03               	skipz
  6102  0639  2E3C               	goto	u10445
  6103  063A  3004               	movlw	4
  6104  063B  0260               	subwf	(??_main+2)^(0+512),w
  6105  063C                     u10445:	
  6106  063C  1803               	skipnc
  6107  063D  2E5E               	goto	l9456
  6108  063E  0023               	movlb	3	; select bank3
  6109  063F  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6110  0640  0024               	movlb	4	; select bank4
  6111  0641  00DE               	movwf	??_main^(0+512)
  6112  0642  0023               	movlb	3	; select bank3
  6113  0643  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6114  0644  0024               	movlb	4	; select bank4
  6115  0645  00DF               	movwf	(??_main^(0+512)+1)
  6116  0646  0ADE               	incf	??_main^(0+512),f
  6117  0647  1903               	skipnz
  6118  0648  0ADF               	incf	(??_main^(0+512)+1),f
  6119  0649  0023               	movlb	3	; select bank3
  6120  064A  0832               	movf	_knob_4_pos^(0+384),w
  6121  064B  0024               	movlb	4	; select bank4
  6122  064C  075E               	addwf	??_main^(0+512),w
  6123  064D  00E0               	movwf	(??_main+2)^(0+512)
  6124  064E  0023               	movlb	3	; select bank3
  6125  064F  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6126  0650  0024               	movlb	4	; select bank4
  6127  0651  3D5F               	addwfc	(??_main+1)^(0+512),w
  6128  0652  00E1               	movwf	(??_main+3)^(0+512)
  6129  0653  0861               	movf	(??_main+3)^(0+512),w
  6130  0654  3A80               	xorlw	128
  6131  0655  00E2               	movwf	(??_main+4)^(0+512)
  6132  0656  307F               	movlw	127
  6133  0657  0262               	subwf	(??_main+4)^(0+512),w
  6134  0658  1D03               	skipz
  6135  0659  2E5C               	goto	u10455
  6136  065A  30FD               	movlw	253
  6137  065B  0260               	subwf	(??_main+2)^(0+512),w
  6138  065C                     u10455:	
  6139  065C  1803               	skipnc
  6140  065D  2EAD               	goto	l9460
  6141  065E                     l9456:	
  6142                           
  6143                           ;main.c: 173: knob4_prev = knob_4_pos;
  6144  065E  0023               	movlb	3	; select bank3
  6145  065F  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6146  0660  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6147  0661  0832               	movf	_knob_4_pos^(0+384),w
  6148  0662  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6149                           
  6150                           ;main.c: 174: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6151  0663  3040               	movlw	64
  6152  0664  0021               	movlb	1	; select bank1
  6153  0665  00EA               	movwf	map@out_max^(0+128)
  6154  0666  3030               	movlw	48
  6155  0667  00EB               	movwf	(map@out_max+1)^(0+128)
  6156  0668  3045               	movlw	69
  6157  0669  00EC               	movwf	(map@out_max+2)^(0+128)
  6158  066A  3000               	movlw	0
  6159  066B  00E7               	movwf	map@out_min^(0+128)
  6160  066C  3034               	movlw	52
  6161  066D  00E8               	movwf	(map@out_min+1)^(0+128)
  6162  066E  3043               	movlw	67
  6163  066F  00E9               	movwf	(map@out_min+2)^(0+128)
  6164  0670  30C0               	movlw	192
  6165  0671  00E4               	movwf	map@in_max^(0+128)
  6166  0672  307F               	movlw	127
  6167  0673  00E5               	movwf	(map@in_max+1)^(0+128)
  6168  0674  3044               	movlw	68
  6169  0675  00E6               	movwf	(map@in_max+2)^(0+128)
  6170  0676  3000               	movlw	0
  6171  0677  00E1               	movwf	map@in_min^(0+128)
  6172  0678  3000               	movlw	0
  6173  0679  00E2               	movwf	(map@in_min+1)^(0+128)
  6174  067A  3000               	movlw	0
  6175  067B  00E3               	movwf	(map@in_min+2)^(0+128)
  6176  067C  0023               	movlb	3	; select bank3
  6177  067D  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6178  067E  0021               	movlb	1	; select bank1
  6179  067F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6180  0680  0023               	movlb	3	; select bank3
  6181  0681  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6182  0682  0021               	movlb	1	; select bank1
  6183  0683  00A8               	movwf	___awtoft@c^(0+128)
  6184  0684  31AE  262D  3183   	fcall	___awtoft
  6185  0687  0021               	movlb	1	; select bank1
  6186  0688  0828               	movf	?___awtoft^(0+128),w
  6187  0689  00DE               	movwf	map@x^(0+128)
  6188  068A  0829               	movf	(?___awtoft+1)^(0+128),w
  6189  068B  00DF               	movwf	(map@x+1)^(0+128)
  6190  068C  082A               	movf	(?___awtoft+2)^(0+128),w
  6191  068D  00E0               	movwf	(map@x+2)^(0+128)
  6192  068E  319A  2209  3183   	fcall	_map
  6193  0691  0021               	movlb	1	; select bank1
  6194  0692  085E               	movf	?_map^(0+128),w
  6195  0693  0022               	movlb	2	; select bank2
  6196  0694  00A0               	movwf	___fttol@f1^(0+256)
  6197  0695  0021               	movlb	1	; select bank1
  6198  0696  085F               	movf	(?_map+1)^(0+128),w
  6199  0697  0022               	movlb	2	; select bank2
  6200  0698  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6201  0699  0021               	movlb	1	; select bank1
  6202  069A  0860               	movf	(?_map+2)^(0+128),w
  6203  069B  0022               	movlb	2	; select bank2
  6204  069C  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6205  069D  3199  2182  3183   	fcall	___fttol
  6206  06A0  0022               	movlb	2	; select bank2
  6207  06A1  0820               	movf	?___fttol^(0+256),w
  6208  06A2  0020               	movlb	0	; select bank0
  6209  06A3  00C0               	movwf	_baseline_mod_time	;volatile
  6210  06A4  0022               	movlb	2	; select bank2
  6211  06A5  0821               	movf	(?___fttol^(0+256)+1),w
  6212  06A6  0020               	movlb	0	; select bank0
  6213  06A7  00C1               	movwf	_baseline_mod_time+1	;volatile
  6214  06A8  0D89               	rlf	9,f
  6215  06A9  3B89               	subwfb	9,f
  6216  06AA  0989               	comf	9,f
  6217  06AB  00C2               	movwf	_baseline_mod_time+2	;volatile
  6218  06AC  00C3               	movwf	_baseline_mod_time+3	;volatile
  6219  06AD                     l9460:	
  6220                           
  6221                           ;main.c: 175: }
  6222                           ;main.c: 177: if (oldBaseTime - baseline_mod_time >= 1 || oldBaseTime - baseline_mod_tim
      +                          e <= -1) {
  6223  06AD  0020               	movlb	0	; select bank0
  6224  06AE  0940               	comf	_baseline_mod_time,w	;volatile
  6225  06AF  0024               	movlb	4	; select bank4
  6226  06B0  00DE               	movwf	??_main^(0+512)
  6227  06B1  0020               	movlb	0	; select bank0
  6228  06B2  0941               	comf	_baseline_mod_time+1,w	;volatile
  6229  06B3  0024               	movlb	4	; select bank4
  6230  06B4  00DF               	movwf	(??_main^(0+512)+1)
  6231  06B5  0020               	movlb	0	; select bank0
  6232  06B6  0942               	comf	_baseline_mod_time+2,w	;volatile
  6233  06B7  0024               	movlb	4	; select bank4
  6234  06B8  00E0               	movwf	(??_main^(0+512)+2)
  6235  06B9  0020               	movlb	0	; select bank0
  6236  06BA  0943               	comf	_baseline_mod_time+3,w	;volatile
  6237  06BB  0024               	movlb	4	; select bank4
  6238  06BC  00E1               	movwf	(??_main^(0+512)+3)
  6239  06BD  0ADE               	incf	??_main^(0+512),f
  6240  06BE  1903               	skipnz
  6241  06BF  0ADF               	incf	(??_main^(0+512)+1),f
  6242  06C0  1903               	skipnz
  6243  06C1  0AE0               	incf	(??_main^(0+512)+2),f
  6244  06C2  1903               	skipnz
  6245  06C3  0AE1               	incf	(??_main^(0+512)+3),f
  6246  06C4  0855               	movf	_oldBaseTime^(0+512),w
  6247  06C5  00E2               	movwf	(??_main+4)^(0+512)
  6248  06C6  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6249  06C7  00E3               	movwf	((??_main+4)^(0+512)+1)
  6250  06C8  3000               	movlw	0
  6251  06C9  1BE3               	btfsc	((??_main+4)^(0+512)+1),7
  6252  06CA  30FF               	movlw	255
  6253  06CB  00E4               	movwf	((??_main+4)^(0+512)+2)
  6254  06CC  00E5               	movwf	((??_main+4)^(0+512)+3)
  6255  06CD  0862               	movf	(??_main+4)^(0+512),w
  6256  06CE  07DE               	addwf	??_main^(0+512),f
  6257  06CF  0863               	movf	(??_main+5)^(0+512),w
  6258  06D0  3DDF               	addwfc	(??_main^(0+512)+1),f
  6259  06D1  0864               	movf	(??_main+6)^(0+512),w
  6260  06D2  3DE0               	addwfc	(??_main^(0+512)+2),f
  6261  06D3  0865               	movf	(??_main+7)^(0+512),w
  6262  06D4  3DE1               	addwfc	(??_main^(0+512)+3),f
  6263  06D5  1BE1               	btfsc	(??_main^(0+512)+3),7
  6264  06D6  2EE4               	goto	l9462
  6265  06D7  0861               	movf	(??_main^(0+512)+3),w
  6266  06D8  1D03               	btfss	3,2
  6267  06D9  2F0E               	goto	l380
  6268  06DA  0860               	movf	(??_main^(0+512)+2),w
  6269  06DB  1D03               	btfss	3,2
  6270  06DC  2F0E               	goto	l380
  6271  06DD  085F               	movf	(??_main^(0+512)+1),w
  6272  06DE  1D03               	btfss	3,2
  6273  06DF  2F0E               	goto	l380
  6274  06E0  3001               	movlw	1
  6275  06E1  025E               	subwf	??_main^(0+512),w
  6276  06E2  1803               	btfsc	3,0
  6277  06E3  2F0E               	goto	l380
  6278  06E4                     l9462:	
  6279  06E4  0020               	movlb	0	; select bank0
  6280  06E5  0940               	comf	_baseline_mod_time,w	;volatile
  6281  06E6  0024               	movlb	4	; select bank4
  6282  06E7  00DE               	movwf	??_main^(0+512)
  6283  06E8  0020               	movlb	0	; select bank0
  6284  06E9  0941               	comf	_baseline_mod_time+1,w	;volatile
  6285  06EA  0024               	movlb	4	; select bank4
  6286  06EB  00DF               	movwf	(??_main^(0+512)+1)
  6287  06EC  0020               	movlb	0	; select bank0
  6288  06ED  0942               	comf	_baseline_mod_time+2,w	;volatile
  6289  06EE  0024               	movlb	4	; select bank4
  6290  06EF  00E0               	movwf	(??_main^(0+512)+2)
  6291  06F0  0020               	movlb	0	; select bank0
  6292  06F1  0943               	comf	_baseline_mod_time+3,w	;volatile
  6293  06F2  0024               	movlb	4	; select bank4
  6294  06F3  00E1               	movwf	(??_main^(0+512)+3)
  6295  06F4  0ADE               	incf	??_main^(0+512),f
  6296  06F5  1903               	skipnz
  6297  06F6  0ADF               	incf	(??_main^(0+512)+1),f
  6298  06F7  1903               	skipnz
  6299  06F8  0AE0               	incf	(??_main^(0+512)+2),f
  6300  06F9  1903               	skipnz
  6301  06FA  0AE1               	incf	(??_main^(0+512)+3),f
  6302  06FB  0855               	movf	_oldBaseTime^(0+512),w
  6303  06FC  00E2               	movwf	(??_main+4)^(0+512)
  6304  06FD  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6305  06FE  00E3               	movwf	((??_main+4)^(0+512)+1)
  6306  06FF  3000               	movlw	0
  6307  0700  1BE3               	btfsc	((??_main+4)^(0+512)+1),7
  6308  0701  30FF               	movlw	255
  6309  0702  00E4               	movwf	((??_main+4)^(0+512)+2)
  6310  0703  00E5               	movwf	((??_main+4)^(0+512)+3)
  6311  0704  0862               	movf	(??_main+4)^(0+512),w
  6312  0705  07DE               	addwf	??_main^(0+512),f
  6313  0706  0863               	movf	(??_main+5)^(0+512),w
  6314  0707  3DDF               	addwfc	(??_main^(0+512)+1),f
  6315  0708  0864               	movf	(??_main+6)^(0+512),w
  6316  0709  3DE0               	addwfc	(??_main^(0+512)+2),f
  6317  070A  0865               	movf	(??_main+7)^(0+512),w
  6318  070B  3DE1               	addwfc	(??_main^(0+512)+3),f
  6319  070C  1FE1               	btfss	(??_main+3)^(0+512),7
  6320  070D  2F11               	goto	l9464
  6321  070E                     l380:	
  6322                           
  6323                           ;main.c: 179: mod_time_changed = 1;
  6324  070E  0023               	movlb	3	; select bank3
  6325  070F  01E4               	clrf	_mod_time_changed^(0+384)
  6326  0710  0AE4               	incf	_mod_time_changed^(0+384),f
  6327  0711                     l9464:	
  6328                           
  6329                           ;main.c: 181: }
  6330                           ;main.c: 184: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6331  0711  0023               	movlb	3	; select bank3
  6332  0712  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6333  0713  0024               	movlb	4	; select bank4
  6334  0714  00DE               	movwf	??_main^(0+512)
  6335  0715  0023               	movlb	3	; select bank3
  6336  0716  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6337  0717  0024               	movlb	4	; select bank4
  6338  0718  00DF               	movwf	(??_main^(0+512)+1)
  6339  0719  0ADE               	incf	??_main^(0+512),f
  6340  071A  1903               	skipnz
  6341  071B  0ADF               	incf	(??_main^(0+512)+1),f
  6342  071C  0023               	movlb	3	; select bank3
  6343  071D  0834               	movf	_knob_5_pos^(0+384),w
  6344  071E  0024               	movlb	4	; select bank4
  6345  071F  075E               	addwf	??_main^(0+512),w
  6346  0720  00E0               	movwf	(??_main+2)^(0+512)
  6347  0721  0023               	movlb	3	; select bank3
  6348  0722  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6349  0723  0024               	movlb	4	; select bank4
  6350  0724  3D5F               	addwfc	(??_main+1)^(0+512),w
  6351  0725  00E1               	movwf	(??_main+3)^(0+512)
  6352  0726  0861               	movf	(??_main+3)^(0+512),w
  6353  0727  3A80               	xorlw	128
  6354  0728  00E2               	movwf	(??_main+4)^(0+512)
  6355  0729  3080               	movlw	128
  6356  072A  0262               	subwf	(??_main+4)^(0+512),w
  6357  072B  1D03               	skipz
  6358  072C  2F2F               	goto	u10485
  6359  072D  3004               	movlw	4
  6360  072E  0260               	subwf	(??_main+2)^(0+512),w
  6361  072F                     u10485:	
  6362  072F  1803               	skipnc
  6363  0730  2F51               	goto	l9468
  6364  0731  0023               	movlb	3	; select bank3
  6365  0732  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6366  0733  0024               	movlb	4	; select bank4
  6367  0734  00DE               	movwf	??_main^(0+512)
  6368  0735  0023               	movlb	3	; select bank3
  6369  0736  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6370  0737  0024               	movlb	4	; select bank4
  6371  0738  00DF               	movwf	(??_main^(0+512)+1)
  6372  0739  0ADE               	incf	??_main^(0+512),f
  6373  073A  1903               	skipnz
  6374  073B  0ADF               	incf	(??_main^(0+512)+1),f
  6375  073C  0023               	movlb	3	; select bank3
  6376  073D  0834               	movf	_knob_5_pos^(0+384),w
  6377  073E  0024               	movlb	4	; select bank4
  6378  073F  075E               	addwf	??_main^(0+512),w
  6379  0740  00E0               	movwf	(??_main+2)^(0+512)
  6380  0741  0023               	movlb	3	; select bank3
  6381  0742  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6382  0743  0024               	movlb	4	; select bank4
  6383  0744  3D5F               	addwfc	(??_main+1)^(0+512),w
  6384  0745  00E1               	movwf	(??_main+3)^(0+512)
  6385  0746  0861               	movf	(??_main+3)^(0+512),w
  6386  0747  3A80               	xorlw	128
  6387  0748  00E2               	movwf	(??_main+4)^(0+512)
  6388  0749  307F               	movlw	127
  6389  074A  0262               	subwf	(??_main+4)^(0+512),w
  6390  074B  1D03               	skipz
  6391  074C  2F4F               	goto	u10495
  6392  074D  30FD               	movlw	253
  6393  074E  0260               	subwf	(??_main+2)^(0+512),w
  6394  074F                     u10495:	
  6395  074F  1803               	skipnc
  6396  0750  2F9B               	goto	l9472
  6397  0751                     l9468:	
  6398                           
  6399                           ;main.c: 185: knob5_prev = knob_5_pos;
  6400  0751  0023               	movlb	3	; select bank3
  6401  0752  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6402  0753  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6403  0754  0834               	movf	_knob_5_pos^(0+384),w
  6404  0755  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6405                           
  6406                           ;main.c: 186: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6407  0756  3000               	movlw	0
  6408  0757  0021               	movlb	1	; select bank1
  6409  0758  00EA               	movwf	map@out_max^(0+128)
  6410  0759  3000               	movlw	0
  6411  075A  00EB               	movwf	(map@out_max+1)^(0+128)
  6412  075B  3000               	movlw	0
  6413  075C  00EC               	movwf	(map@out_max+2)^(0+128)
  6414  075D  3060               	movlw	96
  6415  075E  00E7               	movwf	map@out_min^(0+128)
  6416  075F  309F               	movlw	159
  6417  0760  00E8               	movwf	(map@out_min+1)^(0+128)
  6418  0761  3044               	movlw	68
  6419  0762  00E9               	movwf	(map@out_min+2)^(0+128)
  6420  0763  30C0               	movlw	192
  6421  0764  00E4               	movwf	map@in_max^(0+128)
  6422  0765  307F               	movlw	127
  6423  0766  00E5               	movwf	(map@in_max+1)^(0+128)
  6424  0767  3044               	movlw	68
  6425  0768  00E6               	movwf	(map@in_max+2)^(0+128)
  6426  0769  3000               	movlw	0
  6427  076A  00E1               	movwf	map@in_min^(0+128)
  6428  076B  3000               	movlw	0
  6429  076C  00E2               	movwf	(map@in_min+1)^(0+128)
  6430  076D  3000               	movlw	0
  6431  076E  00E3               	movwf	(map@in_min+2)^(0+128)
  6432  076F  0023               	movlb	3	; select bank3
  6433  0770  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6434  0771  0021               	movlb	1	; select bank1
  6435  0772  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6436  0773  0023               	movlb	3	; select bank3
  6437  0774  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6438  0775  0021               	movlb	1	; select bank1
  6439  0776  00A8               	movwf	___awtoft@c^(0+128)
  6440  0777  31AE  262D  3183   	fcall	___awtoft
  6441  077A  0021               	movlb	1	; select bank1
  6442  077B  0828               	movf	?___awtoft^(0+128),w
  6443  077C  00DE               	movwf	map@x^(0+128)
  6444  077D  0829               	movf	(?___awtoft+1)^(0+128),w
  6445  077E  00DF               	movwf	(map@x+1)^(0+128)
  6446  077F  082A               	movf	(?___awtoft+2)^(0+128),w
  6447  0780  00E0               	movwf	(map@x+2)^(0+128)
  6448  0781  319A  2209  3183   	fcall	_map
  6449  0784  0021               	movlb	1	; select bank1
  6450  0785  085E               	movf	?_map^(0+128),w
  6451  0786  0022               	movlb	2	; select bank2
  6452  0787  00A0               	movwf	___fttol@f1^(0+256)
  6453  0788  0021               	movlb	1	; select bank1
  6454  0789  085F               	movf	(?_map+1)^(0+128),w
  6455  078A  0022               	movlb	2	; select bank2
  6456  078B  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6457  078C  0021               	movlb	1	; select bank1
  6458  078D  0860               	movf	(?_map+2)^(0+128),w
  6459  078E  0022               	movlb	2	; select bank2
  6460  078F  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6461  0790  3199  2182  3183   	fcall	___fttol
  6462  0793  0022               	movlb	2	; select bank2
  6463  0794  0821               	movf	(?___fttol^(0+256)+1),w
  6464  0795  0024               	movlb	4	; select bank4
  6465  0796  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6466  0797  0022               	movlb	2	; select bank2
  6467  0798  0820               	movf	?___fttol^(0+256),w
  6468  0799  0024               	movlb	4	; select bank4
  6469  079A  00C5               	movwf	_adjusted_pot_value^(0+512)
  6470  079B                     l9472:	
  6471                           
  6472                           ;main.c: 187: }
  6473                           ;main.c: 192: if (mod_time_changed == 1) {
  6474  079B  0023               	movlb	3	; select bank3
  6475  079C  0364               	decf	_mod_time_changed^(0+384),w
  6476  079D  1D03               	btfss	3,2
  6477  079E  2FCE               	goto	l9484
  6478                           
  6479                           ;main.c: 194: delay_time = baseline_mod_time;
  6480  079F  0020               	movlb	0	; select bank0
  6481  07A0  0843               	movf	_baseline_mod_time+3,w	;volatile
  6482  07A1  00C7               	movwf	_delay_time+3	;volatile
  6483  07A2  0842               	movf	_baseline_mod_time+2,w	;volatile
  6484  07A3  00C6               	movwf	_delay_time+2	;volatile
  6485  07A4  0841               	movf	_baseline_mod_time+1,w	;volatile
  6486  07A5  00C5               	movwf	_delay_time+1	;volatile
  6487  07A6  0840               	movf	_baseline_mod_time,w	;volatile
  6488  07A7  00C4               	movwf	_delay_time	;volatile
  6489                           
  6490                           ;main.c: 195: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6491  07A8  0841               	movf	_baseline_mod_time+1,w	;volatile
  6492  07A9  0022               	movlb	2	; select bank2
  6493  07AA  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6494  07AB  0020               	movlb	0	; select bank0
  6495  07AC  0840               	movf	_baseline_mod_time,w	;volatile
  6496  07AD  0022               	movlb	2	; select bank2
  6497  07AE  00AE               	movwf	set_subdivision@x^(0+256)
  6498  07AF  0020               	movlb	0	; select bank0
  6499  07B0  084D               	movf	_top_push_state+1,w
  6500  07B1  0022               	movlb	2	; select bank2
  6501  07B2  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6502  07B3  0020               	movlb	0	; select bank0
  6503  07B4  084C               	movf	_top_push_state,w
  6504  07B5  0022               	movlb	2	; select bank2
  6505  07B6  00B0               	movwf	set_subdivision@y^(0+256)
  6506  07B7  319A  2294  3183   	fcall	_set_subdivision
  6507  07BA  0022               	movlb	2	; select bank2
  6508  07BB  082E               	movf	?_set_subdivision^(0+256),w
  6509  07BC  0020               	movlb	0	; select bank0
  6510  07BD  00C4               	movwf	_delay_time	;volatile
  6511  07BE  0022               	movlb	2	; select bank2
  6512  07BF  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6513  07C0  0020               	movlb	0	; select bank0
  6514  07C1  00C5               	movwf	_delay_time+1	;volatile
  6515  07C2  0D89               	rlf	9,f
  6516  07C3  3B89               	subwfb	9,f
  6517  07C4  0989               	comf	9,f
  6518  07C5  00C6               	movwf	_delay_time+2	;volatile
  6519  07C6  00C7               	movwf	_delay_time+3	;volatile
  6520                           
  6521                           ;main.c: 196: getModulationDelayTime();
  6522  07C7  31A4  24AA  3183   	fcall	_getModulationDelayTime
  6523                           
  6524                           ;main.c: 197: modulation_changed = 1;
  6525  07CA  0023               	movlb	3	; select bank3
  6526  07CB  01C7               	clrf	_modulation_changed^(0+384)
  6527  07CC  0AC7               	incf	_modulation_changed^(0+384),f
  6528                           
  6529                           ;main.c: 198: mod_time_changed = 0;
  6530  07CD  01E4               	clrf	_mod_time_changed^(0+384)
  6531  07CE                     l9484:	
  6532                           
  6533                           ;main.c: 200: }
  6534                           ;main.c: 203: if (modulation_changed == 1) {
  6535  07CE  0347               	decf	_modulation_changed^(0+384),w
  6536  07CF  1D03               	btfss	3,2
  6537  07D0  2B9B               	goto	l9384
  6538                           
  6539                           ;main.c: 204: updateModulationArray();
  6540  07D1  318D  25BA  3183   	fcall	_updateModulationArray
  6541                           
  6542                           ;main.c: 205: isInitialized = 1;
  6543  07D4  0023               	movlb	3	; select bank3
  6544  07D5  01C1               	clrf	_isInitialized^(0+384)
  6545  07D6  0AC1               	incf	_isInitialized^(0+384),f
  6546  07D7  2B9B               	goto	l9384
  6547  07D8                     __end_of_main:	
  6548                           
  6549                           	psect	text1
  6550  2551                     __ptext1:	
  6551 ;; *************** function _update_selectMode *****************
  6552 ;; Defined at:
  6553 ;;		line 139 in file "tactiles.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;		None
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;		None
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  1    wreg      void 
  6560 ;; Registers used:
  6561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6569 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6570 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6571 ;;Total ram usage:        1 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    5
  6574 ;; This function calls:
  6575 ;;		_setExpressionDisplay
  6576 ;;		_setPresetDisplay
  6577 ;; This function is called by:
  6578 ;;		_main
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           
  6583                           ;psect for function _update_selectMode
  6584  2551                     _update_selectMode:	
  6585                           
  6586                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6587                           
  6588                           ;incstack = 0
  6589                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6590  2551  0020               	movlb	0	; select bank0
  6591  2552  085E               	movf	_mode2_state,w
  6592  2553  1D03               	btfss	3,2
  6593  2554  2D58               	goto	l1032
  6594  2555  035F               	decf	_presetSaveMode,w
  6595  2556  1D03               	btfss	3,2
  6596  2557  0008               	return
  6597  2558                     l1032:	
  6598                           ;tactiles.c: 142: return;
  6599                           
  6600                           
  6601                           ;tactiles.c: 143: }
  6602                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6603  2558  1B8F               	btfsc	15,7	;volatile
  6604  2559  2DA6               	goto	l8930
  6605                           
  6606                           ;tactiles.c: 145: debounce_mode1++;
  6607  255A  3001               	movlw	1
  6608  255B  0024               	movlb	4	; select bank4
  6609  255C  07CB               	addwf	_debounce_mode1^(0+512),f
  6610  255D  3000               	movlw	0
  6611  255E  3DCC               	addwfc	(_debounce_mode1+1)^(0+512),f
  6612                           
  6613                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6614  255F  084C               	movf	(_debounce_mode1+1)^(0+512),w
  6615  2560  3A80               	xorlw	128
  6616  2561  0021               	movlb	1	; select bank1
  6617  2562  00A7               	movwf	??_update_selectMode^(0+128)
  6618  2563  3080               	movlw	128
  6619  2564  0227               	subwf	??_update_selectMode^(0+128),w
  6620  2565  1D03               	skipz
  6621  2566  2D6A               	goto	u9525
  6622  2567  301A               	movlw	26
  6623  2568  0024               	movlb	4	; select bank4
  6624  2569  024B               	subwf	_debounce_mode1^(0+512),w
  6625  256A                     u9525:	
  6626  256A  1C03               	skipc
  6627  256B  0008               	return
  6628                           
  6629                           ;tactiles.c: 147: debounce_mode1 = 25;
  6630  256C  3019               	movlw	25
  6631  256D  0024               	movlb	4	; select bank4
  6632  256E  00CB               	movwf	_debounce_mode1^(0+512)
  6633  256F  3000               	movlw	0
  6634  2570  00CC               	movwf	(_debounce_mode1^(0+512)+1)
  6635                           
  6636                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6637  2571  0020               	movlb	0	; select bank0
  6638  2572  085E               	movf	_mode2_state,w
  6639  2573  0023               	movlb	3	; select bank3
  6640  2574  0665               	xorwf	_presetModeCnst^(0+384),w
  6641  2575  1903               	skipnz
  6642  2576  2D7B               	goto	l8912
  6643  2577  0020               	movlb	0	; select bank0
  6644  2578  035F               	decf	_presetSaveMode,w
  6645  2579  1D03               	btfss	3,2
  6646  257A  2D8C               	goto	l8920
  6647  257B                     l8912:	
  6648                           
  6649                           ;tactiles.c: 149: presetChannel++;
  6650  257B  3001               	movlw	1
  6651  257C  0021               	movlb	1	; select bank1
  6652  257D  00A7               	movwf	??_update_selectMode^(0+128)
  6653  257E  0827               	movf	??_update_selectMode^(0+128),w
  6654  257F  0022               	movlb	2	; select bank2
  6655  2580  07EC               	addwf	_presetChannel^(0+256),f
  6656                           
  6657                           ;tactiles.c: 150: if (presetChannel > 10) {
  6658  2581  300B               	movlw	11
  6659  2582  026C               	subwf	_presetChannel^(0+256),w
  6660  2583  1C03               	skipc
  6661  2584  2D87               	goto	l8918
  6662                           
  6663                           ;tactiles.c: 151: presetChannel = 1;
  6664  2585  01EC               	clrf	_presetChannel^(0+256)
  6665  2586  0AEC               	incf	_presetChannel^(0+256),f
  6666  2587                     l8918:	
  6667                           
  6668                           ;tactiles.c: 152: }
  6669                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6670  2587  086C               	movf	_presetChannel^(0+256),w
  6671  2588  31A0  2029  31A5   	fcall	_setPresetDisplay
  6672                           
  6673                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6674  258B  2DA2               	goto	l1043
  6675  258C                     l8920:	
  6676  258C  0020               	movlb	0	; select bank0
  6677  258D  085E               	movf	_mode2_state,w
  6678  258E  0023               	movlb	3	; select bank3
  6679  258F  0662               	xorwf	_expressModeCnst^(0+384),w
  6680  2590  1D03               	skipz
  6681  2591  2DA2               	goto	l1043
  6682                           
  6683                           ;tactiles.c: 155: expressionChannel++;
  6684  2592  3001               	movlw	1
  6685  2593  0021               	movlb	1	; select bank1
  6686  2594  00A7               	movwf	??_update_selectMode^(0+128)
  6687  2595  0827               	movf	??_update_selectMode^(0+128),w
  6688  2596  0023               	movlb	3	; select bank3
  6689  2597  07E3               	addwf	_expressionChannel^(0+384),f
  6690                           
  6691                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6692  2598  3006               	movlw	6
  6693  2599  0263               	subwf	_expressionChannel^(0+384),w
  6694  259A  1C03               	skipc
  6695  259B  2D9E               	goto	l8928
  6696                           
  6697                           ;tactiles.c: 157: expressionChannel = 1;
  6698  259C  01E3               	clrf	_expressionChannel^(0+384)
  6699  259D  0AE3               	incf	_expressionChannel^(0+384),f
  6700  259E                     l8928:	
  6701                           
  6702                           ;tactiles.c: 158: }
  6703                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6704  259E  0863               	movf	_expressionChannel^(0+384),w
  6705  259F  31AD  2552  31A5   	fcall	_setExpressionDisplay
  6706  25A2                     l1043:	
  6707                           ;tactiles.c: 160: }
  6708                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6709                           
  6710  25A2  0020               	movlb	0	; select bank0
  6711  25A3  1B8F               	btfsc	15,7	;volatile
  6712  25A4  0008               	return
  6713  25A5  2DA2               	goto	l1043
  6714  25A6                     l8930:	
  6715                           ;tactiles.c: 168: }
  6716                           ;tactiles.c: 169: }
  6717                           ;tactiles.c: 170: } else {
  6718                           
  6719                           
  6720                           ;tactiles.c: 171: debounce_mode1 = 0;
  6721  25A6  0024               	movlb	4	; select bank4
  6722  25A7  01CB               	clrf	_debounce_mode1^(0+512)
  6723  25A8  01CC               	clrf	(_debounce_mode1+1)^(0+512)
  6724  25A9  0008               	return
  6725  25AA                     __end_of_update_selectMode:	
  6726                           
  6727                           	psect	text2
  6728  2FC8                     __ptext2:	
  6729 ;; *************** function _update_mode *****************
  6730 ;; Defined at:
  6731 ;;		line 87 in file "tactiles.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;		None
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;		None
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  1    wreg      void 
  6738 ;; Registers used:
  6739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6747 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6748 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6749 ;;Total ram usage:        1 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    6
  6752 ;; This function calls:
  6753 ;;		_resetRingLEDs
  6754 ;;		_setPedalMode
  6755 ;; This function is called by:
  6756 ;;		_main
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           
  6761                           ;psect for function _update_mode
  6762  2FC8                     _update_mode:	
  6763                           
  6764                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6765                           
  6766                           ;incstack = 0
  6767                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6768  2FC8  0020               	movlb	0	; select bank0
  6769  2FC9  180E               	btfsc	14,0	;volatile
  6770  2FCA  2FFC               	goto	l8898
  6771                           
  6772                           ;tactiles.c: 95: debounce_mode2++;
  6773  2FCB  3001               	movlw	1
  6774  2FCC  0024               	movlb	4	; select bank4
  6775  2FCD  07CD               	addwf	_debounce_mode2^(0+512),f
  6776  2FCE  3000               	movlw	0
  6777  2FCF  3DCE               	addwfc	(_debounce_mode2+1)^(0+512),f
  6778                           
  6779                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6780  2FD0  084E               	movf	(_debounce_mode2+1)^(0+512),w
  6781  2FD1  3A80               	xorlw	128
  6782  2FD2  0021               	movlb	1	; select bank1
  6783  2FD3  00A7               	movwf	??_update_mode^(0+128)
  6784  2FD4  3080               	movlw	128
  6785  2FD5  0227               	subwf	??_update_mode^(0+128),w
  6786  2FD6  1D03               	skipz
  6787  2FD7  2FDB               	goto	u9455
  6788  2FD8  301A               	movlw	26
  6789  2FD9  0024               	movlb	4	; select bank4
  6790  2FDA  024D               	subwf	_debounce_mode2^(0+512),w
  6791  2FDB                     u9455:	
  6792  2FDB  1C03               	skipc
  6793  2FDC  0008               	return
  6794                           
  6795                           ;tactiles.c: 97: debounce_mode2 = 25;
  6796  2FDD  3019               	movlw	25
  6797  2FDE  0024               	movlb	4	; select bank4
  6798  2FDF  00CD               	movwf	_debounce_mode2^(0+512)
  6799  2FE0  3000               	movlw	0
  6800  2FE1  00CE               	movwf	(_debounce_mode2^(0+512)+1)
  6801                           
  6802                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6803  2FE2  0020               	movlb	0	; select bank0
  6804  2FE3  035F               	decf	_presetSaveMode,w
  6805  2FE4  1D03               	btfss	3,2
  6806  2FE5  2FEB               	goto	l8890
  6807                           
  6808                           ;tactiles.c: 100: presetSaveMode = 0;
  6809  2FE6  01DF               	clrf	_presetSaveMode
  6810                           
  6811                           ;tactiles.c: 101: resetRingLEDs();
  6812  2FE7  31AD  256A  31AF   	fcall	_resetRingLEDs
  6813                           
  6814                           ;tactiles.c: 102: } else {
  6815  2FEA  2FF5               	goto	l8896
  6816  2FEB                     l8890:	
  6817                           
  6818                           ;tactiles.c: 103: mode2_state++;
  6819  2FEB  3001               	movlw	1
  6820  2FEC  0021               	movlb	1	; select bank1
  6821  2FED  00A7               	movwf	??_update_mode^(0+128)
  6822  2FEE  0827               	movf	??_update_mode^(0+128),w
  6823  2FEF  0020               	movlb	0	; select bank0
  6824  2FF0  07DE               	addwf	_mode2_state,f
  6825                           
  6826                           ;tactiles.c: 104: if (mode2_state > 2) {
  6827  2FF1  3003               	movlw	3
  6828  2FF2  025E               	subwf	_mode2_state,w
  6829  2FF3  1803               	btfsc	3,0
  6830                           
  6831                           ;tactiles.c: 105: mode2_state = 0;
  6832  2FF4  01DE               	clrf	_mode2_state
  6833  2FF5                     l8896:	
  6834                           
  6835                           ;tactiles.c: 106: }
  6836                           ;tactiles.c: 107: }
  6837                           ;tactiles.c: 109: setPedalMode();
  6838  2FF5  31A0  2006  31AF   	fcall	_setPedalMode
  6839  2FF8                     l1017:	
  6840                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6841                           
  6842  2FF8  0020               	movlb	0	; select bank0
  6843  2FF9  180E               	btfsc	14,0	;volatile
  6844  2FFA  0008               	return
  6845  2FFB  2FF8               	goto	l1017
  6846  2FFC                     l8898:	
  6847                           ;tactiles.c: 111: }
  6848                           ;tactiles.c: 112: }
  6849                           ;tactiles.c: 113: } else {
  6850                           
  6851                           
  6852                           ;tactiles.c: 114: debounce_mode2 = 0;
  6853  2FFC  0024               	movlb	4	; select bank4
  6854  2FFD  01CD               	clrf	_debounce_mode2^(0+512)
  6855  2FFE  01CE               	clrf	(_debounce_mode2+1)^(0+512)
  6856  2FFF  0008               	return
  6857  3000                     __end_of_update_mode:	
  6858                           
  6859                           	psect	text3
  6860  0BD2                     __ptext3:	
  6861 ;; *************** function _updateSwitchTap *****************
  6862 ;; Defined at:
  6863 ;;		line 48 in file "SwitchTap.c"
  6864 ;; Parameters:    Size  Location     Type
  6865 ;;		None
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6868 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6869 ;; Return value:  Size  Location     Type
  6870 ;;                  1    wreg      void 
  6871 ;; Registers used:
  6872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6879 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6880 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6881 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6882 ;;Total ram usage:        9 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    8
  6885 ;; This function calls:
  6886 ;;		___aldiv
  6887 ;;		_setDoublePressState
  6888 ;;		_setLongTapState
  6889 ;; This function is called by:
  6890 ;;		_main
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           
  6895                           ;psect for function _updateSwitchTap
  6896  0BD2                     _updateSwitchTap:	
  6897                           
  6898                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6902  0BD2  0021               	movlb	1	; select bank1
  6903  0BD3  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6904                           
  6905                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6906  0BD4  0020               	movlb	0	; select bank0
  6907  0BD5  1810               	btfsc	16,0	;volatile
  6908  0BD6  2BDE               	goto	l9052
  6909                           
  6910                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6911  0BD7  0022               	movlb	2	; select bank2
  6912  0BD8  086B               	movf	_switchTap_pressed^(0+256),w
  6913  0BD9  1903               	btfsc	3,2
  6914  0BDA  2BE9               	goto	l1450
  6915                           
  6916                           ;SwitchTap.c: 59: switchTap_pressed--;
  6917  0BDB  3001               	movlw	1
  6918  0BDC  02EB               	subwf	_switchTap_pressed^(0+256),f
  6919                           
  6920                           ;SwitchTap.c: 60: }
  6921                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6922  0BDD  2BE9               	goto	l1450
  6923  0BDE                     l9052:	
  6924  0BDE  3019               	movlw	25
  6925  0BDF  0022               	movlb	2	; select bank2
  6926  0BE0  026B               	subwf	_switchTap_pressed^(0+256),w
  6927  0BE1  1803               	skipnc
  6928  0BE2  2BE9               	goto	l1450
  6929                           
  6930                           ;SwitchTap.c: 62: switchTap_pressed++;
  6931  0BE3  3001               	movlw	1
  6932  0BE4  0021               	movlb	1	; select bank1
  6933  0BE5  00BC               	movwf	??_updateSwitchTap^(0+128)
  6934  0BE6  083C               	movf	??_updateSwitchTap^(0+128),w
  6935  0BE7  0022               	movlb	2	; select bank2
  6936  0BE8  07EB               	addwf	_switchTap_pressed^(0+256),f
  6937  0BE9                     l1450:	
  6938                           
  6939                           ;SwitchTap.c: 63: }
  6940                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6941  0BE9  086B               	movf	_switchTap_pressed^(0+256),w
  6942  0BEA  1D03               	btfss	3,2
  6943  0BEB  2DA1               	goto	l9136
  6944                           
  6945                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6946  0BEC  0020               	movlb	0	; select bank0
  6947  0BED  1BD5               	btfsc	_tap_timer+3,7	;volatile
  6948  0BEE  2C75               	goto	l9096
  6949  0BEF  0855               	movf	_tap_timer+3,w	;volatile
  6950  0BF0  1D03               	btfss	3,2
  6951  0BF1  2BFB               	goto	l9058
  6952  0BF2  0854               	movf	_tap_timer+2,w	;volatile
  6953  0BF3  1D03               	btfss	3,2
  6954  0BF4  2BFB               	goto	l9058
  6955  0BF5  301B               	movlw	27
  6956  0BF6  0252               	subwf	_tap_timer,w	;volatile
  6957  0BF7  3006               	movlw	6
  6958  0BF8  3B53               	subwfb	_tap_timer+1,w	;volatile
  6959  0BF9  1C03               	btfss	3,0
  6960  0BFA  2C75               	goto	l9096
  6961  0BFB                     l9058:	
  6962                           
  6963                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6964  0BFB  0023               	movlb	3	; select bank3
  6965  0BFC  034B               	decf	_switchTap_down^(0+384),w
  6966  0BFD  1903               	btfsc	3,2
  6967  0BFE  2C3A               	goto	l9074
  6968                           
  6969                           ;SwitchTap.c: 78: switchTap_down = 1;
  6970  0BFF  01CB               	clrf	_switchTap_down^(0+384)
  6971  0C00  0ACB               	incf	_switchTap_down^(0+384),f
  6972                           
  6973                           ;SwitchTap.c: 79: tap_timer = 0;
  6974  0C01  3000               	movlw	0
  6975  0C02  0020               	movlb	0	; select bank0
  6976  0C03  00D5               	movwf	_tap_timer+3	;volatile
  6977  0C04  3000               	movlw	0
  6978  0C05  00D4               	movwf	_tap_timer+2	;volatile
  6979  0C06  3000               	movlw	0
  6980  0C07  00D3               	movwf	_tap_timer+1	;volatile
  6981  0C08  3000               	movlw	0
  6982  0C09  00D2               	movwf	_tap_timer	;volatile
  6983                           
  6984                           ;SwitchTap.c: 80: tap_iteration = 1;
  6985  0C0A  3001               	movlw	1
  6986  0C0B  0023               	movlb	3	; select bank3
  6987  0C0C  00DD               	movwf	_tap_iteration^(0+384)
  6988  0C0D  3000               	movlw	0
  6989  0C0E  00DE               	movwf	(_tap_iteration^(0+384)+1)
  6990                           
  6991                           ;SwitchTap.c: 81: tap_total = 0;
  6992  0C0F  3000               	movlw	0
  6993  0C10  0024               	movlb	4	; select bank4
  6994  0C11  00C0               	movwf	(_tap_total+3)^(0+512)
  6995  0C12  3000               	movlw	0
  6996  0C13  00BF               	movwf	(_tap_total+2)^(0+512)
  6997  0C14  3000               	movlw	0
  6998  0C15  00BE               	movwf	(_tap_total+1)^(0+512)
  6999  0C16  3000               	movlw	0
  7000  0C17  00BD               	movwf	_tap_total^(0+512)
  7001                           
  7002                           ;SwitchTap.c: 82: mod_time_changed = 0;
  7003  0C18  0023               	movlb	3	; select bank3
  7004  0C19  01E4               	clrf	_mod_time_changed^(0+384)
  7005                           
  7006                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7007  0C1A  0021               	movlb	1	; select bank1
  7008  0C1B  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7009  0C1C  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7010  0C1D                     l9072:	
  7011  0C1D  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7012  0C1E  0020               	movlb	0	; select bank0
  7013  0C1F  0250               	subwf	_num_taps,w
  7014  0C20  1C03               	btfss	3,0
  7015  0C21  2C3A               	goto	l9074
  7016                           
  7017                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  7018  0C22  0021               	movlb	1	; select bank1
  7019  0C23  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7020  0C24  00BC               	movwf	??_updateSwitchTap^(0+128)
  7021  0C25  3001               	movlw	1
  7022  0C26                     u9895:	
  7023  0C26  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7024  0C27  3EFF               	addlw	-1
  7025  0C28  1D03               	skipz
  7026  0C29  2C26               	goto	u9895
  7027  0C2A  353C               	lslf	??_updateSwitchTap^(0+128),w
  7028  0C2B  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7029  0C2C  0086               	movwf	6
  7030  0C2D  3002               	movlw	2	; select bank4/5
  7031  0C2E  0087               	movwf	7
  7032  0C2F  3000               	movlw	0
  7033  0C30  3FC0               	movwi [0]fsr1
  7034  0C31  3000               	movlw	0
  7035  0C32  3FC1               	movwi [1]fsr1
  7036  0C33  3FC2               	movwi [2]fsr1
  7037  0C34  3FC3               	movwi [3]fsr1
  7038  0C35  3001               	movlw	1
  7039  0C36  00BC               	movwf	??_updateSwitchTap^(0+128)
  7040  0C37  083C               	movf	??_updateSwitchTap^(0+128),w
  7041  0C38  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7042  0C39  2C1D               	goto	l9072
  7043  0C3A                     l9074:	
  7044                           
  7045                           ;SwitchTap.c: 86: }
  7046                           ;SwitchTap.c: 87: }
  7047                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  7048  0C3A  0023               	movlb	3	; select bank3
  7049  0C3B  0845               	movf	_longTap_start^(0+384),w
  7050  0C3C  1D03               	btfss	3,2
  7051  0C3D  2C45               	goto	l9080
  7052                           
  7053                           ;SwitchTap.c: 91: longTap_start = 1;
  7054  0C3E  01C5               	clrf	_longTap_start^(0+384)
  7055  0C3F  0AC5               	incf	_longTap_start^(0+384),f
  7056                           
  7057                           ;SwitchTap.c: 92: longTap_state = 0;
  7058  0C40  0020               	movlb	0	; select bank0
  7059  0C41  01CF               	clrf	_longTap_state	;volatile
  7060                           
  7061                           ;SwitchTap.c: 93: longTap_timer = 0;
  7062  0C42  0023               	movlb	3	; select bank3
  7063  0C43  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7064  0C44  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7065  0C45                     l9080:	
  7066                           
  7067                           ;SwitchTap.c: 94: }
  7068                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  7069  0C45  0020               	movlb	0	; select bank0
  7070  0C46  084B               	movf	_long_press_limit+1,w
  7071  0C47  0023               	movlb	3	; select bank3
  7072  0C48  0239               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  7073  0C49  1D03               	skipz
  7074  0C4A  2C4F               	goto	u9925
  7075  0C4B  0020               	movlb	0	; select bank0
  7076  0C4C  084A               	movf	_long_press_limit,w
  7077  0C4D  0023               	movlb	3	; select bank3
  7078  0C4E  0238               	subwf	_longTap_timer^(0+384),w	;volatile
  7079  0C4F                     u9925:	
  7080  0C4F  1C03               	skipc
  7081  0C50  0008               	return
  7082  0C51  0020               	movlb	0	; select bank0
  7083  0C52  084F               	movf	_longTap_state,w	;volatile
  7084  0C53  1D03               	btfss	3,2
  7085  0C54  0008               	return
  7086  0C55  085C               	movf	_doubleTap_state,w	;volatile
  7087  0C56  1D03               	btfss	3,2
  7088  0C57  0008               	return
  7089                           
  7090                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  7091  0C58  084B               	movf	_long_press_limit+1,w
  7092  0C59  0023               	movlb	3	; select bank3
  7093  0C5A  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  7094  0C5B  0020               	movlb	0	; select bank0
  7095  0C5C  084A               	movf	_long_press_limit,w
  7096  0C5D  0023               	movlb	3	; select bank3
  7097  0C5E  00B8               	movwf	_longTap_timer^(0+384)	;volatile
  7098                           
  7099                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7100  0C5F  0022               	movlb	2	; select bank2
  7101  0C60  120D               	bcf	13,4	;volatile
  7102                           
  7103                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  7104  0C61  0023               	movlb	3	; select bank3
  7105  0C62  0344               	decf	_longBypass_start^(0+384),w
  7106  0C63  1903               	btfsc	3,2
  7107  0C64  2C6D               	goto	l9094
  7108                           
  7109                           ;SwitchTap.c: 104: setLongTapState(1);
  7110  0C65  3001               	movlw	1
  7111  0C66  0021               	movlb	1	; select bank1
  7112  0C67  00A0               	movwf	setLongTapState@f_state^(0+128)
  7113  0C68  3000               	movlw	0
  7114  0C69  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7115  0C6A  31AD  2584         	fcall	_setLongTapState
  7116                           
  7117                           ;SwitchTap.c: 105: } else {
  7118  0C6C  0008               	return
  7119  0C6D                     l9094:	
  7120                           
  7121                           ;SwitchTap.c: 106: setDoublePressState(1);
  7122  0C6D  3001               	movlw	1
  7123  0C6E  0021               	movlb	1	; select bank1
  7124  0C6F  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7125  0C70  3000               	movlw	0
  7126  0C71  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7127  0C72  31A1  2154         	fcall	_setDoublePressState
  7128                           
  7129                           ;SwitchTap.c: 107: }
  7130                           ;SwitchTap.c: 108: }
  7131                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7132  0C74  0008               	return
  7133  0C75                     l9096:	
  7134  0C75  0020               	movlb	0	; select bank0
  7135  0C76  1BD5               	btfsc	_tap_timer+3,7	;volatile
  7136  0C77  2C84               	goto	l9098
  7137  0C78  0855               	movf	_tap_timer+3,w	;volatile
  7138  0C79  1D03               	btfss	3,2
  7139  0C7A  0008               	return
  7140  0C7B  0854               	movf	_tap_timer+2,w	;volatile
  7141  0C7C  1D03               	btfss	3,2
  7142  0C7D  0008               	return
  7143  0C7E  301B               	movlw	27
  7144  0C7F  0252               	subwf	_tap_timer,w	;volatile
  7145  0C80  3006               	movlw	6
  7146  0C81  3B53               	subwfb	_tap_timer+1,w	;volatile
  7147  0C82  1803               	btfsc	3,0
  7148  0C83  0008               	return
  7149  0C84                     l9098:	
  7150  0C84  084F               	movf	_longTap_state,w	;volatile
  7151  0C85  1D03               	btfss	3,2
  7152  0C86  0008               	return
  7153  0C87  0023               	movlb	3	; select bank3
  7154  0C88  034B               	decf	_switchTap_down^(0+384),w
  7155  0C89  1903               	btfsc	3,2
  7156  0C8A  0008               	return
  7157                           
  7158                           ;SwitchTap.c: 112: switchTap_down = 1;
  7159  0C8B  01CB               	clrf	_switchTap_down^(0+384)
  7160  0C8C  0ACB               	incf	_switchTap_down^(0+384),f
  7161                           
  7162                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7163  0C8D  0020               	movlb	0	; select bank0
  7164  0C8E  1BD5               	btfsc	_tap_timer+3,7	;volatile
  7165  0C8F  2CA4               	goto	l1464
  7166  0C90  0855               	movf	_tap_timer+3,w	;volatile
  7167  0C91  1D03               	btfss	3,2
  7168  0C92  2C9C               	goto	l9106
  7169  0C93  0854               	movf	_tap_timer+2,w	;volatile
  7170  0C94  1D03               	btfss	3,2
  7171  0C95  2C9C               	goto	l9106
  7172  0C96  3094               	movlw	148
  7173  0C97  0252               	subwf	_tap_timer,w	;volatile
  7174  0C98  3004               	movlw	4
  7175  0C99  3B53               	subwfb	_tap_timer+1,w	;volatile
  7176  0C9A  1C03               	btfss	3,0
  7177  0C9B  2CA4               	goto	l1464
  7178  0C9C                     l9106:	
  7179                           
  7180                           ;SwitchTap.c: 114: tap_timer = 1172;
  7181  0C9C  3000               	movlw	0
  7182  0C9D  00D5               	movwf	_tap_timer+3	;volatile
  7183  0C9E  3000               	movlw	0
  7184  0C9F  00D4               	movwf	_tap_timer+2	;volatile
  7185  0CA0  3004               	movlw	4
  7186  0CA1  00D3               	movwf	_tap_timer+1	;volatile
  7187  0CA2  3094               	movlw	148
  7188  0CA3  00D2               	movwf	_tap_timer	;volatile
  7189  0CA4                     l1464:	
  7190                           
  7191                           ;SwitchTap.c: 115: }
  7192                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7193  0CA4  0850               	movf	_num_taps,w
  7194  0CA5  0021               	movlb	1	; select bank1
  7195  0CA6  00BC               	movwf	??_updateSwitchTap^(0+128)
  7196  0CA7  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7197  0CA8  083C               	movf	??_updateSwitchTap^(0+128),w
  7198  0CA9  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7199  0CAA  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7200  0CAB  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7201                           
  7202                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7203  0CAC  0023               	movlb	3	; select bank3
  7204  0CAD  085E               	movf	(_tap_iteration+1)^(0+384),w
  7205  0CAE  3A80               	xorlw	128
  7206  0CAF  3C80               	sublw	128
  7207  0CB0  1D03               	skipz
  7208  0CB1  2CB5               	goto	u10005
  7209  0CB2  085D               	movf	_tap_iteration^(0+384),w
  7210  0CB3  0020               	movlb	0	; select bank0
  7211  0CB4  0250               	subwf	_num_taps,w
  7212  0CB5                     u10005:	
  7213  0CB5  1C03               	skipc
  7214  0CB6  2CE7               	goto	l9114
  7215                           
  7216                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7217  0CB7  0020               	movlb	0	; select bank0
  7218  0CB8  0852               	movf	_tap_timer,w	;volatile
  7219  0CB9  0024               	movlb	4	; select bank4
  7220  0CBA  07BD               	addwf	_tap_total^(0+512),f
  7221  0CBB  0020               	movlb	0	; select bank0
  7222  0CBC  0853               	movf	_tap_timer+1,w	;volatile
  7223  0CBD  0024               	movlb	4	; select bank4
  7224  0CBE  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7225  0CBF  0020               	movlb	0	; select bank0
  7226  0CC0  0854               	movf	_tap_timer+2,w	;volatile
  7227  0CC1  0024               	movlb	4	; select bank4
  7228  0CC2  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7229  0CC3  0020               	movlb	0	; select bank0
  7230  0CC4  0855               	movf	_tap_timer+3,w	;volatile
  7231  0CC5  0024               	movlb	4	; select bank4
  7232  0CC6  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7233                           
  7234                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7235  0CC7  0023               	movlb	3	; select bank3
  7236  0CC8  085D               	movf	_tap_iteration^(0+384),w
  7237  0CC9  0021               	movlb	1	; select bank1
  7238  0CCA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7239  0CCB  3001               	movlw	1
  7240  0CCC                     u10015:	
  7241  0CCC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7242  0CCD  3EFF               	addlw	-1
  7243  0CCE  1D03               	skipz
  7244  0CCF  2CCC               	goto	u10015
  7245  0CD0  353C               	lslf	??_updateSwitchTap^(0+128),w
  7246  0CD1  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7247  0CD2  0086               	movwf	6
  7248  0CD3  3002               	movlw	2	; select bank4/5
  7249  0CD4  0087               	movwf	7
  7250  0CD5  0020               	movlb	0	; select bank0
  7251  0CD6  0852               	movf	_tap_timer,w	;volatile
  7252  0CD7  3FC0               	movwi [0]fsr1
  7253  0CD8  0853               	movf	_tap_timer+1,w	;volatile
  7254  0CD9  3FC1               	movwi [1]fsr1
  7255  0CDA  0854               	movf	_tap_timer+2,w	;volatile
  7256  0CDB  3FC2               	movwi [2]fsr1
  7257  0CDC  0855               	movf	_tap_timer+3,w	;volatile
  7258  0CDD  3FC3               	movwi [3]fsr1
  7259                           
  7260                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7261  0CDE  0023               	movlb	3	; select bank3
  7262  0CDF  085E               	movf	(_tap_iteration+1)^(0+384),w
  7263  0CE0  0021               	movlb	1	; select bank1
  7264  0CE1  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7265  0CE2  0023               	movlb	3	; select bank3
  7266  0CE3  085D               	movf	_tap_iteration^(0+384),w
  7267  0CE4  0021               	movlb	1	; select bank1
  7268  0CE5  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7269                           
  7270                           ;SwitchTap.c: 122: } else {
  7271  0CE6  2D63               	goto	l9128
  7272  0CE7                     l9114:	
  7273                           
  7274                           ;SwitchTap.c: 123: tap_total = 0;
  7275  0CE7  3000               	movlw	0
  7276  0CE8  0024               	movlb	4	; select bank4
  7277  0CE9  00C0               	movwf	(_tap_total+3)^(0+512)
  7278  0CEA  3000               	movlw	0
  7279  0CEB  00BF               	movwf	(_tap_total+2)^(0+512)
  7280  0CEC  3000               	movlw	0
  7281  0CED  00BE               	movwf	(_tap_total+1)^(0+512)
  7282  0CEE  3000               	movlw	0
  7283  0CEF  00BD               	movwf	_tap_total^(0+512)
  7284                           
  7285                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7286  0CF0  0021               	movlb	1	; select bank1
  7287  0CF1  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7288  0CF2  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7289  0CF3                     l9122:	
  7290  0CF3  0020               	movlb	0	; select bank0
  7291  0CF4  0850               	movf	_num_taps,w
  7292  0CF5  0021               	movlb	1	; select bank1
  7293  0CF6  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7294  0CF7  1803               	btfsc	3,0
  7295  0CF8  2D3D               	goto	l9124
  7296                           
  7297                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7298  0CF9  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7299  0CFA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7300  0CFB  3001               	movlw	1
  7301  0CFC                     u10025:	
  7302  0CFC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7303  0CFD  3EFF               	addlw	-1
  7304  0CFE  1D03               	skipz
  7305  0CFF  2CFC               	goto	u10025
  7306  0D00  353C               	lslf	??_updateSwitchTap^(0+128),w
  7307  0D01  3E04               	addlw	4
  7308  0D02  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7309  0D03  0086               	movwf	6
  7310  0D04  3002               	movlw	2	; select bank4/5
  7311  0D05  0087               	movwf	7
  7312  0D06  3F40               	moviw [0]fsr1
  7313  0D07  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7314  0D08  3F41               	moviw [1]fsr1
  7315  0D09  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7316  0D0A  3F42               	moviw [2]fsr1
  7317  0D0B  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7318  0D0C  3F43               	moviw [3]fsr1
  7319  0D0D  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7320  0D0E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7321  0D0F  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7322  0D10  3001               	movlw	1
  7323  0D11                     u10035:	
  7324  0D11  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7325  0D12  3EFF               	addlw	-1
  7326  0D13  1D03               	skipz
  7327  0D14  2D11               	goto	u10035
  7328  0D15  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7329  0D16  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7330  0D17  0086               	movwf	6
  7331  0D18  3002               	movlw	2	; select bank4/5
  7332  0D19  0087               	movwf	7
  7333  0D1A  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7334  0D1B  3FC0               	movwi [0]fsr1
  7335  0D1C  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7336  0D1D  3FC1               	movwi [1]fsr1
  7337  0D1E  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7338  0D1F  3FC2               	movwi [2]fsr1
  7339  0D20  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7340  0D21  3FC3               	movwi [3]fsr1
  7341                           
  7342                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7343  0D22  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7344  0D23  00BC               	movwf	??_updateSwitchTap^(0+128)
  7345  0D24  3001               	movlw	1
  7346  0D25                     u10045:	
  7347  0D25  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7348  0D26  3EFF               	addlw	-1
  7349  0D27  1D03               	skipz
  7350  0D28  2D25               	goto	u10045
  7351  0D29  353C               	lslf	??_updateSwitchTap^(0+128),w
  7352  0D2A  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7353  0D2B  0086               	movwf	6
  7354  0D2C  3002               	movlw	2	; select bank4/5
  7355  0D2D  0087               	movwf	7
  7356  0D2E  3F40               	moviw [0]fsr1
  7357  0D2F  0024               	movlb	4	; select bank4
  7358  0D30  07BD               	addwf	_tap_total^(0+512),f
  7359  0D31  3F41               	moviw [1]fsr1
  7360  0D32  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7361  0D33  3F42               	moviw [2]fsr1
  7362  0D34  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7363  0D35  3F43               	moviw [3]fsr1
  7364  0D36  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7365  0D37  3001               	movlw	1
  7366  0D38  0021               	movlb	1	; select bank1
  7367  0D39  00BC               	movwf	??_updateSwitchTap^(0+128)
  7368  0D3A  083C               	movf	??_updateSwitchTap^(0+128),w
  7369  0D3B  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7370  0D3C  2CF3               	goto	l9122
  7371  0D3D                     l9124:	
  7372                           
  7373                           ;SwitchTap.c: 127: }
  7374                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7375  0D3D  0020               	movlb	0	; select bank0
  7376  0D3E  0850               	movf	_num_taps,w
  7377  0D3F  0021               	movlb	1	; select bank1
  7378  0D40  00BC               	movwf	??_updateSwitchTap^(0+128)
  7379  0D41  3001               	movlw	1
  7380  0D42                     u10065:	
  7381  0D42  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7382  0D43  3EFF               	addlw	-1
  7383  0D44  1D03               	skipz
  7384  0D45  2D42               	goto	u10065
  7385  0D46  353C               	lslf	??_updateSwitchTap^(0+128),w
  7386  0D47  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7387  0D48  0086               	movwf	6
  7388  0D49  3002               	movlw	2	; select bank4/5
  7389  0D4A  0087               	movwf	7
  7390  0D4B  0020               	movlb	0	; select bank0
  7391  0D4C  0852               	movf	_tap_timer,w	;volatile
  7392  0D4D  3FC0               	movwi [0]fsr1
  7393  0D4E  0853               	movf	_tap_timer+1,w	;volatile
  7394  0D4F  3FC1               	movwi [1]fsr1
  7395  0D50  0854               	movf	_tap_timer+2,w	;volatile
  7396  0D51  3FC2               	movwi [2]fsr1
  7397  0D52  0855               	movf	_tap_timer+3,w	;volatile
  7398  0D53  3FC3               	movwi [3]fsr1
  7399                           
  7400                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7401  0D54  0852               	movf	_tap_timer,w	;volatile
  7402  0D55  0024               	movlb	4	; select bank4
  7403  0D56  07BD               	addwf	_tap_total^(0+512),f
  7404  0D57  0020               	movlb	0	; select bank0
  7405  0D58  0853               	movf	_tap_timer+1,w	;volatile
  7406  0D59  0024               	movlb	4	; select bank4
  7407  0D5A  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7408  0D5B  0020               	movlb	0	; select bank0
  7409  0D5C  0854               	movf	_tap_timer+2,w	;volatile
  7410  0D5D  0024               	movlb	4	; select bank4
  7411  0D5E  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7412  0D5F  0020               	movlb	0	; select bank0
  7413  0D60  0855               	movf	_tap_timer+3,w	;volatile
  7414  0D61  0024               	movlb	4	; select bank4
  7415  0D62  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7416  0D63                     l9128:	
  7417                           
  7418                           ;SwitchTap.c: 130: }
  7419                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7420  0D63  0021               	movlb	1	; select bank1
  7421  0D64  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7422  0D65  00A0               	movwf	___aldiv@divisor^(0+128)
  7423  0D66  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7424  0D67  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7425  0D68  0D89               	rlf	9,f
  7426  0D69  3B89               	subwfb	9,f
  7427  0D6A  0989               	comf	9,f
  7428  0D6B  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7429  0D6C  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7430  0D6D  0024               	movlb	4	; select bank4
  7431  0D6E  0840               	movf	(_tap_total+3)^(0+512),w
  7432  0D6F  0021               	movlb	1	; select bank1
  7433  0D70  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7434  0D71  0024               	movlb	4	; select bank4
  7435  0D72  083F               	movf	(_tap_total+2)^(0+512),w
  7436  0D73  0021               	movlb	1	; select bank1
  7437  0D74  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7438  0D75  0024               	movlb	4	; select bank4
  7439  0D76  083E               	movf	(_tap_total+1)^(0+512),w
  7440  0D77  0021               	movlb	1	; select bank1
  7441  0D78  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7442  0D79  0024               	movlb	4	; select bank4
  7443  0D7A  083D               	movf	_tap_total^(0+512),w
  7444  0D7B  0021               	movlb	1	; select bank1
  7445  0D7C  00A4               	movwf	___aldiv@dividend^(0+128)
  7446  0D7D  3198  207B         	fcall	___aldiv
  7447  0D7F  0021               	movlb	1	; select bank1
  7448  0D80  0823               	movf	(?___aldiv+3)^(0+128),w
  7449  0D81  0020               	movlb	0	; select bank0
  7450  0D82  00C3               	movwf	_baseline_mod_time+3	;volatile
  7451  0D83  0021               	movlb	1	; select bank1
  7452  0D84  0822               	movf	(?___aldiv+2)^(0+128),w
  7453  0D85  0020               	movlb	0	; select bank0
  7454  0D86  00C2               	movwf	_baseline_mod_time+2	;volatile
  7455  0D87  0021               	movlb	1	; select bank1
  7456  0D88  0821               	movf	(?___aldiv+1)^(0+128),w
  7457  0D89  0020               	movlb	0	; select bank0
  7458  0D8A  00C1               	movwf	_baseline_mod_time+1	;volatile
  7459  0D8B  0021               	movlb	1	; select bank1
  7460  0D8C  0820               	movf	?___aldiv^(0+128),w
  7461  0D8D  0020               	movlb	0	; select bank0
  7462  0D8E  00C0               	movwf	_baseline_mod_time	;volatile
  7463                           
  7464                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7465  0D8F  0023               	movlb	3	; select bank3
  7466  0D90  01E4               	clrf	_mod_time_changed^(0+384)
  7467  0D91  0AE4               	incf	_mod_time_changed^(0+384),f
  7468                           
  7469                           ;SwitchTap.c: 134: tap_timer = 0;
  7470  0D92  3000               	movlw	0
  7471  0D93  0020               	movlb	0	; select bank0
  7472  0D94  00D5               	movwf	_tap_timer+3	;volatile
  7473  0D95  3000               	movlw	0
  7474  0D96  00D4               	movwf	_tap_timer+2	;volatile
  7475  0D97  3000               	movlw	0
  7476  0D98  00D3               	movwf	_tap_timer+1	;volatile
  7477  0D99  3000               	movlw	0
  7478  0D9A  00D2               	movwf	_tap_timer	;volatile
  7479                           
  7480                           ;SwitchTap.c: 136: tap_iteration++;
  7481  0D9B  3001               	movlw	1
  7482  0D9C  0023               	movlb	3	; select bank3
  7483  0D9D  07DD               	addwf	_tap_iteration^(0+384),f
  7484  0D9E  3000               	movlw	0
  7485  0D9F  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7486                           
  7487                           ;SwitchTap.c: 137: }
  7488                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7489  0DA0  0008               	return
  7490  0DA1                     l9136:	
  7491  0DA1  3019               	movlw	25
  7492  0DA2  0022               	movlb	2	; select bank2
  7493  0DA3  026B               	subwf	_switchTap_pressed^(0+256),w
  7494  0DA4  1C03               	skipc
  7495  0DA5  0008               	return
  7496                           
  7497                           ;SwitchTap.c: 140: switchTap_down = 0;
  7498  0DA6  0023               	movlb	3	; select bank3
  7499  0DA7  01CB               	clrf	_switchTap_down^(0+384)
  7500                           
  7501                           ;SwitchTap.c: 141: switchTap_state = 0;
  7502  0DA8  01E6               	clrf	_switchTap_state^(0+384)
  7503                           
  7504                           ;SwitchTap.c: 147: setLongTapState(0);
  7505  0DA9  3000               	movlw	0
  7506  0DAA  0021               	movlb	1	; select bank1
  7507  0DAB  00A0               	movwf	setLongTapState@f_state^(0+128)
  7508  0DAC  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7509  0DAD  31AD  2584         	fcall	_setLongTapState
  7510                           
  7511                           ;SwitchTap.c: 149: longTap_timer = 0;
  7512  0DAF  0023               	movlb	3	; select bank3
  7513  0DB0  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7514  0DB1  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7515                           
  7516                           ;SwitchTap.c: 150: longTap_start = 0;
  7517  0DB2  01C5               	clrf	_longTap_start^(0+384)
  7518                           
  7519                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7520  0DB3  3019               	movlw	25
  7521  0DB4  0021               	movlb	1	; select bank1
  7522  0DB5  00BC               	movwf	??_updateSwitchTap^(0+128)
  7523  0DB6  083C               	movf	??_updateSwitchTap^(0+128),w
  7524  0DB7  0022               	movlb	2	; select bank2
  7525  0DB8  00EB               	movwf	_switchTap_pressed^(0+256)
  7526  0DB9  0008               	return
  7527  0DBA                     __end_of_updateSwitchTap:	
  7528                           
  7529                           	psect	text4
  7530  2D84                     __ptext4:	
  7531 ;; *************** function _setLongTapState *****************
  7532 ;; Defined at:
  7533 ;;		line 167 in file "SwitchTap.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;  f_state         2    0[BANK1 ] int 
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;		None
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      void 
  7540 ;; Registers used:
  7541 ;;		wreg, status,0
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7547 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7549 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7550 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7551 ;;Total ram usage:        4 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    3
  7554 ;; This function calls:
  7555 ;;		Nothing
  7556 ;; This function is called by:
  7557 ;;		_updateSwitchTap
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           
  7562                           ;psect for function _setLongTapState
  7563  2D84                     _setLongTapState:	
  7564                           
  7565                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7566                           
  7567                           ;incstack = 0
  7568                           ; Regs used in _setLongTapState: [wreg+status,0]
  7569  2D84  0020               	movlb	0	; select bank0
  7570  2D85  084F               	movf	_longTap_state,w	;volatile
  7571  2D86  0021               	movlb	1	; select bank1
  7572  2D87  00A2               	movwf	??_setLongTapState^(0+128)
  7573  2D88  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7574  2D89  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7575  2D8A  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7576  2D8B  1D03               	skipz
  7577  2D8C  2D8F               	goto	u9105
  7578  2D8D  0820               	movf	setLongTapState@f_state^(0+128),w
  7579  2D8E  0622               	xorwf	??_setLongTapState^(0+128),w
  7580  2D8F                     u9105:	
  7581  2D8F  1903               	btfsc	3,2
  7582  2D90  0008               	return
  7583                           
  7584                           ;SwitchTap.c: 169: longTap_state = f_state;
  7585  2D91  0820               	movf	setLongTapState@f_state^(0+128),w
  7586  2D92  00A2               	movwf	??_setLongTapState^(0+128)
  7587  2D93  0822               	movf	??_setLongTapState^(0+128),w
  7588  2D94  0020               	movlb	0	; select bank0
  7589  2D95  00CF               	movwf	_longTap_state	;volatile
  7590                           
  7591                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7592  2D96  0021               	movlb	1	; select bank1
  7593  2D97  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7594  2D98  0022               	movlb	2	; select bank2
  7595  2D99  1C03               	skipc
  7596  2D9A  128D               	bcf	13,5	;volatile
  7597  2D9B  1803               	skipnc
  7598  2D9C  168D               	bsf	13,5	;volatile
  7599  2D9D  0008               	return
  7600  2D9E                     __end_of_setLongTapState:	
  7601                           
  7602                           	psect	text5
  7603  187B                     __ptext5:	
  7604 ;; *************** function ___aldiv *****************
  7605 ;; Defined at:
  7606 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  divisor         4    0[BANK1 ] long 
  7609 ;;  dividend        4    4[BANK1 ] long 
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;  quotient        4   11[BANK1 ] long 
  7612 ;;  sign            1   10[BANK1 ] unsigned char 
  7613 ;;  counter         1    9[BANK1 ] unsigned char 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  4    0[BANK1 ] long 
  7616 ;; Registers used:
  7617 ;;		wreg, status,2, status,0
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7623 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7624 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7625 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7626 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7627 ;;Total ram usage:       15 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    3
  7630 ;; This function calls:
  7631 ;;		Nothing
  7632 ;; This function is called by:
  7633 ;;		_updateSwitchTap
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           
  7638                           ;psect for function ___aldiv
  7639  187B                     ___aldiv:	
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7643  187B  0021               	movlb	1	; select bank1
  7644  187C  01AA               	clrf	___aldiv@sign^(0+128)
  7645  187D  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7646  187E  288C               	goto	l2053
  7647  187F  09A0               	comf	___aldiv@divisor^(0+128),f
  7648  1880  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7649  1881  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7650  1882  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7651  1883  0AA0               	incf	___aldiv@divisor^(0+128),f
  7652  1884  1903               	skipnz
  7653  1885  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7654  1886  1903               	skipnz
  7655  1887  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7656  1888  1903               	skipnz
  7657  1889  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7658  188A  01AA               	clrf	___aldiv@sign^(0+128)
  7659  188B  0AAA               	incf	___aldiv@sign^(0+128),f
  7660  188C                     l2053:	
  7661  188C  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7662  188D  289D               	goto	l8702
  7663  188E  09A4               	comf	___aldiv@dividend^(0+128),f
  7664  188F  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7665  1890  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7666  1891  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7667  1892  0AA4               	incf	___aldiv@dividend^(0+128),f
  7668  1893  1903               	skipnz
  7669  1894  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7670  1895  1903               	skipnz
  7671  1896  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7672  1897  1903               	skipnz
  7673  1898  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7674  1899  3001               	movlw	1
  7675  189A  00A8               	movwf	??___aldiv^(0+128)
  7676  189B  0828               	movf	??___aldiv^(0+128),w
  7677  189C  06AA               	xorwf	___aldiv@sign^(0+128),f
  7678  189D                     l8702:	
  7679  189D  3000               	movlw	0
  7680  189E  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7681  189F  3000               	movlw	0
  7682  18A0  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7683  18A1  3000               	movlw	0
  7684  18A2  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7685  18A3  3000               	movlw	0
  7686  18A4  00AB               	movwf	___aldiv@quotient^(0+128)
  7687  18A5  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7688  18A6  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7689  18A7  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7690  18A8  0420               	iorwf	___aldiv@divisor^(0+128),w
  7691  18A9  1903               	skipnz
  7692  18AA  28E6               	goto	l8724
  7693  18AB  01A9               	clrf	___aldiv@counter^(0+128)
  7694  18AC  0AA9               	incf	___aldiv@counter^(0+128),f
  7695  18AD                     l8710:	
  7696  18AD  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7697  18AE  28BB               	goto	l8712
  7698  18AF  3001               	movlw	1
  7699  18B0                     u9185:	
  7700  18B0  35A0               	lslf	___aldiv@divisor^(0+128),f
  7701  18B1  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7702  18B2  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7703  18B3  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7704  18B4  0B89               	decfsz	9,f
  7705  18B5  28B0               	goto	u9185
  7706  18B6  3001               	movlw	1
  7707  18B7  00A8               	movwf	??___aldiv^(0+128)
  7708  18B8  0828               	movf	??___aldiv^(0+128),w
  7709  18B9  07A9               	addwf	___aldiv@counter^(0+128),f
  7710  18BA  28AD               	goto	l8710
  7711  18BB                     l8712:	
  7712  18BB  3001               	movlw	1
  7713  18BC                     u9205:	
  7714  18BC  35AB               	lslf	___aldiv@quotient^(0+128),f
  7715  18BD  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7716  18BE  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7717  18BF  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7718  18C0  0B89               	decfsz	9,f
  7719  18C1  28BC               	goto	u9205
  7720  18C2  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7721  18C3  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7722  18C4  1D03               	skipz
  7723  18C5  28D0               	goto	u9215
  7724  18C6  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7725  18C7  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7726  18C8  1D03               	skipz
  7727  18C9  28D0               	goto	u9215
  7728  18CA  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7729  18CB  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7730  18CC  1D03               	skipz
  7731  18CD  28D0               	goto	u9215
  7732  18CE  0820               	movf	___aldiv@divisor^(0+128),w
  7733  18CF  0224               	subwf	___aldiv@dividend^(0+128),w
  7734  18D0                     u9215:	
  7735  18D0  1C03               	skipc
  7736  18D1  28DB               	goto	l8720
  7737  18D2  0820               	movf	___aldiv@divisor^(0+128),w
  7738  18D3  02A4               	subwf	___aldiv@dividend^(0+128),f
  7739  18D4  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7740  18D5  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7741  18D6  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7742  18D7  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7743  18D8  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7744  18D9  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7745  18DA  142B               	bsf	___aldiv@quotient^(0+128),0
  7746  18DB                     l8720:	
  7747  18DB  3001               	movlw	1
  7748  18DC                     u9225:	
  7749  18DC  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7750  18DD  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7751  18DE  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7752  18DF  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7753  18E0  0B89               	decfsz	9,f
  7754  18E1  28DC               	goto	u9225
  7755  18E2  3001               	movlw	1
  7756  18E3  02A9               	subwf	___aldiv@counter^(0+128),f
  7757  18E4  1D03               	btfss	3,2
  7758  18E5  28BB               	goto	l8712
  7759  18E6                     l8724:	
  7760  18E6  082A               	movf	___aldiv@sign^(0+128),w
  7761  18E7  1903               	btfsc	3,2
  7762  18E8  28F4               	goto	l8728
  7763  18E9  09AB               	comf	___aldiv@quotient^(0+128),f
  7764  18EA  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7765  18EB  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7766  18EC  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7767  18ED  0AAB               	incf	___aldiv@quotient^(0+128),f
  7768  18EE  1903               	skipnz
  7769  18EF  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7770  18F0  1903               	skipnz
  7771  18F1  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7772  18F2  1903               	skipnz
  7773  18F3  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7774  18F4                     l8728:	
  7775  18F4  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7776  18F5  00A3               	movwf	(?___aldiv+3)^(0+128)
  7777  18F6  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7778  18F7  00A2               	movwf	(?___aldiv+2)^(0+128)
  7779  18F8  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7780  18F9  00A1               	movwf	(?___aldiv+1)^(0+128)
  7781  18FA  082B               	movf	___aldiv@quotient^(0+128),w
  7782  18FB  00A0               	movwf	?___aldiv^(0+128)
  7783  18FC  0008               	return
  7784  18FD                     __end_of___aldiv:	
  7785                           
  7786                           	psect	text6
  7787  1241                     __ptext6:	
  7788 ;; *************** function _updateSwitchBypass *****************
  7789 ;; Defined at:
  7790 ;;		line 34 in file "SwitchBypass.c"
  7791 ;; Parameters:    Size  Location     Type
  7792 ;;		None
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;		None
  7795 ;; Return value:  Size  Location     Type
  7796 ;;                  1    wreg      void 
  7797 ;; Registers used:
  7798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7799 ;; Tracked objects:
  7800 ;;		On entry : 0/0
  7801 ;;		On exit  : 0/0
  7802 ;;		Unchanged: 0/0
  7803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7806 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7807 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7808 ;;Total ram usage:        2 bytes
  7809 ;; Hardware stack levels used:    1
  7810 ;; Hardware stack levels required when called:    8
  7811 ;; This function calls:
  7812 ;;		_setDoublePressState
  7813 ;;		_setLongBypassState
  7814 ;;		_setSwitchBypassRelays
  7815 ;;		_setSwitchBypassState
  7816 ;; This function is called by:
  7817 ;;		_main
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821                           
  7822                           ;psect for function _updateSwitchBypass
  7823  1241                     _updateSwitchBypass:	
  7824                           
  7825                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7826                           
  7827                           ;incstack = 0
  7828                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7829  1241  0020               	movlb	0	; select bank0
  7830  1242  1890               	btfsc	16,1	;volatile
  7831  1243  2A57               	goto	l8938
  7832                           
  7833                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7834  1244  0023               	movlb	3	; select bank3
  7835  1245  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7836  1246  3A80               	xorlw	128
  7837  1247  0021               	movlb	1	; select bank1
  7838  1248  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7839  1249  3080               	movlw	128
  7840  124A  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7841  124B  1D03               	skipz
  7842  124C  2A50               	goto	u9605
  7843  124D  3001               	movlw	1
  7844  124E  0023               	movlb	3	; select bank3
  7845  124F  023A               	subwf	_switchBypass_pressed^(0+384),w
  7846  1250                     u9605:	
  7847  1250  1C03               	skipc
  7848  1251  2A6A               	goto	l8942
  7849                           
  7850                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7851  1252  30FF               	movlw	255
  7852  1253  0023               	movlb	3	; select bank3
  7853  1254  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7854  1255  30FF               	movlw	255
  7855  1256  2A69               	goto	L1
  7856  1257                     l8938:	
  7857                           ;SwitchBypass.c: 44: }
  7858                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7859                           
  7860  1257  0023               	movlb	3	; select bank3
  7861  1258  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7862  1259  3A80               	xorlw	128
  7863  125A  0021               	movlb	1	; select bank1
  7864  125B  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7865  125C  3080               	movlw	128
  7866  125D  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7867  125E  1D03               	skipz
  7868  125F  2A63               	goto	u9615
  7869  1260  3019               	movlw	25
  7870  1261  0023               	movlb	3	; select bank3
  7871  1262  023A               	subwf	_switchBypass_pressed^(0+384),w
  7872  1263                     u9615:	
  7873  1263  1803               	skipnc
  7874  1264  2A6A               	goto	l8942
  7875                           
  7876                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7877  1265  3001               	movlw	1
  7878  1266  0023               	movlb	3	; select bank3
  7879  1267  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7880  1268  3000               	movlw	0
  7881  1269                     L1:	
  7882  1269  3DBB               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7883  126A                     l8942:	
  7884                           
  7885                           ;SwitchBypass.c: 47: }
  7886                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7887  126A  0023               	movlb	3	; select bank3
  7888  126B  083A               	movf	_switchBypass_pressed^(0+384),w
  7889  126C  043B               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7890  126D  1D03               	btfss	3,2
  7891  126E  2AF2               	goto	l9002
  7892                           
  7893                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7894  126F  0844               	movf	_longBypass_start^(0+384),w
  7895  1270  1D03               	btfss	3,2
  7896  1271  2A76               	goto	l8950
  7897                           
  7898                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7899  1272  01C4               	clrf	_longBypass_start^(0+384)
  7900  1273  0AC4               	incf	_longBypass_start^(0+384),f
  7901                           
  7902                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7903  1274  01B6               	clrf	_longBypass_timer^(0+384)	;volatile
  7904  1275  01B7               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7905  1276                     l8950:	
  7906                           
  7907                           ;SwitchBypass.c: 59: }
  7908                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7909  1276  0020               	movlb	0	; select bank0
  7910  1277  084B               	movf	_long_press_limit+1,w
  7911  1278  0023               	movlb	3	; select bank3
  7912  1279  0237               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7913  127A  1D03               	skipz
  7914  127B  2A80               	goto	u9645
  7915  127C  0020               	movlb	0	; select bank0
  7916  127D  084A               	movf	_long_press_limit,w
  7917  127E  0023               	movlb	3	; select bank3
  7918  127F  0236               	subwf	_longBypass_timer^(0+384),w	;volatile
  7919  1280                     u9645:	
  7920  1280  1C03               	skipc
  7921  1281  2ABF               	goto	l8976
  7922  1282  0842               	movf	_longBypass_down^(0+384),w
  7923  1283  1D03               	btfss	3,2
  7924  1284  2ABF               	goto	l8976
  7925  1285  0020               	movlb	0	; select bank0
  7926  1286  085C               	movf	_doubleTap_state,w	;volatile
  7927  1287  1D03               	btfss	3,2
  7928  1288  2ABF               	goto	l8976
  7929                           
  7930                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7931  1289  0022               	movlb	2	; select bank2
  7932  128A  110D               	bcf	13,2	;volatile
  7933                           
  7934                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7935  128B  0023               	movlb	3	; select bank3
  7936  128C  0345               	decf	_longTap_start^(0+384),w
  7937  128D  1903               	btfsc	3,2
  7938  128E  2AB7               	goto	l8974
  7939                           
  7940                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7941  128F  0020               	movlb	0	; select bank0
  7942  1290  0351               	decf	_switchBypass_state,w
  7943  1291  1D03               	btfss	3,2
  7944  1292  2ABF               	goto	l8976
  7945                           
  7946                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7947  1293  0023               	movlb	3	; select bank3
  7948  1294  01C2               	clrf	_longBypass_down^(0+384)
  7949  1295  0AC2               	incf	_longBypass_down^(0+384),f
  7950                           
  7951                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7952  1296  0020               	movlb	0	; select bank0
  7953  1297  085D               	movf	_longBypass_state,w	;volatile
  7954  1298  1D03               	btfss	3,2
  7955  1299  2AA5               	goto	l8970
  7956                           
  7957                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7958  129A  0022               	movlb	2	; select bank2
  7959  129B  110D               	bcf	13,2	;volatile
  7960                           
  7961                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7962  129C  3001               	movlw	1
  7963  129D  0021               	movlb	1	; select bank1
  7964  129E  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7965  129F  3000               	movlw	0
  7966  12A0  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7967  12A1  31AE  260C  3192   	fcall	_setLongBypassState
  7968                           
  7969                           ;SwitchBypass.c: 71: } else {
  7970  12A4  2ABF               	goto	l8976
  7971  12A5                     l8970:	
  7972                           
  7973                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7974  12A5  3001               	movlw	1
  7975  12A6  0021               	movlb	1	; select bank1
  7976  12A7  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7977  12A8  3000               	movlw	0
  7978  12A9  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7979  12AA  31AD  25D4  3192   	fcall	_setSwitchBypassState
  7980                           
  7981                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7982  12AD  3000               	movlw	0
  7983  12AE  0021               	movlb	1	; select bank1
  7984  12AF  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7985  12B0  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7986  12B1  31AE  260C  3192   	fcall	_setLongBypassState
  7987                           
  7988                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7989  12B4  0022               	movlb	2	; select bank2
  7990  12B5  150D               	bsf	13,2	;volatile
  7991                           
  7992                           ;SwitchBypass.c: 75: }
  7993                           ;SwitchBypass.c: 76: }
  7994                           ;SwitchBypass.c: 77: } else {
  7995  12B6  2ABF               	goto	l8976
  7996  12B7                     l8974:	
  7997                           
  7998                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7999  12B7  3001               	movlw	1
  8000  12B8  0021               	movlb	1	; select bank1
  8001  12B9  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8002  12BA  3000               	movlw	0
  8003  12BB  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8004  12BC  31A1  2154  3192   	fcall	_setDoublePressState
  8005  12BF                     l8976:	
  8006                           
  8007                           ;SwitchBypass.c: 79: }
  8008                           ;SwitchBypass.c: 80: }
  8009                           ;SwitchBypass.c: 83: if (doubleTap_state == 0 && longBypass_down == 0) {
  8010  12BF  0020               	movlb	0	; select bank0
  8011  12C0  085C               	movf	_doubleTap_state,w	;volatile
  8012  12C1  1D03               	btfss	3,2
  8013  12C2  2AEE               	goto	l9000
  8014  12C3  0023               	movlb	3	; select bank3
  8015  12C4  0842               	movf	_longBypass_down^(0+384),w
  8016  12C5  1D03               	btfss	3,2
  8017  12C6  2AEE               	goto	l9000
  8018                           
  8019                           ;SwitchBypass.c: 84: if (switchBypass_state == 1) {
  8020  12C7  0020               	movlb	0	; select bank0
  8021  12C8  0351               	decf	_switchBypass_state,w
  8022  12C9  1D03               	btfss	3,2
  8023  12CA  2AD9               	goto	l8988
  8024                           
  8025                           ;SwitchBypass.c: 86: if (switchBypass_up == 1) {
  8026  12CB  0024               	movlb	4	; select bank4
  8027  12CC  0368               	decf	_switchBypass_up^(0+512),w
  8028  12CD  0469               	iorwf	(_switchBypass_up+1)^(0+512),w
  8029  12CE  1D03               	btfss	3,2
  8030  12CF  2AEE               	goto	l9000
  8031                           
  8032                           ;SwitchBypass.c: 87: currentBypassState = 1;
  8033  12D0  0023               	movlb	3	; select bank3
  8034  12D1  01E0               	clrf	_currentBypassState^(0+384)
  8035  12D2  0AE0               	incf	_currentBypassState^(0+384),f
  8036                           
  8037                           ;SwitchBypass.c: 88: switchBypass_toggle = 1;
  8038  12D3  3001               	movlw	1
  8039  12D4  0024               	movlb	4	; select bank4
  8040  12D5  00D9               	movwf	_switchBypass_toggle^(0+512)
  8041  12D6  3000               	movlw	0
  8042  12D7  00DA               	movwf	(_switchBypass_toggle^(0+512)+1)
  8043                           
  8044                           ;SwitchBypass.c: 89: }
  8045                           ;SwitchBypass.c: 90: } else {
  8046  12D8  2AEE               	goto	l9000
  8047  12D9                     l8988:	
  8048                           
  8049                           ;SwitchBypass.c: 91: if (bypass_turning_on != 1) {
  8050  12D9  0023               	movlb	3	; select bank3
  8051  12DA  0340               	decf	_bypass_turning_on^(0+384),w
  8052  12DB  1903               	btfsc	3,2
  8053  12DC  2AEE               	goto	l9000
  8054                           
  8055                           ;SwitchBypass.c: 93: currentBypassState = 0;
  8056  12DD  01E0               	clrf	_currentBypassState^(0+384)
  8057                           
  8058                           ;SwitchBypass.c: 95: bypass_turning_on = 1;
  8059  12DE  01C0               	clrf	_bypass_turning_on^(0+384)
  8060  12DF  0AC0               	incf	_bypass_turning_on^(0+384),f
  8061                           
  8062                           ;SwitchBypass.c: 96: switchBypass_toggle = 0;
  8063  12E0  0024               	movlb	4	; select bank4
  8064  12E1  01D9               	clrf	_switchBypass_toggle^(0+512)
  8065  12E2  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8066                           
  8067                           ;SwitchBypass.c: 98: longBypass_save = longBypass_state;
  8068  12E3  0020               	movlb	0	; select bank0
  8069  12E4  085D               	movf	_longBypass_state,w	;volatile
  8070  12E5  0021               	movlb	1	; select bank1
  8071  12E6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8072  12E7  083C               	movf	??_updateSwitchBypass^(0+128),w
  8073  12E8  0023               	movlb	3	; select bank3
  8074  12E9  00C3               	movwf	_longBypass_save^(0+384)
  8075                           
  8076                           ;SwitchBypass.c: 99: longBypass_state = 0;
  8077  12EA  0020               	movlb	0	; select bank0
  8078  12EB  01DD               	clrf	_longBypass_state	;volatile
  8079                           
  8080                           ;SwitchBypass.c: 100: longBypass_start = 0;
  8081  12EC  0023               	movlb	3	; select bank3
  8082  12ED  01C4               	clrf	_longBypass_start^(0+384)
  8083  12EE                     l9000:	
  8084                           
  8085                           ;SwitchBypass.c: 101: }
  8086                           ;SwitchBypass.c: 102: }
  8087                           ;SwitchBypass.c: 104: }
  8088                           ;SwitchBypass.c: 105: switchBypass_up = 0;
  8089  12EE  0024               	movlb	4	; select bank4
  8090  12EF  01E8               	clrf	_switchBypass_up^(0+512)
  8091  12F0  01E9               	clrf	(_switchBypass_up+1)^(0+512)
  8092                           
  8093                           ;SwitchBypass.c: 106: } else if (switchBypass_pressed >= 25) {
  8094  12F1  0008               	return
  8095  12F2                     l9002:	
  8096  12F2  0023               	movlb	3	; select bank3
  8097  12F3  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  8098  12F4  3A80               	xorlw	128
  8099  12F5  0021               	movlb	1	; select bank1
  8100  12F6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8101  12F7  3080               	movlw	128
  8102  12F8  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8103  12F9  1D03               	skipz
  8104  12FA  2AFE               	goto	u9755
  8105  12FB  3019               	movlw	25
  8106  12FC  0023               	movlb	3	; select bank3
  8107  12FD  023A               	subwf	_switchBypass_pressed^(0+384),w
  8108  12FE                     u9755:	
  8109  12FE  1C03               	skipc
  8110  12FF  0008               	return
  8111                           
  8112                           ;SwitchBypass.c: 107: if (doubleTap_state == 1) {
  8113  1300  0020               	movlb	0	; select bank0
  8114  1301  035C               	decf	_doubleTap_state,w	;volatile
  8115  1302  1D03               	btfss	3,2
  8116  1303  2B0D               	goto	l9008
  8117                           
  8118                           ;SwitchBypass.c: 108: setSwitchBypassState(currentBypassState);
  8119  1304  0023               	movlb	3	; select bank3
  8120  1305  0860               	movf	_currentBypassState^(0+384),w
  8121  1306  0021               	movlb	1	; select bank1
  8122  1307  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8123  1308  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  8124  1309  083C               	movf	??_updateSwitchBypass^(0+128),w
  8125  130A  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8126  130B  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  8127  130C  2B3D               	goto	L2
  8128  130D                     l9008:	
  8129                           ;SwitchBypass.c: 109: } else if (bypass_turning_on == 1) {
  8130                           
  8131  130D  0023               	movlb	3	; select bank3
  8132  130E  0340               	decf	_bypass_turning_on^(0+384),w
  8133  130F  1D03               	btfss	3,2
  8134  1310  2B2D               	goto	l9018
  8135                           
  8136                           ;SwitchBypass.c: 111: if (longBypass_save == 1) {
  8137  1311  0343               	decf	_longBypass_save^(0+384),w
  8138  1312  1D03               	btfss	3,2
  8139  1313  2B27               	goto	l9016
  8140                           
  8141                           ;SwitchBypass.c: 112: LATBbits.LATB2 = 0;
  8142  1314  0022               	movlb	2	; select bank2
  8143  1315  110D               	bcf	13,2	;volatile
  8144                           
  8145                           ;SwitchBypass.c: 113: setLongBypassState(1);
  8146  1316  3001               	movlw	1
  8147  1317  0021               	movlb	1	; select bank1
  8148  1318  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8149  1319  3000               	movlw	0
  8150  131A  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8151  131B  31AE  260C  3192   	fcall	_setLongBypassState
  8152                           
  8153                           ;SwitchBypass.c: 114: setSwitchBypassRelays(1);
  8154  131E  3001               	movlw	1
  8155  131F  0021               	movlb	1	; select bank1
  8156  1320  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8157  1321  3000               	movlw	0
  8158  1322  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8159  1323  31AF  2792  3192   	fcall	_setSwitchBypassRelays
  8160                           
  8161                           ;SwitchBypass.c: 115: } else {
  8162  1326  2B41               	goto	l9026
  8163  1327                     l9016:	
  8164                           
  8165                           ;SwitchBypass.c: 116: setSwitchBypassState(1);
  8166  1327  3001               	movlw	1
  8167  1328  0021               	movlb	1	; select bank1
  8168  1329  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8169  132A  3000               	movlw	0
  8170  132B  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8171  132C  2B3E               	goto	L3
  8172  132D                     l9018:	
  8173                           ;SwitchBypass.c: 117: }
  8174                           ;SwitchBypass.c: 119: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8175                           
  8176  132D  0024               	movlb	4	; select bank4
  8177  132E  0359               	decf	_switchBypass_toggle^(0+512),w
  8178  132F  045A               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8179  1330  1D03               	btfss	3,2
  8180  1331  2B41               	goto	l9026
  8181  1332  0023               	movlb	3	; select bank3
  8182  1333  0842               	movf	_longBypass_down^(0+384),w
  8183  1334  1D03               	btfss	3,2
  8184  1335  2B41               	goto	l9026
  8185  1336  0020               	movlb	0	; select bank0
  8186  1337  085C               	movf	_doubleTap_state,w	;volatile
  8187  1338  1D03               	btfss	3,2
  8188  1339  2B41               	goto	l9026
  8189                           
  8190                           ;SwitchBypass.c: 120: setSwitchBypassState(0);
  8191  133A  3000               	movlw	0
  8192  133B  0021               	movlb	1	; select bank1
  8193  133C  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8194  133D                     L2:	
  8195  133D  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8196  133E                     L3:	
  8197  133E  31AD  25D4  3192   	fcall	_setSwitchBypassState
  8198  1341                     l9026:	
  8199                           
  8200                           ;SwitchBypass.c: 121: }
  8201                           ;SwitchBypass.c: 123: longBypass_down = 0;
  8202  1341  0023               	movlb	3	; select bank3
  8203  1342  01C2               	clrf	_longBypass_down^(0+384)
  8204                           
  8205                           ;SwitchBypass.c: 124: if (longBypass_state == 0) {
  8206  1343  0020               	movlb	0	; select bank0
  8207  1344  085D               	movf	_longBypass_state,w	;volatile
  8208  1345  1D03               	btfss	3,2
  8209  1346  2B4D               	goto	l9032
  8210                           
  8211                           ;SwitchBypass.c: 125: LATBbits.LATB2 = switchBypass_state;
  8212  1347  0C51               	rrf	_switchBypass_state,w
  8213  1348  0022               	movlb	2	; select bank2
  8214  1349  1C03               	skipc
  8215  134A  110D               	bcf	13,2	;volatile
  8216  134B  1803               	skipnc
  8217  134C  150D               	bsf	13,2	;volatile
  8218  134D                     l9032:	
  8219                           
  8220                           ;SwitchBypass.c: 126: }
  8221                           ;SwitchBypass.c: 128: setDoublePressState(0);
  8222  134D  3000               	movlw	0
  8223  134E  0021               	movlb	1	; select bank1
  8224  134F  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8225  1350  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8226  1351  31A1  2154         	fcall	_setDoublePressState
  8227                           
  8228                           ;SwitchBypass.c: 129: longBypass_start = 0;
  8229  1353  0023               	movlb	3	; select bank3
  8230  1354  01C4               	clrf	_longBypass_start^(0+384)
  8231                           
  8232                           ;SwitchBypass.c: 130: bypass_turning_on = 0;
  8233  1355  01C0               	clrf	_bypass_turning_on^(0+384)
  8234                           
  8235                           ;SwitchBypass.c: 131: switchBypass_toggle = 0;
  8236  1356  0024               	movlb	4	; select bank4
  8237  1357  01D9               	clrf	_switchBypass_toggle^(0+512)
  8238  1358  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8239                           
  8240                           ;SwitchBypass.c: 132: switchBypass_up = 1;
  8241  1359  3001               	movlw	1
  8242  135A  00E8               	movwf	_switchBypass_up^(0+512)
  8243  135B  3000               	movlw	0
  8244  135C  00E9               	movwf	(_switchBypass_up^(0+512)+1)
  8245                           
  8246                           ;SwitchBypass.c: 134: switchBypass_pressed = 25;
  8247  135D  3019               	movlw	25
  8248  135E  0023               	movlb	3	; select bank3
  8249  135F  00BA               	movwf	_switchBypass_pressed^(0+384)
  8250  1360  3000               	movlw	0
  8251  1361  00BB               	movwf	(_switchBypass_pressed^(0+384)+1)
  8252  1362  0008               	return
  8253  1363                     __end_of_updateSwitchBypass:	
  8254                           
  8255                           	psect	text7
  8256  2E0C                     __ptext7:	
  8257 ;; *************** function _setLongBypassState *****************
  8258 ;; Defined at:
  8259 ;;		line 164 in file "SwitchBypass.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  f_state         2    0[BANK1 ] int 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;		None
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  1    wreg      void 
  8266 ;; Registers used:
  8267 ;;		wreg, status,0
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8273 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8275 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8276 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8277 ;;Total ram usage:        4 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; Hardware stack levels required when called:    3
  8280 ;; This function calls:
  8281 ;;		Nothing
  8282 ;; This function is called by:
  8283 ;;		_updateSwitchBypass
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function _setLongBypassState
  8289  2E0C                     _setLongBypassState:	
  8290                           
  8291                           ;SwitchBypass.c: 165: if (longBypass_state == f_state) {return;}
  8292                           
  8293                           ;incstack = 0
  8294                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8295  2E0C  0020               	movlb	0	; select bank0
  8296  2E0D  085D               	movf	_longBypass_state,w	;volatile
  8297  2E0E  0021               	movlb	1	; select bank1
  8298  2E0F  00A2               	movwf	??_setLongBypassState^(0+128)
  8299  2E10  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8300  2E11  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8301  2E12  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8302  2E13  1D03               	skipz
  8303  2E14  2E17               	goto	u9055
  8304  2E15  0820               	movf	setLongBypassState@f_state^(0+128),w
  8305  2E16  0622               	xorwf	??_setLongBypassState^(0+128),w
  8306  2E17                     u9055:	
  8307  2E17  1903               	btfsc	3,2
  8308  2E18  0008               	return
  8309                           
  8310                           ;SwitchBypass.c: 166: longBypass_state = f_state;
  8311  2E19  0820               	movf	setLongBypassState@f_state^(0+128),w
  8312  2E1A  00A2               	movwf	??_setLongBypassState^(0+128)
  8313  2E1B  0822               	movf	??_setLongBypassState^(0+128),w
  8314  2E1C  0020               	movlb	0	; select bank0
  8315  2E1D  00DD               	movwf	_longBypass_state	;volatile
  8316                           
  8317                           ;SwitchBypass.c: 167: LATBbits.LATB3 = f_state;
  8318  2E1E  0021               	movlb	1	; select bank1
  8319  2E1F  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8320  2E20  0022               	movlb	2	; select bank2
  8321  2E21  1C03               	skipc
  8322  2E22  118D               	bcf	13,3	;volatile
  8323  2E23  1803               	skipnc
  8324  2E24  158D               	bsf	13,3	;volatile
  8325                           
  8326                           ;SwitchBypass.c: 168: PORTCbits.RC4 = f_state;
  8327  2E25  0021               	movlb	1	; select bank1
  8328  2E26  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8329  2E27  0020               	movlb	0	; select bank0
  8330  2E28  1C03               	skipc
  8331  2E29  120E               	bcf	14,4	;volatile
  8332  2E2A  1803               	skipnc
  8333  2E2B  160E               	bsf	14,4	;volatile
  8334  2E2C  0008               	return
  8335  2E2D                     __end_of_setLongBypassState:	
  8336                           
  8337                           	psect	text8
  8338  2154                     __ptext8:	
  8339 ;; *************** function _setDoublePressState *****************
  8340 ;; Defined at:
  8341 ;;		line 21 in file "preset_programming.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;  f_state         2   24[BANK1 ] int 
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;		None
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  1    wreg      void 
  8348 ;; Registers used:
  8349 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8355 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8357 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8358 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8359 ;;Total ram usage:        4 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    7
  8362 ;; This function calls:
  8363 ;;		_resetRingLEDs
  8364 ;;		_setPedalMode
  8365 ;;		_setPresetDisplay
  8366 ;;		_showSave
  8367 ;;		_wait_ms
  8368 ;; This function is called by:
  8369 ;;		_updateSwitchBypass
  8370 ;;		_updateSwitchTap
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           
  8375                           ;psect for function _setDoublePressState
  8376  2154                     _setDoublePressState:	
  8377                           
  8378                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8379                           
  8380                           ;incstack = 0
  8381                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8382  2154  0020               	movlb	0	; select bank0
  8383  2155  085C               	movf	_doubleTap_state,w	;volatile
  8384  2156  0021               	movlb	1	; select bank1
  8385  2157  00BA               	movwf	??_setDoublePressState^(0+128)
  8386  2158  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8387  2159  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8388  215A  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8389  215B  1D03               	skipz
  8390  215C  295F               	goto	u9065
  8391  215D  0838               	movf	setDoublePressState@f_state^(0+128),w
  8392  215E  063A               	xorwf	??_setDoublePressState^(0+128),w
  8393  215F                     u9065:	
  8394  215F  1903               	btfsc	3,2
  8395  2160  0008               	return
  8396                           
  8397                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8398  2161  0838               	movf	setDoublePressState@f_state^(0+128),w
  8399  2162  00BA               	movwf	??_setDoublePressState^(0+128)
  8400  2163  083A               	movf	??_setDoublePressState^(0+128),w
  8401  2164  0020               	movlb	0	; select bank0
  8402  2165  00DC               	movwf	_doubleTap_state	;volatile
  8403                           
  8404                           ;preset_programming.c: 24: if (f_state == 1) {
  8405  2166  0021               	movlb	1	; select bank1
  8406  2167  0338               	decf	setDoublePressState@f_state^(0+128),w
  8407  2168  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8408  2169  1D03               	btfss	3,2
  8409  216A  296E               	goto	l8624
  8410                           
  8411                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8412  216B  0022               	movlb	2	; select bank2
  8413  216C  120D               	bcf	13,4	;volatile
  8414                           
  8415                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8416  216D  128D               	bcf	13,5	;volatile
  8417  216E                     l8624:	
  8418                           
  8419                           ;preset_programming.c: 30: }
  8420                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8421  216E  0020               	movlb	0	; select bank0
  8422  216F  035C               	decf	_doubleTap_state,w	;volatile
  8423  2170  1D03               	btfss	3,2
  8424  2171  2989               	goto	l8640
  8425                           
  8426                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8427  2172  085F               	movf	_presetSaveMode,w
  8428  2173  1D03               	btfss	3,2
  8429  2174  297E               	goto	l8632
  8430                           
  8431                           ;preset_programming.c: 34: presetSaveMode = 1;
  8432  2175  01DF               	clrf	_presetSaveMode
  8433  2176  0ADF               	incf	_presetSaveMode,f
  8434                           
  8435                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8436  2177  0022               	movlb	2	; select bank2
  8437  2178  108D               	bcf	13,1	;volatile
  8438                           
  8439                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8440  2179  086C               	movf	_presetChannel^(0+256),w
  8441  217A  31A0  2029  31A1   	fcall	_setPresetDisplay
  8442                           
  8443                           ;preset_programming.c: 37: } else {
  8444  217D  2989               	goto	l8640
  8445  217E                     l8632:	
  8446                           
  8447                           ;preset_programming.c: 39: presetSaveMode = 0;
  8448  217E  0020               	movlb	0	; select bank0
  8449  217F  01DF               	clrf	_presetSaveMode
  8450                           
  8451                           ;preset_programming.c: 40: setPedalMode();
  8452  2180  31A0  2006  31A1   	fcall	_setPedalMode
  8453                           
  8454                           ;preset_programming.c: 41: resetRingLEDs();
  8455  2183  31AD  256A  31A1   	fcall	_resetRingLEDs
  8456                           
  8457                           ;preset_programming.c: 42: showSave();
  8458  2186  31AD  253E  31A1   	fcall	_showSave
  8459  2189                     l8640:	
  8460                           
  8461                           ;preset_programming.c: 44: }
  8462                           ;preset_programming.c: 45: }
  8463                           ;preset_programming.c: 47: wait_ms(20);
  8464  2189  3014               	movlw	20
  8465  218A  0021               	movlb	1	; select bank1
  8466  218B  00AC               	movwf	wait_ms@timeSec^(0+128)
  8467  218C  3000               	movlw	0
  8468  218D  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8469  218E  3190  2003         	fcall	_wait_ms
  8470  2190  0008               	return
  8471  2191                     __end_of_setDoublePressState:	
  8472                           
  8473                           	psect	text9
  8474  2D3E                     __ptext9:	
  8475 ;; *************** function _showSave *****************
  8476 ;; Defined at:
  8477 ;;		line 112 in file "LEDs.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;		None
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;		None
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  1    wreg      void 
  8484 ;; Registers used:
  8485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8493 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8494 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8495 ;;Total ram usage:        1 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    6
  8498 ;; This function calls:
  8499 ;;		_ring_tactiles
  8500 ;;		_solidring_tactiles
  8501 ;; This function is called by:
  8502 ;;		_setDoublePressState
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           
  8507                           ;psect for function _showSave
  8508  2D3E                     _showSave:	
  8509                           
  8510                           ;LEDs.c: 113: suspend_blink = 1;
  8511                           
  8512                           ;incstack = 0
  8513                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8514  2D3E  3001               	movlw	1
  8515  2D3F  0021               	movlb	1	; select bank1
  8516  2D40  00B7               	movwf	??_showSave^(0+128)
  8517  2D41  0837               	movf	??_showSave^(0+128),w
  8518  2D42  0022               	movlb	2	; select bank2
  8519  2D43  00EA               	movwf	_suspend_blink^(0+256)	;volatile
  8520                           
  8521                           ;LEDs.c: 114: ring_tactiles();
  8522  2D44  31A3  23B7  31AD   	fcall	_ring_tactiles
  8523                           
  8524                           ;LEDs.c: 115: ring_tactiles();
  8525  2D47  31A3  23B7  31AD   	fcall	_ring_tactiles
  8526                           
  8527                           ;LEDs.c: 116: solidring_tactiles();
  8528  2D4A  31A1  21D1  31AD   	fcall	_solidring_tactiles
  8529                           
  8530                           ;LEDs.c: 117: solidring_tactiles();
  8531  2D4D  31A1  21D1         	fcall	_solidring_tactiles
  8532                           
  8533                           ;LEDs.c: 118: suspend_blink = 0;
  8534  2D4F  0022               	movlb	2	; select bank2
  8535  2D50  01EA               	clrf	_suspend_blink^(0+256)	;volatile
  8536  2D51  0008               	return
  8537  2D52                     __end_of_showSave:	
  8538                           
  8539                           	psect	text10
  8540  21D1                     __ptext10:	
  8541 ;; *************** function _solidring_tactiles *****************
  8542 ;; Defined at:
  8543 ;;		line 208 in file "LEDs.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;		None
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      void 
  8550 ;; Registers used:
  8551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8558 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8559 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8560 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8561 ;;Total ram usage:        3 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    5
  8564 ;; This function calls:
  8565 ;;		_set_leds_bottom
  8566 ;;		_set_leds_top
  8567 ;;		_wait_ms
  8568 ;; This function is called by:
  8569 ;;		_showSave
  8570 ;;		_showBootSequence
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           
  8575                           ;psect for function _solidring_tactiles
  8576  21D1                     _solidring_tactiles:	
  8577                           
  8578                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8579                           
  8580                           ;incstack = 0
  8581                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8582  21D1  301E               	movlw	30
  8583  21D2  0021               	movlb	1	; select bank1
  8584  21D3  00B2               	movwf	??_solidring_tactiles^(0+128)
  8585  21D4  0832               	movf	??_solidring_tactiles^(0+128),w
  8586  21D5  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8587                           
  8588                           ;LEDs.c: 210: set_leds_top(100, 1);
  8589  21D6  3064               	movlw	100
  8590  21D7  00A0               	movwf	set_leds_top@x^(0+128)
  8591  21D8  3000               	movlw	0
  8592  21D9  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8593  21DA  3001               	movlw	1
  8594  21DB  00A2               	movwf	set_leds_top@ledState^(0+128)
  8595  21DC  3000               	movlw	0
  8596  21DD  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8597  21DE  31A4  24FD  31A1   	fcall	_set_leds_top
  8598                           
  8599                           ;LEDs.c: 211: set_leds_bottom(100);
  8600  21E1  3064               	movlw	100
  8601  21E2  0021               	movlb	1	; select bank1
  8602  21E3  00A0               	movwf	set_leds_bottom@x^(0+128)
  8603  21E4  3000               	movlw	0
  8604  21E5  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8605  21E6  31A0  2063  31A1   	fcall	_set_leds_bottom
  8606                           
  8607                           ;LEDs.c: 212: wait_ms(ring_delay);
  8608  21E9  0021               	movlb	1	; select bank1
  8609  21EA  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8610  21EB  00B2               	movwf	??_solidring_tactiles^(0+128)
  8611  21EC  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8612  21ED  0832               	movf	??_solidring_tactiles^(0+128),w
  8613  21EE  00AC               	movwf	wait_ms@timeSec^(0+128)
  8614  21EF  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8615  21F0  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8616  21F1  3190  2003  31A1   	fcall	_wait_ms
  8617                           
  8618                           ;LEDs.c: 214: set_leds_top(0, 1);
  8619  21F4  3000               	movlw	0
  8620  21F5  0021               	movlb	1	; select bank1
  8621  21F6  00A0               	movwf	set_leds_top@x^(0+128)
  8622  21F7  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8623  21F8  3001               	movlw	1
  8624  21F9  00A2               	movwf	set_leds_top@ledState^(0+128)
  8625  21FA  3000               	movlw	0
  8626  21FB  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8627  21FC  31A4  24FD  31A1   	fcall	_set_leds_top
  8628                           
  8629                           ;LEDs.c: 215: set_leds_bottom(0);
  8630  21FF  3000               	movlw	0
  8631  2200  0021               	movlb	1	; select bank1
  8632  2201  00A0               	movwf	set_leds_bottom@x^(0+128)
  8633  2202  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8634  2203  31A0  2063  31A1   	fcall	_set_leds_bottom
  8635                           
  8636                           ;LEDs.c: 216: wait_ms(ring_delay);
  8637  2206  0021               	movlb	1	; select bank1
  8638  2207  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8639  2208  00B2               	movwf	??_solidring_tactiles^(0+128)
  8640  2209  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8641  220A  0832               	movf	??_solidring_tactiles^(0+128),w
  8642  220B  00AC               	movwf	wait_ms@timeSec^(0+128)
  8643  220C  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8644  220D  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8645  220E  3190  2003         	fcall	_wait_ms
  8646  2210  0008               	return
  8647  2211                     __end_of_solidring_tactiles:	
  8648                           
  8649                           	psect	text11
  8650  23B7                     __ptext11:	
  8651 ;; *************** function _ring_tactiles *****************
  8652 ;; Defined at:
  8653 ;;		line 196 in file "LEDs.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;		None
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;  iLed            2   21[BANK1 ] int 
  8658 ;;  iLed            2   19[BANK1 ] int 
  8659 ;; Return value:  Size  Location     Type
  8660 ;;                  1    wreg      void 
  8661 ;; Registers used:
  8662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8669 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8670 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8671 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8672 ;;Total ram usage:        5 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    5
  8675 ;; This function calls:
  8676 ;;		_set_leds_bottom
  8677 ;;		_set_leds_top
  8678 ;;		_wait_ms
  8679 ;; This function is called by:
  8680 ;;		_showSave
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           
  8685                           ;psect for function _ring_tactiles
  8686  23B7                     _ring_tactiles:	
  8687                           
  8688                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8689                           
  8690                           ;incstack = 0
  8691                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8692  23B7  3001               	movlw	1
  8693  23B8  0021               	movlb	1	; select bank1
  8694  23B9  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8695  23BA  3000               	movlw	0
  8696  23BB  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8697  23BC  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8698  23BD  3A80               	xorlw	128
  8699  23BE  00B2               	movwf	??_ring_tactiles^(0+128)
  8700  23BF  3080               	movlw	128
  8701  23C0  0232               	subwf	??_ring_tactiles^(0+128),w
  8702  23C1  1D03               	skipz
  8703  23C2  2BC5               	goto	u8505
  8704  23C3  3007               	movlw	7
  8705  23C4  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8706  23C5                     u8505:	
  8707  23C5  1803               	btfsc	3,0
  8708  23C6  2BEB               	goto	l8116
  8709  23C7                     l8108:	
  8710                           
  8711                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8712  23C7  0021               	movlb	1	; select bank1
  8713  23C8  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8714  23C9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8715  23CA  0833               	movf	ring_tactiles@iLed^(0+128),w
  8716  23CB  00A0               	movwf	set_leds_top@x^(0+128)
  8717  23CC  3001               	movlw	1
  8718  23CD  00A2               	movwf	set_leds_top@ledState^(0+128)
  8719  23CE  3000               	movlw	0
  8720  23CF  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8721  23D0  31A4  24FD  31A3   	fcall	_set_leds_top
  8722                           
  8723                           ;LEDs.c: 199: wait_ms(5);
  8724  23D3  3005               	movlw	5
  8725  23D4  0021               	movlb	1	; select bank1
  8726  23D5  00AC               	movwf	wait_ms@timeSec^(0+128)
  8727  23D6  3000               	movlw	0
  8728  23D7  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8729  23D8  3190  2003  31A3   	fcall	_wait_ms
  8730  23DB  3001               	movlw	1
  8731  23DC  0021               	movlb	1	; select bank1
  8732  23DD  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8733  23DE  3000               	movlw	0
  8734  23DF  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8735  23E0  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8736  23E1  3A80               	xorlw	128
  8737  23E2  00B2               	movwf	??_ring_tactiles^(0+128)
  8738  23E3  3080               	movlw	128
  8739  23E4  0232               	subwf	??_ring_tactiles^(0+128),w
  8740  23E5  1D03               	skipz
  8741  23E6  2BE9               	goto	u8515
  8742  23E7  3007               	movlw	7
  8743  23E8  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8744  23E9                     u8515:	
  8745  23E9  1C03               	skipc
  8746  23EA  2BC7               	goto	l8108
  8747  23EB                     l8116:	
  8748                           
  8749                           ;LEDs.c: 200: }
  8750                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8751  23EB  3005               	movlw	5
  8752  23EC  0021               	movlb	1	; select bank1
  8753  23ED  00B5               	movwf	ring_tactiles@iLed_1544^(0+128)
  8754  23EE  3000               	movlw	0
  8755  23EF  00B6               	movwf	(ring_tactiles@iLed_1544^(0+128)+1)
  8756  23F0                     L4:	
  8757  23F0  1BB6               	btfsc	(ring_tactiles@iLed_1544+1)^(0+128),7
  8758  23F1  0008               	return
  8759                           
  8760                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8761  23F2  0836               	movf	(ring_tactiles@iLed_1544+1)^(0+128),w
  8762  23F3  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8763  23F4  0835               	movf	ring_tactiles@iLed_1544^(0+128),w
  8764  23F5  00A0               	movwf	set_leds_bottom@x^(0+128)
  8765  23F6  31A0  2063  31A3   	fcall	_set_leds_bottom
  8766                           
  8767                           ;LEDs.c: 203: wait_ms(5);
  8768  23F9  3005               	movlw	5
  8769  23FA  0021               	movlb	1	; select bank1
  8770  23FB  00AC               	movwf	wait_ms@timeSec^(0+128)
  8771  23FC  3000               	movlw	0
  8772  23FD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8773  23FE  3190  2003  31A3   	fcall	_wait_ms
  8774  2401  30FF               	movlw	255
  8775  2402  0021               	movlb	1	; select bank1
  8776  2403  07B5               	addwf	ring_tactiles@iLed_1544^(0+128),f
  8777  2404  30FF               	movlw	255
  8778  2405  3DB6               	addwfc	(ring_tactiles@iLed_1544+1)^(0+128),f
  8779  2406  2BF0               	goto	L4
  8780  2407                     __end_of_ring_tactiles:	
  8781                           
  8782                           	psect	text12
  8783  2006                     __ptext12:	
  8784 ;; *************** function _setPedalMode *****************
  8785 ;; Defined at:
  8786 ;;		line 119 in file "tactiles.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;		None
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;		None
  8791 ;; Return value:  Size  Location     Type
  8792 ;;                  1    wreg      void 
  8793 ;; Registers used:
  8794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8804 ;;Total ram usage:        0 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    5
  8807 ;; This function calls:
  8808 ;;		_resetRingLEDs
  8809 ;;		_setExpressionDisplay
  8810 ;;		_setPresetDisplay
  8811 ;; This function is called by:
  8812 ;;		_update_mode
  8813 ;;		_setDoublePressState
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817                           
  8818                           ;psect for function _setPedalMode
  8819  2006                     _setPedalMode:	
  8820                           
  8821                           ;tactiles.c: 120: switch (mode2_state) {
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8825  2006  281C               	goto	l8316
  8826  2007                     l1025:	
  8827                           ;tactiles.c: 121: case 0:
  8828                           
  8829                           
  8830                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8831  2007  0022               	movlb	2	; select bank2
  8832  2008  108D               	bcf	13,1	;volatile
  8833                           
  8834                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8835  2009  100D               	bcf	13,0	;volatile
  8836                           
  8837                           ;tactiles.c: 124: resetRingLEDs();
  8838  200A  31AD  256A         	fcall	_resetRingLEDs
  8839                           
  8840                           ;tactiles.c: 125: break;
  8841  200C  0008               	return
  8842  200D                     l1027:	
  8843                           ;tactiles.c: 126: case 1:
  8844                           
  8845                           
  8846                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8847  200D  0022               	movlb	2	; select bank2
  8848  200E  108D               	bcf	13,1	;volatile
  8849                           
  8850                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8851  200F  140D               	bsf	13,0	;volatile
  8852                           
  8853                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8854  2010  086C               	movf	_presetChannel^(0+256),w
  8855  2011  31A0  2029         	fcall	_setPresetDisplay
  8856                           
  8857                           ;tactiles.c: 130: break;
  8858  2013  0008               	return
  8859  2014                     l1028:	
  8860                           ;tactiles.c: 131: case 2:
  8861                           
  8862                           
  8863                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8864  2014  0022               	movlb	2	; select bank2
  8865  2015  148D               	bsf	13,1	;volatile
  8866                           
  8867                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8868  2016  100D               	bcf	13,0	;volatile
  8869                           
  8870                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8871  2017  0023               	movlb	3	; select bank3
  8872  2018  0863               	movf	_expressionChannel^(0+384),w
  8873  2019  31AD  2552         	fcall	_setExpressionDisplay
  8874                           
  8875                           ;tactiles.c: 136: }
  8876                           
  8877                           ;tactiles.c: 135: break;
  8878  201B  0008               	return
  8879  201C                     l8316:	
  8880  201C  0020               	movlb	0	; select bank0
  8881  201D  085E               	movf	_mode2_state,w
  8882                           
  8883                           ; Switch size 1, requested type "space"
  8884                           ; Number of cases is 3, Range of values is 0 to 2
  8885                           ; switch strategies available:
  8886                           ; Name         Instructions Cycles
  8887                           ; simple_byte           10     6 (average)
  8888                           ; direct_byte           12     6 (fixed)
  8889                           ; jumptable            260     6 (fixed)
  8890                           ;	Chosen strategy is simple_byte
  8891  201E  3A00               	xorlw	0	; case 0
  8892  201F  1903               	skipnz
  8893  2020  2807               	goto	l1025
  8894  2021  3A01               	xorlw	1	; case 1
  8895  2022  1903               	skipnz
  8896  2023  280D               	goto	l1027
  8897  2024  3A03               	xorlw	3	; case 2
  8898  2025  1903               	skipnz
  8899  2026  2814               	goto	l1028
  8900  2027  2828               	goto	l1029
  8901  2028                     l1029:	
  8902  2028  0008               	return
  8903  2029                     __end_of_setPedalMode:	
  8904                           
  8905                           	psect	text13
  8906  2029                     __ptext13:	
  8907 ;; *************** function _setPresetDisplay *****************
  8908 ;; Defined at:
  8909 ;;		line 51 in file "preset_programming.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;  ledChannel      1    wreg     unsigned char 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      void 
  8916 ;; Registers used:
  8917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8924 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8925 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8926 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8927 ;;Total ram usage:        3 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    4
  8930 ;; This function calls:
  8931 ;;		_set_leds_bottom
  8932 ;;		_set_leds_top
  8933 ;; This function is called by:
  8934 ;;		_setPedalMode
  8935 ;;		_update_selectMode
  8936 ;;		_setDoublePressState
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           
  8941                           ;psect for function _setPresetDisplay
  8942  2029                     _setPresetDisplay:	
  8943                           
  8944                           ;incstack = 0
  8945                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8946                           ;setPresetDisplay@ledChannel stored from wreg
  8947  2029  0021               	movlb	1	; select bank1
  8948  202A  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8949                           
  8950                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8951  202B  3006               	movlw	6
  8952  202C  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8953  202D  1803               	skipnc
  8954  202E  2845               	goto	l8136
  8955                           
  8956                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8957  202F  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8958  2030  00A4               	movwf	??_setPresetDisplay^(0+128)
  8959  2031  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8960  2032  0824               	movf	??_setPresetDisplay^(0+128),w
  8961  2033  00A0               	movwf	set_leds_top@x^(0+128)
  8962  2034  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8963  2035  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8964  2036  3001               	movlw	1
  8965  2037  00A2               	movwf	set_leds_top@ledState^(0+128)
  8966  2038  3000               	movlw	0
  8967  2039  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8968  203A  31A4  24FD  31A0   	fcall	_set_leds_top
  8969                           
  8970                           ;preset_programming.c: 54: set_leds_bottom(6);
  8971  203D  3006               	movlw	6
  8972  203E  0021               	movlb	1	; select bank1
  8973  203F  00A0               	movwf	set_leds_bottom@x^(0+128)
  8974  2040  3000               	movlw	0
  8975  2041  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8976  2042  31A0  2063         	fcall	_set_leds_bottom
  8977                           
  8978                           ;preset_programming.c: 55: } else {
  8979  2044  0008               	return
  8980  2045                     l8136:	
  8981                           
  8982                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8983  2045  3006               	movlw	6
  8984  2046  0021               	movlb	1	; select bank1
  8985  2047  00A0               	movwf	set_leds_top@x^(0+128)
  8986  2048  3000               	movlw	0
  8987  2049  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8988  204A  3001               	movlw	1
  8989  204B  00A2               	movwf	set_leds_top@ledState^(0+128)
  8990  204C  3000               	movlw	0
  8991  204D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8992  204E  31A4  24FD  31A0   	fcall	_set_leds_top
  8993                           
  8994                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8995  2051  0021               	movlb	1	; select bank1
  8996  2052  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8997  2053  00A4               	movwf	??_setPresetDisplay^(0+128)
  8998  2054  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8999  2055  09A4               	comf	??_setPresetDisplay^(0+128),f
  9000  2056  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9001  2057  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9002  2058  1903               	skipnz
  9003  2059  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9004  205A  0824               	movf	??_setPresetDisplay^(0+128),w
  9005  205B  3E0B               	addlw	11
  9006  205C  00A0               	movwf	set_leds_bottom@x^(0+128)
  9007  205D  3000               	movlw	0
  9008  205E  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9009  205F  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9010  2060  31A0  2063         	fcall	_set_leds_bottom
  9011  2062  0008               	return
  9012  2063                     __end_of_setPresetDisplay:	
  9013                           
  9014                           	psect	text14
  9015  2D52                     __ptext14:	
  9016 ;; *************** function _setExpressionDisplay *****************
  9017 ;; Defined at:
  9018 ;;		line 66 in file "preset_programming.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;  ledChannel      1    wreg     unsigned char 
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      void 
  9025 ;; Registers used:
  9026 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9033 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9034 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9035 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9036 ;;Total ram usage:        3 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    4
  9039 ;; This function calls:
  9040 ;;		_set_leds_bottom
  9041 ;;		_set_leds_top
  9042 ;; This function is called by:
  9043 ;;		_setPedalMode
  9044 ;;		_update_selectMode
  9045 ;; This function uses a non-reentrant model
  9046 ;;
  9047                           
  9048                           
  9049                           ;psect for function _setExpressionDisplay
  9050  2D52                     _setExpressionDisplay:	
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9054                           ;setExpressionDisplay@ledChannel stored from wreg
  9055  2D52  0021               	movlb	1	; select bank1
  9056  2D53  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9057                           
  9058                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  9059  2D54  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9060  2D55  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9061  2D56  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9062  2D57  0824               	movf	??_setExpressionDisplay^(0+128),w
  9063  2D58  00A0               	movwf	set_leds_top@x^(0+128)
  9064  2D59  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9065  2D5A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9066  2D5B  3001               	movlw	1
  9067  2D5C  00A2               	movwf	set_leds_top@ledState^(0+128)
  9068  2D5D  3000               	movlw	0
  9069  2D5E  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9070  2D5F  31A4  24FD  31AD   	fcall	_set_leds_top
  9071                           
  9072                           ;preset_programming.c: 68: set_leds_bottom(6);
  9073  2D62  3006               	movlw	6
  9074  2D63  0021               	movlb	1	; select bank1
  9075  2D64  00A0               	movwf	set_leds_bottom@x^(0+128)
  9076  2D65  3000               	movlw	0
  9077  2D66  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9078  2D67  31A0  2063         	fcall	_set_leds_bottom
  9079  2D69  0008               	return
  9080  2D6A                     __end_of_setExpressionDisplay:	
  9081                           
  9082                           	psect	text15
  9083  2D6A                     __ptext15:	
  9084 ;; *************** function _resetRingLEDs *****************
  9085 ;; Defined at:
  9086 ;;		line 61 in file "preset_programming.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;		None
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;		None
  9091 ;; Return value:  Size  Location     Type
  9092 ;;                  1    wreg      void 
  9093 ;; Registers used:
  9094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9104 ;;Total ram usage:        0 bytes
  9105 ;; Hardware stack levels used:    1
  9106 ;; Hardware stack levels required when called:    4
  9107 ;; This function calls:
  9108 ;;		_set_leds_bottom
  9109 ;;		_set_leds_top
  9110 ;; This function is called by:
  9111 ;;		_update_mode
  9112 ;;		_setPedalMode
  9113 ;;		_setDoublePressState
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           
  9118                           ;psect for function _resetRingLEDs
  9119  2D6A                     _resetRingLEDs:	
  9120                           
  9121                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9122                           
  9123                           ;incstack = 0
  9124                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9125  2D6A  0020               	movlb	0	; select bank0
  9126  2D6B  084D               	movf	_top_push_state+1,w
  9127  2D6C  0021               	movlb	1	; select bank1
  9128  2D6D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9129  2D6E  0020               	movlb	0	; select bank0
  9130  2D6F  084C               	movf	_top_push_state,w
  9131  2D70  0021               	movlb	1	; select bank1
  9132  2D71  00A0               	movwf	set_leds_top@x^(0+128)
  9133  2D72  3001               	movlw	1
  9134  2D73  00A2               	movwf	set_leds_top@ledState^(0+128)
  9135  2D74  3000               	movlw	0
  9136  2D75  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9137  2D76  31A4  24FD  31AD   	fcall	_set_leds_top
  9138                           
  9139                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9140  2D79  0020               	movlb	0	; select bank0
  9141  2D7A  0849               	movf	_bottom_push_state+1,w
  9142  2D7B  0021               	movlb	1	; select bank1
  9143  2D7C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9144  2D7D  0020               	movlb	0	; select bank0
  9145  2D7E  0848               	movf	_bottom_push_state,w
  9146  2D7F  0021               	movlb	1	; select bank1
  9147  2D80  00A0               	movwf	set_leds_bottom@x^(0+128)
  9148  2D81  31A0  2063         	fcall	_set_leds_bottom
  9149  2D83  0008               	return
  9150  2D84                     __end_of_resetRingLEDs:	
  9151                           
  9152                           	psect	text16
  9153  0DBA                     __ptext16:	
  9154 ;; *************** function _updateModulationArray *****************
  9155 ;; Defined at:
  9156 ;;		line 44 in file "modulation.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;		None
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  thisAngle       2   57[BANK2 ] int 
  9161 ;;  iAngle          1   54[BANK2 ] unsigned char 
  9162 ;;  iAngle          1   59[BANK2 ] unsigned char 
  9163 ;;  subDiv          2   55[BANK2 ] int 
  9164 ;;  angleFactor     2   52[BANK2 ] int 
  9165 ;; Return value:  Size  Location     Type
  9166 ;;                  1    wreg      void 
  9167 ;; Registers used:
  9168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9169 ;; Tracked objects:
  9170 ;;		On entry : 0/0
  9171 ;;		On exit  : 0/0
  9172 ;;		Unchanged: 0/0
  9173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9175 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9176 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9177 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9178 ;;Total ram usage:       12 bytes
  9179 ;; Hardware stack levels used:    1
  9180 ;; Hardware stack levels required when called:    7
  9181 ;; This function calls:
  9182 ;;		___awdiv
  9183 ;;		___awtoft
  9184 ;;		___wmul
  9185 ;;		_getModulationSubdivision
  9186 ;;		_modCos
  9187 ;;		_modSaw
  9188 ;;		_modSawRev
  9189 ;;		_modSquare
  9190 ;;		_modTri
  9191 ;; This function is called by:
  9192 ;;		_main
  9193 ;; This function uses a non-reentrant model
  9194 ;;
  9195                           
  9196                           
  9197                           ;psect for function _updateModulationArray
  9198  0DBA                     _updateModulationArray:	
  9199                           
  9200                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9201                           
  9202                           ;incstack = 0
  9203                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9204  0DBA  31AF  2732  318D   	fcall	_getModulationSubdivision
  9205  0DBD  0021               	movlb	1	; select bank1
  9206  0DBE  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9207  0DBF  0022               	movlb	2	; select bank2
  9208  0DC0  00D8               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9209  0DC1  0021               	movlb	1	; select bank1
  9210  0DC2  0820               	movf	?_getModulationSubdivision^(0+128),w
  9211  0DC3  0022               	movlb	2	; select bank2
  9212  0DC4  00D7               	movwf	updateModulationArray@subDiv^(0+256)
  9213                           
  9214                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9215  0DC5  307A               	movlw	122
  9216  0DC6  0086               	movwf	6
  9217  0DC7  3024               	movlw	36
  9218  0DC8  0087               	movwf	7
  9219  0DC9  3F40               	moviw [0]fsr1
  9220  0DCA  00D0               	movwf	??_updateModulationArray^(0+256)
  9221  0DCB  3F41               	moviw [1]fsr1
  9222  0DCC  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9223  0DCD  0020               	movlb	0	; select bank0
  9224  0DCE  0849               	movf	_bottom_push_state+1,w
  9225  0DCF  0022               	movlb	2	; select bank2
  9226  0DD0  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9227  0DD1  1D03               	skipz
  9228  0DD2  2DD7               	goto	u10275
  9229  0DD3  0020               	movlb	0	; select bank0
  9230  0DD4  0848               	movf	_bottom_push_state,w
  9231  0DD5  0022               	movlb	2	; select bank2
  9232  0DD6  0650               	xorwf	??_updateModulationArray^(0+256),w
  9233  0DD7                     u10275:	
  9234  0DD7  1D03               	skipz
  9235  0DD8  2DFD               	goto	l9314
  9236  0DD9  307C               	movlw	124
  9237  0DDA  0086               	movwf	6
  9238  0DDB  3024               	movlw	36
  9239  0DDC  0087               	movwf	7
  9240  0DDD  3F40               	moviw [0]fsr1
  9241  0DDE  00D0               	movwf	??_updateModulationArray^(0+256)
  9242  0DDF  3F41               	moviw [1]fsr1
  9243  0DE0  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9244  0DE1  0023               	movlb	3	; select bank3
  9245  0DE2  085C               	movf	(_symmetry+1)^(0+384),w
  9246  0DE3  0022               	movlb	2	; select bank2
  9247  0DE4  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9248  0DE5  1D03               	skipz
  9249  0DE6  2DEB               	goto	u10285
  9250  0DE7  0023               	movlb	3	; select bank3
  9251  0DE8  085B               	movf	_symmetry^(0+384),w
  9252  0DE9  0022               	movlb	2	; select bank2
  9253  0DEA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9254  0DEB                     u10285:	
  9255  0DEB  1D03               	skipz
  9256  0DEC  2DFD               	goto	l9314
  9257  0DED  307E               	movlw	126
  9258  0DEE  0086               	movwf	6
  9259  0DEF  3024               	movlw	36
  9260  0DF0  0087               	movwf	7
  9261  0DF1  3F40               	moviw [0]fsr1
  9262  0DF2  00D0               	movwf	??_updateModulationArray^(0+256)
  9263  0DF3  3F41               	moviw [1]fsr1
  9264  0DF4  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9265  0DF5  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9266  0DF6  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9267  0DF7  1D03               	skipz
  9268  0DF8  2DFB               	goto	u10295
  9269  0DF9  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9270  0DFA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9271  0DFB                     u10295:	
  9272  0DFB  1903               	btfsc	3,2
  9273  0DFC  0008               	return
  9274  0DFD                     l9314:	
  9275                           ;modulation.c: 48: return;
  9276                           
  9277                           
  9278                           ;modulation.c: 49: }
  9279                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9280  0DFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9281  0DFE  0021               	movlb	1	; select bank1
  9282  0DFF  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9283  0E00  0022               	movlb	2	; select bank2
  9284  0E01  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9285  0E02  0021               	movlb	1	; select bank1
  9286  0E03  00A0               	movwf	___awdiv@divisor^(0+128)
  9287  0E04  3068               	movlw	104
  9288  0E05  00A2               	movwf	___awdiv@dividend^(0+128)
  9289  0E06  3001               	movlw	1
  9290  0E07  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9291  0E08  31A4  2458  318D   	fcall	___awdiv
  9292  0E0B  0021               	movlb	1	; select bank1
  9293  0E0C  0821               	movf	(?___awdiv+1)^(0+128),w
  9294  0E0D  0022               	movlb	2	; select bank2
  9295  0E0E  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9296  0E0F  0021               	movlb	1	; select bank1
  9297  0E10  0820               	movf	?___awdiv^(0+128),w
  9298  0E11  0022               	movlb	2	; select bank2
  9299  0E12  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9300                           
  9301                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9302  0E13  01DB               	clrf	updateModulationArray@iAngle^(0+256)
  9303  0E14                     l9338:	
  9304  0E14  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9305  0E15  3A80               	xorlw	128
  9306  0E16  3C80               	sublw	128
  9307  0E17  1D03               	skipz
  9308  0E18  2E1B               	goto	u10305
  9309  0E19  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9310  0E1A  025B               	subwf	updateModulationArray@iAngle^(0+256),w
  9311  0E1B                     u10305:	
  9312  0E1B  1803               	btfsc	3,0
  9313  0E1C  2FC1               	goto	l9340
  9314                           
  9315                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9316  0E1D  0022               	movlb	2	; select bank2
  9317  0E1E  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9318  0E1F  00D0               	movwf	??_updateModulationArray^(0+256)
  9319  0E20  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9320  0E21  0850               	movf	??_updateModulationArray^(0+256),w
  9321  0E22  00AE               	movwf	___wmul@multiplier^(0+256)
  9322  0E23  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9323  0E24  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9324  0E25  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9325  0E26  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9326  0E27  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9327  0E28  00B0               	movwf	___wmul@multiplicand^(0+256)
  9328  0E29  31AD  25B8  318D   	fcall	___wmul
  9329  0E2C  0022               	movlb	2	; select bank2
  9330  0E2D  082F               	movf	(?___wmul+1)^(0+256),w
  9331  0E2E  00DA               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9332  0E2F  082E               	movf	?___wmul^(0+256),w
  9333  0E30  00D9               	movwf	updateModulationArray@thisAngle^(0+256)
  9334                           
  9335                           ;modulation.c: 54: switch (bottom_push_state) {
  9336  0E31  2FA4               	goto	l9334
  9337  0E32                     l9320:	
  9338                           ;modulation.c: 55: case 1:
  9339                           
  9340                           
  9341                           ;modulation.c: 56: modArray[iAngle] = modCos(thisAngle, symmetry);
  9342  0E32  0022               	movlb	2	; select bank2
  9343  0E33  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9344  0E34  0021               	movlb	1	; select bank1
  9345  0E35  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9346  0E36  0022               	movlb	2	; select bank2
  9347  0E37  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9348  0E38  0021               	movlb	1	; select bank1
  9349  0E39  00A8               	movwf	___awtoft@c^(0+128)
  9350  0E3A  31AE  262D  318D   	fcall	___awtoft
  9351  0E3D  0021               	movlb	1	; select bank1
  9352  0E3E  0828               	movf	?___awtoft^(0+128),w
  9353  0E3F  0022               	movlb	2	; select bank2
  9354  0E40  00B4               	movwf	modCos@angle^(0+256)
  9355  0E41  0021               	movlb	1	; select bank1
  9356  0E42  0829               	movf	(?___awtoft+1)^(0+128),w
  9357  0E43  0022               	movlb	2	; select bank2
  9358  0E44  00B5               	movwf	(modCos@angle+1)^(0+256)
  9359  0E45  0021               	movlb	1	; select bank1
  9360  0E46  082A               	movf	(?___awtoft+2)^(0+128),w
  9361  0E47  0022               	movlb	2	; select bank2
  9362  0E48  00B6               	movwf	(modCos@angle+2)^(0+256)
  9363  0E49  0023               	movlb	3	; select bank3
  9364  0E4A  085C               	movf	(_symmetry+1)^(0+384),w
  9365  0E4B  0021               	movlb	1	; select bank1
  9366  0E4C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9367  0E4D  0023               	movlb	3	; select bank3
  9368  0E4E  085B               	movf	_symmetry^(0+384),w
  9369  0E4F  0021               	movlb	1	; select bank1
  9370  0E50  00A8               	movwf	___awtoft@c^(0+128)
  9371  0E51  31AE  262D  318D   	fcall	___awtoft
  9372  0E54  0021               	movlb	1	; select bank1
  9373  0E55  0828               	movf	?___awtoft^(0+128),w
  9374  0E56  0022               	movlb	2	; select bank2
  9375  0E57  00B7               	movwf	modCos@inflection^(0+256)
  9376  0E58  0021               	movlb	1	; select bank1
  9377  0E59  0829               	movf	(?___awtoft+1)^(0+128),w
  9378  0E5A  0022               	movlb	2	; select bank2
  9379  0E5B  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9380  0E5C  0021               	movlb	1	; select bank1
  9381  0E5D  082A               	movf	(?___awtoft+2)^(0+128),w
  9382  0E5E  0022               	movlb	2	; select bank2
  9383  0E5F  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9384  0E60  3196  2654  318D   	fcall	_modCos
  9385  0E63  0022               	movlb	2	; select bank2
  9386  0E64  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9387  0E65  00D0               	movwf	??_updateModulationArray^(0+256)
  9388  0E66  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9389  0E67  35D0               	lslf	??_updateModulationArray^(0+256),f
  9390  0E68  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9391  0E69  308A               	movlw	138
  9392  0E6A  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9393  0E6B  3023               	movlw	35
  9394  0E6C  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9395  0E6D  0850               	movf	??_updateModulationArray^(0+256),w
  9396  0E6E  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9397  0E6F  0086               	movwf	6
  9398  0E70  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9399  0E71  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9400  0E72  0087               	movwf	7
  9401  0E73  0834               	movf	?_modCos^(0+256),w
  9402  0E74  3FC0               	movwi [0]fsr1
  9403  0E75  0835               	movf	(?_modCos+1)^(0+256),w
  9404  0E76  3FC1               	movwi [1]fsr1
  9405                           
  9406                           ;modulation.c: 57: break;
  9407  0E77  2FBB               	goto	l9336
  9408  0E78                     l9322:	
  9409                           ;modulation.c: 58: case 2:
  9410                           
  9411                           
  9412                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9413  0E78  0022               	movlb	2	; select bank2
  9414  0E79  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9415  0E7A  0021               	movlb	1	; select bank1
  9416  0E7B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9417  0E7C  0022               	movlb	2	; select bank2
  9418  0E7D  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9419  0E7E  0021               	movlb	1	; select bank1
  9420  0E7F  00A8               	movwf	___awtoft@c^(0+128)
  9421  0E80  31AE  262D  318D   	fcall	___awtoft
  9422  0E83  0021               	movlb	1	; select bank1
  9423  0E84  0828               	movf	?___awtoft^(0+128),w
  9424  0E85  0022               	movlb	2	; select bank2
  9425  0E86  00AE               	movwf	modTri@angle^(0+256)
  9426  0E87  0021               	movlb	1	; select bank1
  9427  0E88  0829               	movf	(?___awtoft+1)^(0+128),w
  9428  0E89  0022               	movlb	2	; select bank2
  9429  0E8A  00AF               	movwf	(modTri@angle+1)^(0+256)
  9430  0E8B  0021               	movlb	1	; select bank1
  9431  0E8C  082A               	movf	(?___awtoft+2)^(0+128),w
  9432  0E8D  0022               	movlb	2	; select bank2
  9433  0E8E  00B0               	movwf	(modTri@angle+2)^(0+256)
  9434  0E8F  0023               	movlb	3	; select bank3
  9435  0E90  085C               	movf	(_symmetry+1)^(0+384),w
  9436  0E91  0021               	movlb	1	; select bank1
  9437  0E92  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9438  0E93  0023               	movlb	3	; select bank3
  9439  0E94  085B               	movf	_symmetry^(0+384),w
  9440  0E95  0021               	movlb	1	; select bank1
  9441  0E96  00A8               	movwf	___awtoft@c^(0+128)
  9442  0E97  31AE  262D  318D   	fcall	___awtoft
  9443  0E9A  0021               	movlb	1	; select bank1
  9444  0E9B  0828               	movf	?___awtoft^(0+128),w
  9445  0E9C  0022               	movlb	2	; select bank2
  9446  0E9D  00B1               	movwf	modTri@inflection^(0+256)
  9447  0E9E  0021               	movlb	1	; select bank1
  9448  0E9F  0829               	movf	(?___awtoft+1)^(0+128),w
  9449  0EA0  0022               	movlb	2	; select bank2
  9450  0EA1  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9451  0EA2  0021               	movlb	1	; select bank1
  9452  0EA3  082A               	movf	(?___awtoft+2)^(0+128),w
  9453  0EA4  0022               	movlb	2	; select bank2
  9454  0EA5  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9455  0EA6  3189  21EF  318D   	fcall	_modTri
  9456  0EA9  0022               	movlb	2	; select bank2
  9457  0EAA  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9458  0EAB  00D0               	movwf	??_updateModulationArray^(0+256)
  9459  0EAC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9460  0EAD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9461  0EAE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9462  0EAF  308A               	movlw	138
  9463  0EB0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9464  0EB1  3023               	movlw	35
  9465  0EB2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9466  0EB3  0850               	movf	??_updateModulationArray^(0+256),w
  9467  0EB4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9468  0EB5  0086               	movwf	6
  9469  0EB6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9470  0EB7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9471  0EB8  0087               	movwf	7
  9472  0EB9  082E               	movf	?_modTri^(0+256),w
  9473  0EBA  3FC0               	movwi [0]fsr1
  9474  0EBB  082F               	movf	(?_modTri+1)^(0+256),w
  9475  0EBC  3FC1               	movwi [1]fsr1
  9476                           
  9477                           ;modulation.c: 60: break;
  9478  0EBD  2FBB               	goto	l9336
  9479  0EBE                     l9324:	
  9480                           ;modulation.c: 61: case 3:
  9481                           
  9482                           
  9483                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9484  0EBE  0022               	movlb	2	; select bank2
  9485  0EBF  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9486  0EC0  0021               	movlb	1	; select bank1
  9487  0EC1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9488  0EC2  0022               	movlb	2	; select bank2
  9489  0EC3  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9490  0EC4  0021               	movlb	1	; select bank1
  9491  0EC5  00A8               	movwf	___awtoft@c^(0+128)
  9492  0EC6  31AE  262D  318D   	fcall	___awtoft
  9493  0EC9  0021               	movlb	1	; select bank1
  9494  0ECA  0828               	movf	?___awtoft^(0+128),w
  9495  0ECB  0022               	movlb	2	; select bank2
  9496  0ECC  00C8               	movwf	modSquare@angle^(0+256)
  9497  0ECD  0021               	movlb	1	; select bank1
  9498  0ECE  0829               	movf	(?___awtoft+1)^(0+128),w
  9499  0ECF  0022               	movlb	2	; select bank2
  9500  0ED0  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9501  0ED1  0021               	movlb	1	; select bank1
  9502  0ED2  082A               	movf	(?___awtoft+2)^(0+128),w
  9503  0ED3  0022               	movlb	2	; select bank2
  9504  0ED4  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9505  0ED5  0023               	movlb	3	; select bank3
  9506  0ED6  085C               	movf	(_symmetry+1)^(0+384),w
  9507  0ED7  0021               	movlb	1	; select bank1
  9508  0ED8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9509  0ED9  0023               	movlb	3	; select bank3
  9510  0EDA  085B               	movf	_symmetry^(0+384),w
  9511  0EDB  0021               	movlb	1	; select bank1
  9512  0EDC  00A8               	movwf	___awtoft@c^(0+128)
  9513  0EDD  31AE  262D  318D   	fcall	___awtoft
  9514  0EE0  0021               	movlb	1	; select bank1
  9515  0EE1  0828               	movf	?___awtoft^(0+128),w
  9516  0EE2  0022               	movlb	2	; select bank2
  9517  0EE3  00CB               	movwf	modSquare@inflection^(0+256)
  9518  0EE4  0021               	movlb	1	; select bank1
  9519  0EE5  0829               	movf	(?___awtoft+1)^(0+128),w
  9520  0EE6  0022               	movlb	2	; select bank2
  9521  0EE7  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9522  0EE8  0021               	movlb	1	; select bank1
  9523  0EE9  082A               	movf	(?___awtoft+2)^(0+128),w
  9524  0EEA  0022               	movlb	2	; select bank2
  9525  0EEB  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9526  0EEC  31A1  2117  318D   	fcall	_modSquare
  9527  0EEF  0022               	movlb	2	; select bank2
  9528  0EF0  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9529  0EF1  00D0               	movwf	??_updateModulationArray^(0+256)
  9530  0EF2  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9531  0EF3  35D0               	lslf	??_updateModulationArray^(0+256),f
  9532  0EF4  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9533  0EF5  308A               	movlw	138
  9534  0EF6  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9535  0EF7  3023               	movlw	35
  9536  0EF8  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9537  0EF9  0850               	movf	??_updateModulationArray^(0+256),w
  9538  0EFA  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9539  0EFB  0086               	movwf	6
  9540  0EFC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9541  0EFD  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9542  0EFE  0087               	movwf	7
  9543  0EFF  0848               	movf	?_modSquare^(0+256),w
  9544  0F00  3FC0               	movwi [0]fsr1
  9545  0F01  0849               	movf	(?_modSquare+1)^(0+256),w
  9546  0F02  3FC1               	movwi [1]fsr1
  9547                           
  9548                           ;modulation.c: 63: break;
  9549  0F03  2FBB               	goto	l9336
  9550  0F04                     l9326:	
  9551                           ;modulation.c: 64: case 4:
  9552                           
  9553                           
  9554                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9555  0F04  0022               	movlb	2	; select bank2
  9556  0F05  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9557  0F06  0021               	movlb	1	; select bank1
  9558  0F07  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9559  0F08  0022               	movlb	2	; select bank2
  9560  0F09  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9561  0F0A  0021               	movlb	1	; select bank1
  9562  0F0B  00A8               	movwf	___awtoft@c^(0+128)
  9563  0F0C  31AE  262D  318D   	fcall	___awtoft
  9564  0F0F  0021               	movlb	1	; select bank1
  9565  0F10  0828               	movf	?___awtoft^(0+128),w
  9566  0F11  0022               	movlb	2	; select bank2
  9567  0F12  00C2               	movwf	modSawRev@angle^(0+256)
  9568  0F13  0021               	movlb	1	; select bank1
  9569  0F14  0829               	movf	(?___awtoft+1)^(0+128),w
  9570  0F15  0022               	movlb	2	; select bank2
  9571  0F16  00C3               	movwf	(modSawRev@angle+1)^(0+256)
  9572  0F17  0021               	movlb	1	; select bank1
  9573  0F18  082A               	movf	(?___awtoft+2)^(0+128),w
  9574  0F19  0022               	movlb	2	; select bank2
  9575  0F1A  00C4               	movwf	(modSawRev@angle+2)^(0+256)
  9576  0F1B  0023               	movlb	3	; select bank3
  9577  0F1C  085C               	movf	(_symmetry+1)^(0+384),w
  9578  0F1D  0021               	movlb	1	; select bank1
  9579  0F1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9580  0F1F  0023               	movlb	3	; select bank3
  9581  0F20  085B               	movf	_symmetry^(0+384),w
  9582  0F21  0021               	movlb	1	; select bank1
  9583  0F22  00A8               	movwf	___awtoft@c^(0+128)
  9584  0F23  31AE  262D  318D   	fcall	___awtoft
  9585  0F26  0021               	movlb	1	; select bank1
  9586  0F27  0828               	movf	?___awtoft^(0+128),w
  9587  0F28  0022               	movlb	2	; select bank2
  9588  0F29  00C5               	movwf	modSawRev@inflection^(0+256)
  9589  0F2A  0021               	movlb	1	; select bank1
  9590  0F2B  0829               	movf	(?___awtoft+1)^(0+128),w
  9591  0F2C  0022               	movlb	2	; select bank2
  9592  0F2D  00C6               	movwf	(modSawRev@inflection+1)^(0+256)
  9593  0F2E  0021               	movlb	1	; select bank1
  9594  0F2F  082A               	movf	(?___awtoft+2)^(0+128),w
  9595  0F30  0022               	movlb	2	; select bank2
  9596  0F31  00C7               	movwf	(modSawRev@inflection+2)^(0+256)
  9597  0F32  31AD  25F0  318D   	fcall	_modSawRev
  9598  0F35  0022               	movlb	2	; select bank2
  9599  0F36  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9600  0F37  00D0               	movwf	??_updateModulationArray^(0+256)
  9601  0F38  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9602  0F39  35D0               	lslf	??_updateModulationArray^(0+256),f
  9603  0F3A  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9604  0F3B  308A               	movlw	138
  9605  0F3C  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9606  0F3D  3023               	movlw	35
  9607  0F3E  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9608  0F3F  0850               	movf	??_updateModulationArray^(0+256),w
  9609  0F40  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9610  0F41  0086               	movwf	6
  9611  0F42  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9612  0F43  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9613  0F44  0087               	movwf	7
  9614  0F45  0842               	movf	?_modSawRev^(0+256),w
  9615  0F46  3FC0               	movwi [0]fsr1
  9616  0F47  0843               	movf	(?_modSawRev+1)^(0+256),w
  9617  0F48  3FC1               	movwi [1]fsr1
  9618                           
  9619                           ;modulation.c: 66: break;
  9620  0F49  2FBB               	goto	l9336
  9621  0F4A                     l9328:	
  9622                           ;modulation.c: 67: case 5:
  9623                           
  9624                           
  9625                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9626  0F4A  0022               	movlb	2	; select bank2
  9627  0F4B  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9628  0F4C  0021               	movlb	1	; select bank1
  9629  0F4D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9630  0F4E  0022               	movlb	2	; select bank2
  9631  0F4F  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9632  0F50  0021               	movlb	1	; select bank1
  9633  0F51  00A8               	movwf	___awtoft@c^(0+128)
  9634  0F52  31AE  262D  318D   	fcall	___awtoft
  9635  0F55  0021               	movlb	1	; select bank1
  9636  0F56  0828               	movf	?___awtoft^(0+128),w
  9637  0F57  0022               	movlb	2	; select bank2
  9638  0F58  00AE               	movwf	modSaw@angle^(0+256)
  9639  0F59  0021               	movlb	1	; select bank1
  9640  0F5A  0829               	movf	(?___awtoft+1)^(0+128),w
  9641  0F5B  0022               	movlb	2	; select bank2
  9642  0F5C  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9643  0F5D  0021               	movlb	1	; select bank1
  9644  0F5E  082A               	movf	(?___awtoft+2)^(0+128),w
  9645  0F5F  0022               	movlb	2	; select bank2
  9646  0F60  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9647  0F61  0023               	movlb	3	; select bank3
  9648  0F62  085C               	movf	(_symmetry+1)^(0+384),w
  9649  0F63  0021               	movlb	1	; select bank1
  9650  0F64  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9651  0F65  0023               	movlb	3	; select bank3
  9652  0F66  085B               	movf	_symmetry^(0+384),w
  9653  0F67  0021               	movlb	1	; select bank1
  9654  0F68  00A8               	movwf	___awtoft@c^(0+128)
  9655  0F69  31AE  262D  318D   	fcall	___awtoft
  9656  0F6C  0021               	movlb	1	; select bank1
  9657  0F6D  0828               	movf	?___awtoft^(0+128),w
  9658  0F6E  0022               	movlb	2	; select bank2
  9659  0F6F  00B1               	movwf	modSaw@inflection^(0+256)
  9660  0F70  0021               	movlb	1	; select bank1
  9661  0F71  0829               	movf	(?___awtoft+1)^(0+128),w
  9662  0F72  0022               	movlb	2	; select bank2
  9663  0F73  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9664  0F74  0021               	movlb	1	; select bank1
  9665  0F75  082A               	movf	(?___awtoft+2)^(0+128),w
  9666  0F76  0022               	movlb	2	; select bank2
  9667  0F77  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9668  0F78  3194  24BC  318D   	fcall	_modSaw
  9669  0F7B  0022               	movlb	2	; select bank2
  9670  0F7C  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9671  0F7D  00D0               	movwf	??_updateModulationArray^(0+256)
  9672  0F7E  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9673  0F7F  35D0               	lslf	??_updateModulationArray^(0+256),f
  9674  0F80  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9675  0F81  308A               	movlw	138
  9676  0F82  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9677  0F83  3023               	movlw	35
  9678  0F84  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9679  0F85  0850               	movf	??_updateModulationArray^(0+256),w
  9680  0F86  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9681  0F87  0086               	movwf	6
  9682  0F88  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9683  0F89  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9684  0F8A  0087               	movwf	7
  9685  0F8B  082E               	movf	?_modSaw^(0+256),w
  9686  0F8C  3FC0               	movwi [0]fsr1
  9687  0F8D  082F               	movf	(?_modSaw+1)^(0+256),w
  9688  0F8E  3FC1               	movwi [1]fsr1
  9689                           
  9690                           ;modulation.c: 69: break;
  9691  0F8F  2FBB               	goto	l9336
  9692  0F90                     l9330:	
  9693                           ;modulation.c: 70: default:
  9694                           
  9695                           
  9696                           ;modulation.c: 71: modArray[iAngle] = 0;
  9697  0F90  0022               	movlb	2	; select bank2
  9698  0F91  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9699  0F92  00D0               	movwf	??_updateModulationArray^(0+256)
  9700  0F93  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9701  0F94  35D0               	lslf	??_updateModulationArray^(0+256),f
  9702  0F95  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9703  0F96  308A               	movlw	138
  9704  0F97  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9705  0F98  3023               	movlw	35
  9706  0F99  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9707  0F9A  0850               	movf	??_updateModulationArray^(0+256),w
  9708  0F9B  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9709  0F9C  0086               	movwf	6
  9710  0F9D  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9711  0F9E  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9712  0F9F  0087               	movwf	7
  9713  0FA0  3000               	movlw	0
  9714  0FA1  3FC0               	movwi [0]fsr1
  9715  0FA2  3FC1               	movwi [1]fsr1
  9716                           
  9717                           ;modulation.c: 73: }
  9718                           
  9719                           ;modulation.c: 72: break;
  9720  0FA3  2FBB               	goto	l9336
  9721  0FA4                     l9334:	
  9722                           
  9723                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9724                           ; Switch size 1, requested type "space"
  9725                           ; Number of cases is 1, Range of values is 0 to 0
  9726                           ; switch strategies available:
  9727                           ; Name         Instructions Cycles
  9728                           ; simple_byte            4     3 (average)
  9729                           ; direct_byte            8     6 (fixed)
  9730                           ; jumptable            260     6 (fixed)
  9731                           ;	Chosen strategy is simple_byte
  9732  0FA4  0020               	movlb	0	; select bank0
  9733  0FA5  0849               	movf	_bottom_push_state+1,w
  9734  0FA6  3A00               	xorlw	0	; case 0
  9735  0FA7  1903               	skipnz
  9736  0FA8  2FAA               	goto	l9950
  9737  0FA9  2F90               	goto	l9330
  9738  0FAA                     l9950:	
  9739                           
  9740                           ; Switch size 1, requested type "space"
  9741                           ; Number of cases is 5, Range of values is 1 to 5
  9742                           ; switch strategies available:
  9743                           ; Name         Instructions Cycles
  9744                           ; simple_byte           16     9 (average)
  9745                           ; direct_byte           19     9 (fixed)
  9746                           ; jumptable            263     9 (fixed)
  9747                           ;	Chosen strategy is simple_byte
  9748  0FAA  0848               	movf	_bottom_push_state,w
  9749  0FAB  3A01               	xorlw	1	; case 1
  9750  0FAC  1903               	skipnz
  9751  0FAD  2E32               	goto	l9320
  9752  0FAE  3A03               	xorlw	3	; case 2
  9753  0FAF  1903               	skipnz
  9754  0FB0  2E78               	goto	l9322
  9755  0FB1  3A01               	xorlw	1	; case 3
  9756  0FB2  1903               	skipnz
  9757  0FB3  2EBE               	goto	l9324
  9758  0FB4  3A07               	xorlw	7	; case 4
  9759  0FB5  1903               	skipnz
  9760  0FB6  2F04               	goto	l9326
  9761  0FB7  3A01               	xorlw	1	; case 5
  9762  0FB8  1903               	skipnz
  9763  0FB9  2F4A               	goto	l9328
  9764  0FBA  2F90               	goto	l9330
  9765  0FBB                     l9336:	
  9766  0FBB  3001               	movlw	1
  9767  0FBC  0022               	movlb	2	; select bank2
  9768  0FBD  00D0               	movwf	??_updateModulationArray^(0+256)
  9769  0FBE  0850               	movf	??_updateModulationArray^(0+256),w
  9770  0FBF  07DB               	addwf	updateModulationArray@iAngle^(0+256),f
  9771  0FC0  2E14               	goto	l9338
  9772  0FC1                     l9340:	
  9773                           
  9774                           ;modulation.c: 74: }
  9775                           ;modulation.c: 75: for (char iAngle = subDiv; iAngle < 120; iAngle++) {
  9776  0FC1  0022               	movlb	2	; select bank2
  9777  0FC2  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9778  0FC3  00D0               	movwf	??_updateModulationArray^(0+256)
  9779  0FC4  0850               	movf	??_updateModulationArray^(0+256),w
  9780  0FC5  00D6               	movwf	updateModulationArray@iAngle_2353^(0+256)
  9781  0FC6  3078               	movlw	120
  9782  0FC7  0256               	subwf	updateModulationArray@iAngle_2353^(0+256),w
  9783  0FC8  1803               	btfsc	3,0
  9784  0FC9  2FE4               	goto	l9350
  9785  0FCA                     l9344:	
  9786                           
  9787                           ;modulation.c: 76: modArray[iAngle] = 0 ;
  9788  0FCA  0856               	movf	updateModulationArray@iAngle_2353^(0+256),w
  9789  0FCB  00D0               	movwf	??_updateModulationArray^(0+256)
  9790  0FCC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9791  0FCD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9792  0FCE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9793  0FCF  308A               	movlw	138
  9794  0FD0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9795  0FD1  3023               	movlw	35
  9796  0FD2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9797  0FD3  0850               	movf	??_updateModulationArray^(0+256),w
  9798  0FD4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9799  0FD5  0086               	movwf	6
  9800  0FD6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9801  0FD7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9802  0FD8  0087               	movwf	7
  9803  0FD9  3000               	movlw	0
  9804  0FDA  3FC0               	movwi [0]fsr1
  9805  0FDB  3FC1               	movwi [1]fsr1
  9806  0FDC  3001               	movlw	1
  9807  0FDD  00D0               	movwf	??_updateModulationArray^(0+256)
  9808  0FDE  0850               	movf	??_updateModulationArray^(0+256),w
  9809  0FDF  07D6               	addwf	updateModulationArray@iAngle_2353^(0+256),f
  9810  0FE0  3078               	movlw	120
  9811  0FE1  0256               	subwf	updateModulationArray@iAngle_2353^(0+256),w
  9812  0FE2  1C03               	skipc
  9813  0FE3  2FCA               	goto	l9344
  9814  0FE4                     l9350:	
  9815                           
  9816                           ;modulation.c: 77: }
  9817                           ;modulation.c: 78: modArray[120] = bottom_push_state;
  9818  0FE4  307A               	movlw	122
  9819  0FE5  0086               	movwf	6
  9820  0FE6  3024               	movlw	36
  9821  0FE7  0087               	movwf	7
  9822  0FE8  0020               	movlb	0	; select bank0
  9823  0FE9  0848               	movf	_bottom_push_state,w
  9824  0FEA  3FC0               	movwi [0]fsr1
  9825  0FEB  0849               	movf	_bottom_push_state+1,w
  9826  0FEC  3FC1               	movwi [1]fsr1
  9827                           
  9828                           ;modulation.c: 79: modArray[121] = symmetry;
  9829  0FED  307C               	movlw	124
  9830  0FEE  0086               	movwf	6
  9831  0FEF  3024               	movlw	36
  9832  0FF0  0087               	movwf	7
  9833  0FF1  0023               	movlb	3	; select bank3
  9834  0FF2  085B               	movf	_symmetry^(0+384),w
  9835  0FF3  3FC0               	movwi [0]fsr1
  9836  0FF4  085C               	movf	(_symmetry+1)^(0+384),w
  9837  0FF5  3FC1               	movwi [1]fsr1
  9838                           
  9839                           ;modulation.c: 80: modArray[122] = subDiv;
  9840  0FF6  307E               	movlw	126
  9841  0FF7  0086               	movwf	6
  9842  0FF8  3024               	movlw	36
  9843  0FF9  0087               	movwf	7
  9844  0FFA  0022               	movlb	2	; select bank2
  9845  0FFB  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9846  0FFC  3FC0               	movwi [0]fsr1
  9847  0FFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9848  0FFE  3FC1               	movwi [1]fsr1
  9849  0FFF  0008               	return
  9850  1000                     __end_of_updateModulationArray:	
  9851                           
  9852                           	psect	text17
  9853  09EF                     __ptext17:	
  9854 ;; *************** function _modTri *****************
  9855 ;; Defined at:
  9856 ;;		line 100 in file "modulation.c"
  9857 ;; Parameters:    Size  Location     Type
  9858 ;;  angle           3   14[BANK2 ] void 
  9859 ;;  inflection      3   17[BANK2 ] void 
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;  tmpVal          3   29[BANK2 ] void 
  9862 ;;  period          3   26[BANK2 ] void 
  9863 ;;  shift           3   23[BANK2 ] void 
  9864 ;; Return value:  Size  Location     Type
  9865 ;;                  2   14[BANK2 ] int 
  9866 ;; Registers used:
  9867 ;;		wreg, status,2, status,0, pclath, cstack
  9868 ;; Tracked objects:
  9869 ;;		On entry : 0/0
  9870 ;;		On exit  : 0/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9873 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9874 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9876 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9877 ;;Total ram usage:       18 bytes
  9878 ;; Hardware stack levels used:    1
  9879 ;; Hardware stack levels required when called:    5
  9880 ;; This function calls:
  9881 ;;		___ftadd
  9882 ;;		___ftdiv
  9883 ;;		___ftge
  9884 ;;		___ftmul
  9885 ;;		___ftneg
  9886 ;;		___fttol
  9887 ;; This function is called by:
  9888 ;;		_updateModulationArray
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           
  9893                           ;psect for function _modTri
  9894  09EF                     _modTri:	
  9895                           
  9896                           ;modulation.c: 101: double period = 1.0;
  9897                           
  9898                           ;incstack = 0
  9899                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9900  09EF  3000               	movlw	0
  9901  09F0  0022               	movlb	2	; select bank2
  9902  09F1  00BA               	movwf	modTri@period^(0+256)
  9903  09F2  3080               	movlw	128
  9904  09F3  00BB               	movwf	(modTri@period+1)^(0+256)
  9905  09F4  303F               	movlw	63
  9906  09F5  00BC               	movwf	(modTri@period+2)^(0+256)
  9907                           
  9908                           ;modulation.c: 102: double shift = 0;
  9909  09F6  3000               	movlw	0
  9910  09F7  00B7               	movwf	modTri@shift^(0+256)
  9911  09F8  3000               	movlw	0
  9912  09F9  00B8               	movwf	(modTri@shift+1)^(0+256)
  9913  09FA  3000               	movlw	0
  9914  09FB  00B9               	movwf	(modTri@shift+2)^(0+256)
  9915                           
  9916                           ;modulation.c: 104: if(angle<=inflection) {
  9917  09FC  0831               	movf	modTri@inflection^(0+256),w
  9918  09FD  0021               	movlb	1	; select bank1
  9919  09FE  00A0               	movwf	___ftge@ff1^(0+128)
  9920  09FF  0022               	movlb	2	; select bank2
  9921  0A00  0832               	movf	(modTri@inflection+1)^(0+256),w
  9922  0A01  0021               	movlb	1	; select bank1
  9923  0A02  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9924  0A03  0022               	movlb	2	; select bank2
  9925  0A04  0833               	movf	(modTri@inflection+2)^(0+256),w
  9926  0A05  0021               	movlb	1	; select bank1
  9927  0A06  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9928  0A07  0022               	movlb	2	; select bank2
  9929  0A08  082E               	movf	modTri@angle^(0+256),w
  9930  0A09  0021               	movlb	1	; select bank1
  9931  0A0A  00A3               	movwf	___ftge@ff2^(0+128)
  9932  0A0B  0022               	movlb	2	; select bank2
  9933  0A0C  082F               	movf	(modTri@angle+1)^(0+256),w
  9934  0A0D  0021               	movlb	1	; select bank1
  9935  0A0E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9936  0A0F  0022               	movlb	2	; select bank2
  9937  0A10  0830               	movf	(modTri@angle+2)^(0+256),w
  9938  0A11  0021               	movlb	1	; select bank1
  9939  0A12  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9940  0A13  31A0  209E  3189   	fcall	___ftge
  9941  0A16  1C03               	btfss	3,0
  9942  0A17  2A24               	goto	l8670
  9943                           
  9944                           ;modulation.c: 105: period = 180.0/inflection;
  9945  0A18  0022               	movlb	2	; select bank2
  9946  0A19  0831               	movf	modTri@inflection^(0+256),w
  9947  0A1A  0021               	movlb	1	; select bank1
  9948  0A1B  00CE               	movwf	___ftdiv@f2^(0+128)
  9949  0A1C  0022               	movlb	2	; select bank2
  9950  0A1D  0832               	movf	(modTri@inflection+1)^(0+256),w
  9951  0A1E  0021               	movlb	1	; select bank1
  9952  0A1F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9953  0A20  0022               	movlb	2	; select bank2
  9954  0A21  0833               	movf	(modTri@inflection+2)^(0+256),w
  9955  0A22  0021               	movlb	1	; select bank1
  9956  0A23  2ADF               	goto	L5
  9957  0A24                     l8670:	
  9958                           ;modulation.c: 106: } else {
  9959                           
  9960                           
  9961                           ;modulation.c: 107: shift = -(360-inflection*2)*(180/(360-inflection));
  9962  0A24  0022               	movlb	2	; select bank2
  9963  0A25  0831               	movf	modTri@inflection^(0+256),w
  9964  0A26  0021               	movlb	1	; select bank1
  9965  0A27  00B1               	movwf	___ftmul@f2^(0+128)
  9966  0A28  0022               	movlb	2	; select bank2
  9967  0A29  0832               	movf	(modTri@inflection+1)^(0+256),w
  9968  0A2A  0021               	movlb	1	; select bank1
  9969  0A2B  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9970  0A2C  0022               	movlb	2	; select bank2
  9971  0A2D  0833               	movf	(modTri@inflection+2)^(0+256),w
  9972  0A2E  0021               	movlb	1	; select bank1
  9973  0A2F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9974  0A30  3000               	movlw	0
  9975  0A31  00AE               	movwf	___ftmul@f1^(0+128)
  9976  0A32  3000               	movlw	0
  9977  0A33  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9978  0A34  3040               	movlw	64
  9979  0A35  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9980  0A36  319D  25B0  3189   	fcall	___ftmul
  9981  0A39  0021               	movlb	1	; select bank1
  9982  0A3A  082E               	movf	?___ftmul^(0+128),w
  9983  0A3B  00BE               	movwf	___ftneg@f1^(0+128)
  9984  0A3C  082F               	movf	(?___ftmul+1)^(0+128),w
  9985  0A3D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9986  0A3E  0830               	movf	(?___ftmul+2)^(0+128),w
  9987  0A3F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9988  0A40  31AC  24DF  3189   	fcall	___ftneg
  9989  0A43  0021               	movlb	1	; select bank1
  9990  0A44  083E               	movf	?___ftneg^(0+128),w
  9991  0A45  00C4               	movwf	___ftadd@f2^(0+128)
  9992  0A46  083F               	movf	(?___ftneg+1)^(0+128),w
  9993  0A47  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9994  0A48  0840               	movf	(?___ftneg+2)^(0+128),w
  9995  0A49  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9996  0A4A  3000               	movlw	0
  9997  0A4B  00C1               	movwf	___ftadd@f1^(0+128)
  9998  0A4C  30B4               	movlw	180
  9999  0A4D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10000  0A4E  3043               	movlw	67
 10001  0A4F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10002  0A50  3190  2035  3189   	fcall	___ftadd
 10003  0A53  0021               	movlb	1	; select bank1
 10004  0A54  0841               	movf	?___ftadd^(0+128),w
 10005  0A55  0022               	movlb	2	; select bank2
 10006  0A56  00B4               	movwf	_modTri$2869^(0+256)
 10007  0A57  0021               	movlb	1	; select bank1
 10008  0A58  0842               	movf	(?___ftadd+1)^(0+128),w
 10009  0A59  0022               	movlb	2	; select bank2
 10010  0A5A  00B5               	movwf	(_modTri$2869+1)^(0+256)
 10011  0A5B  0021               	movlb	1	; select bank1
 10012  0A5C  0843               	movf	(?___ftadd+2)^(0+128),w
 10013  0A5D  0022               	movlb	2	; select bank2
 10014  0A5E  00B6               	movwf	(_modTri$2869+2)^(0+256)
 10015                           
 10016                           ;modulation.c: 107: shift = -(360-inflection*2)*(180/(360-inflection));
 10017  0A5F  0834               	movf	_modTri$2869^(0+256),w
 10018  0A60  0021               	movlb	1	; select bank1
 10019  0A61  00BE               	movwf	___ftneg@f1^(0+128)
 10020  0A62  0022               	movlb	2	; select bank2
 10021  0A63  0835               	movf	(_modTri$2869+1)^(0+256),w
 10022  0A64  0021               	movlb	1	; select bank1
 10023  0A65  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10024  0A66  0022               	movlb	2	; select bank2
 10025  0A67  0836               	movf	(_modTri$2869+2)^(0+256),w
 10026  0A68  0021               	movlb	1	; select bank1
 10027  0A69  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10028  0A6A  31AC  24DF  3189   	fcall	___ftneg
 10029  0A6D  0021               	movlb	1	; select bank1
 10030  0A6E  083E               	movf	?___ftneg^(0+128),w
 10031  0A6F  00AE               	movwf	___ftmul@f1^(0+128)
 10032  0A70  083F               	movf	(?___ftneg+1)^(0+128),w
 10033  0A71  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10034  0A72  0840               	movf	(?___ftneg+2)^(0+128),w
 10035  0A73  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10036  0A74  3000               	movlw	0
 10037  0A75  00C1               	movwf	___ftadd@f1^(0+128)
 10038  0A76  30B4               	movlw	180
 10039  0A77  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10040  0A78  3043               	movlw	67
 10041  0A79  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10042  0A7A  0022               	movlb	2	; select bank2
 10043  0A7B  0831               	movf	modTri@inflection^(0+256),w
 10044  0A7C  0021               	movlb	1	; select bank1
 10045  0A7D  00BE               	movwf	___ftneg@f1^(0+128)
 10046  0A7E  0022               	movlb	2	; select bank2
 10047  0A7F  0832               	movf	(modTri@inflection+1)^(0+256),w
 10048  0A80  0021               	movlb	1	; select bank1
 10049  0A81  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10050  0A82  0022               	movlb	2	; select bank2
 10051  0A83  0833               	movf	(modTri@inflection+2)^(0+256),w
 10052  0A84  0021               	movlb	1	; select bank1
 10053  0A85  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10054  0A86  31AC  24DF  3189   	fcall	___ftneg
 10055  0A89  0021               	movlb	1	; select bank1
 10056  0A8A  083E               	movf	?___ftneg^(0+128),w
 10057  0A8B  00C4               	movwf	___ftadd@f2^(0+128)
 10058  0A8C  083F               	movf	(?___ftneg+1)^(0+128),w
 10059  0A8D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10060  0A8E  0840               	movf	(?___ftneg+2)^(0+128),w
 10061  0A8F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10062  0A90  3190  2035  3189   	fcall	___ftadd
 10063  0A93  0021               	movlb	1	; select bank1
 10064  0A94  0841               	movf	?___ftadd^(0+128),w
 10065  0A95  00CE               	movwf	___ftdiv@f2^(0+128)
 10066  0A96  0842               	movf	(?___ftadd+1)^(0+128),w
 10067  0A97  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10068  0A98  0843               	movf	(?___ftadd+2)^(0+128),w
 10069  0A99  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10070  0A9A  3000               	movlw	0
 10071  0A9B  00D1               	movwf	___ftdiv@f1^(0+128)
 10072  0A9C  3034               	movlw	52
 10073  0A9D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10074  0A9E  3043               	movlw	67
 10075  0A9F  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10076  0AA0  319C  2454  3189   	fcall	___ftdiv
 10077  0AA3  0021               	movlb	1	; select bank1
 10078  0AA4  084E               	movf	?___ftdiv^(0+128),w
 10079  0AA5  00B1               	movwf	___ftmul@f2^(0+128)
 10080  0AA6  084F               	movf	(?___ftdiv+1)^(0+128),w
 10081  0AA7  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10082  0AA8  0850               	movf	(?___ftdiv+2)^(0+128),w
 10083  0AA9  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10084  0AAA  319D  25B0  3189   	fcall	___ftmul
 10085  0AAD  0021               	movlb	1	; select bank1
 10086  0AAE  082E               	movf	?___ftmul^(0+128),w
 10087  0AAF  0022               	movlb	2	; select bank2
 10088  0AB0  00B7               	movwf	modTri@shift^(0+256)
 10089  0AB1  0021               	movlb	1	; select bank1
 10090  0AB2  082F               	movf	(?___ftmul+1)^(0+128),w
 10091  0AB3  0022               	movlb	2	; select bank2
 10092  0AB4  00B8               	movwf	(modTri@shift+1)^(0+256)
 10093  0AB5  0021               	movlb	1	; select bank1
 10094  0AB6  0830               	movf	(?___ftmul+2)^(0+128),w
 10095  0AB7  0022               	movlb	2	; select bank2
 10096  0AB8  00B9               	movwf	(modTri@shift+2)^(0+256)
 10097                           
 10098                           ;modulation.c: 108: period = 180/(360-inflection);
 10099  0AB9  3000               	movlw	0
 10100  0ABA  0021               	movlb	1	; select bank1
 10101  0ABB  00C1               	movwf	___ftadd@f1^(0+128)
 10102  0ABC  30B4               	movlw	180
 10103  0ABD  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10104  0ABE  3043               	movlw	67
 10105  0ABF  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10106  0AC0  0022               	movlb	2	; select bank2
 10107  0AC1  0831               	movf	modTri@inflection^(0+256),w
 10108  0AC2  0021               	movlb	1	; select bank1
 10109  0AC3  00BE               	movwf	___ftneg@f1^(0+128)
 10110  0AC4  0022               	movlb	2	; select bank2
 10111  0AC5  0832               	movf	(modTri@inflection+1)^(0+256),w
 10112  0AC6  0021               	movlb	1	; select bank1
 10113  0AC7  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10114  0AC8  0022               	movlb	2	; select bank2
 10115  0AC9  0833               	movf	(modTri@inflection+2)^(0+256),w
 10116  0ACA  0021               	movlb	1	; select bank1
 10117  0ACB  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10118  0ACC  31AC  24DF  3189   	fcall	___ftneg
 10119  0ACF  0021               	movlb	1	; select bank1
 10120  0AD0  083E               	movf	?___ftneg^(0+128),w
 10121  0AD1  00C4               	movwf	___ftadd@f2^(0+128)
 10122  0AD2  083F               	movf	(?___ftneg+1)^(0+128),w
 10123  0AD3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10124  0AD4  0840               	movf	(?___ftneg+2)^(0+128),w
 10125  0AD5  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10126  0AD6  3190  2035  3189   	fcall	___ftadd
 10127  0AD9  0021               	movlb	1	; select bank1
 10128  0ADA  0841               	movf	?___ftadd^(0+128),w
 10129  0ADB  00CE               	movwf	___ftdiv@f2^(0+128)
 10130  0ADC  0842               	movf	(?___ftadd+1)^(0+128),w
 10131  0ADD  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10132  0ADE  0843               	movf	(?___ftadd+2)^(0+128),w
 10133  0ADF                     L5:	
 10134  0ADF  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10135  0AE0  3000               	movlw	0
 10136  0AE1  00D1               	movwf	___ftdiv@f1^(0+128)
 10137  0AE2  3034               	movlw	52
 10138  0AE3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10139  0AE4  3043               	movlw	67
 10140  0AE5  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10141  0AE6  319C  2454  3189   	fcall	___ftdiv
 10142  0AE9  0021               	movlb	1	; select bank1
 10143  0AEA  084E               	movf	?___ftdiv^(0+128),w
 10144  0AEB  0022               	movlb	2	; select bank2
 10145  0AEC  00BA               	movwf	modTri@period^(0+256)
 10146  0AED  0021               	movlb	1	; select bank1
 10147  0AEE  084F               	movf	(?___ftdiv+1)^(0+128),w
 10148  0AEF  0022               	movlb	2	; select bank2
 10149  0AF0  00BB               	movwf	(modTri@period+1)^(0+256)
 10150  0AF1  0021               	movlb	1	; select bank1
 10151  0AF2  0850               	movf	(?___ftdiv+2)^(0+128),w
 10152  0AF3  0022               	movlb	2	; select bank2
 10153  0AF4  00BC               	movwf	(modTri@period+2)^(0+256)
 10154                           
 10155                           ;modulation.c: 110: }
 10156                           ;modulation.c: 111: double tmpVal = (period*angle-shift) ;
 10157  0AF5  0837               	movf	modTri@shift^(0+256),w
 10158  0AF6  0021               	movlb	1	; select bank1
 10159  0AF7  00BE               	movwf	___ftneg@f1^(0+128)
 10160  0AF8  0022               	movlb	2	; select bank2
 10161  0AF9  0838               	movf	(modTri@shift+1)^(0+256),w
 10162  0AFA  0021               	movlb	1	; select bank1
 10163  0AFB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10164  0AFC  0022               	movlb	2	; select bank2
 10165  0AFD  0839               	movf	(modTri@shift+2)^(0+256),w
 10166  0AFE  0021               	movlb	1	; select bank1
 10167  0AFF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10168  0B00  31AC  24DF  3189   	fcall	___ftneg
 10169  0B03  0021               	movlb	1	; select bank1
 10170  0B04  083E               	movf	?___ftneg^(0+128),w
 10171  0B05  00C1               	movwf	___ftadd@f1^(0+128)
 10172  0B06  083F               	movf	(?___ftneg+1)^(0+128),w
 10173  0B07  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10174  0B08  0840               	movf	(?___ftneg+2)^(0+128),w
 10175  0B09  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10176  0B0A  0022               	movlb	2	; select bank2
 10177  0B0B  082E               	movf	modTri@angle^(0+256),w
 10178  0B0C  0021               	movlb	1	; select bank1
 10179  0B0D  00AE               	movwf	___ftmul@f1^(0+128)
 10180  0B0E  0022               	movlb	2	; select bank2
 10181  0B0F  082F               	movf	(modTri@angle+1)^(0+256),w
 10182  0B10  0021               	movlb	1	; select bank1
 10183  0B11  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10184  0B12  0022               	movlb	2	; select bank2
 10185  0B13  0830               	movf	(modTri@angle+2)^(0+256),w
 10186  0B14  0021               	movlb	1	; select bank1
 10187  0B15  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10188  0B16  0022               	movlb	2	; select bank2
 10189  0B17  083A               	movf	modTri@period^(0+256),w
 10190  0B18  0021               	movlb	1	; select bank1
 10191  0B19  00B1               	movwf	___ftmul@f2^(0+128)
 10192  0B1A  0022               	movlb	2	; select bank2
 10193  0B1B  083B               	movf	(modTri@period+1)^(0+256),w
 10194  0B1C  0021               	movlb	1	; select bank1
 10195  0B1D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10196  0B1E  0022               	movlb	2	; select bank2
 10197  0B1F  083C               	movf	(modTri@period+2)^(0+256),w
 10198  0B20  0021               	movlb	1	; select bank1
 10199  0B21  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10200  0B22  319D  25B0  3189   	fcall	___ftmul
 10201  0B25  0021               	movlb	1	; select bank1
 10202  0B26  082E               	movf	?___ftmul^(0+128),w
 10203  0B27  00C4               	movwf	___ftadd@f2^(0+128)
 10204  0B28  082F               	movf	(?___ftmul+1)^(0+128),w
 10205  0B29  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10206  0B2A  0830               	movf	(?___ftmul+2)^(0+128),w
 10207  0B2B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10208  0B2C  3190  2035  3189   	fcall	___ftadd
 10209  0B2F  0021               	movlb	1	; select bank1
 10210  0B30  0841               	movf	?___ftadd^(0+128),w
 10211  0B31  0022               	movlb	2	; select bank2
 10212  0B32  00BD               	movwf	modTri@tmpVal^(0+256)
 10213  0B33  0021               	movlb	1	; select bank1
 10214  0B34  0842               	movf	(?___ftadd+1)^(0+128),w
 10215  0B35  0022               	movlb	2	; select bank2
 10216  0B36  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10217  0B37  0021               	movlb	1	; select bank1
 10218  0B38  0843               	movf	(?___ftadd+2)^(0+128),w
 10219  0B39  0022               	movlb	2	; select bank2
 10220  0B3A  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10221                           
 10222                           ;modulation.c: 112: if (tmpVal > 180) {
 10223  0B3B  3000               	movlw	0
 10224  0B3C  0021               	movlb	1	; select bank1
 10225  0B3D  00A0               	movwf	___ftge@ff1^(0+128)
 10226  0B3E  3034               	movlw	52
 10227  0B3F  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10228  0B40  3043               	movlw	67
 10229  0B41  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10230  0B42  0022               	movlb	2	; select bank2
 10231  0B43  083D               	movf	modTri@tmpVal^(0+256),w
 10232  0B44  0021               	movlb	1	; select bank1
 10233  0B45  00A3               	movwf	___ftge@ff2^(0+128)
 10234  0B46  0022               	movlb	2	; select bank2
 10235  0B47  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10236  0B48  0021               	movlb	1	; select bank1
 10237  0B49  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10238  0B4A  0022               	movlb	2	; select bank2
 10239  0B4B  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10240  0B4C  0021               	movlb	1	; select bank1
 10241  0B4D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10242  0B4E  31A0  209E  3189   	fcall	___ftge
 10243  0B51  1803               	btfsc	3,0
 10244  0B52  2B66               	goto	l8674
 10245                           
 10246                           ;modulation.c: 113: tmpVal = tmpVal - 270.0;
 10247  0B53  3000               	movlw	0
 10248  0B54  0021               	movlb	1	; select bank1
 10249  0B55  00C1               	movwf	___ftadd@f1^(0+128)
 10250  0B56  3087               	movlw	135
 10251  0B57  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10252  0B58  30C3               	movlw	195
 10253  0B59  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10254  0B5A  0022               	movlb	2	; select bank2
 10255  0B5B  083D               	movf	modTri@tmpVal^(0+256),w
 10256  0B5C  0021               	movlb	1	; select bank1
 10257  0B5D  00C4               	movwf	___ftadd@f2^(0+128)
 10258  0B5E  0022               	movlb	2	; select bank2
 10259  0B5F  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10260  0B60  0021               	movlb	1	; select bank1
 10261  0B61  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10262  0B62  0022               	movlb	2	; select bank2
 10263  0B63  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10264  0B64  0021               	movlb	1	; select bank1
 10265  0B65  2B82               	goto	L6
 10266  0B66                     l8674:	
 10267                           ;modulation.c: 114: } else {
 10268                           
 10269                           
 10270                           ;modulation.c: 115: tmpVal = 90 - tmpVal;
 10271  0B66  3000               	movlw	0
 10272  0B67  0021               	movlb	1	; select bank1
 10273  0B68  00C1               	movwf	___ftadd@f1^(0+128)
 10274  0B69  30B4               	movlw	180
 10275  0B6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10276  0B6B  3042               	movlw	66
 10277  0B6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10278  0B6D  0022               	movlb	2	; select bank2
 10279  0B6E  083D               	movf	modTri@tmpVal^(0+256),w
 10280  0B6F  0021               	movlb	1	; select bank1
 10281  0B70  00BE               	movwf	___ftneg@f1^(0+128)
 10282  0B71  0022               	movlb	2	; select bank2
 10283  0B72  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10284  0B73  0021               	movlb	1	; select bank1
 10285  0B74  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10286  0B75  0022               	movlb	2	; select bank2
 10287  0B76  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10288  0B77  0021               	movlb	1	; select bank1
 10289  0B78  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10290  0B79  31AC  24DF  3189   	fcall	___ftneg
 10291  0B7C  0021               	movlb	1	; select bank1
 10292  0B7D  083E               	movf	?___ftneg^(0+128),w
 10293  0B7E  00C4               	movwf	___ftadd@f2^(0+128)
 10294  0B7F  083F               	movf	(?___ftneg+1)^(0+128),w
 10295  0B80  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10296  0B81  0840               	movf	(?___ftneg+2)^(0+128),w
 10297  0B82                     L6:	
 10298  0B82  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10299  0B83  3190  2035  3189   	fcall	___ftadd
 10300  0B86  0021               	movlb	1	; select bank1
 10301  0B87  0841               	movf	?___ftadd^(0+128),w
 10302  0B88  0022               	movlb	2	; select bank2
 10303  0B89  00BD               	movwf	modTri@tmpVal^(0+256)
 10304  0B8A  0021               	movlb	1	; select bank1
 10305  0B8B  0842               	movf	(?___ftadd+1)^(0+128),w
 10306  0B8C  0022               	movlb	2	; select bank2
 10307  0B8D  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10308  0B8E  0021               	movlb	1	; select bank1
 10309  0B8F  0843               	movf	(?___ftadd+2)^(0+128),w
 10310  0B90  0022               	movlb	2	; select bank2
 10311  0B91  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10312                           
 10313                           ;modulation.c: 116: }
 10314                           ;modulation.c: 117: tmpVal = tmpVal * -10/9;
 10315  0B92  3000               	movlw	0
 10316  0B93  0021               	movlb	1	; select bank1
 10317  0B94  00CE               	movwf	___ftdiv@f2^(0+128)
 10318  0B95  3010               	movlw	16
 10319  0B96  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10320  0B97  3041               	movlw	65
 10321  0B98  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10322  0B99  3000               	movlw	0
 10323  0B9A  00AE               	movwf	___ftmul@f1^(0+128)
 10324  0B9B  3020               	movlw	32
 10325  0B9C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10326  0B9D  30C1               	movlw	193
 10327  0B9E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10328  0B9F  0022               	movlb	2	; select bank2
 10329  0BA0  083D               	movf	modTri@tmpVal^(0+256),w
 10330  0BA1  0021               	movlb	1	; select bank1
 10331  0BA2  00B1               	movwf	___ftmul@f2^(0+128)
 10332  0BA3  0022               	movlb	2	; select bank2
 10333  0BA4  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10334  0BA5  0021               	movlb	1	; select bank1
 10335  0BA6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10336  0BA7  0022               	movlb	2	; select bank2
 10337  0BA8  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10338  0BA9  0021               	movlb	1	; select bank1
 10339  0BAA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10340  0BAB  319D  25B0  3189   	fcall	___ftmul
 10341  0BAE  0021               	movlb	1	; select bank1
 10342  0BAF  082E               	movf	?___ftmul^(0+128),w
 10343  0BB0  00D1               	movwf	___ftdiv@f1^(0+128)
 10344  0BB1  082F               	movf	(?___ftmul+1)^(0+128),w
 10345  0BB2  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10346  0BB3  0830               	movf	(?___ftmul+2)^(0+128),w
 10347  0BB4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10348  0BB5  319C  2454  3189   	fcall	___ftdiv
 10349  0BB8  0021               	movlb	1	; select bank1
 10350  0BB9  084E               	movf	?___ftdiv^(0+128),w
 10351  0BBA  0022               	movlb	2	; select bank2
 10352  0BBB  00BD               	movwf	modTri@tmpVal^(0+256)
 10353  0BBC  0021               	movlb	1	; select bank1
 10354  0BBD  084F               	movf	(?___ftdiv+1)^(0+128),w
 10355  0BBE  0022               	movlb	2	; select bank2
 10356  0BBF  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10357  0BC0  0021               	movlb	1	; select bank1
 10358  0BC1  0850               	movf	(?___ftdiv+2)^(0+128),w
 10359  0BC2  0022               	movlb	2	; select bank2
 10360  0BC3  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10361                           
 10362                           ;modulation.c: 119: return (int)(tmpVal);
 10363  0BC4  083D               	movf	modTri@tmpVal^(0+256),w
 10364  0BC5  00A0               	movwf	___fttol@f1^(0+256)
 10365  0BC6  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10366  0BC7  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10367  0BC8  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10368  0BC9  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10369  0BCA  3199  2182         	fcall	___fttol
 10370  0BCC  0022               	movlb	2	; select bank2
 10371  0BCD  0821               	movf	(?___fttol^(0+256)+1),w
 10372  0BCE  00AF               	movwf	(?_modTri+1)^(0+256)
 10373  0BCF  0820               	movf	?___fttol^(0+256),w
 10374  0BD0  00AE               	movwf	?_modTri^(0+256)
 10375  0BD1  0008               	return
 10376  0BD2                     __end_of_modTri:	
 10377                           
 10378                           	psect	text18
 10379  2117                     __ptext18:	
 10380 ;; *************** function _modSquare *****************
 10381 ;; Defined at:
 10382 ;;		line 143 in file "modulation.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;  angle           3   40[BANK2 ] int 
 10385 ;;  inflection      3   43[BANK2 ] int 
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;  tmpVal          2   46[BANK2 ] int 
 10388 ;; Return value:  Size  Location     Type
 10389 ;;                  2   40[BANK2 ] int 
 10390 ;; Registers used:
 10391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10392 ;; Tracked objects:
 10393 ;;		On entry : 0/0
 10394 ;;		On exit  : 0/0
 10395 ;;		Unchanged: 0/0
 10396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10397 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10398 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10400 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10401 ;;Total ram usage:        8 bytes
 10402 ;; Hardware stack levels used:    1
 10403 ;; Hardware stack levels required when called:    6
 10404 ;; This function calls:
 10405 ;;		___ftge
 10406 ;;		_modCos
 10407 ;; This function is called by:
 10408 ;;		_updateModulationArray
 10409 ;; This function uses a non-reentrant model
 10410 ;;
 10411                           
 10412                           
 10413                           ;psect for function _modSquare
 10414  2117                     _modSquare:	
 10415                           
 10416                           ;modulation.c: 144: int tmpVal = modCos(angle, inflection);
 10417                           
 10418                           ;incstack = 0
 10419                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10420  2117  0022               	movlb	2	; select bank2
 10421  2118  0848               	movf	modSquare@angle^(0+256),w
 10422  2119  00B4               	movwf	modCos@angle^(0+256)
 10423  211A  0849               	movf	(modSquare@angle+1)^(0+256),w
 10424  211B  00B5               	movwf	(modCos@angle+1)^(0+256)
 10425  211C  084A               	movf	(modSquare@angle+2)^(0+256),w
 10426  211D  00B6               	movwf	(modCos@angle+2)^(0+256)
 10427  211E  084B               	movf	modSquare@inflection^(0+256),w
 10428  211F  00B7               	movwf	modCos@inflection^(0+256)
 10429  2120  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10430  2121  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10431  2122  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10432  2123  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10433  2124  3196  2654  31A1   	fcall	_modCos
 10434  2127  0022               	movlb	2	; select bank2
 10435  2128  0835               	movf	(?_modCos+1)^(0+256),w
 10436  2129  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10437  212A  0834               	movf	?_modCos^(0+256),w
 10438  212B  00CE               	movwf	modSquare@tmpVal^(0+256)
 10439                           
 10440                           ;modulation.c: 145: return (angle <= inflection) ? -100 : 100;
 10441  212C  084B               	movf	modSquare@inflection^(0+256),w
 10442  212D  0021               	movlb	1	; select bank1
 10443  212E  00A0               	movwf	___ftge@ff1^(0+128)
 10444  212F  0022               	movlb	2	; select bank2
 10445  2130  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10446  2131  0021               	movlb	1	; select bank1
 10447  2132  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10448  2133  0022               	movlb	2	; select bank2
 10449  2134  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10450  2135  0021               	movlb	1	; select bank1
 10451  2136  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10452  2137  0022               	movlb	2	; select bank2
 10453  2138  0848               	movf	modSquare@angle^(0+256),w
 10454  2139  0021               	movlb	1	; select bank1
 10455  213A  00A3               	movwf	___ftge@ff2^(0+128)
 10456  213B  0022               	movlb	2	; select bank2
 10457  213C  0849               	movf	(modSquare@angle+1)^(0+256),w
 10458  213D  0021               	movlb	1	; select bank1
 10459  213E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10460  213F  0022               	movlb	2	; select bank2
 10461  2140  084A               	movf	(modSquare@angle+2)^(0+256),w
 10462  2141  0021               	movlb	1	; select bank1
 10463  2142  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10464  2143  31A0  209E  31A1   	fcall	___ftge
 10465  2146  1803               	btfsc	3,0
 10466  2147  294E               	goto	l8684
 10467  2148  3064               	movlw	100
 10468  2149  0022               	movlb	2	; select bank2
 10469  214A  00C8               	movwf	?_modSquare^(0+256)
 10470  214B  3000               	movlw	0
 10471  214C  00C9               	movwf	(?_modSquare^(0+256)+1)
 10472  214D  0008               	return
 10473  214E                     l8684:	
 10474  214E  309C               	movlw	156
 10475  214F  0022               	movlb	2	; select bank2
 10476  2150  00C8               	movwf	?_modSquare^(0+256)
 10477  2151  30FF               	movlw	255
 10478  2152  00C9               	movwf	(?_modSquare^(0+256)+1)
 10479  2153  0008               	return
 10480  2154                     __end_of_modSquare:	
 10481                           
 10482                           	psect	text19
 10483  1654                     __ptext19:	
 10484 ;; *************** function _modCos *****************
 10485 ;; Defined at:
 10486 ;;		line 84 in file "modulation.c"
 10487 ;; Parameters:    Size  Location     Type
 10488 ;;  angle           3   20[BANK2 ] int 
 10489 ;;  inflection      3   23[BANK2 ] int 
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;  tmpVal          3   37[BANK2 ] int 
 10492 ;;  period          3   34[BANK2 ] int 
 10493 ;;  shift           3   31[BANK2 ] int 
 10494 ;; Return value:  Size  Location     Type
 10495 ;;                  2   20[BANK2 ] int 
 10496 ;; Registers used:
 10497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10503 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10504 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10505 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10506 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10507 ;;Total ram usage:       20 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; Hardware stack levels required when called:    5
 10510 ;; This function calls:
 10511 ;;		___ftadd
 10512 ;;		___ftdiv
 10513 ;;		___ftge
 10514 ;;		___ftmul
 10515 ;;		___ftneg
 10516 ;;		___fttol
 10517 ;;		___wmul
 10518 ;; This function is called by:
 10519 ;;		_updateModulationArray
 10520 ;;		_modSquare
 10521 ;; This function uses a non-reentrant model
 10522 ;;
 10523                           
 10524                           
 10525                           ;psect for function _modCos
 10526  1654                     _modCos:	
 10527                           
 10528                           ;modulation.c: 85: double period = 1.0;
 10529                           
 10530                           ;incstack = 0
 10531                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10532  1654  3000               	movlw	0
 10533  1655  0022               	movlb	2	; select bank2
 10534  1656  00C2               	movwf	modCos@period^(0+256)
 10535  1657  3080               	movlw	128
 10536  1658  00C3               	movwf	(modCos@period+1)^(0+256)
 10537  1659  303F               	movlw	63
 10538  165A  00C4               	movwf	(modCos@period+2)^(0+256)
 10539                           
 10540                           ;modulation.c: 86: double shift = 0.0;
 10541  165B  3000               	movlw	0
 10542  165C  00BF               	movwf	modCos@shift^(0+256)
 10543  165D  3000               	movlw	0
 10544  165E  00C0               	movwf	(modCos@shift+1)^(0+256)
 10545  165F  3000               	movlw	0
 10546  1660  00C1               	movwf	(modCos@shift+2)^(0+256)
 10547                           
 10548                           ;modulation.c: 88: if(angle<=inflection) {
 10549  1661  0837               	movf	modCos@inflection^(0+256),w
 10550  1662  0021               	movlb	1	; select bank1
 10551  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10552  1664  0022               	movlb	2	; select bank2
 10553  1665  0838               	movf	(modCos@inflection+1)^(0+256),w
 10554  1666  0021               	movlb	1	; select bank1
 10555  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10556  1668  0022               	movlb	2	; select bank2
 10557  1669  0839               	movf	(modCos@inflection+2)^(0+256),w
 10558  166A  0021               	movlb	1	; select bank1
 10559  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10560  166C  0022               	movlb	2	; select bank2
 10561  166D  0834               	movf	modCos@angle^(0+256),w
 10562  166E  0021               	movlb	1	; select bank1
 10563  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10564  1670  0022               	movlb	2	; select bank2
 10565  1671  0835               	movf	(modCos@angle+1)^(0+256),w
 10566  1672  0021               	movlb	1	; select bank1
 10567  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10568  1674  0022               	movlb	2	; select bank2
 10569  1675  0836               	movf	(modCos@angle+2)^(0+256),w
 10570  1676  0021               	movlb	1	; select bank1
 10571  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10572  1678  31A0  209E  3196   	fcall	___ftge
 10573  167B  1C03               	btfss	3,0
 10574  167C  2E89               	goto	l8340
 10575                           
 10576                           ;modulation.c: 89: period = 180.0/inflection;
 10577  167D  0022               	movlb	2	; select bank2
 10578  167E  0837               	movf	modCos@inflection^(0+256),w
 10579  167F  0021               	movlb	1	; select bank1
 10580  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10581  1681  0022               	movlb	2	; select bank2
 10582  1682  0838               	movf	(modCos@inflection+1)^(0+256),w
 10583  1683  0021               	movlb	1	; select bank1
 10584  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10585  1685  0022               	movlb	2	; select bank2
 10586  1686  0839               	movf	(modCos@inflection+2)^(0+256),w
 10587  1687  0021               	movlb	1	; select bank1
 10588  1688  2F44               	goto	L7
 10589  1689                     l8340:	
 10590                           ;modulation.c: 90: } else {
 10591                           
 10592                           
 10593                           ;modulation.c: 91: shift = -(360-inflection*2)*(180/(360-inflection));
 10594  1689  0022               	movlb	2	; select bank2
 10595  168A  0837               	movf	modCos@inflection^(0+256),w
 10596  168B  0021               	movlb	1	; select bank1
 10597  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10598  168D  0022               	movlb	2	; select bank2
 10599  168E  0838               	movf	(modCos@inflection+1)^(0+256),w
 10600  168F  0021               	movlb	1	; select bank1
 10601  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10602  1691  0022               	movlb	2	; select bank2
 10603  1692  0839               	movf	(modCos@inflection+2)^(0+256),w
 10604  1693  0021               	movlb	1	; select bank1
 10605  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10606  1695  3000               	movlw	0
 10607  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10608  1697  3000               	movlw	0
 10609  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10610  1699  3040               	movlw	64
 10611  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10612  169B  319D  25B0  3196   	fcall	___ftmul
 10613  169E  0021               	movlb	1	; select bank1
 10614  169F  082E               	movf	?___ftmul^(0+128),w
 10615  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10616  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10617  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10618  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10619  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10620  16A5  31AC  24DF  3196   	fcall	___ftneg
 10621  16A8  0021               	movlb	1	; select bank1
 10622  16A9  083E               	movf	?___ftneg^(0+128),w
 10623  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10624  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10625  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10626  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10627  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10628  16AF  3000               	movlw	0
 10629  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10630  16B1  30B4               	movlw	180
 10631  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10632  16B3  3043               	movlw	67
 10633  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10634  16B5  3190  2035  3196   	fcall	___ftadd
 10635  16B8  0021               	movlb	1	; select bank1
 10636  16B9  0841               	movf	?___ftadd^(0+128),w
 10637  16BA  0022               	movlb	2	; select bank2
 10638  16BB  00BC               	movwf	_modCos$2868^(0+256)
 10639  16BC  0021               	movlb	1	; select bank1
 10640  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10641  16BE  0022               	movlb	2	; select bank2
 10642  16BF  00BD               	movwf	(_modCos$2868+1)^(0+256)
 10643  16C0  0021               	movlb	1	; select bank1
 10644  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10645  16C2  0022               	movlb	2	; select bank2
 10646  16C3  00BE               	movwf	(_modCos$2868+2)^(0+256)
 10647                           
 10648                           ;modulation.c: 91: shift = -(360-inflection*2)*(180/(360-inflection));
 10649  16C4  083C               	movf	_modCos$2868^(0+256),w
 10650  16C5  0021               	movlb	1	; select bank1
 10651  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10652  16C7  0022               	movlb	2	; select bank2
 10653  16C8  083D               	movf	(_modCos$2868+1)^(0+256),w
 10654  16C9  0021               	movlb	1	; select bank1
 10655  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10656  16CB  0022               	movlb	2	; select bank2
 10657  16CC  083E               	movf	(_modCos$2868+2)^(0+256),w
 10658  16CD  0021               	movlb	1	; select bank1
 10659  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10660  16CF  31AC  24DF  3196   	fcall	___ftneg
 10661  16D2  0021               	movlb	1	; select bank1
 10662  16D3  083E               	movf	?___ftneg^(0+128),w
 10663  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10664  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10665  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10666  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10667  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10668  16D9  3000               	movlw	0
 10669  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10670  16DB  30B4               	movlw	180
 10671  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10672  16DD  3043               	movlw	67
 10673  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10674  16DF  0022               	movlb	2	; select bank2
 10675  16E0  0837               	movf	modCos@inflection^(0+256),w
 10676  16E1  0021               	movlb	1	; select bank1
 10677  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10678  16E3  0022               	movlb	2	; select bank2
 10679  16E4  0838               	movf	(modCos@inflection+1)^(0+256),w
 10680  16E5  0021               	movlb	1	; select bank1
 10681  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10682  16E7  0022               	movlb	2	; select bank2
 10683  16E8  0839               	movf	(modCos@inflection+2)^(0+256),w
 10684  16E9  0021               	movlb	1	; select bank1
 10685  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10686  16EB  31AC  24DF  3196   	fcall	___ftneg
 10687  16EE  0021               	movlb	1	; select bank1
 10688  16EF  083E               	movf	?___ftneg^(0+128),w
 10689  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10690  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10691  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10692  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10693  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10694  16F5  3190  2035  3196   	fcall	___ftadd
 10695  16F8  0021               	movlb	1	; select bank1
 10696  16F9  0841               	movf	?___ftadd^(0+128),w
 10697  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10698  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10699  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10700  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10701  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10702  16FF  3000               	movlw	0
 10703  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10704  1701  3034               	movlw	52
 10705  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10706  1703  3043               	movlw	67
 10707  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10708  1705  319C  2454  3196   	fcall	___ftdiv
 10709  1708  0021               	movlb	1	; select bank1
 10710  1709  084E               	movf	?___ftdiv^(0+128),w
 10711  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10712  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10713  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10714  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10715  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10716  170F  319D  25B0  3196   	fcall	___ftmul
 10717  1712  0021               	movlb	1	; select bank1
 10718  1713  082E               	movf	?___ftmul^(0+128),w
 10719  1714  0022               	movlb	2	; select bank2
 10720  1715  00BF               	movwf	modCos@shift^(0+256)
 10721  1716  0021               	movlb	1	; select bank1
 10722  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10723  1718  0022               	movlb	2	; select bank2
 10724  1719  00C0               	movwf	(modCos@shift+1)^(0+256)
 10725  171A  0021               	movlb	1	; select bank1
 10726  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10727  171C  0022               	movlb	2	; select bank2
 10728  171D  00C1               	movwf	(modCos@shift+2)^(0+256)
 10729                           
 10730                           ;modulation.c: 92: period = 180/(360-inflection);
 10731  171E  3000               	movlw	0
 10732  171F  0021               	movlb	1	; select bank1
 10733  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10734  1721  30B4               	movlw	180
 10735  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10736  1723  3043               	movlw	67
 10737  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10738  1725  0022               	movlb	2	; select bank2
 10739  1726  0837               	movf	modCos@inflection^(0+256),w
 10740  1727  0021               	movlb	1	; select bank1
 10741  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10742  1729  0022               	movlb	2	; select bank2
 10743  172A  0838               	movf	(modCos@inflection+1)^(0+256),w
 10744  172B  0021               	movlb	1	; select bank1
 10745  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10746  172D  0022               	movlb	2	; select bank2
 10747  172E  0839               	movf	(modCos@inflection+2)^(0+256),w
 10748  172F  0021               	movlb	1	; select bank1
 10749  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10750  1731  31AC  24DF  3196   	fcall	___ftneg
 10751  1734  0021               	movlb	1	; select bank1
 10752  1735  083E               	movf	?___ftneg^(0+128),w
 10753  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10754  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10755  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10756  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10757  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10758  173B  3190  2035  3196   	fcall	___ftadd
 10759  173E  0021               	movlb	1	; select bank1
 10760  173F  0841               	movf	?___ftadd^(0+128),w
 10761  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10762  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10763  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10764  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10765  1744                     L7:	
 10766  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10767  1745  3000               	movlw	0
 10768  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10769  1747  3034               	movlw	52
 10770  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10771  1749  3043               	movlw	67
 10772  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10773  174B  319C  2454  3196   	fcall	___ftdiv
 10774  174E  0021               	movlb	1	; select bank1
 10775  174F  084E               	movf	?___ftdiv^(0+128),w
 10776  1750  0022               	movlb	2	; select bank2
 10777  1751  00C2               	movwf	modCos@period^(0+256)
 10778  1752  0021               	movlb	1	; select bank1
 10779  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10780  1754  0022               	movlb	2	; select bank2
 10781  1755  00C3               	movwf	(modCos@period+1)^(0+256)
 10782  1756  0021               	movlb	1	; select bank1
 10783  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10784  1758  0022               	movlb	2	; select bank2
 10785  1759  00C4               	movwf	(modCos@period+2)^(0+256)
 10786                           
 10787                           ;modulation.c: 94: }
 10788                           ;modulation.c: 95: double tmpVal = (period*angle-shift) /3;
 10789  175A  3000               	movlw	0
 10790  175B  0021               	movlb	1	; select bank1
 10791  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10792  175D  3040               	movlw	64
 10793  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10794  175F  3040               	movlw	64
 10795  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10796  1761  0022               	movlb	2	; select bank2
 10797  1762  083F               	movf	modCos@shift^(0+256),w
 10798  1763  0021               	movlb	1	; select bank1
 10799  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10800  1765  0022               	movlb	2	; select bank2
 10801  1766  0840               	movf	(modCos@shift+1)^(0+256),w
 10802  1767  0021               	movlb	1	; select bank1
 10803  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10804  1769  0022               	movlb	2	; select bank2
 10805  176A  0841               	movf	(modCos@shift+2)^(0+256),w
 10806  176B  0021               	movlb	1	; select bank1
 10807  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10808  176D  31AC  24DF  3196   	fcall	___ftneg
 10809  1770  0021               	movlb	1	; select bank1
 10810  1771  083E               	movf	?___ftneg^(0+128),w
 10811  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10812  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10813  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10814  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10815  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10816  1777  0022               	movlb	2	; select bank2
 10817  1778  0834               	movf	modCos@angle^(0+256),w
 10818  1779  0021               	movlb	1	; select bank1
 10819  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10820  177B  0022               	movlb	2	; select bank2
 10821  177C  0835               	movf	(modCos@angle+1)^(0+256),w
 10822  177D  0021               	movlb	1	; select bank1
 10823  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10824  177F  0022               	movlb	2	; select bank2
 10825  1780  0836               	movf	(modCos@angle+2)^(0+256),w
 10826  1781  0021               	movlb	1	; select bank1
 10827  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10828  1783  0022               	movlb	2	; select bank2
 10829  1784  0842               	movf	modCos@period^(0+256),w
 10830  1785  0021               	movlb	1	; select bank1
 10831  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10832  1787  0022               	movlb	2	; select bank2
 10833  1788  0843               	movf	(modCos@period+1)^(0+256),w
 10834  1789  0021               	movlb	1	; select bank1
 10835  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10836  178B  0022               	movlb	2	; select bank2
 10837  178C  0844               	movf	(modCos@period+2)^(0+256),w
 10838  178D  0021               	movlb	1	; select bank1
 10839  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10840  178F  319D  25B0  3196   	fcall	___ftmul
 10841  1792  0021               	movlb	1	; select bank1
 10842  1793  082E               	movf	?___ftmul^(0+128),w
 10843  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10844  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10845  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10846  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10847  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10848  1799  3190  2035  3196   	fcall	___ftadd
 10849  179C  0021               	movlb	1	; select bank1
 10850  179D  0841               	movf	?___ftadd^(0+128),w
 10851  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10852  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10853  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10854  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10855  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10856  17A3  319C  2454  3196   	fcall	___ftdiv
 10857  17A6  0021               	movlb	1	; select bank1
 10858  17A7  084E               	movf	?___ftdiv^(0+128),w
 10859  17A8  0022               	movlb	2	; select bank2
 10860  17A9  00C5               	movwf	modCos@tmpVal^(0+256)
 10861  17AA  0021               	movlb	1	; select bank1
 10862  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10863  17AC  0022               	movlb	2	; select bank2
 10864  17AD  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10865  17AE  0021               	movlb	1	; select bank1
 10866  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10867  17B0  0022               	movlb	2	; select bank2
 10868  17B1  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10869                           
 10870                           ;modulation.c: 96: tmpVal = cosArray[(int)(tmpVal)];
 10871  17B2  0845               	movf	modCos@tmpVal^(0+256),w
 10872  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10873  17B4  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10874  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10875  17B6  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10876  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10877  17B8  3199  2182  3196   	fcall	___fttol
 10878  17BB  0022               	movlb	2	; select bank2
 10879  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10880  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10881  17BE  0820               	movf	?___fttol^(0+256),w
 10882  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10883  17C0  3003               	movlw	3
 10884  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10885  17C2  3000               	movlw	0
 10886  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10887  17C4  31AD  25B8  3196   	fcall	___wmul
 10888  17C7  3082               	movlw	130
 10889  17C8  0022               	movlb	2	; select bank2
 10890  17C9  00BA               	movwf	??_modCos^(0+256)
 10891  17CA  3024               	movlw	36
 10892  17CB  00BB               	movwf	(??_modCos^(0+256)+1)
 10893  17CC  082E               	movf	?___wmul^(0+256),w
 10894  17CD  073A               	addwf	??_modCos^(0+256),w
 10895  17CE  0086               	movwf	6
 10896  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10897  17D0  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 10898  17D1  0087               	movwf	7
 10899  17D2  3F40               	moviw [0]fsr1
 10900  17D3  00C5               	movwf	modCos@tmpVal^(0+256)
 10901  17D4  3F41               	moviw [1]fsr1
 10902  17D5  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10903  17D6  3F42               	moviw [2]fsr1
 10904  17D7  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10905                           
 10906                           ;modulation.c: 97: return (int)(-100.0 * tmpVal);
 10907  17D8  0845               	movf	modCos@tmpVal^(0+256),w
 10908  17D9  0021               	movlb	1	; select bank1
 10909  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10910  17DB  0022               	movlb	2	; select bank2
 10911  17DC  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10912  17DD  0021               	movlb	1	; select bank1
 10913  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10914  17DF  0022               	movlb	2	; select bank2
 10915  17E0  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10916  17E1  0021               	movlb	1	; select bank1
 10917  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10918  17E3  3000               	movlw	0
 10919  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10920  17E5  30C8               	movlw	200
 10921  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10922  17E7  30C2               	movlw	194
 10923  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10924  17E9  319D  25B0  3196   	fcall	___ftmul
 10925  17EC  0021               	movlb	1	; select bank1
 10926  17ED  082E               	movf	?___ftmul^(0+128),w
 10927  17EE  0022               	movlb	2	; select bank2
 10928  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10929  17F0  0021               	movlb	1	; select bank1
 10930  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10931  17F2  0022               	movlb	2	; select bank2
 10932  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10933  17F4  0021               	movlb	1	; select bank1
 10934  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10935  17F6  0022               	movlb	2	; select bank2
 10936  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10937  17F8  3199  2182         	fcall	___fttol
 10938  17FA  0022               	movlb	2	; select bank2
 10939  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10940  17FC  00B5               	movwf	(?_modCos+1)^(0+256)
 10941  17FD  0820               	movf	?___fttol^(0+256),w
 10942  17FE  00B4               	movwf	?_modCos^(0+256)
 10943  17FF  0008               	return
 10944  1800                     __end_of_modCos:	
 10945                           
 10946                           	psect	text20
 10947  2DF0                     __ptext20:	
 10948 ;; *************** function _modSawRev *****************
 10949 ;; Defined at:
 10950 ;;		line 138 in file "modulation.c"
 10951 ;; Parameters:    Size  Location     Type
 10952 ;;  angle           3   34[BANK2 ] int 
 10953 ;;  inflection      3   37[BANK2 ] int 
 10954 ;; Auto vars:     Size  Location     Type
 10955 ;;		None
 10956 ;; Return value:  Size  Location     Type
 10957 ;;                  2   34[BANK2 ] int 
 10958 ;; Registers used:
 10959 ;;		wreg, status,2, status,0, pclath, cstack
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/0
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10965 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10967 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10968 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10969 ;;Total ram usage:        8 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:    6
 10972 ;; This function calls:
 10973 ;;		_modSaw
 10974 ;; This function is called by:
 10975 ;;		_updateModulationArray
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           
 10980                           ;psect for function _modSawRev
 10981  2DF0                     _modSawRev:	
 10982                           
 10983                           ;modulation.c: 139: return -1 * modSaw(angle, inflection);
 10984                           
 10985                           ;incstack = 0
 10986                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10987  2DF0  0022               	movlb	2	; select bank2
 10988  2DF1  0842               	movf	modSawRev@angle^(0+256),w
 10989  2DF2  00AE               	movwf	modSaw@angle^(0+256)
 10990  2DF3  0843               	movf	(modSawRev@angle+1)^(0+256),w
 10991  2DF4  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10992  2DF5  0844               	movf	(modSawRev@angle+2)^(0+256),w
 10993  2DF6  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10994  2DF7  0845               	movf	modSawRev@inflection^(0+256),w
 10995  2DF8  00B1               	movwf	modSaw@inflection^(0+256)
 10996  2DF9  0846               	movf	(modSawRev@inflection+1)^(0+256),w
 10997  2DFA  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10998  2DFB  0847               	movf	(modSawRev@inflection+2)^(0+256),w
 10999  2DFC  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 11000  2DFD  3194  24BC         	fcall	_modSaw
 11001  2DFF  0022               	movlb	2	; select bank2
 11002  2E00  092E               	comf	?_modSaw^(0+256),w
 11003  2E01  00C8               	movwf	??_modSawRev^(0+256)
 11004  2E02  092F               	comf	(?_modSaw+1)^(0+256),w
 11005  2E03  00C9               	movwf	(??_modSawRev^(0+256)+1)
 11006  2E04  0AC8               	incf	??_modSawRev^(0+256),f
 11007  2E05  1903               	skipnz
 11008  2E06  0AC9               	incf	(??_modSawRev^(0+256)+1),f
 11009  2E07  0848               	movf	??_modSawRev^(0+256),w
 11010  2E08  00C2               	movwf	?_modSawRev^(0+256)
 11011  2E09  0849               	movf	(??_modSawRev+1)^(0+256),w
 11012  2E0A  00C3               	movwf	(?_modSawRev+1)^(0+256)
 11013  2E0B  0008               	return
 11014  2E0C                     __end_of_modSawRev:	
 11015                           
 11016                           	psect	text21
 11017  14BC                     __ptext21:	
 11018 ;; *************** function _modSaw *****************
 11019 ;; Defined at:
 11020 ;;		line 123 in file "modulation.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;  angle           3   14[BANK2 ] int 
 11023 ;;  inflection      3   17[BANK2 ] int 
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;  period          3   31[BANK2 ] int 
 11026 ;;  shift           3   28[BANK2 ] int 
 11027 ;;  mod             2   26[BANK2 ] int 
 11028 ;; Return value:  Size  Location     Type
 11029 ;;                  2   14[BANK2 ] int 
 11030 ;; Registers used:
 11031 ;;		wreg, status,2, status,0, pclath, cstack
 11032 ;; Tracked objects:
 11033 ;;		On entry : 0/0
 11034 ;;		On exit  : 0/0
 11035 ;;		Unchanged: 0/0
 11036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11037 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11038 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11040 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11041 ;;Total ram usage:       20 bytes
 11042 ;; Hardware stack levels used:    1
 11043 ;; Hardware stack levels required when called:    5
 11044 ;; This function calls:
 11045 ;;		___ftadd
 11046 ;;		___ftdiv
 11047 ;;		___ftge
 11048 ;;		___ftmul
 11049 ;;		___ftneg
 11050 ;;		___fttol
 11051 ;; This function is called by:
 11052 ;;		_updateModulationArray
 11053 ;;		_modSawRev
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           
 11058                           ;psect for function _modSaw
 11059  14BC                     _modSaw:	
 11060                           
 11061                           ;modulation.c: 124: double period = 1.0;
 11062                           
 11063                           ;incstack = 0
 11064                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 11065  14BC  3000               	movlw	0
 11066  14BD  0022               	movlb	2	; select bank2
 11067  14BE  00BF               	movwf	modSaw@period^(0+256)
 11068  14BF  3080               	movlw	128
 11069  14C0  00C0               	movwf	(modSaw@period+1)^(0+256)
 11070  14C1  303F               	movlw	63
 11071  14C2  00C1               	movwf	(modSaw@period+2)^(0+256)
 11072                           
 11073                           ;modulation.c: 125: double shift = 0;
 11074  14C3  3000               	movlw	0
 11075  14C4  00BC               	movwf	modSaw@shift^(0+256)
 11076  14C5  3000               	movlw	0
 11077  14C6  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11078  14C7  3000               	movlw	0
 11079  14C8  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11080                           
 11081                           ;modulation.c: 127: if(angle<=inflection) {
 11082  14C9  0831               	movf	modSaw@inflection^(0+256),w
 11083  14CA  0021               	movlb	1	; select bank1
 11084  14CB  00A0               	movwf	___ftge@ff1^(0+128)
 11085  14CC  0022               	movlb	2	; select bank2
 11086  14CD  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11087  14CE  0021               	movlb	1	; select bank1
 11088  14CF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11089  14D0  0022               	movlb	2	; select bank2
 11090  14D1  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11091  14D2  0021               	movlb	1	; select bank1
 11092  14D3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11093  14D4  0022               	movlb	2	; select bank2
 11094  14D5  082E               	movf	modSaw@angle^(0+256),w
 11095  14D6  0021               	movlb	1	; select bank1
 11096  14D7  00A3               	movwf	___ftge@ff2^(0+128)
 11097  14D8  0022               	movlb	2	; select bank2
 11098  14D9  082F               	movf	(modSaw@angle+1)^(0+256),w
 11099  14DA  0021               	movlb	1	; select bank1
 11100  14DB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11101  14DC  0022               	movlb	2	; select bank2
 11102  14DD  0830               	movf	(modSaw@angle+2)^(0+256),w
 11103  14DE  0021               	movlb	1	; select bank1
 11104  14DF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11105  14E0  31A0  209E  3194   	fcall	___ftge
 11106  14E3  1C03               	btfss	3,0
 11107  14E4  2CF1               	goto	l8354
 11108                           
 11109                           ;modulation.c: 128: period = 180.0/inflection;
 11110  14E5  0022               	movlb	2	; select bank2
 11111  14E6  0831               	movf	modSaw@inflection^(0+256),w
 11112  14E7  0021               	movlb	1	; select bank1
 11113  14E8  00CE               	movwf	___ftdiv@f2^(0+128)
 11114  14E9  0022               	movlb	2	; select bank2
 11115  14EA  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11116  14EB  0021               	movlb	1	; select bank1
 11117  14EC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11118  14ED  0022               	movlb	2	; select bank2
 11119  14EE  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11120  14EF  0021               	movlb	1	; select bank1
 11121  14F0  2DAC               	goto	L8
 11122  14F1                     l8354:	
 11123                           ;modulation.c: 129: } else {
 11124                           
 11125                           
 11126                           ;modulation.c: 130: shift = -(360-inflection*2)*(180/(360-inflection));
 11127  14F1  0022               	movlb	2	; select bank2
 11128  14F2  0831               	movf	modSaw@inflection^(0+256),w
 11129  14F3  0021               	movlb	1	; select bank1
 11130  14F4  00B1               	movwf	___ftmul@f2^(0+128)
 11131  14F5  0022               	movlb	2	; select bank2
 11132  14F6  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11133  14F7  0021               	movlb	1	; select bank1
 11134  14F8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11135  14F9  0022               	movlb	2	; select bank2
 11136  14FA  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11137  14FB  0021               	movlb	1	; select bank1
 11138  14FC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11139  14FD  3000               	movlw	0
 11140  14FE  00AE               	movwf	___ftmul@f1^(0+128)
 11141  14FF  3000               	movlw	0
 11142  1500  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11143  1501  3040               	movlw	64
 11144  1502  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11145  1503  319D  25B0  3194   	fcall	___ftmul
 11146  1506  0021               	movlb	1	; select bank1
 11147  1507  082E               	movf	?___ftmul^(0+128),w
 11148  1508  00BE               	movwf	___ftneg@f1^(0+128)
 11149  1509  082F               	movf	(?___ftmul+1)^(0+128),w
 11150  150A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11151  150B  0830               	movf	(?___ftmul+2)^(0+128),w
 11152  150C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11153  150D  31AC  24DF  3194   	fcall	___ftneg
 11154  1510  0021               	movlb	1	; select bank1
 11155  1511  083E               	movf	?___ftneg^(0+128),w
 11156  1512  00C4               	movwf	___ftadd@f2^(0+128)
 11157  1513  083F               	movf	(?___ftneg+1)^(0+128),w
 11158  1514  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11159  1515  0840               	movf	(?___ftneg+2)^(0+128),w
 11160  1516  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11161  1517  3000               	movlw	0
 11162  1518  00C1               	movwf	___ftadd@f1^(0+128)
 11163  1519  30B4               	movlw	180
 11164  151A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11165  151B  3043               	movlw	67
 11166  151C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11167  151D  3190  2035  3194   	fcall	___ftadd
 11168  1520  0021               	movlb	1	; select bank1
 11169  1521  0841               	movf	?___ftadd^(0+128),w
 11170  1522  0022               	movlb	2	; select bank2
 11171  1523  00B4               	movwf	_modSaw$2870^(0+256)
 11172  1524  0021               	movlb	1	; select bank1
 11173  1525  0842               	movf	(?___ftadd+1)^(0+128),w
 11174  1526  0022               	movlb	2	; select bank2
 11175  1527  00B5               	movwf	(_modSaw$2870+1)^(0+256)
 11176  1528  0021               	movlb	1	; select bank1
 11177  1529  0843               	movf	(?___ftadd+2)^(0+128),w
 11178  152A  0022               	movlb	2	; select bank2
 11179  152B  00B6               	movwf	(_modSaw$2870+2)^(0+256)
 11180                           
 11181                           ;modulation.c: 130: shift = -(360-inflection*2)*(180/(360-inflection));
 11182  152C  0834               	movf	_modSaw$2870^(0+256),w
 11183  152D  0021               	movlb	1	; select bank1
 11184  152E  00BE               	movwf	___ftneg@f1^(0+128)
 11185  152F  0022               	movlb	2	; select bank2
 11186  1530  0835               	movf	(_modSaw$2870+1)^(0+256),w
 11187  1531  0021               	movlb	1	; select bank1
 11188  1532  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11189  1533  0022               	movlb	2	; select bank2
 11190  1534  0836               	movf	(_modSaw$2870+2)^(0+256),w
 11191  1535  0021               	movlb	1	; select bank1
 11192  1536  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11193  1537  31AC  24DF  3194   	fcall	___ftneg
 11194  153A  0021               	movlb	1	; select bank1
 11195  153B  083E               	movf	?___ftneg^(0+128),w
 11196  153C  00AE               	movwf	___ftmul@f1^(0+128)
 11197  153D  083F               	movf	(?___ftneg+1)^(0+128),w
 11198  153E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11199  153F  0840               	movf	(?___ftneg+2)^(0+128),w
 11200  1540  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11201  1541  3000               	movlw	0
 11202  1542  00C1               	movwf	___ftadd@f1^(0+128)
 11203  1543  30B4               	movlw	180
 11204  1544  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11205  1545  3043               	movlw	67
 11206  1546  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11207  1547  0022               	movlb	2	; select bank2
 11208  1548  0831               	movf	modSaw@inflection^(0+256),w
 11209  1549  0021               	movlb	1	; select bank1
 11210  154A  00BE               	movwf	___ftneg@f1^(0+128)
 11211  154B  0022               	movlb	2	; select bank2
 11212  154C  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11213  154D  0021               	movlb	1	; select bank1
 11214  154E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11215  154F  0022               	movlb	2	; select bank2
 11216  1550  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11217  1551  0021               	movlb	1	; select bank1
 11218  1552  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11219  1553  31AC  24DF  3194   	fcall	___ftneg
 11220  1556  0021               	movlb	1	; select bank1
 11221  1557  083E               	movf	?___ftneg^(0+128),w
 11222  1558  00C4               	movwf	___ftadd@f2^(0+128)
 11223  1559  083F               	movf	(?___ftneg+1)^(0+128),w
 11224  155A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11225  155B  0840               	movf	(?___ftneg+2)^(0+128),w
 11226  155C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11227  155D  3190  2035  3194   	fcall	___ftadd
 11228  1560  0021               	movlb	1	; select bank1
 11229  1561  0841               	movf	?___ftadd^(0+128),w
 11230  1562  00CE               	movwf	___ftdiv@f2^(0+128)
 11231  1563  0842               	movf	(?___ftadd+1)^(0+128),w
 11232  1564  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11233  1565  0843               	movf	(?___ftadd+2)^(0+128),w
 11234  1566  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11235  1567  3000               	movlw	0
 11236  1568  00D1               	movwf	___ftdiv@f1^(0+128)
 11237  1569  3034               	movlw	52
 11238  156A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11239  156B  3043               	movlw	67
 11240  156C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11241  156D  319C  2454  3194   	fcall	___ftdiv
 11242  1570  0021               	movlb	1	; select bank1
 11243  1571  084E               	movf	?___ftdiv^(0+128),w
 11244  1572  00B1               	movwf	___ftmul@f2^(0+128)
 11245  1573  084F               	movf	(?___ftdiv+1)^(0+128),w
 11246  1574  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11247  1575  0850               	movf	(?___ftdiv+2)^(0+128),w
 11248  1576  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11249  1577  319D  25B0  3194   	fcall	___ftmul
 11250  157A  0021               	movlb	1	; select bank1
 11251  157B  082E               	movf	?___ftmul^(0+128),w
 11252  157C  0022               	movlb	2	; select bank2
 11253  157D  00BC               	movwf	modSaw@shift^(0+256)
 11254  157E  0021               	movlb	1	; select bank1
 11255  157F  082F               	movf	(?___ftmul+1)^(0+128),w
 11256  1580  0022               	movlb	2	; select bank2
 11257  1581  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11258  1582  0021               	movlb	1	; select bank1
 11259  1583  0830               	movf	(?___ftmul+2)^(0+128),w
 11260  1584  0022               	movlb	2	; select bank2
 11261  1585  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11262                           
 11263                           ;modulation.c: 131: period = 180/(360-inflection);
 11264  1586  3000               	movlw	0
 11265  1587  0021               	movlb	1	; select bank1
 11266  1588  00C1               	movwf	___ftadd@f1^(0+128)
 11267  1589  30B4               	movlw	180
 11268  158A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11269  158B  3043               	movlw	67
 11270  158C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11271  158D  0022               	movlb	2	; select bank2
 11272  158E  0831               	movf	modSaw@inflection^(0+256),w
 11273  158F  0021               	movlb	1	; select bank1
 11274  1590  00BE               	movwf	___ftneg@f1^(0+128)
 11275  1591  0022               	movlb	2	; select bank2
 11276  1592  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11277  1593  0021               	movlb	1	; select bank1
 11278  1594  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11279  1595  0022               	movlb	2	; select bank2
 11280  1596  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11281  1597  0021               	movlb	1	; select bank1
 11282  1598  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11283  1599  31AC  24DF  3194   	fcall	___ftneg
 11284  159C  0021               	movlb	1	; select bank1
 11285  159D  083E               	movf	?___ftneg^(0+128),w
 11286  159E  00C4               	movwf	___ftadd@f2^(0+128)
 11287  159F  083F               	movf	(?___ftneg+1)^(0+128),w
 11288  15A0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11289  15A1  0840               	movf	(?___ftneg+2)^(0+128),w
 11290  15A2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11291  15A3  3190  2035  3194   	fcall	___ftadd
 11292  15A6  0021               	movlb	1	; select bank1
 11293  15A7  0841               	movf	?___ftadd^(0+128),w
 11294  15A8  00CE               	movwf	___ftdiv@f2^(0+128)
 11295  15A9  0842               	movf	(?___ftadd+1)^(0+128),w
 11296  15AA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11297  15AB  0843               	movf	(?___ftadd+2)^(0+128),w
 11298  15AC                     L8:	
 11299  15AC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11300  15AD  3000               	movlw	0
 11301  15AE  00D1               	movwf	___ftdiv@f1^(0+128)
 11302  15AF  3034               	movlw	52
 11303  15B0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11304  15B1  3043               	movlw	67
 11305  15B2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11306  15B3  319C  2454  3194   	fcall	___ftdiv
 11307  15B6  0021               	movlb	1	; select bank1
 11308  15B7  084E               	movf	?___ftdiv^(0+128),w
 11309  15B8  0022               	movlb	2	; select bank2
 11310  15B9  00BF               	movwf	modSaw@period^(0+256)
 11311  15BA  0021               	movlb	1	; select bank1
 11312  15BB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11313  15BC  0022               	movlb	2	; select bank2
 11314  15BD  00C0               	movwf	(modSaw@period+1)^(0+256)
 11315  15BE  0021               	movlb	1	; select bank1
 11316  15BF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11317  15C0  0022               	movlb	2	; select bank2
 11318  15C1  00C1               	movwf	(modSaw@period+2)^(0+256)
 11319                           
 11320                           ;modulation.c: 132: }
 11321                           ;modulation.c: 134: int mod = (int)((period*angle-shift-180)*5/9);
 11322  15C2  083F               	movf	modSaw@period^(0+256),w
 11323  15C3  0021               	movlb	1	; select bank1
 11324  15C4  00B1               	movwf	___ftmul@f2^(0+128)
 11325  15C5  0022               	movlb	2	; select bank2
 11326  15C6  0840               	movf	(modSaw@period+1)^(0+256),w
 11327  15C7  0021               	movlb	1	; select bank1
 11328  15C8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11329  15C9  0022               	movlb	2	; select bank2
 11330  15CA  0841               	movf	(modSaw@period+2)^(0+256),w
 11331  15CB  0021               	movlb	1	; select bank1
 11332  15CC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11333  15CD  0022               	movlb	2	; select bank2
 11334  15CE  082E               	movf	modSaw@angle^(0+256),w
 11335  15CF  0021               	movlb	1	; select bank1
 11336  15D0  00AE               	movwf	___ftmul@f1^(0+128)
 11337  15D1  0022               	movlb	2	; select bank2
 11338  15D2  082F               	movf	(modSaw@angle+1)^(0+256),w
 11339  15D3  0021               	movlb	1	; select bank1
 11340  15D4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11341  15D5  0022               	movlb	2	; select bank2
 11342  15D6  0830               	movf	(modSaw@angle+2)^(0+256),w
 11343  15D7  0021               	movlb	1	; select bank1
 11344  15D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11345  15D9  319D  25B0  3194   	fcall	___ftmul
 11346  15DC  0021               	movlb	1	; select bank1
 11347  15DD  082E               	movf	?___ftmul^(0+128),w
 11348  15DE  00C4               	movwf	___ftadd@f2^(0+128)
 11349  15DF  082F               	movf	(?___ftmul+1)^(0+128),w
 11350  15E0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11351  15E1  0830               	movf	(?___ftmul+2)^(0+128),w
 11352  15E2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11353  15E3  0022               	movlb	2	; select bank2
 11354  15E4  083C               	movf	modSaw@shift^(0+256),w
 11355  15E5  0021               	movlb	1	; select bank1
 11356  15E6  00BE               	movwf	___ftneg@f1^(0+128)
 11357  15E7  0022               	movlb	2	; select bank2
 11358  15E8  083D               	movf	(modSaw@shift+1)^(0+256),w
 11359  15E9  0021               	movlb	1	; select bank1
 11360  15EA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11361  15EB  0022               	movlb	2	; select bank2
 11362  15EC  083E               	movf	(modSaw@shift+2)^(0+256),w
 11363  15ED  0021               	movlb	1	; select bank1
 11364  15EE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11365  15EF  31AC  24DF  3194   	fcall	___ftneg
 11366  15F2  0021               	movlb	1	; select bank1
 11367  15F3  083E               	movf	?___ftneg^(0+128),w
 11368  15F4  00C1               	movwf	___ftadd@f1^(0+128)
 11369  15F5  083F               	movf	(?___ftneg+1)^(0+128),w
 11370  15F6  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11371  15F7  0840               	movf	(?___ftneg+2)^(0+128),w
 11372  15F8  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11373  15F9  3190  2035  3194   	fcall	___ftadd
 11374  15FC  0021               	movlb	1	; select bank1
 11375  15FD  0841               	movf	?___ftadd^(0+128),w
 11376  15FE  0022               	movlb	2	; select bank2
 11377  15FF  00B7               	movwf	_modSaw$2871^(0+256)
 11378  1600  0021               	movlb	1	; select bank1
 11379  1601  0842               	movf	(?___ftadd+1)^(0+128),w
 11380  1602  0022               	movlb	2	; select bank2
 11381  1603  00B8               	movwf	(_modSaw$2871+1)^(0+256)
 11382  1604  0021               	movlb	1	; select bank1
 11383  1605  0843               	movf	(?___ftadd+2)^(0+128),w
 11384  1606  0022               	movlb	2	; select bank2
 11385  1607  00B9               	movwf	(_modSaw$2871+2)^(0+256)
 11386                           
 11387                           ;modulation.c: 132: }
 11388                           ;modulation.c: 134: int mod = (int)((period*angle-shift-180)*5/9);
 11389  1608  0837               	movf	_modSaw$2871^(0+256),w
 11390  1609  0021               	movlb	1	; select bank1
 11391  160A  00C4               	movwf	___ftadd@f2^(0+128)
 11392  160B  0022               	movlb	2	; select bank2
 11393  160C  0838               	movf	(_modSaw$2871+1)^(0+256),w
 11394  160D  0021               	movlb	1	; select bank1
 11395  160E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11396  160F  0022               	movlb	2	; select bank2
 11397  1610  0839               	movf	(_modSaw$2871+2)^(0+256),w
 11398  1611  0021               	movlb	1	; select bank1
 11399  1612  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11400  1613  3000               	movlw	0
 11401  1614  00C1               	movwf	___ftadd@f1^(0+128)
 11402  1615  3034               	movlw	52
 11403  1616  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11404  1617  30C3               	movlw	195
 11405  1618  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11406  1619  3190  2035  3194   	fcall	___ftadd
 11407  161C  0021               	movlb	1	; select bank1
 11408  161D  0841               	movf	?___ftadd^(0+128),w
 11409  161E  00B1               	movwf	___ftmul@f2^(0+128)
 11410  161F  0842               	movf	(?___ftadd+1)^(0+128),w
 11411  1620  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11412  1621  0843               	movf	(?___ftadd+2)^(0+128),w
 11413  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11414  1623  3000               	movlw	0
 11415  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11416  1625  30A0               	movlw	160
 11417  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11418  1627  3040               	movlw	64
 11419  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11420  1629  319D  25B0  3194   	fcall	___ftmul
 11421  162C  0021               	movlb	1	; select bank1
 11422  162D  082E               	movf	?___ftmul^(0+128),w
 11423  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11424  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11425  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11426  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11427  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11428  1633  3000               	movlw	0
 11429  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11430  1635  3010               	movlw	16
 11431  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11432  1637  3041               	movlw	65
 11433  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11434  1639  319C  2454  3194   	fcall	___ftdiv
 11435  163C  0021               	movlb	1	; select bank1
 11436  163D  084E               	movf	?___ftdiv^(0+128),w
 11437  163E  0022               	movlb	2	; select bank2
 11438  163F  00A0               	movwf	___fttol@f1^(0+256)
 11439  1640  0021               	movlb	1	; select bank1
 11440  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11441  1642  0022               	movlb	2	; select bank2
 11442  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11443  1644  0021               	movlb	1	; select bank1
 11444  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11445  1646  0022               	movlb	2	; select bank2
 11446  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11447  1648  3199  2182         	fcall	___fttol
 11448  164A  0022               	movlb	2	; select bank2
 11449  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11450  164C  00BB               	movwf	(modSaw@mod+1)^(0+256)
 11451  164D  0820               	movf	?___fttol^(0+256),w
 11452  164E  00BA               	movwf	modSaw@mod^(0+256)
 11453                           
 11454                           ;modulation.c: 135: return mod;
 11455  164F  083B               	movf	(modSaw@mod+1)^(0+256),w
 11456  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11457  1651  083A               	movf	modSaw@mod^(0+256),w
 11458  1652  00AE               	movwf	?_modSaw^(0+256)
 11459  1653  0008               	return
 11460  1654                     __end_of_modSaw:	
 11461                           
 11462                           	psect	text22
 11463  2458                     __ptext22:	
 11464 ;; *************** function ___awdiv *****************
 11465 ;; Defined at:
 11466 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11467 ;; Parameters:    Size  Location     Type
 11468 ;;  divisor         2    0[BANK1 ] int 
 11469 ;;  dividend        2    2[BANK1 ] int 
 11470 ;; Auto vars:     Size  Location     Type
 11471 ;;  quotient        2    7[BANK1 ] int 
 11472 ;;  sign            1    6[BANK1 ] unsigned char 
 11473 ;;  counter         1    5[BANK1 ] unsigned char 
 11474 ;; Return value:  Size  Location     Type
 11475 ;;                  2    0[BANK1 ] int 
 11476 ;; Registers used:
 11477 ;;		wreg, status,2, status,0
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11483 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11484 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11485 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11486 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11487 ;;Total ram usage:        9 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; Hardware stack levels required when called:    3
 11490 ;; This function calls:
 11491 ;;		Nothing
 11492 ;; This function is called by:
 11493 ;;		_updateModulationArray
 11494 ;;		_USARTWriteInt
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           
 11499                           ;psect for function ___awdiv
 11500  2458                     ___awdiv:	
 11501                           
 11502                           ;incstack = 0
 11503                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11504  2458  0021               	movlb	1	; select bank1
 11505  2459  01A6               	clrf	___awdiv@sign^(0+128)
 11506  245A  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11507  245B  2C63               	goto	l8740
 11508  245C  09A0               	comf	___awdiv@divisor^(0+128),f
 11509  245D  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11510  245E  0AA0               	incf	___awdiv@divisor^(0+128),f
 11511  245F  1903               	skipnz
 11512  2460  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11513  2461  01A6               	clrf	___awdiv@sign^(0+128)
 11514  2462  0AA6               	incf	___awdiv@sign^(0+128),f
 11515  2463                     l8740:	
 11516  2463  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11517  2464  2C6E               	goto	l8746
 11518  2465  09A2               	comf	___awdiv@dividend^(0+128),f
 11519  2466  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11520  2467  0AA2               	incf	___awdiv@dividend^(0+128),f
 11521  2468  1903               	skipnz
 11522  2469  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11523  246A  3001               	movlw	1
 11524  246B  00A4               	movwf	??___awdiv^(0+128)
 11525  246C  0824               	movf	??___awdiv^(0+128),w
 11526  246D  06A6               	xorwf	___awdiv@sign^(0+128),f
 11527  246E                     l8746:	
 11528  246E  01A7               	clrf	___awdiv@quotient^(0+128)
 11529  246F  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11530  2470  0820               	movf	___awdiv@divisor^(0+128),w
 11531  2471  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11532  2472  1903               	btfsc	3,2
 11533  2473  2C9D               	goto	l8768
 11534  2474  01A5               	clrf	___awdiv@counter^(0+128)
 11535  2475  0AA5               	incf	___awdiv@counter^(0+128),f
 11536  2476                     l8756:	
 11537  2476  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11538  2477  2C82               	goto	l8758
 11539  2478  3001               	movlw	1
 11540  2479                     u9285:	
 11541  2479  35A0               	lslf	___awdiv@divisor^(0+128),f
 11542  247A  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11543  247B  0B89               	decfsz	9,f
 11544  247C  2C79               	goto	u9285
 11545  247D  3001               	movlw	1
 11546  247E  00A4               	movwf	??___awdiv^(0+128)
 11547  247F  0824               	movf	??___awdiv^(0+128),w
 11548  2480  07A5               	addwf	___awdiv@counter^(0+128),f
 11549  2481  2C76               	goto	l8756
 11550  2482                     l8758:	
 11551  2482  3001               	movlw	1
 11552  2483                     u9305:	
 11553  2483  35A7               	lslf	___awdiv@quotient^(0+128),f
 11554  2484  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11555  2485  0B89               	decfsz	9,f
 11556  2486  2C83               	goto	u9305
 11557  2487  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11558  2488  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11559  2489  1D03               	skipz
 11560  248A  2C8D               	goto	u9315
 11561  248B  0820               	movf	___awdiv@divisor^(0+128),w
 11562  248C  0222               	subwf	___awdiv@dividend^(0+128),w
 11563  248D                     u9315:	
 11564  248D  1C03               	skipc
 11565  248E  2C94               	goto	l8764
 11566  248F  0820               	movf	___awdiv@divisor^(0+128),w
 11567  2490  02A2               	subwf	___awdiv@dividend^(0+128),f
 11568  2491  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11569  2492  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11570  2493  1427               	bsf	___awdiv@quotient^(0+128),0
 11571  2494                     l8764:	
 11572  2494  3001               	movlw	1
 11573  2495                     u9325:	
 11574  2495  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11575  2496  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11576  2497  0B89               	decfsz	9,f
 11577  2498  2C95               	goto	u9325
 11578  2499  3001               	movlw	1
 11579  249A  02A5               	subwf	___awdiv@counter^(0+128),f
 11580  249B  1D03               	btfss	3,2
 11581  249C  2C82               	goto	l8758
 11582  249D                     l8768:	
 11583  249D  0826               	movf	___awdiv@sign^(0+128),w
 11584  249E  1903               	btfsc	3,2
 11585  249F  2CA5               	goto	l8772
 11586  24A0  09A7               	comf	___awdiv@quotient^(0+128),f
 11587  24A1  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11588  24A2  0AA7               	incf	___awdiv@quotient^(0+128),f
 11589  24A3  1903               	skipnz
 11590  24A4  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11591  24A5                     l8772:	
 11592  24A5  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11593  24A6  00A1               	movwf	(?___awdiv+1)^(0+128)
 11594  24A7  0827               	movf	___awdiv@quotient^(0+128),w
 11595  24A8  00A0               	movwf	?___awdiv^(0+128)
 11596  24A9  0008               	return
 11597  24AA                     __end_of___awdiv:	
 11598                           
 11599                           	psect	text23
 11600  1A94                     __ptext23:	
 11601 ;; *************** function _set_subdivision *****************
 11602 ;; Defined at:
 11603 ;;		line 77 in file "user.c"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;  x               2   14[BANK2 ] int 
 11606 ;;  y               2   16[BANK2 ] int 
 11607 ;; Auto vars:     Size  Location     Type
 11608 ;;  scalar          3   18[BANK2 ] float 
 11609 ;;  tmpX            2   21[BANK2 ] int 
 11610 ;; Return value:  Size  Location     Type
 11611 ;;                  2   14[BANK2 ] int 
 11612 ;; Registers used:
 11613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11614 ;; Tracked objects:
 11615 ;;		On entry : 0/0
 11616 ;;		On exit  : 0/0
 11617 ;;		Unchanged: 0/0
 11618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11619 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11620 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11622 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11623 ;;Total ram usage:        9 bytes
 11624 ;; Hardware stack levels used:    1
 11625 ;; Hardware stack levels required when called:    5
 11626 ;; This function calls:
 11627 ;;		___awtoft
 11628 ;;		___ftmul
 11629 ;;		___fttol
 11630 ;; This function is called by:
 11631 ;;		_main
 11632 ;; This function uses a non-reentrant model
 11633 ;;
 11634                           
 11635                           
 11636                           ;psect for function _set_subdivision
 11637  1A94                     _set_subdivision:	
 11638                           
 11639                           ;user.c: 81: adjust_mod_delay = 0;
 11640                           
 11641                           ;incstack = 0
 11642                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11643  1A94  0023               	movlb	3	; select bank3
 11644  1A95  01BE               	clrf	_adjust_mod_delay^(0+384)
 11645                           
 11646                           ;user.c: 82: int tmpX = x;
 11647  1A96  0022               	movlb	2	; select bank2
 11648  1A97  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11649  1A98  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11650  1A99  082E               	movf	set_subdivision@x^(0+256),w
 11651  1A9A  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11652                           
 11653                           ;user.c: 83: float scalar = 1.0;
 11654  1A9B  3000               	movlw	0
 11655  1A9C  00B2               	movwf	set_subdivision@scalar^(0+256)
 11656  1A9D  3080               	movlw	128
 11657  1A9E  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11658  1A9F  303F               	movlw	63
 11659  1AA0  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11660                           
 11661                           ;user.c: 85: switch (y) {
 11662  1AA1  2AC1               	goto	l9282
 11663  1AA2                     l9268:	
 11664                           ;user.c: 86: case 1:
 11665                           
 11666                           
 11667                           ;user.c: 87: scalar = 2.0;
 11668  1AA2  3000               	movlw	0
 11669  1AA3  00B2               	movwf	set_subdivision@scalar^(0+256)
 11670  1AA4  3000               	movlw	0
 11671  1AA5  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11672  1AA6  3040               	movlw	64
 11673  1AA7  2ABF               	goto	L13
 11674  1AA8                     l9270:	
 11675                           ;user.c: 89: case 2:
 11676                           
 11677                           ;user.c: 88: break;
 11678                           
 11679                           
 11680                           ;user.c: 90: scalar = 0.6666;
 11681  1AA8  30A6               	movlw	166
 11682  1AA9  00B2               	movwf	set_subdivision@scalar^(0+256)
 11683  1AAA  302A               	movlw	42
 11684  1AAB  2ABD               	goto	L14
 11685  1AAC                     l9272:	
 11686                           ;user.c: 92: case 3:
 11687                           
 11688                           ;user.c: 91: break;
 11689                           
 11690                           
 11691                           ;user.c: 93: scalar = .5;
 11692  1AAC  3000               	movlw	0
 11693  1AAD  00B2               	movwf	set_subdivision@scalar^(0+256)
 11694  1AAE  3000               	movlw	0
 11695  1AAF  2ABD               	goto	L14
 11696  1AB0                     l9274:	
 11697                           ;user.c: 95: case 4:
 11698                           
 11699                           ;user.c: 94: break;
 11700                           
 11701                           
 11702                           ;user.c: 96: scalar = 0.3333;
 11703  1AB0  30A6               	movlw	166
 11704  1AB1  00B2               	movwf	set_subdivision@scalar^(0+256)
 11705  1AB2  30AA               	movlw	170
 11706  1AB3  2AB7               	goto	L15
 11707  1AB4                     l9276:	
 11708                           ;user.c: 98: case 5:
 11709                           
 11710                           ;user.c: 97: break;
 11711                           
 11712                           
 11713                           ;user.c: 99: scalar = 0.25;
 11714  1AB4  3000               	movlw	0
 11715  1AB5  00B2               	movwf	set_subdivision@scalar^(0+256)
 11716  1AB6  3080               	movlw	128
 11717  1AB7                     L15:	
 11718  1AB7  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11719  1AB8  303E               	movlw	62
 11720  1AB9  2ABF               	goto	L13
 11721  1ABA                     l9278:	
 11722                           ;user.c: 101: case 6:
 11723                           
 11724                           ;user.c: 100: break;
 11725                           
 11726                           
 11727                           ;user.c: 102: scalar = 1.0;
 11728  1ABA  3000               	movlw	0
 11729  1ABB  00B2               	movwf	set_subdivision@scalar^(0+256)
 11730  1ABC  3080               	movlw	128
 11731  1ABD                     L14:	
 11732  1ABD  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11733  1ABE  303F               	movlw	63
 11734  1ABF                     L13:	
 11735  1ABF  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11736                           
 11737                           ;user.c: 104: }
 11738                           
 11739                           ;user.c: 103: break;
 11740  1AC0  2ADA               	goto	l9284
 11741  1AC1                     l9282:	
 11742                           
 11743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11744                           ; Switch size 1, requested type "space"
 11745                           ; Number of cases is 1, Range of values is 0 to 0
 11746                           ; switch strategies available:
 11747                           ; Name         Instructions Cycles
 11748                           ; simple_byte            4     3 (average)
 11749                           ; direct_byte            8     6 (fixed)
 11750                           ; jumptable            260     6 (fixed)
 11751                           ;	Chosen strategy is simple_byte
 11752  1AC1  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11753  1AC2  3A00               	xorlw	0	; case 0
 11754  1AC3  1903               	skipnz
 11755  1AC4  2AC6               	goto	l9952
 11756  1AC5  2ADA               	goto	l9284
 11757  1AC6                     l9952:	
 11758                           
 11759                           ; Switch size 1, requested type "space"
 11760                           ; Number of cases is 6, Range of values is 1 to 6
 11761                           ; switch strategies available:
 11762                           ; Name         Instructions Cycles
 11763                           ; simple_byte           19    10 (average)
 11764                           ; direct_byte           21     9 (fixed)
 11765                           ; jumptable            263     9 (fixed)
 11766                           ;	Chosen strategy is simple_byte
 11767  1AC6  0830               	movf	set_subdivision@y^(0+256),w
 11768  1AC7  3A01               	xorlw	1	; case 1
 11769  1AC8  1903               	skipnz
 11770  1AC9  2AA2               	goto	l9268
 11771  1ACA  3A03               	xorlw	3	; case 2
 11772  1ACB  1903               	skipnz
 11773  1ACC  2AA8               	goto	l9270
 11774  1ACD  3A01               	xorlw	1	; case 3
 11775  1ACE  1903               	skipnz
 11776  1ACF  2AAC               	goto	l9272
 11777  1AD0  3A07               	xorlw	7	; case 4
 11778  1AD1  1903               	skipnz
 11779  1AD2  2AB0               	goto	l9274
 11780  1AD3  3A01               	xorlw	1	; case 5
 11781  1AD4  1903               	skipnz
 11782  1AD5  2AB4               	goto	l9276
 11783  1AD6  3A03               	xorlw	3	; case 6
 11784  1AD7  1903               	skipnz
 11785  1AD8  2ABA               	goto	l9278
 11786  1AD9  2ADA               	goto	l9284
 11787  1ADA                     l9284:	
 11788                           
 11789                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11790  1ADA  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11791  1ADB  0021               	movlb	1	; select bank1
 11792  1ADC  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11793  1ADD  0022               	movlb	2	; select bank2
 11794  1ADE  0835               	movf	set_subdivision@tmpX^(0+256),w
 11795  1ADF  0021               	movlb	1	; select bank1
 11796  1AE0  00A8               	movwf	___awtoft@c^(0+128)
 11797  1AE1  31AE  262D  319A   	fcall	___awtoft
 11798  1AE4  0021               	movlb	1	; select bank1
 11799  1AE5  0828               	movf	?___awtoft^(0+128),w
 11800  1AE6  00B1               	movwf	___ftmul@f2^(0+128)
 11801  1AE7  0829               	movf	(?___awtoft+1)^(0+128),w
 11802  1AE8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11803  1AE9  082A               	movf	(?___awtoft+2)^(0+128),w
 11804  1AEA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11805  1AEB  0022               	movlb	2	; select bank2
 11806  1AEC  0832               	movf	set_subdivision@scalar^(0+256),w
 11807  1AED  0021               	movlb	1	; select bank1
 11808  1AEE  00AE               	movwf	___ftmul@f1^(0+128)
 11809  1AEF  0022               	movlb	2	; select bank2
 11810  1AF0  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11811  1AF1  0021               	movlb	1	; select bank1
 11812  1AF2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11813  1AF3  0022               	movlb	2	; select bank2
 11814  1AF4  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11815  1AF5  0021               	movlb	1	; select bank1
 11816  1AF6  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11817  1AF7  319D  25B0  319A   	fcall	___ftmul
 11818  1AFA  0021               	movlb	1	; select bank1
 11819  1AFB  082E               	movf	?___ftmul^(0+128),w
 11820  1AFC  0022               	movlb	2	; select bank2
 11821  1AFD  00A0               	movwf	___fttol@f1^(0+256)
 11822  1AFE  0021               	movlb	1	; select bank1
 11823  1AFF  082F               	movf	(?___ftmul+1)^(0+128),w
 11824  1B00  0022               	movlb	2	; select bank2
 11825  1B01  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11826  1B02  0021               	movlb	1	; select bank1
 11827  1B03  0830               	movf	(?___ftmul+2)^(0+128),w
 11828  1B04  0022               	movlb	2	; select bank2
 11829  1B05  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11830  1B06  3199  2182  319A   	fcall	___fttol
 11831  1B09  0022               	movlb	2	; select bank2
 11832  1B0A  0821               	movf	(?___fttol^(0+256)+1),w
 11833  1B0B  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11834  1B0C  0820               	movf	?___fttol^(0+256),w
 11835  1B0D  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11836                           
 11837                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11838  1B0E  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11839  1B0F  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11840  1B10  1D03               	skipz
 11841  1B11  2B14               	goto	u10265
 11842  1B12  0835               	movf	set_subdivision@tmpX^(0+256),w
 11843  1B13  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11844  1B14                     u10265:	
 11845  1B14  1903               	skipnz
 11846  1B15  2B19               	goto	l9290
 11847                           
 11848                           ;user.c: 109: adjust_mod_delay = 1;
 11849  1B16  0023               	movlb	3	; select bank3
 11850  1B17  01BE               	clrf	_adjust_mod_delay^(0+384)
 11851  1B18  0ABE               	incf	_adjust_mod_delay^(0+384),f
 11852  1B19                     l9290:	
 11853                           
 11854                           ;user.c: 110: }
 11855                           ;user.c: 112: return tmpX;
 11856  1B19  0022               	movlb	2	; select bank2
 11857  1B1A  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11858  1B1B  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11859  1B1C  0835               	movf	set_subdivision@tmpX^(0+256),w
 11860  1B1D  00AE               	movwf	?_set_subdivision^(0+256)
 11861  1B1E  0008               	return
 11862  1B1F                     __end_of_set_subdivision:	
 11863                           
 11864                           	psect	text24
 11865  1E64                     __ptext24:	
 11866 ;; *************** function _scaleiA10kPot *****************
 11867 ;; Defined at:
 11868 ;;		line 211 in file "user.c"
 11869 ;; Parameters:    Size  Location     Type
 11870 ;;  input           3   71[BANK2 ] int 
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;  pwm             3    0[BANK3 ] float 
 11873 ;; Return value:  Size  Location     Type
 11874 ;;                  2   71[BANK2 ] int 
 11875 ;; Registers used:
 11876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11877 ;; Tracked objects:
 11878 ;;		On entry : 0/0
 11879 ;;		On exit  : 0/0
 11880 ;;		Unchanged: 0/0
 11881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11882 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11883 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11885 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11886 ;;Total ram usage:       12 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:    8
 11889 ;; This function calls:
 11890 ;;		___ftadd
 11891 ;;		___ftdiv
 11892 ;;		___ftge
 11893 ;;		___ftmul
 11894 ;;		___ftneg
 11895 ;;		___fttol
 11896 ;;		_pow
 11897 ;; This function is called by:
 11898 ;;		_main
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           
 11903                           ;psect for function _scaleiA10kPot
 11904  1E64                     _scaleiA10kPot:	
 11905                           
 11906                           ;user.c: 214: if (input < 1.0) {return 0;}
 11907                           
 11908                           ;incstack = 0
 11909                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11910  1E64  0022               	movlb	2	; select bank2
 11911  1E65  0867               	movf	scaleiA10kPot@input^(0+256),w
 11912  1E66  0021               	movlb	1	; select bank1
 11913  1E67  00A0               	movwf	___ftge@ff1^(0+128)
 11914  1E68  0022               	movlb	2	; select bank2
 11915  1E69  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11916  1E6A  0021               	movlb	1	; select bank1
 11917  1E6B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11918  1E6C  0022               	movlb	2	; select bank2
 11919  1E6D  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11920  1E6E  0021               	movlb	1	; select bank1
 11921  1E6F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11922  1E70  3000               	movlw	0
 11923  1E71  00A3               	movwf	___ftge@ff2^(0+128)
 11924  1E72  3080               	movlw	128
 11925  1E73  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11926  1E74  303F               	movlw	63
 11927  1E75  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11928  1E76  31A0  209E  319E   	fcall	___ftge
 11929  1E79  1803               	btfsc	3,0
 11930  1E7A  2E7F               	goto	l9228
 11931  1E7B  0022               	movlb	2	; select bank2
 11932  1E7C  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11933  1E7D  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11934  1E7E  0008               	return
 11935  1E7F                     l9228:	
 11936                           
 11937                           ;user.c: 216: if (input >= 1022.0) {return 255;}
 11938  1E7F  0022               	movlb	2	; select bank2
 11939  1E80  0867               	movf	scaleiA10kPot@input^(0+256),w
 11940  1E81  0021               	movlb	1	; select bank1
 11941  1E82  00A0               	movwf	___ftge@ff1^(0+128)
 11942  1E83  0022               	movlb	2	; select bank2
 11943  1E84  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11944  1E85  0021               	movlb	1	; select bank1
 11945  1E86  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11946  1E87  0022               	movlb	2	; select bank2
 11947  1E88  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11948  1E89  0021               	movlb	1	; select bank1
 11949  1E8A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11950  1E8B  3080               	movlw	128
 11951  1E8C  00A3               	movwf	___ftge@ff2^(0+128)
 11952  1E8D  307F               	movlw	127
 11953  1E8E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11954  1E8F  3044               	movlw	68
 11955  1E90  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11956  1E91  31A0  209E  319E   	fcall	___ftge
 11957  1E94  1C03               	btfss	3,0
 11958  1E95  2E9C               	goto	l9234
 11959  1E96  30FF               	movlw	255
 11960  1E97  0022               	movlb	2	; select bank2
 11961  1E98  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11962  1E99  3000               	movlw	0
 11963  1E9A  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11964  1E9B  0008               	return
 11965  1E9C                     l9234:	
 11966                           
 11967                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11968  1E9C  3000               	movlw	0
 11969  1E9D  0021               	movlb	1	; select bank1
 11970  1E9E  00C1               	movwf	___ftadd@f1^(0+128)
 11971  1E9F  3080               	movlw	128
 11972  1EA0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11973  1EA1  303F               	movlw	63
 11974  1EA2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11975  1EA3  0022               	movlb	2	; select bank2
 11976  1EA4  0867               	movf	scaleiA10kPot@input^(0+256),w
 11977  1EA5  0021               	movlb	1	; select bank1
 11978  1EA6  00D1               	movwf	___ftdiv@f1^(0+128)
 11979  1EA7  0022               	movlb	2	; select bank2
 11980  1EA8  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11981  1EA9  0021               	movlb	1	; select bank1
 11982  1EAA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11983  1EAB  0022               	movlb	2	; select bank2
 11984  1EAC  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11985  1EAD  0021               	movlb	1	; select bank1
 11986  1EAE  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11987  1EAF  30C0               	movlw	192
 11988  1EB0  00CE               	movwf	___ftdiv@f2^(0+128)
 11989  1EB1  307F               	movlw	127
 11990  1EB2  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11991  1EB3  3044               	movlw	68
 11992  1EB4  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11993  1EB5  319C  2454  319E   	fcall	___ftdiv
 11994  1EB8  0021               	movlb	1	; select bank1
 11995  1EB9  084E               	movf	?___ftdiv^(0+128),w
 11996  1EBA  00BE               	movwf	___ftneg@f1^(0+128)
 11997  1EBB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11998  1EBC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11999  1EBD  0850               	movf	(?___ftdiv+2)^(0+128),w
 12000  1EBE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12001  1EBF  31AC  24DF  319E   	fcall	___ftneg
 12002  1EC2  0021               	movlb	1	; select bank1
 12003  1EC3  083E               	movf	?___ftneg^(0+128),w
 12004  1EC4  00C4               	movwf	___ftadd@f2^(0+128)
 12005  1EC5  083F               	movf	(?___ftneg+1)^(0+128),w
 12006  1EC6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12007  1EC7  0840               	movf	(?___ftneg+2)^(0+128),w
 12008  1EC8  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12009  1EC9  3190  2035  319E   	fcall	___ftadd
 12010  1ECC  0021               	movlb	1	; select bank1
 12011  1ECD  0841               	movf	?___ftadd^(0+128),w
 12012  1ECE  0023               	movlb	3	; select bank3
 12013  1ECF  00EA               	movwf	_scaleiA10kPot$2862^(0+384)
 12014  1ED0  0021               	movlb	1	; select bank1
 12015  1ED1  0842               	movf	(?___ftadd+1)^(0+128),w
 12016  1ED2  0023               	movlb	3	; select bank3
 12017  1ED3  00EB               	movwf	(_scaleiA10kPot$2862+1)^(0+384)
 12018  1ED4  0021               	movlb	1	; select bank1
 12019  1ED5  0843               	movf	(?___ftadd+2)^(0+128),w
 12020  1ED6  0023               	movlb	3	; select bank3
 12021  1ED7  00EC               	movwf	(_scaleiA10kPot$2862+2)^(0+384)
 12022                           
 12023                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12024  1ED8  306A               	movlw	106
 12025  1ED9  0022               	movlb	2	; select bank2
 12026  1EDA  00D8               	movwf	pow@y^(0+256)
 12027  1EDB  309C               	movlw	156
 12028  1EDC  00D9               	movwf	(pow@y+1)^(0+256)
 12029  1EDD  30BF               	movlw	191
 12030  1EDE  00DA               	movwf	(pow@y+2)^(0+256)
 12031  1EDF  0023               	movlb	3	; select bank3
 12032  1EE0  086A               	movf	_scaleiA10kPot$2862^(0+384),w
 12033  1EE1  0022               	movlb	2	; select bank2
 12034  1EE2  00D5               	movwf	pow@x^(0+256)
 12035  1EE3  0023               	movlb	3	; select bank3
 12036  1EE4  086B               	movf	(_scaleiA10kPot$2862+1)^(0+384),w
 12037  1EE5  0022               	movlb	2	; select bank2
 12038  1EE6  00D6               	movwf	(pow@x+1)^(0+256)
 12039  1EE7  0023               	movlb	3	; select bank3
 12040  1EE8  086C               	movf	(_scaleiA10kPot$2862+2)^(0+384),w
 12041  1EE9  0022               	movlb	2	; select bank2
 12042  1EEA  00D7               	movwf	(pow@x+2)^(0+256)
 12043  1EEB  3191  212B  319E   	fcall	_pow
 12044  1EEE  0022               	movlb	2	; select bank2
 12045  1EEF  0855               	movf	?_pow^(0+256),w
 12046  1EF0  0023               	movlb	3	; select bank3
 12047  1EF1  00ED               	movwf	_scaleiA10kPot$2863^(0+384)
 12048  1EF2  0022               	movlb	2	; select bank2
 12049  1EF3  0856               	movf	(?_pow+1)^(0+256),w
 12050  1EF4  0023               	movlb	3	; select bank3
 12051  1EF5  00EE               	movwf	(_scaleiA10kPot$2863+1)^(0+384)
 12052  1EF6  0022               	movlb	2	; select bank2
 12053  1EF7  0857               	movf	(?_pow+2)^(0+256),w
 12054  1EF8  0023               	movlb	3	; select bank3
 12055  1EF9  00EF               	movwf	(_scaleiA10kPot$2863+2)^(0+384)
 12056                           
 12057                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12058  1EFA  30E3               	movlw	227
 12059  1EFB  0021               	movlb	1	; select bank1
 12060  1EFC  00AE               	movwf	___ftmul@f1^(0+128)
 12061  1EFD  300B               	movlw	11
 12062  1EFE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12063  1EFF  3041               	movlw	65
 12064  1F00  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12065  1F01  0023               	movlb	3	; select bank3
 12066  1F02  086D               	movf	_scaleiA10kPot$2863^(0+384),w
 12067  1F03  0021               	movlb	1	; select bank1
 12068  1F04  00B1               	movwf	___ftmul@f2^(0+128)
 12069  1F05  0023               	movlb	3	; select bank3
 12070  1F06  086E               	movf	(_scaleiA10kPot$2863+1)^(0+384),w
 12071  1F07  0021               	movlb	1	; select bank1
 12072  1F08  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12073  1F09  0023               	movlb	3	; select bank3
 12074  1F0A  086F               	movf	(_scaleiA10kPot$2863+2)^(0+384),w
 12075  1F0B  0021               	movlb	1	; select bank1
 12076  1F0C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12077  1F0D  319D  25B0  319E   	fcall	___ftmul
 12078  1F10  0021               	movlb	1	; select bank1
 12079  1F11  082E               	movf	?___ftmul^(0+128),w
 12080  1F12  0023               	movlb	3	; select bank3
 12081  1F13  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 12082  1F14  0021               	movlb	1	; select bank1
 12083  1F15  082F               	movf	(?___ftmul+1)^(0+128),w
 12084  1F16  0023               	movlb	3	; select bank3
 12085  1F17  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12086  1F18  0021               	movlb	1	; select bank1
 12087  1F19  0830               	movf	(?___ftmul+2)^(0+128),w
 12088  1F1A  0023               	movlb	3	; select bank3
 12089  1F1B  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12090                           
 12091                           ;user.c: 219: return (int)(pwm);
 12092  1F1C  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 12093  1F1D  0022               	movlb	2	; select bank2
 12094  1F1E  00A0               	movwf	___fttol@f1^(0+256)
 12095  1F1F  0023               	movlb	3	; select bank3
 12096  1F20  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12097  1F21  0022               	movlb	2	; select bank2
 12098  1F22  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12099  1F23  0023               	movlb	3	; select bank3
 12100  1F24  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12101  1F25  0022               	movlb	2	; select bank2
 12102  1F26  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12103  1F27  3199  2182         	fcall	___fttol
 12104  1F29  0022               	movlb	2	; select bank2
 12105  1F2A  0821               	movf	(?___fttol^(0+256)+1),w
 12106  1F2B  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12107  1F2C  0820               	movf	?___fttol^(0+256),w
 12108  1F2D  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12109  1F2E  0008               	return
 12110  1F2F                     __end_of_scaleiA10kPot:	
 12111                           
 12112                           	psect	text25
 12113  1BB6                     __ptext25:	
 12114 ;; *************** function _scaleA10kPot *****************
 12115 ;; Defined at:
 12116 ;;		line 202 in file "user.c"
 12117 ;; Parameters:    Size  Location     Type
 12118 ;;  input           3   71[BANK2 ] int 
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;  pwm             3    0[BANK3 ] float 
 12121 ;; Return value:  Size  Location     Type
 12122 ;;                  2   71[BANK2 ] int 
 12123 ;; Registers used:
 12124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12125 ;; Tracked objects:
 12126 ;;		On entry : 0/0
 12127 ;;		On exit  : 0/0
 12128 ;;		Unchanged: 0/0
 12129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12130 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12131 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12133 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12134 ;;Total ram usage:       12 bytes
 12135 ;; Hardware stack levels used:    1
 12136 ;; Hardware stack levels required when called:    8
 12137 ;; This function calls:
 12138 ;;		___ftdiv
 12139 ;;		___ftge
 12140 ;;		___ftmul
 12141 ;;		___fttol
 12142 ;;		_pow
 12143 ;; This function is called by:
 12144 ;;		_main
 12145 ;; This function uses a non-reentrant model
 12146 ;;
 12147                           
 12148                           
 12149                           ;psect for function _scaleA10kPot
 12150  1BB6                     _scaleA10kPot:	
 12151                           
 12152                           ;user.c: 204: if (input == 0.0) {return 255;}
 12153                           
 12154                           ;incstack = 0
 12155                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12156  1BB6  0022               	movlb	2	; select bank2
 12157  1BB7  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12158  1BB8  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12159  1BB9  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12160  1BBA  1D03               	skipz
 12161  1BBB  2BC1               	goto	l9206
 12162  1BBC  30FF               	movlw	255
 12163  1BBD  00E7               	movwf	?_scaleA10kPot^(0+256)
 12164  1BBE  3000               	movlw	0
 12165  1BBF  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12166  1BC0  0008               	return
 12167  1BC1                     l9206:	
 12168                           
 12169                           ;user.c: 205: if (input >= 1022.0) {return 0;}
 12170  1BC1  0867               	movf	scaleA10kPot@input^(0+256),w
 12171  1BC2  0021               	movlb	1	; select bank1
 12172  1BC3  00A0               	movwf	___ftge@ff1^(0+128)
 12173  1BC4  0022               	movlb	2	; select bank2
 12174  1BC5  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12175  1BC6  0021               	movlb	1	; select bank1
 12176  1BC7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12177  1BC8  0022               	movlb	2	; select bank2
 12178  1BC9  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12179  1BCA  0021               	movlb	1	; select bank1
 12180  1BCB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12181  1BCC  3080               	movlw	128
 12182  1BCD  00A3               	movwf	___ftge@ff2^(0+128)
 12183  1BCE  307F               	movlw	127
 12184  1BCF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12185  1BD0  3044               	movlw	68
 12186  1BD1  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12187  1BD2  31A0  209E  319B   	fcall	___ftge
 12188  1BD5  1C03               	btfss	3,0
 12189  1BD6  2BDB               	goto	l9212
 12190  1BD7  0022               	movlb	2	; select bank2
 12191  1BD8  01E7               	clrf	?_scaleA10kPot^(0+256)
 12192  1BD9  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12193  1BDA  0008               	return
 12194  1BDB                     l9212:	
 12195                           
 12196                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12197  1BDB  30C0               	movlw	192
 12198  1BDC  0021               	movlb	1	; select bank1
 12199  1BDD  00CE               	movwf	___ftdiv@f2^(0+128)
 12200  1BDE  307F               	movlw	127
 12201  1BDF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12202  1BE0  3044               	movlw	68
 12203  1BE1  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12204  1BE2  0022               	movlb	2	; select bank2
 12205  1BE3  0867               	movf	scaleA10kPot@input^(0+256),w
 12206  1BE4  0021               	movlb	1	; select bank1
 12207  1BE5  00D1               	movwf	___ftdiv@f1^(0+128)
 12208  1BE6  0022               	movlb	2	; select bank2
 12209  1BE7  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12210  1BE8  0021               	movlb	1	; select bank1
 12211  1BE9  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12212  1BEA  0022               	movlb	2	; select bank2
 12213  1BEB  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12214  1BEC  0021               	movlb	1	; select bank1
 12215  1BED  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12216  1BEE  319C  2454  319B   	fcall	___ftdiv
 12217  1BF1  0021               	movlb	1	; select bank1
 12218  1BF2  084E               	movf	?___ftdiv^(0+128),w
 12219  1BF3  0023               	movlb	3	; select bank3
 12220  1BF4  00EA               	movwf	_scaleA10kPot$2860^(0+384)
 12221  1BF5  0021               	movlb	1	; select bank1
 12222  1BF6  084F               	movf	(?___ftdiv+1)^(0+128),w
 12223  1BF7  0023               	movlb	3	; select bank3
 12224  1BF8  00EB               	movwf	(_scaleA10kPot$2860+1)^(0+384)
 12225  1BF9  0021               	movlb	1	; select bank1
 12226  1BFA  0850               	movf	(?___ftdiv+2)^(0+128),w
 12227  1BFB  0023               	movlb	3	; select bank3
 12228  1BFC  00EC               	movwf	(_scaleA10kPot$2860+2)^(0+384)
 12229                           
 12230                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12231  1BFD  306A               	movlw	106
 12232  1BFE  0022               	movlb	2	; select bank2
 12233  1BFF  00D8               	movwf	pow@y^(0+256)
 12234  1C00  309C               	movlw	156
 12235  1C01  00D9               	movwf	(pow@y+1)^(0+256)
 12236  1C02  30BF               	movlw	191
 12237  1C03  00DA               	movwf	(pow@y+2)^(0+256)
 12238  1C04  0023               	movlb	3	; select bank3
 12239  1C05  086A               	movf	_scaleA10kPot$2860^(0+384),w
 12240  1C06  0022               	movlb	2	; select bank2
 12241  1C07  00D5               	movwf	pow@x^(0+256)
 12242  1C08  0023               	movlb	3	; select bank3
 12243  1C09  086B               	movf	(_scaleA10kPot$2860+1)^(0+384),w
 12244  1C0A  0022               	movlb	2	; select bank2
 12245  1C0B  00D6               	movwf	(pow@x+1)^(0+256)
 12246  1C0C  0023               	movlb	3	; select bank3
 12247  1C0D  086C               	movf	(_scaleA10kPot$2860+2)^(0+384),w
 12248  1C0E  0022               	movlb	2	; select bank2
 12249  1C0F  00D7               	movwf	(pow@x+2)^(0+256)
 12250  1C10  3191  212B  319B   	fcall	_pow
 12251  1C13  0022               	movlb	2	; select bank2
 12252  1C14  0855               	movf	?_pow^(0+256),w
 12253  1C15  0023               	movlb	3	; select bank3
 12254  1C16  00ED               	movwf	_scaleA10kPot$2861^(0+384)
 12255  1C17  0022               	movlb	2	; select bank2
 12256  1C18  0856               	movf	(?_pow+1)^(0+256),w
 12257  1C19  0023               	movlb	3	; select bank3
 12258  1C1A  00EE               	movwf	(_scaleA10kPot$2861+1)^(0+384)
 12259  1C1B  0022               	movlb	2	; select bank2
 12260  1C1C  0857               	movf	(?_pow+2)^(0+256),w
 12261  1C1D  0023               	movlb	3	; select bank3
 12262  1C1E  00EF               	movwf	(_scaleA10kPot$2861+2)^(0+384)
 12263                           
 12264                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12265  1C1F  30E3               	movlw	227
 12266  1C20  0021               	movlb	1	; select bank1
 12267  1C21  00AE               	movwf	___ftmul@f1^(0+128)
 12268  1C22  300B               	movlw	11
 12269  1C23  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12270  1C24  3041               	movlw	65
 12271  1C25  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12272  1C26  0023               	movlb	3	; select bank3
 12273  1C27  086D               	movf	_scaleA10kPot$2861^(0+384),w
 12274  1C28  0021               	movlb	1	; select bank1
 12275  1C29  00B1               	movwf	___ftmul@f2^(0+128)
 12276  1C2A  0023               	movlb	3	; select bank3
 12277  1C2B  086E               	movf	(_scaleA10kPot$2861+1)^(0+384),w
 12278  1C2C  0021               	movlb	1	; select bank1
 12279  1C2D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12280  1C2E  0023               	movlb	3	; select bank3
 12281  1C2F  086F               	movf	(_scaleA10kPot$2861+2)^(0+384),w
 12282  1C30  0021               	movlb	1	; select bank1
 12283  1C31  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12284  1C32  319D  25B0  319B   	fcall	___ftmul
 12285  1C35  0021               	movlb	1	; select bank1
 12286  1C36  082E               	movf	?___ftmul^(0+128),w
 12287  1C37  0023               	movlb	3	; select bank3
 12288  1C38  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 12289  1C39  0021               	movlb	1	; select bank1
 12290  1C3A  082F               	movf	(?___ftmul+1)^(0+128),w
 12291  1C3B  0023               	movlb	3	; select bank3
 12292  1C3C  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12293  1C3D  0021               	movlb	1	; select bank1
 12294  1C3E  0830               	movf	(?___ftmul+2)^(0+128),w
 12295  1C3F  0023               	movlb	3	; select bank3
 12296  1C40  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12297                           
 12298                           ;user.c: 207: return (int)(pwm);
 12299  1C41  0867               	movf	scaleA10kPot@pwm^(0+384),w
 12300  1C42  0022               	movlb	2	; select bank2
 12301  1C43  00A0               	movwf	___fttol@f1^(0+256)
 12302  1C44  0023               	movlb	3	; select bank3
 12303  1C45  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12304  1C46  0022               	movlb	2	; select bank2
 12305  1C47  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12306  1C48  0023               	movlb	3	; select bank3
 12307  1C49  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12308  1C4A  0022               	movlb	2	; select bank2
 12309  1C4B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12310  1C4C  3199  2182         	fcall	___fttol
 12311  1C4E  0022               	movlb	2	; select bank2
 12312  1C4F  0821               	movf	(?___fttol^(0+256)+1),w
 12313  1C50  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12314  1C51  0820               	movf	?___fttol^(0+256),w
 12315  1C52  00E7               	movwf	?_scaleA10kPot^(0+256)
 12316  1C53  0008               	return
 12317  1C54                     __end_of_scaleA10kPot:	
 12318                           
 12319                           	psect	text26
 12320  18FD                     __ptext26:	
 12321 ;; *************** function _scaleA100kPot *****************
 12322 ;; Defined at:
 12323 ;;		line 188 in file "user.c"
 12324 ;; Parameters:    Size  Location     Type
 12325 ;;  input           3   71[BANK2 ] int 
 12326 ;; Auto vars:     Size  Location     Type
 12327 ;;  pwm             3    0[BANK3 ] float 
 12328 ;; Return value:  Size  Location     Type
 12329 ;;                  2   71[BANK2 ] int 
 12330 ;; Registers used:
 12331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12332 ;; Tracked objects:
 12333 ;;		On entry : 0/0
 12334 ;;		On exit  : 0/0
 12335 ;;		Unchanged: 0/0
 12336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12337 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12338 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12340 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12341 ;;Total ram usage:       12 bytes
 12342 ;; Hardware stack levels used:    1
 12343 ;; Hardware stack levels required when called:    8
 12344 ;; This function calls:
 12345 ;;		___ftdiv
 12346 ;;		___ftmul
 12347 ;;		___fttol
 12348 ;;		_pow
 12349 ;; This function is called by:
 12350 ;;		_main
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           
 12355                           ;psect for function _scaleA100kPot
 12356  18FD                     _scaleA100kPot:	
 12357                           
 12358                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12359                           
 12360                           ;incstack = 0
 12361                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12362  18FD  0022               	movlb	2	; select bank2
 12363  18FE  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12364  18FF  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12365  1900  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12366  1901  1D03               	skipz
 12367  1902  2909               	goto	l9248
 12368  1903  3000               	movlw	0
 12369  1904  00E7               	movwf	scaleA100kPot@input^(0+256)
 12370  1905  3080               	movlw	128
 12371  1906  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12372  1907  303F               	movlw	63
 12373  1908  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12374  1909                     l9248:	
 12375                           
 12376                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12377  1909  30C0               	movlw	192
 12378  190A  0021               	movlb	1	; select bank1
 12379  190B  00CE               	movwf	___ftdiv@f2^(0+128)
 12380  190C  307F               	movlw	127
 12381  190D  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12382  190E  3044               	movlw	68
 12383  190F  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12384  1910  0022               	movlb	2	; select bank2
 12385  1911  0867               	movf	scaleA100kPot@input^(0+256),w
 12386  1912  0021               	movlb	1	; select bank1
 12387  1913  00D1               	movwf	___ftdiv@f1^(0+128)
 12388  1914  0022               	movlb	2	; select bank2
 12389  1915  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12390  1916  0021               	movlb	1	; select bank1
 12391  1917  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12392  1918  0022               	movlb	2	; select bank2
 12393  1919  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12394  191A  0021               	movlb	1	; select bank1
 12395  191B  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12396  191C  319C  2454  3198   	fcall	___ftdiv
 12397  191F  0021               	movlb	1	; select bank1
 12398  1920  084E               	movf	?___ftdiv^(0+128),w
 12399  1921  0023               	movlb	3	; select bank3
 12400  1922  00EA               	movwf	_scaleA100kPot$2856^(0+384)
 12401  1923  0021               	movlb	1	; select bank1
 12402  1924  084F               	movf	(?___ftdiv+1)^(0+128),w
 12403  1925  0023               	movlb	3	; select bank3
 12404  1926  00EB               	movwf	(_scaleA100kPot$2856+1)^(0+384)
 12405  1927  0021               	movlb	1	; select bank1
 12406  1928  0850               	movf	(?___ftdiv+2)^(0+128),w
 12407  1929  0023               	movlb	3	; select bank3
 12408  192A  00EC               	movwf	(_scaleA100kPot$2856+2)^(0+384)
 12409                           
 12410                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12411  192B  3056               	movlw	86
 12412  192C  0022               	movlb	2	; select bank2
 12413  192D  00D8               	movwf	pow@y^(0+256)
 12414  192E  308E               	movlw	142
 12415  192F  00D9               	movwf	(pow@y+1)^(0+256)
 12416  1930  30BF               	movlw	191
 12417  1931  00DA               	movwf	(pow@y+2)^(0+256)
 12418  1932  0023               	movlb	3	; select bank3
 12419  1933  086A               	movf	_scaleA100kPot$2856^(0+384),w
 12420  1934  0022               	movlb	2	; select bank2
 12421  1935  00D5               	movwf	pow@x^(0+256)
 12422  1936  0023               	movlb	3	; select bank3
 12423  1937  086B               	movf	(_scaleA100kPot$2856+1)^(0+384),w
 12424  1938  0022               	movlb	2	; select bank2
 12425  1939  00D6               	movwf	(pow@x+1)^(0+256)
 12426  193A  0023               	movlb	3	; select bank3
 12427  193B  086C               	movf	(_scaleA100kPot$2856+2)^(0+384),w
 12428  193C  0022               	movlb	2	; select bank2
 12429  193D  00D7               	movwf	(pow@x+2)^(0+256)
 12430  193E  3191  212B  3198   	fcall	_pow
 12431  1941  0022               	movlb	2	; select bank2
 12432  1942  0855               	movf	?_pow^(0+256),w
 12433  1943  0023               	movlb	3	; select bank3
 12434  1944  00ED               	movwf	_scaleA100kPot$2857^(0+384)
 12435  1945  0022               	movlb	2	; select bank2
 12436  1946  0856               	movf	(?_pow+1)^(0+256),w
 12437  1947  0023               	movlb	3	; select bank3
 12438  1948  00EE               	movwf	(_scaleA100kPot$2857+1)^(0+384)
 12439  1949  0022               	movlb	2	; select bank2
 12440  194A  0857               	movf	(?_pow+2)^(0+256),w
 12441  194B  0023               	movlb	3	; select bank3
 12442  194C  00EF               	movwf	(_scaleA100kPot$2857+2)^(0+384)
 12443                           
 12444                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12445  194D  309F               	movlw	159
 12446  194E  0021               	movlb	1	; select bank1
 12447  194F  00AE               	movwf	___ftmul@f1^(0+128)
 12448  1950  3068               	movlw	104
 12449  1951  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12450  1952  3040               	movlw	64
 12451  1953  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12452  1954  0023               	movlb	3	; select bank3
 12453  1955  086D               	movf	_scaleA100kPot$2857^(0+384),w
 12454  1956  0021               	movlb	1	; select bank1
 12455  1957  00B1               	movwf	___ftmul@f2^(0+128)
 12456  1958  0023               	movlb	3	; select bank3
 12457  1959  086E               	movf	(_scaleA100kPot$2857+1)^(0+384),w
 12458  195A  0021               	movlb	1	; select bank1
 12459  195B  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12460  195C  0023               	movlb	3	; select bank3
 12461  195D  086F               	movf	(_scaleA100kPot$2857+2)^(0+384),w
 12462  195E  0021               	movlb	1	; select bank1
 12463  195F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12464  1960  319D  25B0  3198   	fcall	___ftmul
 12465  1963  0021               	movlb	1	; select bank1
 12466  1964  082E               	movf	?___ftmul^(0+128),w
 12467  1965  0023               	movlb	3	; select bank3
 12468  1966  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 12469  1967  0021               	movlb	1	; select bank1
 12470  1968  082F               	movf	(?___ftmul+1)^(0+128),w
 12471  1969  0023               	movlb	3	; select bank3
 12472  196A  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12473  196B  0021               	movlb	1	; select bank1
 12474  196C  0830               	movf	(?___ftmul+2)^(0+128),w
 12475  196D  0023               	movlb	3	; select bank3
 12476  196E  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12477                           
 12478                           ;user.c: 192: return (int)(pwm);
 12479  196F  0867               	movf	scaleA100kPot@pwm^(0+384),w
 12480  1970  0022               	movlb	2	; select bank2
 12481  1971  00A0               	movwf	___fttol@f1^(0+256)
 12482  1972  0023               	movlb	3	; select bank3
 12483  1973  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12484  1974  0022               	movlb	2	; select bank2
 12485  1975  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12486  1976  0023               	movlb	3	; select bank3
 12487  1977  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12488  1978  0022               	movlb	2	; select bank2
 12489  1979  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12490  197A  3199  2182         	fcall	___fttol
 12491  197C  0022               	movlb	2	; select bank2
 12492  197D  0821               	movf	(?___fttol^(0+256)+1),w
 12493  197E  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12494  197F  0820               	movf	?___fttol^(0+256),w
 12495  1980  00E7               	movwf	?_scaleA100kPot^(0+256)
 12496  1981  0008               	return
 12497  1982                     __end_of_scaleA100kPot:	
 12498                           
 12499                           	psect	text27
 12500  112B                     __ptext27:	
 12501 ;; *************** function _pow *****************
 12502 ;; Defined at:
 12503 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;  x               3   53[BANK2 ] int 
 12506 ;;  y               3   56[BANK2 ] int 
 12507 ;; Auto vars:     Size  Location     Type
 12508 ;;  yi              4   67[BANK2 ] unsigned long 
 12509 ;;  sign            1   66[BANK2 ] unsigned char 
 12510 ;; Return value:  Size  Location     Type
 12511 ;;                  3   53[BANK2 ] unsigned char 
 12512 ;; Registers used:
 12513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12514 ;; Tracked objects:
 12515 ;;		On entry : 0/0
 12516 ;;		On exit  : 0/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12519 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12520 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12521 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12522 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12523 ;;Total ram usage:       18 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; Hardware stack levels required when called:    7
 12526 ;; This function calls:
 12527 ;;		___ftge
 12528 ;;		___ftmul
 12529 ;;		___ftneg
 12530 ;;		___fttol
 12531 ;;		___lltoft
 12532 ;;		_exp
 12533 ;;		_log
 12534 ;; This function is called by:
 12535 ;;		_scaleA100kPot
 12536 ;;		_scaleA10kPot
 12537 ;;		_scaleiA10kPot
 12538 ;;		_scaleiA100kPot
 12539 ;;		_scaleA25kPot
 12540 ;;		_scaleiA25kPot
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           
 12545                           ;psect for function _pow
 12546  112B                     _pow:	
 12547                           
 12548                           ;incstack = 0
 12549                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12550  112B  0022               	movlb	2	; select bank2
 12551  112C  01E2               	clrf	pow@sign^(0+256)
 12552  112D  0857               	movf	(pow@x+2)^(0+256),w
 12553  112E  0456               	iorwf	(pow@x+1)^(0+256),w
 12554  112F  0455               	iorwf	pow@x^(0+256),w
 12555  1130  1D03               	skipz
 12556  1131  2957               	goto	l8538
 12557  1132  3000               	movlw	0
 12558  1133  0021               	movlb	1	; select bank1
 12559  1134  00A0               	movwf	___ftge@ff1^(0+128)
 12560  1135  3000               	movlw	0
 12561  1136  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12562  1137  3000               	movlw	0
 12563  1138  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12564  1139  0022               	movlb	2	; select bank2
 12565  113A  0858               	movf	pow@y^(0+256),w
 12566  113B  0021               	movlb	1	; select bank1
 12567  113C  00A3               	movwf	___ftge@ff2^(0+128)
 12568  113D  0022               	movlb	2	; select bank2
 12569  113E  0859               	movf	(pow@y+1)^(0+256),w
 12570  113F  0021               	movlb	1	; select bank1
 12571  1140  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12572  1141  0022               	movlb	2	; select bank2
 12573  1142  085A               	movf	(pow@y+2)^(0+256),w
 12574  1143  0021               	movlb	1	; select bank1
 12575  1144  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12576  1145  31A0  209E  3191   	fcall	___ftge
 12577  1148  1C03               	btfss	3,0
 12578  1149  294F               	goto	l2368
 12579  114A  3021               	movlw	33
 12580  114B  0024               	movlb	4	; select bank4
 12581  114C  00D1               	movwf	_errno^(0+512)
 12582  114D  3000               	movlw	0
 12583  114E  00D2               	movwf	(_errno^(0+512)+1)
 12584  114F                     l2368:	
 12585  114F  3000               	movlw	0
 12586  1150  0022               	movlb	2	; select bank2
 12587  1151  00D5               	movwf	?_pow^(0+256)
 12588  1152  3000               	movlw	0
 12589  1153  00D6               	movwf	(?_pow+1)^(0+256)
 12590  1154  3000               	movlw	0
 12591  1155  00D7               	movwf	(?_pow+2)^(0+256)
 12592  1156  0008               	return
 12593  1157                     l8538:	
 12594  1157  085A               	movf	(pow@y+2)^(0+256),w
 12595  1158  0459               	iorwf	(pow@y+1)^(0+256),w
 12596  1159  0458               	iorwf	pow@y^(0+256),w
 12597  115A  1D03               	skipz
 12598  115B  2963               	goto	l8544
 12599  115C  3000               	movlw	0
 12600  115D  00D5               	movwf	?_pow^(0+256)
 12601  115E  3080               	movlw	128
 12602  115F  00D6               	movwf	(?_pow+1)^(0+256)
 12603  1160  303F               	movlw	63
 12604  1161  00D7               	movwf	(?_pow+2)^(0+256)
 12605  1162  0008               	return
 12606  1163                     l8544:	
 12607  1163  0855               	movf	pow@x^(0+256),w
 12608  1164  0021               	movlb	1	; select bank1
 12609  1165  00A0               	movwf	___ftge@ff1^(0+128)
 12610  1166  0022               	movlb	2	; select bank2
 12611  1167  0856               	movf	(pow@x+1)^(0+256),w
 12612  1168  0021               	movlb	1	; select bank1
 12613  1169  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12614  116A  0022               	movlb	2	; select bank2
 12615  116B  0857               	movf	(pow@x+2)^(0+256),w
 12616  116C  0021               	movlb	1	; select bank1
 12617  116D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12618  116E  3000               	movlw	0
 12619  116F  00A3               	movwf	___ftge@ff2^(0+128)
 12620  1170  3000               	movlw	0
 12621  1171  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12622  1172  3000               	movlw	0
 12623  1173  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12624  1174  31A0  209E  3191   	fcall	___ftge
 12625  1177  1803               	btfsc	3,0
 12626  1178  29DD               	goto	l8556
 12627  1179  0022               	movlb	2	; select bank2
 12628  117A  0858               	movf	pow@y^(0+256),w
 12629  117B  00A0               	movwf	___fttol@f1^(0+256)
 12630  117C  0859               	movf	(pow@y+1)^(0+256),w
 12631  117D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12632  117E  085A               	movf	(pow@y+2)^(0+256),w
 12633  117F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12634  1180  3199  2182  3191   	fcall	___fttol
 12635  1183  0022               	movlb	2	; select bank2
 12636  1184  0823               	movf	(?___fttol+3)^(0+256),w
 12637  1185  00E6               	movwf	(pow@yi+3)^(0+256)
 12638  1186  0822               	movf	(?___fttol+2)^(0+256),w
 12639  1187  00E5               	movwf	(pow@yi+2)^(0+256)
 12640  1188  0821               	movf	(?___fttol+1)^(0+256),w
 12641  1189  00E4               	movwf	(pow@yi+1)^(0+256)
 12642  118A  0820               	movf	?___fttol^(0+256),w
 12643  118B  00E3               	movwf	pow@yi^(0+256)
 12644  118C  0866               	movf	(pow@yi+3)^(0+256),w
 12645  118D  0021               	movlb	1	; select bank1
 12646  118E  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12647  118F  0022               	movlb	2	; select bank2
 12648  1190  0865               	movf	(pow@yi+2)^(0+256),w
 12649  1191  0021               	movlb	1	; select bank1
 12650  1192  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12651  1193  0022               	movlb	2	; select bank2
 12652  1194  0864               	movf	(pow@yi+1)^(0+256),w
 12653  1195  0021               	movlb	1	; select bank1
 12654  1196  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12655  1197  0022               	movlb	2	; select bank2
 12656  1198  0863               	movf	pow@yi^(0+256),w
 12657  1199  0021               	movlb	1	; select bank1
 12658  119A  00A8               	movwf	___lltoft@c^(0+128)
 12659  119B  31AE  264F  3191   	fcall	___lltoft
 12660  119E  0022               	movlb	2	; select bank2
 12661  119F  085A               	movf	(pow@y+2)^(0+256),w
 12662  11A0  0021               	movlb	1	; select bank1
 12663  11A1  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12664  11A2  1D03               	skipz
 12665  11A3  29AE               	goto	u9025
 12666  11A4  0022               	movlb	2	; select bank2
 12667  11A5  0859               	movf	(pow@y+1)^(0+256),w
 12668  11A6  0021               	movlb	1	; select bank1
 12669  11A7  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12670  11A8  1D03               	skipz
 12671  11A9  29AE               	goto	u9025
 12672  11AA  0022               	movlb	2	; select bank2
 12673  11AB  0858               	movf	pow@y^(0+256),w
 12674  11AC  0021               	movlb	1	; select bank1
 12675  11AD  0628               	xorwf	?___lltoft^(0+128),w
 12676  11AE                     u9025:	
 12677  11AE  1903               	skipnz
 12678  11AF  29BD               	goto	l8552
 12679  11B0  3021               	movlw	33
 12680  11B1  0024               	movlb	4	; select bank4
 12681  11B2  00D1               	movwf	_errno^(0+512)
 12682  11B3  3000               	movlw	0
 12683  11B4  00D2               	movwf	(_errno^(0+512)+1)
 12684  11B5  3000               	movlw	0
 12685  11B6  0022               	movlb	2	; select bank2
 12686  11B7  00D5               	movwf	?_pow^(0+256)
 12687  11B8  3000               	movlw	0
 12688  11B9  00D6               	movwf	(?_pow+1)^(0+256)
 12689  11BA  3000               	movlw	0
 12690  11BB  00D7               	movwf	(?_pow+2)^(0+256)
 12691  11BC  0008               	return
 12692  11BD                     l8552:	
 12693  11BD  0022               	movlb	2	; select bank2
 12694  11BE  0863               	movf	pow@yi^(0+256),w
 12695  11BF  3901               	andlw	1
 12696  11C0  00DB               	movwf	??_pow^(0+256)
 12697  11C1  085B               	movf	??_pow^(0+256),w
 12698  11C2  00E2               	movwf	pow@sign^(0+256)
 12699  11C3  0855               	movf	pow@x^(0+256),w
 12700  11C4  0021               	movlb	1	; select bank1
 12701  11C5  00BE               	movwf	___ftneg@f1^(0+128)
 12702  11C6  0022               	movlb	2	; select bank2
 12703  11C7  0856               	movf	(pow@x+1)^(0+256),w
 12704  11C8  0021               	movlb	1	; select bank1
 12705  11C9  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12706  11CA  0022               	movlb	2	; select bank2
 12707  11CB  0857               	movf	(pow@x+2)^(0+256),w
 12708  11CC  0021               	movlb	1	; select bank1
 12709  11CD  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12710  11CE  31AC  24DF  3191   	fcall	___ftneg
 12711  11D1  0021               	movlb	1	; select bank1
 12712  11D2  083E               	movf	?___ftneg^(0+128),w
 12713  11D3  0022               	movlb	2	; select bank2
 12714  11D4  00D5               	movwf	pow@x^(0+256)
 12715  11D5  0021               	movlb	1	; select bank1
 12716  11D6  083F               	movf	(?___ftneg+1)^(0+128),w
 12717  11D7  0022               	movlb	2	; select bank2
 12718  11D8  00D6               	movwf	(pow@x+1)^(0+256)
 12719  11D9  0021               	movlb	1	; select bank1
 12720  11DA  0840               	movf	(?___ftneg+2)^(0+128),w
 12721  11DB  0022               	movlb	2	; select bank2
 12722  11DC  00D7               	movwf	(pow@x+2)^(0+256)
 12723  11DD                     l8556:	
 12724  11DD  0022               	movlb	2	; select bank2
 12725  11DE  0855               	movf	pow@x^(0+256),w
 12726  11DF  00BE               	movwf	log@x^(0+256)
 12727  11E0  0856               	movf	(pow@x+1)^(0+256),w
 12728  11E1  00BF               	movwf	(log@x+1)^(0+256)
 12729  11E2  0857               	movf	(pow@x+2)^(0+256),w
 12730  11E3  00C0               	movwf	(log@x+2)^(0+256)
 12731  11E4  319F  272F  3191   	fcall	_log
 12732  11E7  0022               	movlb	2	; select bank2
 12733  11E8  083E               	movf	?_log^(0+256),w
 12734  11E9  00DC               	movwf	_pow$2873^(0+256)
 12735  11EA  083F               	movf	(?_log+1)^(0+256),w
 12736  11EB  00DD               	movwf	(_pow$2873+1)^(0+256)
 12737  11EC  0840               	movf	(?_log+2)^(0+256),w
 12738  11ED  00DE               	movwf	(_pow$2873+2)^(0+256)
 12739  11EE  0858               	movf	pow@y^(0+256),w
 12740  11EF  0021               	movlb	1	; select bank1
 12741  11F0  00AE               	movwf	___ftmul@f1^(0+128)
 12742  11F1  0022               	movlb	2	; select bank2
 12743  11F2  0859               	movf	(pow@y+1)^(0+256),w
 12744  11F3  0021               	movlb	1	; select bank1
 12745  11F4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12746  11F5  0022               	movlb	2	; select bank2
 12747  11F6  085A               	movf	(pow@y+2)^(0+256),w
 12748  11F7  0021               	movlb	1	; select bank1
 12749  11F8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12750  11F9  0022               	movlb	2	; select bank2
 12751  11FA  085C               	movf	_pow$2873^(0+256),w
 12752  11FB  0021               	movlb	1	; select bank1
 12753  11FC  00B1               	movwf	___ftmul@f2^(0+128)
 12754  11FD  0022               	movlb	2	; select bank2
 12755  11FE  085D               	movf	(_pow$2873+1)^(0+256),w
 12756  11FF  0021               	movlb	1	; select bank1
 12757  1200  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12758  1201  0022               	movlb	2	; select bank2
 12759  1202  085E               	movf	(_pow$2873+2)^(0+256),w
 12760  1203  0021               	movlb	1	; select bank1
 12761  1204  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12762  1205  319D  25B0  3191   	fcall	___ftmul
 12763  1208  0021               	movlb	1	; select bank1
 12764  1209  082E               	movf	?___ftmul^(0+128),w
 12765  120A  0022               	movlb	2	; select bank2
 12766  120B  00DF               	movwf	_pow$2874^(0+256)
 12767  120C  0021               	movlb	1	; select bank1
 12768  120D  082F               	movf	(?___ftmul+1)^(0+128),w
 12769  120E  0022               	movlb	2	; select bank2
 12770  120F  00E0               	movwf	(_pow$2874+1)^(0+256)
 12771  1210  0021               	movlb	1	; select bank1
 12772  1211  0830               	movf	(?___ftmul+2)^(0+128),w
 12773  1212  0022               	movlb	2	; select bank2
 12774  1213  00E1               	movwf	(_pow$2874+2)^(0+256)
 12775  1214  085F               	movf	_pow$2874^(0+256),w
 12776  1215  00C8               	movwf	exp@x^(0+256)
 12777  1216  0860               	movf	(_pow$2874+1)^(0+256),w
 12778  1217  00C9               	movwf	(exp@x+1)^(0+256)
 12779  1218  0861               	movf	(_pow$2874+2)^(0+256),w
 12780  1219  00CA               	movwf	(exp@x+2)^(0+256)
 12781  121A  3193  2363  3191   	fcall	_exp
 12782  121D  0022               	movlb	2	; select bank2
 12783  121E  0848               	movf	?_exp^(0+256),w
 12784  121F  00D5               	movwf	pow@x^(0+256)
 12785  1220  0849               	movf	(?_exp+1)^(0+256),w
 12786  1221  00D6               	movwf	(pow@x+1)^(0+256)
 12787  1222  084A               	movf	(?_exp+2)^(0+256),w
 12788  1223  00D7               	movwf	(pow@x+2)^(0+256)
 12789  1224  0862               	movf	pow@sign^(0+256),w
 12790  1225  1903               	btfsc	3,2
 12791  1226  0008               	return
 12792  1227  0855               	movf	pow@x^(0+256),w
 12793  1228  0021               	movlb	1	; select bank1
 12794  1229  00BE               	movwf	___ftneg@f1^(0+128)
 12795  122A  0022               	movlb	2	; select bank2
 12796  122B  0856               	movf	(pow@x+1)^(0+256),w
 12797  122C  0021               	movlb	1	; select bank1
 12798  122D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12799  122E  0022               	movlb	2	; select bank2
 12800  122F  0857               	movf	(pow@x+2)^(0+256),w
 12801  1230  0021               	movlb	1	; select bank1
 12802  1231  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12803  1232  31AC  24DF         	fcall	___ftneg
 12804  1234  0021               	movlb	1	; select bank1
 12805  1235  083E               	movf	?___ftneg^(0+128),w
 12806  1236  0022               	movlb	2	; select bank2
 12807  1237  00D5               	movwf	?_pow^(0+256)
 12808  1238  0021               	movlb	1	; select bank1
 12809  1239  083F               	movf	(?___ftneg+1)^(0+128),w
 12810  123A  0022               	movlb	2	; select bank2
 12811  123B  00D6               	movwf	(?_pow+1)^(0+256)
 12812  123C  0021               	movlb	1	; select bank1
 12813  123D  0840               	movf	(?___ftneg+2)^(0+128),w
 12814  123E  0022               	movlb	2	; select bank2
 12815  123F  00D7               	movwf	(?_pow+2)^(0+256)
 12816  1240  0008               	return
 12817  1241                     __end_of_pow:	
 12818                           
 12819                           	psect	text28
 12820  1F2F                     __ptext28:	
 12821 ;; *************** function _log *****************
 12822 ;; Defined at:
 12823 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12824 ;; Parameters:    Size  Location     Type
 12825 ;;  x               3   30[BANK2 ] unsigned char 
 12826 ;; Auto vars:     Size  Location     Type
 12827 ;;  exponent        2   34[BANK2 ] int 
 12828 ;; Return value:  Size  Location     Type
 12829 ;;                  3   30[BANK2 ] int 
 12830 ;; Registers used:
 12831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12832 ;; Tracked objects:
 12833 ;;		On entry : 0/0
 12834 ;;		On exit  : 0/0
 12835 ;;		Unchanged: 0/0
 12836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12837 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12838 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12839 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12840 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12841 ;;Total ram usage:        6 bytes
 12842 ;; Hardware stack levels used:    1
 12843 ;; Hardware stack levels required when called:    6
 12844 ;; This function calls:
 12845 ;;		___awtoft
 12846 ;;		___ftadd
 12847 ;;		___ftge
 12848 ;;		___ftmul
 12849 ;;		_eval_poly
 12850 ;;		_frexp
 12851 ;; This function is called by:
 12852 ;;		_pow
 12853 ;; This function uses a non-reentrant model
 12854 ;;
 12855                           
 12856                           
 12857                           ;psect for function _log
 12858  1F2F                     _log:	
 12859                           
 12860                           ;incstack = 0
 12861                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12862  1F2F  0022               	movlb	2	; select bank2
 12863  1F30  083E               	movf	log@x^(0+256),w
 12864  1F31  0021               	movlb	1	; select bank1
 12865  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12866  1F33  0022               	movlb	2	; select bank2
 12867  1F34  083F               	movf	(log@x+1)^(0+256),w
 12868  1F35  0021               	movlb	1	; select bank1
 12869  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12870  1F37  0022               	movlb	2	; select bank2
 12871  1F38  0840               	movf	(log@x+2)^(0+256),w
 12872  1F39  0021               	movlb	1	; select bank1
 12873  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12874  1F3B  3000               	movlw	0
 12875  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12876  1F3D  3000               	movlw	0
 12877  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12878  1F3F  3000               	movlw	0
 12879  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12880  1F41  31A0  209E  319F   	fcall	___ftge
 12881  1F44  1803               	btfsc	3,0
 12882  1F45  2F53               	goto	l8410
 12883  1F46  3021               	movlw	33
 12884  1F47  0024               	movlb	4	; select bank4
 12885  1F48  00D1               	movwf	_errno^(0+512)
 12886  1F49  3000               	movlw	0
 12887  1F4A  00D2               	movwf	(_errno^(0+512)+1)
 12888  1F4B  3000               	movlw	0
 12889  1F4C  0022               	movlb	2	; select bank2
 12890  1F4D  00BE               	movwf	?_log^(0+256)
 12891  1F4E  3000               	movlw	0
 12892  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12893  1F50  3000               	movlw	0
 12894  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12895  1F52  0008               	return
 12896  1F53                     l8410:	
 12897  1F53  0022               	movlb	2	; select bank2
 12898  1F54  0840               	movf	(log@x+2)^(0+256),w
 12899  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12900  1F56  043E               	iorwf	log@x^(0+256),w
 12901  1F57  1D03               	skipz
 12902  1F58  2F66               	goto	l8416
 12903  1F59  3022               	movlw	34
 12904  1F5A  0024               	movlb	4	; select bank4
 12905  1F5B  00D1               	movwf	_errno^(0+512)
 12906  1F5C  3000               	movlw	0
 12907  1F5D  00D2               	movwf	(_errno^(0+512)+1)
 12908  1F5E  3000               	movlw	0
 12909  1F5F  0022               	movlb	2	; select bank2
 12910  1F60  00BE               	movwf	?_log^(0+256)
 12911  1F61  3000               	movlw	0
 12912  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12913  1F63  3000               	movlw	0
 12914  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12915  1F65  0008               	return
 12916  1F66                     l8416:	
 12917  1F66  3000               	movlw	0
 12918  1F67  0021               	movlb	1	; select bank1
 12919  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12920  1F69  3080               	movlw	128
 12921  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12922  1F6B  30BF               	movlw	191
 12923  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12924  1F6D  3000               	movlw	0
 12925  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12926  1F6F  3000               	movlw	0
 12927  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12928  1F71  3040               	movlw	64
 12929  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12930  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12931  1F74  0022               	movlb	2	; select bank2
 12932  1F75  00C1               	movwf	??_log^(0+256)
 12933  1F76  0841               	movf	??_log^(0+256),w
 12934  1F77  0021               	movlb	1	; select bank1
 12935  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12936  1F79  0022               	movlb	2	; select bank2
 12937  1F7A  083E               	movf	log@x^(0+256),w
 12938  1F7B  0021               	movlb	1	; select bank1
 12939  1F7C  00A0               	movwf	frexp@value^(0+128)
 12940  1F7D  0022               	movlb	2	; select bank2
 12941  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12942  1F7F  0021               	movlb	1	; select bank1
 12943  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12944  1F81  0022               	movlb	2	; select bank2
 12945  1F82  0840               	movf	(log@x+2)^(0+256),w
 12946  1F83  0021               	movlb	1	; select bank1
 12947  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12948  1F85  31A1  2191  319F   	fcall	_frexp
 12949  1F88  0021               	movlb	1	; select bank1
 12950  1F89  0820               	movf	?_frexp^(0+128),w
 12951  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12952  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12953  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12954  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12955  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12956  1F8F  319D  25B0  319F   	fcall	___ftmul
 12957  1F92  0021               	movlb	1	; select bank1
 12958  1F93  082E               	movf	?___ftmul^(0+128),w
 12959  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12960  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12961  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12962  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12963  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12964  1F99  3190  2035  319F   	fcall	___ftadd
 12965  1F9C  0021               	movlb	1	; select bank1
 12966  1F9D  0841               	movf	?___ftadd^(0+128),w
 12967  1F9E  0022               	movlb	2	; select bank2
 12968  1F9F  00BE               	movwf	log@x^(0+256)
 12969  1FA0  0021               	movlb	1	; select bank1
 12970  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12971  1FA2  0022               	movlb	2	; select bank2
 12972  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12973  1FA4  0021               	movlb	1	; select bank1
 12974  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12975  1FA6  0022               	movlb	2	; select bank2
 12976  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12977  1FA8  30FF               	movlw	255
 12978  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12979  1FAA  30FF               	movlw	255
 12980  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12981  1FAC  083E               	movf	log@x^(0+256),w
 12982  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12983  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12984  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12985  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12986  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12987  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12988  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12989  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12990  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12991  1FB6  3008               	movlw	8
 12992  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12993  1FB8  3000               	movlw	0
 12994  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12995  1FBA  31A6  260F  319F   	fcall	_eval_poly
 12996  1FBD  0022               	movlb	2	; select bank2
 12997  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12998  1FBF  00BE               	movwf	log@x^(0+256)
 12999  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 13000  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 13001  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 13002  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 13003  1FC4  083E               	movf	log@x^(0+256),w
 13004  1FC5  0021               	movlb	1	; select bank1
 13005  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 13006  1FC7  0022               	movlb	2	; select bank2
 13007  1FC8  083F               	movf	(log@x+1)^(0+256),w
 13008  1FC9  0021               	movlb	1	; select bank1
 13009  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13010  1FCB  0022               	movlb	2	; select bank2
 13011  1FCC  0840               	movf	(log@x+2)^(0+256),w
 13012  1FCD  0021               	movlb	1	; select bank1
 13013  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13014  1FCF  3072               	movlw	114
 13015  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 13016  1FD1  3031               	movlw	49
 13017  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13018  1FD3  303F               	movlw	63
 13019  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13020  1FD5  0022               	movlb	2	; select bank2
 13021  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 13022  1FD7  0021               	movlb	1	; select bank1
 13023  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13024  1FD9  0022               	movlb	2	; select bank2
 13025  1FDA  0842               	movf	log@exponent^(0+256),w
 13026  1FDB  0021               	movlb	1	; select bank1
 13027  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 13028  1FDD  31AE  262D  319F   	fcall	___awtoft
 13029  1FE0  0021               	movlb	1	; select bank1
 13030  1FE1  0828               	movf	?___awtoft^(0+128),w
 13031  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 13032  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 13033  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13034  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 13035  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13036  1FE7  319D  25B0  319F   	fcall	___ftmul
 13037  1FEA  0021               	movlb	1	; select bank1
 13038  1FEB  082E               	movf	?___ftmul^(0+128),w
 13039  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 13040  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 13041  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13042  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 13043  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13044  1FF1  3190  2035         	fcall	___ftadd
 13045  1FF3  0021               	movlb	1	; select bank1
 13046  1FF4  0841               	movf	?___ftadd^(0+128),w
 13047  1FF5  0022               	movlb	2	; select bank2
 13048  1FF6  00BE               	movwf	?_log^(0+256)
 13049  1FF7  0021               	movlb	1	; select bank1
 13050  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 13051  1FF9  0022               	movlb	2	; select bank2
 13052  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 13053  1FFB  0021               	movlb	1	; select bank1
 13054  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 13055  1FFD  0022               	movlb	2	; select bank2
 13056  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 13057  1FFF  0008               	return
 13058  2000                     __end_of_log:	
 13059                           
 13060                           	psect	text29
 13061  1363                     __ptext29:	
 13062 ;; *************** function _exp *****************
 13063 ;; Defined at:
 13064 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;  x               3   40[BANK2 ] int 
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;  exponent        2   50[BANK2 ] int 
 13069 ;;  sign            1   52[BANK2 ] unsigned char 
 13070 ;; Return value:  Size  Location     Type
 13071 ;;                  3   40[BANK2 ] unsigned char 
 13072 ;; Registers used:
 13073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13074 ;; Tracked objects:
 13075 ;;		On entry : 0/0
 13076 ;;		On exit  : 0/0
 13077 ;;		Unchanged: 0/0
 13078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13079 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13080 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13081 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13082 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13083 ;;Total ram usage:       13 bytes
 13084 ;; Hardware stack levels used:    1
 13085 ;; Hardware stack levels required when called:    6
 13086 ;; This function calls:
 13087 ;;		___awtoft
 13088 ;;		___ftdiv
 13089 ;;		___ftge
 13090 ;;		___ftmul
 13091 ;;		___ftneg
 13092 ;;		___ftsub
 13093 ;;		___fttol
 13094 ;;		_eval_poly
 13095 ;;		_floor
 13096 ;;		_ldexp
 13097 ;; This function is called by:
 13098 ;;		_pow
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           
 13103                           ;psect for function _exp
 13104  1363                     _exp:	
 13105                           
 13106                           ;incstack = 0
 13107                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13108  1363  0022               	movlb	2	; select bank2
 13109  1364  084A               	movf	(exp@x+2)^(0+256),w
 13110  1365  0449               	iorwf	(exp@x+1)^(0+256),w
 13111  1366  0448               	iorwf	exp@x^(0+256),w
 13112  1367  1D03               	skipz
 13113  1368  2B70               	goto	l8432
 13114  1369  3000               	movlw	0
 13115  136A  00C8               	movwf	?_exp^(0+256)
 13116  136B  3080               	movlw	128
 13117  136C  00C9               	movwf	(?_exp+1)^(0+256)
 13118  136D  303F               	movlw	63
 13119  136E  00CA               	movwf	(?_exp+2)^(0+256)
 13120  136F  0008               	return
 13121  1370                     l8432:	
 13122  1370  3072               	movlw	114
 13123  1371  0021               	movlb	1	; select bank1
 13124  1372  00A0               	movwf	___ftge@ff1^(0+128)
 13125  1373  3031               	movlw	49
 13126  1374  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13127  1375  3044               	movlw	68
 13128  1376  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13129  1377  0022               	movlb	2	; select bank2
 13130  1378  0848               	movf	exp@x^(0+256),w
 13131  1379  0021               	movlb	1	; select bank1
 13132  137A  00A3               	movwf	___ftge@ff2^(0+128)
 13133  137B  0022               	movlb	2	; select bank2
 13134  137C  0849               	movf	(exp@x+1)^(0+256),w
 13135  137D  0021               	movlb	1	; select bank1
 13136  137E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13137  137F  0022               	movlb	2	; select bank2
 13138  1380  084A               	movf	(exp@x+2)^(0+256),w
 13139  1381  0021               	movlb	1	; select bank1
 13140  1382  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13141  1383  31A0  209E  3193   	fcall	___ftge
 13142  1386  1803               	btfsc	3,0
 13143  1387  2B95               	goto	l8442
 13144  1388  3022               	movlw	34
 13145  1389  0024               	movlb	4	; select bank4
 13146  138A  00D1               	movwf	_errno^(0+512)
 13147  138B  3000               	movlw	0
 13148  138C  00D2               	movwf	(_errno^(0+512)+1)
 13149  138D  30FF               	movlw	255
 13150  138E  0022               	movlb	2	; select bank2
 13151  138F  00C8               	movwf	?_exp^(0+256)
 13152  1390  307F               	movlw	127
 13153  1391  00C9               	movwf	(?_exp+1)^(0+256)
 13154  1392  307F               	movlw	127
 13155  1393  00CA               	movwf	(?_exp+2)^(0+256)
 13156  1394  0008               	return
 13157  1395                     l8442:	
 13158  1395  0022               	movlb	2	; select bank2
 13159  1396  0848               	movf	exp@x^(0+256),w
 13160  1397  0021               	movlb	1	; select bank1
 13161  1398  00A0               	movwf	___ftge@ff1^(0+128)
 13162  1399  0022               	movlb	2	; select bank2
 13163  139A  0849               	movf	(exp@x+1)^(0+256),w
 13164  139B  0021               	movlb	1	; select bank1
 13165  139C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13166  139D  0022               	movlb	2	; select bank2
 13167  139E  084A               	movf	(exp@x+2)^(0+256),w
 13168  139F  0021               	movlb	1	; select bank1
 13169  13A0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13170  13A1  3049               	movlw	73
 13171  13A2  00A3               	movwf	___ftge@ff2^(0+128)
 13172  13A3  303A               	movlw	58
 13173  13A4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13174  13A5  30C4               	movlw	196
 13175  13A6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13176  13A7  31A0  209E  3193   	fcall	___ftge
 13177  13AA  1803               	btfsc	3,0
 13178  13AB  2BB9               	goto	l8448
 13179  13AC  3022               	movlw	34
 13180  13AD  0024               	movlb	4	; select bank4
 13181  13AE  00D1               	movwf	_errno^(0+512)
 13182  13AF  3000               	movlw	0
 13183  13B0  00D2               	movwf	(_errno^(0+512)+1)
 13184  13B1  3000               	movlw	0
 13185  13B2  0022               	movlb	2	; select bank2
 13186  13B3  00C8               	movwf	?_exp^(0+256)
 13187  13B4  3000               	movlw	0
 13188  13B5  00C9               	movwf	(?_exp+1)^(0+256)
 13189  13B6  3000               	movlw	0
 13190  13B7  00CA               	movwf	(?_exp+2)^(0+256)
 13191  13B8  0008               	return
 13192  13B9                     l8448:	
 13193  13B9  0022               	movlb	2	; select bank2
 13194  13BA  0848               	movf	exp@x^(0+256),w
 13195  13BB  0021               	movlb	1	; select bank1
 13196  13BC  00A0               	movwf	___ftge@ff1^(0+128)
 13197  13BD  0022               	movlb	2	; select bank2
 13198  13BE  0849               	movf	(exp@x+1)^(0+256),w
 13199  13BF  0021               	movlb	1	; select bank1
 13200  13C0  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13201  13C1  0022               	movlb	2	; select bank2
 13202  13C2  084A               	movf	(exp@x+2)^(0+256),w
 13203  13C3  0021               	movlb	1	; select bank1
 13204  13C4  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13205  13C5  3000               	movlw	0
 13206  13C6  00A3               	movwf	___ftge@ff2^(0+128)
 13207  13C7  3000               	movlw	0
 13208  13C8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13209  13C9  3000               	movlw	0
 13210  13CA  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13211  13CB  31A0  209E  3193   	fcall	___ftge
 13212  13CE  1803               	btfsc	3,0
 13213  13CF  2BD2               	goto	u8910
 13214  13D0  3001               	movlw	1
 13215  13D1  2BD3               	goto	u8920
 13216  13D2                     u8910:	
 13217  13D2  3000               	movlw	0
 13218  13D3                     u8920:	
 13219  13D3  0022               	movlb	2	; select bank2
 13220  13D4  00CB               	movwf	??_exp^(0+256)
 13221  13D5  084B               	movf	??_exp^(0+256),w
 13222  13D6  00D4               	movwf	exp@sign^(0+256)
 13223  13D7  0854               	movf	exp@sign^(0+256),w
 13224  13D8  1903               	btfsc	3,2
 13225  13D9  2BF4               	goto	l8454
 13226  13DA  0848               	movf	exp@x^(0+256),w
 13227  13DB  0021               	movlb	1	; select bank1
 13228  13DC  00BE               	movwf	___ftneg@f1^(0+128)
 13229  13DD  0022               	movlb	2	; select bank2
 13230  13DE  0849               	movf	(exp@x+1)^(0+256),w
 13231  13DF  0021               	movlb	1	; select bank1
 13232  13E0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13233  13E1  0022               	movlb	2	; select bank2
 13234  13E2  084A               	movf	(exp@x+2)^(0+256),w
 13235  13E3  0021               	movlb	1	; select bank1
 13236  13E4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13237  13E5  31AC  24DF  3193   	fcall	___ftneg
 13238  13E8  0021               	movlb	1	; select bank1
 13239  13E9  083E               	movf	?___ftneg^(0+128),w
 13240  13EA  0022               	movlb	2	; select bank2
 13241  13EB  00C8               	movwf	exp@x^(0+256)
 13242  13EC  0021               	movlb	1	; select bank1
 13243  13ED  083F               	movf	(?___ftneg+1)^(0+128),w
 13244  13EE  0022               	movlb	2	; select bank2
 13245  13EF  00C9               	movwf	(exp@x+1)^(0+256)
 13246  13F0  0021               	movlb	1	; select bank1
 13247  13F1  0840               	movf	(?___ftneg+2)^(0+128),w
 13248  13F2  0022               	movlb	2	; select bank2
 13249  13F3  00CA               	movwf	(exp@x+2)^(0+256)
 13250  13F4                     l8454:	
 13251  13F4  30AA               	movlw	170
 13252  13F5  0021               	movlb	1	; select bank1
 13253  13F6  00AE               	movwf	___ftmul@f1^(0+128)
 13254  13F7  30B8               	movlw	184
 13255  13F8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13256  13F9  303F               	movlw	63
 13257  13FA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13258  13FB  0022               	movlb	2	; select bank2
 13259  13FC  0848               	movf	exp@x^(0+256),w
 13260  13FD  0021               	movlb	1	; select bank1
 13261  13FE  00B1               	movwf	___ftmul@f2^(0+128)
 13262  13FF  0022               	movlb	2	; select bank2
 13263  1400  0849               	movf	(exp@x+1)^(0+256),w
 13264  1401  0021               	movlb	1	; select bank1
 13265  1402  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13266  1403  0022               	movlb	2	; select bank2
 13267  1404  084A               	movf	(exp@x+2)^(0+256),w
 13268  1405  0021               	movlb	1	; select bank1
 13269  1406  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13270  1407  319D  25B0  3193   	fcall	___ftmul
 13271  140A  0021               	movlb	1	; select bank1
 13272  140B  082E               	movf	?___ftmul^(0+128),w
 13273  140C  0022               	movlb	2	; select bank2
 13274  140D  00C8               	movwf	exp@x^(0+256)
 13275  140E  0021               	movlb	1	; select bank1
 13276  140F  082F               	movf	(?___ftmul+1)^(0+128),w
 13277  1410  0022               	movlb	2	; select bank2
 13278  1411  00C9               	movwf	(exp@x+1)^(0+256)
 13279  1412  0021               	movlb	1	; select bank1
 13280  1413  0830               	movf	(?___ftmul+2)^(0+128),w
 13281  1414  0022               	movlb	2	; select bank2
 13282  1415  00CA               	movwf	(exp@x+2)^(0+256)
 13283  1416  0848               	movf	exp@x^(0+256),w
 13284  1417  00AE               	movwf	floor@x^(0+256)
 13285  1418  0849               	movf	(exp@x+1)^(0+256),w
 13286  1419  00AF               	movwf	(floor@x+1)^(0+256)
 13287  141A  084A               	movf	(exp@x+2)^(0+256),w
 13288  141B  00B0               	movwf	(floor@x+2)^(0+256)
 13289  141C  319C  24FD  3193   	fcall	_floor
 13290  141F  0022               	movlb	2	; select bank2
 13291  1420  082E               	movf	?_floor^(0+256),w
 13292  1421  00CC               	movwf	_exp$2876^(0+256)
 13293  1422  082F               	movf	(?_floor+1)^(0+256),w
 13294  1423  00CD               	movwf	(_exp$2876+1)^(0+256)
 13295  1424  0830               	movf	(?_floor+2)^(0+256),w
 13296  1425  00CE               	movwf	(_exp$2876+2)^(0+256)
 13297  1426  084C               	movf	_exp$2876^(0+256),w
 13298  1427  00A0               	movwf	___fttol@f1^(0+256)
 13299  1428  084D               	movf	(_exp$2876+1)^(0+256),w
 13300  1429  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13301  142A  084E               	movf	(_exp$2876+2)^(0+256),w
 13302  142B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13303  142C  3199  2182  3193   	fcall	___fttol
 13304  142F  0022               	movlb	2	; select bank2
 13305  1430  0821               	movf	(?___fttol^(0+256)+1),w
 13306  1431  00D3               	movwf	(exp@exponent+1)^(0+256)
 13307  1432  0820               	movf	?___fttol^(0+256),w
 13308  1433  00D2               	movwf	exp@exponent^(0+256)
 13309  1434  0853               	movf	(exp@exponent+1)^(0+256),w
 13310  1435  0021               	movlb	1	; select bank1
 13311  1436  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13312  1437  0022               	movlb	2	; select bank2
 13313  1438  0852               	movf	exp@exponent^(0+256),w
 13314  1439  0021               	movlb	1	; select bank1
 13315  143A  00A8               	movwf	___awtoft@c^(0+128)
 13316  143B  31AE  262D  3193   	fcall	___awtoft
 13317  143E  0021               	movlb	1	; select bank1
 13318  143F  0828               	movf	?___awtoft^(0+128),w
 13319  1440  0022               	movlb	2	; select bank2
 13320  1441  00B7               	movwf	___ftsub@f2^(0+256)
 13321  1442  0021               	movlb	1	; select bank1
 13322  1443  0829               	movf	(?___awtoft+1)^(0+128),w
 13323  1444  0022               	movlb	2	; select bank2
 13324  1445  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 13325  1446  0021               	movlb	1	; select bank1
 13326  1447  082A               	movf	(?___awtoft+2)^(0+128),w
 13327  1448  0022               	movlb	2	; select bank2
 13328  1449  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 13329  144A  0848               	movf	exp@x^(0+256),w
 13330  144B  00BA               	movwf	___ftsub@f1^(0+256)
 13331  144C  0849               	movf	(exp@x+1)^(0+256),w
 13332  144D  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 13333  144E  084A               	movf	(exp@x+2)^(0+256),w
 13334  144F  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 13335  1450  31AE  26A5  3193   	fcall	___ftsub
 13336  1453  0022               	movlb	2	; select bank2
 13337  1454  0837               	movf	?___ftsub^(0+256),w
 13338  1455  00C8               	movwf	exp@x^(0+256)
 13339  1456  0838               	movf	(?___ftsub+1)^(0+256),w
 13340  1457  00C9               	movwf	(exp@x+1)^(0+256)
 13341  1458  0839               	movf	(?___ftsub+2)^(0+256),w
 13342  1459  00CA               	movwf	(exp@x+2)^(0+256)
 13343  145A  0848               	movf	exp@x^(0+256),w
 13344  145B  00B4               	movwf	eval_poly@x^(0+256)
 13345  145C  0849               	movf	(exp@x+1)^(0+256),w
 13346  145D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13347  145E  084A               	movf	(exp@x+2)^(0+256),w
 13348  145F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13349  1460  3000               	movlw	low (exp@coeff| (0+32768))
 13350  1461  00B7               	movwf	eval_poly@d^(0+256)
 13351  1462  30A8               	movlw	high (exp@coeff| (0+32768))
 13352  1463  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13353  1464  3009               	movlw	9
 13354  1465  00B9               	movwf	eval_poly@n^(0+256)
 13355  1466  3000               	movlw	0
 13356  1467  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13357  1468  31A6  260F  3193   	fcall	_eval_poly
 13358  146B  0022               	movlb	2	; select bank2
 13359  146C  0834               	movf	?_eval_poly^(0+256),w
 13360  146D  00BE               	movwf	ldexp@value^(0+256)
 13361  146E  0835               	movf	(?_eval_poly+1)^(0+256),w
 13362  146F  00BF               	movwf	(ldexp@value+1)^(0+256)
 13363  1470  0836               	movf	(?_eval_poly+2)^(0+256),w
 13364  1471  00C0               	movwf	(ldexp@value+2)^(0+256)
 13365  1472  0853               	movf	(exp@exponent+1)^(0+256),w
 13366  1473  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13367  1474  0852               	movf	exp@exponent^(0+256),w
 13368  1475  00C1               	movwf	ldexp@newexp^(0+256)
 13369  1476  319B  231F  3193   	fcall	_ldexp
 13370  1479  0022               	movlb	2	; select bank2
 13371  147A  083E               	movf	?_ldexp^(0+256),w
 13372  147B  00C8               	movwf	exp@x^(0+256)
 13373  147C  083F               	movf	(?_ldexp+1)^(0+256),w
 13374  147D  00C9               	movwf	(exp@x+1)^(0+256)
 13375  147E  0840               	movf	(?_ldexp+2)^(0+256),w
 13376  147F  00CA               	movwf	(exp@x+2)^(0+256)
 13377  1480  0854               	movf	exp@sign^(0+256),w
 13378  1481  1903               	btfsc	3,2
 13379  1482  0008               	return
 13380  1483  30FF               	movlw	255
 13381  1484  00CF               	movwf	_exp$2617^(0+256)
 13382  1485  307F               	movlw	127
 13383  1486  00D0               	movwf	(_exp$2617+1)^(0+256)
 13384  1487  307F               	movlw	127
 13385  1488  00D1               	movwf	(_exp$2617+2)^(0+256)
 13386  1489  084A               	movf	(exp@x+2)^(0+256),w
 13387  148A  0651               	xorwf	(_exp$2617+2)^(0+256),w
 13388  148B  1D03               	skipz
 13389  148C  2C93               	goto	u8955
 13390  148D  0849               	movf	(exp@x+1)^(0+256),w
 13391  148E  0650               	xorwf	(_exp$2617+1)^(0+256),w
 13392  148F  1D03               	skipz
 13393  1490  2C93               	goto	u8955
 13394  1491  0848               	movf	exp@x^(0+256),w
 13395  1492  064F               	xorwf	_exp$2617^(0+256),w
 13396  1493                     u8955:	
 13397  1493  1D03               	skipz
 13398  1494  2C9C               	goto	l8476
 13399  1495  3000               	movlw	0
 13400  1496  00C8               	movwf	?_exp^(0+256)
 13401  1497  3000               	movlw	0
 13402  1498  00C9               	movwf	(?_exp+1)^(0+256)
 13403  1499  3000               	movlw	0
 13404  149A  00CA               	movwf	(?_exp+2)^(0+256)
 13405  149B  0008               	return
 13406  149C                     l8476:	
 13407  149C  0848               	movf	exp@x^(0+256),w
 13408  149D  0021               	movlb	1	; select bank1
 13409  149E  00CE               	movwf	___ftdiv@f2^(0+128)
 13410  149F  0022               	movlb	2	; select bank2
 13411  14A0  0849               	movf	(exp@x+1)^(0+256),w
 13412  14A1  0021               	movlb	1	; select bank1
 13413  14A2  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13414  14A3  0022               	movlb	2	; select bank2
 13415  14A4  084A               	movf	(exp@x+2)^(0+256),w
 13416  14A5  0021               	movlb	1	; select bank1
 13417  14A6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13418  14A7  3000               	movlw	0
 13419  14A8  00D1               	movwf	___ftdiv@f1^(0+128)
 13420  14A9  3080               	movlw	128
 13421  14AA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13422  14AB  303F               	movlw	63
 13423  14AC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13424  14AD  319C  2454         	fcall	___ftdiv
 13425  14AF  0021               	movlb	1	; select bank1
 13426  14B0  084E               	movf	?___ftdiv^(0+128),w
 13427  14B1  0022               	movlb	2	; select bank2
 13428  14B2  00C8               	movwf	?_exp^(0+256)
 13429  14B3  0021               	movlb	1	; select bank1
 13430  14B4  084F               	movf	(?___ftdiv+1)^(0+128),w
 13431  14B5  0022               	movlb	2	; select bank2
 13432  14B6  00C9               	movwf	(?_exp+1)^(0+256)
 13433  14B7  0021               	movlb	1	; select bank1
 13434  14B8  0850               	movf	(?___ftdiv+2)^(0+128),w
 13435  14B9  0022               	movlb	2	; select bank2
 13436  14BA  00CA               	movwf	(?_exp+2)^(0+256)
 13437  14BB  0008               	return
 13438  14BC                     __end_of_exp:	
 13439                           
 13440                           	psect	text30
 13441  1B1F                     __ptext30:	
 13442 ;; *************** function _ldexp *****************
 13443 ;; Defined at:
 13444 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;  value           3   30[BANK2 ] unsigned char 
 13447 ;;  newexp          2   33[BANK2 ] int 
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;		None
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  3   30[BANK2 ] int 
 13452 ;; Registers used:
 13453 ;;		wreg, status,2, status,0, pclath, cstack
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13459 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13460 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13461 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13462 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13463 ;;Total ram usage:       10 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    4
 13466 ;; This function calls:
 13467 ;;		___ftge
 13468 ;;		___ftneg
 13469 ;; This function is called by:
 13470 ;;		_exp
 13471 ;; This function uses a non-reentrant model
 13472 ;;
 13473                           
 13474                           
 13475                           ;psect for function _ldexp
 13476  1B1F                     _ldexp:	
 13477                           
 13478                           ;incstack = 0
 13479                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13480  1B1F  0022               	movlb	2	; select bank2
 13481  1B20  0840               	movf	(ldexp@value+2)^(0+256),w
 13482  1B21  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13483  1B22  043E               	iorwf	ldexp@value^(0+256),w
 13484  1B23  1D03               	skipz
 13485  1B24  2B2C               	goto	l8246
 13486  1B25  3000               	movlw	0
 13487  1B26  00BE               	movwf	?_ldexp^(0+256)
 13488  1B27  3000               	movlw	0
 13489  1B28  00BF               	movwf	(?_ldexp+1)^(0+256)
 13490  1B29  3000               	movlw	0
 13491  1B2A  00C0               	movwf	(?_ldexp+2)^(0+256)
 13492  1B2B  0008               	return
 13493  1B2C                     l8246:	
 13494  1B2C  0840               	movf	(ldexp@value^(0+256)+2),w
 13495  1B2D  397F               	andlw	127
 13496  1B2E  00C3               	movwf	??_ldexp^(0+256)
 13497  1B2F  01C4               	clrf	(??_ldexp^(0+256)+1)
 13498  1B30  35C3               	lslf	??_ldexp^(0+256),f
 13499  1B31  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13500  1B32  0843               	movf	??_ldexp^(0+256),w
 13501  1B33  07C1               	addwf	ldexp@newexp^(0+256),f
 13502  1B34  0844               	movf	(??_ldexp+1)^(0+256),w
 13503  1B35  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13504  1B36  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13505  1B37  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13506  1B38  3901               	andlw	1
 13507  1B39  00C3               	movwf	??_ldexp^(0+256)
 13508  1B3A  01C4               	clrf	(??_ldexp^(0+256)+1)
 13509  1B3B  0843               	movf	??_ldexp^(0+256),w
 13510  1B3C  07C1               	addwf	ldexp@newexp^(0+256),f
 13511  1B3D  0844               	movf	(??_ldexp+1)^(0+256),w
 13512  1B3E  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13513  1B3F  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13514  1B40  2B4E               	goto	l8256
 13515  1B41  3022               	movlw	34
 13516  1B42  0024               	movlb	4	; select bank4
 13517  1B43  00D1               	movwf	_errno^(0+512)
 13518  1B44  3000               	movlw	0
 13519  1B45  00D2               	movwf	(_errno^(0+512)+1)
 13520  1B46  3000               	movlw	0
 13521  1B47  0022               	movlb	2	; select bank2
 13522  1B48  00BE               	movwf	?_ldexp^(0+256)
 13523  1B49  3000               	movlw	0
 13524  1B4A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13525  1B4B  3000               	movlw	0
 13526  1B4C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13527  1B4D  0008               	return
 13528  1B4E                     l8256:	
 13529  1B4E  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13530  1B4F  3A80               	xorlw	128
 13531  1B50  00C3               	movwf	??_ldexp^(0+256)
 13532  1B51  3081               	movlw	129
 13533  1B52  0243               	subwf	??_ldexp^(0+256),w
 13534  1B53  1D03               	skipz
 13535  1B54  2B57               	goto	u8725
 13536  1B55  3000               	movlw	0
 13537  1B56  0241               	subwf	ldexp@newexp^(0+256),w
 13538  1B57                     u8725:	
 13539  1B57  1C03               	skipc
 13540  1B58  2B9E               	goto	l8280
 13541  1B59  3022               	movlw	34
 13542  1B5A  0024               	movlb	4	; select bank4
 13543  1B5B  00D1               	movwf	_errno^(0+512)
 13544  1B5C  3000               	movlw	0
 13545  1B5D  00D2               	movwf	(_errno^(0+512)+1)
 13546  1B5E  0022               	movlb	2	; select bank2
 13547  1B5F  083E               	movf	ldexp@value^(0+256),w
 13548  1B60  0021               	movlb	1	; select bank1
 13549  1B61  00A0               	movwf	___ftge@ff1^(0+128)
 13550  1B62  0022               	movlb	2	; select bank2
 13551  1B63  083F               	movf	(ldexp@value+1)^(0+256),w
 13552  1B64  0021               	movlb	1	; select bank1
 13553  1B65  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13554  1B66  0022               	movlb	2	; select bank2
 13555  1B67  0840               	movf	(ldexp@value+2)^(0+256),w
 13556  1B68  0021               	movlb	1	; select bank1
 13557  1B69  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13558  1B6A  3000               	movlw	0
 13559  1B6B  00A3               	movwf	___ftge@ff2^(0+128)
 13560  1B6C  3000               	movlw	0
 13561  1B6D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13562  1B6E  3000               	movlw	0
 13563  1B6F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13564  1B70  31A0  209E  319B   	fcall	___ftge
 13565  1B73  1803               	btfsc	3,0
 13566  1B74  2B96               	goto	l8276
 13567  1B75  30FF               	movlw	255
 13568  1B76  0022               	movlb	2	; select bank2
 13569  1B77  00C5               	movwf	_ldexp$2654^(0+256)
 13570  1B78  307F               	movlw	127
 13571  1B79  00C6               	movwf	(_ldexp$2654+1)^(0+256)
 13572  1B7A  307F               	movlw	127
 13573  1B7B  00C7               	movwf	(_ldexp$2654+2)^(0+256)
 13574  1B7C  0845               	movf	_ldexp$2654^(0+256),w
 13575  1B7D  0021               	movlb	1	; select bank1
 13576  1B7E  00BE               	movwf	___ftneg@f1^(0+128)
 13577  1B7F  0022               	movlb	2	; select bank2
 13578  1B80  0846               	movf	(_ldexp$2654+1)^(0+256),w
 13579  1B81  0021               	movlb	1	; select bank1
 13580  1B82  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13581  1B83  0022               	movlb	2	; select bank2
 13582  1B84  0847               	movf	(_ldexp$2654+2)^(0+256),w
 13583  1B85  0021               	movlb	1	; select bank1
 13584  1B86  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13585  1B87  31AC  24DF         	fcall	___ftneg
 13586  1B89  0021               	movlb	1	; select bank1
 13587  1B8A  083E               	movf	?___ftneg^(0+128),w
 13588  1B8B  0022               	movlb	2	; select bank2
 13589  1B8C  00BE               	movwf	?_ldexp^(0+256)
 13590  1B8D  0021               	movlb	1	; select bank1
 13591  1B8E  083F               	movf	(?___ftneg+1)^(0+128),w
 13592  1B8F  0022               	movlb	2	; select bank2
 13593  1B90  00BF               	movwf	(?_ldexp+1)^(0+256)
 13594  1B91  0021               	movlb	1	; select bank1
 13595  1B92  0840               	movf	(?___ftneg+2)^(0+128),w
 13596  1B93  0022               	movlb	2	; select bank2
 13597  1B94  00C0               	movwf	(?_ldexp+2)^(0+256)
 13598  1B95  0008               	return
 13599  1B96                     l8276:	
 13600  1B96  30FF               	movlw	255
 13601  1B97  0022               	movlb	2	; select bank2
 13602  1B98  00BE               	movwf	?_ldexp^(0+256)
 13603  1B99  307F               	movlw	127
 13604  1B9A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13605  1B9B  307F               	movlw	127
 13606  1B9C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13607  1B9D  0008               	return
 13608  1B9E                     l8280:	
 13609  1B9E  0022               	movlb	2	; select bank2
 13610  1B9F  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13611  1BA0  00C4               	movwf	(??_ldexp^(0+256)+1)
 13612  1BA1  0841               	movf	ldexp@newexp^(0+256),w
 13613  1BA2  00C3               	movwf	??_ldexp^(0+256)
 13614  1BA3  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13615  1BA4  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13616  1BA5  0CC3               	rrf	??_ldexp^(0+256),f
 13617  1BA6  0840               	movf	(ldexp@value^(0+256)+2),w
 13618  1BA7  0643               	xorwf	??_ldexp^(0+256),w
 13619  1BA8  3980               	andlw	-128
 13620  1BA9  0643               	xorwf	??_ldexp^(0+256),w
 13621  1BAA  00C0               	movwf	(ldexp@value^(0+256)+2)
 13622  1BAB  0841               	movf	ldexp@newexp^(0+256),w
 13623  1BAC  3901               	andlw	1
 13624  1BAD  00C3               	movwf	??_ldexp^(0+256)
 13625  1BAE  0CC3               	rrf	??_ldexp^(0+256),f
 13626  1BAF  0CC3               	rrf	??_ldexp^(0+256),f
 13627  1BB0  083F               	movf	(ldexp@value^(0+256)+1),w
 13628  1BB1  0643               	xorwf	??_ldexp^(0+256),w
 13629  1BB2  397F               	andlw	-129
 13630  1BB3  0643               	xorwf	??_ldexp^(0+256),w
 13631  1BB4  00BF               	movwf	(ldexp@value^(0+256)+1)
 13632  1BB5  0008               	return
 13633  1BB6                     __end_of_ldexp:	
 13634                           
 13635                           	psect	text31
 13636  2E4F                     __ptext31:	
 13637 ;; *************** function ___lltoft *****************
 13638 ;; Defined at:
 13639 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;  c               4    8[BANK1 ] unsigned long 
 13642 ;; Auto vars:     Size  Location     Type
 13643 ;;  exp             1   13[BANK1 ] unsigned char 
 13644 ;; Return value:  Size  Location     Type
 13645 ;;                  3    8[BANK1 ] float 
 13646 ;; Registers used:
 13647 ;;		wreg, status,2, status,0, pclath, cstack
 13648 ;; Tracked objects:
 13649 ;;		On entry : 0/0
 13650 ;;		On exit  : 0/0
 13651 ;;		Unchanged: 0/0
 13652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13653 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13654 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13655 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13656 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13657 ;;Total ram usage:        6 bytes
 13658 ;; Hardware stack levels used:    1
 13659 ;; Hardware stack levels required when called:    4
 13660 ;; This function calls:
 13661 ;;		___ftpack
 13662 ;; This function is called by:
 13663 ;;		_pow
 13664 ;; This function uses a non-reentrant model
 13665 ;;
 13666                           
 13667                           
 13668                           ;psect for function ___lltoft
 13669  2E4F                     ___lltoft:	
 13670                           
 13671                           ;incstack = 0
 13672                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13673  2E4F  308E               	movlw	142
 13674  2E50  0021               	movlb	1	; select bank1
 13675  2E51  00AC               	movwf	??___lltoft^(0+128)
 13676  2E52  082C               	movf	??___lltoft^(0+128),w
 13677  2E53  00AD               	movwf	___lltoft@exp^(0+128)
 13678  2E54                     l8398:	
 13679  2E54  30FF               	movlw	255
 13680  2E55  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13681  2E56  1903               	btfsc	3,2
 13682  2E57  2E64               	goto	l8400
 13683  2E58  3001               	movlw	1
 13684  2E59                     u8845:	
 13685  2E59  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13686  2E5A  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13687  2E5B  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13688  2E5C  0CA8               	rrf	___lltoft@c^(0+128),f
 13689  2E5D  0B89               	decfsz	9,f
 13690  2E5E  2E59               	goto	u8845
 13691  2E5F  3001               	movlw	1
 13692  2E60  00AC               	movwf	??___lltoft^(0+128)
 13693  2E61  082C               	movf	??___lltoft^(0+128),w
 13694  2E62  07AD               	addwf	___lltoft@exp^(0+128),f
 13695  2E63  2E54               	goto	l8398
 13696  2E64                     l8400:	
 13697  2E64  0828               	movf	___lltoft@c^(0+128),w
 13698  2E65  00A0               	movwf	___ftpack@arg^(0+128)
 13699  2E66  0829               	movf	(___lltoft@c+1)^(0+128),w
 13700  2E67  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13701  2E68  082A               	movf	(___lltoft@c+2)^(0+128),w
 13702  2E69  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13703  2E6A  082D               	movf	___lltoft@exp^(0+128),w
 13704  2E6B  00AC               	movwf	??___lltoft^(0+128)
 13705  2E6C  082C               	movf	??___lltoft^(0+128),w
 13706  2E6D  00A3               	movwf	___ftpack@exp^(0+128)
 13707  2E6E  01A4               	clrf	___ftpack@sign^(0+128)
 13708  2E6F  31A5  25AA         	fcall	___ftpack
 13709  2E71  0021               	movlb	1	; select bank1
 13710  2E72  0820               	movf	?___ftpack^(0+128),w
 13711  2E73  00A8               	movwf	?___lltoft^(0+128)
 13712  2E74  0821               	movf	(?___ftpack+1)^(0+128),w
 13713  2E75  00A9               	movwf	(?___lltoft+1)^(0+128)
 13714  2E76  0822               	movf	(?___ftpack+2)^(0+128),w
 13715  2E77  00AA               	movwf	(?___lltoft+2)^(0+128)
 13716  2E78  0008               	return
 13717  2E79                     __end_of___lltoft:	
 13718                           
 13719                           	psect	text32
 13720  2369                     __ptext32:	
 13721 ;; *************** function _read_top_tactile *****************
 13722 ;; Defined at:
 13723 ;;		line 50 in file "tactiles.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;		None
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;		None
 13728 ;; Return value:  Size  Location     Type
 13729 ;;                  1    wreg      void 
 13730 ;; Registers used:
 13731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13732 ;; Tracked objects:
 13733 ;;		On entry : 0/0
 13734 ;;		On exit  : 0/0
 13735 ;;		Unchanged: 0/0
 13736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13739 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13740 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13741 ;;Total ram usage:        1 bytes
 13742 ;; Hardware stack levels used:    1
 13743 ;; Hardware stack levels required when called:    5
 13744 ;; This function calls:
 13745 ;;		_set_leds_top
 13746 ;;		_wait_ms
 13747 ;; This function is called by:
 13748 ;;		_main
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           
 13753                           ;psect for function _read_top_tactile
 13754  2369                     _read_top_tactile:	
 13755                           
 13756                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13757                           
 13758                           ;incstack = 0
 13759                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13760  2369  0020               	movlb	0	; select bank0
 13761  236A  1A8F               	btfsc	15,5	;volatile
 13762  236B  2B73               	goto	l9176
 13763                           
 13764                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13765  236C  0023               	movlb	3	; select bank3
 13766  236D  084C               	movf	_topTactile_pressed^(0+384),w
 13767  236E  1903               	btfsc	3,2
 13768  236F  2B7E               	goto	l1002
 13769                           
 13770                           ;tactiles.c: 62: topTactile_pressed--;
 13771  2370  3001               	movlw	1
 13772  2371  02CC               	subwf	_topTactile_pressed^(0+384),f
 13773                           
 13774                           ;tactiles.c: 63: }
 13775                           ;tactiles.c: 64: } else if (topTactile_pressed < 25*3) {
 13776  2372  2B7E               	goto	l1002
 13777  2373                     l9176:	
 13778  2373  304B               	movlw	75
 13779  2374  0023               	movlb	3	; select bank3
 13780  2375  024C               	subwf	_topTactile_pressed^(0+384),w
 13781  2376  1803               	skipnc
 13782  2377  2B7E               	goto	l1002
 13783                           
 13784                           ;tactiles.c: 65: topTactile_pressed++;
 13785  2378  3001               	movlw	1
 13786  2379  0021               	movlb	1	; select bank1
 13787  237A  00B2               	movwf	??_read_top_tactile^(0+128)
 13788  237B  0832               	movf	??_read_top_tactile^(0+128),w
 13789  237C  0023               	movlb	3	; select bank3
 13790  237D  07CC               	addwf	_topTactile_pressed^(0+384),f
 13791  237E                     l1002:	
 13792                           
 13793                           ;tactiles.c: 66: }
 13794                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13795  237E  084C               	movf	_topTactile_pressed^(0+384),w
 13796  237F  1D03               	btfss	3,2
 13797  2380  0008               	return
 13798                           
 13799                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13800  2381  0020               	movlb	0	; select bank0
 13801  2382  084C               	movf	_top_push_state,w
 13802  2383  3E01               	addlw	1
 13803  2384  00CC               	movwf	_top_push_state
 13804  2385  3000               	movlw	0
 13805  2386  3D4D               	addwfc	_top_push_state+1,w
 13806  2387  00CD               	movwf	_top_push_state+1
 13807                           
 13808                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13809  2388  084D               	movf	_top_push_state+1,w
 13810  2389  3A80               	xorlw	128
 13811  238A  0021               	movlb	1	; select bank1
 13812  238B  00B2               	movwf	??_read_top_tactile^(0+128)
 13813  238C  3080               	movlw	128
 13814  238D  0232               	subwf	??_read_top_tactile^(0+128),w
 13815  238E  1D03               	skipz
 13816  238F  2B93               	goto	u10185
 13817  2390  3007               	movlw	7
 13818  2391  0020               	movlb	0	; select bank0
 13819  2392  024C               	subwf	_top_push_state,w
 13820  2393                     u10185:	
 13821  2393  1C03               	skipc
 13822  2394  2B9A               	goto	l9186
 13823                           
 13824                           ;tactiles.c: 75: top_push_state = 1;
 13825  2395  3001               	movlw	1
 13826  2396  0020               	movlb	0	; select bank0
 13827  2397  00CC               	movwf	_top_push_state
 13828  2398  3000               	movlw	0
 13829  2399  00CD               	movwf	_top_push_state+1
 13830  239A                     l9186:	
 13831                           
 13832                           ;tactiles.c: 76: }
 13833                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13834  239A  0020               	movlb	0	; select bank0
 13835  239B  084D               	movf	_top_push_state+1,w
 13836  239C  0021               	movlb	1	; select bank1
 13837  239D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13838  239E  0020               	movlb	0	; select bank0
 13839  239F  084C               	movf	_top_push_state,w
 13840  23A0  0021               	movlb	1	; select bank1
 13841  23A1  00A0               	movwf	set_leds_top@x^(0+128)
 13842  23A2  3001               	movlw	1
 13843  23A3  00A2               	movwf	set_leds_top@ledState^(0+128)
 13844  23A4  3000               	movlw	0
 13845  23A5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13846  23A6  31A4  24FD  31A3   	fcall	_set_leds_top
 13847                           
 13848                           ;tactiles.c: 78: mod_time_changed = 1;
 13849  23A9  0023               	movlb	3	; select bank3
 13850  23AA  01E4               	clrf	_mod_time_changed^(0+384)
 13851  23AB  0AE4               	incf	_mod_time_changed^(0+384),f
 13852  23AC                     l1006:	
 13853                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13854                           
 13855  23AC  0020               	movlb	0	; select bank0
 13856  23AD  1E8F               	btfss	15,5	;volatile
 13857  23AE  2BAC               	goto	l1006
 13858                           
 13859                           ;tactiles.c: 82: }
 13860                           ;tactiles.c: 83: wait_ms(20);
 13861  23AF  3014               	movlw	20
 13862  23B0  0021               	movlb	1	; select bank1
 13863  23B1  00AC               	movwf	wait_ms@timeSec^(0+128)
 13864  23B2  3000               	movlw	0
 13865  23B3  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13866  23B4  3190  2003         	fcall	_wait_ms
 13867  23B6  0008               	return
 13868  23B7                     __end_of_read_top_tactile:	
 13869                           
 13870                           	psect	text33
 13871  231F                     __ptext33:	
 13872 ;; *************** function _read_bottom_tactile *****************
 13873 ;; Defined at:
 13874 ;;		line 18 in file "tactiles.c"
 13875 ;; Parameters:    Size  Location     Type
 13876 ;;		None
 13877 ;; Auto vars:     Size  Location     Type
 13878 ;;		None
 13879 ;; Return value:  Size  Location     Type
 13880 ;;                  1    wreg      void 
 13881 ;; Registers used:
 13882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13883 ;; Tracked objects:
 13884 ;;		On entry : 0/0
 13885 ;;		On exit  : 0/0
 13886 ;;		Unchanged: 0/0
 13887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13890 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13891 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13892 ;;Total ram usage:        1 bytes
 13893 ;; Hardware stack levels used:    1
 13894 ;; Hardware stack levels required when called:    5
 13895 ;; This function calls:
 13896 ;;		_set_leds_bottom
 13897 ;;		_wait_ms
 13898 ;; This function is called by:
 13899 ;;		_main
 13900 ;; This function uses a non-reentrant model
 13901 ;;
 13902                           
 13903                           
 13904                           ;psect for function _read_bottom_tactile
 13905  231F                     _read_bottom_tactile:	
 13906                           
 13907                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13908                           
 13909                           ;incstack = 0
 13910                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13911  231F  0020               	movlb	0	; select bank0
 13912  2320  1B0F               	btfsc	15,6	;volatile
 13913  2321  2B29               	goto	l9154
 13914                           
 13915                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13916  2322  0023               	movlb	3	; select bank3
 13917  2323  083F               	movf	_bottomTactile_pressed^(0+384),w
 13918  2324  1903               	btfsc	3,2
 13919  2325  2B34               	goto	l990
 13920                           
 13921                           ;tactiles.c: 29: bottomTactile_pressed--;
 13922  2326  3001               	movlw	1
 13923  2327  02BF               	subwf	_bottomTactile_pressed^(0+384),f
 13924                           
 13925                           ;tactiles.c: 30: }
 13926                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25*3) {
 13927  2328  2B34               	goto	l990
 13928  2329                     l9154:	
 13929  2329  304B               	movlw	75
 13930  232A  0023               	movlb	3	; select bank3
 13931  232B  023F               	subwf	_bottomTactile_pressed^(0+384),w
 13932  232C  1803               	skipnc
 13933  232D  2B34               	goto	l990
 13934                           
 13935                           ;tactiles.c: 32: bottomTactile_pressed++;
 13936  232E  3001               	movlw	1
 13937  232F  0021               	movlb	1	; select bank1
 13938  2330  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13939  2331  0832               	movf	??_read_bottom_tactile^(0+128),w
 13940  2332  0023               	movlb	3	; select bank3
 13941  2333  07BF               	addwf	_bottomTactile_pressed^(0+384),f
 13942  2334                     l990:	
 13943                           
 13944                           ;tactiles.c: 33: }
 13945                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13946  2334  083F               	movf	_bottomTactile_pressed^(0+384),w
 13947  2335  1D03               	btfss	3,2
 13948  2336  0008               	return
 13949                           
 13950                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13951  2337  0020               	movlb	0	; select bank0
 13952  2338  0848               	movf	_bottom_push_state,w
 13953  2339  3E01               	addlw	1
 13954  233A  00C8               	movwf	_bottom_push_state
 13955  233B  3000               	movlw	0
 13956  233C  3D49               	addwfc	_bottom_push_state+1,w
 13957  233D  00C9               	movwf	_bottom_push_state+1
 13958                           
 13959                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13960  233E  0849               	movf	_bottom_push_state+1,w
 13961  233F  3A80               	xorlw	128
 13962  2340  0021               	movlb	1	; select bank1
 13963  2341  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13964  2342  3080               	movlw	128
 13965  2343  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13966  2344  1D03               	skipz
 13967  2345  2B49               	goto	u10125
 13968  2346  3006               	movlw	6
 13969  2347  0020               	movlb	0	; select bank0
 13970  2348  0248               	subwf	_bottom_push_state,w
 13971  2349                     u10125:	
 13972  2349  1C03               	skipc
 13973  234A  2B50               	goto	l9164
 13974                           
 13975                           ;tactiles.c: 39: bottom_push_state = 1;
 13976  234B  3001               	movlw	1
 13977  234C  0020               	movlb	0	; select bank0
 13978  234D  00C8               	movwf	_bottom_push_state
 13979  234E  3000               	movlw	0
 13980  234F  00C9               	movwf	_bottom_push_state+1
 13981  2350                     l9164:	
 13982                           
 13983                           ;tactiles.c: 40: }
 13984                           ;tactiles.c: 41: modulation_changed = 1;
 13985  2350  0023               	movlb	3	; select bank3
 13986  2351  01C7               	clrf	_modulation_changed^(0+384)
 13987  2352  0AC7               	incf	_modulation_changed^(0+384),f
 13988                           
 13989                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13990  2353  0020               	movlb	0	; select bank0
 13991  2354  0849               	movf	_bottom_push_state+1,w
 13992  2355  0021               	movlb	1	; select bank1
 13993  2356  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13994  2357  0020               	movlb	0	; select bank0
 13995  2358  0848               	movf	_bottom_push_state,w
 13996  2359  0021               	movlb	1	; select bank1
 13997  235A  00A0               	movwf	set_leds_bottom@x^(0+128)
 13998  235B  31A0  2063  31A3   	fcall	_set_leds_bottom
 13999  235E                     l994:	
 14000                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 14001                           
 14002  235E  0020               	movlb	0	; select bank0
 14003  235F  1F0F               	btfss	15,6	;volatile
 14004  2360  2B5E               	goto	l994
 14005                           
 14006                           ;tactiles.c: 45: }
 14007                           ;tactiles.c: 46: wait_ms(20);
 14008  2361  3014               	movlw	20
 14009  2362  0021               	movlb	1	; select bank1
 14010  2363  00AC               	movwf	wait_ms@timeSec^(0+128)
 14011  2364  3000               	movlw	0
 14012  2365  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14013  2366  3190  2003         	fcall	_wait_ms
 14014  2368  0008               	return
 14015  2369                     __end_of_read_bottom_tactile:	
 14016                           
 14017                           	psect	text34
 14018  1A09                     __ptext34:	
 14019 ;; *************** function _map *****************
 14020 ;; Defined at:
 14021 ;;		line 177 in file "user.c"
 14022 ;; Parameters:    Size  Location     Type
 14023 ;;  x               3   62[BANK1 ] float 
 14024 ;;  in_min          3   65[BANK1 ] float 
 14025 ;;  in_max          3   68[BANK1 ] float 
 14026 ;;  out_min         3   71[BANK1 ] float 
 14027 ;;  out_max         3   74[BANK1 ] float 
 14028 ;; Auto vars:     Size  Location     Type
 14029 ;;		None
 14030 ;; Return value:  Size  Location     Type
 14031 ;;                  3   62[BANK1 ] float 
 14032 ;; Registers used:
 14033 ;;		wreg, status,2, status,0, pclath, cstack
 14034 ;; Tracked objects:
 14035 ;;		On entry : 0/0
 14036 ;;		On exit  : 0/0
 14037 ;;		Unchanged: 0/0
 14038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14039 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14040 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14042 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14043 ;;Total ram usage:       18 bytes
 14044 ;; Hardware stack levels used:    1
 14045 ;; Hardware stack levels required when called:    5
 14046 ;; This function calls:
 14047 ;;		___ftadd
 14048 ;;		___ftdiv
 14049 ;;		___ftmul
 14050 ;;		___ftneg
 14051 ;; This function is called by:
 14052 ;;		_main
 14053 ;; This function uses a non-reentrant model
 14054 ;;
 14055                           
 14056                           
 14057                           ;psect for function _map
 14058  1A09                     _map:	
 14059                           
 14060                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14061                           
 14062                           ;incstack = 0
 14063                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 14064  1A09  0021               	movlb	1	; select bank1
 14065  1A0A  0864               	movf	map@in_max^(0+128),w
 14066  1A0B  00C1               	movwf	___ftadd@f1^(0+128)
 14067  1A0C  0865               	movf	(map@in_max+1)^(0+128),w
 14068  1A0D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14069  1A0E  0866               	movf	(map@in_max+2)^(0+128),w
 14070  1A0F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14071  1A10  0861               	movf	map@in_min^(0+128),w
 14072  1A11  00BE               	movwf	___ftneg@f1^(0+128)
 14073  1A12  0862               	movf	(map@in_min+1)^(0+128),w
 14074  1A13  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14075  1A14  0863               	movf	(map@in_min+2)^(0+128),w
 14076  1A15  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14077  1A16  31AC  24DF  319A   	fcall	___ftneg
 14078  1A19  0021               	movlb	1	; select bank1
 14079  1A1A  083E               	movf	?___ftneg^(0+128),w
 14080  1A1B  00C4               	movwf	___ftadd@f2^(0+128)
 14081  1A1C  083F               	movf	(?___ftneg+1)^(0+128),w
 14082  1A1D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14083  1A1E  0840               	movf	(?___ftneg+2)^(0+128),w
 14084  1A1F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14085  1A20  3190  2035  319A   	fcall	___ftadd
 14086  1A23  0021               	movlb	1	; select bank1
 14087  1A24  0841               	movf	?___ftadd^(0+128),w
 14088  1A25  00CE               	movwf	___ftdiv@f2^(0+128)
 14089  1A26  0842               	movf	(?___ftadd+1)^(0+128),w
 14090  1A27  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14091  1A28  0843               	movf	(?___ftadd+2)^(0+128),w
 14092  1A29  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14093  1A2A  086A               	movf	map@out_max^(0+128),w
 14094  1A2B  00C1               	movwf	___ftadd@f1^(0+128)
 14095  1A2C  086B               	movf	(map@out_max+1)^(0+128),w
 14096  1A2D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14097  1A2E  086C               	movf	(map@out_max+2)^(0+128),w
 14098  1A2F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14099  1A30  0867               	movf	map@out_min^(0+128),w
 14100  1A31  00BE               	movwf	___ftneg@f1^(0+128)
 14101  1A32  0868               	movf	(map@out_min+1)^(0+128),w
 14102  1A33  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14103  1A34  0869               	movf	(map@out_min+2)^(0+128),w
 14104  1A35  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14105  1A36  31AC  24DF  319A   	fcall	___ftneg
 14106  1A39  0021               	movlb	1	; select bank1
 14107  1A3A  083E               	movf	?___ftneg^(0+128),w
 14108  1A3B  00C4               	movwf	___ftadd@f2^(0+128)
 14109  1A3C  083F               	movf	(?___ftneg+1)^(0+128),w
 14110  1A3D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14111  1A3E  0840               	movf	(?___ftneg+2)^(0+128),w
 14112  1A3F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14113  1A40  3190  2035  319A   	fcall	___ftadd
 14114  1A43  0021               	movlb	1	; select bank1
 14115  1A44  0841               	movf	?___ftadd^(0+128),w
 14116  1A45  00AE               	movwf	___ftmul@f1^(0+128)
 14117  1A46  0842               	movf	(?___ftadd+1)^(0+128),w
 14118  1A47  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14119  1A48  0843               	movf	(?___ftadd+2)^(0+128),w
 14120  1A49  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14121  1A4A  085E               	movf	map@x^(0+128),w
 14122  1A4B  00C1               	movwf	___ftadd@f1^(0+128)
 14123  1A4C  085F               	movf	(map@x+1)^(0+128),w
 14124  1A4D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14125  1A4E  0860               	movf	(map@x+2)^(0+128),w
 14126  1A4F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14127  1A50  0861               	movf	map@in_min^(0+128),w
 14128  1A51  00BE               	movwf	___ftneg@f1^(0+128)
 14129  1A52  0862               	movf	(map@in_min+1)^(0+128),w
 14130  1A53  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14131  1A54  0863               	movf	(map@in_min+2)^(0+128),w
 14132  1A55  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14133  1A56  31AC  24DF  319A   	fcall	___ftneg
 14134  1A59  0021               	movlb	1	; select bank1
 14135  1A5A  083E               	movf	?___ftneg^(0+128),w
 14136  1A5B  00C4               	movwf	___ftadd@f2^(0+128)
 14137  1A5C  083F               	movf	(?___ftneg+1)^(0+128),w
 14138  1A5D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14139  1A5E  0840               	movf	(?___ftneg+2)^(0+128),w
 14140  1A5F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14141  1A60  3190  2035  319A   	fcall	___ftadd
 14142  1A63  0021               	movlb	1	; select bank1
 14143  1A64  0841               	movf	?___ftadd^(0+128),w
 14144  1A65  00B1               	movwf	___ftmul@f2^(0+128)
 14145  1A66  0842               	movf	(?___ftadd+1)^(0+128),w
 14146  1A67  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14147  1A68  0843               	movf	(?___ftadd+2)^(0+128),w
 14148  1A69  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14149  1A6A  319D  25B0  319A   	fcall	___ftmul
 14150  1A6D  0021               	movlb	1	; select bank1
 14151  1A6E  082E               	movf	?___ftmul^(0+128),w
 14152  1A6F  00D1               	movwf	___ftdiv@f1^(0+128)
 14153  1A70  082F               	movf	(?___ftmul+1)^(0+128),w
 14154  1A71  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14155  1A72  0830               	movf	(?___ftmul+2)^(0+128),w
 14156  1A73  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14157  1A74  319C  2454  319A   	fcall	___ftdiv
 14158  1A77  0021               	movlb	1	; select bank1
 14159  1A78  084E               	movf	?___ftdiv^(0+128),w
 14160  1A79  00ED               	movwf	_map$2854^(0+128)
 14161  1A7A  084F               	movf	(?___ftdiv+1)^(0+128),w
 14162  1A7B  00EE               	movwf	(_map$2854+1)^(0+128)
 14163  1A7C  0850               	movf	(?___ftdiv+2)^(0+128),w
 14164  1A7D  00EF               	movwf	(_map$2854+2)^(0+128)
 14165                           
 14166                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14167  1A7E  0867               	movf	map@out_min^(0+128),w
 14168  1A7F  00C1               	movwf	___ftadd@f1^(0+128)
 14169  1A80  0868               	movf	(map@out_min+1)^(0+128),w
 14170  1A81  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14171  1A82  0869               	movf	(map@out_min+2)^(0+128),w
 14172  1A83  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14173  1A84  086D               	movf	_map$2854^(0+128),w
 14174  1A85  00C4               	movwf	___ftadd@f2^(0+128)
 14175  1A86  086E               	movf	(_map$2854+1)^(0+128),w
 14176  1A87  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14177  1A88  086F               	movf	(_map$2854+2)^(0+128),w
 14178  1A89  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14179  1A8A  3190  2035         	fcall	___ftadd
 14180  1A8C  0021               	movlb	1	; select bank1
 14181  1A8D  0841               	movf	?___ftadd^(0+128),w
 14182  1A8E  00DE               	movwf	?_map^(0+128)
 14183  1A8F  0842               	movf	(?___ftadd+1)^(0+128),w
 14184  1A90  00DF               	movwf	(?_map+1)^(0+128)
 14185  1A91  0843               	movf	(?___ftadd+2)^(0+128),w
 14186  1A92  00E0               	movwf	(?_map+2)^(0+128)
 14187  1A93  0008               	return
 14188  1A94                     __end_of_map:	
 14189                           
 14190                           	psect	text35
 14191  2D0A                     __ptext35:	
 14192 ;; *************** function _initSwitchBypass *****************
 14193 ;; Defined at:
 14194 ;;		line 29 in file "SwitchBypass.c"
 14195 ;; Parameters:    Size  Location     Type
 14196 ;;		None
 14197 ;; Auto vars:     Size  Location     Type
 14198 ;;  initState       2   26[BANK1 ] int 
 14199 ;; Return value:  Size  Location     Type
 14200 ;;                  1    wreg      void 
 14201 ;; Registers used:
 14202 ;;		wreg, status,2, status,0, pclath, cstack
 14203 ;; Tracked objects:
 14204 ;;		On entry : 0/0
 14205 ;;		On exit  : 0/0
 14206 ;;		Unchanged: 0/0
 14207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14209 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14211 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14212 ;;Total ram usage:        2 bytes
 14213 ;; Hardware stack levels used:    1
 14214 ;; Hardware stack levels required when called:    7
 14215 ;; This function calls:
 14216 ;;		_getSwitchBypassState
 14217 ;;		_setSwitchBypassState
 14218 ;; This function is called by:
 14219 ;;		_main
 14220 ;; This function uses a non-reentrant model
 14221 ;;
 14222                           
 14223                           
 14224                           ;psect for function _initSwitchBypass
 14225  2D0A                     _initSwitchBypass:	
 14226                           
 14227                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14228                           
 14229                           ;incstack = 0
 14230                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14231  2D0A  31A0  2002  31AD   	fcall	_getSwitchBypassState
 14232  2D0D  0021               	movlb	1	; select bank1
 14233  2D0E  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14234  2D0F  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14235  2D10  0820               	movf	?_getSwitchBypassState^(0+128),w
 14236  2D11  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14237                           
 14238                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14239  2D12  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14240  2D13  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14241  2D14  083A               	movf	initSwitchBypass@initState^(0+128),w
 14242  2D15  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14243  2D16  31AD  25D4         	fcall	_setSwitchBypassState
 14244  2D18  0008               	return
 14245  2D19                     __end_of_initSwitchBypass:	
 14246                           
 14247                           	psect	text36
 14248  2DD4                     __ptext36:	
 14249 ;; *************** function _setSwitchBypassState *****************
 14250 ;; Defined at:
 14251 ;;		line 141 in file "SwitchBypass.c"
 14252 ;; Parameters:    Size  Location     Type
 14253 ;;  f_state         2   22[BANK1 ] int 
 14254 ;; Auto vars:     Size  Location     Type
 14255 ;;		None
 14256 ;; Return value:  Size  Location     Type
 14257 ;;                  1    wreg      void 
 14258 ;; Registers used:
 14259 ;;		wreg, status,2, status,0, pclath, cstack
 14260 ;; Tracked objects:
 14261 ;;		On entry : 0/0
 14262 ;;		On exit  : 0/0
 14263 ;;		Unchanged: 0/0
 14264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14265 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14267 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14268 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14269 ;;Total ram usage:        4 bytes
 14270 ;; Hardware stack levels used:    1
 14271 ;; Hardware stack levels required when called:    6
 14272 ;; This function calls:
 14273 ;;		_setSwitchBypassRelays
 14274 ;; This function is called by:
 14275 ;;		_initSwitchBypass
 14276 ;;		_updateSwitchBypass
 14277 ;; This function uses a non-reentrant model
 14278 ;;
 14279                           
 14280                           
 14281                           ;psect for function _setSwitchBypassState
 14282  2DD4                     _setSwitchBypassState:	
 14283                           
 14284                           ;SwitchBypass.c: 142: if (switchBypass_state == f_state) {return;}
 14285                           
 14286                           ;incstack = 0
 14287                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14288  2DD4  0020               	movlb	0	; select bank0
 14289  2DD5  0851               	movf	_switchBypass_state,w
 14290  2DD6  0021               	movlb	1	; select bank1
 14291  2DD7  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14292  2DD8  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14293  2DD9  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14294  2DDA  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14295  2DDB  1D03               	skipz
 14296  2DDC  2DDF               	goto	u9045
 14297  2DDD  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14298  2DDE  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14299  2DDF                     u9045:	
 14300  2DDF  1903               	btfsc	3,2
 14301  2DE0  0008               	return
 14302                           
 14303                           ;SwitchBypass.c: 144: LATBbits.LATB2 = f_state;
 14304  2DE1  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14305  2DE2  0022               	movlb	2	; select bank2
 14306  2DE3  1C03               	skipc
 14307  2DE4  110D               	bcf	13,2	;volatile
 14308  2DE5  1803               	skipnc
 14309  2DE6  150D               	bsf	13,2	;volatile
 14310                           
 14311                           ;SwitchBypass.c: 145: LATBbits.LATB3 = 0;
 14312  2DE7  118D               	bcf	13,3	;volatile
 14313                           
 14314                           ;SwitchBypass.c: 146: setSwitchBypassRelays(f_state);
 14315  2DE8  0021               	movlb	1	; select bank1
 14316  2DE9  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14317  2DEA  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14318  2DEB  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14319  2DEC  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14320  2DED  31AF  2792         	fcall	_setSwitchBypassRelays
 14321  2DEF  0008               	return
 14322  2DF0                     __end_of_setSwitchBypassState:	
 14323                           
 14324                           	psect	text37
 14325  2F92                     __ptext37:	
 14326 ;; *************** function _setSwitchBypassRelays *****************
 14327 ;; Defined at:
 14328 ;;		line 149 in file "SwitchBypass.c"
 14329 ;; Parameters:    Size  Location     Type
 14330 ;;  f_state         2   18[BANK1 ] int 
 14331 ;; Auto vars:     Size  Location     Type
 14332 ;;		None
 14333 ;; Return value:  Size  Location     Type
 14334 ;;                  1    wreg      void 
 14335 ;; Registers used:
 14336 ;;		wreg, status,2, status,0, pclath, cstack
 14337 ;; Tracked objects:
 14338 ;;		On entry : 0/0
 14339 ;;		On exit  : 0/0
 14340 ;;		Unchanged: 0/0
 14341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14342 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14344 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14345 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14346 ;;Total ram usage:        4 bytes
 14347 ;; Hardware stack levels used:    1
 14348 ;; Hardware stack levels required when called:    5
 14349 ;; This function calls:
 14350 ;;		_updateSwitchBypassState
 14351 ;;		_wait_ms
 14352 ;; This function is called by:
 14353 ;;		_updateSwitchBypass
 14354 ;;		_setSwitchBypassState
 14355 ;; This function uses a non-reentrant model
 14356 ;;
 14357                           
 14358                           
 14359                           ;psect for function _setSwitchBypassRelays
 14360  2F92                     _setSwitchBypassRelays:	
 14361                           
 14362                           ;SwitchBypass.c: 150: switchBypass_state = f_state;
 14363                           
 14364                           ;incstack = 0
 14365                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14366  2F92  0021               	movlb	1	; select bank1
 14367  2F93  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14368  2F94  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14369  2F95  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14370  2F96  0020               	movlb	0	; select bank0
 14371  2F97  00D1               	movwf	_switchBypass_state
 14372                           
 14373                           ;SwitchBypass.c: 151: LATGbits.LATG2 = f_state;
 14374  2F98  0021               	movlb	1	; select bank1
 14375  2F99  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14376  2F9A  0027               	movlb	7	; select bank7
 14377  2F9B  1C03               	skipc
 14378  2F9C  110D               	bcf	13,2	;volatile
 14379  2F9D  1803               	skipnc
 14380  2F9E  150D               	bsf	13,2	;volatile
 14381                           
 14382                           ;SwitchBypass.c: 152: LATGbits.LATG1 = !f_state;
 14383  2F9F  0021               	movlb	1	; select bank1
 14384  2FA0  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14385  2FA1  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14386  2FA2  1D03               	btfss	3,2
 14387  2FA3  2FA7               	goto	u8740
 14388  2FA4  0027               	movlb	7	; select bank7
 14389  2FA5  148D               	bsf	13,1	;volatile
 14390  2FA6  2FA9               	goto	l8324
 14391  2FA7                     u8740:	
 14392  2FA7  0027               	movlb	7	; select bank7
 14393  2FA8  108D               	bcf	13,1	;volatile
 14394  2FA9                     l8324:	
 14395                           
 14396                           ;SwitchBypass.c: 154: wait_ms(20);
 14397  2FA9  3014               	movlw	20
 14398  2FAA  0021               	movlb	1	; select bank1
 14399  2FAB  00AC               	movwf	wait_ms@timeSec^(0+128)
 14400  2FAC  3000               	movlw	0
 14401  2FAD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14402  2FAE  3190  2003  31AF   	fcall	_wait_ms
 14403                           
 14404                           ;SwitchBypass.c: 156: LATGbits.LATG2 = 0;
 14405  2FB1  0027               	movlb	7	; select bank7
 14406  2FB2  110D               	bcf	13,2	;volatile
 14407                           
 14408                           ;SwitchBypass.c: 157: LATGbits.LATG1 = 0;
 14409  2FB3  108D               	bcf	13,1	;volatile
 14410                           
 14411                           ;SwitchBypass.c: 159: updateSwitchBypassState(switchBypass_state);
 14412  2FB4  0020               	movlb	0	; select bank0
 14413  2FB5  0851               	movf	_switchBypass_state,w
 14414  2FB6  0021               	movlb	1	; select bank1
 14415  2FB7  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14416  2FB8  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14417  2FB9  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14418  2FBA  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14419  2FBB  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14420  2FBC  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14421  2FBD  3187  27FF  31AF   	fcall	_updateSwitchBypassState
 14422                           
 14423                           ;SwitchBypass.c: 160: wait_ms(20);
 14424  2FC0  3014               	movlw	20
 14425  2FC1  0021               	movlb	1	; select bank1
 14426  2FC2  00AC               	movwf	wait_ms@timeSec^(0+128)
 14427  2FC3  3000               	movlw	0
 14428  2FC4  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14429  2FC5  3190  2003         	fcall	_wait_ms
 14430  2FC7  0008               	return
 14431  2FC8                     __end_of_setSwitchBypassRelays:	
 14432                           
 14433                           	psect	text38
 14434  1003                     __ptext38:	
 14435 ;; *************** function _wait_ms *****************
 14436 ;; Defined at:
 14437 ;;		line 23 in file "system.c"
 14438 ;; Parameters:    Size  Location     Type
 14439 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14440 ;; Auto vars:     Size  Location     Type
 14441 ;;  timemsl         4   14[BANK1 ] long 
 14442 ;; Return value:  Size  Location     Type
 14443 ;;                  1    wreg      void 
 14444 ;; Registers used:
 14445 ;;		wreg, status,2, status,0, pclath, cstack
 14446 ;; Tracked objects:
 14447 ;;		On entry : 0/0
 14448 ;;		On exit  : 0/0
 14449 ;;		Unchanged: 0/0
 14450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14451 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14452 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14454 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14455 ;;Total ram usage:        6 bytes
 14456 ;; Hardware stack levels used:    1
 14457 ;; Hardware stack levels required when called:    4
 14458 ;; This function calls:
 14459 ;;		___lmul
 14460 ;; This function is called by:
 14461 ;;		_ring_tactiles
 14462 ;;		_solidring_tactiles
 14463 ;;		_read_bottom_tactile
 14464 ;;		_read_top_tactile
 14465 ;;		_setSwitchBypassRelays
 14466 ;;		_setDoublePressState
 14467 ;;		_showError_Alternating
 14468 ;;		_show_error
 14469 ;;		_show_cancel
 14470 ;;		_star_tactiles
 14471 ;;		_initExpModeState
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           
 14476                           ;psect for function _wait_ms
 14477  1003                     _wait_ms:	
 14478                           
 14479                           ;system.c: 25: long timemsl = 0;
 14480                           
 14481                           ;incstack = 0
 14482                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14483  1003  3000               	movlw	0
 14484  1004  0021               	movlb	1	; select bank1
 14485  1005  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14486  1006  3000               	movlw	0
 14487  1007  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14488  1008  3000               	movlw	0
 14489  1009  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14490  100A  3000               	movlw	0
 14491  100B  00AE               	movwf	wait_ms@timemsl^(0+128)
 14492                           
 14493                           ;system.c: 26: timemsl = timeSec * 1000l;
 14494  100C  082C               	movf	wait_ms@timeSec^(0+128),w
 14495  100D  00A0               	movwf	___lmul@multiplier^(0+128)
 14496  100E  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14497  100F  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14498  1010  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14499  1011  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14500  1012  3000               	movlw	0
 14501  1013  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14502  1014  3000               	movlw	0
 14503  1015  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14504  1016  3003               	movlw	3
 14505  1017  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14506  1018  30E8               	movlw	232
 14507  1019  00A4               	movwf	___lmul@multiplicand^(0+128)
 14508  101A  31AF  2762  3190   	fcall	___lmul
 14509  101D  0021               	movlb	1	; select bank1
 14510  101E  0823               	movf	(?___lmul+3)^(0+128),w
 14511  101F  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14512  1020  0822               	movf	(?___lmul+2)^(0+128),w
 14513  1021  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14514  1022  0821               	movf	(?___lmul+1)^(0+128),w
 14515  1023  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14516  1024  0820               	movf	?___lmul^(0+128),w
 14517  1025  00AE               	movwf	wait_ms@timemsl^(0+128)
 14518  1026                     l396:	
 14519                           ;system.c: 27: for( ; timemsl; timemsl--);
 14520                           
 14521  1026  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14522  1027  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14523  1028  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14524  1029  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14525  102A  1903               	btfsc	3,2
 14526  102B  0008               	return
 14527  102C  30FF               	movlw	255
 14528  102D  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14529  102E  30FF               	movlw	255
 14530  102F  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14531  1030  30FF               	movlw	255
 14532  1031  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14533  1032  30FF               	movlw	255
 14534  1033  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14535  1034  2826               	goto	l396
 14536  1035                     __end_of_wait_ms:	
 14537                           
 14538                           	psect	text39
 14539  2F62                     __ptext39:	
 14540 ;; *************** function ___lmul *****************
 14541 ;; Defined at:
 14542 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14545 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14546 ;; Auto vars:     Size  Location     Type
 14547 ;;  product         4    8[BANK1 ] unsigned long 
 14548 ;; Return value:  Size  Location     Type
 14549 ;;                  4    0[BANK1 ] unsigned long 
 14550 ;; Registers used:
 14551 ;;		wreg, status,2, status,0
 14552 ;; Tracked objects:
 14553 ;;		On entry : 0/0
 14554 ;;		On exit  : 0/0
 14555 ;;		Unchanged: 0/0
 14556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14557 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14558 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14560 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14561 ;;Total ram usage:       12 bytes
 14562 ;; Hardware stack levels used:    1
 14563 ;; Hardware stack levels required when called:    3
 14564 ;; This function calls:
 14565 ;;		Nothing
 14566 ;; This function is called by:
 14567 ;;		_wait_ms
 14568 ;; This function uses a non-reentrant model
 14569 ;;
 14570                           
 14571                           
 14572                           ;psect for function ___lmul
 14573  2F62                     ___lmul:	
 14574                           
 14575                           ;incstack = 0
 14576                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14577  2F62  3000               	movlw	0
 14578  2F63  0021               	movlb	1	; select bank1
 14579  2F64  00AB               	movwf	(___lmul@product+3)^(0+128)
 14580  2F65  3000               	movlw	0
 14581  2F66  00AA               	movwf	(___lmul@product+2)^(0+128)
 14582  2F67  3000               	movlw	0
 14583  2F68  00A9               	movwf	(___lmul@product+1)^(0+128)
 14584  2F69  3000               	movlw	0
 14585  2F6A  00A8               	movwf	___lmul@product^(0+128)
 14586  2F6B                     l7770:	
 14587  2F6B  1C20               	btfss	___lmul@multiplier^(0+128),0
 14588  2F6C  2F75               	goto	l7774
 14589  2F6D  0824               	movf	___lmul@multiplicand^(0+128),w
 14590  2F6E  07A8               	addwf	___lmul@product^(0+128),f
 14591  2F6F  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14592  2F70  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14593  2F71  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14594  2F72  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14595  2F73  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14596  2F74  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14597  2F75                     l7774:	
 14598  2F75  3001               	movlw	1
 14599  2F76                     u7775:	
 14600  2F76  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14601  2F77  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14602  2F78  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14603  2F79  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14604  2F7A  0B89               	decfsz	9,f
 14605  2F7B  2F76               	goto	u7775
 14606  2F7C  3001               	movlw	1
 14607  2F7D                     u7785:	
 14608  2F7D  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14609  2F7E  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14610  2F7F  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14611  2F80  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14612  2F81  0B89               	decfsz	9,f
 14613  2F82  2F7D               	goto	u7785
 14614  2F83  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14615  2F84  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14616  2F85  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14617  2F86  0420               	iorwf	___lmul@multiplier^(0+128),w
 14618  2F87  1D03               	skipz
 14619  2F88  2F6B               	goto	l7770
 14620  2F89  082B               	movf	(___lmul@product+3)^(0+128),w
 14621  2F8A  00A3               	movwf	(?___lmul+3)^(0+128)
 14622  2F8B  082A               	movf	(___lmul@product+2)^(0+128),w
 14623  2F8C  00A2               	movwf	(?___lmul+2)^(0+128)
 14624  2F8D  0829               	movf	(___lmul@product+1)^(0+128),w
 14625  2F8E  00A1               	movwf	(?___lmul+1)^(0+128)
 14626  2F8F  0828               	movf	___lmul@product^(0+128),w
 14627  2F90  00A0               	movwf	?___lmul^(0+128)
 14628  2F91  0008               	return
 14629  2F92                     __end_of___lmul:	
 14630                           
 14631                           	psect	text40
 14632  07FF                     __ptext40:	
 14633 ;; *************** function _updateSwitchBypassState *****************
 14634 ;; Defined at:
 14635 ;;		line 96 in file "state_manager.c"
 14636 ;; Parameters:    Size  Location     Type
 14637 ;;  state           2    0[BANK1 ] int 
 14638 ;; Auto vars:     Size  Location     Type
 14639 ;;		None
 14640 ;; Return value:  Size  Location     Type
 14641 ;;                  1    wreg      void 
 14642 ;; Registers used:
 14643 ;;		None
 14644 ;; Tracked objects:
 14645 ;;		On entry : 0/0
 14646 ;;		On exit  : 0/0
 14647 ;;		Unchanged: 0/0
 14648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14649 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14652 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14653 ;;Total ram usage:        2 bytes
 14654 ;; Hardware stack levels used:    1
 14655 ;; Hardware stack levels required when called:    3
 14656 ;; This function calls:
 14657 ;;		Nothing
 14658 ;; This function is called by:
 14659 ;;		_setSwitchBypassRelays
 14660 ;; This function uses a non-reentrant model
 14661 ;;
 14662                           
 14663                           
 14664                           ;psect for function _updateSwitchBypassState
 14665  07FF                     _updateSwitchBypassState:	
 14666                           
 14667                           ;incstack = 0
 14668                           ; Regs used in _updateSwitchBypassState: []
 14669  07FF  0008               	return
 14670  0800                     __end_of_updateSwitchBypassState:	
 14671                           
 14672                           	psect	text41
 14673  2002                     __ptext41:	
 14674 ;; *************** function _getSwitchBypassState *****************
 14675 ;; Defined at:
 14676 ;;		line 103 in file "state_manager.c"
 14677 ;; Parameters:    Size  Location     Type
 14678 ;;		None
 14679 ;; Auto vars:     Size  Location     Type
 14680 ;;		None
 14681 ;; Return value:  Size  Location     Type
 14682 ;;                  2    0[BANK1 ] int 
 14683 ;; Registers used:
 14684 ;;		status,2
 14685 ;; Tracked objects:
 14686 ;;		On entry : 0/0
 14687 ;;		On exit  : 0/0
 14688 ;;		Unchanged: 0/0
 14689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14690 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14693 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14694 ;;Total ram usage:        2 bytes
 14695 ;; Hardware stack levels used:    1
 14696 ;; Hardware stack levels required when called:    3
 14697 ;; This function calls:
 14698 ;;		Nothing
 14699 ;; This function is called by:
 14700 ;;		_initSwitchBypass
 14701 ;; This function uses a non-reentrant model
 14702 ;;
 14703                           
 14704                           
 14705                           ;psect for function _getSwitchBypassState
 14706  2002                     _getSwitchBypassState:	
 14707                           
 14708                           ;state_manager.c: 108: return 0;
 14709                           
 14710                           ;incstack = 0
 14711                           ; Regs used in _getSwitchBypassState: [status,2]
 14712  2002  0021               	movlb	1	; select bank1
 14713  2003  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14714  2004  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14715  2005  0008               	return
 14716  2006                     __end_of_getSwitchBypassState:	
 14717                           
 14718                           	psect	text42
 14719  24AA                     __ptext42:	
 14720 ;; *************** function _getModulationDelayTime *****************
 14721 ;; Defined at:
 14722 ;;		line 35 in file "modulation.c"
 14723 ;; Parameters:    Size  Location     Type
 14724 ;;		None
 14725 ;; Auto vars:     Size  Location     Type
 14726 ;;  subDiv          2   14[BANK2 ] int 
 14727 ;; Return value:  Size  Location     Type
 14728 ;;                  1    wreg      void 
 14729 ;; Registers used:
 14730 ;;		wreg, status,2, status,0, pclath, cstack
 14731 ;; Tracked objects:
 14732 ;;		On entry : 0/0
 14733 ;;		On exit  : 0/0
 14734 ;;		Unchanged: 0/0
 14735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14737 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14739 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14740 ;;Total ram usage:        2 bytes
 14741 ;; Hardware stack levels used:    1
 14742 ;; Hardware stack levels required when called:    5
 14743 ;; This function calls:
 14744 ;;		___altoft
 14745 ;;		___awtoft
 14746 ;;		___ftdiv
 14747 ;;		___fttol
 14748 ;;		_getModulationSubdivision
 14749 ;; This function is called by:
 14750 ;;		_main
 14751 ;; This function uses a non-reentrant model
 14752 ;;
 14753                           
 14754                           
 14755                           ;psect for function _getModulationDelayTime
 14756  24AA                     _getModulationDelayTime:	
 14757                           
 14758                           ;modulation.c: 36: adjust_mod_delay = 0;
 14759                           
 14760                           ;incstack = 0
 14761                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14762  24AA  0023               	movlb	3	; select bank3
 14763  24AB  01BE               	clrf	_adjust_mod_delay^(0+384)
 14764                           
 14765                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14766  24AC  31AF  2732  31A4   	fcall	_getModulationSubdivision
 14767  24AF  0021               	movlb	1	; select bank1
 14768  24B0  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14769  24B1  0022               	movlb	2	; select bank2
 14770  24B2  00AF               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14771  24B3  0021               	movlb	1	; select bank1
 14772  24B4  0820               	movf	?_getModulationSubdivision^(0+128),w
 14773  24B5  0022               	movlb	2	; select bank2
 14774  24B6  00AE               	movwf	getModulationDelayTime@subDiv^(0+256)
 14775                           
 14776                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14777  24B7  0020               	movlb	0	; select bank0
 14778  24B8  0847               	movf	_delay_time+3,w	;volatile
 14779  24B9  0021               	movlb	1	; select bank1
 14780  24BA  00AB               	movwf	(___altoft@c+3)^(0+128)
 14781  24BB  0020               	movlb	0	; select bank0
 14782  24BC  0846               	movf	_delay_time+2,w	;volatile
 14783  24BD  0021               	movlb	1	; select bank1
 14784  24BE  00AA               	movwf	(___altoft@c+2)^(0+128)
 14785  24BF  0020               	movlb	0	; select bank0
 14786  24C0  0845               	movf	_delay_time+1,w	;volatile
 14787  24C1  0021               	movlb	1	; select bank1
 14788  24C2  00A9               	movwf	(___altoft@c+1)^(0+128)
 14789  24C3  0020               	movlb	0	; select bank0
 14790  24C4  0844               	movf	_delay_time,w	;volatile
 14791  24C5  0021               	movlb	1	; select bank1
 14792  24C6  00A8               	movwf	___altoft@c^(0+128)
 14793  24C7  31A0  20DA  31A4   	fcall	___altoft
 14794  24CA  0021               	movlb	1	; select bank1
 14795  24CB  0828               	movf	?___altoft^(0+128),w
 14796  24CC  00D1               	movwf	___ftdiv@f1^(0+128)
 14797  24CD  0829               	movf	(?___altoft+1)^(0+128),w
 14798  24CE  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14799  24CF  082A               	movf	(?___altoft+2)^(0+128),w
 14800  24D0  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14801  24D1  0022               	movlb	2	; select bank2
 14802  24D2  082F               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14803  24D3  0021               	movlb	1	; select bank1
 14804  24D4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14805  24D5  0022               	movlb	2	; select bank2
 14806  24D6  082E               	movf	getModulationDelayTime@subDiv^(0+256),w
 14807  24D7  0021               	movlb	1	; select bank1
 14808  24D8  00A8               	movwf	___awtoft@c^(0+128)
 14809  24D9  31AE  262D  31A4   	fcall	___awtoft
 14810  24DC  0021               	movlb	1	; select bank1
 14811  24DD  0828               	movf	?___awtoft^(0+128),w
 14812  24DE  00CE               	movwf	___ftdiv@f2^(0+128)
 14813  24DF  0829               	movf	(?___awtoft+1)^(0+128),w
 14814  24E0  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14815  24E1  082A               	movf	(?___awtoft+2)^(0+128),w
 14816  24E2  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14817  24E3  319C  2454  31A4   	fcall	___ftdiv
 14818  24E6  0021               	movlb	1	; select bank1
 14819  24E7  084E               	movf	?___ftdiv^(0+128),w
 14820  24E8  0022               	movlb	2	; select bank2
 14821  24E9  00A0               	movwf	___fttol@f1^(0+256)
 14822  24EA  0021               	movlb	1	; select bank1
 14823  24EB  084F               	movf	(?___ftdiv+1)^(0+128),w
 14824  24EC  0022               	movlb	2	; select bank2
 14825  24ED  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14826  24EE  0021               	movlb	1	; select bank1
 14827  24EF  0850               	movf	(?___ftdiv+2)^(0+128),w
 14828  24F0  0022               	movlb	2	; select bank2
 14829  24F1  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14830  24F2  3199  2182         	fcall	___fttol
 14831  24F4  0022               	movlb	2	; select bank2
 14832  24F5  0821               	movf	(?___fttol^(0+256)+1),w
 14833  24F6  0023               	movlb	3	; select bank3
 14834  24F7  00DA               	movwf	(_mod_delay_time+1)^(0+384)
 14835  24F8  0022               	movlb	2	; select bank2
 14836  24F9  0820               	movf	?___fttol^(0+256),w
 14837  24FA  0023               	movlb	3	; select bank3
 14838  24FB  00D9               	movwf	_mod_delay_time^(0+384)
 14839  24FC  0008               	return
 14840  24FD                     __end_of_getModulationDelayTime:	
 14841                           
 14842                           	psect	text43
 14843  2F32                     __ptext43:	
 14844 ;; *************** function _getModulationSubdivision *****************
 14845 ;; Defined at:
 14846 ;;		line 26 in file "modulation.c"
 14847 ;; Parameters:    Size  Location     Type
 14848 ;;		None
 14849 ;; Auto vars:     Size  Location     Type
 14850 ;;		None
 14851 ;; Return value:  Size  Location     Type
 14852 ;;                  2    0[BANK1 ] int 
 14853 ;; Registers used:
 14854 ;;		wreg, status,2, status,0
 14855 ;; Tracked objects:
 14856 ;;		On entry : 0/0
 14857 ;;		On exit  : 0/0
 14858 ;;		Unchanged: 0/0
 14859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14860 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14863 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14864 ;;Total ram usage:        2 bytes
 14865 ;; Hardware stack levels used:    1
 14866 ;; Hardware stack levels required when called:    3
 14867 ;; This function calls:
 14868 ;;		Nothing
 14869 ;; This function is called by:
 14870 ;;		_getModulationDelayTime
 14871 ;;		_updateModulationArray
 14872 ;; This function uses a non-reentrant model
 14873 ;;
 14874                           
 14875                           
 14876                           ;psect for function _getModulationSubdivision
 14877  2F32                     _getModulationSubdivision:	
 14878                           
 14879                           ;modulation.c: 27: if (delay_time >= 2400) {
 14880                           
 14881                           ;incstack = 0
 14882                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14883  2F32  0020               	movlb	0	; select bank0
 14884  2F33  1BC7               	btfsc	_delay_time+3,7	;volatile
 14885  2F34  2F47               	goto	l8488
 14886  2F35  0847               	movf	_delay_time+3,w	;volatile
 14887  2F36  1D03               	btfss	3,2
 14888  2F37  2F41               	goto	l8482
 14889  2F38  0846               	movf	_delay_time+2,w	;volatile
 14890  2F39  1D03               	btfss	3,2
 14891  2F3A  2F41               	goto	l8482
 14892  2F3B  3060               	movlw	96
 14893  2F3C  0244               	subwf	_delay_time,w	;volatile
 14894  2F3D  3009               	movlw	9
 14895  2F3E  3B45               	subwfb	_delay_time+1,w	;volatile
 14896  2F3F  1C03               	btfss	3,0
 14897  2F40  2F47               	goto	l8488
 14898  2F41                     l8482:	
 14899                           
 14900                           ;modulation.c: 28: return 120;
 14901  2F41  3078               	movlw	120
 14902  2F42  0021               	movlb	1	; select bank1
 14903  2F43  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14904  2F44  3000               	movlw	0
 14905  2F45  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14906                           
 14907                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14908  2F46  0008               	return
 14909  2F47                     l8488:	
 14910  2F47  0020               	movlb	0	; select bank0
 14911  2F48  1BC7               	btfsc	_delay_time+3,7	;volatile
 14912  2F49  2F5C               	goto	l8496
 14913  2F4A  0847               	movf	_delay_time+3,w	;volatile
 14914  2F4B  1D03               	btfss	3,2
 14915  2F4C  2F56               	goto	l8490
 14916  2F4D  0846               	movf	_delay_time+2,w	;volatile
 14917  2F4E  1D03               	btfss	3,2
 14918  2F4F  2F56               	goto	l8490
 14919  2F50  3058               	movlw	88
 14920  2F51  0244               	subwf	_delay_time,w	;volatile
 14921  2F52  3002               	movlw	2
 14922  2F53  3B45               	subwfb	_delay_time+1,w	;volatile
 14923  2F54  1C03               	btfss	3,0
 14924  2F55  2F5C               	goto	l8496
 14925  2F56                     l8490:	
 14926                           
 14927                           ;modulation.c: 30: return 60;
 14928  2F56  303C               	movlw	60
 14929  2F57  0021               	movlb	1	; select bank1
 14930  2F58  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14931  2F59  3000               	movlw	0
 14932  2F5A  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14933                           
 14934                           ;modulation.c: 31: } else {
 14935  2F5B  0008               	return
 14936  2F5C                     l8496:	
 14937                           
 14938                           ;modulation.c: 32: return 30;
 14939  2F5C  301E               	movlw	30
 14940  2F5D  0021               	movlb	1	; select bank1
 14941  2F5E  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14942  2F5F  3000               	movlw	0
 14943  2F60  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14944  2F61  0008               	return
 14945  2F62                     __end_of_getModulationSubdivision:	
 14946                           
 14947                           	psect	text44
 14948  26FD                     __ptext44:	
 14949 ;; *************** function _calcCosArray *****************
 14950 ;; Defined at:
 14951 ;;		line 18 in file "modulation.c"
 14952 ;; Parameters:    Size  Location     Type
 14953 ;;		None
 14954 ;; Auto vars:     Size  Location     Type
 14955 ;;  tmpVal          3   54[BANK2 ] int 
 14956 ;;  iAngle          1   57[BANK2 ] unsigned char 
 14957 ;; Return value:  Size  Location     Type
 14958 ;;                  1    wreg      void 
 14959 ;; Registers used:
 14960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14961 ;; Tracked objects:
 14962 ;;		On entry : 0/0
 14963 ;;		On exit  : 0/0
 14964 ;;		Unchanged: 0/0
 14965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14967 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14968 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14969 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14970 ;;Total ram usage:        8 bytes
 14971 ;; Hardware stack levels used:    1
 14972 ;; Hardware stack levels required when called:    8
 14973 ;; This function calls:
 14974 ;;		___awtoft
 14975 ;;		___ftdiv
 14976 ;;		___ftmul
 14977 ;;		___wmul
 14978 ;;		_cos
 14979 ;; This function is called by:
 14980 ;;		_main
 14981 ;; This function uses a non-reentrant model
 14982 ;;
 14983                           
 14984                           
 14985                           ;psect for function _calcCosArray
 14986  26FD                     _calcCosArray:	
 14987                           
 14988                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14989                           
 14990                           ;incstack = 0
 14991                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14992  26FD  0022               	movlb	2	; select bank2
 14993  26FE  01D9               	clrf	calcCosArray@iAngle^(0+256)
 14994  26FF                     L17:	
 14995  26FF  3078               	movlw	120
 14996  2700  0259               	subwf	calcCosArray@iAngle^(0+256),w
 14997  2701  1803               	btfsc	3,0
 14998  2702  0008               	return
 14999                           
 15000                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 15001  2703  3000               	movlw	0
 15002  2704  0021               	movlb	1	; select bank1
 15003  2705  00CE               	movwf	___ftdiv@f2^(0+128)
 15004  2706  3034               	movlw	52
 15005  2707  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15006  2708  3043               	movlw	67
 15007  2709  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15008  270A  3010               	movlw	16
 15009  270B  00AE               	movwf	___ftmul@f1^(0+128)
 15010  270C  3049               	movlw	73
 15011  270D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15012  270E  3040               	movlw	64
 15013  270F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15014  2710  0022               	movlb	2	; select bank2
 15015  2711  0859               	movf	calcCosArray@iAngle^(0+256),w
 15016  2712  00D2               	movwf	??_calcCosArray^(0+256)
 15017  2713  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15018  2714  0852               	movf	??_calcCosArray^(0+256),w
 15019  2715  00AE               	movwf	___wmul@multiplier^(0+256)
 15020  2716  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15021  2717  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15022  2718  3003               	movlw	3
 15023  2719  00B0               	movwf	___wmul@multiplicand^(0+256)
 15024  271A  3000               	movlw	0
 15025  271B  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15026  271C  31AD  25B8  31A6   	fcall	___wmul
 15027  271F  0022               	movlb	2	; select bank2
 15028  2720  082F               	movf	(?___wmul+1)^(0+256),w
 15029  2721  0021               	movlb	1	; select bank1
 15030  2722  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15031  2723  0022               	movlb	2	; select bank2
 15032  2724  082E               	movf	?___wmul^(0+256),w
 15033  2725  0021               	movlb	1	; select bank1
 15034  2726  00A8               	movwf	___awtoft@c^(0+128)
 15035  2727  31AE  262D  31A6   	fcall	___awtoft
 15036  272A  0021               	movlb	1	; select bank1
 15037  272B  0828               	movf	?___awtoft^(0+128),w
 15038  272C  00B1               	movwf	___ftmul@f2^(0+128)
 15039  272D  0829               	movf	(?___awtoft+1)^(0+128),w
 15040  272E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15041  272F  082A               	movf	(?___awtoft+2)^(0+128),w
 15042  2730  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15043  2731  319D  25B0  31A6   	fcall	___ftmul
 15044  2734  0021               	movlb	1	; select bank1
 15045  2735  082E               	movf	?___ftmul^(0+128),w
 15046  2736  00D1               	movwf	___ftdiv@f1^(0+128)
 15047  2737  082F               	movf	(?___ftmul+1)^(0+128),w
 15048  2738  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15049  2739  0830               	movf	(?___ftmul+2)^(0+128),w
 15050  273A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15051  273B  319C  2454  31A6   	fcall	___ftdiv
 15052  273E  0021               	movlb	1	; select bank1
 15053  273F  084E               	movf	?___ftdiv^(0+128),w
 15054  2740  0022               	movlb	2	; select bank2
 15055  2741  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15056  2742  0021               	movlb	1	; select bank1
 15057  2743  084F               	movf	(?___ftdiv+1)^(0+128),w
 15058  2744  0022               	movlb	2	; select bank2
 15059  2745  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15060  2746  0021               	movlb	1	; select bank1
 15061  2747  0850               	movf	(?___ftdiv+2)^(0+128),w
 15062  2748  0022               	movlb	2	; select bank2
 15063  2749  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15064                           
 15065                           ;modulation.c: 21: tmpVal = cos(tmpVal);
 15066  274A  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15067  274B  00CC               	movwf	cos@f^(0+256)
 15068  274C  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15069  274D  00CD               	movwf	(cos@f+1)^(0+256)
 15070  274E  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15071  274F  00CE               	movwf	(cos@f+2)^(0+256)
 15072  2750  31A6  2681  31A6   	fcall	_cos
 15073  2753  0022               	movlb	2	; select bank2
 15074  2754  084C               	movf	?_cos^(0+256),w
 15075  2755  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15076  2756  084D               	movf	(?_cos+1)^(0+256),w
 15077  2757  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15078  2758  084E               	movf	(?_cos+2)^(0+256),w
 15079  2759  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15080                           
 15081                           ;modulation.c: 22: cosArray[iAngle] = tmpVal;
 15082  275A  0859               	movf	calcCosArray@iAngle^(0+256),w
 15083  275B  00D2               	movwf	??_calcCosArray^(0+256)
 15084  275C  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15085  275D  0852               	movf	??_calcCosArray^(0+256),w
 15086  275E  00AE               	movwf	___wmul@multiplier^(0+256)
 15087  275F  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15088  2760  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15089  2761  3003               	movlw	3
 15090  2762  00B0               	movwf	___wmul@multiplicand^(0+256)
 15091  2763  3000               	movlw	0
 15092  2764  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15093  2765  31AD  25B8  31A6   	fcall	___wmul
 15094  2768  3082               	movlw	130
 15095  2769  0022               	movlb	2	; select bank2
 15096  276A  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 15097  276B  3024               	movlw	36
 15098  276C  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 15099  276D  082E               	movf	?___wmul^(0+256),w
 15100  276E  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 15101  276F  0086               	movwf	6
 15102  2770  082F               	movf	(?___wmul+1)^(0+256),w
 15103  2771  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 15104  2772  0087               	movwf	7
 15105  2773  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15106  2774  3FC0               	movwi [0]fsr1
 15107  2775  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15108  2776  3FC1               	movwi [1]fsr1
 15109  2777  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15110  2778  3FC2               	movwi [2]fsr1
 15111  2779  3001               	movlw	1
 15112  277A  00D2               	movwf	??_calcCosArray^(0+256)
 15113  277B  0852               	movf	??_calcCosArray^(0+256),w
 15114  277C  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 15115  277D  2EFF               	goto	L17
 15116  277E                     __end_of_calcCosArray:	
 15117                           
 15118                           	psect	text45
 15119  2681                     __ptext45:	
 15120 ;; *************** function _cos *****************
 15121 ;; Defined at:
 15122 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 15123 ;; Parameters:    Size  Location     Type
 15124 ;;  f               3   44[BANK2 ] void 
 15125 ;; Auto vars:     Size  Location     Type
 15126 ;;		None
 15127 ;; Return value:  Size  Location     Type
 15128 ;;                  3   44[BANK2 ] void 
 15129 ;; Registers used:
 15130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15131 ;; Tracked objects:
 15132 ;;		On entry : 0/0
 15133 ;;		On exit  : 0/0
 15134 ;;		Unchanged: 0/0
 15135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15136 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15137 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15139 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15140 ;;Total ram usage:        6 bytes
 15141 ;; Hardware stack levels used:    1
 15142 ;; Hardware stack levels required when called:    7
 15143 ;; This function calls:
 15144 ;;		___ftadd
 15145 ;;		___ftge
 15146 ;;		_sin
 15147 ;; This function is called by:
 15148 ;;		_calcCosArray
 15149 ;; This function uses a non-reentrant model
 15150 ;;
 15151                           
 15152                           
 15153                           ;psect for function _cos
 15154  2681                     _cos:	
 15155                           
 15156                           ;incstack = 0
 15157                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15158  2681  3010               	movlw	16
 15159  2682  0021               	movlb	1	; select bank1
 15160  2683  00A0               	movwf	___ftge@ff1^(0+128)
 15161  2684  3049               	movlw	73
 15162  2685  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15163  2686  3040               	movlw	64
 15164  2687  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15165  2688  0022               	movlb	2	; select bank2
 15166  2689  084C               	movf	cos@f^(0+256),w
 15167  268A  0021               	movlb	1	; select bank1
 15168  268B  00A3               	movwf	___ftge@ff2^(0+128)
 15169  268C  0022               	movlb	2	; select bank2
 15170  268D  084D               	movf	(cos@f+1)^(0+256),w
 15171  268E  0021               	movlb	1	; select bank1
 15172  268F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15173  2690  0022               	movlb	2	; select bank2
 15174  2691  084E               	movf	(cos@f+2)^(0+256),w
 15175  2692  0021               	movlb	1	; select bank1
 15176  2693  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15177  2694  31A0  209E  31A6   	fcall	___ftge
 15178  2697  1803               	btfsc	3,0
 15179  2698  2ECB               	goto	l8658
 15180  2699  30CC               	movlw	204
 15181  269A  0021               	movlb	1	; select bank1
 15182  269B  00C1               	movwf	___ftadd@f1^(0+128)
 15183  269C  3096               	movlw	150
 15184  269D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15185  269E  30C0               	movlw	192
 15186  269F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15187  26A0  0022               	movlb	2	; select bank2
 15188  26A1  084C               	movf	cos@f^(0+256),w
 15189  26A2  0021               	movlb	1	; select bank1
 15190  26A3  00C4               	movwf	___ftadd@f2^(0+128)
 15191  26A4  0022               	movlb	2	; select bank2
 15192  26A5  084D               	movf	(cos@f+1)^(0+256),w
 15193  26A6  0021               	movlb	1	; select bank1
 15194  26A7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15195  26A8  0022               	movlb	2	; select bank2
 15196  26A9  084E               	movf	(cos@f+2)^(0+256),w
 15197  26AA  0021               	movlb	1	; select bank1
 15198  26AB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15199  26AC  3190  2035  31A6   	fcall	___ftadd
 15200  26AF  0021               	movlb	1	; select bank1
 15201  26B0  0841               	movf	?___ftadd^(0+128),w
 15202  26B1  0022               	movlb	2	; select bank2
 15203  26B2  00CF               	movwf	_cos$2872^(0+256)
 15204  26B3  0021               	movlb	1	; select bank1
 15205  26B4  0842               	movf	(?___ftadd+1)^(0+128),w
 15206  26B5  0022               	movlb	2	; select bank2
 15207  26B6  00D0               	movwf	(_cos$2872+1)^(0+256)
 15208  26B7  0021               	movlb	1	; select bank1
 15209  26B8  0843               	movf	(?___ftadd+2)^(0+128),w
 15210  26B9  0022               	movlb	2	; select bank2
 15211  26BA  00D1               	movwf	(_cos$2872+2)^(0+256)
 15212  26BB  084F               	movf	_cos$2872^(0+256),w
 15213  26BC  00BE               	movwf	sin@f^(0+256)
 15214  26BD  0850               	movf	(_cos$2872+1)^(0+256),w
 15215  26BE  00BF               	movwf	(sin@f+1)^(0+256)
 15216  26BF  0851               	movf	(_cos$2872+2)^(0+256),w
 15217  26C0  00C0               	movwf	(sin@f+2)^(0+256)
 15218  26C1  3188  2020         	fcall	_sin
 15219  26C3  0022               	movlb	2	; select bank2
 15220  26C4  083E               	movf	?_sin^(0+256),w
 15221  26C5  00CC               	movwf	?_cos^(0+256)
 15222  26C6  083F               	movf	(?_sin+1)^(0+256),w
 15223  26C7  00CD               	movwf	(?_cos+1)^(0+256)
 15224  26C8  0840               	movf	(?_sin+2)^(0+256),w
 15225  26C9  00CE               	movwf	(?_cos+2)^(0+256)
 15226  26CA  0008               	return
 15227  26CB                     l8658:	
 15228  26CB  3010               	movlw	16
 15229  26CC  0021               	movlb	1	; select bank1
 15230  26CD  00C1               	movwf	___ftadd@f1^(0+128)
 15231  26CE  30C9               	movlw	201
 15232  26CF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15233  26D0  303F               	movlw	63
 15234  26D1  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15235  26D2  0022               	movlb	2	; select bank2
 15236  26D3  084C               	movf	cos@f^(0+256),w
 15237  26D4  0021               	movlb	1	; select bank1
 15238  26D5  00C4               	movwf	___ftadd@f2^(0+128)
 15239  26D6  0022               	movlb	2	; select bank2
 15240  26D7  084D               	movf	(cos@f+1)^(0+256),w
 15241  26D8  0021               	movlb	1	; select bank1
 15242  26D9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15243  26DA  0022               	movlb	2	; select bank2
 15244  26DB  084E               	movf	(cos@f+2)^(0+256),w
 15245  26DC  0021               	movlb	1	; select bank1
 15246  26DD  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15247  26DE  3190  2035  31A6   	fcall	___ftadd
 15248  26E1  0021               	movlb	1	; select bank1
 15249  26E2  0841               	movf	?___ftadd^(0+128),w
 15250  26E3  0022               	movlb	2	; select bank2
 15251  26E4  00CF               	movwf	_cos$2872^(0+256)
 15252  26E5  0021               	movlb	1	; select bank1
 15253  26E6  0842               	movf	(?___ftadd+1)^(0+128),w
 15254  26E7  0022               	movlb	2	; select bank2
 15255  26E8  00D0               	movwf	(_cos$2872+1)^(0+256)
 15256  26E9  0021               	movlb	1	; select bank1
 15257  26EA  0843               	movf	(?___ftadd+2)^(0+128),w
 15258  26EB  0022               	movlb	2	; select bank2
 15259  26EC  00D1               	movwf	(_cos$2872+2)^(0+256)
 15260  26ED  084F               	movf	_cos$2872^(0+256),w
 15261  26EE  00BE               	movwf	sin@f^(0+256)
 15262  26EF  0850               	movf	(_cos$2872+1)^(0+256),w
 15263  26F0  00BF               	movwf	(sin@f+1)^(0+256)
 15264  26F1  0851               	movf	(_cos$2872+2)^(0+256),w
 15265  26F2  00C0               	movwf	(sin@f+2)^(0+256)
 15266  26F3  3188  2020         	fcall	_sin
 15267  26F5  0022               	movlb	2	; select bank2
 15268  26F6  083E               	movf	?_sin^(0+256),w
 15269  26F7  00CC               	movwf	?_cos^(0+256)
 15270  26F8  083F               	movf	(?_sin+1)^(0+256),w
 15271  26F9  00CD               	movwf	(?_cos+1)^(0+256)
 15272  26FA  0840               	movf	(?_sin+2)^(0+256),w
 15273  26FB  00CE               	movwf	(?_cos+2)^(0+256)
 15274  26FC  0008               	return
 15275  26FD                     __end_of_cos:	
 15276                           
 15277                           	psect	text46
 15278  0820                     __ptext46:	
 15279 ;; *************** function _sin *****************
 15280 ;; Defined at:
 15281 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;  f               3   30[BANK2 ] void 
 15284 ;; Auto vars:     Size  Location     Type
 15285 ;;  x2              3   40[BANK2 ] void 
 15286 ;;  y               3   34[BANK2 ] void 
 15287 ;;  sgn             1   43[BANK2 ] unsigned char 
 15288 ;; Return value:  Size  Location     Type
 15289 ;;                  3   30[BANK2 ] unsigned char 
 15290 ;; Registers used:
 15291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15292 ;; Tracked objects:
 15293 ;;		On entry : 0/0
 15294 ;;		On exit  : 0/0
 15295 ;;		Unchanged: 0/0
 15296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15297 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15298 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15299 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15300 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15301 ;;Total ram usage:       14 bytes
 15302 ;; Hardware stack levels used:    1
 15303 ;; Hardware stack levels required when called:    6
 15304 ;; This function calls:
 15305 ;;		___ftadd
 15306 ;;		___ftdiv
 15307 ;;		___ftge
 15308 ;;		___ftmul
 15309 ;;		___ftneg
 15310 ;;		___ftsub
 15311 ;;		_eval_poly
 15312 ;;		_floor
 15313 ;; This function is called by:
 15314 ;;		_cos
 15315 ;; This function uses a non-reentrant model
 15316 ;;
 15317                           
 15318                           
 15319                           ;psect for function _sin
 15320  0820                     _sin:	
 15321                           
 15322                           ;incstack = 0
 15323                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15324  0820  0022               	movlb	2	; select bank2
 15325  0821  01CB               	clrf	sin@sgn^(0+256)
 15326  0822  083E               	movf	sin@f^(0+256),w
 15327  0823  0021               	movlb	1	; select bank1
 15328  0824  00A0               	movwf	___ftge@ff1^(0+128)
 15329  0825  0022               	movlb	2	; select bank2
 15330  0826  083F               	movf	(sin@f+1)^(0+256),w
 15331  0827  0021               	movlb	1	; select bank1
 15332  0828  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15333  0829  0022               	movlb	2	; select bank2
 15334  082A  0840               	movf	(sin@f+2)^(0+256),w
 15335  082B  0021               	movlb	1	; select bank1
 15336  082C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15337  082D  3000               	movlw	0
 15338  082E  00A3               	movwf	___ftge@ff2^(0+128)
 15339  082F  3000               	movlw	0
 15340  0830  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15341  0831  3000               	movlw	0
 15342  0832  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15343  0833  31A0  209E  3188   	fcall	___ftge
 15344  0836  1803               	btfsc	3,0
 15345  0837  2855               	goto	l8368
 15346  0838  0022               	movlb	2	; select bank2
 15347  0839  083E               	movf	sin@f^(0+256),w
 15348  083A  0021               	movlb	1	; select bank1
 15349  083B  00BE               	movwf	___ftneg@f1^(0+128)
 15350  083C  0022               	movlb	2	; select bank2
 15351  083D  083F               	movf	(sin@f+1)^(0+256),w
 15352  083E  0021               	movlb	1	; select bank1
 15353  083F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15354  0840  0022               	movlb	2	; select bank2
 15355  0841  0840               	movf	(sin@f+2)^(0+256),w
 15356  0842  0021               	movlb	1	; select bank1
 15357  0843  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15358  0844  31AC  24DF  3188   	fcall	___ftneg
 15359  0847  0021               	movlb	1	; select bank1
 15360  0848  083E               	movf	?___ftneg^(0+128),w
 15361  0849  0022               	movlb	2	; select bank2
 15362  084A  00BE               	movwf	sin@f^(0+256)
 15363  084B  0021               	movlb	1	; select bank1
 15364  084C  083F               	movf	(?___ftneg+1)^(0+128),w
 15365  084D  0022               	movlb	2	; select bank2
 15366  084E  00BF               	movwf	(sin@f+1)^(0+256)
 15367  084F  0021               	movlb	1	; select bank1
 15368  0850  0840               	movf	(?___ftneg+2)^(0+128),w
 15369  0851  0022               	movlb	2	; select bank2
 15370  0852  00C0               	movwf	(sin@f+2)^(0+256)
 15371  0853  01CB               	clrf	sin@sgn^(0+256)
 15372  0854  0ACB               	incf	sin@sgn^(0+256),f
 15373  0855                     l8368:	
 15374  0855  30FA               	movlw	250
 15375  0856  0021               	movlb	1	; select bank1
 15376  0857  00AE               	movwf	___ftmul@f1^(0+128)
 15377  0858  3022               	movlw	34
 15378  0859  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15379  085A  303E               	movlw	62
 15380  085B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15381  085C  0022               	movlb	2	; select bank2
 15382  085D  083E               	movf	sin@f^(0+256),w
 15383  085E  0021               	movlb	1	; select bank1
 15384  085F  00B1               	movwf	___ftmul@f2^(0+128)
 15385  0860  0022               	movlb	2	; select bank2
 15386  0861  083F               	movf	(sin@f+1)^(0+256),w
 15387  0862  0021               	movlb	1	; select bank1
 15388  0863  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15389  0864  0022               	movlb	2	; select bank2
 15390  0865  0840               	movf	(sin@f+2)^(0+256),w
 15391  0866  0021               	movlb	1	; select bank1
 15392  0867  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15393  0868  319D  25B0  3188   	fcall	___ftmul
 15394  086B  0021               	movlb	1	; select bank1
 15395  086C  082E               	movf	?___ftmul^(0+128),w
 15396  086D  0022               	movlb	2	; select bank2
 15397  086E  00BE               	movwf	sin@f^(0+256)
 15398  086F  0021               	movlb	1	; select bank1
 15399  0870  082F               	movf	(?___ftmul+1)^(0+128),w
 15400  0871  0022               	movlb	2	; select bank2
 15401  0872  00BF               	movwf	(sin@f+1)^(0+256)
 15402  0873  0021               	movlb	1	; select bank1
 15403  0874  0830               	movf	(?___ftmul+2)^(0+128),w
 15404  0875  0022               	movlb	2	; select bank2
 15405  0876  00C0               	movwf	(sin@f+2)^(0+256)
 15406  0877  083E               	movf	sin@f^(0+256),w
 15407  0878  00AE               	movwf	floor@x^(0+256)
 15408  0879  083F               	movf	(sin@f+1)^(0+256),w
 15409  087A  00AF               	movwf	(floor@x+1)^(0+256)
 15410  087B  0840               	movf	(sin@f+2)^(0+256),w
 15411  087C  00B0               	movwf	(floor@x+2)^(0+256)
 15412  087D  319C  24FD  3188   	fcall	_floor
 15413  0880  0022               	movlb	2	; select bank2
 15414  0881  082E               	movf	?_floor^(0+256),w
 15415  0882  00B7               	movwf	___ftsub@f2^(0+256)
 15416  0883  082F               	movf	(?_floor+1)^(0+256),w
 15417  0884  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15418  0885  0830               	movf	(?_floor+2)^(0+256),w
 15419  0886  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15420  0887  083E               	movf	sin@f^(0+256),w
 15421  0888  00BA               	movwf	___ftsub@f1^(0+256)
 15422  0889  083F               	movf	(sin@f+1)^(0+256),w
 15423  088A  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15424  088B  0840               	movf	(sin@f+2)^(0+256),w
 15425  088C  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15426  088D  31AE  26A5  3188   	fcall	___ftsub
 15427  0890  0022               	movlb	2	; select bank2
 15428  0891  0837               	movf	?___ftsub^(0+256),w
 15429  0892  00BE               	movwf	sin@f^(0+256)
 15430  0893  0838               	movf	(?___ftsub+1)^(0+256),w
 15431  0894  00BF               	movwf	(sin@f+1)^(0+256)
 15432  0895  0839               	movf	(?___ftsub+2)^(0+256),w
 15433  0896  00C0               	movwf	(sin@f+2)^(0+256)
 15434  0897  3000               	movlw	0
 15435  0898  0021               	movlb	1	; select bank1
 15436  0899  00AE               	movwf	___ftmul@f1^(0+128)
 15437  089A  3080               	movlw	128
 15438  089B  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15439  089C  3040               	movlw	64
 15440  089D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15441  089E  0022               	movlb	2	; select bank2
 15442  089F  083E               	movf	sin@f^(0+256),w
 15443  08A0  0021               	movlb	1	; select bank1
 15444  08A1  00B1               	movwf	___ftmul@f2^(0+128)
 15445  08A2  0022               	movlb	2	; select bank2
 15446  08A3  083F               	movf	(sin@f+1)^(0+256),w
 15447  08A4  0021               	movlb	1	; select bank1
 15448  08A5  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15449  08A6  0022               	movlb	2	; select bank2
 15450  08A7  0840               	movf	(sin@f+2)^(0+256),w
 15451  08A8  0021               	movlb	1	; select bank1
 15452  08A9  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15453  08AA  319D  25B0  3188   	fcall	___ftmul
 15454  08AD  0021               	movlb	1	; select bank1
 15455  08AE  082E               	movf	?___ftmul^(0+128),w
 15456  08AF  0022               	movlb	2	; select bank2
 15457  08B0  00BE               	movwf	sin@f^(0+256)
 15458  08B1  0021               	movlb	1	; select bank1
 15459  08B2  082F               	movf	(?___ftmul+1)^(0+128),w
 15460  08B3  0022               	movlb	2	; select bank2
 15461  08B4  00BF               	movwf	(sin@f+1)^(0+256)
 15462  08B5  0021               	movlb	1	; select bank1
 15463  08B6  0830               	movf	(?___ftmul+2)^(0+128),w
 15464  08B7  0022               	movlb	2	; select bank2
 15465  08B8  00C0               	movwf	(sin@f+2)^(0+256)
 15466  08B9  3000               	movlw	0
 15467  08BA  0021               	movlb	1	; select bank1
 15468  08BB  00A0               	movwf	___ftge@ff1^(0+128)
 15469  08BC  3000               	movlw	0
 15470  08BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15471  08BE  3040               	movlw	64
 15472  08BF  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15473  08C0  0022               	movlb	2	; select bank2
 15474  08C1  083E               	movf	sin@f^(0+256),w
 15475  08C2  0021               	movlb	1	; select bank1
 15476  08C3  00A3               	movwf	___ftge@ff2^(0+128)
 15477  08C4  0022               	movlb	2	; select bank2
 15478  08C5  083F               	movf	(sin@f+1)^(0+256),w
 15479  08C6  0021               	movlb	1	; select bank1
 15480  08C7  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15481  08C8  0022               	movlb	2	; select bank2
 15482  08C9  0840               	movf	(sin@f+2)^(0+256),w
 15483  08CA  0021               	movlb	1	; select bank1
 15484  08CB  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15485  08CC  31A0  209E  3188   	fcall	___ftge
 15486  08CF  1803               	btfsc	3,0
 15487  08D0  28F1               	goto	l8380
 15488  08D1  3000               	movlw	0
 15489  08D2  0022               	movlb	2	; select bank2
 15490  08D3  00B7               	movwf	___ftsub@f2^(0+256)
 15491  08D4  3000               	movlw	0
 15492  08D5  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15493  08D6  3040               	movlw	64
 15494  08D7  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15495  08D8  083E               	movf	sin@f^(0+256),w
 15496  08D9  00BA               	movwf	___ftsub@f1^(0+256)
 15497  08DA  083F               	movf	(sin@f+1)^(0+256),w
 15498  08DB  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15499  08DC  0840               	movf	(sin@f+2)^(0+256),w
 15500  08DD  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15501  08DE  31AE  26A5  3188   	fcall	___ftsub
 15502  08E1  0022               	movlb	2	; select bank2
 15503  08E2  0837               	movf	?___ftsub^(0+256),w
 15504  08E3  00BE               	movwf	sin@f^(0+256)
 15505  08E4  0838               	movf	(?___ftsub+1)^(0+256),w
 15506  08E5  00BF               	movwf	(sin@f+1)^(0+256)
 15507  08E6  0839               	movf	(?___ftsub+2)^(0+256),w
 15508  08E7  00C0               	movwf	(sin@f+2)^(0+256)
 15509  08E8  084B               	movf	sin@sgn^(0+256),w
 15510  08E9  1D03               	btfss	3,2
 15511  08EA  28ED               	goto	u8800
 15512  08EB  3001               	movlw	1
 15513  08EC  28EE               	goto	u8810
 15514  08ED                     u8800:	
 15515  08ED  3000               	movlw	0
 15516  08EE                     u8810:	
 15517  08EE  00C1               	movwf	??_sin^(0+256)
 15518  08EF  0841               	movf	??_sin^(0+256),w
 15519  08F0  00CB               	movwf	sin@sgn^(0+256)
 15520  08F1                     l8380:	
 15521  08F1  3000               	movlw	0
 15522  08F2  0021               	movlb	1	; select bank1
 15523  08F3  00A0               	movwf	___ftge@ff1^(0+128)
 15524  08F4  3080               	movlw	128
 15525  08F5  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15526  08F6  303F               	movlw	63
 15527  08F7  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15528  08F8  0022               	movlb	2	; select bank2
 15529  08F9  083E               	movf	sin@f^(0+256),w
 15530  08FA  0021               	movlb	1	; select bank1
 15531  08FB  00A3               	movwf	___ftge@ff2^(0+128)
 15532  08FC  0022               	movlb	2	; select bank2
 15533  08FD  083F               	movf	(sin@f+1)^(0+256),w
 15534  08FE  0021               	movlb	1	; select bank1
 15535  08FF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15536  0900  0022               	movlb	2	; select bank2
 15537  0901  0840               	movf	(sin@f+2)^(0+256),w
 15538  0902  0021               	movlb	1	; select bank1
 15539  0903  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15540  0904  31A0  209E  3188   	fcall	___ftge
 15541  0907  1803               	btfsc	3,0
 15542  0908  2935               	goto	l2386
 15543  0909  3000               	movlw	0
 15544  090A  0021               	movlb	1	; select bank1
 15545  090B  00C1               	movwf	___ftadd@f1^(0+128)
 15546  090C  3000               	movlw	0
 15547  090D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15548  090E  3040               	movlw	64
 15549  090F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15550  0910  0022               	movlb	2	; select bank2
 15551  0911  083E               	movf	sin@f^(0+256),w
 15552  0912  0021               	movlb	1	; select bank1
 15553  0913  00BE               	movwf	___ftneg@f1^(0+128)
 15554  0914  0022               	movlb	2	; select bank2
 15555  0915  083F               	movf	(sin@f+1)^(0+256),w
 15556  0916  0021               	movlb	1	; select bank1
 15557  0917  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15558  0918  0022               	movlb	2	; select bank2
 15559  0919  0840               	movf	(sin@f+2)^(0+256),w
 15560  091A  0021               	movlb	1	; select bank1
 15561  091B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15562  091C  31AC  24DF  3188   	fcall	___ftneg
 15563  091F  0021               	movlb	1	; select bank1
 15564  0920  083E               	movf	?___ftneg^(0+128),w
 15565  0921  00C4               	movwf	___ftadd@f2^(0+128)
 15566  0922  083F               	movf	(?___ftneg+1)^(0+128),w
 15567  0923  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15568  0924  0840               	movf	(?___ftneg+2)^(0+128),w
 15569  0925  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15570  0926  3190  2035  3188   	fcall	___ftadd
 15571  0929  0021               	movlb	1	; select bank1
 15572  092A  0841               	movf	?___ftadd^(0+128),w
 15573  092B  0022               	movlb	2	; select bank2
 15574  092C  00BE               	movwf	sin@f^(0+256)
 15575  092D  0021               	movlb	1	; select bank1
 15576  092E  0842               	movf	(?___ftadd+1)^(0+128),w
 15577  092F  0022               	movlb	2	; select bank2
 15578  0930  00BF               	movwf	(sin@f+1)^(0+256)
 15579  0931  0021               	movlb	1	; select bank1
 15580  0932  0843               	movf	(?___ftadd+2)^(0+128),w
 15581  0933  0022               	movlb	2	; select bank2
 15582  0934  00C0               	movwf	(sin@f+2)^(0+256)
 15583  0935                     l2386:	
 15584  0935  0022               	movlb	2	; select bank2
 15585  0936  083E               	movf	sin@f^(0+256),w
 15586  0937  0021               	movlb	1	; select bank1
 15587  0938  00AE               	movwf	___ftmul@f1^(0+128)
 15588  0939  0022               	movlb	2	; select bank2
 15589  093A  083F               	movf	(sin@f+1)^(0+256),w
 15590  093B  0021               	movlb	1	; select bank1
 15591  093C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15592  093D  0022               	movlb	2	; select bank2
 15593  093E  0840               	movf	(sin@f+2)^(0+256),w
 15594  093F  0021               	movlb	1	; select bank1
 15595  0940  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15596  0941  0022               	movlb	2	; select bank2
 15597  0942  083E               	movf	sin@f^(0+256),w
 15598  0943  0021               	movlb	1	; select bank1
 15599  0944  00B1               	movwf	___ftmul@f2^(0+128)
 15600  0945  0022               	movlb	2	; select bank2
 15601  0946  083F               	movf	(sin@f+1)^(0+256),w
 15602  0947  0021               	movlb	1	; select bank1
 15603  0948  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15604  0949  0022               	movlb	2	; select bank2
 15605  094A  0840               	movf	(sin@f+2)^(0+256),w
 15606  094B  0021               	movlb	1	; select bank1
 15607  094C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15608  094D  319D  25B0  3188   	fcall	___ftmul
 15609  0950  0021               	movlb	1	; select bank1
 15610  0951  082E               	movf	?___ftmul^(0+128),w
 15611  0952  0022               	movlb	2	; select bank2
 15612  0953  00C8               	movwf	sin@x2^(0+256)
 15613  0954  0021               	movlb	1	; select bank1
 15614  0955  082F               	movf	(?___ftmul+1)^(0+128),w
 15615  0956  0022               	movlb	2	; select bank2
 15616  0957  00C9               	movwf	(sin@x2+1)^(0+256)
 15617  0958  0021               	movlb	1	; select bank1
 15618  0959  0830               	movf	(?___ftmul+2)^(0+128),w
 15619  095A  0022               	movlb	2	; select bank2
 15620  095B  00CA               	movwf	(sin@x2+2)^(0+256)
 15621  095C  0848               	movf	sin@x2^(0+256),w
 15622  095D  00B4               	movwf	eval_poly@x^(0+256)
 15623  095E  0849               	movf	(sin@x2+1)^(0+256),w
 15624  095F  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15625  0960  084A               	movf	(sin@x2+2)^(0+256),w
 15626  0961  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15627  0962  3048               	movlw	low (sin@coeff_b| (0+32768))
 15628  0963  00B7               	movwf	eval_poly@d^(0+256)
 15629  0964  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15630  0965  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15631  0966  3003               	movlw	3
 15632  0967  00B9               	movwf	eval_poly@n^(0+256)
 15633  0968  3000               	movlw	0
 15634  0969  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15635  096A  31A6  260F  3188   	fcall	_eval_poly
 15636  096D  0022               	movlb	2	; select bank2
 15637  096E  0834               	movf	?_eval_poly^(0+256),w
 15638  096F  00C2               	movwf	sin@y^(0+256)
 15639  0970  0835               	movf	(?_eval_poly+1)^(0+256),w
 15640  0971  00C3               	movwf	(sin@y+1)^(0+256)
 15641  0972  0836               	movf	(?_eval_poly+2)^(0+256),w
 15642  0973  00C4               	movwf	(sin@y+2)^(0+256)
 15643  0974  3004               	movlw	4
 15644  0975  00B9               	movwf	eval_poly@n^(0+256)
 15645  0976  3000               	movlw	0
 15646  0977  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15647  0978  3039               	movlw	low (sin@coeff_a| (0+32768))
 15648  0979  00B7               	movwf	eval_poly@d^(0+256)
 15649  097A  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15650  097B  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15651  097C  0848               	movf	sin@x2^(0+256),w
 15652  097D  00B4               	movwf	eval_poly@x^(0+256)
 15653  097E  0849               	movf	(sin@x2+1)^(0+256),w
 15654  097F  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15655  0980  084A               	movf	(sin@x2+2)^(0+256),w
 15656  0981  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15657  0982  31A6  260F  3188   	fcall	_eval_poly
 15658  0985  0022               	movlb	2	; select bank2
 15659  0986  0834               	movf	?_eval_poly^(0+256),w
 15660  0987  0021               	movlb	1	; select bank1
 15661  0988  00D1               	movwf	___ftdiv@f1^(0+128)
 15662  0989  0022               	movlb	2	; select bank2
 15663  098A  0835               	movf	(?_eval_poly+1)^(0+256),w
 15664  098B  0021               	movlb	1	; select bank1
 15665  098C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15666  098D  0022               	movlb	2	; select bank2
 15667  098E  0836               	movf	(?_eval_poly+2)^(0+256),w
 15668  098F  0021               	movlb	1	; select bank1
 15669  0990  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15670  0991  0022               	movlb	2	; select bank2
 15671  0992  0842               	movf	sin@y^(0+256),w
 15672  0993  0021               	movlb	1	; select bank1
 15673  0994  00CE               	movwf	___ftdiv@f2^(0+128)
 15674  0995  0022               	movlb	2	; select bank2
 15675  0996  0843               	movf	(sin@y+1)^(0+256),w
 15676  0997  0021               	movlb	1	; select bank1
 15677  0998  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15678  0999  0022               	movlb	2	; select bank2
 15679  099A  0844               	movf	(sin@y+2)^(0+256),w
 15680  099B  0021               	movlb	1	; select bank1
 15681  099C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15682  099D  319C  2454  3188   	fcall	___ftdiv
 15683  09A0  0021               	movlb	1	; select bank1
 15684  09A1  084E               	movf	?___ftdiv^(0+128),w
 15685  09A2  0022               	movlb	2	; select bank2
 15686  09A3  00C5               	movwf	_sin$2875^(0+256)
 15687  09A4  0021               	movlb	1	; select bank1
 15688  09A5  084F               	movf	(?___ftdiv+1)^(0+128),w
 15689  09A6  0022               	movlb	2	; select bank2
 15690  09A7  00C6               	movwf	(_sin$2875+1)^(0+256)
 15691  09A8  0021               	movlb	1	; select bank1
 15692  09A9  0850               	movf	(?___ftdiv+2)^(0+128),w
 15693  09AA  0022               	movlb	2	; select bank2
 15694  09AB  00C7               	movwf	(_sin$2875+2)^(0+256)
 15695  09AC  0845               	movf	_sin$2875^(0+256),w
 15696  09AD  0021               	movlb	1	; select bank1
 15697  09AE  00AE               	movwf	___ftmul@f1^(0+128)
 15698  09AF  0022               	movlb	2	; select bank2
 15699  09B0  0846               	movf	(_sin$2875+1)^(0+256),w
 15700  09B1  0021               	movlb	1	; select bank1
 15701  09B2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15702  09B3  0022               	movlb	2	; select bank2
 15703  09B4  0847               	movf	(_sin$2875+2)^(0+256),w
 15704  09B5  0021               	movlb	1	; select bank1
 15705  09B6  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15706  09B7  0022               	movlb	2	; select bank2
 15707  09B8  083E               	movf	sin@f^(0+256),w
 15708  09B9  0021               	movlb	1	; select bank1
 15709  09BA  00B1               	movwf	___ftmul@f2^(0+128)
 15710  09BB  0022               	movlb	2	; select bank2
 15711  09BC  083F               	movf	(sin@f+1)^(0+256),w
 15712  09BD  0021               	movlb	1	; select bank1
 15713  09BE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15714  09BF  0022               	movlb	2	; select bank2
 15715  09C0  0840               	movf	(sin@f+2)^(0+256),w
 15716  09C1  0021               	movlb	1	; select bank1
 15717  09C2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15718  09C3  319D  25B0  3188   	fcall	___ftmul
 15719  09C6  0021               	movlb	1	; select bank1
 15720  09C7  082E               	movf	?___ftmul^(0+128),w
 15721  09C8  0022               	movlb	2	; select bank2
 15722  09C9  00BE               	movwf	sin@f^(0+256)
 15723  09CA  0021               	movlb	1	; select bank1
 15724  09CB  082F               	movf	(?___ftmul+1)^(0+128),w
 15725  09CC  0022               	movlb	2	; select bank2
 15726  09CD  00BF               	movwf	(sin@f+1)^(0+256)
 15727  09CE  0021               	movlb	1	; select bank1
 15728  09CF  0830               	movf	(?___ftmul+2)^(0+128),w
 15729  09D0  0022               	movlb	2	; select bank2
 15730  09D1  00C0               	movwf	(sin@f+2)^(0+256)
 15731  09D2  084B               	movf	sin@sgn^(0+256),w
 15732  09D3  1903               	btfsc	3,2
 15733  09D4  0008               	return
 15734  09D5  083E               	movf	sin@f^(0+256),w
 15735  09D6  0021               	movlb	1	; select bank1
 15736  09D7  00BE               	movwf	___ftneg@f1^(0+128)
 15737  09D8  0022               	movlb	2	; select bank2
 15738  09D9  083F               	movf	(sin@f+1)^(0+256),w
 15739  09DA  0021               	movlb	1	; select bank1
 15740  09DB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15741  09DC  0022               	movlb	2	; select bank2
 15742  09DD  0840               	movf	(sin@f+2)^(0+256),w
 15743  09DE  0021               	movlb	1	; select bank1
 15744  09DF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15745  09E0  31AC  24DF         	fcall	___ftneg
 15746  09E2  0021               	movlb	1	; select bank1
 15747  09E3  083E               	movf	?___ftneg^(0+128),w
 15748  09E4  0022               	movlb	2	; select bank2
 15749  09E5  00BE               	movwf	?_sin^(0+256)
 15750  09E6  0021               	movlb	1	; select bank1
 15751  09E7  083F               	movf	(?___ftneg+1)^(0+128),w
 15752  09E8  0022               	movlb	2	; select bank2
 15753  09E9  00BF               	movwf	(?_sin+1)^(0+256)
 15754  09EA  0021               	movlb	1	; select bank1
 15755  09EB  0840               	movf	(?___ftneg+2)^(0+128),w
 15756  09EC  0022               	movlb	2	; select bank2
 15757  09ED  00C0               	movwf	(?_sin+2)^(0+256)
 15758  09EE  0008               	return
 15759  09EF                     __end_of_sin:	
 15760                           
 15761                           	psect	text47
 15762  1CFD                     __ptext47:	
 15763 ;; *************** function _floor *****************
 15764 ;; Defined at:
 15765 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15766 ;; Parameters:    Size  Location     Type
 15767 ;;  x               3   14[BANK2 ] unsigned char 
 15768 ;; Auto vars:     Size  Location     Type
 15769 ;;  i               3   18[BANK2 ] unsigned char 
 15770 ;;  expon           2   21[BANK2 ] int 
 15771 ;; Return value:  Size  Location     Type
 15772 ;;                  3   14[BANK2 ] int 
 15773 ;; Registers used:
 15774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15775 ;; Tracked objects:
 15776 ;;		On entry : 0/0
 15777 ;;		On exit  : 0/0
 15778 ;;		Unchanged: 0/0
 15779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15780 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15781 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15782 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15783 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15784 ;;Total ram usage:        9 bytes
 15785 ;; Hardware stack levels used:    1
 15786 ;; Hardware stack levels required when called:    5
 15787 ;; This function calls:
 15788 ;;		___altoft
 15789 ;;		___ftadd
 15790 ;;		___ftge
 15791 ;;		___fttol
 15792 ;;		_frexp
 15793 ;; This function is called by:
 15794 ;;		_sin
 15795 ;;		_exp
 15796 ;; This function uses a non-reentrant model
 15797 ;;
 15798                           
 15799                           
 15800                           ;psect for function _floor
 15801  1CFD                     _floor:	
 15802                           
 15803                           ;incstack = 0
 15804                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15805  1CFD  0022               	movlb	2	; select bank2
 15806  1CFE  082E               	movf	floor@x^(0+256),w
 15807  1CFF  0021               	movlb	1	; select bank1
 15808  1D00  00A0               	movwf	frexp@value^(0+128)
 15809  1D01  0022               	movlb	2	; select bank2
 15810  1D02  082F               	movf	(floor@x+1)^(0+256),w
 15811  1D03  0021               	movlb	1	; select bank1
 15812  1D04  00A1               	movwf	(frexp@value+1)^(0+128)
 15813  1D05  0022               	movlb	2	; select bank2
 15814  1D06  0830               	movf	(floor@x+2)^(0+256),w
 15815  1D07  0021               	movlb	1	; select bank1
 15816  1D08  00A2               	movwf	(frexp@value+2)^(0+128)
 15817  1D09  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15818  1D0A  0022               	movlb	2	; select bank2
 15819  1D0B  00B1               	movwf	??_floor^(0+256)
 15820  1D0C  0831               	movf	??_floor^(0+256),w
 15821  1D0D  0021               	movlb	1	; select bank1
 15822  1D0E  00A3               	movwf	frexp@eptr^(0+128)
 15823  1D0F  31A1  2191  319C   	fcall	_frexp
 15824  1D12  0022               	movlb	2	; select bank2
 15825  1D13  1FB6               	btfss	(floor@expon+1)^(0+256),7
 15826  1D14  2D3B               	goto	l8216
 15827  1D15  082E               	movf	floor@x^(0+256),w
 15828  1D16  0021               	movlb	1	; select bank1
 15829  1D17  00A0               	movwf	___ftge@ff1^(0+128)
 15830  1D18  0022               	movlb	2	; select bank2
 15831  1D19  082F               	movf	(floor@x+1)^(0+256),w
 15832  1D1A  0021               	movlb	1	; select bank1
 15833  1D1B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15834  1D1C  0022               	movlb	2	; select bank2
 15835  1D1D  0830               	movf	(floor@x+2)^(0+256),w
 15836  1D1E  0021               	movlb	1	; select bank1
 15837  1D1F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15838  1D20  3000               	movlw	0
 15839  1D21  00A3               	movwf	___ftge@ff2^(0+128)
 15840  1D22  3000               	movlw	0
 15841  1D23  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15842  1D24  3000               	movlw	0
 15843  1D25  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15844  1D26  31A0  209E  319C   	fcall	___ftge
 15845  1D29  1803               	btfsc	3,0
 15846  1D2A  2D33               	goto	l8212
 15847  1D2B  3000               	movlw	0
 15848  1D2C  0022               	movlb	2	; select bank2
 15849  1D2D  00AE               	movwf	?_floor^(0+256)
 15850  1D2E  3080               	movlw	128
 15851  1D2F  00AF               	movwf	(?_floor+1)^(0+256)
 15852  1D30  30BF               	movlw	191
 15853  1D31  00B0               	movwf	(?_floor+2)^(0+256)
 15854  1D32  0008               	return
 15855  1D33                     l8212:	
 15856  1D33  3000               	movlw	0
 15857  1D34  0022               	movlb	2	; select bank2
 15858  1D35  00AE               	movwf	?_floor^(0+256)
 15859  1D36  3000               	movlw	0
 15860  1D37  00AF               	movwf	(?_floor+1)^(0+256)
 15861  1D38  3000               	movlw	0
 15862  1D39  00B0               	movwf	(?_floor+2)^(0+256)
 15863  1D3A  0008               	return
 15864  1D3B                     l8216:	
 15865  1D3B  3000               	movlw	0
 15866  1D3C  0236               	subwf	(floor@expon+1)^(0+256),w
 15867  1D3D  3015               	movlw	21
 15868  1D3E  1903               	skipnz
 15869  1D3F  0235               	subwf	floor@expon^(0+256),w
 15870  1D40  1803               	btfsc	3,0
 15871  1D41  0008               	return
 15872  1D42  082E               	movf	floor@x^(0+256),w
 15873  1D43  00A0               	movwf	___fttol@f1^(0+256)
 15874  1D44  082F               	movf	(floor@x+1)^(0+256),w
 15875  1D45  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15876  1D46  0830               	movf	(floor@x+2)^(0+256),w
 15877  1D47  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15878  1D48  3199  2182  319C   	fcall	___fttol
 15879  1D4B  0022               	movlb	2	; select bank2
 15880  1D4C  0823               	movf	(?___fttol+3)^(0+256),w
 15881  1D4D  0021               	movlb	1	; select bank1
 15882  1D4E  00AB               	movwf	(___altoft@c+3)^(0+128)
 15883  1D4F  0022               	movlb	2	; select bank2
 15884  1D50  0822               	movf	(?___fttol+2)^(0+256),w
 15885  1D51  0021               	movlb	1	; select bank1
 15886  1D52  00AA               	movwf	(___altoft@c+2)^(0+128)
 15887  1D53  0022               	movlb	2	; select bank2
 15888  1D54  0821               	movf	(?___fttol+1)^(0+256),w
 15889  1D55  0021               	movlb	1	; select bank1
 15890  1D56  00A9               	movwf	(___altoft@c+1)^(0+128)
 15891  1D57  0022               	movlb	2	; select bank2
 15892  1D58  0820               	movf	?___fttol^(0+256),w
 15893  1D59  0021               	movlb	1	; select bank1
 15894  1D5A  00A8               	movwf	___altoft@c^(0+128)
 15895  1D5B  31A0  20DA  319C   	fcall	___altoft
 15896  1D5E  0021               	movlb	1	; select bank1
 15897  1D5F  0828               	movf	?___altoft^(0+128),w
 15898  1D60  0022               	movlb	2	; select bank2
 15899  1D61  00B2               	movwf	floor@i^(0+256)
 15900  1D62  0021               	movlb	1	; select bank1
 15901  1D63  0829               	movf	(?___altoft+1)^(0+128),w
 15902  1D64  0022               	movlb	2	; select bank2
 15903  1D65  00B3               	movwf	(floor@i+1)^(0+256)
 15904  1D66  0021               	movlb	1	; select bank1
 15905  1D67  082A               	movf	(?___altoft+2)^(0+128),w
 15906  1D68  0022               	movlb	2	; select bank2
 15907  1D69  00B4               	movwf	(floor@i+2)^(0+256)
 15908  1D6A  082E               	movf	floor@x^(0+256),w
 15909  1D6B  0021               	movlb	1	; select bank1
 15910  1D6C  00A0               	movwf	___ftge@ff1^(0+128)
 15911  1D6D  0022               	movlb	2	; select bank2
 15912  1D6E  082F               	movf	(floor@x+1)^(0+256),w
 15913  1D6F  0021               	movlb	1	; select bank1
 15914  1D70  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15915  1D71  0022               	movlb	2	; select bank2
 15916  1D72  0830               	movf	(floor@x+2)^(0+256),w
 15917  1D73  0021               	movlb	1	; select bank1
 15918  1D74  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15919  1D75  0022               	movlb	2	; select bank2
 15920  1D76  0832               	movf	floor@i^(0+256),w
 15921  1D77  0021               	movlb	1	; select bank1
 15922  1D78  00A3               	movwf	___ftge@ff2^(0+128)
 15923  1D79  0022               	movlb	2	; select bank2
 15924  1D7A  0833               	movf	(floor@i+1)^(0+256),w
 15925  1D7B  0021               	movlb	1	; select bank1
 15926  1D7C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15927  1D7D  0022               	movlb	2	; select bank2
 15928  1D7E  0834               	movf	(floor@i+2)^(0+256),w
 15929  1D7F  0021               	movlb	1	; select bank1
 15930  1D80  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15931  1D81  31A0  209E  319C   	fcall	___ftge
 15932  1D84  1803               	btfsc	3,0
 15933  1D85  2DA8               	goto	l8226
 15934  1D86  3000               	movlw	0
 15935  1D87  0021               	movlb	1	; select bank1
 15936  1D88  00C1               	movwf	___ftadd@f1^(0+128)
 15937  1D89  3080               	movlw	128
 15938  1D8A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15939  1D8B  30BF               	movlw	191
 15940  1D8C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15941  1D8D  0022               	movlb	2	; select bank2
 15942  1D8E  0832               	movf	floor@i^(0+256),w
 15943  1D8F  0021               	movlb	1	; select bank1
 15944  1D90  00C4               	movwf	___ftadd@f2^(0+128)
 15945  1D91  0022               	movlb	2	; select bank2
 15946  1D92  0833               	movf	(floor@i+1)^(0+256),w
 15947  1D93  0021               	movlb	1	; select bank1
 15948  1D94  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15949  1D95  0022               	movlb	2	; select bank2
 15950  1D96  0834               	movf	(floor@i+2)^(0+256),w
 15951  1D97  0021               	movlb	1	; select bank1
 15952  1D98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15953  1D99  3190  2035         	fcall	___ftadd
 15954  1D9B  0021               	movlb	1	; select bank1
 15955  1D9C  0841               	movf	?___ftadd^(0+128),w
 15956  1D9D  0022               	movlb	2	; select bank2
 15957  1D9E  00AE               	movwf	?_floor^(0+256)
 15958  1D9F  0021               	movlb	1	; select bank1
 15959  1DA0  0842               	movf	(?___ftadd+1)^(0+128),w
 15960  1DA1  0022               	movlb	2	; select bank2
 15961  1DA2  00AF               	movwf	(?_floor+1)^(0+256)
 15962  1DA3  0021               	movlb	1	; select bank1
 15963  1DA4  0843               	movf	(?___ftadd+2)^(0+128),w
 15964  1DA5  0022               	movlb	2	; select bank2
 15965  1DA6  00B0               	movwf	(?_floor+2)^(0+256)
 15966  1DA7  0008               	return
 15967  1DA8                     l8226:	
 15968  1DA8  0022               	movlb	2	; select bank2
 15969  1DA9  0832               	movf	floor@i^(0+256),w
 15970  1DAA  00AE               	movwf	?_floor^(0+256)
 15971  1DAB  0833               	movf	(floor@i+1)^(0+256),w
 15972  1DAC  00AF               	movwf	(?_floor+1)^(0+256)
 15973  1DAD  0834               	movf	(floor@i+2)^(0+256),w
 15974  1DAE  00B0               	movwf	(?_floor+2)^(0+256)
 15975  1DAF  0008               	return
 15976  1DB0                     __end_of_floor:	
 15977                           
 15978                           	psect	text48
 15979  2191                     __ptext48:	
 15980 ;; *************** function _frexp *****************
 15981 ;; Defined at:
 15982 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15983 ;; Parameters:    Size  Location     Type
 15984 ;;  value           3    0[BANK1 ] int 
 15985 ;;  eptr            1    3[BANK1 ] PTR int 
 15986 ;;		 -> log@exponent(2), floor@expon(2), 
 15987 ;; Auto vars:     Size  Location     Type
 15988 ;;		None
 15989 ;; Return value:  Size  Location     Type
 15990 ;;                  3    0[BANK1 ] PTR int 
 15991 ;; Registers used:
 15992 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15993 ;; Tracked objects:
 15994 ;;		On entry : 0/0
 15995 ;;		On exit  : 0/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15998 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16000 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16001 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16002 ;;Total ram usage:        6 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; Hardware stack levels required when called:    3
 16005 ;; This function calls:
 16006 ;;		Nothing
 16007 ;; This function is called by:
 16008 ;;		_floor
 16009 ;;		_log
 16010 ;; This function uses a non-reentrant model
 16011 ;;
 16012                           
 16013                           
 16014                           ;psect for function _frexp
 16015  2191                     _frexp:	
 16016                           
 16017                           ;incstack = 0
 16018                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 16019  2191  0021               	movlb	1	; select bank1
 16020  2192  0822               	movf	(frexp@value+2)^(0+128),w
 16021  2193  0421               	iorwf	(frexp@value+1)^(0+128),w
 16022  2194  0420               	iorwf	frexp@value^(0+128),w
 16023  2195  1D03               	skipz
 16024  2196  29A5               	goto	l8078
 16025  2197  0823               	movf	frexp@eptr^(0+128),w
 16026  2198  0086               	movwf	6
 16027  2199  3001               	movlw	1	; select bank2/3
 16028  219A  0087               	movwf	7
 16029  219B  3000               	movlw	0
 16030  219C  3FC0               	movwi [0]fsr1
 16031  219D  3FC1               	movwi [1]fsr1
 16032  219E  3000               	movlw	0
 16033  219F  00A0               	movwf	?_frexp^(0+128)
 16034  21A0  3000               	movlw	0
 16035  21A1  00A1               	movwf	(?_frexp+1)^(0+128)
 16036  21A2  3000               	movlw	0
 16037  21A3  00A2               	movwf	(?_frexp+2)^(0+128)
 16038  21A4  0008               	return
 16039  21A5                     l8078:	
 16040  21A5  0822               	movf	(frexp@value^(0+128)+2),w
 16041  21A6  397F               	andlw	127
 16042  21A7  00A4               	movwf	??_frexp^(0+128)
 16043  21A8  01A5               	clrf	(??_frexp^(0+128)+1)
 16044  21A9  35A4               	lslf	??_frexp^(0+128),f
 16045  21AA  0DA5               	rlf	(??_frexp^(0+128)+1),f
 16046  21AB  0823               	movf	frexp@eptr^(0+128),w
 16047  21AC  0086               	movwf	6
 16048  21AD  3001               	movlw	1	; select bank2/3
 16049  21AE  0087               	movwf	7
 16050  21AF  0824               	movf	??_frexp^(0+128),w
 16051  21B0  3FC0               	movwi [0]fsr1
 16052  21B1  0825               	movf	(??_frexp+1)^(0+128),w
 16053  21B2  3FC1               	movwi [1]fsr1
 16054  21B3  0D21               	rlf	(frexp@value^(0+128)+1),w
 16055  21B4  0D21               	rlf	(frexp@value^(0+128)+1),w
 16056  21B5  3901               	andlw	1
 16057  21B6  00A4               	movwf	??_frexp^(0+128)
 16058  21B7  01A5               	clrf	(??_frexp^(0+128)+1)
 16059  21B8  0823               	movf	frexp@eptr^(0+128),w
 16060  21B9  0086               	movwf	6
 16061  21BA  3001               	movlw	1	; select bank2/3
 16062  21BB  0087               	movwf	7
 16063  21BC  0824               	movf	??_frexp^(0+128),w
 16064  21BD  0481               	iorwf	1,f
 16065  21BE  3141               	addfsr 1,1
 16066  21BF  0825               	movf	(??_frexp+1)^(0+128),w
 16067  21C0  0481               	iorwf	1,f
 16068  21C1  0823               	movf	frexp@eptr^(0+128),w
 16069  21C2  0086               	movwf	6
 16070  21C3  3001               	movlw	1	; select bank2/3
 16071  21C4  0087               	movwf	7
 16072  21C5  3082               	movlw	130
 16073  21C6  0781               	addwf	1,f
 16074  21C7  3141               	addfsr 1,1
 16075  21C8  30FF               	movlw	255
 16076  21C9  3D81               	addwfc	1,f
 16077  21CA  317F               	addfsr 1,-1
 16078  21CB  0822               	movf	(frexp@value^(0+128)+2),w
 16079  21CC  3980               	andlw	-128
 16080  21CD  383F               	iorlw	63
 16081  21CE  00A2               	movwf	(frexp@value^(0+128)+2)
 16082  21CF  13A1               	bcf	(frexp@value^(0+128)+1),7
 16083  21D0  0008               	return
 16084  21D1                     __end_of_frexp:	
 16085                           
 16086                           	psect	text49
 16087  1982                     __ptext49:	
 16088 ;; *************** function ___fttol *****************
 16089 ;; Defined at:
 16090 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 16091 ;; Parameters:    Size  Location     Type
 16092 ;;  f1              3    0[BANK2 ] float 
 16093 ;; Auto vars:     Size  Location     Type
 16094 ;;  lval            4    9[BANK2 ] unsigned long 
 16095 ;;  exp1            1   13[BANK2 ] unsigned char 
 16096 ;;  sign1           1    8[BANK2 ] unsigned char 
 16097 ;; Return value:  Size  Location     Type
 16098 ;;                  4    0[BANK2 ] long 
 16099 ;; Registers used:
 16100 ;;		wreg, status,2, status,0
 16101 ;; Tracked objects:
 16102 ;;		On entry : 0/0
 16103 ;;		On exit  : 0/0
 16104 ;;		Unchanged: 0/0
 16105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16106 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16107 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16108 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16109 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16110 ;;Total ram usage:       14 bytes
 16111 ;; Hardware stack levels used:    1
 16112 ;; Hardware stack levels required when called:    3
 16113 ;; This function calls:
 16114 ;;		Nothing
 16115 ;; This function is called by:
 16116 ;;		_main
 16117 ;;		_set_subdivision
 16118 ;;		_scaleA100kPot
 16119 ;;		_scaleA10kPot
 16120 ;;		_scaleiA10kPot
 16121 ;;		_getModulationDelayTime
 16122 ;;		_modCos
 16123 ;;		_modTri
 16124 ;;		_modSaw
 16125 ;;		_pow
 16126 ;;		_exp
 16127 ;;		_floor
 16128 ;;		_scaleiA100kPot
 16129 ;;		_scaleA25kPot
 16130 ;;		_scaleiA25kPot
 16131 ;; This function uses a non-reentrant model
 16132 ;;
 16133                           
 16134                           
 16135                           ;psect for function ___fttol
 16136  1982                     ___fttol:	
 16137                           
 16138                           ;incstack = 0
 16139                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16140  1982  0022               	movlb	2	; select bank2
 16141  1983  0820               	movf	___fttol@f1^(0+256),w
 16142  1984  00A4               	movwf	??___fttol^(0+256)
 16143  1985  0821               	movf	(___fttol@f1+1)^(0+256),w
 16144  1986  00A5               	movwf	(??___fttol^(0+256)+1)
 16145  1987  0822               	movf	(___fttol@f1+2)^(0+256),w
 16146  1988  00A6               	movwf	(??___fttol^(0+256)+2)
 16147  1989  1003               	clrc
 16148  198A  0D25               	rlf	(??___fttol^(0+256)+1),w
 16149  198B  0D26               	rlf	(??___fttol^(0+256)+2),w
 16150  198C  00A7               	movwf	(??___fttol+3)^(0+256)
 16151  198D  0827               	movf	(??___fttol+3)^(0+256),w
 16152  198E  00AD               	movwf	___fttol@exp1^(0+256)
 16153  198F  082D               	movf	___fttol@exp1^(0+256),w
 16154  1990  1D03               	btfss	3,2
 16155  1991  299B               	goto	l8034
 16156  1992  3000               	movlw	0
 16157  1993  00A3               	movwf	(?___fttol+3)^(0+256)
 16158  1994  3000               	movlw	0
 16159  1995  00A2               	movwf	(?___fttol+2)^(0+256)
 16160  1996  3000               	movlw	0
 16161  1997  00A1               	movwf	(?___fttol+1)^(0+256)
 16162  1998  3000               	movlw	0
 16163  1999  00A0               	movwf	?___fttol^(0+256)
 16164  199A  0008               	return
 16165  199B                     l8034:	
 16166  199B  0820               	movf	___fttol@f1^(0+256),w
 16167  199C  00A4               	movwf	??___fttol^(0+256)
 16168  199D  0821               	movf	(___fttol@f1+1)^(0+256),w
 16169  199E  00A5               	movwf	(??___fttol^(0+256)+1)
 16170  199F  0822               	movf	(___fttol@f1+2)^(0+256),w
 16171  19A0  00A6               	movwf	(??___fttol^(0+256)+2)
 16172  19A1  3017               	movlw	23
 16173  19A2                     u8405:	
 16174  19A2  36A6               	lsrf	(??___fttol^(0+256)+2),f
 16175  19A3  0CA5               	rrf	(??___fttol^(0+256)+1),f
 16176  19A4  0CA4               	rrf	??___fttol^(0+256),f
 16177  19A5  0B89               	decfsz	9,f
 16178  19A6  29A2               	goto	u8405
 16179  19A7  0824               	movf	??___fttol^(0+256),w
 16180  19A8  00A7               	movwf	(??___fttol+3)^(0+256)
 16181  19A9  0827               	movf	(??___fttol+3)^(0+256),w
 16182  19AA  00A8               	movwf	___fttol@sign1^(0+256)
 16183  19AB  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 16184  19AC  30FF               	movlw	255
 16185  19AD  05A0               	andwf	___fttol@f1^(0+256),f
 16186  19AE  30FF               	movlw	255
 16187  19AF  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 16188  19B0  3000               	movlw	0
 16189  19B1  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 16190  19B2  0820               	movf	___fttol@f1^(0+256),w
 16191  19B3  00A9               	movwf	___fttol@lval^(0+256)
 16192  19B4  0821               	movf	(___fttol@f1+1)^(0+256),w
 16193  19B5  00AA               	movwf	(___fttol@lval^(0+256)+1)
 16194  19B6  0822               	movf	(___fttol@f1+2)^(0+256),w
 16195  19B7  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16196  19B8  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16197  19B9  308E               	movlw	142
 16198  19BA  02AD               	subwf	___fttol@exp1^(0+256),f
 16199  19BB  1FAD               	btfss	___fttol@exp1^(0+256),7
 16200  19BC  29D9               	goto	l8054
 16201  19BD  082D               	movf	___fttol@exp1^(0+256),w
 16202  19BE  3A80               	xorlw	128
 16203  19BF  3E8F               	addlw	143
 16204  19C0  1803               	skipnc
 16205  19C1  29CB               	goto	l8052
 16206  19C2  3000               	movlw	0
 16207  19C3  00A3               	movwf	(?___fttol+3)^(0+256)
 16208  19C4  3000               	movlw	0
 16209  19C5  00A2               	movwf	(?___fttol+2)^(0+256)
 16210  19C6  3000               	movlw	0
 16211  19C7  00A1               	movwf	(?___fttol+1)^(0+256)
 16212  19C8  3000               	movlw	0
 16213  19C9  00A0               	movwf	?___fttol^(0+256)
 16214  19CA  0008               	return
 16215  19CB                     l8052:	
 16216  19CB  3001               	movlw	1
 16217  19CC                     u8435:	
 16218  19CC  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16219  19CD  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16220  19CE  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16221  19CF  0CA9               	rrf	___fttol@lval^(0+256),f
 16222  19D0  0B89               	decfsz	9,f
 16223  19D1  29CC               	goto	u8435
 16224  19D2  3001               	movlw	1
 16225  19D3  00A4               	movwf	??___fttol^(0+256)
 16226  19D4  0824               	movf	??___fttol^(0+256),w
 16227  19D5  07AD               	addwf	___fttol@exp1^(0+256),f
 16228  19D6  1903               	btfsc	3,2
 16229  19D7  29F2               	goto	l8062
 16230  19D8  29CB               	goto	l8052
 16231  19D9                     l8054:	
 16232  19D9  3018               	movlw	24
 16233  19DA  022D               	subwf	___fttol@exp1^(0+256),w
 16234  19DB  1C03               	skipc
 16235  19DC  29EF               	goto	l2256
 16236  19DD  3000               	movlw	0
 16237  19DE  00A3               	movwf	(?___fttol+3)^(0+256)
 16238  19DF  3000               	movlw	0
 16239  19E0  00A2               	movwf	(?___fttol+2)^(0+256)
 16240  19E1  3000               	movlw	0
 16241  19E2  00A1               	movwf	(?___fttol+1)^(0+256)
 16242  19E3  3000               	movlw	0
 16243  19E4  00A0               	movwf	?___fttol^(0+256)
 16244  19E5  0008               	return
 16245  19E6                     l8060:	
 16246  19E6  3001               	movlw	1
 16247  19E7                     u8465:	
 16248  19E7  35A9               	lslf	___fttol@lval^(0+256),f
 16249  19E8  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16250  19E9  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16251  19EA  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16252  19EB  0B89               	decfsz	9,f
 16253  19EC  29E7               	goto	u8465
 16254  19ED  3001               	movlw	1
 16255  19EE  02AD               	subwf	___fttol@exp1^(0+256),f
 16256  19EF                     l2256:	
 16257  19EF  082D               	movf	___fttol@exp1^(0+256),w
 16258  19F0  1D03               	btfss	3,2
 16259  19F1  29E6               	goto	l8060
 16260  19F2                     l8062:	
 16261  19F2  0828               	movf	___fttol@sign1^(0+256),w
 16262  19F3  1903               	btfsc	3,2
 16263  19F4  2A00               	goto	l8066
 16264  19F5  09A9               	comf	___fttol@lval^(0+256),f
 16265  19F6  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16266  19F7  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16267  19F8  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16268  19F9  0AA9               	incf	___fttol@lval^(0+256),f
 16269  19FA  1903               	skipnz
 16270  19FB  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16271  19FC  1903               	skipnz
 16272  19FD  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16273  19FE  1903               	skipnz
 16274  19FF  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16275  1A00                     l8066:	
 16276  1A00  082C               	movf	(___fttol@lval+3)^(0+256),w
 16277  1A01  00A3               	movwf	(?___fttol+3)^(0+256)
 16278  1A02  082B               	movf	(___fttol@lval+2)^(0+256),w
 16279  1A03  00A2               	movwf	(?___fttol+2)^(0+256)
 16280  1A04  082A               	movf	(___fttol@lval+1)^(0+256),w
 16281  1A05  00A1               	movwf	(?___fttol+1)^(0+256)
 16282  1A06  0829               	movf	___fttol@lval^(0+256),w
 16283  1A07  00A0               	movwf	?___fttol^(0+256)
 16284  1A08  0008               	return
 16285  1A09                     __end_of___fttol:	
 16286                           
 16287                           	psect	text50
 16288  209E                     __ptext50:	
 16289 ;; *************** function ___ftge *****************
 16290 ;; Defined at:
 16291 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16292 ;; Parameters:    Size  Location     Type
 16293 ;;  ff1             3    0[BANK1 ] float 
 16294 ;;  ff2             3    3[BANK1 ] float 
 16295 ;; Auto vars:     Size  Location     Type
 16296 ;;		None
 16297 ;; Return value:  Size  Location     Type
 16298 ;;		None               void
 16299 ;; Registers used:
 16300 ;;		wreg, status,2, status,0
 16301 ;; Tracked objects:
 16302 ;;		On entry : 0/0
 16303 ;;		On exit  : 0/0
 16304 ;;		Unchanged: 0/0
 16305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16306 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16308 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16309 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16310 ;;Total ram usage:        9 bytes
 16311 ;; Hardware stack levels used:    1
 16312 ;; Hardware stack levels required when called:    3
 16313 ;; This function calls:
 16314 ;;		Nothing
 16315 ;; This function is called by:
 16316 ;;		_scaleA10kPot
 16317 ;;		_scaleiA10kPot
 16318 ;;		_modCos
 16319 ;;		_modTri
 16320 ;;		_modSaw
 16321 ;;		_modSquare
 16322 ;;		_cos
 16323 ;;		_pow
 16324 ;;		_sin
 16325 ;;		_exp
 16326 ;;		_floor
 16327 ;;		_ldexp
 16328 ;;		_log
 16329 ;;		_scaleiA100kPot
 16330 ;;		_scaleA25kPot
 16331 ;;		_scaleiA25kPot
 16332 ;; This function uses a non-reentrant model
 16333 ;;
 16334                           
 16335                           
 16336                           ;psect for function ___ftge
 16337  209E                     ___ftge:	
 16338                           
 16339                           ;incstack = 0
 16340                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16341  209E  0021               	movlb	1	; select bank1
 16342  209F  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16343  20A0  28B5               	goto	l7954
 16344  20A1  0920               	comf	___ftge@ff1^(0+128),w
 16345  20A2  00A6               	movwf	??___ftge^(0+128)
 16346  20A3  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16347  20A4  00A7               	movwf	(??___ftge^(0+128)+1)
 16348  20A5  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16349  20A6  00A8               	movwf	(??___ftge^(0+128)+2)
 16350  20A7  0AA6               	incf	??___ftge^(0+128),f
 16351  20A8  1903               	skipnz
 16352  20A9  0AA7               	incf	(??___ftge^(0+128)+1),f
 16353  20AA  1903               	skipnz
 16354  20AB  0AA8               	incf	(??___ftge^(0+128)+2),f
 16355  20AC  3000               	movlw	0
 16356  20AD  0726               	addwf	??___ftge^(0+128),w
 16357  20AE  00A0               	movwf	___ftge@ff1^(0+128)
 16358  20AF  3000               	movlw	0
 16359  20B0  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16360  20B1  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16361  20B2  3080               	movlw	128
 16362  20B3  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16363  20B4  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16364  20B5                     l7954:	
 16365  20B5  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16366  20B6  28CB               	goto	l7958
 16367  20B7  0923               	comf	___ftge@ff2^(0+128),w
 16368  20B8  00A6               	movwf	??___ftge^(0+128)
 16369  20B9  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16370  20BA  00A7               	movwf	(??___ftge^(0+128)+1)
 16371  20BB  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16372  20BC  00A8               	movwf	(??___ftge^(0+128)+2)
 16373  20BD  0AA6               	incf	??___ftge^(0+128),f
 16374  20BE  1903               	skipnz
 16375  20BF  0AA7               	incf	(??___ftge^(0+128)+1),f
 16376  20C0  1903               	skipnz
 16377  20C1  0AA8               	incf	(??___ftge^(0+128)+2),f
 16378  20C2  3000               	movlw	0
 16379  20C3  0726               	addwf	??___ftge^(0+128),w
 16380  20C4  00A3               	movwf	___ftge@ff2^(0+128)
 16381  20C5  3000               	movlw	0
 16382  20C6  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16383  20C7  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16384  20C8  3080               	movlw	128
 16385  20C9  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16386  20CA  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16387  20CB                     l7958:	
 16388  20CB  3080               	movlw	128
 16389  20CC  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16390  20CD  3080               	movlw	128
 16391  20CE  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16392  20CF  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16393  20D0  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16394  20D1  1D03               	skipz
 16395  20D2  0008               	return
 16396  20D3  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16397  20D4  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16398  20D5  1D03               	skipz
 16399  20D6  0008               	return
 16400  20D7  0823               	movf	___ftge@ff2^(0+128),w
 16401  20D8  0220               	subwf	___ftge@ff1^(0+128),w
 16402  20D9  0008               	return
 16403  20DA                     __end_of___ftge:	
 16404                           
 16405                           	psect	text51
 16406  20DA                     __ptext51:	
 16407 ;; *************** function ___altoft *****************
 16408 ;; Defined at:
 16409 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16410 ;; Parameters:    Size  Location     Type
 16411 ;;  c               4    8[BANK1 ] long 
 16412 ;; Auto vars:     Size  Location     Type
 16413 ;;  sign            1   15[BANK1 ] unsigned char 
 16414 ;;  exp             1   14[BANK1 ] unsigned char 
 16415 ;; Return value:  Size  Location     Type
 16416 ;;                  3    8[BANK1 ] float 
 16417 ;; Registers used:
 16418 ;;		wreg, status,2, status,0, pclath, cstack
 16419 ;; Tracked objects:
 16420 ;;		On entry : 0/0
 16421 ;;		On exit  : 0/0
 16422 ;;		Unchanged: 0/0
 16423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16424 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16425 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16426 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16427 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16428 ;;Total ram usage:        8 bytes
 16429 ;; Hardware stack levels used:    1
 16430 ;; Hardware stack levels required when called:    4
 16431 ;; This function calls:
 16432 ;;		___ftpack
 16433 ;; This function is called by:
 16434 ;;		_getModulationDelayTime
 16435 ;;		_floor
 16436 ;; This function uses a non-reentrant model
 16437 ;;
 16438                           
 16439                           
 16440                           ;psect for function ___altoft
 16441  20DA                     ___altoft:	
 16442                           
 16443                           ;incstack = 0
 16444                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16445  20DA  0021               	movlb	1	; select bank1
 16446  20DB  01AF               	clrf	___altoft@sign^(0+128)
 16447  20DC  308E               	movlw	142
 16448  20DD  00AC               	movwf	??___altoft^(0+128)
 16449  20DE  082C               	movf	??___altoft^(0+128),w
 16450  20DF  00AE               	movwf	___altoft@exp^(0+128)
 16451  20E0  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 16452  20E1  28EF               	goto	l7874
 16453  20E2  09A8               	comf	___altoft@c^(0+128),f
 16454  20E3  09A9               	comf	(___altoft@c+1)^(0+128),f
 16455  20E4  09AA               	comf	(___altoft@c+2)^(0+128),f
 16456  20E5  09AB               	comf	(___altoft@c+3)^(0+128),f
 16457  20E6  0AA8               	incf	___altoft@c^(0+128),f
 16458  20E7  1903               	skipnz
 16459  20E8  0AA9               	incf	(___altoft@c+1)^(0+128),f
 16460  20E9  1903               	skipnz
 16461  20EA  0AAA               	incf	(___altoft@c+2)^(0+128),f
 16462  20EB  1903               	skipnz
 16463  20EC  0AAB               	incf	(___altoft@c+3)^(0+128),f
 16464  20ED  01AF               	clrf	___altoft@sign^(0+128)
 16465  20EE  0AAF               	incf	___altoft@sign^(0+128),f
 16466  20EF                     l7874:	
 16467  20EF  30FF               	movlw	255
 16468  20F0  052B               	andwf	(___altoft@c+3)^(0+128),w
 16469  20F1  1903               	btfsc	3,2
 16470  20F2  28FF               	goto	l7876
 16471  20F3  3001               	movlw	1
 16472  20F4                     u7985:	
 16473  20F4  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 16474  20F5  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 16475  20F6  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 16476  20F7  0CA8               	rrf	___altoft@c^(0+128),f
 16477  20F8  0B89               	decfsz	9,f
 16478  20F9  28F4               	goto	u7985
 16479  20FA  3001               	movlw	1
 16480  20FB  00AC               	movwf	??___altoft^(0+128)
 16481  20FC  082C               	movf	??___altoft^(0+128),w
 16482  20FD  07AE               	addwf	___altoft@exp^(0+128),f
 16483  20FE  28EF               	goto	l7874
 16484  20FF                     l7876:	
 16485  20FF  0828               	movf	___altoft@c^(0+128),w
 16486  2100  00A0               	movwf	___ftpack@arg^(0+128)
 16487  2101  0829               	movf	(___altoft@c+1)^(0+128),w
 16488  2102  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16489  2103  082A               	movf	(___altoft@c+2)^(0+128),w
 16490  2104  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16491  2105  082E               	movf	___altoft@exp^(0+128),w
 16492  2106  00AC               	movwf	??___altoft^(0+128)
 16493  2107  082C               	movf	??___altoft^(0+128),w
 16494  2108  00A3               	movwf	___ftpack@exp^(0+128)
 16495  2109  082F               	movf	___altoft@sign^(0+128),w
 16496  210A  00AD               	movwf	(??___altoft+1)^(0+128)
 16497  210B  082D               	movf	(??___altoft+1)^(0+128),w
 16498  210C  00A4               	movwf	___ftpack@sign^(0+128)
 16499  210D  31A5  25AA         	fcall	___ftpack
 16500  210F  0021               	movlb	1	; select bank1
 16501  2110  0820               	movf	?___ftpack^(0+128),w
 16502  2111  00A8               	movwf	?___altoft^(0+128)
 16503  2112  0821               	movf	(?___ftpack+1)^(0+128),w
 16504  2113  00A9               	movwf	(?___altoft+1)^(0+128)
 16505  2114  0822               	movf	(?___ftpack+2)^(0+128),w
 16506  2115  00AA               	movwf	(?___altoft+2)^(0+128)
 16507  2116  0008               	return
 16508  2117                     __end_of___altoft:	
 16509                           
 16510                           	psect	text52
 16511  260F                     __ptext52:	
 16512 ;; *************** function _eval_poly *****************
 16513 ;; Defined at:
 16514 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16515 ;; Parameters:    Size  Location     Type
 16516 ;;  x               3   20[BANK2 ] float 
 16517 ;;  d               2   23[BANK2 ] PTR const 
 16518 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16519 ;;  n               2   25[BANK2 ] int 
 16520 ;; Auto vars:     Size  Location     Type
 16521 ;;  res             3   27[BANK2 ] int 
 16522 ;; Return value:  Size  Location     Type
 16523 ;;                  3   20[BANK2 ] int 
 16524 ;; Registers used:
 16525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16526 ;; Tracked objects:
 16527 ;;		On entry : 0/0
 16528 ;;		On exit  : 0/0
 16529 ;;		Unchanged: 0/0
 16530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16531 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16532 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16534 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16535 ;;Total ram usage:       10 bytes
 16536 ;; Hardware stack levels used:    1
 16537 ;; Hardware stack levels required when called:    5
 16538 ;; This function calls:
 16539 ;;		___ftadd
 16540 ;;		___ftmul
 16541 ;;		___wmul
 16542 ;; This function is called by:
 16543 ;;		_sin
 16544 ;;		_exp
 16545 ;;		_log
 16546 ;; This function uses a non-reentrant model
 16547 ;;
 16548                           
 16549                           
 16550                           ;psect for function _eval_poly
 16551  260F                     _eval_poly:	
 16552                           
 16553                           ;incstack = 0
 16554                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16555  260F  0022               	movlb	2	; select bank2
 16556  2610  083A               	movf	(eval_poly@n+1)^(0+256),w
 16557  2611  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16558  2612  0839               	movf	eval_poly@n^(0+256),w
 16559  2613  00AE               	movwf	___wmul@multiplier^(0+256)
 16560  2614  3003               	movlw	3
 16561  2615  00B0               	movwf	___wmul@multiplicand^(0+256)
 16562  2616  3000               	movlw	0
 16563  2617  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16564  2618  31AD  25B8  31A6   	fcall	___wmul
 16565  261B  0022               	movlb	2	; select bank2
 16566  261C  0837               	movf	eval_poly@d^(0+256),w
 16567  261D  072E               	addwf	?___wmul^(0+256),w
 16568  261E  0084               	movwf	4
 16569  261F  0838               	movf	(eval_poly@d+1)^(0+256),w
 16570  2620  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16571  2621  0085               	movwf	5
 16572  2622  3F00               	moviw [0]fsr0
 16573  2623  00BB               	movwf	eval_poly@res^(0+256)
 16574  2624  3F01               	moviw [1]fsr0
 16575  2625  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16576  2626  3F02               	moviw [2]fsr0
 16577  2627                     L19:	
 16578  2627  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16579  2628  0839               	movf	eval_poly@n^(0+256),w
 16580  2629  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16581  262A  1903               	btfsc	3,2
 16582  262B  2E7A               	goto	l8236
 16583  262C  30FF               	movlw	255
 16584  262D  07B9               	addwf	eval_poly@n^(0+256),f
 16585  262E  30FF               	movlw	255
 16586  262F  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16587  2630  083A               	movf	(eval_poly@n+1)^(0+256),w
 16588  2631  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16589  2632  0839               	movf	eval_poly@n^(0+256),w
 16590  2633  00AE               	movwf	___wmul@multiplier^(0+256)
 16591  2634  3003               	movlw	3
 16592  2635  00B0               	movwf	___wmul@multiplicand^(0+256)
 16593  2636  3000               	movlw	0
 16594  2637  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16595  2638  31AD  25B8  31A6   	fcall	___wmul
 16596  263B  0022               	movlb	2	; select bank2
 16597  263C  0837               	movf	eval_poly@d^(0+256),w
 16598  263D  072E               	addwf	?___wmul^(0+256),w
 16599  263E  0084               	movwf	4
 16600  263F  0838               	movf	(eval_poly@d+1)^(0+256),w
 16601  2640  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16602  2641  0085               	movwf	5
 16603  2642  3F00               	moviw [0]fsr0
 16604  2643  0021               	movlb	1	; select bank1
 16605  2644  00C1               	movwf	___ftadd@f1^(0+128)
 16606  2645  3F01               	moviw [1]fsr0
 16607  2646  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16608  2647  3F02               	moviw [2]fsr0
 16609  2648  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16610  2649  0022               	movlb	2	; select bank2
 16611  264A  083B               	movf	eval_poly@res^(0+256),w
 16612  264B  0021               	movlb	1	; select bank1
 16613  264C  00AE               	movwf	___ftmul@f1^(0+128)
 16614  264D  0022               	movlb	2	; select bank2
 16615  264E  083C               	movf	(eval_poly@res+1)^(0+256),w
 16616  264F  0021               	movlb	1	; select bank1
 16617  2650  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16618  2651  0022               	movlb	2	; select bank2
 16619  2652  083D               	movf	(eval_poly@res+2)^(0+256),w
 16620  2653  0021               	movlb	1	; select bank1
 16621  2654  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16622  2655  0022               	movlb	2	; select bank2
 16623  2656  0834               	movf	eval_poly@x^(0+256),w
 16624  2657  0021               	movlb	1	; select bank1
 16625  2658  00B1               	movwf	___ftmul@f2^(0+128)
 16626  2659  0022               	movlb	2	; select bank2
 16627  265A  0835               	movf	(eval_poly@x+1)^(0+256),w
 16628  265B  0021               	movlb	1	; select bank1
 16629  265C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16630  265D  0022               	movlb	2	; select bank2
 16631  265E  0836               	movf	(eval_poly@x+2)^(0+256),w
 16632  265F  0021               	movlb	1	; select bank1
 16633  2660  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16634  2661  319D  25B0  31A6   	fcall	___ftmul
 16635  2664  0021               	movlb	1	; select bank1
 16636  2665  082E               	movf	?___ftmul^(0+128),w
 16637  2666  00C4               	movwf	___ftadd@f2^(0+128)
 16638  2667  082F               	movf	(?___ftmul+1)^(0+128),w
 16639  2668  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16640  2669  0830               	movf	(?___ftmul+2)^(0+128),w
 16641  266A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16642  266B  3190  2035  31A6   	fcall	___ftadd
 16643  266E  0021               	movlb	1	; select bank1
 16644  266F  0841               	movf	?___ftadd^(0+128),w
 16645  2670  0022               	movlb	2	; select bank2
 16646  2671  00BB               	movwf	eval_poly@res^(0+256)
 16647  2672  0021               	movlb	1	; select bank1
 16648  2673  0842               	movf	(?___ftadd+1)^(0+128),w
 16649  2674  0022               	movlb	2	; select bank2
 16650  2675  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16651  2676  0021               	movlb	1	; select bank1
 16652  2677  0843               	movf	(?___ftadd+2)^(0+128),w
 16653  2678  0022               	movlb	2	; select bank2
 16654  2679  2E27               	goto	L19
 16655  267A                     l8236:	
 16656  267A  083B               	movf	eval_poly@res^(0+256),w
 16657  267B  00B4               	movwf	?_eval_poly^(0+256)
 16658  267C  083C               	movf	(eval_poly@res+1)^(0+256),w
 16659  267D  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16660  267E  083D               	movf	(eval_poly@res+2)^(0+256),w
 16661  267F  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16662  2680  0008               	return
 16663  2681                     __end_of_eval_poly:	
 16664                           
 16665                           	psect	text53
 16666  2DB8                     __ptext53:	
 16667 ;; *************** function ___wmul *****************
 16668 ;; Defined at:
 16669 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16670 ;; Parameters:    Size  Location     Type
 16671 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16672 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16673 ;; Auto vars:     Size  Location     Type
 16674 ;;  product         2   18[BANK2 ] unsigned int 
 16675 ;; Return value:  Size  Location     Type
 16676 ;;                  2   14[BANK2 ] unsigned int 
 16677 ;; Registers used:
 16678 ;;		wreg, status,2, status,0
 16679 ;; Tracked objects:
 16680 ;;		On entry : 0/0
 16681 ;;		On exit  : 0/0
 16682 ;;		Unchanged: 0/0
 16683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16684 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16685 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16687 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16688 ;;Total ram usage:        6 bytes
 16689 ;; Hardware stack levels used:    1
 16690 ;; Hardware stack levels required when called:    3
 16691 ;; This function calls:
 16692 ;;		Nothing
 16693 ;; This function is called by:
 16694 ;;		_calcCosArray
 16695 ;;		_updateModulationArray
 16696 ;;		_modCos
 16697 ;;		_eval_poly
 16698 ;; This function uses a non-reentrant model
 16699 ;;
 16700                           
 16701                           
 16702                           ;psect for function ___wmul
 16703  2DB8                     ___wmul:	
 16704                           
 16705                           ;incstack = 0
 16706                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16707  2DB8  0022               	movlb	2	; select bank2
 16708  2DB9  01B2               	clrf	___wmul@product^(0+256)
 16709  2DBA  01B3               	clrf	(___wmul@product+1)^(0+256)
 16710  2DBB                     l7852:	
 16711  2DBB  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16712  2DBC  2DC1               	goto	l1998
 16713  2DBD  0830               	movf	___wmul@multiplicand^(0+256),w
 16714  2DBE  07B2               	addwf	___wmul@product^(0+256),f
 16715  2DBF  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16716  2DC0  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16717  2DC1                     l1998:	
 16718  2DC1  3001               	movlw	1
 16719  2DC2                     u7945:	
 16720  2DC2  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16721  2DC3  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16722  2DC4  0B89               	decfsz	9,f
 16723  2DC5  2DC2               	goto	u7945
 16724  2DC6  3001               	movlw	1
 16725  2DC7                     u7955:	
 16726  2DC7  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16727  2DC8  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16728  2DC9  0B89               	decfsz	9,f
 16729  2DCA  2DC7               	goto	u7955
 16730  2DCB  082E               	movf	___wmul@multiplier^(0+256),w
 16731  2DCC  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16732  2DCD  1D03               	btfss	3,2
 16733  2DCE  2DBB               	goto	l7852
 16734  2DCF  0833               	movf	(___wmul@product+1)^(0+256),w
 16735  2DD0  00AF               	movwf	(?___wmul+1)^(0+256)
 16736  2DD1  0832               	movf	___wmul@product^(0+256),w
 16737  2DD2  00AE               	movwf	?___wmul^(0+256)
 16738  2DD3  0008               	return
 16739  2DD4                     __end_of___wmul:	
 16740                           
 16741                           	psect	text54
 16742  1DB0                     __ptext54:	
 16743 ;; *************** function ___ftmul *****************
 16744 ;; Defined at:
 16745 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16746 ;; Parameters:    Size  Location     Type
 16747 ;;  f1              3   14[BANK1 ] float 
 16748 ;;  f2              3   17[BANK1 ] float 
 16749 ;; Auto vars:     Size  Location     Type
 16750 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16751 ;;  sign            1   29[BANK1 ] unsigned char 
 16752 ;;  cntr            1   28[BANK1 ] unsigned char 
 16753 ;;  exp             1   24[BANK1 ] unsigned char 
 16754 ;; Return value:  Size  Location     Type
 16755 ;;                  3   14[BANK1 ] float 
 16756 ;; Registers used:
 16757 ;;		wreg, status,2, status,0, pclath, cstack
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16763 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16764 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16765 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16766 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16767 ;;Total ram usage:       16 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:    4
 16770 ;; This function calls:
 16771 ;;		___ftpack
 16772 ;; This function is called by:
 16773 ;;		_set_subdivision
 16774 ;;		_map
 16775 ;;		_scaleA100kPot
 16776 ;;		_scaleA10kPot
 16777 ;;		_scaleiA10kPot
 16778 ;;		_calcCosArray
 16779 ;;		_modCos
 16780 ;;		_modTri
 16781 ;;		_modSaw
 16782 ;;		_pow
 16783 ;;		_sin
 16784 ;;		_eval_poly
 16785 ;;		_exp
 16786 ;;		_log
 16787 ;;		_scalePotValue
 16788 ;;		_scaleiA100kPot
 16789 ;;		_scaleA25kPot
 16790 ;;		_scaleiA25kPot
 16791 ;; This function uses a non-reentrant model
 16792 ;;
 16793                           
 16794                           
 16795                           ;psect for function ___ftmul
 16796  1DB0                     ___ftmul:	
 16797                           
 16798                           ;incstack = 0
 16799                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16800  1DB0  0021               	movlb	1	; select bank1
 16801  1DB1  082E               	movf	___ftmul@f1^(0+128),w
 16802  1DB2  00B4               	movwf	??___ftmul^(0+128)
 16803  1DB3  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16804  1DB4  00B5               	movwf	(??___ftmul^(0+128)+1)
 16805  1DB5  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16806  1DB6  00B6               	movwf	(??___ftmul^(0+128)+2)
 16807  1DB7  1003               	clrc
 16808  1DB8  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16809  1DB9  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16810  1DBA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16811  1DBB  0837               	movf	(??___ftmul+3)^(0+128),w
 16812  1DBC  00B8               	movwf	___ftmul@exp^(0+128)
 16813  1DBD  0838               	movf	___ftmul@exp^(0+128),w
 16814  1DBE  1D03               	btfss	3,2
 16815  1DBF  2DC7               	goto	l7976
 16816  1DC0  3000               	movlw	0
 16817  1DC1  00AE               	movwf	?___ftmul^(0+128)
 16818  1DC2  3000               	movlw	0
 16819  1DC3  00AF               	movwf	(?___ftmul+1)^(0+128)
 16820  1DC4  3000               	movlw	0
 16821  1DC5  00B0               	movwf	(?___ftmul+2)^(0+128)
 16822  1DC6  0008               	return
 16823  1DC7                     l7976:	
 16824  1DC7  0831               	movf	___ftmul@f2^(0+128),w
 16825  1DC8  00B4               	movwf	??___ftmul^(0+128)
 16826  1DC9  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16827  1DCA  00B5               	movwf	(??___ftmul^(0+128)+1)
 16828  1DCB  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16829  1DCC  00B6               	movwf	(??___ftmul^(0+128)+2)
 16830  1DCD  1003               	clrc
 16831  1DCE  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16832  1DCF  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16833  1DD0  00B7               	movwf	(??___ftmul+3)^(0+128)
 16834  1DD1  0837               	movf	(??___ftmul+3)^(0+128),w
 16835  1DD2  00BD               	movwf	___ftmul@sign^(0+128)
 16836  1DD3  083D               	movf	___ftmul@sign^(0+128),w
 16837  1DD4  1D03               	btfss	3,2
 16838  1DD5  2DDD               	goto	l7982
 16839  1DD6  3000               	movlw	0
 16840  1DD7  00AE               	movwf	?___ftmul^(0+128)
 16841  1DD8  3000               	movlw	0
 16842  1DD9  00AF               	movwf	(?___ftmul+1)^(0+128)
 16843  1DDA  3000               	movlw	0
 16844  1DDB  00B0               	movwf	(?___ftmul+2)^(0+128)
 16845  1DDC  0008               	return
 16846  1DDD                     l7982:	
 16847  1DDD  083D               	movf	___ftmul@sign^(0+128),w
 16848  1DDE  3E7B               	addlw	123
 16849  1DDF  00B4               	movwf	??___ftmul^(0+128)
 16850  1DE0  0834               	movf	??___ftmul^(0+128),w
 16851  1DE1  07B8               	addwf	___ftmul@exp^(0+128),f
 16852  1DE2  082E               	movf	___ftmul@f1^(0+128),w
 16853  1DE3  00B4               	movwf	??___ftmul^(0+128)
 16854  1DE4  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16855  1DE5  00B5               	movwf	(??___ftmul^(0+128)+1)
 16856  1DE6  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16857  1DE7  00B6               	movwf	(??___ftmul^(0+128)+2)
 16858  1DE8  3010               	movlw	16
 16859  1DE9                     u8285:	
 16860  1DE9  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16861  1DEA  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16862  1DEB  0CB4               	rrf	??___ftmul^(0+128),f
 16863  1DEC  0B89               	decfsz	9,f
 16864  1DED  2DE9               	goto	u8285
 16865  1DEE  0834               	movf	??___ftmul^(0+128),w
 16866  1DEF  00B7               	movwf	(??___ftmul+3)^(0+128)
 16867  1DF0  0837               	movf	(??___ftmul+3)^(0+128),w
 16868  1DF1  00BD               	movwf	___ftmul@sign^(0+128)
 16869  1DF2  0831               	movf	___ftmul@f2^(0+128),w
 16870  1DF3  00B4               	movwf	??___ftmul^(0+128)
 16871  1DF4  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16872  1DF5  00B5               	movwf	(??___ftmul^(0+128)+1)
 16873  1DF6  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16874  1DF7  00B6               	movwf	(??___ftmul^(0+128)+2)
 16875  1DF8  3010               	movlw	16
 16876  1DF9                     u8295:	
 16877  1DF9  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16878  1DFA  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16879  1DFB  0CB4               	rrf	??___ftmul^(0+128),f
 16880  1DFC  0B89               	decfsz	9,f
 16881  1DFD  2DF9               	goto	u8295
 16882  1DFE  0834               	movf	??___ftmul^(0+128),w
 16883  1DFF  00B7               	movwf	(??___ftmul+3)^(0+128)
 16884  1E00  0837               	movf	(??___ftmul+3)^(0+128),w
 16885  1E01  06BD               	xorwf	___ftmul@sign^(0+128),f
 16886  1E02  3080               	movlw	128
 16887  1E03  00B4               	movwf	??___ftmul^(0+128)
 16888  1E04  0834               	movf	??___ftmul^(0+128),w
 16889  1E05  05BD               	andwf	___ftmul@sign^(0+128),f
 16890  1E06  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16891  1E07  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16892  1E08  30FF               	movlw	255
 16893  1E09  05B1               	andwf	___ftmul@f2^(0+128),f
 16894  1E0A  30FF               	movlw	255
 16895  1E0B  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16896  1E0C  3000               	movlw	0
 16897  1E0D  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16898  1E0E  3000               	movlw	0
 16899  1E0F  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16900  1E10  3000               	movlw	0
 16901  1E11  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16902  1E12  3000               	movlw	0
 16903  1E13  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16904  1E14  3007               	movlw	7
 16905  1E15  00B4               	movwf	??___ftmul^(0+128)
 16906  1E16  0834               	movf	??___ftmul^(0+128),w
 16907  1E17  00BC               	movwf	___ftmul@cntr^(0+128)
 16908  1E18                     l7994:	
 16909  1E18  1C2E               	btfss	___ftmul@f1^(0+128),0
 16910  1E19  2E20               	goto	l7998
 16911  1E1A  0831               	movf	___ftmul@f2^(0+128),w
 16912  1E1B  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16913  1E1C  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16914  1E1D  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16915  1E1E  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16916  1E1F  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16917  1E20                     l7998:	
 16918  1E20  3001               	movlw	1
 16919  1E21                     u8315:	
 16920  1E21  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16921  1E22  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16922  1E23  0CAE               	rrf	___ftmul@f1^(0+128),f
 16923  1E24  0B89               	decfsz	9,f
 16924  1E25  2E21               	goto	u8315
 16925  1E26  3001               	movlw	1
 16926  1E27                     u8325:	
 16927  1E27  35B1               	lslf	___ftmul@f2^(0+128),f
 16928  1E28  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16929  1E29  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16930  1E2A  0B89               	decfsz	9,f
 16931  1E2B  2E27               	goto	u8325
 16932  1E2C  3001               	movlw	1
 16933  1E2D  02BC               	subwf	___ftmul@cntr^(0+128),f
 16934  1E2E  1D03               	btfss	3,2
 16935  1E2F  2E18               	goto	l7994
 16936  1E30  3009               	movlw	9
 16937  1E31  00B4               	movwf	??___ftmul^(0+128)
 16938  1E32  0834               	movf	??___ftmul^(0+128),w
 16939  1E33  00BC               	movwf	___ftmul@cntr^(0+128)
 16940  1E34                     l8006:	
 16941  1E34  1C2E               	btfss	___ftmul@f1^(0+128),0
 16942  1E35  2E3C               	goto	l8010
 16943  1E36  0831               	movf	___ftmul@f2^(0+128),w
 16944  1E37  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16945  1E38  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16946  1E39  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16947  1E3A  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16948  1E3B  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16949  1E3C                     l8010:	
 16950  1E3C  3001               	movlw	1
 16951  1E3D                     u8355:	
 16952  1E3D  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16953  1E3E  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16954  1E3F  0CAE               	rrf	___ftmul@f1^(0+128),f
 16955  1E40  0B89               	decfsz	9,f
 16956  1E41  2E3D               	goto	u8355
 16957  1E42  3001               	movlw	1
 16958  1E43                     u8365:	
 16959  1E43  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16960  1E44  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16961  1E45  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16962  1E46  0B89               	decfsz	9,f
 16963  1E47  2E43               	goto	u8365
 16964  1E48  3001               	movlw	1
 16965  1E49  02BC               	subwf	___ftmul@cntr^(0+128),f
 16966  1E4A  1D03               	btfss	3,2
 16967  1E4B  2E34               	goto	l8006
 16968  1E4C  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16969  1E4D  00A0               	movwf	___ftpack@arg^(0+128)
 16970  1E4E  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16971  1E4F  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16972  1E50  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16973  1E51  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16974  1E52  0838               	movf	___ftmul@exp^(0+128),w
 16975  1E53  00B4               	movwf	??___ftmul^(0+128)
 16976  1E54  0834               	movf	??___ftmul^(0+128),w
 16977  1E55  00A3               	movwf	___ftpack@exp^(0+128)
 16978  1E56  083D               	movf	___ftmul@sign^(0+128),w
 16979  1E57  00B5               	movwf	(??___ftmul+1)^(0+128)
 16980  1E58  0835               	movf	(??___ftmul+1)^(0+128),w
 16981  1E59  00A4               	movwf	___ftpack@sign^(0+128)
 16982  1E5A  31A5  25AA         	fcall	___ftpack
 16983  1E5C  0021               	movlb	1	; select bank1
 16984  1E5D  0820               	movf	?___ftpack^(0+128),w
 16985  1E5E  00AE               	movwf	?___ftmul^(0+128)
 16986  1E5F  0821               	movf	(?___ftpack+1)^(0+128),w
 16987  1E60  00AF               	movwf	(?___ftmul+1)^(0+128)
 16988  1E61  0822               	movf	(?___ftpack+2)^(0+128),w
 16989  1E62  00B0               	movwf	(?___ftmul+2)^(0+128)
 16990  1E63  0008               	return
 16991  1E64                     __end_of___ftmul:	
 16992                           
 16993                           	psect	text55
 16994  2EA5                     __ptext55:	
 16995 ;; *************** function ___ftsub *****************
 16996 ;; Defined at:
 16997 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16998 ;; Parameters:    Size  Location     Type
 16999 ;;  f2              3   23[BANK2 ] float 
 17000 ;;  f1              3   26[BANK2 ] float 
 17001 ;; Auto vars:     Size  Location     Type
 17002 ;;		None
 17003 ;; Return value:  Size  Location     Type
 17004 ;;                  3   23[BANK2 ] float 
 17005 ;; Registers used:
 17006 ;;		wreg, status,2, status,0, pclath, cstack
 17007 ;; Tracked objects:
 17008 ;;		On entry : 0/0
 17009 ;;		On exit  : 0/0
 17010 ;;		Unchanged: 0/0
 17011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17012 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17015 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17016 ;;Total ram usage:        6 bytes
 17017 ;; Hardware stack levels used:    1
 17018 ;; Hardware stack levels required when called:    5
 17019 ;; This function calls:
 17020 ;;		___ftadd
 17021 ;; This function is called by:
 17022 ;;		_sin
 17023 ;;		_exp
 17024 ;; This function uses a non-reentrant model
 17025 ;;
 17026                           
 17027                           
 17028                           ;psect for function ___ftsub
 17029  2EA5                     ___ftsub:	
 17030                           
 17031                           ;incstack = 0
 17032                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 17033  2EA5  0022               	movlb	2	; select bank2
 17034  2EA6  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17035  2EA7  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 17036  2EA8  0437               	iorwf	___ftsub@f2^(0+256),w
 17037  2EA9  1903               	skipnz
 17038  2EAA  2EAD               	goto	l8198
 17039  2EAB  3080               	movlw	128
 17040  2EAC  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 17041  2EAD                     l8198:	
 17042  2EAD  083A               	movf	___ftsub@f1^(0+256),w
 17043  2EAE  0021               	movlb	1	; select bank1
 17044  2EAF  00C1               	movwf	___ftadd@f1^(0+128)
 17045  2EB0  0022               	movlb	2	; select bank2
 17046  2EB1  083B               	movf	(___ftsub@f1+1)^(0+256),w
 17047  2EB2  0021               	movlb	1	; select bank1
 17048  2EB3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 17049  2EB4  0022               	movlb	2	; select bank2
 17050  2EB5  083C               	movf	(___ftsub@f1+2)^(0+256),w
 17051  2EB6  0021               	movlb	1	; select bank1
 17052  2EB7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 17053  2EB8  0022               	movlb	2	; select bank2
 17054  2EB9  0837               	movf	___ftsub@f2^(0+256),w
 17055  2EBA  0021               	movlb	1	; select bank1
 17056  2EBB  00C4               	movwf	___ftadd@f2^(0+128)
 17057  2EBC  0022               	movlb	2	; select bank2
 17058  2EBD  0838               	movf	(___ftsub@f2+1)^(0+256),w
 17059  2EBE  0021               	movlb	1	; select bank1
 17060  2EBF  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 17061  2EC0  0022               	movlb	2	; select bank2
 17062  2EC1  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17063  2EC2  0021               	movlb	1	; select bank1
 17064  2EC3  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 17065  2EC4  3190  2035         	fcall	___ftadd
 17066  2EC6  0021               	movlb	1	; select bank1
 17067  2EC7  0841               	movf	?___ftadd^(0+128),w
 17068  2EC8  0022               	movlb	2	; select bank2
 17069  2EC9  00B7               	movwf	?___ftsub^(0+256)
 17070  2ECA  0021               	movlb	1	; select bank1
 17071  2ECB  0842               	movf	(?___ftadd+1)^(0+128),w
 17072  2ECC  0022               	movlb	2	; select bank2
 17073  2ECD  00B8               	movwf	(?___ftsub+1)^(0+256)
 17074  2ECE  0021               	movlb	1	; select bank1
 17075  2ECF  0843               	movf	(?___ftadd+2)^(0+128),w
 17076  2ED0  0022               	movlb	2	; select bank2
 17077  2ED1  00B9               	movwf	(?___ftsub+2)^(0+256)
 17078  2ED2  0008               	return
 17079  2ED3                     __end_of___ftsub:	
 17080                           
 17081                           	psect	text56
 17082  1035                     __ptext56:	
 17083 ;; *************** function ___ftadd *****************
 17084 ;; Defined at:
 17085 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 17086 ;; Parameters:    Size  Location     Type
 17087 ;;  f1              3   33[BANK1 ] float 
 17088 ;;  f2              3   36[BANK1 ] float 
 17089 ;; Auto vars:     Size  Location     Type
 17090 ;;  exp1            1   45[BANK1 ] unsigned char 
 17091 ;;  exp2            1   44[BANK1 ] unsigned char 
 17092 ;;  sign            1   43[BANK1 ] unsigned char 
 17093 ;; Return value:  Size  Location     Type
 17094 ;;                  3   33[BANK1 ] float 
 17095 ;; Registers used:
 17096 ;;		wreg, status,2, status,0, pclath, cstack
 17097 ;; Tracked objects:
 17098 ;;		On entry : 0/0
 17099 ;;		On exit  : 0/0
 17100 ;;		Unchanged: 0/0
 17101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17102 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17103 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17104 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17105 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17106 ;;Total ram usage:       13 bytes
 17107 ;; Hardware stack levels used:    1
 17108 ;; Hardware stack levels required when called:    4
 17109 ;; This function calls:
 17110 ;;		___ftpack
 17111 ;; This function is called by:
 17112 ;;		_map
 17113 ;;		_scaleiA10kPot
 17114 ;;		_modCos
 17115 ;;		_modTri
 17116 ;;		_modSaw
 17117 ;;		_cos
 17118 ;;		___ftsub
 17119 ;;		_sin
 17120 ;;		_eval_poly
 17121 ;;		_floor
 17122 ;;		_log
 17123 ;;		_scalePotValue
 17124 ;; This function uses a non-reentrant model
 17125 ;;
 17126                           
 17127                           
 17128                           ;psect for function ___ftadd
 17129  1035                     ___ftadd:	
 17130                           
 17131                           ;incstack = 0
 17132                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17133  1035  0021               	movlb	1	; select bank1
 17134  1036  0841               	movf	___ftadd@f1^(0+128),w
 17135  1037  00C7               	movwf	??___ftadd^(0+128)
 17136  1038  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17137  1039  00C8               	movwf	(??___ftadd^(0+128)+1)
 17138  103A  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17139  103B  00C9               	movwf	(??___ftadd^(0+128)+2)
 17140  103C  1003               	clrc
 17141  103D  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17142  103E  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17143  103F  00CA               	movwf	(??___ftadd+3)^(0+128)
 17144  1040  084A               	movf	(??___ftadd+3)^(0+128),w
 17145  1041  00CD               	movwf	___ftadd@exp1^(0+128)
 17146  1042  0844               	movf	___ftadd@f2^(0+128),w
 17147  1043  00C7               	movwf	??___ftadd^(0+128)
 17148  1044  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17149  1045  00C8               	movwf	(??___ftadd^(0+128)+1)
 17150  1046  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17151  1047  00C9               	movwf	(??___ftadd^(0+128)+2)
 17152  1048  1003               	clrc
 17153  1049  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17154  104A  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17155  104B  00CA               	movwf	(??___ftadd+3)^(0+128)
 17156  104C  084A               	movf	(??___ftadd+3)^(0+128),w
 17157  104D  00CC               	movwf	___ftadd@exp2^(0+128)
 17158  104E  084D               	movf	___ftadd@exp1^(0+128),w
 17159  104F  1903               	btfsc	3,2
 17160  1050  285D               	goto	l7886
 17161  1051  084C               	movf	___ftadd@exp2^(0+128),w
 17162  1052  024D               	subwf	___ftadd@exp1^(0+128),w
 17163  1053  1803               	skipnc
 17164  1054  2864               	goto	l7890
 17165  1055  034D               	decf	___ftadd@exp1^(0+128),w
 17166  1056  3AFF               	xorlw	255
 17167  1057  074C               	addwf	___ftadd@exp2^(0+128),w
 17168  1058  00C7               	movwf	??___ftadd^(0+128)
 17169  1059  3019               	movlw	25
 17170  105A  0247               	subwf	??___ftadd^(0+128),w
 17171  105B  1C03               	skipc
 17172  105C  2864               	goto	l7890
 17173  105D                     l7886:	
 17174  105D  0844               	movf	___ftadd@f2^(0+128),w
 17175  105E  00C1               	movwf	?___ftadd^(0+128)
 17176  105F  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17177  1060  00C2               	movwf	(?___ftadd+1)^(0+128)
 17178  1061  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17179  1062  00C3               	movwf	(?___ftadd+2)^(0+128)
 17180  1063  0008               	return
 17181  1064                     l7890:	
 17182  1064  084C               	movf	___ftadd@exp2^(0+128),w
 17183  1065  1903               	btfsc	3,2
 17184  1066  0008               	return
 17185  1067  084D               	movf	___ftadd@exp1^(0+128),w
 17186  1068  024C               	subwf	___ftadd@exp2^(0+128),w
 17187  1069  1803               	skipnc
 17188  106A  2873               	goto	l7896
 17189  106B  034C               	decf	___ftadd@exp2^(0+128),w
 17190  106C  3AFF               	xorlw	255
 17191  106D  074D               	addwf	___ftadd@exp1^(0+128),w
 17192  106E  00C7               	movwf	??___ftadd^(0+128)
 17193  106F  3019               	movlw	25
 17194  1070  0247               	subwf	??___ftadd^(0+128),w
 17195  1071  1803               	btfsc	3,0
 17196  1072  0008               	return
 17197  1073                     l7896:	
 17198  1073  3006               	movlw	6
 17199  1074  00C7               	movwf	??___ftadd^(0+128)
 17200  1075  0847               	movf	??___ftadd^(0+128),w
 17201  1076  00CB               	movwf	___ftadd@sign^(0+128)
 17202  1077  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17203  1078  17CB               	bsf	___ftadd@sign^(0+128),7
 17204  1079  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17205  107A  174B               	bsf	___ftadd@sign^(0+128),6
 17206  107B  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17207  107C  30FF               	movlw	255
 17208  107D  05C1               	andwf	___ftadd@f1^(0+128),f
 17209  107E  30FF               	movlw	255
 17210  107F  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17211  1080  3000               	movlw	0
 17212  1081  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17213  1082  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17214  1083  30FF               	movlw	255
 17215  1084  05C4               	andwf	___ftadd@f2^(0+128),f
 17216  1085  30FF               	movlw	255
 17217  1086  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17218  1087  3000               	movlw	0
 17219  1088  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17220  1089  084C               	movf	___ftadd@exp2^(0+128),w
 17221  108A  024D               	subwf	___ftadd@exp1^(0+128),w
 17222  108B  1803               	skipnc
 17223  108C  28AF               	goto	l7918
 17224  108D                     l7908:	
 17225  108D  3001               	movlw	1
 17226  108E                     u8095:	
 17227  108E  35C4               	lslf	___ftadd@f2^(0+128),f
 17228  108F  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17229  1090  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17230  1091  0B89               	decfsz	9,f
 17231  1092  288E               	goto	u8095
 17232  1093  3001               	movlw	1
 17233  1094  02CC               	subwf	___ftadd@exp2^(0+128),f
 17234  1095  084C               	movf	___ftadd@exp2^(0+128),w
 17235  1096  064D               	xorwf	___ftadd@exp1^(0+128),w
 17236  1097  1903               	skipnz
 17237  1098  28AA               	goto	l7916
 17238  1099  3001               	movlw	1
 17239  109A  02CB               	subwf	___ftadd@sign^(0+128),f
 17240  109B  084B               	movf	___ftadd@sign^(0+128),w
 17241  109C  3907               	andlw	7
 17242  109D  1903               	btfsc	3,2
 17243  109E  28AA               	goto	l7916
 17244  109F  288D               	goto	l7908
 17245  10A0                     l7914:	
 17246  10A0  3001               	movlw	1
 17247  10A1                     u8125:	
 17248  10A1  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17249  10A2  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17250  10A3  0CC1               	rrf	___ftadd@f1^(0+128),f
 17251  10A4  0B89               	decfsz	9,f
 17252  10A5  28A1               	goto	u8125
 17253  10A6  3001               	movlw	1
 17254  10A7  00C7               	movwf	??___ftadd^(0+128)
 17255  10A8  0847               	movf	??___ftadd^(0+128),w
 17256  10A9  07CD               	addwf	___ftadd@exp1^(0+128),f
 17257  10AA                     l7916:	
 17258  10AA  084D               	movf	___ftadd@exp1^(0+128),w
 17259  10AB  064C               	xorwf	___ftadd@exp2^(0+128),w
 17260  10AC  1903               	btfsc	3,2
 17261  10AD  28D4               	goto	l2196
 17262  10AE  28A0               	goto	l7914
 17263  10AF                     l7918:	
 17264  10AF  084D               	movf	___ftadd@exp1^(0+128),w
 17265  10B0  024C               	subwf	___ftadd@exp2^(0+128),w
 17266  10B1  1803               	skipnc
 17267  10B2  28D4               	goto	l2196
 17268  10B3                     l7920:	
 17269  10B3  3001               	movlw	1
 17270  10B4                     u8155:	
 17271  10B4  35C1               	lslf	___ftadd@f1^(0+128),f
 17272  10B5  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17273  10B6  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17274  10B7  0B89               	decfsz	9,f
 17275  10B8  28B4               	goto	u8155
 17276  10B9  3001               	movlw	1
 17277  10BA  02CD               	subwf	___ftadd@exp1^(0+128),f
 17278  10BB  084C               	movf	___ftadd@exp2^(0+128),w
 17279  10BC  064D               	xorwf	___ftadd@exp1^(0+128),w
 17280  10BD  1903               	skipnz
 17281  10BE  28D0               	goto	l7928
 17282  10BF  3001               	movlw	1
 17283  10C0  02CB               	subwf	___ftadd@sign^(0+128),f
 17284  10C1  084B               	movf	___ftadd@sign^(0+128),w
 17285  10C2  3907               	andlw	7
 17286  10C3  1903               	btfsc	3,2
 17287  10C4  28D0               	goto	l7928
 17288  10C5  28B3               	goto	l7920
 17289  10C6                     l7926:	
 17290  10C6  3001               	movlw	1
 17291  10C7                     u8185:	
 17292  10C7  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17293  10C8  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17294  10C9  0CC4               	rrf	___ftadd@f2^(0+128),f
 17295  10CA  0B89               	decfsz	9,f
 17296  10CB  28C7               	goto	u8185
 17297  10CC  3001               	movlw	1
 17298  10CD  00C7               	movwf	??___ftadd^(0+128)
 17299  10CE  0847               	movf	??___ftadd^(0+128),w
 17300  10CF  07CC               	addwf	___ftadd@exp2^(0+128),f
 17301  10D0                     l7928:	
 17302  10D0  084D               	movf	___ftadd@exp1^(0+128),w
 17303  10D1  064C               	xorwf	___ftadd@exp2^(0+128),w
 17304  10D2  1D03               	skipz
 17305  10D3  28C6               	goto	l7926
 17306  10D4                     l2196:	
 17307  10D4  1FCB               	btfss	___ftadd@sign^(0+128),7
 17308  10D5  28E6               	goto	l7932
 17309  10D6  30FF               	movlw	255
 17310  10D7  06C1               	xorwf	___ftadd@f1^(0+128),f
 17311  10D8  30FF               	movlw	255
 17312  10D9  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17313  10DA  30FF               	movlw	255
 17314  10DB  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17315  10DC  3001               	movlw	1
 17316  10DD  07C1               	addwf	___ftadd@f1^(0+128),f
 17317  10DE  3000               	movlw	0
 17318  10DF  1803               	skipnc
 17319  10E0  3001               	movlw	1
 17320  10E1  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17321  10E2  3000               	movlw	0
 17322  10E3  1803               	skipnc
 17323  10E4  3001               	movlw	1
 17324  10E5  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17325  10E6                     l7932:	
 17326  10E6  1F4B               	btfss	___ftadd@sign^(0+128),6
 17327  10E7  28F8               	goto	l7936
 17328  10E8  30FF               	movlw	255
 17329  10E9  06C4               	xorwf	___ftadd@f2^(0+128),f
 17330  10EA  30FF               	movlw	255
 17331  10EB  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17332  10EC  30FF               	movlw	255
 17333  10ED  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17334  10EE  3001               	movlw	1
 17335  10EF  07C4               	addwf	___ftadd@f2^(0+128),f
 17336  10F0  3000               	movlw	0
 17337  10F1  1803               	skipnc
 17338  10F2  3001               	movlw	1
 17339  10F3  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17340  10F4  3000               	movlw	0
 17341  10F5  1803               	skipnc
 17342  10F6  3001               	movlw	1
 17343  10F7  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17344  10F8                     l7936:	
 17345  10F8  01CB               	clrf	___ftadd@sign^(0+128)
 17346  10F9  0841               	movf	___ftadd@f1^(0+128),w
 17347  10FA  07C4               	addwf	___ftadd@f2^(0+128),f
 17348  10FB  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17349  10FC  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17350  10FD  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17351  10FE  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17352  10FF  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17353  1100  2913               	goto	l7946
 17354  1101  30FF               	movlw	255
 17355  1102  06C4               	xorwf	___ftadd@f2^(0+128),f
 17356  1103  30FF               	movlw	255
 17357  1104  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17358  1105  30FF               	movlw	255
 17359  1106  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17360  1107  3001               	movlw	1
 17361  1108  07C4               	addwf	___ftadd@f2^(0+128),f
 17362  1109  3000               	movlw	0
 17363  110A  1803               	skipnc
 17364  110B  3001               	movlw	1
 17365  110C  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17366  110D  3000               	movlw	0
 17367  110E  1803               	skipnc
 17368  110F  3001               	movlw	1
 17369  1110  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17370  1111  01CB               	clrf	___ftadd@sign^(0+128)
 17371  1112  0ACB               	incf	___ftadd@sign^(0+128),f
 17372  1113                     l7946:	
 17373  1113  0844               	movf	___ftadd@f2^(0+128),w
 17374  1114  00A0               	movwf	___ftpack@arg^(0+128)
 17375  1115  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17376  1116  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17377  1117  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17378  1118  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17379  1119  084D               	movf	___ftadd@exp1^(0+128),w
 17380  111A  00C7               	movwf	??___ftadd^(0+128)
 17381  111B  0847               	movf	??___ftadd^(0+128),w
 17382  111C  00A3               	movwf	___ftpack@exp^(0+128)
 17383  111D  084B               	movf	___ftadd@sign^(0+128),w
 17384  111E  00C8               	movwf	(??___ftadd+1)^(0+128)
 17385  111F  0848               	movf	(??___ftadd+1)^(0+128),w
 17386  1120  00A4               	movwf	___ftpack@sign^(0+128)
 17387  1121  31A5  25AA         	fcall	___ftpack
 17388  1123  0021               	movlb	1	; select bank1
 17389  1124  0820               	movf	?___ftpack^(0+128),w
 17390  1125  00C1               	movwf	?___ftadd^(0+128)
 17391  1126  0821               	movf	(?___ftpack+1)^(0+128),w
 17392  1127  00C2               	movwf	(?___ftadd+1)^(0+128)
 17393  1128  0822               	movf	(?___ftpack+2)^(0+128),w
 17394  1129  00C3               	movwf	(?___ftadd+2)^(0+128)
 17395  112A  0008               	return
 17396  112B                     __end_of___ftadd:	
 17397                           
 17398                           	psect	text57
 17399  2CDF                     __ptext57:	
 17400 ;; *************** function ___ftneg *****************
 17401 ;; Defined at:
 17402 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17403 ;; Parameters:    Size  Location     Type
 17404 ;;  f1              3   30[BANK1 ] float 
 17405 ;; Auto vars:     Size  Location     Type
 17406 ;;		None
 17407 ;; Return value:  Size  Location     Type
 17408 ;;                  3   30[BANK1 ] float 
 17409 ;; Registers used:
 17410 ;;		wreg
 17411 ;; Tracked objects:
 17412 ;;		On entry : 0/0
 17413 ;;		On exit  : 0/0
 17414 ;;		Unchanged: 0/0
 17415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17416 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17419 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17420 ;;Total ram usage:        3 bytes
 17421 ;; Hardware stack levels used:    1
 17422 ;; Hardware stack levels required when called:    3
 17423 ;; This function calls:
 17424 ;;		Nothing
 17425 ;; This function is called by:
 17426 ;;		_map
 17427 ;;		_scaleiA10kPot
 17428 ;;		_modCos
 17429 ;;		_modTri
 17430 ;;		_modSaw
 17431 ;;		_pow
 17432 ;;		_sin
 17433 ;;		_exp
 17434 ;;		_ldexp
 17435 ;;		_scalePotValue
 17436 ;; This function uses a non-reentrant model
 17437 ;;
 17438                           
 17439                           
 17440                           ;psect for function ___ftneg
 17441  2CDF                     ___ftneg:	
 17442                           
 17443                           ;incstack = 0
 17444                           ; Regs used in ___ftneg: [wreg]
 17445  2CDF  0021               	movlb	1	; select bank1
 17446  2CE0  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17447  2CE1  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17448  2CE2  043E               	iorwf	___ftneg@f1^(0+128),w
 17449  2CE3  1903               	skipnz
 17450  2CE4  0008               	return
 17451  2CE5  3080               	movlw	128
 17452  2CE6  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17453  2CE7  0008               	return
 17454  2CE8                     __end_of___ftneg:	
 17455                           
 17456                           	psect	text58
 17457  1C54                     __ptext58:	
 17458 ;; *************** function ___ftdiv *****************
 17459 ;; Defined at:
 17460 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17461 ;; Parameters:    Size  Location     Type
 17462 ;;  f2              3   46[BANK1 ] float 
 17463 ;;  f1              3   49[BANK1 ] float 
 17464 ;; Auto vars:     Size  Location     Type
 17465 ;;  f3              3   57[BANK1 ] float 
 17466 ;;  sign            1   61[BANK1 ] unsigned char 
 17467 ;;  exp             1   60[BANK1 ] unsigned char 
 17468 ;;  cntr            1   56[BANK1 ] unsigned char 
 17469 ;; Return value:  Size  Location     Type
 17470 ;;                  3   46[BANK1 ] float 
 17471 ;; Registers used:
 17472 ;;		wreg, status,2, status,0, pclath, cstack
 17473 ;; Tracked objects:
 17474 ;;		On entry : 0/0
 17475 ;;		On exit  : 0/0
 17476 ;;		Unchanged: 0/0
 17477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17478 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17479 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17480 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17481 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17482 ;;Total ram usage:       16 bytes
 17483 ;; Hardware stack levels used:    1
 17484 ;; Hardware stack levels required when called:    4
 17485 ;; This function calls:
 17486 ;;		___ftpack
 17487 ;; This function is called by:
 17488 ;;		_map
 17489 ;;		_scaleA100kPot
 17490 ;;		_scaleA10kPot
 17491 ;;		_scaleiA10kPot
 17492 ;;		_calcCosArray
 17493 ;;		_getModulationDelayTime
 17494 ;;		_modCos
 17495 ;;		_modTri
 17496 ;;		_modSaw
 17497 ;;		_sin
 17498 ;;		_exp
 17499 ;;		_scalePotValue
 17500 ;;		_scaleiA100kPot
 17501 ;;		_scaleA25kPot
 17502 ;;		_scaleiA25kPot
 17503 ;; This function uses a non-reentrant model
 17504 ;;
 17505                           
 17506                           
 17507                           ;psect for function ___ftdiv
 17508  1C54                     ___ftdiv:	
 17509                           
 17510                           ;incstack = 0
 17511                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17512  1C54  0021               	movlb	1	; select bank1
 17513  1C55  0851               	movf	___ftdiv@f1^(0+128),w
 17514  1C56  00D4               	movwf	??___ftdiv^(0+128)
 17515  1C57  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17516  1C58  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17517  1C59  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17518  1C5A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17519  1C5B  1003               	clrc
 17520  1C5C  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17521  1C5D  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17522  1C5E  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17523  1C5F  0857               	movf	(??___ftdiv+3)^(0+128),w
 17524  1C60  00DC               	movwf	___ftdiv@exp^(0+128)
 17525  1C61  085C               	movf	___ftdiv@exp^(0+128),w
 17526  1C62  1D03               	btfss	3,2
 17527  1C63  2C6B               	goto	l8158
 17528  1C64  3000               	movlw	0
 17529  1C65  00CE               	movwf	?___ftdiv^(0+128)
 17530  1C66  3000               	movlw	0
 17531  1C67  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17532  1C68  3000               	movlw	0
 17533  1C69  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17534  1C6A  0008               	return
 17535  1C6B                     l8158:	
 17536  1C6B  084E               	movf	___ftdiv@f2^(0+128),w
 17537  1C6C  00D4               	movwf	??___ftdiv^(0+128)
 17538  1C6D  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17539  1C6E  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17540  1C6F  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17541  1C70  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17542  1C71  1003               	clrc
 17543  1C72  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17544  1C73  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17545  1C74  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17546  1C75  0857               	movf	(??___ftdiv+3)^(0+128),w
 17547  1C76  00DD               	movwf	___ftdiv@sign^(0+128)
 17548  1C77  085D               	movf	___ftdiv@sign^(0+128),w
 17549  1C78  1D03               	btfss	3,2
 17550  1C79  2C81               	goto	l8164
 17551  1C7A  3000               	movlw	0
 17552  1C7B  00CE               	movwf	?___ftdiv^(0+128)
 17553  1C7C  3000               	movlw	0
 17554  1C7D  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17555  1C7E  3000               	movlw	0
 17556  1C7F  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17557  1C80  0008               	return
 17558  1C81                     l8164:	
 17559  1C81  3000               	movlw	0
 17560  1C82  00D9               	movwf	___ftdiv@f3^(0+128)
 17561  1C83  3000               	movlw	0
 17562  1C84  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17563  1C85  3000               	movlw	0
 17564  1C86  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17565  1C87  3089               	movlw	137
 17566  1C88  075D               	addwf	___ftdiv@sign^(0+128),w
 17567  1C89  00D4               	movwf	??___ftdiv^(0+128)
 17568  1C8A  0854               	movf	??___ftdiv^(0+128),w
 17569  1C8B  02DC               	subwf	___ftdiv@exp^(0+128),f
 17570  1C8C  0851               	movf	___ftdiv@f1^(0+128),w
 17571  1C8D  00D4               	movwf	??___ftdiv^(0+128)
 17572  1C8E  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17573  1C8F  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17574  1C90  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17575  1C91  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17576  1C92  3010               	movlw	16
 17577  1C93                     u8585:	
 17578  1C93  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17579  1C94  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17580  1C95  0CD4               	rrf	??___ftdiv^(0+128),f
 17581  1C96  0B89               	decfsz	9,f
 17582  1C97  2C93               	goto	u8585
 17583  1C98  0854               	movf	??___ftdiv^(0+128),w
 17584  1C99  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17585  1C9A  0857               	movf	(??___ftdiv+3)^(0+128),w
 17586  1C9B  00DD               	movwf	___ftdiv@sign^(0+128)
 17587  1C9C  084E               	movf	___ftdiv@f2^(0+128),w
 17588  1C9D  00D4               	movwf	??___ftdiv^(0+128)
 17589  1C9E  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17590  1C9F  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17591  1CA0  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17592  1CA1  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17593  1CA2  3010               	movlw	16
 17594  1CA3                     u8595:	
 17595  1CA3  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17596  1CA4  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17597  1CA5  0CD4               	rrf	??___ftdiv^(0+128),f
 17598  1CA6  0B89               	decfsz	9,f
 17599  1CA7  2CA3               	goto	u8595
 17600  1CA8  0854               	movf	??___ftdiv^(0+128),w
 17601  1CA9  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17602  1CAA  0857               	movf	(??___ftdiv+3)^(0+128),w
 17603  1CAB  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17604  1CAC  3080               	movlw	128
 17605  1CAD  00D4               	movwf	??___ftdiv^(0+128)
 17606  1CAE  0854               	movf	??___ftdiv^(0+128),w
 17607  1CAF  05DD               	andwf	___ftdiv@sign^(0+128),f
 17608  1CB0  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17609  1CB1  30FF               	movlw	255
 17610  1CB2  05D1               	andwf	___ftdiv@f1^(0+128),f
 17611  1CB3  30FF               	movlw	255
 17612  1CB4  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17613  1CB5  3000               	movlw	0
 17614  1CB6  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17615  1CB7  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17616  1CB8  30FF               	movlw	255
 17617  1CB9  05CE               	andwf	___ftdiv@f2^(0+128),f
 17618  1CBA  30FF               	movlw	255
 17619  1CBB  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17620  1CBC  3000               	movlw	0
 17621  1CBD  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17622  1CBE  3018               	movlw	24
 17623  1CBF  00D4               	movwf	??___ftdiv^(0+128)
 17624  1CC0  0854               	movf	??___ftdiv^(0+128),w
 17625  1CC1  00D8               	movwf	___ftdiv@cntr^(0+128)
 17626  1CC2                     l8178:	
 17627  1CC2  3001               	movlw	1
 17628  1CC3                     u8605:	
 17629  1CC3  35D9               	lslf	___ftdiv@f3^(0+128),f
 17630  1CC4  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17631  1CC5  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17632  1CC6  0B89               	decfsz	9,f
 17633  1CC7  2CC3               	goto	u8605
 17634  1CC8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17635  1CC9  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17636  1CCA  1D03               	skipz
 17637  1CCB  2CD2               	goto	u8615
 17638  1CCC  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17639  1CCD  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17640  1CCE  1D03               	skipz
 17641  1CCF  2CD2               	goto	u8615
 17642  1CD0  084E               	movf	___ftdiv@f2^(0+128),w
 17643  1CD1  0251               	subwf	___ftdiv@f1^(0+128),w
 17644  1CD2                     u8615:	
 17645  1CD2  1C03               	skipc
 17646  1CD3  2CDB               	goto	l8186
 17647  1CD4  084E               	movf	___ftdiv@f2^(0+128),w
 17648  1CD5  02D1               	subwf	___ftdiv@f1^(0+128),f
 17649  1CD6  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17650  1CD7  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17651  1CD8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17652  1CD9  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17653  1CDA  1459               	bsf	___ftdiv@f3^(0+128),0
 17654  1CDB                     l8186:	
 17655  1CDB  3001               	movlw	1
 17656  1CDC                     u8625:	
 17657  1CDC  35D1               	lslf	___ftdiv@f1^(0+128),f
 17658  1CDD  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17659  1CDE  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17660  1CDF  0B89               	decfsz	9,f
 17661  1CE0  2CDC               	goto	u8625
 17662  1CE1  3001               	movlw	1
 17663  1CE2  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17664  1CE3  1D03               	btfss	3,2
 17665  1CE4  2CC2               	goto	l8178
 17666  1CE5  0859               	movf	___ftdiv@f3^(0+128),w
 17667  1CE6  00A0               	movwf	___ftpack@arg^(0+128)
 17668  1CE7  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17669  1CE8  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17670  1CE9  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17671  1CEA  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17672  1CEB  085C               	movf	___ftdiv@exp^(0+128),w
 17673  1CEC  00D4               	movwf	??___ftdiv^(0+128)
 17674  1CED  0854               	movf	??___ftdiv^(0+128),w
 17675  1CEE  00A3               	movwf	___ftpack@exp^(0+128)
 17676  1CEF  085D               	movf	___ftdiv@sign^(0+128),w
 17677  1CF0  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17678  1CF1  0855               	movf	(??___ftdiv+1)^(0+128),w
 17679  1CF2  00A4               	movwf	___ftpack@sign^(0+128)
 17680  1CF3  31A5  25AA         	fcall	___ftpack
 17681  1CF5  0021               	movlb	1	; select bank1
 17682  1CF6  0820               	movf	?___ftpack^(0+128),w
 17683  1CF7  00CE               	movwf	?___ftdiv^(0+128)
 17684  1CF8  0821               	movf	(?___ftpack+1)^(0+128),w
 17685  1CF9  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17686  1CFA  0822               	movf	(?___ftpack+2)^(0+128),w
 17687  1CFB  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17688  1CFC  0008               	return
 17689  1CFD                     __end_of___ftdiv:	
 17690                           
 17691                           	psect	text59
 17692  2E2D                     __ptext59:	
 17693 ;; *************** function ___awtoft *****************
 17694 ;; Defined at:
 17695 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17696 ;; Parameters:    Size  Location     Type
 17697 ;;  c               2    8[BANK1 ] int 
 17698 ;; Auto vars:     Size  Location     Type
 17699 ;;  sign            1   13[BANK1 ] unsigned char 
 17700 ;; Return value:  Size  Location     Type
 17701 ;;                  3    8[BANK1 ] float 
 17702 ;; Registers used:
 17703 ;;		wreg, status,2, status,0, pclath, cstack
 17704 ;; Tracked objects:
 17705 ;;		On entry : 0/0
 17706 ;;		On exit  : 0/0
 17707 ;;		Unchanged: 0/0
 17708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17709 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17710 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17711 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17712 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17713 ;;Total ram usage:        6 bytes
 17714 ;; Hardware stack levels used:    1
 17715 ;; Hardware stack levels required when called:    4
 17716 ;; This function calls:
 17717 ;;		___ftpack
 17718 ;; This function is called by:
 17719 ;;		_main
 17720 ;;		_set_subdivision
 17721 ;;		_calcCosArray
 17722 ;;		_getModulationDelayTime
 17723 ;;		_updateModulationArray
 17724 ;;		_exp
 17725 ;;		_log
 17726 ;; This function uses a non-reentrant model
 17727 ;;
 17728                           
 17729                           
 17730                           ;psect for function ___awtoft
 17731  2E2D                     ___awtoft:	
 17732                           
 17733                           ;incstack = 0
 17734                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17735  2E2D  0021               	movlb	1	; select bank1
 17736  2E2E  01AD               	clrf	___awtoft@sign^(0+128)
 17737  2E2F  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17738  2E30  2E38               	goto	l8148
 17739  2E31  09A8               	comf	___awtoft@c^(0+128),f
 17740  2E32  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17741  2E33  0AA8               	incf	___awtoft@c^(0+128),f
 17742  2E34  1903               	skipnz
 17743  2E35  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17744  2E36  01AD               	clrf	___awtoft@sign^(0+128)
 17745  2E37  0AAD               	incf	___awtoft@sign^(0+128),f
 17746  2E38                     l8148:	
 17747  2E38  0828               	movf	___awtoft@c^(0+128),w
 17748  2E39  00A0               	movwf	___ftpack@arg^(0+128)
 17749  2E3A  0829               	movf	(___awtoft@c+1)^(0+128),w
 17750  2E3B  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17751  2E3C  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17752  2E3D  308E               	movlw	142
 17753  2E3E  00AB               	movwf	??___awtoft^(0+128)
 17754  2E3F  082B               	movf	??___awtoft^(0+128),w
 17755  2E40  00A3               	movwf	___ftpack@exp^(0+128)
 17756  2E41  082D               	movf	___awtoft@sign^(0+128),w
 17757  2E42  00AC               	movwf	(??___awtoft+1)^(0+128)
 17758  2E43  082C               	movf	(??___awtoft+1)^(0+128),w
 17759  2E44  00A4               	movwf	___ftpack@sign^(0+128)
 17760  2E45  31A5  25AA         	fcall	___ftpack
 17761  2E47  0021               	movlb	1	; select bank1
 17762  2E48  0820               	movf	?___ftpack^(0+128),w
 17763  2E49  00A8               	movwf	?___awtoft^(0+128)
 17764  2E4A  0821               	movf	(?___ftpack+1)^(0+128),w
 17765  2E4B  00A9               	movwf	(?___awtoft+1)^(0+128)
 17766  2E4C  0822               	movf	(?___ftpack+2)^(0+128),w
 17767  2E4D  00AA               	movwf	(?___awtoft+2)^(0+128)
 17768  2E4E  0008               	return
 17769  2E4F                     __end_of___awtoft:	
 17770                           
 17771                           	psect	text60
 17772  25AA                     __ptext60:	
 17773 ;; *************** function ___ftpack *****************
 17774 ;; Defined at:
 17775 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17776 ;; Parameters:    Size  Location     Type
 17777 ;;  arg             3    0[BANK1 ] unsigned um
 17778 ;;  exp             1    3[BANK1 ] unsigned char 
 17779 ;;  sign            1    4[BANK1 ] unsigned char 
 17780 ;; Auto vars:     Size  Location     Type
 17781 ;;		None
 17782 ;; Return value:  Size  Location     Type
 17783 ;;                  3    0[BANK1 ] float 
 17784 ;; Registers used:
 17785 ;;		wreg, status,2, status,0
 17786 ;; Tracked objects:
 17787 ;;		On entry : 0/0
 17788 ;;		On exit  : 0/0
 17789 ;;		Unchanged: 0/0
 17790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17791 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17793 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17794 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17795 ;;Total ram usage:        8 bytes
 17796 ;; Hardware stack levels used:    1
 17797 ;; Hardware stack levels required when called:    3
 17798 ;; This function calls:
 17799 ;;		Nothing
 17800 ;; This function is called by:
 17801 ;;		___altoft
 17802 ;;		___awtoft
 17803 ;;		___ftadd
 17804 ;;		___ftdiv
 17805 ;;		___ftmul
 17806 ;;		___lltoft
 17807 ;; This function uses a non-reentrant model
 17808 ;;
 17809                           
 17810                           
 17811                           ;psect for function ___ftpack
 17812  25AA                     ___ftpack:	
 17813                           
 17814                           ;incstack = 0
 17815                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17816  25AA  0021               	movlb	1	; select bank1
 17817  25AB  0823               	movf	___ftpack@exp^(0+128),w
 17818  25AC  1903               	btfsc	3,2
 17819  25AD  2DB3               	goto	l7786
 17820  25AE  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17821  25AF  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17822  25B0  0420               	iorwf	___ftpack@arg^(0+128),w
 17823  25B1  1D03               	skipz
 17824  25B2  2DC4               	goto	l7792
 17825  25B3                     l7786:	
 17826  25B3  3000               	movlw	0
 17827  25B4  00A0               	movwf	?___ftpack^(0+128)
 17828  25B5  3000               	movlw	0
 17829  25B6  00A1               	movwf	(?___ftpack+1)^(0+128)
 17830  25B7  3000               	movlw	0
 17831  25B8  00A2               	movwf	(?___ftpack+2)^(0+128)
 17832  25B9  0008               	return
 17833  25BA                     l7790:	
 17834  25BA  3001               	movlw	1
 17835  25BB  00A5               	movwf	??___ftpack^(0+128)
 17836  25BC  0825               	movf	??___ftpack^(0+128),w
 17837  25BD  07A3               	addwf	___ftpack@exp^(0+128),f
 17838  25BE  3001               	movlw	1
 17839  25BF                     u7825:	
 17840  25BF  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17841  25C0  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17842  25C1  0CA0               	rrf	___ftpack@arg^(0+128),f
 17843  25C2  0B89               	decfsz	9,f
 17844  25C3  2DBF               	goto	u7825
 17845  25C4                     l7792:	
 17846  25C4  30FE               	movlw	254
 17847  25C5  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17848  25C6  1903               	btfsc	3,2
 17849  25C7  2DDD               	goto	l2165
 17850  25C8  2DBA               	goto	l7790
 17851  25C9                     l7794:	
 17852  25C9  3001               	movlw	1
 17853  25CA  00A5               	movwf	??___ftpack^(0+128)
 17854  25CB  0825               	movf	??___ftpack^(0+128),w
 17855  25CC  07A3               	addwf	___ftpack@exp^(0+128),f
 17856  25CD  3001               	movlw	1
 17857  25CE  07A0               	addwf	___ftpack@arg^(0+128),f
 17858  25CF  3000               	movlw	0
 17859  25D0  1803               	skipnc
 17860  25D1  3001               	movlw	1
 17861  25D2  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17862  25D3  3000               	movlw	0
 17863  25D4  1803               	skipnc
 17864  25D5  3001               	movlw	1
 17865  25D6  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17866  25D7  3001               	movlw	1
 17867  25D8                     u7845:	
 17868  25D8  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17869  25D9  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17870  25DA  0CA0               	rrf	___ftpack@arg^(0+128),f
 17871  25DB  0B89               	decfsz	9,f
 17872  25DC  2DD8               	goto	u7845
 17873  25DD                     l2165:	
 17874  25DD  30FF               	movlw	255
 17875  25DE  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17876  25DF  1903               	btfsc	3,2
 17877  25E0  2DEA               	goto	l7802
 17878  25E1  2DC9               	goto	l7794
 17879  25E2                     l7800:	
 17880  25E2  3001               	movlw	1
 17881  25E3  02A3               	subwf	___ftpack@exp^(0+128),f
 17882  25E4  3001               	movlw	1
 17883  25E5                     u7865:	
 17884  25E5  35A0               	lslf	___ftpack@arg^(0+128),f
 17885  25E6  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17886  25E7  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17887  25E8  0B89               	decfsz	9,f
 17888  25E9  2DE5               	goto	u7865
 17889  25EA                     l7802:	
 17890  25EA  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17891  25EB  2DF0               	goto	l2172
 17892  25EC  3002               	movlw	2
 17893  25ED  0223               	subwf	___ftpack@exp^(0+128),w
 17894  25EE  1803               	skipnc
 17895  25EF  2DE2               	goto	l7800
 17896  25F0                     l2172:	
 17897  25F0  1823               	btfsc	___ftpack@exp^(0+128),0
 17898  25F1  2DF8               	goto	l2173
 17899  25F2  30FF               	movlw	255
 17900  25F3  05A0               	andwf	___ftpack@arg^(0+128),f
 17901  25F4  307F               	movlw	127
 17902  25F5  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17903  25F6  30FF               	movlw	255
 17904  25F7  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17905  25F8                     l2173:	
 17906  25F8  1003               	clrc
 17907  25F9  0CA3               	rrf	___ftpack@exp^(0+128),f
 17908  25FA  0823               	movf	___ftpack@exp^(0+128),w
 17909  25FB  00A5               	movwf	??___ftpack^(0+128)
 17910  25FC  01A6               	clrf	(??___ftpack^(0+128)+1)
 17911  25FD  01A7               	clrf	(??___ftpack^(0+128)+2)
 17912  25FE  3010               	movlw	16
 17913  25FF                     u7905:	
 17914  25FF  35A5               	lslf	??___ftpack^(0+128),f
 17915  2600  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17916  2601  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17917  2602  0B89               	decfsz	9,f
 17918  2603  2DFF               	goto	u7905
 17919  2604  0825               	movf	??___ftpack^(0+128),w
 17920  2605  04A0               	iorwf	___ftpack@arg^(0+128),f
 17921  2606  0826               	movf	(??___ftpack+1)^(0+128),w
 17922  2607  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17923  2608  0827               	movf	(??___ftpack+2)^(0+128),w
 17924  2609  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17925  260A  0824               	movf	___ftpack@sign^(0+128),w
 17926  260B  1903               	btfsc	3,2
 17927  260C  0008               	return
 17928  260D  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17929  260E  0008               	return
 17930  260F                     __end_of___ftpack:	
 17931                           
 17932                           	psect	text61
 17933  2D2B                     __ptext61:	
 17934 ;; *************** function _adc_convert *****************
 17935 ;; Defined at:
 17936 ;;		line 122 in file "user.c"
 17937 ;; Parameters:    Size  Location     Type
 17938 ;;  channel         1    wreg     unsigned char 
 17939 ;; Auto vars:     Size  Location     Type
 17940 ;;  channel         1    3[BANK1 ] unsigned char 
 17941 ;; Return value:  Size  Location     Type
 17942 ;;                  2    0[BANK1 ] unsigned int 
 17943 ;; Registers used:
 17944 ;;		wreg, status,2, status,0
 17945 ;; Tracked objects:
 17946 ;;		On entry : 0/0
 17947 ;;		On exit  : 0/0
 17948 ;;		Unchanged: 0/0
 17949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17950 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17951 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17952 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17953 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17954 ;;Total ram usage:        4 bytes
 17955 ;; Hardware stack levels used:    1
 17956 ;; Hardware stack levels required when called:    3
 17957 ;; This function calls:
 17958 ;;		Nothing
 17959 ;; This function is called by:
 17960 ;;		_main
 17961 ;; This function uses a non-reentrant model
 17962 ;;
 17963                           
 17964                           
 17965                           ;psect for function _adc_convert
 17966  2D2B                     _adc_convert:	
 17967                           
 17968                           ;incstack = 0
 17969                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17970                           ;adc_convert@channel stored from wreg
 17971  2D2B  0021               	movlb	1	; select bank1
 17972  2D2C  00A3               	movwf	adc_convert@channel^(0+128)
 17973                           
 17974                           ;user.c: 123: ADCON0bits.CHS = channel;
 17975  2D2D  0823               	movf	adc_convert@channel^(0+128),w
 17976  2D2E  00A2               	movwf	??_adc_convert^(0+128)
 17977  2D2F  0DA2               	rlf	??_adc_convert^(0+128),f
 17978  2D30  0DA2               	rlf	??_adc_convert^(0+128),f
 17979  2D31  081D               	movf	29,w	;volatile
 17980  2D32  0622               	xorwf	??_adc_convert^(0+128),w
 17981  2D33  3983               	andlw	-125
 17982  2D34  0622               	xorwf	??_adc_convert^(0+128),w
 17983  2D35  009D               	movwf	29	;volatile
 17984                           
 17985                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17986  2D36  149D               	bsf	29,1	;volatile
 17987  2D37                     l600:	
 17988                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17989                           
 17990  2D37  189D               	btfsc	29,1	;volatile
 17991  2D38  2D37               	goto	l600
 17992                           
 17993                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17994  2D39  081C               	movf	28,w	;volatile
 17995  2D3A  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17996  2D3B  081B               	movf	27,w	;volatile
 17997  2D3C  00A0               	movwf	?_adc_convert^(0+128)
 17998  2D3D  0008               	return
 17999  2D3E                     __end_of_adc_convert:	
 18000                           
 18001                           	psect	text62
 18002  2293                     __ptext62:	
 18003 ;; *************** function _USARTInit *****************
 18004 ;; Defined at:
 18005 ;;		line 31 in file "usart_pic16.c"
 18006 ;; Parameters:    Size  Location     Type
 18007 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 18008 ;; Auto vars:     Size  Location     Type
 18009 ;;		None
 18010 ;; Return value:  Size  Location     Type
 18011 ;;                  1    wreg      void 
 18012 ;; Registers used:
 18013 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18014 ;; Tracked objects:
 18015 ;;		On entry : 0/0
 18016 ;;		On exit  : 0/0
 18017 ;;		Unchanged: 0/0
 18018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18019 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18021 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18022 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18023 ;;Total ram usage:        3 bytes
 18024 ;; Hardware stack levels used:    1
 18025 ;; Hardware stack levels required when called:    3
 18026 ;; This function calls:
 18027 ;;		Nothing
 18028 ;; This function is called by:
 18029 ;;		_main
 18030 ;; This function uses a non-reentrant model
 18031 ;;
 18032                           
 18033                           
 18034                           ;psect for function _USARTInit
 18035  2293                     _USARTInit:	
 18036                           
 18037                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 18038                           
 18039                           ;incstack = 0
 18040                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 18041  2293  30FF               	movlw	255
 18042  2294  0020               	movlb	0	; select bank0
 18043  2295  00DA               	movwf	_UQEnd	;volatile
 18044  2296  0021               	movlb	1	; select bank1
 18045  2297  00A2               	movwf	??_USARTInit^(0+128)
 18046  2298  0822               	movf	??_USARTInit^(0+128),w
 18047  2299  0020               	movlb	0	; select bank0
 18048  229A  00DB               	movwf	_UQFront	;volatile
 18049                           
 18050                           ;usart_pic16.c: 37: switch(baud_rate)
 18051  229B  2AA6               	goto	l8804
 18052  229C                     l8794:	
 18053                           ;usart_pic16.c: 38: {
 18054                           ;usart_pic16.c: 39: case 9600:
 18055                           
 18056                           
 18057                           ;usart_pic16.c: 40: SPBRG=103;
 18058  229C  3067               	movlw	103
 18059  229D  2AA3               	goto	L22
 18060  229E                     l8796:	
 18061                           ;usart_pic16.c: 42: case 19200:
 18062                           
 18063                           ;usart_pic16.c: 41: break;
 18064                           
 18065                           
 18066                           ;usart_pic16.c: 43: SPBRG=51;
 18067  229E  3033               	movlw	51
 18068  229F  2AA3               	goto	L22
 18069  22A0                     l8798:	
 18070                           ;usart_pic16.c: 45: case 31250:
 18071                           
 18072                           ;usart_pic16.c: 44: break;
 18073                           
 18074                           
 18075                           ;usart_pic16.c: 46: SPBRG = 31;
 18076  22A0  301F               	movlw	31
 18077  22A1  2AA3               	goto	L22
 18078  22A2                     l8800:	
 18079                           ;usart_pic16.c: 48: case 38400:
 18080                           
 18081                           ;usart_pic16.c: 47: break;
 18082                           
 18083                           
 18084                           ;usart_pic16.c: 49: SPBRG=25;
 18085  22A2  3019               	movlw	25
 18086  22A3                     L22:	
 18087  22A3  0023               	movlb	3	; select bank3
 18088  22A4  009B               	movwf	27	;volatile
 18089                           
 18090                           ;usart_pic16.c: 51: }
 18091                           
 18092                           ;usart_pic16.c: 50: break;
 18093  22A5  2AC9               	goto	l1748
 18094  22A6                     l8804:	
 18095                           
 18096                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18097                           ; Switch size 1, requested type "space"
 18098                           ; Number of cases is 4, Range of values is 37 to 150
 18099                           ; switch strategies available:
 18100                           ; Name         Instructions Cycles
 18101                           ; simple_byte           13     7 (average)
 18102                           ; direct_byte          237     9 (fixed)
 18103                           ; jumptable            263     9 (fixed)
 18104                           ;	Chosen strategy is simple_byte
 18105  22A6  0021               	movlb	1	; select bank1
 18106  22A7  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 18107  22A8  3A25               	xorlw	37	; case 37
 18108  22A9  1903               	skipnz
 18109  22AA  2AB5               	goto	l9954
 18110  22AB  3A6E               	xorlw	110	; case 75
 18111  22AC  1903               	skipnz
 18112  22AD  2ABA               	goto	l9956
 18113  22AE  3A31               	xorlw	49	; case 122
 18114  22AF  1903               	skipnz
 18115  22B0  2ABF               	goto	l9958
 18116  22B1  3AEC               	xorlw	236	; case 150
 18117  22B2  1903               	skipnz
 18118  22B3  2AC4               	goto	l9960
 18119  22B4  2AC9               	goto	l1748
 18120  22B5                     l9954:	
 18121                           
 18122                           ; Switch size 1, requested type "space"
 18123                           ; Number of cases is 1, Range of values is 128 to 128
 18124                           ; switch strategies available:
 18125                           ; Name         Instructions Cycles
 18126                           ; simple_byte            4     3 (average)
 18127                           ; direct_byte           11     9 (fixed)
 18128                           ; jumptable            263     9 (fixed)
 18129                           ;	Chosen strategy is simple_byte
 18130  22B5  0820               	movf	USARTInit@baud_rate^(0+128),w
 18131  22B6  3A80               	xorlw	128	; case 128
 18132  22B7  1903               	skipnz
 18133  22B8  2A9C               	goto	l8794
 18134  22B9  2AC9               	goto	l1748
 18135  22BA                     l9956:	
 18136                           
 18137                           ; Switch size 1, requested type "space"
 18138                           ; Number of cases is 1, Range of values is 0 to 0
 18139                           ; switch strategies available:
 18140                           ; Name         Instructions Cycles
 18141                           ; simple_byte            4     3 (average)
 18142                           ; direct_byte            8     6 (fixed)
 18143                           ; jumptable            260     6 (fixed)
 18144                           ;	Chosen strategy is simple_byte
 18145  22BA  0820               	movf	USARTInit@baud_rate^(0+128),w
 18146  22BB  3A00               	xorlw	0	; case 0
 18147  22BC  1903               	skipnz
 18148  22BD  2A9E               	goto	l8796
 18149  22BE  2AC9               	goto	l1748
 18150  22BF                     l9958:	
 18151                           
 18152                           ; Switch size 1, requested type "space"
 18153                           ; Number of cases is 1, Range of values is 18 to 18
 18154                           ; switch strategies available:
 18155                           ; Name         Instructions Cycles
 18156                           ; simple_byte            4     3 (average)
 18157                           ; direct_byte           11     9 (fixed)
 18158                           ; jumptable            263     9 (fixed)
 18159                           ;	Chosen strategy is simple_byte
 18160  22BF  0820               	movf	USARTInit@baud_rate^(0+128),w
 18161  22C0  3A12               	xorlw	18	; case 18
 18162  22C1  1903               	skipnz
 18163  22C2  2AA0               	goto	l8798
 18164  22C3  2AC9               	goto	l1748
 18165  22C4                     l9960:	
 18166                           
 18167                           ; Switch size 1, requested type "space"
 18168                           ; Number of cases is 1, Range of values is 0 to 0
 18169                           ; switch strategies available:
 18170                           ; Name         Instructions Cycles
 18171                           ; simple_byte            4     3 (average)
 18172                           ; direct_byte            8     6 (fixed)
 18173                           ; jumptable            260     6 (fixed)
 18174                           ;	Chosen strategy is simple_byte
 18175  22C4  0820               	movf	USARTInit@baud_rate^(0+128),w
 18176  22C5  3A00               	xorlw	0	; case 0
 18177  22C6  1903               	skipnz
 18178  22C7  2AA2               	goto	l8800
 18179  22C8  2AC9               	goto	l1748
 18180  22C9                     l1748:	
 18181                           
 18182                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 18183  22C9  0023               	movlb	3	; select bank3
 18184  22CA  131E               	bcf	30,6	;volatile
 18185                           
 18186                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 18187  22CB  169E               	bsf	30,5	;volatile
 18188                           
 18189                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 18190  22CC  121E               	bcf	30,4	;volatile
 18191                           
 18192                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 18193  22CD  151E               	bsf	30,2	;volatile
 18194                           
 18195                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 18196  22CE  179D               	bsf	29,7	;volatile
 18197                           
 18198                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 18199  22CF  131D               	bcf	29,6	;volatile
 18200                           
 18201                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 18202  22D0  161D               	bsf	29,4	;volatile
 18203                           
 18204                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18205  22D1  119D               	bcf	29,3	;volatile
 18206                           
 18207                           ;usart_pic16.c: 65: RCIE=1;
 18208  22D2  0021               	movlb	1	; select bank1
 18209  22D3  1691               	bsf	17,5	;volatile
 18210                           
 18211                           ;usart_pic16.c: 66: PEIE=1;
 18212  22D4  170B               	bsf	11,6	;volatile
 18213                           
 18214                           ;usart_pic16.c: 68: (GIE = 1);
 18215  22D5  178B               	bsf	11,7	;volatile
 18216  22D6  0008               	return
 18217  22D7                     __end_of_USARTInit:	
 18218                           
 18219                           	psect	text63
 18220  1805                     __ptext63:	
 18221 ;; *************** function _ReadSavedSettings *****************
 18222 ;; Defined at:
 18223 ;;		line 252 in file "user.c"
 18224 ;; Parameters:    Size  Location     Type
 18225 ;;		None
 18226 ;; Auto vars:     Size  Location     Type
 18227 ;;		None
 18228 ;; Return value:  Size  Location     Type
 18229 ;;                  1    wreg      void 
 18230 ;; Registers used:
 18231 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18232 ;; Tracked objects:
 18233 ;;		On entry : 0/0
 18234 ;;		On exit  : 0/0
 18235 ;;		Unchanged: 0/0
 18236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18239 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18240 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18241 ;;Total ram usage:        1 bytes
 18242 ;; Hardware stack levels used:    1
 18243 ;; Hardware stack levels required when called:    4
 18244 ;; This function calls:
 18245 ;;		_FLASH_ReadWord
 18246 ;;		_set_leds_bottom
 18247 ;;		_set_leds_top
 18248 ;; This function is called by:
 18249 ;;		_main
 18250 ;; This function uses a non-reentrant model
 18251 ;;
 18252                           
 18253                           
 18254                           ;psect for function _ReadSavedSettings
 18255  1805                     _ReadSavedSettings:	
 18256                           
 18257                           ;user.c: 254: top_push_state = FLASH_ReadWord(0x1F81);
 18258                           
 18259                           ;incstack = 0
 18260                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18261  1805  3081               	movlw	129
 18262  1806  0021               	movlb	1	; select bank1
 18263  1807  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18264  1808  301F               	movlw	31
 18265  1809  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18266  180A  3188  2000  3198   	fcall	_FLASH_ReadWord
 18267  180D  0021               	movlb	1	; select bank1
 18268  180E  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18269  180F  0020               	movlb	0	; select bank0
 18270  1810  00CD               	movwf	_top_push_state+1
 18271  1811  0021               	movlb	1	; select bank1
 18272  1812  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18273  1813  0020               	movlb	0	; select bank0
 18274  1814  00CC               	movwf	_top_push_state
 18275                           
 18276                           ;user.c: 255: bottom_push_state = FLASH_ReadWord(0x1F82);
 18277  1815  3082               	movlw	130
 18278  1816  0021               	movlb	1	; select bank1
 18279  1817  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18280  1818  301F               	movlw	31
 18281  1819  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18282  181A  3188  2000  3198   	fcall	_FLASH_ReadWord
 18283  181D  0021               	movlb	1	; select bank1
 18284  181E  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18285  181F  0020               	movlb	0	; select bank0
 18286  1820  00C9               	movwf	_bottom_push_state+1
 18287  1821  0021               	movlb	1	; select bank1
 18288  1822  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18289  1823  0020               	movlb	0	; select bank0
 18290  1824  00C8               	movwf	_bottom_push_state
 18291                           
 18292                           ;user.c: 257: if (top_push_state > 6) {
 18293  1825  084D               	movf	_top_push_state+1,w
 18294  1826  3A80               	xorlw	128
 18295  1827  0021               	movlb	1	; select bank1
 18296  1828  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18297  1829  3080               	movlw	128
 18298  182A  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18299  182B  1D03               	skipz
 18300  182C  2830               	goto	u9405
 18301  182D  3007               	movlw	7
 18302  182E  0020               	movlb	0	; select bank0
 18303  182F  024C               	subwf	_top_push_state,w
 18304  1830                     u9405:	
 18305  1830  1C03               	skipc
 18306  1831  2837               	goto	l657
 18307                           
 18308                           ;user.c: 259: top_push_state = 6;
 18309  1832  3006               	movlw	6
 18310  1833  0020               	movlb	0	; select bank0
 18311  1834  00CC               	movwf	_top_push_state
 18312  1835  3000               	movlw	0
 18313  1836  00CD               	movwf	_top_push_state+1
 18314  1837                     l657:	
 18315                           
 18316                           ;user.c: 260: }
 18317                           ;user.c: 261: if (bottom_push_state > 5) {
 18318  1837  0020               	movlb	0	; select bank0
 18319  1838  0849               	movf	_bottom_push_state+1,w
 18320  1839  3A80               	xorlw	128
 18321  183A  0021               	movlb	1	; select bank1
 18322  183B  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18323  183C  3080               	movlw	128
 18324  183D  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18325  183E  1D03               	skipz
 18326  183F  2843               	goto	u9415
 18327  1840  3006               	movlw	6
 18328  1841  0020               	movlb	0	; select bank0
 18329  1842  0248               	subwf	_bottom_push_state,w
 18330  1843                     u9415:	
 18331  1843  1C03               	skipc
 18332  1844  284A               	goto	l8858
 18333                           
 18334                           ;user.c: 263: bottom_push_state = 1;
 18335  1845  3001               	movlw	1
 18336  1846  0020               	movlb	0	; select bank0
 18337  1847  00C8               	movwf	_bottom_push_state
 18338  1848  3000               	movlw	0
 18339  1849  00C9               	movwf	_bottom_push_state+1
 18340  184A                     l8858:	
 18341                           
 18342                           ;user.c: 264: }
 18343                           ;user.c: 267: LATGbits.LATG1 = !switchBypass_state;
 18344  184A  0020               	movlb	0	; select bank0
 18345  184B  0851               	movf	_switchBypass_state,w
 18346  184C  1D03               	btfss	3,2
 18347  184D  2851               	goto	u9420
 18348  184E  0027               	movlb	7	; select bank7
 18349  184F  148D               	bsf	13,1	;volatile
 18350  1850  2853               	goto	l8860
 18351  1851                     u9420:	
 18352  1851  0027               	movlb	7	; select bank7
 18353  1852  108D               	bcf	13,1	;volatile
 18354  1853                     l8860:	
 18355                           
 18356                           ;user.c: 268: LATGbits.LATG2 = switchBypass_state;
 18357  1853  0020               	movlb	0	; select bank0
 18358  1854  0C51               	rrf	_switchBypass_state,w
 18359  1855  0027               	movlb	7	; select bank7
 18360  1856  1C03               	skipc
 18361  1857  110D               	bcf	13,2	;volatile
 18362  1858  1803               	skipnc
 18363  1859  150D               	bsf	13,2	;volatile
 18364                           
 18365                           ;user.c: 269: LATBbits.LATB2 = 0;
 18366  185A  0022               	movlb	2	; select bank2
 18367  185B  110D               	bcf	13,2	;volatile
 18368                           
 18369                           ;user.c: 270: LATBbits.LATB3 = 0;
 18370  185C  118D               	bcf	13,3	;volatile
 18371                           
 18372                           ;user.c: 272: LATBbits.LATB4 = 0;
 18373  185D  120D               	bcf	13,4	;volatile
 18374                           
 18375                           ;user.c: 273: LATBbits.LATB5 = 0;
 18376  185E  128D               	bcf	13,5	;volatile
 18377                           
 18378                           ;user.c: 275: LATBbits.LATB1 = 0;
 18379  185F  108D               	bcf	13,1	;volatile
 18380                           
 18381                           ;user.c: 276: LATBbits.LATB0 = 0;
 18382  1860  100D               	bcf	13,0	;volatile
 18383                           
 18384                           ;user.c: 279: set_leds_top(top_push_state, 1);
 18385  1861  0020               	movlb	0	; select bank0
 18386  1862  084D               	movf	_top_push_state+1,w
 18387  1863  0021               	movlb	1	; select bank1
 18388  1864  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18389  1865  0020               	movlb	0	; select bank0
 18390  1866  084C               	movf	_top_push_state,w
 18391  1867  0021               	movlb	1	; select bank1
 18392  1868  00A0               	movwf	set_leds_top@x^(0+128)
 18393  1869  3001               	movlw	1
 18394  186A  00A2               	movwf	set_leds_top@ledState^(0+128)
 18395  186B  3000               	movlw	0
 18396  186C  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18397  186D  31A4  24FD  3198   	fcall	_set_leds_top
 18398                           
 18399                           ;user.c: 280: set_leds_bottom(bottom_push_state);
 18400  1870  0020               	movlb	0	; select bank0
 18401  1871  0849               	movf	_bottom_push_state+1,w
 18402  1872  0021               	movlb	1	; select bank1
 18403  1873  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18404  1874  0020               	movlb	0	; select bank0
 18405  1875  0848               	movf	_bottom_push_state,w
 18406  1876  0021               	movlb	1	; select bank1
 18407  1877  00A0               	movwf	set_leds_bottom@x^(0+128)
 18408  1878  31A0  2063         	fcall	_set_leds_bottom
 18409  187A  0008               	return
 18410  187B                     __end_of_ReadSavedSettings:	
 18411                           
 18412                           	psect	text64
 18413  24FD                     __ptext64:	
 18414 ;; *************** function _set_leds_top *****************
 18415 ;; Defined at:
 18416 ;;		line 16 in file "LEDs.c"
 18417 ;; Parameters:    Size  Location     Type
 18418 ;;  x               2    0[BANK1 ] int 
 18419 ;;  ledState        2    2[BANK1 ] int 
 18420 ;; Auto vars:     Size  Location     Type
 18421 ;;		None
 18422 ;; Return value:  Size  Location     Type
 18423 ;;                  1    wreg      void 
 18424 ;; Registers used:
 18425 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18426 ;; Tracked objects:
 18427 ;;		On entry : 0/0
 18428 ;;		On exit  : 0/0
 18429 ;;		Unchanged: 0/0
 18430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18431 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18434 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18435 ;;Total ram usage:        4 bytes
 18436 ;; Hardware stack levels used:    1
 18437 ;; Hardware stack levels required when called:    3
 18438 ;; This function calls:
 18439 ;;		Nothing
 18440 ;; This function is called by:
 18441 ;;		_ReadSavedSettings
 18442 ;;		_ring_tactiles
 18443 ;;		_solidring_tactiles
 18444 ;;		_read_top_tactile
 18445 ;;		_setPresetDisplay
 18446 ;;		_resetRingLEDs
 18447 ;;		_setExpressionDisplay
 18448 ;;		_star_tactiles
 18449 ;; This function uses a non-reentrant model
 18450 ;;
 18451                           
 18452                           
 18453                           ;psect for function _set_leds_top
 18454  24FD                     _set_leds_top:	
 18455                           
 18456                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18457                           
 18458                           ;incstack = 0
 18459                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18460  24FD  0027               	movlb	7	; select bank7
 18461  24FE  100C               	bcf	12,0	;volatile
 18462                           
 18463                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18464  24FF  108C               	bcf	12,1	;volatile
 18465                           
 18466                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18467  2500  110C               	bcf	12,2	;volatile
 18468                           
 18469                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18470  2501  118C               	bcf	12,3	;volatile
 18471                           
 18472                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18473  2502  120C               	bcf	12,4	;volatile
 18474                           
 18475                           ;LEDs.c: 22: switch (x) {
 18476  2503  2D33               	goto	l7828
 18477  2504                     l7816:	
 18478                           ;LEDs.c: 23: case 1:
 18479                           
 18480                           
 18481                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18482  2504  0021               	movlb	1	; select bank1
 18483  2505  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18484  2506  0027               	movlb	7	; select bank7
 18485  2507  1C03               	skipc
 18486  2508  100C               	bcf	12,0	;volatile
 18487  2509  1803               	skipnc
 18488  250A  140C               	bsf	12,0	;volatile
 18489                           
 18490                           ;LEDs.c: 25: break;
 18491  250B  0008               	return
 18492  250C                     l7818:	
 18493                           ;LEDs.c: 26: case 2:
 18494                           
 18495                           
 18496                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18497  250C  0021               	movlb	1	; select bank1
 18498  250D  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18499  250E  0027               	movlb	7	; select bank7
 18500  250F  1C03               	skipc
 18501  2510  108C               	bcf	12,1	;volatile
 18502  2511  1803               	skipnc
 18503  2512  148C               	bsf	12,1	;volatile
 18504                           
 18505                           ;LEDs.c: 28: break;
 18506  2513  0008               	return
 18507  2514                     l7820:	
 18508                           ;LEDs.c: 29: case 3:
 18509                           
 18510                           
 18511                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18512  2514  0021               	movlb	1	; select bank1
 18513  2515  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18514  2516  0027               	movlb	7	; select bank7
 18515  2517  1C03               	skipc
 18516  2518  110C               	bcf	12,2	;volatile
 18517  2519  1803               	skipnc
 18518  251A  150C               	bsf	12,2	;volatile
 18519                           
 18520                           ;LEDs.c: 31: break;
 18521  251B  0008               	return
 18522  251C                     l7822:	
 18523                           ;LEDs.c: 32: case 4:
 18524                           
 18525                           
 18526                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18527  251C  0021               	movlb	1	; select bank1
 18528  251D  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18529  251E  0027               	movlb	7	; select bank7
 18530  251F  1C03               	skipc
 18531  2520  118C               	bcf	12,3	;volatile
 18532  2521  1803               	skipnc
 18533  2522  158C               	bsf	12,3	;volatile
 18534                           
 18535                           ;LEDs.c: 34: break;
 18536  2523  0008               	return
 18537  2524                     l7824:	
 18538                           ;LEDs.c: 35: case 5:
 18539                           
 18540                           
 18541                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18542  2524  0021               	movlb	1	; select bank1
 18543  2525  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18544  2526  0027               	movlb	7	; select bank7
 18545  2527  1C03               	skipc
 18546  2528  120C               	bcf	12,4	;volatile
 18547  2529  1803               	skipnc
 18548  252A  160C               	bsf	12,4	;volatile
 18549                           
 18550                           ;LEDs.c: 39: break;
 18551                           
 18552                           ;LEDs.c: 38: case 6:
 18553                           
 18554                           ;LEDs.c: 37: break;
 18555  252B  0008               	return
 18556  252C                     l818:	
 18557                           ;LEDs.c: 40: case 100:
 18558                           
 18559                           
 18560                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18561  252C  0027               	movlb	7	; select bank7
 18562  252D  140C               	bsf	12,0	;volatile
 18563                           
 18564                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18565  252E  148C               	bsf	12,1	;volatile
 18566                           
 18567                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18568  252F  150C               	bsf	12,2	;volatile
 18569                           
 18570                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18571  2530  158C               	bsf	12,3	;volatile
 18572                           
 18573                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18574  2531  160C               	bsf	12,4	;volatile
 18575                           
 18576                           ;LEDs.c: 47: }
 18577                           
 18578                           ;LEDs.c: 46: break;
 18579  2532  0008               	return
 18580  2533                     l7828:	
 18581                           
 18582                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18583                           ; Switch size 1, requested type "space"
 18584                           ; Number of cases is 1, Range of values is 0 to 0
 18585                           ; switch strategies available:
 18586                           ; Name         Instructions Cycles
 18587                           ; simple_byte            4     3 (average)
 18588                           ; direct_byte            8     6 (fixed)
 18589                           ; jumptable            260     6 (fixed)
 18590                           ;	Chosen strategy is simple_byte
 18591  2533  0021               	movlb	1	; select bank1
 18592  2534  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18593  2535  3A00               	xorlw	0	; case 0
 18594  2536  1903               	skipnz
 18595  2537  2D39               	goto	l9962
 18596  2538  2D50               	goto	l819
 18597  2539                     l9962:	
 18598                           
 18599                           ; Switch size 1, requested type "space"
 18600                           ; Number of cases is 7, Range of values is 1 to 100
 18601                           ; switch strategies available:
 18602                           ; Name         Instructions Cycles
 18603                           ; simple_byte           22    12 (average)
 18604                           ; direct_byte          209     9 (fixed)
 18605                           ; jumptable            263     9 (fixed)
 18606                           ;	Chosen strategy is simple_byte
 18607  2539  0820               	movf	set_leds_top@x^(0+128),w
 18608  253A  3A01               	xorlw	1	; case 1
 18609  253B  1903               	skipnz
 18610  253C  2D04               	goto	l7816
 18611  253D  3A03               	xorlw	3	; case 2
 18612  253E  1903               	skipnz
 18613  253F  2D0C               	goto	l7818
 18614  2540  3A01               	xorlw	1	; case 3
 18615  2541  1903               	skipnz
 18616  2542  2D14               	goto	l7820
 18617  2543  3A07               	xorlw	7	; case 4
 18618  2544  1903               	skipnz
 18619  2545  2D1C               	goto	l7822
 18620  2546  3A01               	xorlw	1	; case 5
 18621  2547  1903               	skipnz
 18622  2548  2D24               	goto	l7824
 18623  2549  3A03               	xorlw	3	; case 6
 18624  254A  1903               	skipnz
 18625  254B  2D50               	goto	l819
 18626  254C  3A62               	xorlw	98	; case 100
 18627  254D  1903               	skipnz
 18628  254E  2D2C               	goto	l818
 18629  254F  2D50               	goto	l819
 18630  2550                     l819:	
 18631  2550  0008               	return
 18632  2551                     __end_of_set_leds_top:	
 18633                           
 18634                           	psect	text65
 18635  2063                     __ptext65:	
 18636 ;; *************** function _set_leds_bottom *****************
 18637 ;; Defined at:
 18638 ;;		line 51 in file "LEDs.c"
 18639 ;; Parameters:    Size  Location     Type
 18640 ;;  x               2    0[BANK1 ] int 
 18641 ;; Auto vars:     Size  Location     Type
 18642 ;;		None
 18643 ;; Return value:  Size  Location     Type
 18644 ;;                  1    wreg      void 
 18645 ;; Registers used:
 18646 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18647 ;; Tracked objects:
 18648 ;;		On entry : 0/0
 18649 ;;		On exit  : 0/0
 18650 ;;		Unchanged: 0/0
 18651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18652 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18655 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18656 ;;Total ram usage:        2 bytes
 18657 ;; Hardware stack levels used:    1
 18658 ;; Hardware stack levels required when called:    3
 18659 ;; This function calls:
 18660 ;;		Nothing
 18661 ;; This function is called by:
 18662 ;;		_ReadSavedSettings
 18663 ;;		_ring_tactiles
 18664 ;;		_solidring_tactiles
 18665 ;;		_read_bottom_tactile
 18666 ;;		_setPresetDisplay
 18667 ;;		_resetRingLEDs
 18668 ;;		_setExpressionDisplay
 18669 ;;		_star_tactiles
 18670 ;; This function uses a non-reentrant model
 18671 ;;
 18672                           
 18673                           
 18674                           ;psect for function _set_leds_bottom
 18675  2063                     _set_leds_bottom:	
 18676                           
 18677                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18678                           
 18679                           ;incstack = 0
 18680                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18681  2063  0022               	movlb	2	; select bank2
 18682  2064  100F               	bcf	15,0	;volatile
 18683                           
 18684                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18685  2065  108F               	bcf	15,1	;volatile
 18686                           
 18687                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18688  2066  110F               	bcf	15,2	;volatile
 18689                           
 18690                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18691  2067  118F               	bcf	15,3	;volatile
 18692                           
 18693                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18694  2068  120F               	bcf	15,4	;volatile
 18695                           
 18696                           ;LEDs.c: 57: switch (x) {
 18697  2069  2880               	goto	l7844
 18698  206A                     l823:	
 18699                           ;LEDs.c: 58: case 1:
 18700                           
 18701                           
 18702                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18703  206A  0022               	movlb	2	; select bank2
 18704  206B  140F               	bsf	15,0	;volatile
 18705                           
 18706                           ;LEDs.c: 60: break;
 18707  206C  0008               	return
 18708  206D                     l825:	
 18709                           ;LEDs.c: 61: case 2:
 18710                           
 18711                           
 18712                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18713  206D  0022               	movlb	2	; select bank2
 18714  206E  148F               	bsf	15,1	;volatile
 18715                           
 18716                           ;LEDs.c: 63: break;
 18717  206F  0008               	return
 18718  2070                     l826:	
 18719                           ;LEDs.c: 64: case 3:
 18720                           
 18721                           
 18722                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18723  2070  0022               	movlb	2	; select bank2
 18724  2071  150F               	bsf	15,2	;volatile
 18725                           
 18726                           ;LEDs.c: 66: break;
 18727  2072  0008               	return
 18728  2073                     l827:	
 18729                           ;LEDs.c: 67: case 4:
 18730                           
 18731                           
 18732                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18733  2073  0022               	movlb	2	; select bank2
 18734  2074  158F               	bsf	15,3	;volatile
 18735                           
 18736                           ;LEDs.c: 69: break;
 18737  2075  0008               	return
 18738  2076                     l828:	
 18739                           ;LEDs.c: 70: case 5:
 18740                           
 18741                           
 18742                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18743  2076  0022               	movlb	2	; select bank2
 18744  2077  160F               	bsf	15,4	;volatile
 18745                           
 18746                           ;LEDs.c: 74: break;
 18747                           
 18748                           ;LEDs.c: 73: case 6:
 18749                           
 18750                           ;LEDs.c: 72: break;
 18751  2078  0008               	return
 18752  2079                     l830:	
 18753                           ;LEDs.c: 75: case 100:
 18754                           
 18755                           
 18756                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18757  2079  0022               	movlb	2	; select bank2
 18758  207A  140F               	bsf	15,0	;volatile
 18759                           
 18760                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18761  207B  148F               	bsf	15,1	;volatile
 18762                           
 18763                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18764  207C  150F               	bsf	15,2	;volatile
 18765                           
 18766                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18767  207D  158F               	bsf	15,3	;volatile
 18768                           
 18769                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18770  207E  160F               	bsf	15,4	;volatile
 18771                           
 18772                           ;LEDs.c: 82: }
 18773                           
 18774                           ;LEDs.c: 81: break;
 18775  207F  0008               	return
 18776  2080                     l7844:	
 18777                           
 18778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18779                           ; Switch size 1, requested type "space"
 18780                           ; Number of cases is 1, Range of values is 0 to 0
 18781                           ; switch strategies available:
 18782                           ; Name         Instructions Cycles
 18783                           ; simple_byte            4     3 (average)
 18784                           ; direct_byte            8     6 (fixed)
 18785                           ; jumptable            260     6 (fixed)
 18786                           ;	Chosen strategy is simple_byte
 18787  2080  0021               	movlb	1	; select bank1
 18788  2081  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18789  2082  3A00               	xorlw	0	; case 0
 18790  2083  1903               	skipnz
 18791  2084  2886               	goto	l9964
 18792  2085  289D               	goto	l831
 18793  2086                     l9964:	
 18794                           
 18795                           ; Switch size 1, requested type "space"
 18796                           ; Number of cases is 7, Range of values is 1 to 100
 18797                           ; switch strategies available:
 18798                           ; Name         Instructions Cycles
 18799                           ; simple_byte           22    12 (average)
 18800                           ; direct_byte          209     9 (fixed)
 18801                           ; jumptable            263     9 (fixed)
 18802                           ;	Chosen strategy is simple_byte
 18803  2086  0820               	movf	set_leds_bottom@x^(0+128),w
 18804  2087  3A01               	xorlw	1	; case 1
 18805  2088  1903               	skipnz
 18806  2089  286A               	goto	l823
 18807  208A  3A03               	xorlw	3	; case 2
 18808  208B  1903               	skipnz
 18809  208C  286D               	goto	l825
 18810  208D  3A01               	xorlw	1	; case 3
 18811  208E  1903               	skipnz
 18812  208F  2870               	goto	l826
 18813  2090  3A07               	xorlw	7	; case 4
 18814  2091  1903               	skipnz
 18815  2092  2873               	goto	l827
 18816  2093  3A01               	xorlw	1	; case 5
 18817  2094  1903               	skipnz
 18818  2095  2876               	goto	l828
 18819  2096  3A03               	xorlw	3	; case 6
 18820  2097  1903               	skipnz
 18821  2098  289D               	goto	l831
 18822  2099  3A62               	xorlw	98	; case 100
 18823  209A  1903               	skipnz
 18824  209B  2879               	goto	l830
 18825  209C  289D               	goto	l831
 18826  209D                     l831:	
 18827  209D  0008               	return
 18828  209E                     __end_of_set_leds_bottom:	
 18829                           
 18830                           	psect	text66
 18831  0800                     __ptext66:	
 18832 ;; *************** function _FLASH_ReadWord *****************
 18833 ;; Defined at:
 18834 ;;		line 58 in file "memory.c"
 18835 ;; Parameters:    Size  Location     Type
 18836 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18837 ;; Auto vars:     Size  Location     Type
 18838 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18839 ;; Return value:  Size  Location     Type
 18840 ;;                  2    0[BANK1 ] unsigned int 
 18841 ;; Registers used:
 18842 ;;		wreg, status,2, status,0
 18843 ;; Tracked objects:
 18844 ;;		On entry : 0/0
 18845 ;;		On exit  : 0/0
 18846 ;;		Unchanged: 0/0
 18847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18848 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18849 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18851 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18852 ;;Total ram usage:        3 bytes
 18853 ;; Hardware stack levels used:    1
 18854 ;; Hardware stack levels required when called:    3
 18855 ;; This function calls:
 18856 ;;		Nothing
 18857 ;; This function is called by:
 18858 ;;		_ReadSavedSettings
 18859 ;;		_FLASH_WriteWord
 18860 ;; This function uses a non-reentrant model
 18861 ;;
 18862                           
 18863                           
 18864                           ;psect for function _FLASH_ReadWord
 18865  0800                     _FLASH_ReadWord:	
 18866                           
 18867                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18868                           
 18869                           ;incstack = 0
 18870                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18871  0800  3000               	movlw	0
 18872  0801  1B8B               	btfsc	11,7	;volatile
 18873  0802  3001               	movlw	1
 18874  0803  0021               	movlb	1	; select bank1
 18875  0804  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18876                           
 18877                           ;memory.c: 61: INTCONbits.GIE = 0;
 18878  0805  138B               	bcf	11,7	;volatile
 18879                           
 18880                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18881  0806  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18882  0807  0023               	movlb	3	; select bank3
 18883  0808  0091               	movwf	17	;volatile
 18884                           
 18885                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18886  0809  0021               	movlb	1	; select bank1
 18887  080A  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18888  080B  0023               	movlb	3	; select bank3
 18889  080C  0092               	movwf	18	;volatile
 18890                           
 18891                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18892  080D  1315               	bcf	21,6	;volatile
 18893                           
 18894                           ;memory.c: 66: PMCON1bits.RD = 1;
 18895  080E  1415               	bsf	21,0	;volatile
 18896                           
 18897                           ;memory.c: 67: __nop();
 18898  080F  0000               	nop
 18899                           
 18900                           ;memory.c: 68: __nop();
 18901  0810  0000               	nop
 18902                           
 18903                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18904  0811  0021               	movlb	1	; select bank1
 18905  0812  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18906  0813  1C03               	skipc
 18907  0814  138B               	bcf	11,7	;volatile
 18908  0815  1803               	skipnc
 18909  0816  178B               	bsf	11,7	;volatile
 18910                           
 18911                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18912  0817  0023               	movlb	3	; select bank3
 18913  0818  0814               	movf	20,w	;volatile
 18914  0819  0021               	movlb	1	; select bank1
 18915  081A  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18916  081B  0023               	movlb	3	; select bank3
 18917  081C  0813               	movf	19,w	;volatile
 18918  081D  0021               	movlb	1	; select bank1
 18919  081E  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18920  081F  0008               	return
 18921  0820                     __end_of_FLASH_ReadWord:	
 18922                           
 18923                           	psect	text67
 18924  07D8                     __ptext67:	
 18925 ;; *************** function _InitializeTaps *****************
 18926 ;; Defined at:
 18927 ;;		line 246 in file "user.c"
 18928 ;; Parameters:    Size  Location     Type
 18929 ;;		None
 18930 ;; Auto vars:     Size  Location     Type
 18931 ;;  itap            2    1[BANK1 ] int 
 18932 ;; Return value:  Size  Location     Type
 18933 ;;                  1    wreg      void 
 18934 ;; Registers used:
 18935 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18936 ;; Tracked objects:
 18937 ;;		On entry : 0/0
 18938 ;;		On exit  : 0/0
 18939 ;;		Unchanged: 0/0
 18940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18942 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18943 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18944 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18945 ;;Total ram usage:        3 bytes
 18946 ;; Hardware stack levels used:    1
 18947 ;; Hardware stack levels required when called:    3
 18948 ;; This function calls:
 18949 ;;		Nothing
 18950 ;; This function is called by:
 18951 ;;		_main
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           
 18956                           ;psect for function _InitializeTaps
 18957  07D8                     _InitializeTaps:	
 18958                           
 18959                           ;user.c: 247: for (int itap = 0; itap < 12; itap++) {
 18960                           
 18961                           ;incstack = 0
 18962                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18963  07D8  0021               	movlb	1	; select bank1
 18964  07D9  01A1               	clrf	InitializeTaps@itap^(0+128)
 18965  07DA  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18966  07DB                     L23:	
 18967  07DB  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18968  07DC  3A80               	xorlw	128
 18969  07DD  00A0               	movwf	??_InitializeTaps^(0+128)
 18970  07DE  3080               	movlw	128
 18971  07DF  0220               	subwf	??_InitializeTaps^(0+128),w
 18972  07E0  1D03               	skipz
 18973  07E1  2FE4               	goto	u9375
 18974  07E2  300C               	movlw	12
 18975  07E3  0221               	subwf	InitializeTaps@itap^(0+128),w
 18976  07E4                     u9375:	
 18977  07E4  1803               	btfsc	3,0
 18978  07E5  0008               	return
 18979                           
 18980                           ;user.c: 248: tap[itap] = 0;
 18981  07E6  0021               	movlb	1	; select bank1
 18982  07E7  0821               	movf	InitializeTaps@itap^(0+128),w
 18983  07E8  00A0               	movwf	??_InitializeTaps^(0+128)
 18984  07E9  3001               	movlw	1
 18985  07EA                     u9385:	
 18986  07EA  35A0               	lslf	??_InitializeTaps^(0+128),f
 18987  07EB  3EFF               	addlw	-1
 18988  07EC  1D03               	skipz
 18989  07ED  2FEA               	goto	u9385
 18990  07EE  3520               	lslf	??_InitializeTaps^(0+128),w
 18991  07EF  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18992  07F0  0086               	movwf	6
 18993  07F1  3002               	movlw	2	; select bank5/6
 18994  07F2  0087               	movwf	7
 18995  07F3  3000               	movlw	0
 18996  07F4  3FC0               	movwi [0]fsr1
 18997  07F5  3000               	movlw	0
 18998  07F6  3FC1               	movwi [1]fsr1
 18999  07F7  3FC2               	movwi [2]fsr1
 19000  07F8  3FC3               	movwi [3]fsr1
 19001  07F9  3001               	movlw	1
 19002  07FA  07A1               	addwf	InitializeTaps@itap^(0+128),f
 19003  07FB  3000               	movlw	0
 19004  07FC  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 19005  07FD  2FDB               	goto	L23
 19006  07FE                     __end_of_InitializeTaps:	
 19007                           
 19008                           	psect	text68
 19009  2F02                     __ptext68:	
 19010 ;; *************** function _InitApp *****************
 19011 ;; Defined at:
 19012 ;;		line 23 in file "user.c"
 19013 ;; Parameters:    Size  Location     Type
 19014 ;;		None
 19015 ;; Auto vars:     Size  Location     Type
 19016 ;;		None
 19017 ;; Return value:  Size  Location     Type
 19018 ;;                  1    wreg      void 
 19019 ;; Registers used:
 19020 ;;		wreg, status,2, status,0, pclath, cstack
 19021 ;; Tracked objects:
 19022 ;;		On entry : 0/0
 19023 ;;		On exit  : 0/0
 19024 ;;		Unchanged: 0/0
 19025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19030 ;;Total ram usage:        0 bytes
 19031 ;; Hardware stack levels used:    1
 19032 ;; Hardware stack levels required when called:    5
 19033 ;; This function calls:
 19034 ;;		_init_adc
 19035 ;;		_init_pwm
 19036 ;; This function is called by:
 19037 ;;		_main
 19038 ;; This function uses a non-reentrant model
 19039 ;;
 19040                           
 19041                           
 19042                           ;psect for function _InitApp
 19043  2F02                     _InitApp:	
 19044                           
 19045                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 19046                           
 19047                           ;incstack = 0
 19048                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 19049  2F02  0021               	movlb	1	; select bank1
 19050  2F03  100D               	bcf	13,0	;volatile
 19051                           
 19052                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 19053  2F04  108D               	bcf	13,1	;volatile
 19054                           
 19055                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 19056  2F05  110D               	bcf	13,2	;volatile
 19057                           
 19058                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 19059  2F06  118D               	bcf	13,3	;volatile
 19060                           
 19061                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 19062  2F07  120D               	bcf	13,4	;volatile
 19063                           
 19064                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 19065  2F08  128D               	bcf	13,5	;volatile
 19066                           
 19067                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 19068  2F09  140E               	bsf	14,0	;volatile
 19069                           
 19070                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 19071  2F0A  120E               	bcf	14,4	;volatile
 19072                           
 19073                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 19074  2F0B  128E               	bcf	14,5	;volatile
 19075                           
 19076                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 19077  2F0C  100F               	bcf	15,0	;volatile
 19078                           
 19079                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 19080  2F0D  108F               	bcf	15,1	;volatile
 19081                           
 19082                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 19083  2F0E  110F               	bcf	15,2	;volatile
 19084                           
 19085                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 19086  2F0F  118F               	bcf	15,3	;volatile
 19087                           
 19088                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 19089  2F10  120F               	bcf	15,4	;volatile
 19090                           
 19091                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 19092  2F11  168F               	bsf	15,5	;volatile
 19093                           
 19094                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 19095  2F12  170F               	bsf	15,6	;volatile
 19096                           
 19097                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 19098  2F13  178F               	bsf	15,7	;volatile
 19099                           
 19100                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 19101  2F14  1410               	bsf	16,0	;volatile
 19102                           
 19103                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 19104  2F15  1490               	bsf	16,1	;volatile
 19105                           
 19106                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 19107  2F16  0023               	movlb	3	; select bank3
 19108  2F17  1010               	bcf	16,0	;volatile
 19109                           
 19110                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 19111  2F18  1090               	bcf	16,1	;volatile
 19112                           
 19113                           ;user.c: 53: PORTEbits.RE0 = 0;
 19114  2F19  0020               	movlb	0	; select bank0
 19115  2F1A  1010               	bcf	16,0	;volatile
 19116                           
 19117                           ;user.c: 54: PORTEbits.RE1 = 0;
 19118  2F1B  1090               	bcf	16,1	;volatile
 19119                           
 19120                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 19121  2F1C  0026               	movlb	6	; select bank6
 19122  2F1D  100C               	bcf	12,0	;volatile
 19123                           
 19124                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 19125  2F1E  108C               	bcf	12,1	;volatile
 19126                           
 19127                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 19128  2F1F  110C               	bcf	12,2	;volatile
 19129                           
 19130                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 19131  2F20  118C               	bcf	12,3	;volatile
 19132                           
 19133                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 19134  2F21  120C               	bcf	12,4	;volatile
 19135                           
 19136                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 19137  2F22  128C               	bcf	12,5	;volatile
 19138                           
 19139                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 19140  2F23  170C               	bsf	12,6	;volatile
 19141                           
 19142                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 19143  2F24  0028               	movlb	8	; select bank8
 19144  2F25  130C               	bcf	12,6	;volatile
 19145                           
 19146                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 19147  2F26  0026               	movlb	6	; select bank6
 19148  2F27  108D               	bcf	13,1	;volatile
 19149                           
 19150                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 19151  2F28  110D               	bcf	13,2	;volatile
 19152                           
 19153                           ;user.c: 68: init_adc();
 19154  2F29  31AC  24E8  31AF   	fcall	_init_adc
 19155                           
 19156                           ;user.c: 69: init_pwm();
 19157  2F2C  31A2  2252         	fcall	_init_pwm
 19158                           
 19159                           ;user.c: 71: INTCONbits.GIE = 0b1;
 19160  2F2E  178B               	bsf	11,7	;volatile
 19161                           
 19162                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 19163  2F2F  168B               	bsf	11,5	;volatile
 19164                           
 19165                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 19166  2F30  110B               	bcf	11,2	;volatile
 19167  2F31  0008               	return
 19168  2F32                     __end_of_InitApp:	
 19169                           
 19170                           	psect	text69
 19171  2252                     __ptext69:	
 19172 ;; *************** function _init_pwm *****************
 19173 ;; Defined at:
 19174 ;;		line 129 in file "user.c"
 19175 ;; Parameters:    Size  Location     Type
 19176 ;;		None
 19177 ;; Auto vars:     Size  Location     Type
 19178 ;;		None
 19179 ;; Return value:  Size  Location     Type
 19180 ;;                  1    wreg      void 
 19181 ;; Registers used:
 19182 ;;		wreg, status,2, status,0, pclath, cstack
 19183 ;; Tracked objects:
 19184 ;;		On entry : 0/0
 19185 ;;		On exit  : 0/0
 19186 ;;		Unchanged: 0/0
 19187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19192 ;;Total ram usage:        0 bytes
 19193 ;; Hardware stack levels used:    1
 19194 ;; Hardware stack levels required when called:    4
 19195 ;; This function calls:
 19196 ;;		_init_timer0
 19197 ;;		_init_timer2
 19198 ;; This function is called by:
 19199 ;;		_InitApp
 19200 ;; This function uses a non-reentrant model
 19201 ;;
 19202                           
 19203                           
 19204                           ;psect for function _init_pwm
 19205  2252                     _init_pwm:	
 19206                           
 19207                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19208                           
 19209                           ;incstack = 0
 19210                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19211  2252  0022               	movlb	2	; select bank2
 19212  2253  101D               	bcf	29,0	;volatile
 19213                           
 19214                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19215  2254  0021               	movlb	1	; select bank1
 19216  2255  110E               	bcf	14,2	;volatile
 19217                           
 19218                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19219  2256  108E               	bcf	14,1	;volatile
 19220                           
 19221                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19222  2257  0026               	movlb	6	; select bank6
 19223  2258  100D               	bcf	13,0	;volatile
 19224                           
 19225                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19226  2259  118D               	bcf	13,3	;volatile
 19227                           
 19228                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19229  225A  120D               	bcf	13,4	;volatile
 19230                           
 19231                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19232  225B  0021               	movlb	1	; select bank1
 19233  225C  1310               	bcf	16,6	;volatile
 19234                           
 19235                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19236  225D  1290               	bcf	16,5	;volatile
 19237                           
 19238                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19239  225E  1210               	bcf	16,4	;volatile
 19240                           
 19241                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19242  225F  1190               	bcf	16,3	;volatile
 19243                           
 19244                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19245  2260  1110               	bcf	16,2	;volatile
 19246                           
 19247                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19248  2261  300F               	movlw	15
 19249  2262  0025               	movlb	5	; select bank5
 19250  2263  0493               	iorwf	19,f	;volatile
 19251                           
 19252                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19253  2264  300F               	movlw	15
 19254  2265  049A               	iorwf	26,f	;volatile
 19255                           
 19256                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19257  2266  300F               	movlw	15
 19258  2267  0026               	movlb	6	; select bank6
 19259  2268  0493               	iorwf	19,f	;volatile
 19260                           
 19261                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19262  2269  300F               	movlw	15
 19263  226A  049A               	iorwf	26,f	;volatile
 19264                           
 19265                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19266  226B  300F               	movlw	15
 19267  226C  049E               	iorwf	30,f	;volatile
 19268                           
 19269                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19270  226D  300F               	movlw	15
 19271  226E  002C               	movlb	12	; select bank12
 19272  226F  0493               	iorwf	19,f	;volatile
 19273                           
 19274                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19275  2270  300F               	movlw	15
 19276  2271  0496               	iorwf	22,f	;volatile
 19277                           
 19278                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19279  2272  300F               	movlw	15
 19280  2273  0499               	iorwf	25,f	;volatile
 19281                           
 19282                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19283  2274  300F               	movlw	15
 19284  2275  049C               	iorwf	28,f	;volatile
 19285                           
 19286                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19287  2276  300F               	movlw	15
 19288  2277  049F               	iorwf	31,f	;volatile
 19289                           
 19290                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19291  2278  0025               	movlb	5	; select bank5
 19292  2279  019D               	clrf	29	;volatile
 19293                           
 19294                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19295  227A  019E               	clrf	30	;volatile
 19296                           
 19297                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19298  227B  019F               	clrf	31	;volatile
 19299                           
 19300                           ;user.c: 154: CCPR1 = 50;
 19301  227C  3000               	movlw	0
 19302  227D  0092               	movwf	18	;volatile
 19303  227E  3032               	movlw	50
 19304  227F  0091               	movwf	17	;volatile
 19305                           
 19306                           ;user.c: 155: CCPR2 = 100;
 19307  2280  3000               	movlw	0
 19308  2281  0099               	movwf	25	;volatile
 19309  2282  3064               	movlw	100
 19310  2283  0098               	movwf	24	;volatile
 19311                           
 19312                           ;user.c: 156: CCPR3 = 150;
 19313  2284  3000               	movlw	0
 19314  2285  0026               	movlb	6	; select bank6
 19315  2286  0092               	movwf	18	;volatile
 19316  2287  3096               	movlw	150
 19317  2288  0091               	movwf	17	;volatile
 19318                           
 19319                           ;user.c: 157: CCPR4 = 200;
 19320  2289  3000               	movlw	0
 19321  228A  0099               	movwf	25	;volatile
 19322  228B  30C8               	movlw	200
 19323  228C  0098               	movwf	24	;volatile
 19324                           
 19325                           ;user.c: 158: init_timer2();
 19326  228D  31AC  24D6  31A2   	fcall	_init_timer2
 19327                           
 19328                           ;user.c: 159: init_timer0();
 19329  2290  31AC  24CF         	fcall	_init_timer0
 19330  2292  0008               	return
 19331  2293                     __end_of_init_pwm:	
 19332                           
 19333                           	psect	text70
 19334  2CD6                     __ptext70:	
 19335 ;; *************** function _init_timer2 *****************
 19336 ;; Defined at:
 19337 ;;		line 162 in file "user.c"
 19338 ;; Parameters:    Size  Location     Type
 19339 ;;		None
 19340 ;; Auto vars:     Size  Location     Type
 19341 ;;		None
 19342 ;; Return value:  Size  Location     Type
 19343 ;;                  1    wreg      void 
 19344 ;; Registers used:
 19345 ;;		wreg, status,2, status,0
 19346 ;; Tracked objects:
 19347 ;;		On entry : 0/0
 19348 ;;		On exit  : 0/0
 19349 ;;		Unchanged: 0/0
 19350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19355 ;;Total ram usage:        0 bytes
 19356 ;; Hardware stack levels used:    1
 19357 ;; Hardware stack levels required when called:    3
 19358 ;; This function calls:
 19359 ;;		Nothing
 19360 ;; This function is called by:
 19361 ;;		_init_pwm
 19362 ;; This function uses a non-reentrant model
 19363 ;;
 19364                           
 19365                           
 19366                           ;psect for function _init_timer2
 19367  2CD6                     _init_timer2:	
 19368                           
 19369                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19370                           
 19371                           ;incstack = 0
 19372                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19373  2CD6  3087               	movlw	-121
 19374  2CD7  0020               	movlb	0	; select bank0
 19375  2CD8  059C               	andwf	28,f	;volatile
 19376                           
 19377                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19378  2CD9  30FC               	movlw	-4
 19379  2CDA  059C               	andwf	28,f	;volatile
 19380                           
 19381                           ;user.c: 165: PR2 = 0xFF;
 19382  2CDB  30FF               	movlw	255
 19383  2CDC  009B               	movwf	27	;volatile
 19384                           
 19385                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19386  2CDD  151C               	bsf	28,2	;volatile
 19387  2CDE  0008               	return
 19388  2CDF                     __end_of_init_timer2:	
 19389                           
 19390                           	psect	text71
 19391  2CCF                     __ptext71:	
 19392 ;; *************** function _init_timer0 *****************
 19393 ;; Defined at:
 19394 ;;		line 169 in file "user.c"
 19395 ;; Parameters:    Size  Location     Type
 19396 ;;		None
 19397 ;; Auto vars:     Size  Location     Type
 19398 ;;		None
 19399 ;; Return value:  Size  Location     Type
 19400 ;;                  1    wreg      void 
 19401 ;; Registers used:
 19402 ;;		None
 19403 ;; Tracked objects:
 19404 ;;		On entry : 0/0
 19405 ;;		On exit  : 0/0
 19406 ;;		Unchanged: 0/0
 19407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19412 ;;Total ram usage:        0 bytes
 19413 ;; Hardware stack levels used:    1
 19414 ;; Hardware stack levels required when called:    3
 19415 ;; This function calls:
 19416 ;;		Nothing
 19417 ;; This function is called by:
 19418 ;;		_init_pwm
 19419 ;; This function uses a non-reentrant model
 19420 ;;
 19421                           
 19422                           
 19423                           ;psect for function _init_timer0
 19424  2CCF                     _init_timer0:	
 19425                           
 19426                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19427                           
 19428                           ;incstack = 0
 19429                           ; Regs used in _init_timer0: []
 19430  2CCF  0021               	movlb	1	; select bank1
 19431  2CD0  1295               	bcf	21,5	;volatile
 19432                           
 19433                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19434  2CD1  1195               	bcf	21,3	;volatile
 19435                           
 19436                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19437  2CD2  1015               	bcf	21,0	;volatile
 19438                           
 19439                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19440  2CD3  1495               	bsf	21,1	;volatile
 19441                           
 19442                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19443  2CD4  1115               	bcf	21,2	;volatile
 19444  2CD5  0008               	return
 19445  2CD6                     __end_of_init_timer0:	
 19446                           
 19447                           	psect	text72
 19448  2CE8                     __ptext72:	
 19449 ;; *************** function _init_adc *****************
 19450 ;; Defined at:
 19451 ;;		line 115 in file "user.c"
 19452 ;; Parameters:    Size  Location     Type
 19453 ;;		None
 19454 ;; Auto vars:     Size  Location     Type
 19455 ;;		None
 19456 ;; Return value:  Size  Location     Type
 19457 ;;                  1    wreg      void 
 19458 ;; Registers used:
 19459 ;;		wreg, status,2, status,0
 19460 ;; Tracked objects:
 19461 ;;		On entry : 0/0
 19462 ;;		On exit  : 0/0
 19463 ;;		Unchanged: 0/0
 19464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19469 ;;Total ram usage:        0 bytes
 19470 ;; Hardware stack levels used:    1
 19471 ;; Hardware stack levels required when called:    3
 19472 ;; This function calls:
 19473 ;;		Nothing
 19474 ;; This function is called by:
 19475 ;;		_InitApp
 19476 ;; This function uses a non-reentrant model
 19477 ;;
 19478                           
 19479                           
 19480                           ;psect for function _init_adc
 19481  2CE8                     _init_adc:	
 19482                           
 19483                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19484                           
 19485                           ;incstack = 0
 19486                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19487  2CE8  0021               	movlb	1	; select bank1
 19488  2CE9  179E               	bsf	30,7	;volatile
 19489                           
 19490                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19491  2CEA  081E               	movf	30,w	;volatile
 19492  2CEB  398F               	andlw	-113
 19493  2CEC  3860               	iorlw	96
 19494  2CED  009E               	movwf	30	;volatile
 19495                           
 19496                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19497  2CEE  30FC               	movlw	-4
 19498  2CEF  059E               	andwf	30,f	;volatile
 19499                           
 19500                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19501  2CF0  141D               	bsf	29,0	;volatile
 19502  2CF1  0008               	return
 19503  2CF2                     __end_of_init_adc:	
 19504                           
 19505                           	psect	text73
 19506  2CCB                     __ptext73:	
 19507 ;; *************** function _ConfigureOscillator *****************
 19508 ;; Defined at:
 19509 ;;		line 18 in file "system.c"
 19510 ;; Parameters:    Size  Location     Type
 19511 ;;		None
 19512 ;; Auto vars:     Size  Location     Type
 19513 ;;		None
 19514 ;; Return value:  Size  Location     Type
 19515 ;;                  1    wreg      void 
 19516 ;; Registers used:
 19517 ;;		wreg, status,2, status,0
 19518 ;; Tracked objects:
 19519 ;;		On entry : 0/0
 19520 ;;		On exit  : 0/0
 19521 ;;		Unchanged: 0/0
 19522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19527 ;;Total ram usage:        0 bytes
 19528 ;; Hardware stack levels used:    1
 19529 ;; Hardware stack levels required when called:    3
 19530 ;; This function calls:
 19531 ;;		Nothing
 19532 ;; This function is called by:
 19533 ;;		_main
 19534 ;; This function uses a non-reentrant model
 19535 ;;
 19536                           
 19537                           
 19538                           ;psect for function _ConfigureOscillator
 19539  2CCB                     _ConfigureOscillator:	
 19540                           
 19541                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19542                           
 19543                           ;incstack = 0
 19544                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19545  2CCB  30FC               	movlw	-4
 19546  2CCC  0021               	movlb	1	; select bank1
 19547  2CCD  0599               	andwf	25,f	;volatile
 19548  2CCE  0008               	return
 19549  2CCF                     __end_of_ConfigureOscillator:	
 19550                           
 19551                           	psect	intentry
 19552  0004                     __pintentry:	
 19553 ;; *************** function _isr *****************
 19554 ;; Defined at:
 19555 ;;		line 28 in file "interrupts.c"
 19556 ;; Parameters:    Size  Location     Type
 19557 ;;		None
 19558 ;; Auto vars:     Size  Location     Type
 19559 ;;  subDiv          1   13[COMMON] unsigned char 
 19560 ;; Return value:  Size  Location     Type
 19561 ;;                  1    wreg      void 
 19562 ;; Registers used:
 19563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19564 ;; Tracked objects:
 19565 ;;		On entry : 0/0
 19566 ;;		On exit  : 0/0
 19567 ;;		Unchanged: 0/0
 19568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19570 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19571 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19572 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19573 ;;Total ram usage:        7 bytes
 19574 ;; Hardware stack levels used:    1
 19575 ;; Hardware stack levels required when called:    2
 19576 ;; This function calls:
 19577 ;;		_modulation
 19578 ;;		i1___awdiv
 19579 ;;		i1_getModulationSubdivision
 19580 ;;		i1_set_leds_top
 19581 ;; This function is called by:
 19582 ;;		Interrupt level 1
 19583 ;; This function uses a non-reentrant model
 19584 ;;
 19585                           
 19586  0004                     _isr:	
 19587                           
 19588                           ;incstack = 0
 19589                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19590  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19591  0005  3180               	pagesel	$
 19592  0006  0020               	movlb	0	; select bank0
 19593  0007  087F               	movf	127,w
 19594  0008  00BF               	movwf	??_isr+5
 19595                           
 19596                           ;interrupts.c: 31: extern char isInitialized;
 19597                           ;interrupts.c: 32: extern volatile long timer;
 19598                           ;interrupts.c: 33: extern volatile long sub_timer;
 19599                           ;interrupts.c: 34: extern volatile long tap_timer;
 19600                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19601                           ;interrupts.c: 36: extern int mod_delay_time;
 19602                           ;interrupts.c: 40: extern int top_push_state;
 19603                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19604                           ;interrupts.c: 42: extern volatile long mod_timer;
 19605                           ;interrupts.c: 43: extern volatile long delay_time;
 19606                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 19607  0009  1D0B               	btfss	11,2	;volatile
 19608  000A  2AEE               	goto	i1l137
 19609                           
 19610                           ;interrupts.c: 47: if (isInitialized == 0) {
 19611  000B  0023               	movlb	3	; select bank3
 19612  000C  0841               	movf	_isInitialized^(0+384),w
 19613  000D  1903               	btfsc	3,2
 19614  000E  2AED               	goto	i1l7068
 19615                           
 19616                           ;interrupts.c: 52: }
 19617                           ;interrupts.c: 63: if (timer == 0) {
 19618                           
 19619                           ;interrupts.c: 51: return;
 19620                           
 19621                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 19622  000F  0020               	movlb	0	; select bank0
 19623  0010  0859               	movf	_timer+3,w	;volatile
 19624  0011  0458               	iorwf	_timer+2,w	;volatile
 19625  0012  0457               	iorwf	_timer+1,w	;volatile
 19626  0013  0456               	iorwf	_timer,w	;volatile
 19627  0014  1D03               	skipz
 19628  0015  281B               	goto	i1l138
 19629                           
 19630                           ;interrupts.c: 64: tmpModDelay = mod_delay_time;
 19631  0016  0023               	movlb	3	; select bank3
 19632  0017  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19633  0018  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19634  0019  0859               	movf	_mod_delay_time^(0+384),w
 19635  001A  00BC               	movwf	_tmpModDelay^(0+384)
 19636  001B                     i1l138:	
 19637                           
 19638                           ;interrupts.c: 65: }
 19639                           ;interrupts.c: 70: timer = timer + 1;
 19640  001B  3001               	movlw	1
 19641  001C  0020               	movlb	0	; select bank0
 19642  001D  00BA               	movwf	??_isr
 19643  001E  3000               	movlw	0
 19644  001F  00BB               	movwf	??_isr+1
 19645  0020  3000               	movlw	0
 19646  0021  00BC               	movwf	??_isr+2
 19647  0022  3000               	movlw	0
 19648  0023  00BD               	movwf	??_isr+3
 19649  0024  0856               	movf	_timer,w	;volatile
 19650  0025  07BA               	addwf	??_isr,f
 19651  0026  0857               	movf	_timer+1,w	;volatile
 19652  0027  3DBB               	addwfc	??_isr+1,f
 19653  0028  0858               	movf	_timer+2,w	;volatile
 19654  0029  3DBC               	addwfc	??_isr+2,f
 19655  002A  0859               	movf	_timer+3,w	;volatile
 19656  002B  3DBD               	addwfc	??_isr+3,f
 19657  002C  083D               	movf	??_isr+3,w
 19658  002D  00D9               	movwf	_timer+3	;volatile
 19659  002E  083C               	movf	??_isr+2,w
 19660  002F  00D8               	movwf	_timer+2	;volatile
 19661  0030  083B               	movf	??_isr+1,w
 19662  0031  00D7               	movwf	_timer+1	;volatile
 19663  0032  083A               	movf	??_isr,w
 19664  0033  00D6               	movwf	_timer	;volatile
 19665                           
 19666                           ;interrupts.c: 71: sub_timer = sub_timer + 1;
 19667  0034  3001               	movlw	1
 19668  0035  00BA               	movwf	??_isr
 19669  0036  3000               	movlw	0
 19670  0037  00BB               	movwf	??_isr+1
 19671  0038  3000               	movlw	0
 19672  0039  00BC               	movwf	??_isr+2
 19673  003A  3000               	movlw	0
 19674  003B  00BD               	movwf	??_isr+3
 19675  003C  0023               	movlb	3	; select bank3
 19676  003D  0828               	movf	_sub_timer^(0+384),w	;volatile
 19677  003E  0020               	movlb	0	; select bank0
 19678  003F  07BA               	addwf	??_isr,f
 19679  0040  0023               	movlb	3	; select bank3
 19680  0041  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 19681  0042  0020               	movlb	0	; select bank0
 19682  0043  3DBB               	addwfc	??_isr+1,f
 19683  0044  0023               	movlb	3	; select bank3
 19684  0045  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 19685  0046  0020               	movlb	0	; select bank0
 19686  0047  3DBC               	addwfc	??_isr+2,f
 19687  0048  0023               	movlb	3	; select bank3
 19688  0049  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19689  004A  0020               	movlb	0	; select bank0
 19690  004B  3DBD               	addwfc	??_isr+3,f
 19691  004C  083D               	movf	??_isr+3,w
 19692  004D  0023               	movlb	3	; select bank3
 19693  004E  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19694  004F  0020               	movlb	0	; select bank0
 19695  0050  083C               	movf	??_isr+2,w
 19696  0051  0023               	movlb	3	; select bank3
 19697  0052  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19698  0053  0020               	movlb	0	; select bank0
 19699  0054  083B               	movf	??_isr+1,w
 19700  0055  0023               	movlb	3	; select bank3
 19701  0056  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19702  0057  0020               	movlb	0	; select bank0
 19703  0058  083A               	movf	??_isr,w
 19704  0059  0023               	movlb	3	; select bank3
 19705  005A  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19706                           
 19707                           ;interrupts.c: 72: tap_timer = tap_timer + 1;
 19708  005B  3001               	movlw	1
 19709  005C  0020               	movlb	0	; select bank0
 19710  005D  00BA               	movwf	??_isr
 19711  005E  3000               	movlw	0
 19712  005F  00BB               	movwf	??_isr+1
 19713  0060  3000               	movlw	0
 19714  0061  00BC               	movwf	??_isr+2
 19715  0062  3000               	movlw	0
 19716  0063  00BD               	movwf	??_isr+3
 19717  0064  0852               	movf	_tap_timer,w	;volatile
 19718  0065  07BA               	addwf	??_isr,f
 19719  0066  0853               	movf	_tap_timer+1,w	;volatile
 19720  0067  3DBB               	addwfc	??_isr+1,f
 19721  0068  0854               	movf	_tap_timer+2,w	;volatile
 19722  0069  3DBC               	addwfc	??_isr+2,f
 19723  006A  0855               	movf	_tap_timer+3,w	;volatile
 19724  006B  3DBD               	addwfc	??_isr+3,f
 19725  006C  083D               	movf	??_isr+3,w
 19726  006D  00D5               	movwf	_tap_timer+3	;volatile
 19727  006E  083C               	movf	??_isr+2,w
 19728  006F  00D4               	movwf	_tap_timer+2	;volatile
 19729  0070  083B               	movf	??_isr+1,w
 19730  0071  00D3               	movwf	_tap_timer+1	;volatile
 19731  0072  083A               	movf	??_isr,w
 19732  0073  00D2               	movwf	_tap_timer	;volatile
 19733                           
 19734                           ;interrupts.c: 73: mod_timer = mod_timer + 1;
 19735  0074  3001               	movlw	1
 19736  0075  00BA               	movwf	??_isr
 19737  0076  3000               	movlw	0
 19738  0077  00BB               	movwf	??_isr+1
 19739  0078  3000               	movlw	0
 19740  0079  00BC               	movwf	??_isr+2
 19741  007A  3000               	movlw	0
 19742  007B  00BD               	movwf	??_isr+3
 19743  007C  0023               	movlb	3	; select bank3
 19744  007D  0824               	movf	_mod_timer^(0+384),w	;volatile
 19745  007E  0020               	movlb	0	; select bank0
 19746  007F  07BA               	addwf	??_isr,f
 19747  0080  0023               	movlb	3	; select bank3
 19748  0081  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19749  0082  0020               	movlb	0	; select bank0
 19750  0083  3DBB               	addwfc	??_isr+1,f
 19751  0084  0023               	movlb	3	; select bank3
 19752  0085  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19753  0086  0020               	movlb	0	; select bank0
 19754  0087  3DBC               	addwfc	??_isr+2,f
 19755  0088  0023               	movlb	3	; select bank3
 19756  0089  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19757  008A  0020               	movlb	0	; select bank0
 19758  008B  3DBD               	addwfc	??_isr+3,f
 19759  008C  083D               	movf	??_isr+3,w
 19760  008D  0023               	movlb	3	; select bank3
 19761  008E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19762  008F  0020               	movlb	0	; select bank0
 19763  0090  083C               	movf	??_isr+2,w
 19764  0091  0023               	movlb	3	; select bank3
 19765  0092  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19766  0093  0020               	movlb	0	; select bank0
 19767  0094  083B               	movf	??_isr+1,w
 19768  0095  0023               	movlb	3	; select bank3
 19769  0096  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19770  0097  0020               	movlb	0	; select bank0
 19771  0098  083A               	movf	??_isr,w
 19772  0099  0023               	movlb	3	; select bank3
 19773  009A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19774                           
 19775                           ;interrupts.c: 74: double_timer++;
 19776  009B  3001               	movlw	1
 19777  009C  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19778  009D  3000               	movlw	0
 19779  009E  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19780  009F  3000               	movlw	0
 19781  00A0  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19782  00A1  3000               	movlw	0
 19783  00A2  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19784                           
 19785                           ;interrupts.c: 77: char subDiv = getModulationSubdivision();
 19786  00A3  31AE  2679  3180   	fcall	i1_getModulationSubdivision
 19787  00A6  0870               	movf	?i1_getModulationSubdivision,w
 19788  00A7  0020               	movlb	0	; select bank0
 19789  00A8  00BA               	movwf	??_isr
 19790  00A9  083A               	movf	??_isr,w
 19791  00AA  00FD               	movwf	isr@subDiv
 19792                           
 19793                           ;interrupts.c: 82: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 19794  00AB  0023               	movlb	3	; select bank3
 19795  00AC  083C               	movf	_tmpModDelay^(0+384),w
 19796  00AD  0020               	movlb	0	; select bank0
 19797  00AE  00BA               	movwf	??_isr
 19798  00AF  0023               	movlb	3	; select bank3
 19799  00B0  083D               	movf	(_tmpModDelay+1)^(0+384),w
 19800  00B1  0020               	movlb	0	; select bank0
 19801  00B2  00BB               	movwf	??_isr+1
 19802  00B3  3000               	movlw	0
 19803  00B4  1BBB               	btfsc	??_isr+1,7
 19804  00B5  30FF               	movlw	255
 19805  00B6  00BC               	movwf	??_isr+2
 19806  00B7  00BD               	movwf	??_isr+3
 19807  00B8  0023               	movlb	3	; select bank3
 19808  00B9  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19809  00BA  3A80               	xorlw	128
 19810  00BB  0020               	movlb	0	; select bank0
 19811  00BC  00BE               	movwf	??_isr+4
 19812  00BD  083D               	movf	??_isr+3,w
 19813  00BE  3A80               	xorlw	128
 19814  00BF  023E               	subwf	??_isr+4,w
 19815  00C0  0023               	movlb	3	; select bank3
 19816  00C1  1D03               	skipz
 19817  00C2  28D3               	goto	u680_23
 19818  00C3  0020               	movlb	0	; select bank0
 19819  00C4  083C               	movf	??_isr+2,w
 19820  00C5  0023               	movlb	3	; select bank3
 19821  00C6  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19822  00C7  1D03               	skipz
 19823  00C8  28D3               	goto	u680_23
 19824  00C9  0020               	movlb	0	; select bank0
 19825  00CA  083B               	movf	??_isr+1,w
 19826  00CB  0023               	movlb	3	; select bank3
 19827  00CC  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19828  00CD  1D03               	skipz
 19829  00CE  28D3               	goto	u680_23
 19830  00CF  0020               	movlb	0	; select bank0
 19831  00D0  083A               	movf	??_isr,w
 19832  00D1  0023               	movlb	3	; select bank3
 19833  00D2  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19834  00D3                     u680_23:	
 19835  00D3  1C03               	skipc
 19836  00D4  2901               	goto	i1l139
 19837  00D5  087D               	movf	isr@subDiv,w
 19838  00D6  0020               	movlb	0	; select bank0
 19839  00D7  00BA               	movwf	??_isr
 19840  00D8  01BB               	clrf	??_isr+1
 19841  00D9  0023               	movlb	3	; select bank3
 19842  00DA  0858               	movf	(_mod_counter+1)^(0+384),w
 19843  00DB  0020               	movlb	0	; select bank0
 19844  00DC  063B               	xorwf	??_isr+1,w
 19845  00DD  1D03               	skipz
 19846  00DE  28E3               	goto	u681_25
 19847  00DF  0023               	movlb	3	; select bank3
 19848  00E0  0857               	movf	_mod_counter^(0+384),w
 19849  00E1  0020               	movlb	0	; select bank0
 19850  00E2  063A               	xorwf	??_isr,w
 19851  00E3                     u681_25:	
 19852  00E3  1D03               	skipz
 19853  00E4  2901               	goto	i1l139
 19854  00E5  0023               	movlb	3	; select bank3
 19855  00E6  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19856  00E7  063D               	xorwf	(_tmpModDelay+1)^(0+384),w
 19857  00E8  1D03               	skipz
 19858  00E9  28EC               	goto	u682_25
 19859  00EA  0859               	movf	_mod_delay_time^(0+384),w
 19860  00EB  063C               	xorwf	_tmpModDelay^(0+384),w
 19861  00EC                     u682_25:	
 19862  00EC  1D03               	skipz
 19863  00ED  2901               	goto	i1l139
 19864                           
 19865                           ;interrupts.c: 83: tmpModDelay = (delay_time - sub_timer);
 19866  00EE  0928               	comf	_sub_timer^(0+384),w	;volatile
 19867  00EF  0020               	movlb	0	; select bank0
 19868  00F0  00BA               	movwf	??_isr
 19869  00F1  0023               	movlb	3	; select bank3
 19870  00F2  0929               	comf	(_sub_timer+1)^(0+384),w	;volatile
 19871  00F3  0020               	movlb	0	; select bank0
 19872  00F4  00BB               	movwf	??_isr+1
 19873  00F5  0ABA               	incf	??_isr,f
 19874  00F6  1903               	skipnz
 19875  00F7  0ABB               	incf	??_isr+1,f
 19876  00F8  0844               	movf	_delay_time,w	;volatile
 19877  00F9  073A               	addwf	??_isr,w
 19878  00FA  0023               	movlb	3	; select bank3
 19879  00FB  00BC               	movwf	_tmpModDelay^(0+384)
 19880  00FC  0020               	movlb	0	; select bank0
 19881  00FD  0845               	movf	_delay_time+1,w	;volatile
 19882  00FE  3D3B               	addwfc	??_isr+1,w
 19883  00FF  0023               	movlb	3	; select bank3
 19884  0100  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19885  0101                     i1l139:	
 19886                           
 19887                           ;interrupts.c: 84: }
 19888                           ;interrupts.c: 86: if (longBypass_start == 1) {
 19889  0101  0023               	movlb	3	; select bank3
 19890  0102  0344               	decf	_longBypass_start^(0+384),w
 19891  0103  1D03               	btfss	3,2
 19892  0104  291B               	goto	i1l6972
 19893                           
 19894                           ;interrupts.c: 87: longBypass_timer++;
 19895  0105  3001               	movlw	1
 19896  0106  07B6               	addwf	_longBypass_timer^(0+384),f	;volatile
 19897  0107  3000               	movlw	0
 19898  0108  3DB7               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19899                           
 19900                           ;interrupts.c: 88: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19901  0109  0837               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19902  010A  0020               	movlb	0	; select bank0
 19903  010B  024B               	subwf	_long_press_limit+1,w
 19904  010C  1D03               	skipz
 19905  010D  2912               	goto	u684_25
 19906  010E  0023               	movlb	3	; select bank3
 19907  010F  0836               	movf	_longBypass_timer^(0+384),w	;volatile
 19908  0110  0020               	movlb	0	; select bank0
 19909  0111  024A               	subwf	_long_press_limit,w
 19910  0112                     u684_25:	
 19911  0112  1803               	skipnc
 19912  0113  291B               	goto	i1l6972
 19913  0114  084B               	movf	_long_press_limit+1,w
 19914  0115  0023               	movlb	3	; select bank3
 19915  0116  00B7               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19916  0117  0020               	movlb	0	; select bank0
 19917  0118  084A               	movf	_long_press_limit,w
 19918  0119  0023               	movlb	3	; select bank3
 19919  011A  00B6               	movwf	_longBypass_timer^(0+384)	;volatile
 19920  011B                     i1l6972:	
 19921                           
 19922                           ;interrupts.c: 89: }
 19923                           ;interrupts.c: 90: if (longTap_start == 1) {
 19924  011B  0023               	movlb	3	; select bank3
 19925  011C  0345               	decf	_longTap_start^(0+384),w
 19926  011D  1D03               	btfss	3,2
 19927  011E  2935               	goto	i1l6978
 19928                           
 19929                           ;interrupts.c: 91: longTap_timer++;
 19930  011F  3001               	movlw	1
 19931  0120  07B8               	addwf	_longTap_timer^(0+384),f	;volatile
 19932  0121  3000               	movlw	0
 19933  0122  3DB9               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19934                           
 19935                           ;interrupts.c: 92: if (longTap_timer > long_press_limit) {
 19936  0123  0839               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19937  0124  0020               	movlb	0	; select bank0
 19938  0125  024B               	subwf	_long_press_limit+1,w
 19939  0126  1D03               	skipz
 19940  0127  292C               	goto	u686_25
 19941  0128  0023               	movlb	3	; select bank3
 19942  0129  0838               	movf	_longTap_timer^(0+384),w	;volatile
 19943  012A  0020               	movlb	0	; select bank0
 19944  012B  024A               	subwf	_long_press_limit,w
 19945  012C                     u686_25:	
 19946  012C  1803               	skipnc
 19947  012D  2935               	goto	i1l6978
 19948                           
 19949                           ;interrupts.c: 93: longTap_timer = long_press_limit;
 19950  012E  084B               	movf	_long_press_limit+1,w
 19951  012F  0023               	movlb	3	; select bank3
 19952  0130  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19953  0131  0020               	movlb	0	; select bank0
 19954  0132  084A               	movf	_long_press_limit,w
 19955  0133  0023               	movlb	3	; select bank3
 19956  0134  00B8               	movwf	_longTap_timer^(0+384)	;volatile
 19957  0135                     i1l6978:	
 19958                           
 19959                           ;interrupts.c: 94: }
 19960                           ;interrupts.c: 95: }
 19961                           ;interrupts.c: 97: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19962  0135  0020               	movlb	0	; select bank0
 19963  0136  084F               	movf	_longTap_state,w	;volatile
 19964  0137  1D03               	btfss	3,2
 19965  0138  2993               	goto	i1l7004
 19966  0139  085C               	movf	_doubleTap_state,w	;volatile
 19967  013A  1D03               	btfss	3,2
 19968  013B  2993               	goto	i1l7004
 19969  013C  085F               	movf	_presetSaveMode,w
 19970  013D  1D03               	btfss	3,2
 19971  013E  2993               	goto	i1l7004
 19972                           
 19973                           ;interrupts.c: 99: if (timer >= baseline_mod_time) {
 19974  013F  0859               	movf	_timer+3,w	;volatile
 19975  0140  3A80               	xorlw	128
 19976  0141  00BA               	movwf	??_isr
 19977  0142  0843               	movf	_baseline_mod_time+3,w	;volatile
 19978  0143  3A80               	xorlw	128
 19979  0144  023A               	subwf	??_isr,w
 19980  0145  1D03               	skipz
 19981  0146  2951               	goto	u690_23
 19982  0147  0842               	movf	_baseline_mod_time+2,w	;volatile
 19983  0148  0258               	subwf	_timer+2,w	;volatile
 19984  0149  1D03               	skipz
 19985  014A  2951               	goto	u690_23
 19986  014B  0841               	movf	_baseline_mod_time+1,w	;volatile
 19987  014C  0257               	subwf	_timer+1,w	;volatile
 19988  014D  1D03               	skipz
 19989  014E  2951               	goto	u690_23
 19990  014F  0840               	movf	_baseline_mod_time,w	;volatile
 19991  0150  0256               	subwf	_timer,w	;volatile
 19992  0151                     u690_23:	
 19993  0151  1C03               	skipc
 19994  0152  2981               	goto	i1l7000
 19995                           
 19996                           ;interrupts.c: 102: LATBbits.LATB4 = 1;
 19997  0153  0022               	movlb	2	; select bank2
 19998  0154  160D               	bsf	13,4	;volatile
 19999                           
 20000                           ;interrupts.c: 104: timer = 0;
 20001  0155  3000               	movlw	0
 20002  0156  0020               	movlb	0	; select bank0
 20003  0157  00D9               	movwf	_timer+3	;volatile
 20004  0158  3000               	movlw	0
 20005  0159  00D8               	movwf	_timer+2	;volatile
 20006  015A  3000               	movlw	0
 20007  015B  00D7               	movwf	_timer+1	;volatile
 20008  015C  3000               	movlw	0
 20009  015D  00D6               	movwf	_timer	;volatile
 20010                           
 20011                           ;interrupts.c: 106: if (modulation_changed == 1) {
 20012  015E  0023               	movlb	3	; select bank3
 20013  015F  0347               	decf	_modulation_changed^(0+384),w
 20014  0160  1D03               	btfss	3,2
 20015  0161  2981               	goto	i1l7000
 20016                           
 20017                           ;interrupts.c: 109: modulation_changed = 0;
 20018  0162  01C7               	clrf	_modulation_changed^(0+384)
 20019                           
 20020                           ;interrupts.c: 110: mod_time_changed = 0;
 20021  0163  01E4               	clrf	_mod_time_changed^(0+384)
 20022                           
 20023                           ;interrupts.c: 111: sub_timer = delay_time;
 20024  0164  0020               	movlb	0	; select bank0
 20025  0165  0847               	movf	_delay_time+3,w	;volatile
 20026  0166  0023               	movlb	3	; select bank3
 20027  0167  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20028  0168  0020               	movlb	0	; select bank0
 20029  0169  0846               	movf	_delay_time+2,w	;volatile
 20030  016A  0023               	movlb	3	; select bank3
 20031  016B  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20032  016C  0020               	movlb	0	; select bank0
 20033  016D  0845               	movf	_delay_time+1,w	;volatile
 20034  016E  0023               	movlb	3	; select bank3
 20035  016F  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20036  0170  0020               	movlb	0	; select bank0
 20037  0171  0844               	movf	_delay_time,w	;volatile
 20038  0172  0023               	movlb	3	; select bank3
 20039  0173  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20040                           
 20041                           ;interrupts.c: 112: tmpModDelay = mod_delay_time;
 20042  0174  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20043  0175  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 20044  0176  0859               	movf	_mod_delay_time^(0+384),w
 20045  0177  00BC               	movwf	_tmpModDelay^(0+384)
 20046                           
 20047                           ;interrupts.c: 113: mod_timer = tmpModDelay;
 20048  0178  083C               	movf	_tmpModDelay^(0+384),w
 20049  0179  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20050  017A  083D               	movf	(_tmpModDelay+1)^(0+384),w
 20051  017B  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20052  017C  0D89               	rlf	9,f
 20053  017D  3B89               	subwfb	9,f
 20054  017E  0989               	comf	9,f
 20055  017F  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20056  0180  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20057  0181                     i1l7000:	
 20058                           
 20059                           ;interrupts.c: 121: }
 20060                           ;interrupts.c: 122: }
 20061                           ;interrupts.c: 124: if (timer >= 30) {
 20062  0181  0020               	movlb	0	; select bank0
 20063  0182  1BD9               	btfsc	_timer+3,7	;volatile
 20064  0183  2993               	goto	i1l7004
 20065  0184  0859               	movf	_timer+3,w	;volatile
 20066  0185  1D03               	btfss	3,2
 20067  0186  2991               	goto	i1l7002
 20068  0187  0858               	movf	_timer+2,w	;volatile
 20069  0188  1D03               	btfss	3,2
 20070  0189  2991               	goto	i1l7002
 20071  018A  0857               	movf	_timer+1,w	;volatile
 20072  018B  1D03               	btfss	3,2
 20073  018C  2991               	goto	i1l7002
 20074  018D  301E               	movlw	30
 20075  018E  0256               	subwf	_timer,w	;volatile
 20076  018F  1C03               	btfss	3,0
 20077  0190  2993               	goto	i1l7004
 20078  0191                     i1l7002:	
 20079                           
 20080                           ;interrupts.c: 126: LATBbits.LATB4 = 0;
 20081  0191  0022               	movlb	2	; select bank2
 20082  0192  120D               	bcf	13,4	;volatile
 20083  0193                     i1l7004:	
 20084                           
 20085                           ;interrupts.c: 128: }
 20086                           ;interrupts.c: 129: }
 20087                           ;interrupts.c: 138: if (presetSaveMode < 1 && mode2_state == 0) {
 20088  0193  0020               	movlb	0	; select bank0
 20089  0194  085F               	movf	_presetSaveMode,w
 20090  0195  1D03               	btfss	3,2
 20091  0196  29EE               	goto	i1l7022
 20092  0197  085E               	movf	_mode2_state,w
 20093  0198  1D03               	btfss	3,2
 20094  0199  29EE               	goto	i1l7022
 20095                           
 20096                           ;interrupts.c: 139: if (sub_timer >= delay_time ) {
 20097  019A  0023               	movlb	3	; select bank3
 20098  019B  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20099  019C  3A80               	xorlw	128
 20100  019D  0020               	movlb	0	; select bank0
 20101  019E  00BA               	movwf	??_isr
 20102  019F  0847               	movf	_delay_time+3,w	;volatile
 20103  01A0  3A80               	xorlw	128
 20104  01A1  023A               	subwf	??_isr,w
 20105  01A2  0023               	movlb	3	; select bank3
 20106  01A3  1D03               	skipz
 20107  01A4  29B5               	goto	u695_23
 20108  01A5  0020               	movlb	0	; select bank0
 20109  01A6  0846               	movf	_delay_time+2,w	;volatile
 20110  01A7  0023               	movlb	3	; select bank3
 20111  01A8  022A               	subwf	(_sub_timer+2)^(0+384),w	;volatile
 20112  01A9  1D03               	skipz
 20113  01AA  29B5               	goto	u695_23
 20114  01AB  0020               	movlb	0	; select bank0
 20115  01AC  0845               	movf	_delay_time+1,w	;volatile
 20116  01AD  0023               	movlb	3	; select bank3
 20117  01AE  0229               	subwf	(_sub_timer+1)^(0+384),w	;volatile
 20118  01AF  1D03               	skipz
 20119  01B0  29B5               	goto	u695_23
 20120  01B1  0020               	movlb	0	; select bank0
 20121  01B2  0844               	movf	_delay_time,w	;volatile
 20122  01B3  0023               	movlb	3	; select bank3
 20123  01B4  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20124  01B5                     u695_23:	
 20125  01B5  1C03               	skipc
 20126  01B6  29D0               	goto	i1l7016
 20127                           
 20128                           ;interrupts.c: 140: if (suspend_blink == 0) {
 20129  01B7  0022               	movlb	2	; select bank2
 20130  01B8  086A               	movf	_suspend_blink^(0+256),w	;volatile
 20131  01B9  1D03               	btfss	3,2
 20132  01BA  29C7               	goto	i1l7014
 20133                           
 20134                           ;interrupts.c: 141: set_leds_top(top_push_state, 1);
 20135  01BB  0020               	movlb	0	; select bank0
 20136  01BC  084D               	movf	_top_push_state+1,w
 20137  01BD  00F1               	movwf	i1set_leds_top@x+1
 20138  01BE  084C               	movf	_top_push_state,w
 20139  01BF  00F0               	movwf	i1set_leds_top@x
 20140  01C0  3001               	movlw	1
 20141  01C1  00F2               	movwf	i1set_leds_top@ledState
 20142  01C2  3000               	movlw	0
 20143  01C3  00F3               	movwf	i1set_leds_top@ledState+1
 20144  01C4  31A2  22D7  3180   	fcall	i1_set_leds_top
 20145  01C7                     i1l7014:	
 20146                           
 20147                           ;interrupts.c: 142: }
 20148                           ;interrupts.c: 144: sub_timer = 0;
 20149  01C7  3000               	movlw	0
 20150  01C8  0023               	movlb	3	; select bank3
 20151  01C9  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20152  01CA  3000               	movlw	0
 20153  01CB  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20154  01CC  3000               	movlw	0
 20155  01CD  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20156  01CE  3000               	movlw	0
 20157  01CF  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20158  01D0                     i1l7016:	
 20159                           
 20160                           ;interrupts.c: 145: }
 20161                           ;interrupts.c: 147: if (sub_timer >= 20) {
 20162  01D0  1BAB               	btfsc	(_sub_timer+3)^(0+384),7	;volatile
 20163  01D1  29EE               	goto	i1l7022
 20164  01D2  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20165  01D3  1D03               	btfss	3,2
 20166  01D4  29DF               	goto	i1l7018
 20167  01D5  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 20168  01D6  1D03               	btfss	3,2
 20169  01D7  29DF               	goto	i1l7018
 20170  01D8  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 20171  01D9  1D03               	btfss	3,2
 20172  01DA  29DF               	goto	i1l7018
 20173  01DB  3014               	movlw	20
 20174  01DC  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20175  01DD  1C03               	btfss	3,0
 20176  01DE  29EE               	goto	i1l7022
 20177  01DF                     i1l7018:	
 20178                           
 20179                           ;interrupts.c: 148: if (suspend_blink == 0) {
 20180  01DF  0022               	movlb	2	; select bank2
 20181  01E0  086A               	movf	_suspend_blink^(0+256),w	;volatile
 20182  01E1  1D03               	btfss	3,2
 20183  01E2  29EE               	goto	i1l7022
 20184                           
 20185                           ;interrupts.c: 149: set_leds_top(top_push_state, 0);
 20186  01E3  0020               	movlb	0	; select bank0
 20187  01E4  084D               	movf	_top_push_state+1,w
 20188  01E5  00F1               	movwf	i1set_leds_top@x+1
 20189  01E6  084C               	movf	_top_push_state,w
 20190  01E7  00F0               	movwf	i1set_leds_top@x
 20191  01E8  3000               	movlw	0
 20192  01E9  00F2               	movwf	i1set_leds_top@ledState
 20193  01EA  00F3               	movwf	i1set_leds_top@ledState+1
 20194  01EB  31A2  22D7  3180   	fcall	i1_set_leds_top
 20195  01EE                     i1l7022:	
 20196                           
 20197                           ;interrupts.c: 150: }
 20198                           ;interrupts.c: 151: }
 20199                           ;interrupts.c: 152: }
 20200                           ;interrupts.c: 157: if (presetSaveMode == 1) {
 20201  01EE  0020               	movlb	0	; select bank0
 20202  01EF  035F               	decf	_presetSaveMode,w
 20203  01F0  1D03               	btfss	3,2
 20204  01F1  2A1E               	goto	i1l7034
 20205                           
 20206                           ;interrupts.c: 158: if (double_timer >= 250) {
 20207  01F2  0023               	movlb	3	; select bank3
 20208  01F3  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20209  01F4  2A0D               	goto	i1l7030
 20210  01F5  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20211  01F6  1D03               	btfss	3,2
 20212  01F7  2A02               	goto	i1l7026
 20213  01F8  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20214  01F9  1D03               	btfss	3,2
 20215  01FA  2A02               	goto	i1l7026
 20216  01FB  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20217  01FC  1D03               	btfss	3,2
 20218  01FD  2A02               	goto	i1l7026
 20219  01FE  30FA               	movlw	250
 20220  01FF  0220               	subwf	_double_timer^(0+384),w	;volatile
 20221  0200  1C03               	btfss	3,0
 20222  0201  2A0D               	goto	i1l7030
 20223  0202                     i1l7026:	
 20224                           
 20225                           ;interrupts.c: 159: LATBbits.LATB0 = 1;
 20226  0202  0022               	movlb	2	; select bank2
 20227  0203  140D               	bsf	13,0	;volatile
 20228                           
 20229                           ;interrupts.c: 160: double_timer = 0;
 20230  0204  3000               	movlw	0
 20231  0205  0023               	movlb	3	; select bank3
 20232  0206  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 20233  0207  3000               	movlw	0
 20234  0208  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 20235  0209  3000               	movlw	0
 20236  020A  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 20237  020B  3000               	movlw	0
 20238  020C  00A0               	movwf	_double_timer^(0+384)	;volatile
 20239  020D                     i1l7030:	
 20240                           
 20241                           ;interrupts.c: 161: }
 20242                           ;interrupts.c: 162: if (double_timer >= 30) {
 20243  020D  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20244  020E  2A1E               	goto	i1l7034
 20245  020F  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20246  0210  1D03               	btfss	3,2
 20247  0211  2A1C               	goto	i1l7032
 20248  0212  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20249  0213  1D03               	btfss	3,2
 20250  0214  2A1C               	goto	i1l7032
 20251  0215  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20252  0216  1D03               	btfss	3,2
 20253  0217  2A1C               	goto	i1l7032
 20254  0218  301E               	movlw	30
 20255  0219  0220               	subwf	_double_timer^(0+384),w	;volatile
 20256  021A  1C03               	btfss	3,0
 20257  021B  2A1E               	goto	i1l7034
 20258  021C                     i1l7032:	
 20259                           
 20260                           ;interrupts.c: 163: LATBbits.LATB0 = 0;
 20261  021C  0022               	movlb	2	; select bank2
 20262  021D  100D               	bcf	13,0	;volatile
 20263  021E                     i1l7034:	
 20264                           
 20265                           ;interrupts.c: 164: }
 20266                           ;interrupts.c: 165: }
 20267                           ;interrupts.c: 184: if (mod_timer >= tmpModDelay) {
 20268  021E  0023               	movlb	3	; select bank3
 20269  021F  083C               	movf	_tmpModDelay^(0+384),w
 20270  0220  0020               	movlb	0	; select bank0
 20271  0221  00BA               	movwf	??_isr
 20272  0222  0023               	movlb	3	; select bank3
 20273  0223  083D               	movf	(_tmpModDelay+1)^(0+384),w
 20274  0224  0020               	movlb	0	; select bank0
 20275  0225  00BB               	movwf	??_isr+1
 20276  0226  3000               	movlw	0
 20277  0227  1BBB               	btfsc	??_isr+1,7
 20278  0228  30FF               	movlw	255
 20279  0229  00BC               	movwf	??_isr+2
 20280  022A  00BD               	movwf	??_isr+3
 20281  022B  0023               	movlb	3	; select bank3
 20282  022C  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20283  022D  3A80               	xorlw	128
 20284  022E  0020               	movlb	0	; select bank0
 20285  022F  00BE               	movwf	??_isr+4
 20286  0230  083D               	movf	??_isr+3,w
 20287  0231  3A80               	xorlw	128
 20288  0232  023E               	subwf	??_isr+4,w
 20289  0233  0023               	movlb	3	; select bank3
 20290  0234  1D03               	skipz
 20291  0235  2A46               	goto	u702_23
 20292  0236  0020               	movlb	0	; select bank0
 20293  0237  083C               	movf	??_isr+2,w
 20294  0238  0023               	movlb	3	; select bank3
 20295  0239  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20296  023A  1D03               	skipz
 20297  023B  2A46               	goto	u702_23
 20298  023C  0020               	movlb	0	; select bank0
 20299  023D  083B               	movf	??_isr+1,w
 20300  023E  0023               	movlb	3	; select bank3
 20301  023F  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20302  0240  1D03               	skipz
 20303  0241  2A46               	goto	u702_23
 20304  0242  0020               	movlb	0	; select bank0
 20305  0243  083A               	movf	??_isr,w
 20306  0244  0023               	movlb	3	; select bank3
 20307  0245  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20308  0246                     u702_23:	
 20309  0246  1C03               	skipc
 20310  0247  2AB6               	goto	i1l7050
 20311                           
 20312                           ;interrupts.c: 185: mod_timer = 0;
 20313  0248  3000               	movlw	0
 20314  0249  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20315  024A  3000               	movlw	0
 20316  024B  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20317  024C  3000               	movlw	0
 20318  024D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20319  024E  3000               	movlw	0
 20320  024F  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20321                           
 20322                           ;interrupts.c: 187: if (mod_counter >= subDiv) {
 20323  0250  0858               	movf	(_mod_counter+1)^(0+384),w
 20324  0251  3A80               	xorlw	128
 20325  0252  0020               	movlb	0	; select bank0
 20326  0253  00BA               	movwf	??_isr
 20327  0254  3080               	movlw	128
 20328  0255  023A               	subwf	??_isr,w
 20329  0256  1D03               	skipz
 20330  0257  2A5B               	goto	u703_25
 20331  0258  087D               	movf	isr@subDiv,w
 20332  0259  0023               	movlb	3	; select bank3
 20333  025A  0257               	subwf	_mod_counter^(0+384),w
 20334  025B                     u703_25:	
 20335  025B  1C03               	skipc
 20336  025C  2A64               	goto	i1l7042
 20337                           
 20338                           ;interrupts.c: 188: mod_counter = 0;
 20339  025D  0023               	movlb	3	; select bank3
 20340  025E  01D7               	clrf	_mod_counter^(0+384)
 20341  025F  01D8               	clrf	(_mod_counter+1)^(0+384)
 20342                           
 20343                           ;interrupts.c: 189: tmpModDelay = mod_delay_time;
 20344  0260  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20345  0261  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 20346  0262  0859               	movf	_mod_delay_time^(0+384),w
 20347  0263  00BC               	movwf	_tmpModDelay^(0+384)
 20348  0264                     i1l7042:	
 20349                           
 20350                           ;interrupts.c: 193: }
 20351                           ;interrupts.c: 197: mod_value = modArray[mod_counter];
 20352  0264  0023               	movlb	3	; select bank3
 20353  0265  0858               	movf	(_mod_counter+1)^(0+384),w
 20354  0266  0020               	movlb	0	; select bank0
 20355  0267  00BB               	movwf	??_isr+1
 20356  0268  0023               	movlb	3	; select bank3
 20357  0269  0857               	movf	_mod_counter^(0+384),w
 20358  026A  0020               	movlb	0	; select bank0
 20359  026B  00BA               	movwf	??_isr
 20360  026C  35BA               	lslf	??_isr,f
 20361  026D  0DBB               	rlf	??_isr+1,f
 20362  026E  308A               	movlw	138
 20363  026F  00BC               	movwf	??_isr+2
 20364  0270  3023               	movlw	35
 20365  0271  00BD               	movwf	??_isr+3
 20366  0272  083A               	movf	??_isr,w
 20367  0273  073C               	addwf	??_isr+2,w
 20368  0274  0086               	movwf	6
 20369  0275  083B               	movf	??_isr+1,w
 20370  0276  3D3D               	addwfc	??_isr+3,w
 20371  0277  0087               	movwf	7
 20372  0278  3F40               	moviw [0]fsr1
 20373  0279  0024               	movlb	4	; select bank4
 20374  027A  00D3               	movwf	_mod_value^(0+512)
 20375  027B  3F41               	moviw [1]fsr1
 20376  027C  00D4               	movwf	(_mod_value+1)^(0+512)
 20377                           
 20378                           ;interrupts.c: 204: mod_value = modulation(mod_value, adjusted_pot_value);
 20379  027D  0853               	movf	_mod_value^(0+512),w
 20380  027E  0020               	movlb	0	; select bank0
 20381  027F  00AE               	movwf	modulation@x
 20382  0280  0024               	movlb	4	; select bank4
 20383  0281  0854               	movf	(_mod_value+1)^(0+512),w
 20384  0282  0020               	movlb	0	; select bank0
 20385  0283  00AF               	movwf	modulation@x+1
 20386  0284  0D89               	rlf	9,f
 20387  0285  3B89               	subwfb	9,f
 20388  0286  0989               	comf	9,f
 20389  0287  00B0               	movwf	modulation@x+2
 20390  0288  00B1               	movwf	modulation@x+3
 20391  0289  0024               	movlb	4	; select bank4
 20392  028A  0845               	movf	_adjusted_pot_value^(0+512),w
 20393  028B  0020               	movlb	0	; select bank0
 20394  028C  00B2               	movwf	modulation@y
 20395  028D  0024               	movlb	4	; select bank4
 20396  028E  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 20397  028F  0020               	movlb	0	; select bank0
 20398  0290  00B3               	movwf	modulation@y+1
 20399  0291  0D89               	rlf	9,f
 20400  0292  3B89               	subwfb	9,f
 20401  0293  0989               	comf	9,f
 20402  0294  00B4               	movwf	modulation@y+2
 20403  0295  00B5               	movwf	modulation@y+3
 20404  0296  31A2  2211  3180   	fcall	_modulation
 20405  0299  0020               	movlb	0	; select bank0
 20406  029A  082F               	movf	?_modulation+1,w
 20407  029B  0024               	movlb	4	; select bank4
 20408  029C  00D4               	movwf	(_mod_value+1)^(0+512)
 20409  029D  0020               	movlb	0	; select bank0
 20410  029E  082E               	movf	?_modulation,w
 20411  029F  0024               	movlb	4	; select bank4
 20412  02A0  00D3               	movwf	_mod_value^(0+512)
 20413                           
 20414                           ;interrupts.c: 205: CCPR3 = mod_value / 2;
 20415  02A1  3002               	movlw	2
 20416  02A2  00F0               	movwf	i1___awdiv@divisor
 20417  02A3  3000               	movlw	0
 20418  02A4  00F1               	movwf	i1___awdiv@divisor+1
 20419  02A5  0854               	movf	(_mod_value+1)^(0+512),w
 20420  02A6  00F3               	movwf	i1___awdiv@dividend+1
 20421  02A7  0853               	movf	_mod_value^(0+512),w
 20422  02A8  00F2               	movwf	i1___awdiv@dividend
 20423  02A9  31A4  2407  3180   	fcall	i1___awdiv
 20424  02AC  0871               	movf	?i1___awdiv+1,w
 20425  02AD  0026               	movlb	6	; select bank6
 20426  02AE  0092               	movwf	18	;volatile
 20427  02AF  0870               	movf	?i1___awdiv,w
 20428  02B0  0091               	movwf	17	;volatile
 20429                           
 20430                           ;interrupts.c: 206: mod_counter++;
 20431  02B1  3001               	movlw	1
 20432  02B2  0023               	movlb	3	; select bank3
 20433  02B3  07D7               	addwf	_mod_counter^(0+384),f
 20434  02B4  3000               	movlw	0
 20435  02B5  3DD8               	addwfc	(_mod_counter+1)^(0+384),f
 20436  02B6                     i1l7050:	
 20437                           
 20438                           ;interrupts.c: 208: }
 20439                           ;interrupts.c: 210: if (preset_programmning_on == 1) {
 20440  02B6  0349               	decf	_preset_programmning_on^(0+384),w
 20441  02B7  1D03               	btfss	3,2
 20442  02B8  2AE6               	goto	i1l7062
 20443                           
 20444                           ;interrupts.c: 211: preset_blink++;
 20445  02B9  3001               	movlw	1
 20446  02BA  0020               	movlb	0	; select bank0
 20447  02BB  00BA               	movwf	??_isr
 20448  02BC  083A               	movf	??_isr,w
 20449  02BD  0023               	movlb	3	; select bank3
 20450  02BE  07C8               	addwf	_preset_blink^(0+384),f
 20451                           
 20452                           ;interrupts.c: 213: if (preset_blink >= blink_delay) {
 20453  02BF  0024               	movlb	4	; select bank4
 20454  02C0  0867               	movf	(_blink_delay+1)^(0+512),w
 20455  02C1  3A80               	xorlw	128
 20456  02C2  3C80               	sublw	128
 20457  02C3  1D03               	skipz
 20458  02C4  2AC8               	goto	u705_25
 20459  02C5  0866               	movf	_blink_delay^(0+512),w
 20460  02C6  0023               	movlb	3	; select bank3
 20461  02C7  0248               	subwf	_preset_blink^(0+384),w
 20462  02C8                     u705_25:	
 20463  02C8  1C03               	skipc
 20464  02C9  2AEB               	goto	i1l7066
 20465                           
 20466                           ;interrupts.c: 214: LATBbits.LATB1 = 1;
 20467  02CA  0022               	movlb	2	; select bank2
 20468  02CB  148D               	bsf	13,1	;volatile
 20469                           
 20470                           ;interrupts.c: 215: if (preset_blink > blink_delay*2) {
 20471  02CC  0024               	movlb	4	; select bank4
 20472  02CD  0867               	movf	(_blink_delay+1)^(0+512),w
 20473  02CE  0020               	movlb	0	; select bank0
 20474  02CF  00BB               	movwf	??_isr+1
 20475  02D0  0024               	movlb	4	; select bank4
 20476  02D1  0866               	movf	_blink_delay^(0+512),w
 20477  02D2  0020               	movlb	0	; select bank0
 20478  02D3  00BA               	movwf	??_isr
 20479  02D4  35BA               	lslf	??_isr,f
 20480  02D5  0DBB               	rlf	??_isr+1,f
 20481  02D6  083B               	movf	??_isr+1,w
 20482  02D7  3A80               	xorlw	128
 20483  02D8  00BC               	movwf	??_isr+2
 20484  02D9  3080               	movlw	128
 20485  02DA  023C               	subwf	??_isr+2,w
 20486  02DB  1D03               	skipz
 20487  02DC  2AE1               	goto	u706_25
 20488  02DD  0023               	movlb	3	; select bank3
 20489  02DE  0848               	movf	_preset_blink^(0+384),w
 20490  02DF  0020               	movlb	0	; select bank0
 20491  02E0  023A               	subwf	??_isr,w
 20492  02E1                     u706_25:	
 20493  02E1  1803               	skipnc
 20494  02E2  2AED               	goto	i1l7068
 20495                           
 20496                           ;interrupts.c: 216: preset_blink = 0;
 20497  02E3  0023               	movlb	3	; select bank3
 20498  02E4  01C8               	clrf	_preset_blink^(0+384)
 20499                           
 20500                           ;interrupts.c: 217: }
 20501                           ;interrupts.c: 219: } else {
 20502  02E5  2AED               	goto	i1l7068
 20503  02E6                     i1l7062:	
 20504                           ;interrupts.c: 221: }
 20505                           ;interrupts.c: 223: } else {
 20506                           
 20507                           ;interrupts.c: 220: LATBbits.LATB1 = 0;
 20508                           
 20509                           
 20510                           ;interrupts.c: 224: if (preset_blink > 0) {
 20511  02E6  0023               	movlb	3	; select bank3
 20512  02E7  0848               	movf	_preset_blink^(0+384),w
 20513  02E8  1903               	btfsc	3,2
 20514  02E9  2AED               	goto	i1l7068
 20515                           
 20516                           ;interrupts.c: 225: preset_blink = 0;
 20517  02EA  01C8               	clrf	_preset_blink^(0+384)
 20518  02EB                     i1l7066:	
 20519                           
 20520                           ;interrupts.c: 226: LATBbits.LATB1 = 0;
 20521  02EB  0022               	movlb	2	; select bank2
 20522  02EC  108D               	bcf	13,1	;volatile
 20523  02ED                     i1l7068:	
 20524                           
 20525                           ;interrupts.c: 227: }
 20526                           ;interrupts.c: 228: }
 20527                           ;interrupts.c: 232: INTCONbits.TMR0IF = 0;
 20528  02ED  110B               	bcf	11,2	;volatile
 20529  02EE                     i1l137:	
 20530  02EE  0020               	movlb	0	; select bank0
 20531  02EF  083F               	movf	??_isr+5,w
 20532  02F0  00FF               	movwf	127
 20533  02F1  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20534  02F2  0009               	retfie
 20535  02F3                     __end_of_isr:	
 20536                           
 20537                           	psect	text75
 20538  22D7                     __ptext75:	
 20539 ;; *************** function i1_set_leds_top *****************
 20540 ;; Defined at:
 20541 ;;		line 16 in file "LEDs.c"
 20542 ;; Parameters:    Size  Location     Type
 20543 ;;  x               2    0[COMMON] int 
 20544 ;;  ledState        2    2[COMMON] int 
 20545 ;; Auto vars:     Size  Location     Type
 20546 ;;		None
 20547 ;; Return value:  Size  Location     Type
 20548 ;;                  1    wreg      void 
 20549 ;; Registers used:
 20550 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20551 ;; Tracked objects:
 20552 ;;		On entry : 0/0
 20553 ;;		On exit  : 0/0
 20554 ;;		Unchanged: 0/0
 20555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20556 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20559 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20560 ;;Total ram usage:        4 bytes
 20561 ;; Hardware stack levels used:    1
 20562 ;; This function calls:
 20563 ;;		Nothing
 20564 ;; This function is called by:
 20565 ;;		_isr
 20566 ;; This function uses a non-reentrant model
 20567 ;;
 20568                           
 20569                           
 20570                           ;psect for function i1_set_leds_top
 20571  22D7                     i1_set_leds_top:	
 20572                           
 20573                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20574                           
 20575                           ;incstack = 0
 20576                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20577  22D7  0027               	movlb	7	; select bank7
 20578  22D8  100C               	bcf	12,0	;volatile
 20579                           
 20580                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20581  22D9  108C               	bcf	12,1	;volatile
 20582                           
 20583                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20584  22DA  110C               	bcf	12,2	;volatile
 20585                           
 20586                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20587  22DB  118C               	bcf	12,3	;volatile
 20588                           
 20589                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20590  22DC  120C               	bcf	12,4	;volatile
 20591                           
 20592                           ;LEDs.c: 22: switch (x) {
 20593  22DD  2B02               	goto	i1l6878
 20594  22DE                     i1l6866:	
 20595                           ;LEDs.c: 23: case 1:
 20596                           
 20597                           
 20598                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20599  22DE  0C72               	rrf	i1set_leds_top@ledState,w
 20600  22DF  1C03               	skipc
 20601  22E0  100C               	bcf	12,0	;volatile
 20602  22E1  1803               	skipnc
 20603  22E2  140C               	bsf	12,0	;volatile
 20604                           
 20605                           ;LEDs.c: 25: break;
 20606  22E3  0008               	return
 20607  22E4                     i1l6868:	
 20608                           ;LEDs.c: 26: case 2:
 20609                           
 20610                           
 20611                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20612  22E4  0C72               	rrf	i1set_leds_top@ledState,w
 20613  22E5  1C03               	skipc
 20614  22E6  108C               	bcf	12,1	;volatile
 20615  22E7  1803               	skipnc
 20616  22E8  148C               	bsf	12,1	;volatile
 20617                           
 20618                           ;LEDs.c: 28: break;
 20619  22E9  0008               	return
 20620  22EA                     i1l6870:	
 20621                           ;LEDs.c: 29: case 3:
 20622                           
 20623                           
 20624                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20625  22EA  0C72               	rrf	i1set_leds_top@ledState,w
 20626  22EB  1C03               	skipc
 20627  22EC  110C               	bcf	12,2	;volatile
 20628  22ED  1803               	skipnc
 20629  22EE  150C               	bsf	12,2	;volatile
 20630                           
 20631                           ;LEDs.c: 31: break;
 20632  22EF  0008               	return
 20633  22F0                     i1l6872:	
 20634                           ;LEDs.c: 32: case 4:
 20635                           
 20636                           
 20637                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20638  22F0  0C72               	rrf	i1set_leds_top@ledState,w
 20639  22F1  1C03               	skipc
 20640  22F2  118C               	bcf	12,3	;volatile
 20641  22F3  1803               	skipnc
 20642  22F4  158C               	bsf	12,3	;volatile
 20643                           
 20644                           ;LEDs.c: 34: break;
 20645  22F5  0008               	return
 20646  22F6                     i1l6874:	
 20647                           ;LEDs.c: 35: case 5:
 20648                           
 20649                           
 20650                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20651  22F6  0C72               	rrf	i1set_leds_top@ledState,w
 20652  22F7  1C03               	skipc
 20653  22F8  120C               	bcf	12,4	;volatile
 20654  22F9  1803               	skipnc
 20655  22FA  160C               	bsf	12,4	;volatile
 20656                           
 20657                           ;LEDs.c: 39: break;
 20658                           
 20659                           ;LEDs.c: 38: case 6:
 20660                           
 20661                           ;LEDs.c: 37: break;
 20662  22FB  0008               	return
 20663  22FC                     i1l818:	
 20664                           ;LEDs.c: 40: case 100:
 20665                           
 20666                           
 20667                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20668  22FC  140C               	bsf	12,0	;volatile
 20669                           
 20670                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20671  22FD  148C               	bsf	12,1	;volatile
 20672                           
 20673                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20674  22FE  150C               	bsf	12,2	;volatile
 20675                           
 20676                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20677  22FF  158C               	bsf	12,3	;volatile
 20678                           
 20679                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20680  2300  160C               	bsf	12,4	;volatile
 20681                           
 20682                           ;LEDs.c: 47: }
 20683                           
 20684                           ;LEDs.c: 46: break;
 20685  2301  0008               	return
 20686  2302                     i1l6878:	
 20687                           
 20688                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20689                           ; Switch size 1, requested type "space"
 20690                           ; Number of cases is 1, Range of values is 0 to 0
 20691                           ; switch strategies available:
 20692                           ; Name         Instructions Cycles
 20693                           ; simple_byte            4     3 (average)
 20694                           ; direct_byte            8     6 (fixed)
 20695                           ; jumptable            260     6 (fixed)
 20696                           ;	Chosen strategy is simple_byte
 20697  2302  0871               	movf	i1set_leds_top@x+1,w
 20698  2303  3A00               	xorlw	0	; case 0
 20699  2304  1903               	skipnz
 20700  2305  2B07               	goto	i1l9966
 20701  2306  2B1E               	goto	i1l819
 20702  2307                     i1l9966:	
 20703                           
 20704                           ; Switch size 1, requested type "space"
 20705                           ; Number of cases is 7, Range of values is 1 to 100
 20706                           ; switch strategies available:
 20707                           ; Name         Instructions Cycles
 20708                           ; simple_byte           22    12 (average)
 20709                           ; direct_byte          209     9 (fixed)
 20710                           ; jumptable            263     9 (fixed)
 20711                           ;	Chosen strategy is simple_byte
 20712  2307  0870               	movf	i1set_leds_top@x,w
 20713  2308  3A01               	xorlw	1	; case 1
 20714  2309  1903               	skipnz
 20715  230A  2ADE               	goto	i1l6866
 20716  230B  3A03               	xorlw	3	; case 2
 20717  230C  1903               	skipnz
 20718  230D  2AE4               	goto	i1l6868
 20719  230E  3A01               	xorlw	1	; case 3
 20720  230F  1903               	skipnz
 20721  2310  2AEA               	goto	i1l6870
 20722  2311  3A07               	xorlw	7	; case 4
 20723  2312  1903               	skipnz
 20724  2313  2AF0               	goto	i1l6872
 20725  2314  3A01               	xorlw	1	; case 5
 20726  2315  1903               	skipnz
 20727  2316  2AF6               	goto	i1l6874
 20728  2317  3A03               	xorlw	3	; case 6
 20729  2318  1903               	skipnz
 20730  2319  2B1E               	goto	i1l819
 20731  231A  3A62               	xorlw	98	; case 100
 20732  231B  1903               	skipnz
 20733  231C  2AFC               	goto	i1l818
 20734  231D  2B1E               	goto	i1l819
 20735  231E                     i1l819:	
 20736  231E  0008               	return
 20737  231F                     __end_ofi1_set_leds_top:	
 20738                           
 20739                           	psect	text76
 20740  2E79                     __ptext76:	
 20741 ;; *************** function i1_getModulationSubdivision *****************
 20742 ;; Defined at:
 20743 ;;		line 26 in file "modulation.c"
 20744 ;; Parameters:    Size  Location     Type
 20745 ;;		None
 20746 ;; Auto vars:     Size  Location     Type
 20747 ;;		None
 20748 ;; Return value:  Size  Location     Type
 20749 ;;                  2    0[COMMON] int 
 20750 ;; Registers used:
 20751 ;;		wreg, status,2, status,0
 20752 ;; Tracked objects:
 20753 ;;		On entry : 0/0
 20754 ;;		On exit  : 0/0
 20755 ;;		Unchanged: 0/0
 20756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20757 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20760 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20761 ;;Total ram usage:        2 bytes
 20762 ;; Hardware stack levels used:    1
 20763 ;; This function calls:
 20764 ;;		Nothing
 20765 ;; This function is called by:
 20766 ;;		_isr
 20767 ;; This function uses a non-reentrant model
 20768 ;;
 20769                           
 20770                           
 20771                           ;psect for function i1_getModulationSubdivision
 20772  2E79                     i1_getModulationSubdivision:	
 20773                           
 20774                           ;modulation.c: 27: if (delay_time >= 2400) {
 20775                           
 20776                           ;incstack = 0
 20777                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20778  2E79  0020               	movlb	0	; select bank0
 20779  2E7A  1BC7               	btfsc	_delay_time+3,7	;volatile
 20780  2E7B  2E8D               	goto	i1l6892
 20781  2E7C  0847               	movf	_delay_time+3,w	;volatile
 20782  2E7D  1D03               	btfss	3,2
 20783  2E7E  2E88               	goto	i1l6886
 20784  2E7F  0846               	movf	_delay_time+2,w	;volatile
 20785  2E80  1D03               	btfss	3,2
 20786  2E81  2E88               	goto	i1l6886
 20787  2E82  3060               	movlw	96
 20788  2E83  0244               	subwf	_delay_time,w	;volatile
 20789  2E84  3009               	movlw	9
 20790  2E85  3B45               	subwfb	_delay_time+1,w	;volatile
 20791  2E86  1C03               	btfss	3,0
 20792  2E87  2E8D               	goto	i1l6892
 20793  2E88                     i1l6886:	
 20794                           
 20795                           ;modulation.c: 28: return 120;
 20796  2E88  3078               	movlw	120
 20797  2E89  00F0               	movwf	?i1_getModulationSubdivision
 20798  2E8A  3000               	movlw	0
 20799  2E8B  00F1               	movwf	?i1_getModulationSubdivision+1
 20800                           
 20801                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20802  2E8C  0008               	return
 20803  2E8D                     i1l6892:	
 20804  2E8D  1BC7               	btfsc	_delay_time+3,7	;volatile
 20805  2E8E  2EA0               	goto	i1l6900
 20806  2E8F  0847               	movf	_delay_time+3,w	;volatile
 20807  2E90  1D03               	btfss	3,2
 20808  2E91  2E9B               	goto	i1l6894
 20809  2E92  0846               	movf	_delay_time+2,w	;volatile
 20810  2E93  1D03               	btfss	3,2
 20811  2E94  2E9B               	goto	i1l6894
 20812  2E95  3058               	movlw	88
 20813  2E96  0244               	subwf	_delay_time,w	;volatile
 20814  2E97  3002               	movlw	2
 20815  2E98  3B45               	subwfb	_delay_time+1,w	;volatile
 20816  2E99  1C03               	btfss	3,0
 20817  2E9A  2EA0               	goto	i1l6900
 20818  2E9B                     i1l6894:	
 20819                           
 20820                           ;modulation.c: 30: return 60;
 20821  2E9B  303C               	movlw	60
 20822  2E9C  00F0               	movwf	?i1_getModulationSubdivision
 20823  2E9D  3000               	movlw	0
 20824  2E9E  00F1               	movwf	?i1_getModulationSubdivision+1
 20825                           
 20826                           ;modulation.c: 31: } else {
 20827  2E9F  0008               	return
 20828  2EA0                     i1l6900:	
 20829                           
 20830                           ;modulation.c: 32: return 30;
 20831  2EA0  301E               	movlw	30
 20832  2EA1  00F0               	movwf	?i1_getModulationSubdivision
 20833  2EA2  3000               	movlw	0
 20834  2EA3  00F1               	movwf	?i1_getModulationSubdivision+1
 20835  2EA4  0008               	return
 20836  2EA5                     __end_ofi1_getModulationSubdivision:	
 20837                           
 20838                           	psect	text77
 20839  2407                     __ptext77:	
 20840 ;; *************** function i1___awdiv *****************
 20841 ;; Defined at:
 20842 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20843 ;; Parameters:    Size  Location     Type
 20844 ;;  divisor         2    0[COMMON] int 
 20845 ;;  dividend        2    2[COMMON] int 
 20846 ;; Auto vars:     Size  Location     Type
 20847 ;;  __awdiv         2    7[COMMON] int 
 20848 ;;  __awdiv         1    6[COMMON] unsigned char 
 20849 ;;  __awdiv         1    5[COMMON] unsigned char 
 20850 ;; Return value:  Size  Location     Type
 20851 ;;                  2    0[COMMON] int 
 20852 ;; Registers used:
 20853 ;;		wreg, status,2, status,0
 20854 ;; Tracked objects:
 20855 ;;		On entry : 0/0
 20856 ;;		On exit  : 0/0
 20857 ;;		Unchanged: 0/0
 20858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20859 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20860 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20862 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20863 ;;Total ram usage:        9 bytes
 20864 ;; Hardware stack levels used:    1
 20865 ;; This function calls:
 20866 ;;		Nothing
 20867 ;; This function is called by:
 20868 ;;		_isr
 20869 ;; This function uses a non-reentrant model
 20870 ;;
 20871                           
 20872                           
 20873                           ;psect for function i1___awdiv
 20874  2407                     i1___awdiv:	
 20875                           
 20876                           ;incstack = 0
 20877                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20878  2407  01F6               	clrf	i1___awdiv@sign
 20879  2408  1FF1               	btfss	i1___awdiv@divisor+1,7
 20880  2409  2C11               	goto	i1l6912
 20881  240A  09F0               	comf	i1___awdiv@divisor,f
 20882  240B  09F1               	comf	i1___awdiv@divisor+1,f
 20883  240C  0AF0               	incf	i1___awdiv@divisor,f
 20884  240D  1903               	skipnz
 20885  240E  0AF1               	incf	i1___awdiv@divisor+1,f
 20886  240F  01F6               	clrf	i1___awdiv@sign
 20887  2410  0AF6               	incf	i1___awdiv@sign,f
 20888  2411                     i1l6912:	
 20889  2411  1FF3               	btfss	i1___awdiv@dividend+1,7
 20890  2412  2C1C               	goto	i1l6918
 20891  2413  09F2               	comf	i1___awdiv@dividend,f
 20892  2414  09F3               	comf	i1___awdiv@dividend+1,f
 20893  2415  0AF2               	incf	i1___awdiv@dividend,f
 20894  2416  1903               	skipnz
 20895  2417  0AF3               	incf	i1___awdiv@dividend+1,f
 20896  2418  3001               	movlw	1
 20897  2419  00F4               	movwf	??i1___awdiv
 20898  241A  0874               	movf	??i1___awdiv,w
 20899  241B  06F6               	xorwf	i1___awdiv@sign,f
 20900  241C                     i1l6918:	
 20901  241C  01F7               	clrf	i1___awdiv@quotient
 20902  241D  01F8               	clrf	i1___awdiv@quotient+1
 20903  241E  0870               	movf	i1___awdiv@divisor,w
 20904  241F  0471               	iorwf	i1___awdiv@divisor+1,w
 20905  2420  1903               	btfsc	3,2
 20906  2421  2C4B               	goto	i1l6940
 20907  2422  01F5               	clrf	i1___awdiv@counter
 20908  2423  0AF5               	incf	i1___awdiv@counter,f
 20909  2424                     i1l6928:	
 20910  2424  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20911  2425  2C30               	goto	i1l6930
 20912  2426  3001               	movlw	1
 20913  2427                     u670_25:	
 20914  2427  35F0               	lslf	i1___awdiv@divisor,f
 20915  2428  0DF1               	rlf	i1___awdiv@divisor+1,f
 20916  2429  0B89               	decfsz	9,f
 20917  242A  2C27               	goto	u670_25
 20918  242B  3001               	movlw	1
 20919  242C  00F4               	movwf	??i1___awdiv
 20920  242D  0874               	movf	??i1___awdiv,w
 20921  242E  07F5               	addwf	i1___awdiv@counter,f
 20922  242F  2C24               	goto	i1l6928
 20923  2430                     i1l6930:	
 20924  2430  3001               	movlw	1
 20925  2431                     u672_25:	
 20926  2431  35F7               	lslf	i1___awdiv@quotient,f
 20927  2432  0DF8               	rlf	i1___awdiv@quotient+1,f
 20928  2433  0B89               	decfsz	9,f
 20929  2434  2C31               	goto	u672_25
 20930  2435  0871               	movf	i1___awdiv@divisor+1,w
 20931  2436  0273               	subwf	i1___awdiv@dividend+1,w
 20932  2437  1D03               	skipz
 20933  2438  2C3B               	goto	u673_25
 20934  2439  0870               	movf	i1___awdiv@divisor,w
 20935  243A  0272               	subwf	i1___awdiv@dividend,w
 20936  243B                     u673_25:	
 20937  243B  1C03               	skipc
 20938  243C  2C42               	goto	i1l6936
 20939  243D  0870               	movf	i1___awdiv@divisor,w
 20940  243E  02F2               	subwf	i1___awdiv@dividend,f
 20941  243F  0871               	movf	i1___awdiv@divisor+1,w
 20942  2440  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20943  2441  1477               	bsf	i1___awdiv@quotient,0
 20944  2442                     i1l6936:	
 20945  2442  3001               	movlw	1
 20946  2443                     u674_25:	
 20947  2443  36F1               	lsrf	i1___awdiv@divisor+1,f
 20948  2444  0CF0               	rrf	i1___awdiv@divisor,f
 20949  2445  0B89               	decfsz	9,f
 20950  2446  2C43               	goto	u674_25
 20951  2447  3001               	movlw	1
 20952  2448  02F5               	subwf	i1___awdiv@counter,f
 20953  2449  1D03               	btfss	3,2
 20954  244A  2C30               	goto	i1l6930
 20955  244B                     i1l6940:	
 20956  244B  0876               	movf	i1___awdiv@sign,w
 20957  244C  1903               	btfsc	3,2
 20958  244D  2C53               	goto	i1l6944
 20959  244E  09F7               	comf	i1___awdiv@quotient,f
 20960  244F  09F8               	comf	i1___awdiv@quotient+1,f
 20961  2450  0AF7               	incf	i1___awdiv@quotient,f
 20962  2451  1903               	skipnz
 20963  2452  0AF8               	incf	i1___awdiv@quotient+1,f
 20964  2453                     i1l6944:	
 20965  2453  0878               	movf	i1___awdiv@quotient+1,w
 20966  2454  00F1               	movwf	?i1___awdiv+1
 20967  2455  0877               	movf	i1___awdiv@quotient,w
 20968  2456  00F0               	movwf	?i1___awdiv
 20969  2457  0008               	return
 20970  2458                     __end_ofi1___awdiv:	
 20971                           
 20972                           	psect	text78
 20973  2211                     __ptext78:	
 20974 ;; *************** function _modulation *****************
 20975 ;; Defined at:
 20976 ;;		line 240 in file "user.c"
 20977 ;; Parameters:    Size  Location     Type
 20978 ;;  x               4   14[BANK0 ] long 
 20979 ;;  y               4   18[BANK0 ] long 
 20980 ;; Auto vars:     Size  Location     Type
 20981 ;;		None
 20982 ;; Return value:  Size  Location     Type
 20983 ;;                  4   14[BANK0 ] long 
 20984 ;; Registers used:
 20985 ;;		wreg, status,2, status,0, pclath, cstack
 20986 ;; Tracked objects:
 20987 ;;		On entry : 0/0
 20988 ;;		On exit  : 0/0
 20989 ;;		Unchanged: 0/0
 20990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20991 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20993 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20994 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20995 ;;Total ram usage:       12 bytes
 20996 ;; Hardware stack levels used:    1
 20997 ;; Hardware stack levels required when called:    1
 20998 ;; This function calls:
 20999 ;;		i1___aldiv
 21000 ;;		i1___lmul
 21001 ;; This function is called by:
 21002 ;;		_isr
 21003 ;; This function uses a non-reentrant model
 21004 ;;
 21005                           
 21006                           
 21007                           ;psect for function _modulation
 21008  2211                     _modulation:	
 21009                           
 21010                           ;user.c: 243: return (127500 + (y * x)) / 1000;
 21011                           
 21012                           ;incstack = 0
 21013                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 21014  2211  3000               	movlw	0
 21015  2212  0020               	movlb	0	; select bank0
 21016  2213  00A3               	movwf	i1___aldiv@divisor+3
 21017  2214  3000               	movlw	0
 21018  2215  00A2               	movwf	i1___aldiv@divisor+2
 21019  2216  3003               	movlw	3
 21020  2217  00A1               	movwf	i1___aldiv@divisor+1
 21021  2218  30E8               	movlw	232
 21022  2219  00A0               	movwf	i1___aldiv@divisor
 21023  221A  300C               	movlw	12
 21024  221B  00B6               	movwf	??_modulation
 21025  221C  30F2               	movlw	242
 21026  221D  00B7               	movwf	??_modulation+1
 21027  221E  3001               	movlw	1
 21028  221F  00B8               	movwf	??_modulation+2
 21029  2220  3000               	movlw	0
 21030  2221  00B9               	movwf	??_modulation+3
 21031  2222  0835               	movf	modulation@y+3,w
 21032  2223  00F3               	movwf	i1___lmul@multiplier+3
 21033  2224  0834               	movf	modulation@y+2,w
 21034  2225  00F2               	movwf	i1___lmul@multiplier+2
 21035  2226  0833               	movf	modulation@y+1,w
 21036  2227  00F1               	movwf	i1___lmul@multiplier+1
 21037  2228  0832               	movf	modulation@y,w
 21038  2229  00F0               	movwf	i1___lmul@multiplier
 21039  222A  0831               	movf	modulation@x+3,w
 21040  222B  00F7               	movwf	i1___lmul@multiplicand+3
 21041  222C  0830               	movf	modulation@x+2,w
 21042  222D  00F6               	movwf	i1___lmul@multiplicand+2
 21043  222E  082F               	movf	modulation@x+1,w
 21044  222F  00F5               	movwf	i1___lmul@multiplicand+1
 21045  2230  082E               	movf	modulation@x,w
 21046  2231  00F4               	movwf	i1___lmul@multiplicand
 21047  2232  31AE  26D3  31A2   	fcall	i1___lmul
 21048  2235  0870               	movf	?i1___lmul,w
 21049  2236  0020               	movlb	0	; select bank0
 21050  2237  07B6               	addwf	??_modulation,f
 21051  2238  0871               	movf	?i1___lmul+1,w
 21052  2239  3DB7               	addwfc	??_modulation+1,f
 21053  223A  0872               	movf	?i1___lmul+2,w
 21054  223B  3DB8               	addwfc	??_modulation+2,f
 21055  223C  0873               	movf	?i1___lmul+3,w
 21056  223D  3DB9               	addwfc	??_modulation+3,f
 21057  223E  0839               	movf	??_modulation+3,w
 21058  223F  00A7               	movwf	i1___aldiv@dividend+3
 21059  2240  0838               	movf	??_modulation+2,w
 21060  2241  00A6               	movwf	i1___aldiv@dividend+2
 21061  2242  0837               	movf	??_modulation+1,w
 21062  2243  00A5               	movwf	i1___aldiv@dividend+1
 21063  2244  0836               	movf	??_modulation,w
 21064  2245  00A4               	movwf	i1___aldiv@dividend
 21065  2246  31A7  277E         	fcall	i1___aldiv
 21066  2248  0020               	movlb	0	; select bank0
 21067  2249  0823               	movf	?i1___aldiv+3,w
 21068  224A  00B1               	movwf	?_modulation+3
 21069  224B  0822               	movf	?i1___aldiv+2,w
 21070  224C  00B0               	movwf	?_modulation+2
 21071  224D  0821               	movf	?i1___aldiv+1,w
 21072  224E  00AF               	movwf	?_modulation+1
 21073  224F  0820               	movf	?i1___aldiv,w
 21074  2250  00AE               	movwf	?_modulation
 21075  2251  0008               	return
 21076  2252                     __end_of_modulation:	
 21077                           
 21078                           	psect	text79
 21079  2ED3                     __ptext79:	
 21080 ;; *************** function i1___lmul *****************
 21081 ;; Defined at:
 21082 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 21083 ;; Parameters:    Size  Location     Type
 21084 ;;  multiplier      4    0[COMMON] unsigned long 
 21085 ;;  multiplicand    4    4[COMMON] unsigned long 
 21086 ;; Auto vars:     Size  Location     Type
 21087 ;;  __lmul          4    8[COMMON] unsigned long 
 21088 ;; Return value:  Size  Location     Type
 21089 ;;                  4    0[COMMON] unsigned long 
 21090 ;; Registers used:
 21091 ;;		wreg, status,2, status,0
 21092 ;; Tracked objects:
 21093 ;;		On entry : 0/0
 21094 ;;		On exit  : 0/0
 21095 ;;		Unchanged: 0/0
 21096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21097 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21098 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21100 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21101 ;;Total ram usage:       12 bytes
 21102 ;; Hardware stack levels used:    1
 21103 ;; This function calls:
 21104 ;;		Nothing
 21105 ;; This function is called by:
 21106 ;;		_modulation
 21107 ;; This function uses a non-reentrant model
 21108 ;;
 21109                           
 21110                           
 21111                           ;psect for function i1___lmul
 21112  2ED3                     i1___lmul:	
 21113                           
 21114                           ;incstack = 0
 21115                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 21116  2ED3  3000               	movlw	0
 21117  2ED4  00FB               	movwf	i1___lmul@product+3
 21118  2ED5  3000               	movlw	0
 21119  2ED6  00FA               	movwf	i1___lmul@product+2
 21120  2ED7  3000               	movlw	0
 21121  2ED8  00F9               	movwf	i1___lmul@product+1
 21122  2ED9  3000               	movlw	0
 21123  2EDA  00F8               	movwf	i1___lmul@product
 21124  2EDB                     i1l6170:	
 21125  2EDB  1C70               	btfss	i1___lmul@multiplier,0
 21126  2EDC  2EE5               	goto	i1l6174
 21127  2EDD  0874               	movf	i1___lmul@multiplicand,w
 21128  2EDE  07F8               	addwf	i1___lmul@product,f
 21129  2EDF  0875               	movf	i1___lmul@multiplicand+1,w
 21130  2EE0  3DF9               	addwfc	i1___lmul@product+1,f
 21131  2EE1  0876               	movf	i1___lmul@multiplicand+2,w
 21132  2EE2  3DFA               	addwfc	i1___lmul@product+2,f
 21133  2EE3  0877               	movf	i1___lmul@multiplicand+3,w
 21134  2EE4  3DFB               	addwfc	i1___lmul@product+3,f
 21135  2EE5                     i1l6174:	
 21136  2EE5  3001               	movlw	1
 21137  2EE6                     u546_25:	
 21138  2EE6  35F4               	lslf	i1___lmul@multiplicand,f
 21139  2EE7  0DF5               	rlf	i1___lmul@multiplicand+1,f
 21140  2EE8  0DF6               	rlf	i1___lmul@multiplicand+2,f
 21141  2EE9  0DF7               	rlf	i1___lmul@multiplicand+3,f
 21142  2EEA  0B89               	decfsz	9,f
 21143  2EEB  2EE6               	goto	u546_25
 21144  2EEC  3001               	movlw	1
 21145  2EED                     u547_25:	
 21146  2EED  36F3               	lsrf	i1___lmul@multiplier+3,f
 21147  2EEE  0CF2               	rrf	i1___lmul@multiplier+2,f
 21148  2EEF  0CF1               	rrf	i1___lmul@multiplier+1,f
 21149  2EF0  0CF0               	rrf	i1___lmul@multiplier,f
 21150  2EF1  0B89               	decfsz	9,f
 21151  2EF2  2EED               	goto	u547_25
 21152  2EF3  0873               	movf	i1___lmul@multiplier+3,w
 21153  2EF4  0472               	iorwf	i1___lmul@multiplier+2,w
 21154  2EF5  0471               	iorwf	i1___lmul@multiplier+1,w
 21155  2EF6  0470               	iorwf	i1___lmul@multiplier,w
 21156  2EF7  1D03               	skipz
 21157  2EF8  2EDB               	goto	i1l6170
 21158  2EF9  087B               	movf	i1___lmul@product+3,w
 21159  2EFA  00F3               	movwf	?i1___lmul+3
 21160  2EFB  087A               	movf	i1___lmul@product+2,w
 21161  2EFC  00F2               	movwf	?i1___lmul+2
 21162  2EFD  0879               	movf	i1___lmul@product+1,w
 21163  2EFE  00F1               	movwf	?i1___lmul+1
 21164  2EFF  0878               	movf	i1___lmul@product,w
 21165  2F00  00F0               	movwf	?i1___lmul
 21166  2F01  0008               	return
 21167  2F02                     __end_ofi1___lmul:	
 21168                           
 21169                           	psect	text80
 21170  277E                     __ptext80:	
 21171 ;; *************** function i1___aldiv *****************
 21172 ;; Defined at:
 21173 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 21174 ;; Parameters:    Size  Location     Type
 21175 ;;  divisor         4    0[BANK0 ] long 
 21176 ;;  dividend        4    4[BANK0 ] long 
 21177 ;; Auto vars:     Size  Location     Type
 21178 ;;  __aldiv         4   10[BANK0 ] long 
 21179 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 21180 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 21181 ;; Return value:  Size  Location     Type
 21182 ;;                  4    0[BANK0 ] long 
 21183 ;; Registers used:
 21184 ;;		wreg, status,2, status,0
 21185 ;; Tracked objects:
 21186 ;;		On entry : 0/0
 21187 ;;		On exit  : 0/0
 21188 ;;		Unchanged: 0/0
 21189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21190 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21191 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21193 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21194 ;;Total ram usage:       15 bytes
 21195 ;; Hardware stack levels used:    1
 21196 ;; This function calls:
 21197 ;;		Nothing
 21198 ;; This function is called by:
 21199 ;;		_modulation
 21200 ;; This function uses a non-reentrant model
 21201 ;;
 21202                           
 21203                           
 21204                           ;psect for function i1___aldiv
 21205  277E                     i1___aldiv:	
 21206                           
 21207                           ;incstack = 0
 21208                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 21209  277E  0020               	movlb	0	; select bank0
 21210  277F  01A9               	clrf	i1___aldiv@sign
 21211  2780  1FA3               	btfss	i1___aldiv@divisor+3,7
 21212  2781  2F8F               	goto	i1l2053
 21213  2782  09A0               	comf	i1___aldiv@divisor,f
 21214  2783  09A1               	comf	i1___aldiv@divisor+1,f
 21215  2784  09A2               	comf	i1___aldiv@divisor+2,f
 21216  2785  09A3               	comf	i1___aldiv@divisor+3,f
 21217  2786  0AA0               	incf	i1___aldiv@divisor,f
 21218  2787  1903               	skipnz
 21219  2788  0AA1               	incf	i1___aldiv@divisor+1,f
 21220  2789  1903               	skipnz
 21221  278A  0AA2               	incf	i1___aldiv@divisor+2,f
 21222  278B  1903               	skipnz
 21223  278C  0AA3               	incf	i1___aldiv@divisor+3,f
 21224  278D  01A9               	clrf	i1___aldiv@sign
 21225  278E  0AA9               	incf	i1___aldiv@sign,f
 21226  278F                     i1l2053:	
 21227  278F  1FA7               	btfss	i1___aldiv@dividend+3,7
 21228  2790  2FA0               	goto	i1l6192
 21229  2791  09A4               	comf	i1___aldiv@dividend,f
 21230  2792  09A5               	comf	i1___aldiv@dividend+1,f
 21231  2793  09A6               	comf	i1___aldiv@dividend+2,f
 21232  2794  09A7               	comf	i1___aldiv@dividend+3,f
 21233  2795  0AA4               	incf	i1___aldiv@dividend,f
 21234  2796  1903               	skipnz
 21235  2797  0AA5               	incf	i1___aldiv@dividend+1,f
 21236  2798  1903               	skipnz
 21237  2799  0AA6               	incf	i1___aldiv@dividend+2,f
 21238  279A  1903               	skipnz
 21239  279B  0AA7               	incf	i1___aldiv@dividend+3,f
 21240  279C  3001               	movlw	1
 21241  279D  00FC               	movwf	??i1___aldiv
 21242  279E  087C               	movf	??i1___aldiv,w
 21243  279F  06A9               	xorwf	i1___aldiv@sign,f
 21244  27A0                     i1l6192:	
 21245  27A0  3000               	movlw	0
 21246  27A1  00AD               	movwf	i1___aldiv@quotient+3
 21247  27A2  3000               	movlw	0
 21248  27A3  00AC               	movwf	i1___aldiv@quotient+2
 21249  27A4  3000               	movlw	0
 21250  27A5  00AB               	movwf	i1___aldiv@quotient+1
 21251  27A6  3000               	movlw	0
 21252  27A7  00AA               	movwf	i1___aldiv@quotient
 21253  27A8  0823               	movf	i1___aldiv@divisor+3,w
 21254  27A9  0422               	iorwf	i1___aldiv@divisor+2,w
 21255  27AA  0421               	iorwf	i1___aldiv@divisor+1,w
 21256  27AB  0420               	iorwf	i1___aldiv@divisor,w
 21257  27AC  1903               	skipnz
 21258  27AD  2FE9               	goto	i1l6214
 21259  27AE  01A8               	clrf	i1___aldiv@counter
 21260  27AF  0AA8               	incf	i1___aldiv@counter,f
 21261  27B0                     i1l6200:	
 21262  27B0  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21263  27B1  2FBE               	goto	i1l6202
 21264  27B2  3001               	movlw	1
 21265  27B3                     u552_25:	
 21266  27B3  35A0               	lslf	i1___aldiv@divisor,f
 21267  27B4  0DA1               	rlf	i1___aldiv@divisor+1,f
 21268  27B5  0DA2               	rlf	i1___aldiv@divisor+2,f
 21269  27B6  0DA3               	rlf	i1___aldiv@divisor+3,f
 21270  27B7  0B89               	decfsz	9,f
 21271  27B8  2FB3               	goto	u552_25
 21272  27B9  3001               	movlw	1
 21273  27BA  00FC               	movwf	??i1___aldiv
 21274  27BB  087C               	movf	??i1___aldiv,w
 21275  27BC  07A8               	addwf	i1___aldiv@counter,f
 21276  27BD  2FB0               	goto	i1l6200
 21277  27BE                     i1l6202:	
 21278  27BE  3001               	movlw	1
 21279  27BF                     u554_25:	
 21280  27BF  35AA               	lslf	i1___aldiv@quotient,f
 21281  27C0  0DAB               	rlf	i1___aldiv@quotient+1,f
 21282  27C1  0DAC               	rlf	i1___aldiv@quotient+2,f
 21283  27C2  0DAD               	rlf	i1___aldiv@quotient+3,f
 21284  27C3  0B89               	decfsz	9,f
 21285  27C4  2FBF               	goto	u554_25
 21286  27C5  0823               	movf	i1___aldiv@divisor+3,w
 21287  27C6  0227               	subwf	i1___aldiv@dividend+3,w
 21288  27C7  1D03               	skipz
 21289  27C8  2FD3               	goto	u555_25
 21290  27C9  0822               	movf	i1___aldiv@divisor+2,w
 21291  27CA  0226               	subwf	i1___aldiv@dividend+2,w
 21292  27CB  1D03               	skipz
 21293  27CC  2FD3               	goto	u555_25
 21294  27CD  0821               	movf	i1___aldiv@divisor+1,w
 21295  27CE  0225               	subwf	i1___aldiv@dividend+1,w
 21296  27CF  1D03               	skipz
 21297  27D0  2FD3               	goto	u555_25
 21298  27D1  0820               	movf	i1___aldiv@divisor,w
 21299  27D2  0224               	subwf	i1___aldiv@dividend,w
 21300  27D3                     u555_25:	
 21301  27D3  1C03               	skipc
 21302  27D4  2FDE               	goto	i1l6210
 21303  27D5  0820               	movf	i1___aldiv@divisor,w
 21304  27D6  02A4               	subwf	i1___aldiv@dividend,f
 21305  27D7  0821               	movf	i1___aldiv@divisor+1,w
 21306  27D8  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21307  27D9  0822               	movf	i1___aldiv@divisor+2,w
 21308  27DA  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21309  27DB  0823               	movf	i1___aldiv@divisor+3,w
 21310  27DC  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21311  27DD  142A               	bsf	i1___aldiv@quotient,0
 21312  27DE                     i1l6210:	
 21313  27DE  3001               	movlw	1
 21314  27DF                     u556_25:	
 21315  27DF  36A3               	lsrf	i1___aldiv@divisor+3,f
 21316  27E0  0CA2               	rrf	i1___aldiv@divisor+2,f
 21317  27E1  0CA1               	rrf	i1___aldiv@divisor+1,f
 21318  27E2  0CA0               	rrf	i1___aldiv@divisor,f
 21319  27E3  0B89               	decfsz	9,f
 21320  27E4  2FDF               	goto	u556_25
 21321  27E5  3001               	movlw	1
 21322  27E6  02A8               	subwf	i1___aldiv@counter,f
 21323  27E7  1D03               	btfss	3,2
 21324  27E8  2FBE               	goto	i1l6202
 21325  27E9                     i1l6214:	
 21326  27E9  0829               	movf	i1___aldiv@sign,w
 21327  27EA  1903               	btfsc	3,2
 21328  27EB  2FF7               	goto	i1l6218
 21329  27EC  09AA               	comf	i1___aldiv@quotient,f
 21330  27ED  09AB               	comf	i1___aldiv@quotient+1,f
 21331  27EE  09AC               	comf	i1___aldiv@quotient+2,f
 21332  27EF  09AD               	comf	i1___aldiv@quotient+3,f
 21333  27F0  0AAA               	incf	i1___aldiv@quotient,f
 21334  27F1  1903               	skipnz
 21335  27F2  0AAB               	incf	i1___aldiv@quotient+1,f
 21336  27F3  1903               	skipnz
 21337  27F4  0AAC               	incf	i1___aldiv@quotient+2,f
 21338  27F5  1903               	skipnz
 21339  27F6  0AAD               	incf	i1___aldiv@quotient+3,f
 21340  27F7                     i1l6218:	
 21341  27F7  082D               	movf	i1___aldiv@quotient+3,w
 21342  27F8  00A3               	movwf	?i1___aldiv+3
 21343  27F9  082C               	movf	i1___aldiv@quotient+2,w
 21344  27FA  00A2               	movwf	?i1___aldiv+2
 21345  27FB  082B               	movf	i1___aldiv@quotient+1,w
 21346  27FC  00A1               	movwf	?i1___aldiv+1
 21347  27FD  082A               	movf	i1___aldiv@quotient,w
 21348  27FE  00A0               	movwf	?i1___aldiv
 21349  27FF  0008               	return
 21350  2800                     __end_ofi1___aldiv:	
 21351  007E                     btemp	set	126	;btemp
 21352  007E                     int$flags	set	126
 21353  007E                     wtemp	set	126
 21354  007E                     wtemp0	set	126
 21355  0080                     wtemp1	set	128
 21356  0082                     wtemp2	set	130
 21357  0084                     wtemp3	set	132
 21358  0086                     wtemp4	set	134
 21359  0088                     wtemp5	set	136
 21360  007F                     wtemp6	set	127
 21361  007E                     ttemp	set	126
 21362  007E                     ttemp0	set	126
 21363  0081                     ttemp1	set	129
 21364  0084                     ttemp2	set	132
 21365  0087                     ttemp3	set	135
 21366  007F                     ttemp4	set	127
 21367  007E                     ltemp	set	126
 21368  007E                     ltemp0	set	126
 21369  0082                     ltemp1	set	130
 21370  0086                     ltemp2	set	134
 21371  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         295
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      77
    BANK3            80      9      80
    BANK4            80      8      74
    BANK5            80      9      53
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  944312
                                              0 BANK4      8     8      0
                                              0 BANK5      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcCosArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               12    12      0  173640
                                             48 BANK2     12    12      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   31918
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   37516
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   33033
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   32189
                                             34 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              20    14      6   31973
                                             14 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14526
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  177510
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  166860
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  162707
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  145969
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   44643
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   80982
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    6973
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   26716
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               2     2      0   15844
                                             14 BANK2      2     2      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0  109718
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   89389
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   76452
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   18482
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1757
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    4202
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18627
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7960
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8987
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8429
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6700
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      8      4A      13       92.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      9      35      15       66.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     23A      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     23A      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Jan 15 21:05:02 2017

                        _update_mode 2FC8                         ___altoft@exp 00AE  
                        __CFG_CP$OFF 0000                        ___altoft@sign 00AF  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E7  
                       ___awdiv@sign 00A6                   _topTactile_pressed 01CC  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 0BD2  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l600 2D37  
                                l380 070E                                  l374 0613  
                                l366 0549                 __size_of_adc_convert 0013  
                                l396 1026                                  l830 2079  
                                l831 209D                                  l823 206A  
                                l825 206D                                  l657 1837  
                                l826 2070                                  l818 252C  
                                l827 2073                                  l819 2550  
                                l828 2076                                  l990 2334  
                                l994 235E                                  _GIE 005F  
                                _RB1 0069                                  _PR2 001B  
       solidring_tactiles@ring_delay 00B4                                  _cos 2681  
                                _map 1A09                                  _exp 1363  
                                _log 1F2F                                  _isr 0004  
                                _tap 02A0                                  _sin 0820  
                                _pow 112B                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       __CFG_FOSC$HS 0000                  set_subdivision@tmpX 0135  
            __end_of_set_leds_bottom 209E                         __CFG_LVP$OFF 0000  
                     i1___aldiv@sign 0029                         ___ftdiv@cntr 00D8  
                       ___ftdiv@sign 00DD                                 l1002 237E  
                               l1006 23AC                                 l1032 2558  
                               l1025 2007                                 l1017 2FF8  
                               l1027 200D                                 l1043 25A2  
                               l1028 2014                                 l1029 2028  
                               l2053 188C                                 l1450 0BE9  
                               l2172 25F0                                 l2173 25F8  
                               l2165 25DD                                 l2256 19EF  
                               l1464 0CA4                                 l2196 10D4  
                               l2368 114F                                 l2386 0935  
                               l1748 22C9                                 ?_cos 014C  
                               ?_map 00DE                                 l8010 1E3C  
                               l8006 1E34                                 l1998 2DC1  
                               l9000 12EE                                 l8034 199B  
                               l9002 12F2                                 l8060 19E6  
                               l8052 19CB                                 l8212 1D33  
                               l8116 23EB                                 l8108 23C7  
                               ?_exp 0148                                 ?_log 013E  
                               l8062 19F2                                 l8054 19D9  
                               l8216 1D3B                                 l8400 2E64  
                               l8136 2045                                 l9032 134D  
                               l9016 1327                                 l9008 130D  
                               l8066 1A00                                 l8226 1DA8  
                               l8410 1F53                                 l9018 132D  
                               l9026 1341                                 l9122 0CF3  
                               l9114 0CE7                                 l9106 0C9C  
                               l8148 2E38                                 l8164 1C81  
                               l8236 267A                                 l8324 2FA9  
                               l9212 1BDB                                 l8340 1689  
                               l8316 201C                                 l9124 0D3D  
                               l9052 0BDE                                 ?_isr 0070  
                               l8158 1C6B                                 l8078 21A5  
                               l8246 1B2C                                 l9206 1BC1  
                               l7800 25E2                                 l8280 1B9E  
                               l8256 1B4E                                 l8432 1370  
                               l8416 1F66                                 l9320 0E32  
                               l9128 0D63                                 l9080 0C45  
                               l9072 0C1D                                 l9136 0DA1  
                               l9400 03BA                                 l7802 25EA  
                               l8186 1CDB                                 l8178 1CC2  
                               l9154 2329                                 l8442 1395  
                               l9234 1E9C                                 l8354 14F1  
                               l9330 0F90                                 l9322 0E78  
                               l9314 0DFD                                 l9074 0C3A  
                               l9058 0BFB                                 l7820 2514  
                               l8380 08F1                                 l9164 2350  
                               l8276 1B96                                 l9228 1E7F  
                               l9340 0FC1                                 l9324 0EBE  
                               l7822 251C                                 l8198 2EAD  
                               l8454 13F4                                 l9270 1AA8  
                               l9350 0FE4                                 l9326 0F04  
                               l9334 0FA4                                 l8710 18AD  
                               l8702 189D                                 l9094 0C6D  
                               l9414 0435                                 l7824 2524  
                               l7816 2504                                 l8800 22A2  
                               l7920 10B3                                 l8368 0855  
                               l9176 2373                                 l8448 13B9  
                               l8552 11BD                                 l8544 1163  
                               l9248 1909                                 l9272 1AAC  
                               l9344 0FCA                                 l9328 0F4A  
                               l9336 0FBB                                 l8632 217E  
                               l8640 2189                                 l8624 216E  
                               l8720 18DB                                 l8712 18BB  
                               l9096 0C75                                 l9424 0493  
                               l7818 250C                                 l7914 10A0  
                               l8490 2F56                                 l8482 2F41  
                               l7770 2F6B                                 l9186 239A  
                               l8538 1157                                 l9290 1B19  
                               l9274 1AB0                                 l9282 1AC1  
                               l9338 0E14                                 l9098 0C84  
                               l9450 0616                                 l9442 0591  
                               l7844 2080                                 l7828 2533  
                               l8804 22A6                                 l7932 10E6  
                               l7916 10AA                                 l7908 108D  
                               l7852 2DBB                                 l8476 149C  
                               l8556 11DD                                 l9276 1AB4  
                               l9284 1ADA                                 l9268 1AA2  
                               l8740 2463                                 l8724 18E6  
                               l9460 06AD                                 l9428 04D3  
                               ?_sin 013E                                 l7790 25BA  
                               l7926 10C6                                 l7918 10AF  
                               l7774 2F75                                 l8398 2E54  
                               l9278 1ABA                                 l8670 0A24  
                               l9462 06E4                                 l9446 05DB  
                               l7792 25C4                                 l7936 10F8  
                               l7928 10D0                                 l8496 2F5C  
                               l8488 2F47                                 l8728 18F4  
                               l8920 258C                                 l8912 257B  
                               l9472 079B                                 l9464 0711  
                               l9456 065E                                 l9384 039B  
                               l7794 25C9                                 l7786 25B3  
                               l7946 1113                                 l7890 1064  
                               l7874 20EF                                 l7954 20B5  
                               l8658 26CB                                 l8746 246E  
                               l8674 0B66                                 l8930 25A6  
                               l9394 03AB                                 l8860 1853  
                               l7876 20FF                                 l8772 24A5  
                               l8764 2494                                 l8756 2476  
                               l8684 214E                                 l9484 07CE  
                               l9468 0751                                 ?_pow 0155  
                               l7886 105D                                 l7982 1DDD  
                               l7958 20CB                                 l8758 2482  
                               l8950 1276                                 l8942 126A  
                               l8918 2587                                 l7896 1073  
                               l7976 1DC7                                 l8768 249D  
                               l8928 259E                                 l8858 184A  
                               l8794 229C                                 l7994 1E18  
                               l8970 12A5                                 l8938 1257  
                               l8890 2FEB                                 l8796 229E  
                               l8798 22A0                                 l7998 1E20  
                               l9950 0FAA                                 l8974 12B7  
                               l9960 22C4                                 l9952 1AC6  
                               l8976 12BF                                 l8896 2FF5  
                               l9962 2539                                 l9954 22B5  
                               l8898 2FFC                                 l9964 2086  
                               l9956 22BA                                 l8988 12D9  
                               l9958 22BF                                 _PEIE 005E  
                               _RCIE 048D                                 u8125 10A1  
                               u9025 11AE                                 u9105 2D8F  
                               u8155 10B4                                 u8315 1E21  
                               u8325 1E27                                 u8405 19A2  
                               u9045 2DDF                                 u9205 18BC  
                               u8095 108E                                 u9055 2E17  
                               u9215 18D0                                 u8185 10C7  
                               u9305 2483                                 u8505 23C5  
                               u9065 215F                                 u9225 18DC  
                               u8355 1E3D                                 u8435 19CC  
                               u9315 248D                                 u8515 23E9  
                               u9420 1851                                 u9405 1830  
                               u8605 1CC3                                 u8365 1E43  
                               u8285 1DE9                                 u9325 2495  
                               u9415 1843                                 u8615 1CD2  
                               u8295 1DF9                                 u8800 08ED  
                               u7905 25FF                                 u7825 25BF  
                               u8625 1CDC                                 u8465 19E7  
                               u9185 18B0                                 u8810 08EE  
                               u8740 2FA7                                 u7845 25D8  
                               u8725 1B57                                 u9285 2479  
                               u9605 1250                                 u9525 256A  
                               u8910 13D2                                 u9375 07E4  
                               u7775 2F76                                 u9615 1263  
                               u9455 2FDB                                 u8920 13D3  
                               u9385 07EA                                 u7865 25E5  
                               u8585 1C93                                 u7945 2DC2  
                               u7785 2F7D                                 u8595 1CA3  
                               u7955 2DC7                                 u8845 2E59  
                               u9645 1280                                 u7985 20F4  
                               u8955 1493                                 u9755 12FE  
                               u9925 0C4F                                 u9895 0C26  
                 scaleA100kPot@input 0167                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                    _scaleA10kPot$2860 01EA  
                  _scaleA10kPot$2861 01ED                                 _iCnt 025D  
                               _main 0376                         ___ftpack@arg 00A0  
                               cos@f 014C                         ___ftpack@exp 00A3  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               map@x 00DE                                 btemp 007E  
                               exp@x 0148                                 log@x 013E  
                      __CFG_BOREN$ON 0000                                 sin@f 013E  
                               sin@y 0142                                 ltemp 007E  
                               pow@x 0155                                 pow@y 0158  
                               start 02F3                                 ttemp 007E  
                               wtemp 007E         __end_of_getSwitchBypassState 2006  
                    _expressModeCnst 01E2         updateSwitchTap@tapCntDivisor 00C2  
       __end_of_setSwitchBypassState 2DF0                      ?i1_set_leds_top 0070  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 00BC  
                       ___ftmul@sign 00BD                      __end_of_InitApp 2F32  
                       ___fttol@exp1 012D                                ??_cos 00F0  
                              ??_map 00ED                __size_of_calcCosArray 0081  
                              ??_exp 014B                                ??_log 0141  
                       ___fttol@lval 0129                                ??_isr 003A  
                              ??_sin 0141                                ??_pow 015B  
                    _switchBypass_up 0268            __size_of_initSwitchBypass 000F  
                    __end_of___aldiv 18FD                                ?_main 0070  
                     i1___awdiv@sign 0076         getModulationDelayTime@subDiv 012E  
                    __end_of___awdiv 24AA                      __end_of___ftadd 112B  
                              _CCPR1 0291                                _CCPR2 0298  
                              _CCPR3 0311                                _CCPR4 0318  
                              _CCPR5 031C                        __CFG_WDTE$OFF 0000  
                    __end_of___ftdiv 1CFD                      __end_of___ftneg 2CE8  
                              u10005 0CB5                                u10015 0CCC  
                              u10025 0CFC                                u10035 0D11  
                              u10125 2349                                u10045 0D25  
                              u10305 0E1B                                u10065 0D42  
                    __end_of___ftmul 1E64                                u10405 056F  
                              u10415 058F                                u10185 2393  
                              u10265 1B14                                u10425 05F5  
                              u10275 0DD7                                u10435 0611  
                    ___awdiv@divisor 00A0                                u10285 0DEB  
                              u10445 063C                                u10365 0413  
                              u10295 0DFB                                u10455 065C  
                              u10375 0433                                u10385 04B1  
                    __end_of___ftsub 2ED3                                u10395 04D1  
                    __end_of___fttol 1A09                                u10485 072F  
                              u10495 074F                                i1l137 02EE  
                              i1l138 001B                                i1l139 0101  
                              i1l818 22FC                                i1l819 231E  
                    ___awdiv@counter 00A5                                _RCREG 0199  
                              _SPBRG 019B                   __end_ofsin@coeff_a 2848  
                 __end_ofsin@coeff_b 2854                                _TXREG 019A  
                              _UQEnd 005A                  _ConfigureOscillator 2CCB  
        __size_of_setLongBypassState 0021                     _setPresetDisplay 2029  
                       ?_init_timer0 0070                         ?_init_timer2 0070  
                ___lmul@multiplicand 00A4                         ___lltoft@exp 00AD  
                    _switchTap_state 01E6                    ??_setLongTapState 00A2  
                      ___awtoft@sign 00AD                                _floor 1CFD  
                              _ldexp 1B1F                                _frexp 2191  
                              _myBuf 03A0                                _errno 0251  
           _getModulationSubdivision 2F32                        ___ftpack@sign 00A4  
                              _timer 0056                     __end_ofi1___lmul 2F02  
                              sin@x2 0148                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                      __end_of_wait_ms 1035  
                              pow@yi 0163                      scaleA10kPot@pwm 01E7  
                 __size_of_USARTInit 0044                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003          __end_of_read_bottom_tactile 2369  
                 __size_ofi1___aldiv 0082                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                 __size_ofi1___awdiv 0051                set_subdivision@scalar 0132  
     __size_of_setSwitchBypassRelays 0036        __end_of_setSwitchBypassRelays 2FC8  
                       _calcCosArray 26FD                          exp@exponent 0152  
               ?_ConfigureOscillator 0070                   _updateSwitchBypass 1241  
                        ldexp@newexp 0141              __end_of_updateSwitchTap 0DBA  
                    __initialization 02F5                          log@exponent 0142  
        updateModulationArray@iAngle 015B              _updateSwitchBypassState 07FF  
                       __end_of_main 07D8              __size_of_InitializeTaps 0026  
                i1___lmul@multiplier 0070               __size_of_scaleA100kPot 0085  
                        modCos@angle 0134                  ?_updateSwitchBypass 0070  
                     __CFG_LPBOR$OFF 0000               ring_tactiles@iLed_1544 00B5  
                        modCos@shift 013F                      _set_subdivision 1A94  
        updateModulationArray@subDiv 0157                               ??_main 025E  
                      ___fttol@sign1 0128   __end_ofi1_getModulationSubdivision 2EA5  
         i1_getModulationSubdivision 2E79                        ?_scaleA10kPot 0167  
            __size_of_FLASH_ReadWord 0020            setLongBypassState@f_state 00A0  
         __end_of_solidring_tactiles 2211                     ?_set_leds_bottom 00A0  
                             ?_floor 012E                               ?_ldexp 013E  
                             ?_frexp 00A0                     __end_of___altoft 2117  
                             _ADRESH 009C                               _ADRESL 009B  
                   ___awdiv@dividend 00A2                     __end_of___awtoft 2E4F  
                   __end_of___ftpack 260F                 ??_updateSwitchBypass 00BC  
                   __end_of___lltoft 2E79                               i1l2053 278F  
                             i1l6200 27B0                               i1l7000 0181  
                             i1l6210 27DE                               i1l6202 27BE  
                             i1l7002 0191                               i1l7004 0193  
                             i1l6214 27E9                               i1l7030 020D  
                             i1l7014 01C7                               i1l7022 01EE  
                             i1l7032 021C                               i1l7016 01D0  
                             i1l6218 27F7                               i1l6170 2EDB  
                             i1l7042 0264                               i1l7050 02B6  
                             i1l7026 0202                               i1l7034 021E  
                             i1l7018 01DF                               i1l6174 2EE5  
                             i1l7062 02E6                               i1l6192 27A0  
                             i1l7066 02EB                               i1l7068 02ED  
                             i1l6900 2EA0                               i1l6912 2411  
                             i1l6930 2430                               i1l6940 244B  
                             i1l6918 241C                               i1l6870 22EA  
                             i1l6944 2453                               i1l6936 2442  
                             i1l6928 2424                               i1l6872 22F0  
                             i1l6874 22F6                               i1l6866 22DE  
                             i1l6892 2E8D                               i1l6868 22E4  
                             i1l6972 011B                               i1l6894 2E9B  
                             i1l6886 2E88                               i1l6878 2302  
                             i1l6978 0135                               i1l9966 2307  
                             _PMADRH 0192                               _PMADRL 0191  
                             _PMDATH 0194                               _PMDATL 0193  
                             _PMCON2 0196                               u702_23 0246  
                             u703_25 025B                               u552_25 27B3  
                             u705_25 02C8                               u554_25 27BF  
                             u546_25 2EE6                               u706_25 02E1  
                             u555_25 27D3                               u547_25 2EED  
                             u556_25 27DF                               u670_25 2427  
                             u680_23 00D3                               u672_25 2431  
                             u673_25 243B                               u681_25 00E3  
                             u690_23 0151                               u674_25 2443  
                             u682_25 00EC                               u684_25 0112  
                             u686_25 012C                               u695_23 01B5  
                     _debounce_count 0249                          modSaw@angle 012E  
                     _debounce_mode1 024B                       _debounce_mode2 024D  
                        modSaw@shift 013C                               _URBuff 0320  
                          ??_InitApp 00A0                ??_ConfigureOscillator 00A0  
           __end_of_read_top_tactile 23B7              ?_getModulationDelayTime 0070  
                     __CFG_PWRTE$OFF 0000                               ___ftge 209E  
                             ___lmul 2F62                            ??___aldiv 00A8  
                             ___wmul 2DB8                    _update_selectMode 2551  
                          ??___awdiv 00A4                            ??___ftadd 00C7  
                     __CFG_STVREN$ON 0000                            ??___ftdiv 00D4  
                          ??___ftneg 00C1                            ??___ftmul 00B4  
                          ??___ftsub 00F0                            ??___fttol 0124  
                        modTri@angle 012E                               _modCos 1654  
                   __end_of_init_adc 2CF2                               _modSaw 14BC  
                             _modTri 09EF                     __end_of_init_pwm 2293  
                 ?_update_selectMode 0070                          modTri@shift 0137  
                   ___awdiv@quotient 00A7                __end_of_resetRingLEDs 2D84  
                             _tmpVal 025B                    __end_of_USARTInit 22D7  
                     ??_scaleA10kPot 00F0                    __end_ofi1___aldiv 2800  
                             floor@i 0132                               floor@x 012E  
              ___ftmul@f3_as_product 00B9                    __end_ofi1___awdiv 2458  
            FLASH_ReadWord@flashAddr 00A0                               sin@sgn 014B  
                   __end_of_showSave 2D52                  ??_update_selectMode 00A7  
               _getSwitchBypassState 2002                            ??_wait_ms 00AE  
               _setSwitchBypassState 2DD4                        _scaleA100kPot 18FD  
       __end_of_setExpressionDisplay 2D6A               __size_of_scaleiA10kPot 00CB  
             setLongTapState@f_state 00A0                     __end_ofexp@coeff 281E  
                   __end_oflog@coeff 2839              __end_of__initialization 0372  
                         ___altoft@c 00A8       __end_of_getModulationDelayTime 24FD  
                         ___ftadd@f1 00C1                           ___ftadd@f2 00C4  
                         ___ftge@ff1 00A0                           ___ftge@ff2 00A3  
                  _bypass_turning_on 01C0                         eval_poly@res 013B  
                         ___ftdiv@f1 00D1                           ___ftdiv@f2 00CE  
                         ___ftdiv@f3 00D9                       _top_push_state 004C  
          ??_updateSwitchBypassState 00A2                           ___ftneg@f1 00BE  
                _switchBypass_toggle 0259                           ___awtoft@c 00A8  
              __end_of_ring_tactiles 2407            __end_of_update_selectMode 25AA  
            __end_of_set_subdivision 1B1F                           ___ftmul@f1 00AE  
                         ___ftmul@f2 00B1                           ___ftsub@f1 013A  
                         ___ftsub@f2 0137                           ___fttol@f1 0120  
                   ?_updateSwitchTap 0070                         ?_update_mode 0070  
                     __pcstackCOMMON 0070                         __pidataBANK0 2D19  
                       __pidataBANK2 07FE                         __pidataBANK3 2D9E  
                       __pidataBANK4 1801                           ___lltoft@c 00A8  
                      __end_of_floor 1DB0                        __end_of_ldexp 1BB6  
                      __end_of_frexp 21D1                     _initSwitchBypass 2D0A  
                          ?i1___lmul 0070                _updateModulationArray 0DBA  
                    _doubleTap_state 005C                       _OPTION_REGbits 0095  
                       modCos@period 0142                         modCos@tmpVal 0145  
              ?_getSwitchBypassState 00A0                ?_setSwitchBypassState 00B6  
                     ?_scaleA100kPot 0167                              ??_floor 0131  
                            ??_ldexp 0143                              ??_frexp 00A4  
               __size_of_init_timer0 0007                 __size_of_init_timer2 0009  
                  i1___aldiv@divisor 0020                    i1___aldiv@counter 0028  
                      ?_setPedalMode 0070                           __pbssBANK0 0052  
                         __pbssBANK2 016A                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                           __pbssBANK7 03A0  
                 __size_of_eval_poly 0072                     ??i1_set_leds_top 0074  
                    __CFG_VCAPEN$OFF 0000                   __size_of_modSawRev 001C  
                 __size_of_modSquare 003D             __end_of_setPresetDisplay 2063  
                         _delay_time 0044                     _long_press_limit 004A  
       __size_of_setDoublePressState 003D                           _delayfound 024F  
                         __pmaintext 0376                       _InitializeTaps 07D8  
                            ?___ftge 00A0                              ?___lmul 00A0  
                            ?___wmul 012E       updateModulationArray@thisAngle 0159  
                         __pintentry 0004                        _scaleiA10kPot 1E64  
                         _blink_rate 004E                        ??_adc_convert 00A2  
                            ?_modCos 0134                            ?___altoft 00A8  
                            ?_modSaw 012E                              ?_modTri 012E  
                     ___lmul@product 00A8                      _setLongTapState 2D84  
                          ?___awtoft 00A8                            ?___ftpack 00A0  
                modSquare@inflection 014B                            ?___lltoft 00A8  
                         ??i1___lmul 0078           ??_getModulationSubdivision 00A2  
                     _FLASH_ReadWord 0800                   i1___awdiv@dividend 0072  
    __end_of_updateSwitchBypassState 0800                          modulation@x 002E  
                        modulation@y 0032                           _ldexp$2654 0145  
                    _debounce_bypass 0247                       ??_setPedalMode 00A7  
                 USARTWriteInt@F3536 0234                        _suspend_blink 016A  
       setSwitchBypassRelays@f_state 00B2                         modSaw@period 013F  
                            _UQFront 005B                            ?_init_adc 0070  
                          ?_init_pwm 0070                     _adjust_mod_delay 01BE  
                            _InitApp 2F02                 __end_of_scaleA10kPot 1C54  
             __end_of_InitializeTaps 07FE                        ?_set_leds_top 00A0  
                         _knob1_prev 01CD           __size_of_update_selectMode 0059  
                 i1___awdiv@quotient 0077                           _knob2_prev 01CF  
                         _knob3_prev 01D1                           _knob4_prev 01D3  
                         _knob5_prev 01D5                     ?_set_subdivision 012E  
                          ?_showSave 0070                              ___aldiv 187B  
                     ?_scaleiA10kPot 0167                      __size_of___ftge 003C  
                            ___awdiv 2458                      __size_of___lmul 0030  
                            ___ftadd 1035                              ___ftdiv 1C54  
                            ___ftneg 2CDF                           _knob_1_pos 01AC  
                         _knob_2_pos 01AE                      __size_of___wmul 001C  
                            ___ftmul 1DB0                           _knob_3_pos 01B0  
                            ___ftsub 2EA5                              ___fttol 1982  
                         _knob_4_pos 01B2                           _knob_5_pos 01B4  
                  _switchTap_pressed 016B                           ??___altoft 00AC  
               _setExpressionDisplay 2D52               ?_updateModulationArray 0070  
                    __size_of_modCos 01AC               __end_of_FLASH_ReadWord 0820  
                    __size_of_modSaw 0198                           ??___awtoft 00AB  
                         ??___ftpack 00A5                      __size_of_modTri 01E3  
                  __end_of_eval_poly 2681                   InitializeTaps@itap 00A1  
                         ??___lltoft 00AC                              __ptext1 2551  
                            __ptext2 2FC8                              __ptext3 0BD2  
                            __ptext4 2D84                              __ptext5 187B  
                            __ptext6 1241                              __ptext7 2E0C  
                            __ptext8 2154                              __ptext9 2D3E  
         __end_of_setLongBypassState 2E2D          ?i1_getModulationSubdivision 0070  
             ??_getSwitchBypassState 00A2                    __end_of_modSawRev 2E0C  
                          _T2CONbits 001C                         __size_of_cos 007C  
                       __size_of_map 008B                         __size_of_exp 0159  
                       __size_of_log 00D1                         __size_of_isr 02EF  
             ??_setSwitchBypassState 00B8                         __size_of_sin 01CF  
                       __size_of_pow 0116                  __end_of_adc_convert 2D3E  
                       modTri@period 013A                    __end_of_modSquare 2154  
                    ??_scaleA100kPot 00F0                     ___aldiv@dividend 00A4  
                       modTri@tmpVal 013D                              _wait_ms 1003  
                            clrloop0 2CFF                 end_of_initialization 0372  
                            exp@sign 0154                           _modulation 2211  
                            init_ram 2CF2                           ??_init_adc 00A0  
                            initloop 2CF3                           ??_init_pwm 00A0  
       updateSwitchBypassState@state 00A0                   _solidring_tactiles 21D1  
                      _longTap_timer 01B8                        _longTap_state 004F  
                      _longTap_start 01C5                       ??_set_leds_top 00A4  
                  ?_read_top_tactile 0070                      ?_InitializeTaps 0070  
                            pow@sign 0162                    scaleA10kPot@input 0167  
            __end_of_setLongTapState 2D9E                _setSwitchBypassRelays 2F92  
             i1set_leds_top@ledState 0072                   ??_read_top_tactile 00B2  
                          _RCSTAbits 019D                           ??_showSave 00B7  
                   _mod_time_changed 01E4                     _longBypass_timer 01B6  
                   ___aldiv@quotient 00AB                     _longBypass_state 005D  
                   _longBypass_start 01C4         __size_of_read_bottom_tactile 004A  
                ?_solidring_tactiles 0070                         __pstringtext 2800  
          FLASH_ReadWord@GIEBitValue 00A2                ?_setExpressionDisplay 0070  
               __size_of_update_mode 0038                      ?_FLASH_ReadWord 00A0  
                  _expressionChannel 01E3                            _PORTAbits 000C  
                          _PORTCbits 000E                            _PORTDbits 000F  
                          _PORTEbits 0010                           _test_timer 0241  
                          _USARTInit 2293                            _TRISBbits 008D  
                          _TRISCbits 008E                            _TRISDbits 008F  
                          _TRISEbits 0090                            _TRISFbits 030C  
                          _TRISGbits 030D                            i1___aldiv 277E  
                          i1___awdiv 2407                 ??_solidring_tactiles 00B2  
        __end_of_ConfigureOscillator 2CCF                           map@out_max 00EA  
                         map@out_min 00E7          __size_of_updateSwitchBypass 0122  
           __end_of_initSwitchBypass 2D19                          _CCP1CONbits 0293  
                        ___ftdiv@exp 00DC             __size_of_set_leds_bottom 003B  
                        _CCP2CONbits 029A                            _TXSTAbits 019E  
               _switchBypass_pressed 01BA                          _CCP3CONbits 0313  
                        _CCP4CONbits 031A                          _CCP5CONbits 031E  
                        _CCP6CONbits 0613                      ??_scaleiA10kPot 00F0  
                        _CCP7CONbits 0616                          ___ftmul@exp 00B8  
                 adc_convert@channel 00A3                          _CCP8CONbits 0619  
                        _CCP9CONbits 061C                 set_leds_top@ledState 00A2  
                     __end_of___ftge 20DA                 __end_of_setPedalMode 2029  
                     __end_of___lmul 2F92                       __end_of___wmul 2DD4  
                       _double_timer 01A0                          _adc_convert 2D2B  
   __end_of_getModulationSubdivision 2F62                       _switchTap_down 01CB  
                     __end_of_modCos 1800                       __end_of_modSaw 1654  
                     __end_of_modTri 0BD2                       modSawRev@angle 0142  
                         floor@expon 0135                i1___lmul@multiplicand 0074  
                  __size_ofi1___lmul 002F                  start_initialization 02F5  
                         ?_USARTInit 00A0                           eval_poly@d 0137  
                         eval_poly@n 0139                           eval_poly@x 0134  
              _bottomTactile_pressed 01BF                  _setDoublePressState 2154  
                         ldexp@value 013E                           ?i1___aldiv 0020  
                        __end_of_cos 26FD                          __end_of_map 1A94  
                        __end_of_exp 14BC                          __end_of_log 2000  
                        __end_of_isr 02F3                           ?i1___awdiv 0070  
                        __end_of_sin 09EF                          __end_of_pow 1241  
              __size_of_scaleA10kPot 009E                   _adjusted_pot_value 0245  
                        ?_modulation 002E                   scaleiA10kPot@input 0167  
                         frexp@value 00A0               __size_of_resetRingLEDs 001A  
             ?_setSwitchBypassRelays 00B2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                             ??___ftge 00A6  
                           ??___lmul 00A8               ??_setExpressionDisplay 00A4  
                           ??___wmul 00F0                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 0040                          __pdataBANK2 016C  
                        __pdataBANK3 01CD                          __pdataBANK4 0266  
                           ??_modCos 013A                             ??_modSaw 00F0  
                 i1___aldiv@dividend 0024                             ??_modTri 00F0  
                      _tap_iteration 01DD             __size_of_updateSwitchTap 01E8  
                  __size_of___altoft 003D                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065                          __pbssBIGRAM 238A  
                       _scaleA10kPot 1BB6                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
               __end_of_set_leds_top 2551                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 0051  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01E7  
                      __pcstackBANK4 025E                        __pcstackBANK5 02CC  
             __size_of_ring_tactiles 0050                       _expSwitchState 01E1  
   updateModulationArray@iAngle_2353 0156                     i1___lmul@product 0078  
                   scaleiA10kPot@pwm 01E7             ?_updateSwitchBypassState 00A0  
                         sin@coeff_a 2839                           sin@coeff_b 2848  
                 i1___aldiv@quotient 002A                     modCos@inflection 0137  
                      ?_calcCosArray 0070                             ?_InitApp 0070  
              ??_setDoublePressState 00BA                    __size_of_init_adc 000A  
                  __size_of_init_pwm 0041                            _main$2851 02CC  
                          _main$2852 02CF                            _main$2853 02D2  
            ??_updateModulationArray 0150                             ?___aldiv 00A0  
                  ??_set_leds_bottom 00A2                   _currentBypassState 01E0  
                           ?___awdiv 00A0                             ?___ftadd 00C1  
                           ?___ftdiv 00CE                             ?___ftneg 00BE  
                           ?___ftmul 00AE                             ?___ftsub 0137  
                           ?___fttol 0120                    __size_of_showSave 0014  
                 _modulation_changed 01C7                    i1___awdiv@divisor 0070  
                 _scaleA100kPot$2856 01EA                   _scaleA100kPot$2857 01ED  
                  i1___awdiv@counter 0075                          _blink_delay 0266  
                __size_of_modulation 0041                        _resetRingLEDs 2D6A  
                        _blink_state 01DF                            _eval_poly 260F  
                        ??_USARTInit 00A2                             _CCPTMRS0 029D  
                           _CCPTMRS1 029E                             _CCPTMRS2 029F  
                        ??i1___aldiv 007C                             ?_wait_ms 00AC  
                        ??i1___awdiv 0074                            _modSawRev 2DF0  
           ??_getModulationDelayTime 00F0                  _read_bottom_tactile 231F  
                     __size_of_floor 00B3                       __size_of_ldexp 0097  
                     __size_of_frexp 0040                            _modSquare 2117  
                 calcCosArray@iAngle 0159                       _presetModeCnst 01E5  
                 _setLongBypassState 2E0C                  __end_of_init_timer0 2CD6  
                __end_of_init_timer2 2CDF                            _mod_value 0253  
                          _mod_timer 01A4                     ??_InitializeTaps 00A0  
                    ___aldiv@divisor 00A0    __size_of_getModulationSubdivision 0030  
                    ___aldiv@counter 00A9            ?_getModulationSubdivision 00A0  
                     _presetSaveMode 005F                       ___wmul@product 0132  
                     ??_calcCosArray 0152                             _LATBbits 010D  
                           _LATDbits 010F                             _LATFbits 038C  
                           _LATGbits 038D                       _mod_delay_time 01D9  
                          clear_ram0 2CFE                   calcCosArray@tmpVal 0156  
                          _tap_timer 0052                  ?_setLongBypassState 00A0  
                          _tap_total 023D                __size_of_setPedalMode 0023  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
                      _ring_tactiles 23B7                      _longBypass_down 01C2  
                   ??_FLASH_ReadWord 00A2                      _longBypass_save 01C3  
               ?_read_bottom_tactile 0070              __size_ofi1_set_leds_top 0048  
          initSwitchBypass@initState 00BA                            map@in_max 00E4  
                          map@in_min 00E1                       ?_resetRingLEDs 0070  
                          _sub_timer 01A8                           _ADCON0bits 009D  
                           i1___lmul 2ED3                           _ADCON1bits 009E  
           __size_of_set_subdivision 008B                    ___wmul@multiplier 012E  
                   set_subdivision@x 012E                     set_subdivision@y 0130  
          __size_of_read_top_tactile 004E                 ??_setLongBypassState 00A2  
                         ?_eval_poly 0134        __size_of_getSwitchBypassState 0004  
                        _modCos$2868 013C        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0142                __end_of_scaleA100kPot 1982  
                  ??_updateSwitchTap 00BC                    ___lmul@multiplier 00A0  
                         ?_modSquare 0148                      modSquare@tmpVal 014E  
                       _setPedalMode 2006                    _ReadSavedSettings 1805  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                        _oldBaseTime 0255                       wait_ms@timeSec 00AC  
                 ?_ReadSavedSettings 0070                          _modSaw$2870 0134  
                        _modSaw$2871 0137                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                 ??_initSwitchBypass 00BA                     __size_of_InitApp 0030  
                     ?_ring_tactiles 0070                            modSaw@mod 013A  
                        _mode1_state 01C6                        ??_update_mode 00A7  
                        _mode2_state 005E                            isr@subDiv 007D  
              ??_read_bottom_tactile 00B2                          _modTri$2869 0134  
                updateSwitchTap@iCnt 00C4                  ??_ReadSavedSettings 00A4  
                         _APFCONbits 011D                     __size_of___aldiv 0082  
                   __size_of___awdiv 0052                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                         ?_adc_convert 00A0  
                   __size_of___ftneg 0009                             ___altoft 20DA  
                   __size_of___ftmul 00B4                     __size_of___ftsub 002E  
                   __size_of___fttol 0087                             _cos$2872 014F  
                           ___awtoft 2E2D                __size_of_set_leds_top 0054  
                           ___ftpack 25AA                    _baseline_mod_time 0040  
                           _map$2854 00ED                             ___lltoft 2E4F  
             _preset_programmning_on 01C9                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2617 014F  
                           _exp$2876 014C                          _init_timer0 2CCF  
                        _init_timer2 2CD6                             _cosArray 2482  
         __end_of_updateSwitchBypass 1363                             __ptext10 21D1  
                           __ptext11 23B7                             __ptext20 2DF0  
                           __ptext12 2006                             __ptext21 14BC  
                           __ptext13 2029                             __ptext30 1B1F  
                           __ptext22 2458                             __ptext14 2D52  
                           __ptext31 2E4F                             __ptext23 1A94  
                           __ptext15 2D6A                             __ptext40 07FF  
                           __ptext32 2369                             __ptext24 1E64  
                           __ptext16 0DBA                             __ptext41 2002  
                           __ptext33 231F                             __ptext25 1BB6  
                           __ptext17 09EF                             __ptext50 209E  
                           __ptext42 24AA                             __ptext34 1A09  
                           __ptext26 18FD                             __ptext18 2117  
                           __ptext51 20DA                             __ptext43 2F32  
                           __ptext35 2D0A                             __ptext27 112B  
                           __ptext19 1654                             __ptext60 25AA  
                           __ptext52 260F                             __ptext44 26FD  
                           __ptext36 2DD4                             __ptext28 1F2F  
                           __ptext61 2D2B                             __ptext53 2DB8  
                           __ptext45 2681                             __ptext37 2F92  
                           __ptext29 1363                             __ptext70 2CD6  
                           __ptext62 2293                             __ptext54 1DB0  
                           __ptext46 0820                             __ptext38 1003  
                           __ptext71 2CCF                             __ptext63 1805  
                           __ptext55 2EA5                             __ptext47 1CFD  
                           __ptext39 2F62                             __ptext80 277E  
                           __ptext72 2CE8                             __ptext64 24FD  
                           __ptext56 1035                             __ptext48 2191  
                           __ptext73 2CCB                             __ptext65 2063  
                           __ptext57 2CDF                             __ptext49 1982  
                           __ptext66 0800                             __ptext58 1C54  
                           __ptext75 22D7                             __ptext67 07D8  
                           __ptext59 2E2D                             __ptext76 2E79  
                           __ptext68 2F02                             __ptext77 2407  
                           __ptext69 2252                             __ptext78 2211  
                           __ptext79 2ED3                             _sin$2875 0145  
          __end_of_ReadSavedSettings 187B                     __size_of_wait_ms 0032  
        __size_of_solidring_tactiles 0040      __size_of_getModulationDelayTime 0053  
                           _ledState 0239                             _pow$2873 015C  
                           _pow$2874 015F                        _presetChannel 016C  
                       ??_modulation 0036                          _mod_counter 01D7  
                           _modArray 238A                          _oldSymmetry 0257  
            ??_setSwitchBypassRelays 00B4                             _init_adc 2CE8  
                      __size_of_main 0462                             _init_pwm 2252  
   updateModulationArray@angleFactor 0154         __size_of_ConfigureOscillator 0004  
                       _set_leds_top 24FD                             _showSave 2D3E  
                           _num_taps 0050                __end_of_scaleiA10kPot 1F2F  
                           int$flags 007E                      ??_resetRingLEDs 00A4  
                    i1set_leds_top@x 0070                       modSquare@angle 0148  
                __end_of_update_mode 3000                             exp@coeff 2800  
                           _symmetry 01DB                  modSawRev@inflection 0145  
                           log@coeff 281E                   __end_of_modulation 2252  
               __end_of_calcCosArray 277E                           _INTCONbits 000B  
                        ??_eval_poly 00F0            __size_of_setPresetDisplay 003A  
                        _tap_history 0220                          ??_modSawRev 0148  
                  ??_set_subdivision 00F0                          ??_modSquare 00F0  
                           intlevel1 0000                      _set_leds_bottom 2063  
                         _PMCON1bits 0195                      ??_ring_tactiles 00B2  
                  __CFG_CLKOUTEN$OFF 0000                      _reset_sub_delay 01CA  
                         _OSCCONbits 0099                         _preset_blink 01C8  
             _getModulationDelayTime 24AA                       i1_set_leds_top 22D7  
     __size_of_updateModulationArray 0246     __size_of_updateSwitchBypassState 0001  
      __end_of_updateModulationArray 1000                        _isInitialized 01C1  
      __size_of_setExpressionDisplay 0018                   _scaleiA10kPot$2862 01EA  
                 _scaleiA10kPot$2863 01ED             __size_of_setLongTapState 001A  
                        _tmpModDelay 01BC                     _read_top_tactile 2369  
       ??i1_getModulationSubdivision 0072                         ___aldiv@sign 00AA  
         __size_of_ReadSavedSettings 0076          __end_of_setDoublePressState 2191  
                       _CCP10CONbits 061F                    _bottom_push_state 0048  
         setPresetDisplay@ledChannel 00A6               __end_ofi1_set_leds_top 231F  
