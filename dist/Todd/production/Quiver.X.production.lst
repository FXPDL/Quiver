

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Jan 15 17:52:58 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2
   110                           	dabs	1,0x920,80
   111                           	dabs	1,0x8A0,80
   112                           	dabs	1,0x820,80
   113                           	dabs	1,0x7A0,80
   114                           	dabs	1,0x742,46
   115                           	dabs	1,0x720,34
   116                           	dabs	1,0x6A0,80
   117                           	dabs	1,0x620,80
   118                           	dabs	1,0x5BA,54
   119                           	dabs	1,0x2482,0,_cosArray
   120                           	dabs	1,0x238A,0,_modArray
   121                           	dabs	1,0x7E,2
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  008F                     	;# 
   156  0090                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  0110                     	;# 
   176  0116                     	;# 
   177  0117                     	;# 
   178  011D                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  018F                     	;# 
   182  0190                     	;# 
   183  0191                     	;# 
   184  0191                     	;# 
   185  0192                     	;# 
   186  0193                     	;# 
   187  0193                     	;# 
   188  0194                     	;# 
   189  0195                     	;# 
   190  0196                     	;# 
   191  0197                     	;# 
   192  0199                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  019A                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019D                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019E                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  020D                     	;# 
   216  020F                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0213                     	;# 
   224  0214                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0219                     	;# 
   234  021A                     	;# 
   235  021B                     	;# 
   236  021C                     	;# 
   237  021D                     	;# 
   238  021E                     	;# 
   239  021F                     	;# 
   240  028C                     	;# 
   241  028D                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  029D                     	;# 
   251  029E                     	;# 
   252  029F                     	;# 
   253  030C                     	;# 
   254  030D                     	;# 
   255  0311                     	;# 
   256  0311                     	;# 
   257  0312                     	;# 
   258  0313                     	;# 
   259  0318                     	;# 
   260  0318                     	;# 
   261  0319                     	;# 
   262  031A                     	;# 
   263  031C                     	;# 
   264  031C                     	;# 
   265  031D                     	;# 
   266  031E                     	;# 
   267  038C                     	;# 
   268  038D                     	;# 
   269  0394                     	;# 
   270  0395                     	;# 
   271  0396                     	;# 
   272  040C                     	;# 
   273  040D                     	;# 
   274  0411                     	;# 
   275  0411                     	;# 
   276  0412                     	;# 
   277  0413                     	;# 
   278  0414                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  0418                     	;# 
   283  0418                     	;# 
   284  0419                     	;# 
   285  041A                     	;# 
   286  041B                     	;# 
   287  041C                     	;# 
   288  041D                     	;# 
   289  041E                     	;# 
   290  048D                     	;# 
   291  0491                     	;# 
   292  0491                     	;# 
   293  0492                     	;# 
   294  0492                     	;# 
   295  0493                     	;# 
   296  0493                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0494                     	;# 
   300  0495                     	;# 
   301  0495                     	;# 
   302  0496                     	;# 
   303  0496                     	;# 
   304  0497                     	;# 
   305  0497                     	;# 
   306  0595                     	;# 
   307  0596                     	;# 
   308  0597                     	;# 
   309  059C                     	;# 
   310  059D                     	;# 
   311  059E                     	;# 
   312  0611                     	;# 
   313  0611                     	;# 
   314  0612                     	;# 
   315  0613                     	;# 
   316  0614                     	;# 
   317  0614                     	;# 
   318  0615                     	;# 
   319  0616                     	;# 
   320  0617                     	;# 
   321  0617                     	;# 
   322  0618                     	;# 
   323  0619                     	;# 
   324  061A                     	;# 
   325  061A                     	;# 
   326  061B                     	;# 
   327  061C                     	;# 
   328  061D                     	;# 
   329  061D                     	;# 
   330  061E                     	;# 
   331  061F                     	;# 
   332  0FE4                     	;# 
   333  0FE5                     	;# 
   334  0FE6                     	;# 
   335  0FE7                     	;# 
   336  0FE8                     	;# 
   337  0FE9                     	;# 
   338  0FEA                     	;# 
   339  0FEB                     	;# 
   340  0FED                     	;# 
   341  0FEE                     	;# 
   342  0FEF                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0008                     	;# 
   352  0009                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008D                     	;# 
   375  008E                     	;# 
   376  008F                     	;# 
   377  0090                     	;# 
   378  0091                     	;# 
   379  0092                     	;# 
   380  0093                     	;# 
   381  0094                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0099                     	;# 
   386  009A                     	;# 
   387  009B                     	;# 
   388  009B                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  0110                     	;# 
   397  0116                     	;# 
   398  0117                     	;# 
   399  011D                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402  018F                     	;# 
   403  0190                     	;# 
   404  0191                     	;# 
   405  0191                     	;# 
   406  0192                     	;# 
   407  0193                     	;# 
   408  0193                     	;# 
   409  0194                     	;# 
   410  0195                     	;# 
   411  0196                     	;# 
   412  0197                     	;# 
   413  0199                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  019A                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019C                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  020D                     	;# 
   437  020F                     	;# 
   438  0210                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0216                     	;# 
   451  0216                     	;# 
   452  0217                     	;# 
   453  0217                     	;# 
   454  0219                     	;# 
   455  021A                     	;# 
   456  021B                     	;# 
   457  021C                     	;# 
   458  021D                     	;# 
   459  021E                     	;# 
   460  021F                     	;# 
   461  028C                     	;# 
   462  028D                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0298                     	;# 
   468  0298                     	;# 
   469  0299                     	;# 
   470  029A                     	;# 
   471  029D                     	;# 
   472  029E                     	;# 
   473  029F                     	;# 
   474  030C                     	;# 
   475  030D                     	;# 
   476  0311                     	;# 
   477  0311                     	;# 
   478  0312                     	;# 
   479  0313                     	;# 
   480  0318                     	;# 
   481  0318                     	;# 
   482  0319                     	;# 
   483  031A                     	;# 
   484  031C                     	;# 
   485  031C                     	;# 
   486  031D                     	;# 
   487  031E                     	;# 
   488  038C                     	;# 
   489  038D                     	;# 
   490  0394                     	;# 
   491  0395                     	;# 
   492  0396                     	;# 
   493  040C                     	;# 
   494  040D                     	;# 
   495  0411                     	;# 
   496  0411                     	;# 
   497  0412                     	;# 
   498  0413                     	;# 
   499  0414                     	;# 
   500  0415                     	;# 
   501  0416                     	;# 
   502  0417                     	;# 
   503  0418                     	;# 
   504  0418                     	;# 
   505  0419                     	;# 
   506  041A                     	;# 
   507  041B                     	;# 
   508  041C                     	;# 
   509  041D                     	;# 
   510  041E                     	;# 
   511  048D                     	;# 
   512  0491                     	;# 
   513  0491                     	;# 
   514  0492                     	;# 
   515  0492                     	;# 
   516  0493                     	;# 
   517  0493                     	;# 
   518  0493                     	;# 
   519  0494                     	;# 
   520  0494                     	;# 
   521  0495                     	;# 
   522  0495                     	;# 
   523  0496                     	;# 
   524  0496                     	;# 
   525  0497                     	;# 
   526  0497                     	;# 
   527  0595                     	;# 
   528  0596                     	;# 
   529  0597                     	;# 
   530  059C                     	;# 
   531  059D                     	;# 
   532  059E                     	;# 
   533  0611                     	;# 
   534  0611                     	;# 
   535  0612                     	;# 
   536  0613                     	;# 
   537  0614                     	;# 
   538  0614                     	;# 
   539  0615                     	;# 
   540  0616                     	;# 
   541  0617                     	;# 
   542  0617                     	;# 
   543  0618                     	;# 
   544  0619                     	;# 
   545  061A                     	;# 
   546  061A                     	;# 
   547  061B                     	;# 
   548  061C                     	;# 
   549  061D                     	;# 
   550  061D                     	;# 
   551  061E                     	;# 
   552  061F                     	;# 
   553  0FE4                     	;# 
   554  0FE5                     	;# 
   555  0FE6                     	;# 
   556  0FE7                     	;# 
   557  0FE8                     	;# 
   558  0FE9                     	;# 
   559  0FEA                     	;# 
   560  0FEB                     	;# 
   561  0FED                     	;# 
   562  0FEE                     	;# 
   563  0FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  008C                     	;# 
   595  008D                     	;# 
   596  008E                     	;# 
   597  008F                     	;# 
   598  0090                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0099                     	;# 
   607  009A                     	;# 
   608  009B                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  010E                     	;# 
   616  010F                     	;# 
   617  0110                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  011D                     	;# 
   621  018C                     	;# 
   622  018D                     	;# 
   623  018F                     	;# 
   624  0190                     	;# 
   625  0191                     	;# 
   626  0191                     	;# 
   627  0192                     	;# 
   628  0193                     	;# 
   629  0193                     	;# 
   630  0194                     	;# 
   631  0195                     	;# 
   632  0196                     	;# 
   633  0197                     	;# 
   634  0199                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  019A                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019F                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  020D                     	;# 
   658  020F                     	;# 
   659  0210                     	;# 
   660  0211                     	;# 
   661  0211                     	;# 
   662  0212                     	;# 
   663  0212                     	;# 
   664  0213                     	;# 
   665  0213                     	;# 
   666  0214                     	;# 
   667  0214                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0216                     	;# 
   672  0216                     	;# 
   673  0217                     	;# 
   674  0217                     	;# 
   675  0219                     	;# 
   676  021A                     	;# 
   677  021B                     	;# 
   678  021C                     	;# 
   679  021D                     	;# 
   680  021E                     	;# 
   681  021F                     	;# 
   682  028C                     	;# 
   683  028D                     	;# 
   684  0291                     	;# 
   685  0291                     	;# 
   686  0292                     	;# 
   687  0293                     	;# 
   688  0298                     	;# 
   689  0298                     	;# 
   690  0299                     	;# 
   691  029A                     	;# 
   692  029D                     	;# 
   693  029E                     	;# 
   694  029F                     	;# 
   695  030C                     	;# 
   696  030D                     	;# 
   697  0311                     	;# 
   698  0311                     	;# 
   699  0312                     	;# 
   700  0313                     	;# 
   701  0318                     	;# 
   702  0318                     	;# 
   703  0319                     	;# 
   704  031A                     	;# 
   705  031C                     	;# 
   706  031C                     	;# 
   707  031D                     	;# 
   708  031E                     	;# 
   709  038C                     	;# 
   710  038D                     	;# 
   711  0394                     	;# 
   712  0395                     	;# 
   713  0396                     	;# 
   714  040C                     	;# 
   715  040D                     	;# 
   716  0411                     	;# 
   717  0411                     	;# 
   718  0412                     	;# 
   719  0413                     	;# 
   720  0414                     	;# 
   721  0415                     	;# 
   722  0416                     	;# 
   723  0417                     	;# 
   724  0418                     	;# 
   725  0418                     	;# 
   726  0419                     	;# 
   727  041A                     	;# 
   728  041B                     	;# 
   729  041C                     	;# 
   730  041D                     	;# 
   731  041E                     	;# 
   732  048D                     	;# 
   733  0491                     	;# 
   734  0491                     	;# 
   735  0492                     	;# 
   736  0492                     	;# 
   737  0493                     	;# 
   738  0493                     	;# 
   739  0493                     	;# 
   740  0494                     	;# 
   741  0494                     	;# 
   742  0495                     	;# 
   743  0495                     	;# 
   744  0496                     	;# 
   745  0496                     	;# 
   746  0497                     	;# 
   747  0497                     	;# 
   748  0595                     	;# 
   749  0596                     	;# 
   750  0597                     	;# 
   751  059C                     	;# 
   752  059D                     	;# 
   753  059E                     	;# 
   754  0611                     	;# 
   755  0611                     	;# 
   756  0612                     	;# 
   757  0613                     	;# 
   758  0614                     	;# 
   759  0614                     	;# 
   760  0615                     	;# 
   761  0616                     	;# 
   762  0617                     	;# 
   763  0617                     	;# 
   764  0618                     	;# 
   765  0619                     	;# 
   766  061A                     	;# 
   767  061A                     	;# 
   768  061B                     	;# 
   769  061C                     	;# 
   770  061D                     	;# 
   771  061D                     	;# 
   772  061E                     	;# 
   773  061F                     	;# 
   774  0FE4                     	;# 
   775  0FE5                     	;# 
   776  0FE6                     	;# 
   777  0FE7                     	;# 
   778  0FE8                     	;# 
   779  0FE9                     	;# 
   780  0FEA                     	;# 
   781  0FEB                     	;# 
   782  0FED                     	;# 
   783  0FEE                     	;# 
   784  0FEF                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  000F                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0014                     	;# 
   806  0015                     	;# 
   807  0016                     	;# 
   808  0016                     	;# 
   809  0017                     	;# 
   810  0018                     	;# 
   811  0019                     	;# 
   812  001A                     	;# 
   813  001B                     	;# 
   814  001C                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  008F                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0095                     	;# 
   825  0096                     	;# 
   826  0097                     	;# 
   827  0099                     	;# 
   828  009A                     	;# 
   829  009B                     	;# 
   830  009B                     	;# 
   831  009C                     	;# 
   832  009D                     	;# 
   833  009E                     	;# 
   834  010C                     	;# 
   835  010D                     	;# 
   836  010E                     	;# 
   837  010F                     	;# 
   838  0110                     	;# 
   839  0116                     	;# 
   840  0117                     	;# 
   841  011D                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  018F                     	;# 
   845  0190                     	;# 
   846  0191                     	;# 
   847  0191                     	;# 
   848  0192                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0194                     	;# 
   852  0195                     	;# 
   853  0196                     	;# 
   854  0197                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020D                     	;# 
   879  020F                     	;# 
   880  0210                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0219                     	;# 
   897  021A                     	;# 
   898  021B                     	;# 
   899  021C                     	;# 
   900  021D                     	;# 
   901  021E                     	;# 
   902  021F                     	;# 
   903  028C                     	;# 
   904  028D                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0298                     	;# 
   910  0298                     	;# 
   911  0299                     	;# 
   912  029A                     	;# 
   913  029D                     	;# 
   914  029E                     	;# 
   915  029F                     	;# 
   916  030C                     	;# 
   917  030D                     	;# 
   918  0311                     	;# 
   919  0311                     	;# 
   920  0312                     	;# 
   921  0313                     	;# 
   922  0318                     	;# 
   923  0318                     	;# 
   924  0319                     	;# 
   925  031A                     	;# 
   926  031C                     	;# 
   927  031C                     	;# 
   928  031D                     	;# 
   929  031E                     	;# 
   930  038C                     	;# 
   931  038D                     	;# 
   932  0394                     	;# 
   933  0395                     	;# 
   934  0396                     	;# 
   935  040C                     	;# 
   936  040D                     	;# 
   937  0411                     	;# 
   938  0411                     	;# 
   939  0412                     	;# 
   940  0413                     	;# 
   941  0414                     	;# 
   942  0415                     	;# 
   943  0416                     	;# 
   944  0417                     	;# 
   945  0418                     	;# 
   946  0418                     	;# 
   947  0419                     	;# 
   948  041A                     	;# 
   949  041B                     	;# 
   950  041C                     	;# 
   951  041D                     	;# 
   952  041E                     	;# 
   953  048D                     	;# 
   954  0491                     	;# 
   955  0491                     	;# 
   956  0492                     	;# 
   957  0492                     	;# 
   958  0493                     	;# 
   959  0493                     	;# 
   960  0493                     	;# 
   961  0494                     	;# 
   962  0494                     	;# 
   963  0495                     	;# 
   964  0495                     	;# 
   965  0496                     	;# 
   966  0496                     	;# 
   967  0497                     	;# 
   968  0497                     	;# 
   969  0595                     	;# 
   970  0596                     	;# 
   971  0597                     	;# 
   972  059C                     	;# 
   973  059D                     	;# 
   974  059E                     	;# 
   975  0611                     	;# 
   976  0611                     	;# 
   977  0612                     	;# 
   978  0613                     	;# 
   979  0614                     	;# 
   980  0614                     	;# 
   981  0615                     	;# 
   982  0616                     	;# 
   983  0617                     	;# 
   984  0617                     	;# 
   985  0618                     	;# 
   986  0619                     	;# 
   987  061A                     	;# 
   988  061A                     	;# 
   989  061B                     	;# 
   990  061C                     	;# 
   991  061D                     	;# 
   992  061D                     	;# 
   993  061E                     	;# 
   994  061F                     	;# 
   995  0FE4                     	;# 
   996  0FE5                     	;# 
   997  0FE6                     	;# 
   998  0FE7                     	;# 
   999  0FE8                     	;# 
  1000  0FE9                     	;# 
  1001  0FEA                     	;# 
  1002  0FEB                     	;# 
  1003  0FED                     	;# 
  1004  0FEE                     	;# 
  1005  0FEF                     	;# 
  1006  0000                     	;# 
  1007  0001                     	;# 
  1008  0002                     	;# 
  1009  0003                     	;# 
  1010  0004                     	;# 
  1011  0005                     	;# 
  1012  0006                     	;# 
  1013  0007                     	;# 
  1014  0008                     	;# 
  1015  0009                     	;# 
  1016  000A                     	;# 
  1017  000B                     	;# 
  1018  000C                     	;# 
  1019  000D                     	;# 
  1020  000E                     	;# 
  1021  000F                     	;# 
  1022  0010                     	;# 
  1023  0011                     	;# 
  1024  0012                     	;# 
  1025  0013                     	;# 
  1026  0014                     	;# 
  1027  0015                     	;# 
  1028  0016                     	;# 
  1029  0016                     	;# 
  1030  0017                     	;# 
  1031  0018                     	;# 
  1032  0019                     	;# 
  1033  001A                     	;# 
  1034  001B                     	;# 
  1035  001C                     	;# 
  1036  008C                     	;# 
  1037  008D                     	;# 
  1038  008E                     	;# 
  1039  008F                     	;# 
  1040  0090                     	;# 
  1041  0091                     	;# 
  1042  0092                     	;# 
  1043  0093                     	;# 
  1044  0094                     	;# 
  1045  0095                     	;# 
  1046  0096                     	;# 
  1047  0097                     	;# 
  1048  0099                     	;# 
  1049  009A                     	;# 
  1050  009B                     	;# 
  1051  009B                     	;# 
  1052  009C                     	;# 
  1053  009D                     	;# 
  1054  009E                     	;# 
  1055  010C                     	;# 
  1056  010D                     	;# 
  1057  010E                     	;# 
  1058  010F                     	;# 
  1059  0110                     	;# 
  1060  0116                     	;# 
  1061  0117                     	;# 
  1062  011D                     	;# 
  1063  018C                     	;# 
  1064  018D                     	;# 
  1065  018F                     	;# 
  1066  0190                     	;# 
  1067  0191                     	;# 
  1068  0191                     	;# 
  1069  0192                     	;# 
  1070  0193                     	;# 
  1071  0193                     	;# 
  1072  0194                     	;# 
  1073  0195                     	;# 
  1074  0196                     	;# 
  1075  0197                     	;# 
  1076  0199                     	;# 
  1077  0199                     	;# 
  1078  0199                     	;# 
  1079  019A                     	;# 
  1080  019A                     	;# 
  1081  019A                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019D                     	;# 
  1091  019D                     	;# 
  1092  019D                     	;# 
  1093  019E                     	;# 
  1094  019E                     	;# 
  1095  019E                     	;# 
  1096  019F                     	;# 
  1097  019F                     	;# 
  1098  019F                     	;# 
  1099  020D                     	;# 
  1100  020F                     	;# 
  1101  0210                     	;# 
  1102  0211                     	;# 
  1103  0211                     	;# 
  1104  0212                     	;# 
  1105  0212                     	;# 
  1106  0213                     	;# 
  1107  0213                     	;# 
  1108  0214                     	;# 
  1109  0214                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0216                     	;# 
  1114  0216                     	;# 
  1115  0217                     	;# 
  1116  0217                     	;# 
  1117  0219                     	;# 
  1118  021A                     	;# 
  1119  021B                     	;# 
  1120  021C                     	;# 
  1121  021D                     	;# 
  1122  021E                     	;# 
  1123  021F                     	;# 
  1124  028C                     	;# 
  1125  028D                     	;# 
  1126  0291                     	;# 
  1127  0291                     	;# 
  1128  0292                     	;# 
  1129  0293                     	;# 
  1130  0298                     	;# 
  1131  0298                     	;# 
  1132  0299                     	;# 
  1133  029A                     	;# 
  1134  029D                     	;# 
  1135  029E                     	;# 
  1136  029F                     	;# 
  1137  030C                     	;# 
  1138  030D                     	;# 
  1139  0311                     	;# 
  1140  0311                     	;# 
  1141  0312                     	;# 
  1142  0313                     	;# 
  1143  0318                     	;# 
  1144  0318                     	;# 
  1145  0319                     	;# 
  1146  031A                     	;# 
  1147  031C                     	;# 
  1148  031C                     	;# 
  1149  031D                     	;# 
  1150  031E                     	;# 
  1151  038C                     	;# 
  1152  038D                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  040C                     	;# 
  1157  040D                     	;# 
  1158  0411                     	;# 
  1159  0411                     	;# 
  1160  0412                     	;# 
  1161  0413                     	;# 
  1162  0414                     	;# 
  1163  0415                     	;# 
  1164  0416                     	;# 
  1165  0417                     	;# 
  1166  0418                     	;# 
  1167  0418                     	;# 
  1168  0419                     	;# 
  1169  041A                     	;# 
  1170  041B                     	;# 
  1171  041C                     	;# 
  1172  041D                     	;# 
  1173  041E                     	;# 
  1174  048D                     	;# 
  1175  0491                     	;# 
  1176  0491                     	;# 
  1177  0492                     	;# 
  1178  0492                     	;# 
  1179  0493                     	;# 
  1180  0493                     	;# 
  1181  0493                     	;# 
  1182  0494                     	;# 
  1183  0494                     	;# 
  1184  0495                     	;# 
  1185  0495                     	;# 
  1186  0496                     	;# 
  1187  0496                     	;# 
  1188  0497                     	;# 
  1189  0497                     	;# 
  1190  0595                     	;# 
  1191  0596                     	;# 
  1192  0597                     	;# 
  1193  059C                     	;# 
  1194  059D                     	;# 
  1195  059E                     	;# 
  1196  0611                     	;# 
  1197  0611                     	;# 
  1198  0612                     	;# 
  1199  0613                     	;# 
  1200  0614                     	;# 
  1201  0614                     	;# 
  1202  0615                     	;# 
  1203  0616                     	;# 
  1204  0617                     	;# 
  1205  0617                     	;# 
  1206  0618                     	;# 
  1207  0619                     	;# 
  1208  061A                     	;# 
  1209  061A                     	;# 
  1210  061B                     	;# 
  1211  061C                     	;# 
  1212  061D                     	;# 
  1213  061D                     	;# 
  1214  061E                     	;# 
  1215  061F                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227  0000                     	;# 
  1228  0001                     	;# 
  1229  0002                     	;# 
  1230  0003                     	;# 
  1231  0004                     	;# 
  1232  0005                     	;# 
  1233  0006                     	;# 
  1234  0007                     	;# 
  1235  0008                     	;# 
  1236  0009                     	;# 
  1237  000A                     	;# 
  1238  000B                     	;# 
  1239  000C                     	;# 
  1240  000D                     	;# 
  1241  000E                     	;# 
  1242  000F                     	;# 
  1243  0010                     	;# 
  1244  0011                     	;# 
  1245  0012                     	;# 
  1246  0013                     	;# 
  1247  0014                     	;# 
  1248  0015                     	;# 
  1249  0016                     	;# 
  1250  0016                     	;# 
  1251  0017                     	;# 
  1252  0018                     	;# 
  1253  0019                     	;# 
  1254  001A                     	;# 
  1255  001B                     	;# 
  1256  001C                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  008F                     	;# 
  1261  0090                     	;# 
  1262  0091                     	;# 
  1263  0092                     	;# 
  1264  0093                     	;# 
  1265  0094                     	;# 
  1266  0095                     	;# 
  1267  0096                     	;# 
  1268  0097                     	;# 
  1269  0099                     	;# 
  1270  009A                     	;# 
  1271  009B                     	;# 
  1272  009B                     	;# 
  1273  009C                     	;# 
  1274  009D                     	;# 
  1275  009E                     	;# 
  1276  010C                     	;# 
  1277  010D                     	;# 
  1278  010E                     	;# 
  1279  010F                     	;# 
  1280  0110                     	;# 
  1281  0116                     	;# 
  1282  0117                     	;# 
  1283  011D                     	;# 
  1284  018C                     	;# 
  1285  018D                     	;# 
  1286  018F                     	;# 
  1287  0190                     	;# 
  1288  0191                     	;# 
  1289  0191                     	;# 
  1290  0192                     	;# 
  1291  0193                     	;# 
  1292  0193                     	;# 
  1293  0194                     	;# 
  1294  0195                     	;# 
  1295  0196                     	;# 
  1296  0197                     	;# 
  1297  0199                     	;# 
  1298  0199                     	;# 
  1299  0199                     	;# 
  1300  019A                     	;# 
  1301  019A                     	;# 
  1302  019A                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019D                     	;# 
  1312  019D                     	;# 
  1313  019D                     	;# 
  1314  019E                     	;# 
  1315  019E                     	;# 
  1316  019E                     	;# 
  1317  019F                     	;# 
  1318  019F                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  020F                     	;# 
  1322  0210                     	;# 
  1323  0211                     	;# 
  1324  0211                     	;# 
  1325  0212                     	;# 
  1326  0212                     	;# 
  1327  0213                     	;# 
  1328  0213                     	;# 
  1329  0214                     	;# 
  1330  0214                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0216                     	;# 
  1335  0216                     	;# 
  1336  0217                     	;# 
  1337  0217                     	;# 
  1338  0219                     	;# 
  1339  021A                     	;# 
  1340  021B                     	;# 
  1341  021C                     	;# 
  1342  021D                     	;# 
  1343  021E                     	;# 
  1344  021F                     	;# 
  1345  028C                     	;# 
  1346  028D                     	;# 
  1347  0291                     	;# 
  1348  0291                     	;# 
  1349  0292                     	;# 
  1350  0293                     	;# 
  1351  0298                     	;# 
  1352  0298                     	;# 
  1353  0299                     	;# 
  1354  029A                     	;# 
  1355  029D                     	;# 
  1356  029E                     	;# 
  1357  029F                     	;# 
  1358  030C                     	;# 
  1359  030D                     	;# 
  1360  0311                     	;# 
  1361  0311                     	;# 
  1362  0312                     	;# 
  1363  0313                     	;# 
  1364  0318                     	;# 
  1365  0318                     	;# 
  1366  0319                     	;# 
  1367  031A                     	;# 
  1368  031C                     	;# 
  1369  031C                     	;# 
  1370  031D                     	;# 
  1371  031E                     	;# 
  1372  038C                     	;# 
  1373  038D                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  040C                     	;# 
  1378  040D                     	;# 
  1379  0411                     	;# 
  1380  0411                     	;# 
  1381  0412                     	;# 
  1382  0413                     	;# 
  1383  0414                     	;# 
  1384  0415                     	;# 
  1385  0416                     	;# 
  1386  0417                     	;# 
  1387  0418                     	;# 
  1388  0418                     	;# 
  1389  0419                     	;# 
  1390  041A                     	;# 
  1391  041B                     	;# 
  1392  041C                     	;# 
  1393  041D                     	;# 
  1394  041E                     	;# 
  1395  048D                     	;# 
  1396  0491                     	;# 
  1397  0491                     	;# 
  1398  0492                     	;# 
  1399  0492                     	;# 
  1400  0493                     	;# 
  1401  0493                     	;# 
  1402  0493                     	;# 
  1403  0494                     	;# 
  1404  0494                     	;# 
  1405  0495                     	;# 
  1406  0495                     	;# 
  1407  0496                     	;# 
  1408  0496                     	;# 
  1409  0497                     	;# 
  1410  0497                     	;# 
  1411  0595                     	;# 
  1412  0596                     	;# 
  1413  0597                     	;# 
  1414  059C                     	;# 
  1415  059D                     	;# 
  1416  059E                     	;# 
  1417  0611                     	;# 
  1418  0611                     	;# 
  1419  0612                     	;# 
  1420  0613                     	;# 
  1421  0614                     	;# 
  1422  0614                     	;# 
  1423  0615                     	;# 
  1424  0616                     	;# 
  1425  0617                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061A                     	;# 
  1431  061B                     	;# 
  1432  061C                     	;# 
  1433  061D                     	;# 
  1434  061D                     	;# 
  1435  061E                     	;# 
  1436  061F                     	;# 
  1437  0FE4                     	;# 
  1438  0FE5                     	;# 
  1439  0FE6                     	;# 
  1440  0FE7                     	;# 
  1441  0FE8                     	;# 
  1442  0FE9                     	;# 
  1443  0FEA                     	;# 
  1444  0FEB                     	;# 
  1445  0FED                     	;# 
  1446  0FEE                     	;# 
  1447  0FEF                     	;# 
  1448  0000                     	;# 
  1449  0001                     	;# 
  1450  0002                     	;# 
  1451  0003                     	;# 
  1452  0004                     	;# 
  1453  0005                     	;# 
  1454  0006                     	;# 
  1455  0007                     	;# 
  1456  0008                     	;# 
  1457  0009                     	;# 
  1458  000A                     	;# 
  1459  000B                     	;# 
  1460  000C                     	;# 
  1461  000D                     	;# 
  1462  000E                     	;# 
  1463  000F                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001B                     	;# 
  1477  001C                     	;# 
  1478  008C                     	;# 
  1479  008D                     	;# 
  1480  008E                     	;# 
  1481  008F                     	;# 
  1482  0090                     	;# 
  1483  0091                     	;# 
  1484  0092                     	;# 
  1485  0093                     	;# 
  1486  0094                     	;# 
  1487  0095                     	;# 
  1488  0096                     	;# 
  1489  0097                     	;# 
  1490  0099                     	;# 
  1491  009A                     	;# 
  1492  009B                     	;# 
  1493  009B                     	;# 
  1494  009C                     	;# 
  1495  009D                     	;# 
  1496  009E                     	;# 
  1497  010C                     	;# 
  1498  010D                     	;# 
  1499  010E                     	;# 
  1500  010F                     	;# 
  1501  0110                     	;# 
  1502  0116                     	;# 
  1503  0117                     	;# 
  1504  011D                     	;# 
  1505  018C                     	;# 
  1506  018D                     	;# 
  1507  018F                     	;# 
  1508  0190                     	;# 
  1509  0191                     	;# 
  1510  0191                     	;# 
  1511  0192                     	;# 
  1512  0193                     	;# 
  1513  0193                     	;# 
  1514  0194                     	;# 
  1515  0195                     	;# 
  1516  0196                     	;# 
  1517  0197                     	;# 
  1518  0199                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019C                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019D                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019E                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  020D                     	;# 
  1542  020F                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0219                     	;# 
  1560  021A                     	;# 
  1561  021B                     	;# 
  1562  021C                     	;# 
  1563  021D                     	;# 
  1564  021E                     	;# 
  1565  021F                     	;# 
  1566  028C                     	;# 
  1567  028D                     	;# 
  1568  0291                     	;# 
  1569  0291                     	;# 
  1570  0292                     	;# 
  1571  0293                     	;# 
  1572  0298                     	;# 
  1573  0298                     	;# 
  1574  0299                     	;# 
  1575  029A                     	;# 
  1576  029D                     	;# 
  1577  029E                     	;# 
  1578  029F                     	;# 
  1579  030C                     	;# 
  1580  030D                     	;# 
  1581  0311                     	;# 
  1582  0311                     	;# 
  1583  0312                     	;# 
  1584  0313                     	;# 
  1585  0318                     	;# 
  1586  0318                     	;# 
  1587  0319                     	;# 
  1588  031A                     	;# 
  1589  031C                     	;# 
  1590  031C                     	;# 
  1591  031D                     	;# 
  1592  031E                     	;# 
  1593  038C                     	;# 
  1594  038D                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  040C                     	;# 
  1599  040D                     	;# 
  1600  0411                     	;# 
  1601  0411                     	;# 
  1602  0412                     	;# 
  1603  0413                     	;# 
  1604  0414                     	;# 
  1605  0415                     	;# 
  1606  0416                     	;# 
  1607  0417                     	;# 
  1608  0418                     	;# 
  1609  0418                     	;# 
  1610  0419                     	;# 
  1611  041A                     	;# 
  1612  041B                     	;# 
  1613  041C                     	;# 
  1614  041D                     	;# 
  1615  041E                     	;# 
  1616  048D                     	;# 
  1617  0491                     	;# 
  1618  0491                     	;# 
  1619  0492                     	;# 
  1620  0492                     	;# 
  1621  0493                     	;# 
  1622  0493                     	;# 
  1623  0493                     	;# 
  1624  0494                     	;# 
  1625  0494                     	;# 
  1626  0495                     	;# 
  1627  0495                     	;# 
  1628  0496                     	;# 
  1629  0496                     	;# 
  1630  0497                     	;# 
  1631  0497                     	;# 
  1632  0595                     	;# 
  1633  0596                     	;# 
  1634  0597                     	;# 
  1635  059C                     	;# 
  1636  059D                     	;# 
  1637  059E                     	;# 
  1638  0611                     	;# 
  1639  0611                     	;# 
  1640  0612                     	;# 
  1641  0613                     	;# 
  1642  0614                     	;# 
  1643  0614                     	;# 
  1644  0615                     	;# 
  1645  0616                     	;# 
  1646  0617                     	;# 
  1647  0617                     	;# 
  1648  0618                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061A                     	;# 
  1652  061B                     	;# 
  1653  061C                     	;# 
  1654  061D                     	;# 
  1655  061D                     	;# 
  1656  061E                     	;# 
  1657  061F                     	;# 
  1658  0FE4                     	;# 
  1659  0FE5                     	;# 
  1660  0FE6                     	;# 
  1661  0FE7                     	;# 
  1662  0FE8                     	;# 
  1663  0FE9                     	;# 
  1664  0FEA                     	;# 
  1665  0FEB                     	;# 
  1666  0FED                     	;# 
  1667  0FEE                     	;# 
  1668  0FEF                     	;# 
  1669  0000                     	;# 
  1670  0001                     	;# 
  1671  0002                     	;# 
  1672  0003                     	;# 
  1673  0004                     	;# 
  1674  0005                     	;# 
  1675  0006                     	;# 
  1676  0007                     	;# 
  1677  0008                     	;# 
  1678  0009                     	;# 
  1679  000A                     	;# 
  1680  000B                     	;# 
  1681  000C                     	;# 
  1682  000D                     	;# 
  1683  000E                     	;# 
  1684  000F                     	;# 
  1685  0010                     	;# 
  1686  0011                     	;# 
  1687  0012                     	;# 
  1688  0013                     	;# 
  1689  0014                     	;# 
  1690  0015                     	;# 
  1691  0016                     	;# 
  1692  0016                     	;# 
  1693  0017                     	;# 
  1694  0018                     	;# 
  1695  0019                     	;# 
  1696  001A                     	;# 
  1697  001B                     	;# 
  1698  001C                     	;# 
  1699  008C                     	;# 
  1700  008D                     	;# 
  1701  008E                     	;# 
  1702  008F                     	;# 
  1703  0090                     	;# 
  1704  0091                     	;# 
  1705  0092                     	;# 
  1706  0093                     	;# 
  1707  0094                     	;# 
  1708  0095                     	;# 
  1709  0096                     	;# 
  1710  0097                     	;# 
  1711  0099                     	;# 
  1712  009A                     	;# 
  1713  009B                     	;# 
  1714  009B                     	;# 
  1715  009C                     	;# 
  1716  009D                     	;# 
  1717  009E                     	;# 
  1718  010C                     	;# 
  1719  010D                     	;# 
  1720  010E                     	;# 
  1721  010F                     	;# 
  1722  0110                     	;# 
  1723  0116                     	;# 
  1724  0117                     	;# 
  1725  011D                     	;# 
  1726  018C                     	;# 
  1727  018D                     	;# 
  1728  018F                     	;# 
  1729  0190                     	;# 
  1730  0191                     	;# 
  1731  0191                     	;# 
  1732  0192                     	;# 
  1733  0193                     	;# 
  1734  0193                     	;# 
  1735  0194                     	;# 
  1736  0195                     	;# 
  1737  0196                     	;# 
  1738  0197                     	;# 
  1739  0199                     	;# 
  1740  0199                     	;# 
  1741  0199                     	;# 
  1742  019A                     	;# 
  1743  019A                     	;# 
  1744  019A                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019C                     	;# 
  1751  019C                     	;# 
  1752  019C                     	;# 
  1753  019D                     	;# 
  1754  019D                     	;# 
  1755  019D                     	;# 
  1756  019E                     	;# 
  1757  019E                     	;# 
  1758  019E                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  020D                     	;# 
  1763  020F                     	;# 
  1764  0210                     	;# 
  1765  0211                     	;# 
  1766  0211                     	;# 
  1767  0212                     	;# 
  1768  0212                     	;# 
  1769  0213                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0214                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021C                     	;# 
  1784  021D                     	;# 
  1785  021E                     	;# 
  1786  021F                     	;# 
  1787  028C                     	;# 
  1788  028D                     	;# 
  1789  0291                     	;# 
  1790  0291                     	;# 
  1791  0292                     	;# 
  1792  0293                     	;# 
  1793  0298                     	;# 
  1794  0298                     	;# 
  1795  0299                     	;# 
  1796  029A                     	;# 
  1797  029D                     	;# 
  1798  029E                     	;# 
  1799  029F                     	;# 
  1800  030C                     	;# 
  1801  030D                     	;# 
  1802  0311                     	;# 
  1803  0311                     	;# 
  1804  0312                     	;# 
  1805  0313                     	;# 
  1806  0318                     	;# 
  1807  0318                     	;# 
  1808  0319                     	;# 
  1809  031A                     	;# 
  1810  031C                     	;# 
  1811  031C                     	;# 
  1812  031D                     	;# 
  1813  031E                     	;# 
  1814  038C                     	;# 
  1815  038D                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  040C                     	;# 
  1820  040D                     	;# 
  1821  0411                     	;# 
  1822  0411                     	;# 
  1823  0412                     	;# 
  1824  0413                     	;# 
  1825  0414                     	;# 
  1826  0415                     	;# 
  1827  0416                     	;# 
  1828  0417                     	;# 
  1829  0418                     	;# 
  1830  0418                     	;# 
  1831  0419                     	;# 
  1832  041A                     	;# 
  1833  041B                     	;# 
  1834  041C                     	;# 
  1835  041D                     	;# 
  1836  041E                     	;# 
  1837  048D                     	;# 
  1838  0491                     	;# 
  1839  0491                     	;# 
  1840  0492                     	;# 
  1841  0492                     	;# 
  1842  0493                     	;# 
  1843  0493                     	;# 
  1844  0493                     	;# 
  1845  0494                     	;# 
  1846  0494                     	;# 
  1847  0495                     	;# 
  1848  0495                     	;# 
  1849  0496                     	;# 
  1850  0496                     	;# 
  1851  0497                     	;# 
  1852  0497                     	;# 
  1853  0595                     	;# 
  1854  0596                     	;# 
  1855  0597                     	;# 
  1856  059C                     	;# 
  1857  059D                     	;# 
  1858  059E                     	;# 
  1859  0611                     	;# 
  1860  0611                     	;# 
  1861  0612                     	;# 
  1862  0613                     	;# 
  1863  0614                     	;# 
  1864  0614                     	;# 
  1865  0615                     	;# 
  1866  0616                     	;# 
  1867  0617                     	;# 
  1868  0617                     	;# 
  1869  0618                     	;# 
  1870  0619                     	;# 
  1871  061A                     	;# 
  1872  061A                     	;# 
  1873  061B                     	;# 
  1874  061C                     	;# 
  1875  061D                     	;# 
  1876  061D                     	;# 
  1877  061E                     	;# 
  1878  061F                     	;# 
  1879  0FE4                     	;# 
  1880  0FE5                     	;# 
  1881  0FE6                     	;# 
  1882  0FE7                     	;# 
  1883  0FE8                     	;# 
  1884  0FE9                     	;# 
  1885  0FEA                     	;# 
  1886  0FEB                     	;# 
  1887  0FED                     	;# 
  1888  0FEE                     	;# 
  1889  0FEF                     	;# 
  1890  0000                     	;# 
  1891  0001                     	;# 
  1892  0002                     	;# 
  1893  0003                     	;# 
  1894  0004                     	;# 
  1895  0005                     	;# 
  1896  0006                     	;# 
  1897  0007                     	;# 
  1898  0008                     	;# 
  1899  0009                     	;# 
  1900  000A                     	;# 
  1901  000B                     	;# 
  1902  000C                     	;# 
  1903  000D                     	;# 
  1904  000E                     	;# 
  1905  000F                     	;# 
  1906  0010                     	;# 
  1907  0011                     	;# 
  1908  0012                     	;# 
  1909  0013                     	;# 
  1910  0014                     	;# 
  1911  0015                     	;# 
  1912  0016                     	;# 
  1913  0016                     	;# 
  1914  0017                     	;# 
  1915  0018                     	;# 
  1916  0019                     	;# 
  1917  001A                     	;# 
  1918  001B                     	;# 
  1919  001C                     	;# 
  1920  008C                     	;# 
  1921  008D                     	;# 
  1922  008E                     	;# 
  1923  008F                     	;# 
  1924  0090                     	;# 
  1925  0091                     	;# 
  1926  0092                     	;# 
  1927  0093                     	;# 
  1928  0094                     	;# 
  1929  0095                     	;# 
  1930  0096                     	;# 
  1931  0097                     	;# 
  1932  0099                     	;# 
  1933  009A                     	;# 
  1934  009B                     	;# 
  1935  009B                     	;# 
  1936  009C                     	;# 
  1937  009D                     	;# 
  1938  009E                     	;# 
  1939  010C                     	;# 
  1940  010D                     	;# 
  1941  010E                     	;# 
  1942  010F                     	;# 
  1943  0110                     	;# 
  1944  0116                     	;# 
  1945  0117                     	;# 
  1946  011D                     	;# 
  1947  018C                     	;# 
  1948  018D                     	;# 
  1949  018F                     	;# 
  1950  0190                     	;# 
  1951  0191                     	;# 
  1952  0191                     	;# 
  1953  0192                     	;# 
  1954  0193                     	;# 
  1955  0193                     	;# 
  1956  0194                     	;# 
  1957  0195                     	;# 
  1958  0196                     	;# 
  1959  0197                     	;# 
  1960  0199                     	;# 
  1961  0199                     	;# 
  1962  0199                     	;# 
  1963  019A                     	;# 
  1964  019A                     	;# 
  1965  019A                     	;# 
  1966  019B                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019C                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019D                     	;# 
  1975  019D                     	;# 
  1976  019D                     	;# 
  1977  019E                     	;# 
  1978  019E                     	;# 
  1979  019E                     	;# 
  1980  019F                     	;# 
  1981  019F                     	;# 
  1982  019F                     	;# 
  1983  020D                     	;# 
  1984  020F                     	;# 
  1985  0210                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0219                     	;# 
  2002  021A                     	;# 
  2003  021B                     	;# 
  2004  021C                     	;# 
  2005  021D                     	;# 
  2006  021E                     	;# 
  2007  021F                     	;# 
  2008  028C                     	;# 
  2009  028D                     	;# 
  2010  0291                     	;# 
  2011  0291                     	;# 
  2012  0292                     	;# 
  2013  0293                     	;# 
  2014  0298                     	;# 
  2015  0298                     	;# 
  2016  0299                     	;# 
  2017  029A                     	;# 
  2018  029D                     	;# 
  2019  029E                     	;# 
  2020  029F                     	;# 
  2021  030C                     	;# 
  2022  030D                     	;# 
  2023  0311                     	;# 
  2024  0311                     	;# 
  2025  0312                     	;# 
  2026  0313                     	;# 
  2027  0318                     	;# 
  2028  0318                     	;# 
  2029  0319                     	;# 
  2030  031A                     	;# 
  2031  031C                     	;# 
  2032  031C                     	;# 
  2033  031D                     	;# 
  2034  031E                     	;# 
  2035  038C                     	;# 
  2036  038D                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  040C                     	;# 
  2041  040D                     	;# 
  2042  0411                     	;# 
  2043  0411                     	;# 
  2044  0412                     	;# 
  2045  0413                     	;# 
  2046  0414                     	;# 
  2047  0415                     	;# 
  2048  0416                     	;# 
  2049  0417                     	;# 
  2050  0418                     	;# 
  2051  0418                     	;# 
  2052  0419                     	;# 
  2053  041A                     	;# 
  2054  041B                     	;# 
  2055  041C                     	;# 
  2056  041D                     	;# 
  2057  041E                     	;# 
  2058  048D                     	;# 
  2059  0491                     	;# 
  2060  0491                     	;# 
  2061  0492                     	;# 
  2062  0492                     	;# 
  2063  0493                     	;# 
  2064  0493                     	;# 
  2065  0493                     	;# 
  2066  0494                     	;# 
  2067  0494                     	;# 
  2068  0495                     	;# 
  2069  0495                     	;# 
  2070  0496                     	;# 
  2071  0496                     	;# 
  2072  0497                     	;# 
  2073  0497                     	;# 
  2074  0595                     	;# 
  2075  0596                     	;# 
  2076  0597                     	;# 
  2077  059C                     	;# 
  2078  059D                     	;# 
  2079  059E                     	;# 
  2080  0611                     	;# 
  2081  0611                     	;# 
  2082  0612                     	;# 
  2083  0613                     	;# 
  2084  0614                     	;# 
  2085  0614                     	;# 
  2086  0615                     	;# 
  2087  0616                     	;# 
  2088  0617                     	;# 
  2089  0617                     	;# 
  2090  0618                     	;# 
  2091  0619                     	;# 
  2092  061A                     	;# 
  2093  061A                     	;# 
  2094  061B                     	;# 
  2095  061C                     	;# 
  2096  061D                     	;# 
  2097  061D                     	;# 
  2098  061E                     	;# 
  2099  061F                     	;# 
  2100  0FE4                     	;# 
  2101  0FE5                     	;# 
  2102  0FE6                     	;# 
  2103  0FE7                     	;# 
  2104  0FE8                     	;# 
  2105  0FE9                     	;# 
  2106  0FEA                     	;# 
  2107  0FEB                     	;# 
  2108  0FED                     	;# 
  2109  0FEE                     	;# 
  2110  0FEF                     	;# 
  2111  0000                     	;# 
  2112  0001                     	;# 
  2113  0002                     	;# 
  2114  0003                     	;# 
  2115  0004                     	;# 
  2116  0005                     	;# 
  2117  0006                     	;# 
  2118  0007                     	;# 
  2119  0008                     	;# 
  2120  0009                     	;# 
  2121  000A                     	;# 
  2122  000B                     	;# 
  2123  000C                     	;# 
  2124  000D                     	;# 
  2125  000E                     	;# 
  2126  000F                     	;# 
  2127  0010                     	;# 
  2128  0011                     	;# 
  2129  0012                     	;# 
  2130  0013                     	;# 
  2131  0014                     	;# 
  2132  0015                     	;# 
  2133  0016                     	;# 
  2134  0016                     	;# 
  2135  0017                     	;# 
  2136  0018                     	;# 
  2137  0019                     	;# 
  2138  001A                     	;# 
  2139  001B                     	;# 
  2140  001C                     	;# 
  2141  008C                     	;# 
  2142  008D                     	;# 
  2143  008E                     	;# 
  2144  008F                     	;# 
  2145  0090                     	;# 
  2146  0091                     	;# 
  2147  0092                     	;# 
  2148  0093                     	;# 
  2149  0094                     	;# 
  2150  0095                     	;# 
  2151  0096                     	;# 
  2152  0097                     	;# 
  2153  0099                     	;# 
  2154  009A                     	;# 
  2155  009B                     	;# 
  2156  009B                     	;# 
  2157  009C                     	;# 
  2158  009D                     	;# 
  2159  009E                     	;# 
  2160  010C                     	;# 
  2161  010D                     	;# 
  2162  010E                     	;# 
  2163  010F                     	;# 
  2164  0110                     	;# 
  2165  0116                     	;# 
  2166  0117                     	;# 
  2167  011D                     	;# 
  2168  018C                     	;# 
  2169  018D                     	;# 
  2170  018F                     	;# 
  2171  0190                     	;# 
  2172  0191                     	;# 
  2173  0191                     	;# 
  2174  0192                     	;# 
  2175  0193                     	;# 
  2176  0193                     	;# 
  2177  0194                     	;# 
  2178  0195                     	;# 
  2179  0196                     	;# 
  2180  0197                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  020D                     	;# 
  2205  020F                     	;# 
  2206  0210                     	;# 
  2207  0211                     	;# 
  2208  0211                     	;# 
  2209  0212                     	;# 
  2210  0212                     	;# 
  2211  0213                     	;# 
  2212  0213                     	;# 
  2213  0214                     	;# 
  2214  0214                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0216                     	;# 
  2219  0216                     	;# 
  2220  0217                     	;# 
  2221  0217                     	;# 
  2222  0219                     	;# 
  2223  021A                     	;# 
  2224  021B                     	;# 
  2225  021C                     	;# 
  2226  021D                     	;# 
  2227  021E                     	;# 
  2228  021F                     	;# 
  2229  028C                     	;# 
  2230  028D                     	;# 
  2231  0291                     	;# 
  2232  0291                     	;# 
  2233  0292                     	;# 
  2234  0293                     	;# 
  2235  0298                     	;# 
  2236  0298                     	;# 
  2237  0299                     	;# 
  2238  029A                     	;# 
  2239  029D                     	;# 
  2240  029E                     	;# 
  2241  029F                     	;# 
  2242  030C                     	;# 
  2243  030D                     	;# 
  2244  0311                     	;# 
  2245  0311                     	;# 
  2246  0312                     	;# 
  2247  0313                     	;# 
  2248  0318                     	;# 
  2249  0318                     	;# 
  2250  0319                     	;# 
  2251  031A                     	;# 
  2252  031C                     	;# 
  2253  031C                     	;# 
  2254  031D                     	;# 
  2255  031E                     	;# 
  2256  038C                     	;# 
  2257  038D                     	;# 
  2258  0394                     	;# 
  2259  0395                     	;# 
  2260  0396                     	;# 
  2261  040C                     	;# 
  2262  040D                     	;# 
  2263  0411                     	;# 
  2264  0411                     	;# 
  2265  0412                     	;# 
  2266  0413                     	;# 
  2267  0414                     	;# 
  2268  0415                     	;# 
  2269  0416                     	;# 
  2270  0417                     	;# 
  2271  0418                     	;# 
  2272  0418                     	;# 
  2273  0419                     	;# 
  2274  041A                     	;# 
  2275  041B                     	;# 
  2276  041C                     	;# 
  2277  041D                     	;# 
  2278  041E                     	;# 
  2279  048D                     	;# 
  2280  0491                     	;# 
  2281  0491                     	;# 
  2282  0492                     	;# 
  2283  0492                     	;# 
  2284  0493                     	;# 
  2285  0493                     	;# 
  2286  0493                     	;# 
  2287  0494                     	;# 
  2288  0494                     	;# 
  2289  0495                     	;# 
  2290  0495                     	;# 
  2291  0496                     	;# 
  2292  0496                     	;# 
  2293  0497                     	;# 
  2294  0497                     	;# 
  2295  0595                     	;# 
  2296  0596                     	;# 
  2297  0597                     	;# 
  2298  059C                     	;# 
  2299  059D                     	;# 
  2300  059E                     	;# 
  2301  0611                     	;# 
  2302  0611                     	;# 
  2303  0612                     	;# 
  2304  0613                     	;# 
  2305  0614                     	;# 
  2306  0614                     	;# 
  2307  0615                     	;# 
  2308  0616                     	;# 
  2309  0617                     	;# 
  2310  0617                     	;# 
  2311  0618                     	;# 
  2312  0619                     	;# 
  2313  061A                     	;# 
  2314  061A                     	;# 
  2315  061B                     	;# 
  2316  061C                     	;# 
  2317  061D                     	;# 
  2318  061D                     	;# 
  2319  061E                     	;# 
  2320  061F                     	;# 
  2321  0FE4                     	;# 
  2322  0FE5                     	;# 
  2323  0FE6                     	;# 
  2324  0FE7                     	;# 
  2325  0FE8                     	;# 
  2326  0FE9                     	;# 
  2327  0FEA                     	;# 
  2328  0FEB                     	;# 
  2329  0FED                     	;# 
  2330  0FEE                     	;# 
  2331  0FEF                     	;# 
  2332  0000                     	;# 
  2333  0001                     	;# 
  2334  0002                     	;# 
  2335  0003                     	;# 
  2336  0004                     	;# 
  2337  0005                     	;# 
  2338  0006                     	;# 
  2339  0007                     	;# 
  2340  0008                     	;# 
  2341  0009                     	;# 
  2342  000A                     	;# 
  2343  000B                     	;# 
  2344  000C                     	;# 
  2345  000D                     	;# 
  2346  000E                     	;# 
  2347  000F                     	;# 
  2348  0010                     	;# 
  2349  0011                     	;# 
  2350  0012                     	;# 
  2351  0013                     	;# 
  2352  0014                     	;# 
  2353  0015                     	;# 
  2354  0016                     	;# 
  2355  0016                     	;# 
  2356  0017                     	;# 
  2357  0018                     	;# 
  2358  0019                     	;# 
  2359  001A                     	;# 
  2360  001B                     	;# 
  2361  001C                     	;# 
  2362  008C                     	;# 
  2363  008D                     	;# 
  2364  008E                     	;# 
  2365  008F                     	;# 
  2366  0090                     	;# 
  2367  0091                     	;# 
  2368  0092                     	;# 
  2369  0093                     	;# 
  2370  0094                     	;# 
  2371  0095                     	;# 
  2372  0096                     	;# 
  2373  0097                     	;# 
  2374  0099                     	;# 
  2375  009A                     	;# 
  2376  009B                     	;# 
  2377  009B                     	;# 
  2378  009C                     	;# 
  2379  009D                     	;# 
  2380  009E                     	;# 
  2381  010C                     	;# 
  2382  010D                     	;# 
  2383  010E                     	;# 
  2384  010F                     	;# 
  2385  0110                     	;# 
  2386  0116                     	;# 
  2387  0117                     	;# 
  2388  011D                     	;# 
  2389  018C                     	;# 
  2390  018D                     	;# 
  2391  018F                     	;# 
  2392  0190                     	;# 
  2393  0191                     	;# 
  2394  0191                     	;# 
  2395  0192                     	;# 
  2396  0193                     	;# 
  2397  0193                     	;# 
  2398  0194                     	;# 
  2399  0195                     	;# 
  2400  0196                     	;# 
  2401  0197                     	;# 
  2402  0199                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  019A                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019C                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019D                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019E                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019F                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  020D                     	;# 
  2426  020F                     	;# 
  2427  0210                     	;# 
  2428  0211                     	;# 
  2429  0211                     	;# 
  2430  0212                     	;# 
  2431  0212                     	;# 
  2432  0213                     	;# 
  2433  0213                     	;# 
  2434  0214                     	;# 
  2435  0214                     	;# 
  2436  0215                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0216                     	;# 
  2440  0216                     	;# 
  2441  0217                     	;# 
  2442  0217                     	;# 
  2443  0219                     	;# 
  2444  021A                     	;# 
  2445  021B                     	;# 
  2446  021C                     	;# 
  2447  021D                     	;# 
  2448  021E                     	;# 
  2449  021F                     	;# 
  2450  028C                     	;# 
  2451  028D                     	;# 
  2452  0291                     	;# 
  2453  0291                     	;# 
  2454  0292                     	;# 
  2455  0293                     	;# 
  2456  0298                     	;# 
  2457  0298                     	;# 
  2458  0299                     	;# 
  2459  029A                     	;# 
  2460  029D                     	;# 
  2461  029E                     	;# 
  2462  029F                     	;# 
  2463  030C                     	;# 
  2464  030D                     	;# 
  2465  0311                     	;# 
  2466  0311                     	;# 
  2467  0312                     	;# 
  2468  0313                     	;# 
  2469  0318                     	;# 
  2470  0318                     	;# 
  2471  0319                     	;# 
  2472  031A                     	;# 
  2473  031C                     	;# 
  2474  031C                     	;# 
  2475  031D                     	;# 
  2476  031E                     	;# 
  2477  038C                     	;# 
  2478  038D                     	;# 
  2479  0394                     	;# 
  2480  0395                     	;# 
  2481  0396                     	;# 
  2482  040C                     	;# 
  2483  040D                     	;# 
  2484  0411                     	;# 
  2485  0411                     	;# 
  2486  0412                     	;# 
  2487  0413                     	;# 
  2488  0414                     	;# 
  2489  0415                     	;# 
  2490  0416                     	;# 
  2491  0417                     	;# 
  2492  0418                     	;# 
  2493  0418                     	;# 
  2494  0419                     	;# 
  2495  041A                     	;# 
  2496  041B                     	;# 
  2497  041C                     	;# 
  2498  041D                     	;# 
  2499  041E                     	;# 
  2500  048D                     	;# 
  2501  0491                     	;# 
  2502  0491                     	;# 
  2503  0492                     	;# 
  2504  0492                     	;# 
  2505  0493                     	;# 
  2506  0493                     	;# 
  2507  0493                     	;# 
  2508  0494                     	;# 
  2509  0494                     	;# 
  2510  0495                     	;# 
  2511  0495                     	;# 
  2512  0496                     	;# 
  2513  0496                     	;# 
  2514  0497                     	;# 
  2515  0497                     	;# 
  2516  0595                     	;# 
  2517  0596                     	;# 
  2518  0597                     	;# 
  2519  059C                     	;# 
  2520  059D                     	;# 
  2521  059E                     	;# 
  2522  0611                     	;# 
  2523  0611                     	;# 
  2524  0612                     	;# 
  2525  0613                     	;# 
  2526  0614                     	;# 
  2527  0614                     	;# 
  2528  0615                     	;# 
  2529  0616                     	;# 
  2530  0617                     	;# 
  2531  0617                     	;# 
  2532  0618                     	;# 
  2533  0619                     	;# 
  2534  061A                     	;# 
  2535  061A                     	;# 
  2536  061B                     	;# 
  2537  061C                     	;# 
  2538  061D                     	;# 
  2539  061D                     	;# 
  2540  061E                     	;# 
  2541  061F                     	;# 
  2542  0FE4                     	;# 
  2543  0FE5                     	;# 
  2544  0FE6                     	;# 
  2545  0FE7                     	;# 
  2546  0FE8                     	;# 
  2547  0FE9                     	;# 
  2548  0FEA                     	;# 
  2549  0FEB                     	;# 
  2550  0FED                     	;# 
  2551  0FEE                     	;# 
  2552  0FEF                     	;# 
  2553  0000                     	;# 
  2554  0001                     	;# 
  2555  0002                     	;# 
  2556  0003                     	;# 
  2557  0004                     	;# 
  2558  0005                     	;# 
  2559  0006                     	;# 
  2560  0007                     	;# 
  2561  0008                     	;# 
  2562  0009                     	;# 
  2563  000A                     	;# 
  2564  000B                     	;# 
  2565  000C                     	;# 
  2566  000D                     	;# 
  2567  000E                     	;# 
  2568  000F                     	;# 
  2569  0010                     	;# 
  2570  0011                     	;# 
  2571  0012                     	;# 
  2572  0013                     	;# 
  2573  0014                     	;# 
  2574  0015                     	;# 
  2575  0016                     	;# 
  2576  0016                     	;# 
  2577  0017                     	;# 
  2578  0018                     	;# 
  2579  0019                     	;# 
  2580  001A                     	;# 
  2581  001B                     	;# 
  2582  001C                     	;# 
  2583  008C                     	;# 
  2584  008D                     	;# 
  2585  008E                     	;# 
  2586  008F                     	;# 
  2587  0090                     	;# 
  2588  0091                     	;# 
  2589  0092                     	;# 
  2590  0093                     	;# 
  2591  0094                     	;# 
  2592  0095                     	;# 
  2593  0096                     	;# 
  2594  0097                     	;# 
  2595  0099                     	;# 
  2596  009A                     	;# 
  2597  009B                     	;# 
  2598  009B                     	;# 
  2599  009C                     	;# 
  2600  009D                     	;# 
  2601  009E                     	;# 
  2602  010C                     	;# 
  2603  010D                     	;# 
  2604  010E                     	;# 
  2605  010F                     	;# 
  2606  0110                     	;# 
  2607  0116                     	;# 
  2608  0117                     	;# 
  2609  011D                     	;# 
  2610  018C                     	;# 
  2611  018D                     	;# 
  2612  018F                     	;# 
  2613  0190                     	;# 
  2614  0191                     	;# 
  2615  0191                     	;# 
  2616  0192                     	;# 
  2617  0193                     	;# 
  2618  0193                     	;# 
  2619  0194                     	;# 
  2620  0195                     	;# 
  2621  0196                     	;# 
  2622  0197                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  0199                     	;# 
  2626  019A                     	;# 
  2627  019A                     	;# 
  2628  019A                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019B                     	;# 
  2634  019C                     	;# 
  2635  019C                     	;# 
  2636  019C                     	;# 
  2637  019D                     	;# 
  2638  019D                     	;# 
  2639  019D                     	;# 
  2640  019E                     	;# 
  2641  019E                     	;# 
  2642  019E                     	;# 
  2643  019F                     	;# 
  2644  019F                     	;# 
  2645  019F                     	;# 
  2646  020D                     	;# 
  2647  020F                     	;# 
  2648  0210                     	;# 
  2649  0211                     	;# 
  2650  0211                     	;# 
  2651  0212                     	;# 
  2652  0212                     	;# 
  2653  0213                     	;# 
  2654  0213                     	;# 
  2655  0214                     	;# 
  2656  0214                     	;# 
  2657  0215                     	;# 
  2658  0215                     	;# 
  2659  0215                     	;# 
  2660  0216                     	;# 
  2661  0216                     	;# 
  2662  0217                     	;# 
  2663  0217                     	;# 
  2664  0219                     	;# 
  2665  021A                     	;# 
  2666  021B                     	;# 
  2667  021C                     	;# 
  2668  021D                     	;# 
  2669  021E                     	;# 
  2670  021F                     	;# 
  2671  028C                     	;# 
  2672  028D                     	;# 
  2673  0291                     	;# 
  2674  0291                     	;# 
  2675  0292                     	;# 
  2676  0293                     	;# 
  2677  0298                     	;# 
  2678  0298                     	;# 
  2679  0299                     	;# 
  2680  029A                     	;# 
  2681  029D                     	;# 
  2682  029E                     	;# 
  2683  029F                     	;# 
  2684  030C                     	;# 
  2685  030D                     	;# 
  2686  0311                     	;# 
  2687  0311                     	;# 
  2688  0312                     	;# 
  2689  0313                     	;# 
  2690  0318                     	;# 
  2691  0318                     	;# 
  2692  0319                     	;# 
  2693  031A                     	;# 
  2694  031C                     	;# 
  2695  031C                     	;# 
  2696  031D                     	;# 
  2697  031E                     	;# 
  2698  038C                     	;# 
  2699  038D                     	;# 
  2700  0394                     	;# 
  2701  0395                     	;# 
  2702  0396                     	;# 
  2703  040C                     	;# 
  2704  040D                     	;# 
  2705  0411                     	;# 
  2706  0411                     	;# 
  2707  0412                     	;# 
  2708  0413                     	;# 
  2709  0414                     	;# 
  2710  0415                     	;# 
  2711  0416                     	;# 
  2712  0417                     	;# 
  2713  0418                     	;# 
  2714  0418                     	;# 
  2715  0419                     	;# 
  2716  041A                     	;# 
  2717  041B                     	;# 
  2718  041C                     	;# 
  2719  041D                     	;# 
  2720  041E                     	;# 
  2721  048D                     	;# 
  2722  0491                     	;# 
  2723  0491                     	;# 
  2724  0492                     	;# 
  2725  0492                     	;# 
  2726  0493                     	;# 
  2727  0493                     	;# 
  2728  0493                     	;# 
  2729  0494                     	;# 
  2730  0494                     	;# 
  2731  0495                     	;# 
  2732  0495                     	;# 
  2733  0496                     	;# 
  2734  0496                     	;# 
  2735  0497                     	;# 
  2736  0497                     	;# 
  2737  0595                     	;# 
  2738  0596                     	;# 
  2739  0597                     	;# 
  2740  059C                     	;# 
  2741  059D                     	;# 
  2742  059E                     	;# 
  2743  0611                     	;# 
  2744  0611                     	;# 
  2745  0612                     	;# 
  2746  0613                     	;# 
  2747  0614                     	;# 
  2748  0614                     	;# 
  2749  0615                     	;# 
  2750  0616                     	;# 
  2751  0617                     	;# 
  2752  0617                     	;# 
  2753  0618                     	;# 
  2754  0619                     	;# 
  2755  061A                     	;# 
  2756  061A                     	;# 
  2757  061B                     	;# 
  2758  061C                     	;# 
  2759  061D                     	;# 
  2760  061D                     	;# 
  2761  061E                     	;# 
  2762  061F                     	;# 
  2763  0FE4                     	;# 
  2764  0FE5                     	;# 
  2765  0FE6                     	;# 
  2766  0FE7                     	;# 
  2767  0FE8                     	;# 
  2768  0FE9                     	;# 
  2769  0FEA                     	;# 
  2770  0FEB                     	;# 
  2771  0FED                     	;# 
  2772  0FEE                     	;# 
  2773  0FEF                     	;# 
  2774  0000                     	;# 
  2775  0001                     	;# 
  2776  0002                     	;# 
  2777  0003                     	;# 
  2778  0004                     	;# 
  2779  0005                     	;# 
  2780  0006                     	;# 
  2781  0007                     	;# 
  2782  0008                     	;# 
  2783  0009                     	;# 
  2784  000A                     	;# 
  2785  000B                     	;# 
  2786  000C                     	;# 
  2787  000D                     	;# 
  2788  000E                     	;# 
  2789  000F                     	;# 
  2790  0010                     	;# 
  2791  0011                     	;# 
  2792  0012                     	;# 
  2793  0013                     	;# 
  2794  0014                     	;# 
  2795  0015                     	;# 
  2796  0016                     	;# 
  2797  0016                     	;# 
  2798  0017                     	;# 
  2799  0018                     	;# 
  2800  0019                     	;# 
  2801  001A                     	;# 
  2802  001B                     	;# 
  2803  001C                     	;# 
  2804  008C                     	;# 
  2805  008D                     	;# 
  2806  008E                     	;# 
  2807  008F                     	;# 
  2808  0090                     	;# 
  2809  0091                     	;# 
  2810  0092                     	;# 
  2811  0093                     	;# 
  2812  0094                     	;# 
  2813  0095                     	;# 
  2814  0096                     	;# 
  2815  0097                     	;# 
  2816  0099                     	;# 
  2817  009A                     	;# 
  2818  009B                     	;# 
  2819  009B                     	;# 
  2820  009C                     	;# 
  2821  009D                     	;# 
  2822  009E                     	;# 
  2823  010C                     	;# 
  2824  010D                     	;# 
  2825  010E                     	;# 
  2826  010F                     	;# 
  2827  0110                     	;# 
  2828  0116                     	;# 
  2829  0117                     	;# 
  2830  011D                     	;# 
  2831  018C                     	;# 
  2832  018D                     	;# 
  2833  018F                     	;# 
  2834  0190                     	;# 
  2835  0191                     	;# 
  2836  0191                     	;# 
  2837  0192                     	;# 
  2838  0193                     	;# 
  2839  0193                     	;# 
  2840  0194                     	;# 
  2841  0195                     	;# 
  2842  0196                     	;# 
  2843  0197                     	;# 
  2844  0199                     	;# 
  2845  0199                     	;# 
  2846  0199                     	;# 
  2847  019A                     	;# 
  2848  019A                     	;# 
  2849  019A                     	;# 
  2850  019B                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019C                     	;# 
  2856  019C                     	;# 
  2857  019C                     	;# 
  2858  019D                     	;# 
  2859  019D                     	;# 
  2860  019D                     	;# 
  2861  019E                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  020D                     	;# 
  2868  020F                     	;# 
  2869  0210                     	;# 
  2870  0211                     	;# 
  2871  0211                     	;# 
  2872  0212                     	;# 
  2873  0212                     	;# 
  2874  0213                     	;# 
  2875  0213                     	;# 
  2876  0214                     	;# 
  2877  0214                     	;# 
  2878  0215                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0216                     	;# 
  2882  0216                     	;# 
  2883  0217                     	;# 
  2884  0217                     	;# 
  2885  0219                     	;# 
  2886  021A                     	;# 
  2887  021B                     	;# 
  2888  021C                     	;# 
  2889  021D                     	;# 
  2890  021E                     	;# 
  2891  021F                     	;# 
  2892  028C                     	;# 
  2893  028D                     	;# 
  2894  0291                     	;# 
  2895  0291                     	;# 
  2896  0292                     	;# 
  2897  0293                     	;# 
  2898  0298                     	;# 
  2899  0298                     	;# 
  2900  0299                     	;# 
  2901  029A                     	;# 
  2902  029D                     	;# 
  2903  029E                     	;# 
  2904  029F                     	;# 
  2905  030C                     	;# 
  2906  030D                     	;# 
  2907  0311                     	;# 
  2908  0311                     	;# 
  2909  0312                     	;# 
  2910  0313                     	;# 
  2911  0318                     	;# 
  2912  0318                     	;# 
  2913  0319                     	;# 
  2914  031A                     	;# 
  2915  031C                     	;# 
  2916  031C                     	;# 
  2917  031D                     	;# 
  2918  031E                     	;# 
  2919  038C                     	;# 
  2920  038D                     	;# 
  2921  0394                     	;# 
  2922  0395                     	;# 
  2923  0396                     	;# 
  2924  040C                     	;# 
  2925  040D                     	;# 
  2926  0411                     	;# 
  2927  0411                     	;# 
  2928  0412                     	;# 
  2929  0413                     	;# 
  2930  0414                     	;# 
  2931  0415                     	;# 
  2932  0416                     	;# 
  2933  0417                     	;# 
  2934  0418                     	;# 
  2935  0418                     	;# 
  2936  0419                     	;# 
  2937  041A                     	;# 
  2938  041B                     	;# 
  2939  041C                     	;# 
  2940  041D                     	;# 
  2941  041E                     	;# 
  2942  048D                     	;# 
  2943  0491                     	;# 
  2944  0491                     	;# 
  2945  0492                     	;# 
  2946  0492                     	;# 
  2947  0493                     	;# 
  2948  0493                     	;# 
  2949  0493                     	;# 
  2950  0494                     	;# 
  2951  0494                     	;# 
  2952  0495                     	;# 
  2953  0495                     	;# 
  2954  0496                     	;# 
  2955  0496                     	;# 
  2956  0497                     	;# 
  2957  0497                     	;# 
  2958  0595                     	;# 
  2959  0596                     	;# 
  2960  0597                     	;# 
  2961  059C                     	;# 
  2962  059D                     	;# 
  2963  059E                     	;# 
  2964  0611                     	;# 
  2965  0611                     	;# 
  2966  0612                     	;# 
  2967  0613                     	;# 
  2968  0614                     	;# 
  2969  0614                     	;# 
  2970  0615                     	;# 
  2971  0616                     	;# 
  2972  0617                     	;# 
  2973  0617                     	;# 
  2974  0618                     	;# 
  2975  0619                     	;# 
  2976  061A                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061D                     	;# 
  2981  061D                     	;# 
  2982  061E                     	;# 
  2983  061F                     	;# 
  2984  0FE4                     	;# 
  2985  0FE5                     	;# 
  2986  0FE6                     	;# 
  2987  0FE7                     	;# 
  2988  0FE8                     	;# 
  2989  0FE9                     	;# 
  2990  0FEA                     	;# 
  2991  0FEB                     	;# 
  2992  0FED                     	;# 
  2993  0FEE                     	;# 
  2994  0FEF                     	;# 
  2995  0000                     	;# 
  2996  0001                     	;# 
  2997  0002                     	;# 
  2998  0003                     	;# 
  2999  0004                     	;# 
  3000  0005                     	;# 
  3001  0006                     	;# 
  3002  0007                     	;# 
  3003  0008                     	;# 
  3004  0009                     	;# 
  3005  000A                     	;# 
  3006  000B                     	;# 
  3007  000C                     	;# 
  3008  000D                     	;# 
  3009  000E                     	;# 
  3010  000F                     	;# 
  3011  0010                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  008C                     	;# 
  3026  008D                     	;# 
  3027  008E                     	;# 
  3028  008F                     	;# 
  3029  0090                     	;# 
  3030  0091                     	;# 
  3031  0092                     	;# 
  3032  0093                     	;# 
  3033  0094                     	;# 
  3034  0095                     	;# 
  3035  0096                     	;# 
  3036  0097                     	;# 
  3037  0099                     	;# 
  3038  009A                     	;# 
  3039  009B                     	;# 
  3040  009B                     	;# 
  3041  009C                     	;# 
  3042  009D                     	;# 
  3043  009E                     	;# 
  3044  010C                     	;# 
  3045  010D                     	;# 
  3046  010E                     	;# 
  3047  010F                     	;# 
  3048  0110                     	;# 
  3049  0116                     	;# 
  3050  0117                     	;# 
  3051  011D                     	;# 
  3052  018C                     	;# 
  3053  018D                     	;# 
  3054  018F                     	;# 
  3055  0190                     	;# 
  3056  0191                     	;# 
  3057  0191                     	;# 
  3058  0192                     	;# 
  3059  0193                     	;# 
  3060  0193                     	;# 
  3061  0194                     	;# 
  3062  0195                     	;# 
  3063  0196                     	;# 
  3064  0197                     	;# 
  3065  0199                     	;# 
  3066  0199                     	;# 
  3067  0199                     	;# 
  3068  019A                     	;# 
  3069  019A                     	;# 
  3070  019A                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019C                     	;# 
  3077  019C                     	;# 
  3078  019C                     	;# 
  3079  019D                     	;# 
  3080  019D                     	;# 
  3081  019D                     	;# 
  3082  019E                     	;# 
  3083  019E                     	;# 
  3084  019E                     	;# 
  3085  019F                     	;# 
  3086  019F                     	;# 
  3087  019F                     	;# 
  3088  020D                     	;# 
  3089  020F                     	;# 
  3090  0210                     	;# 
  3091  0211                     	;# 
  3092  0211                     	;# 
  3093  0212                     	;# 
  3094  0212                     	;# 
  3095  0213                     	;# 
  3096  0213                     	;# 
  3097  0214                     	;# 
  3098  0214                     	;# 
  3099  0215                     	;# 
  3100  0215                     	;# 
  3101  0215                     	;# 
  3102  0216                     	;# 
  3103  0216                     	;# 
  3104  0217                     	;# 
  3105  0217                     	;# 
  3106  0219                     	;# 
  3107  021A                     	;# 
  3108  021B                     	;# 
  3109  021C                     	;# 
  3110  021D                     	;# 
  3111  021E                     	;# 
  3112  021F                     	;# 
  3113  028C                     	;# 
  3114  028D                     	;# 
  3115  0291                     	;# 
  3116  0291                     	;# 
  3117  0292                     	;# 
  3118  0293                     	;# 
  3119  0298                     	;# 
  3120  0298                     	;# 
  3121  0299                     	;# 
  3122  029A                     	;# 
  3123  029D                     	;# 
  3124  029E                     	;# 
  3125  029F                     	;# 
  3126  030C                     	;# 
  3127  030D                     	;# 
  3128  0311                     	;# 
  3129  0311                     	;# 
  3130  0312                     	;# 
  3131  0313                     	;# 
  3132  0318                     	;# 
  3133  0318                     	;# 
  3134  0319                     	;# 
  3135  031A                     	;# 
  3136  031C                     	;# 
  3137  031C                     	;# 
  3138  031D                     	;# 
  3139  031E                     	;# 
  3140  038C                     	;# 
  3141  038D                     	;# 
  3142  0394                     	;# 
  3143  0395                     	;# 
  3144  0396                     	;# 
  3145  040C                     	;# 
  3146  040D                     	;# 
  3147  0411                     	;# 
  3148  0411                     	;# 
  3149  0412                     	;# 
  3150  0413                     	;# 
  3151  0414                     	;# 
  3152  0415                     	;# 
  3153  0416                     	;# 
  3154  0417                     	;# 
  3155  0418                     	;# 
  3156  0418                     	;# 
  3157  0419                     	;# 
  3158  041A                     	;# 
  3159  041B                     	;# 
  3160  041C                     	;# 
  3161  041D                     	;# 
  3162  041E                     	;# 
  3163  048D                     	;# 
  3164  0491                     	;# 
  3165  0491                     	;# 
  3166  0492                     	;# 
  3167  0492                     	;# 
  3168  0493                     	;# 
  3169  0493                     	;# 
  3170  0493                     	;# 
  3171  0494                     	;# 
  3172  0494                     	;# 
  3173  0495                     	;# 
  3174  0495                     	;# 
  3175  0496                     	;# 
  3176  0496                     	;# 
  3177  0497                     	;# 
  3178  0497                     	;# 
  3179  0595                     	;# 
  3180  0596                     	;# 
  3181  0597                     	;# 
  3182  059C                     	;# 
  3183  059D                     	;# 
  3184  059E                     	;# 
  3185  0611                     	;# 
  3186  0611                     	;# 
  3187  0612                     	;# 
  3188  0613                     	;# 
  3189  0614                     	;# 
  3190  0614                     	;# 
  3191  0615                     	;# 
  3192  0616                     	;# 
  3193  0617                     	;# 
  3194  0617                     	;# 
  3195  0618                     	;# 
  3196  0619                     	;# 
  3197  061A                     	;# 
  3198  061A                     	;# 
  3199  061B                     	;# 
  3200  061C                     	;# 
  3201  061D                     	;# 
  3202  061D                     	;# 
  3203  061E                     	;# 
  3204  061F                     	;# 
  3205  0FE4                     	;# 
  3206  0FE5                     	;# 
  3207  0FE6                     	;# 
  3208  0FE7                     	;# 
  3209  0FE8                     	;# 
  3210  0FE9                     	;# 
  3211  0FEA                     	;# 
  3212  0FEB                     	;# 
  3213  0FED                     	;# 
  3214  0FEE                     	;# 
  3215  0FEF                     	;# 
  3216  0000                     	;# 
  3217  0001                     	;# 
  3218  0002                     	;# 
  3219  0003                     	;# 
  3220  0004                     	;# 
  3221  0005                     	;# 
  3222  0006                     	;# 
  3223  0007                     	;# 
  3224  0008                     	;# 
  3225  0009                     	;# 
  3226  000A                     	;# 
  3227  000B                     	;# 
  3228  000C                     	;# 
  3229  000D                     	;# 
  3230  000E                     	;# 
  3231  000F                     	;# 
  3232  0010                     	;# 
  3233  0011                     	;# 
  3234  0012                     	;# 
  3235  0013                     	;# 
  3236  0014                     	;# 
  3237  0015                     	;# 
  3238  0016                     	;# 
  3239  0016                     	;# 
  3240  0017                     	;# 
  3241  0018                     	;# 
  3242  0019                     	;# 
  3243  001A                     	;# 
  3244  001B                     	;# 
  3245  001C                     	;# 
  3246  008C                     	;# 
  3247  008D                     	;# 
  3248  008E                     	;# 
  3249  008F                     	;# 
  3250  0090                     	;# 
  3251  0091                     	;# 
  3252  0092                     	;# 
  3253  0093                     	;# 
  3254  0094                     	;# 
  3255  0095                     	;# 
  3256  0096                     	;# 
  3257  0097                     	;# 
  3258  0099                     	;# 
  3259  009A                     	;# 
  3260  009B                     	;# 
  3261  009B                     	;# 
  3262  009C                     	;# 
  3263  009D                     	;# 
  3264  009E                     	;# 
  3265  010C                     	;# 
  3266  010D                     	;# 
  3267  010E                     	;# 
  3268  010F                     	;# 
  3269  0110                     	;# 
  3270  0116                     	;# 
  3271  0117                     	;# 
  3272  011D                     	;# 
  3273  018C                     	;# 
  3274  018D                     	;# 
  3275  018F                     	;# 
  3276  0190                     	;# 
  3277  0191                     	;# 
  3278  0191                     	;# 
  3279  0192                     	;# 
  3280  0193                     	;# 
  3281  0193                     	;# 
  3282  0194                     	;# 
  3283  0195                     	;# 
  3284  0196                     	;# 
  3285  0197                     	;# 
  3286  0199                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  019A                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019B                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019C                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019D                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019E                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019F                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  020D                     	;# 
  3310  020F                     	;# 
  3311  0210                     	;# 
  3312  0211                     	;# 
  3313  0211                     	;# 
  3314  0212                     	;# 
  3315  0212                     	;# 
  3316  0213                     	;# 
  3317  0213                     	;# 
  3318  0214                     	;# 
  3319  0214                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0216                     	;# 
  3324  0216                     	;# 
  3325  0217                     	;# 
  3326  0217                     	;# 
  3327  0219                     	;# 
  3328  021A                     	;# 
  3329  021B                     	;# 
  3330  021C                     	;# 
  3331  021D                     	;# 
  3332  021E                     	;# 
  3333  021F                     	;# 
  3334  028C                     	;# 
  3335  028D                     	;# 
  3336  0291                     	;# 
  3337  0291                     	;# 
  3338  0292                     	;# 
  3339  0293                     	;# 
  3340  0298                     	;# 
  3341  0298                     	;# 
  3342  0299                     	;# 
  3343  029A                     	;# 
  3344  029D                     	;# 
  3345  029E                     	;# 
  3346  029F                     	;# 
  3347  030C                     	;# 
  3348  030D                     	;# 
  3349  0311                     	;# 
  3350  0311                     	;# 
  3351  0312                     	;# 
  3352  0313                     	;# 
  3353  0318                     	;# 
  3354  0318                     	;# 
  3355  0319                     	;# 
  3356  031A                     	;# 
  3357  031C                     	;# 
  3358  031C                     	;# 
  3359  031D                     	;# 
  3360  031E                     	;# 
  3361  038C                     	;# 
  3362  038D                     	;# 
  3363  0394                     	;# 
  3364  0395                     	;# 
  3365  0396                     	;# 
  3366  040C                     	;# 
  3367  040D                     	;# 
  3368  0411                     	;# 
  3369  0411                     	;# 
  3370  0412                     	;# 
  3371  0413                     	;# 
  3372  0414                     	;# 
  3373  0415                     	;# 
  3374  0416                     	;# 
  3375  0417                     	;# 
  3376  0418                     	;# 
  3377  0418                     	;# 
  3378  0419                     	;# 
  3379  041A                     	;# 
  3380  041B                     	;# 
  3381  041C                     	;# 
  3382  041D                     	;# 
  3383  041E                     	;# 
  3384  048D                     	;# 
  3385  0491                     	;# 
  3386  0491                     	;# 
  3387  0492                     	;# 
  3388  0492                     	;# 
  3389  0493                     	;# 
  3390  0493                     	;# 
  3391  0493                     	;# 
  3392  0494                     	;# 
  3393  0494                     	;# 
  3394  0495                     	;# 
  3395  0495                     	;# 
  3396  0496                     	;# 
  3397  0496                     	;# 
  3398  0497                     	;# 
  3399  0497                     	;# 
  3400  0595                     	;# 
  3401  0596                     	;# 
  3402  0597                     	;# 
  3403  059C                     	;# 
  3404  059D                     	;# 
  3405  059E                     	;# 
  3406  0611                     	;# 
  3407  0611                     	;# 
  3408  0612                     	;# 
  3409  0613                     	;# 
  3410  0614                     	;# 
  3411  0614                     	;# 
  3412  0615                     	;# 
  3413  0616                     	;# 
  3414  0617                     	;# 
  3415  0617                     	;# 
  3416  0618                     	;# 
  3417  0619                     	;# 
  3418  061A                     	;# 
  3419  061A                     	;# 
  3420  061B                     	;# 
  3421  061C                     	;# 
  3422  061D                     	;# 
  3423  061D                     	;# 
  3424  061E                     	;# 
  3425  061F                     	;# 
  3426  0FE4                     	;# 
  3427  0FE5                     	;# 
  3428  0FE6                     	;# 
  3429  0FE7                     	;# 
  3430  0FE8                     	;# 
  3431  0FE9                     	;# 
  3432  0FEA                     	;# 
  3433  0FEB                     	;# 
  3434  0FED                     	;# 
  3435  0FEE                     	;# 
  3436  0FEF                     	;_modArray
  3437                           
  3438                           	psect	idataBANK0
  3439  1001                     __pidataBANK0:	
  3440                           
  3441                           ;initializer for _delay_time
  3442  1001  34D0               	retlw	208
  3443  1002  3407               	retlw	7
  3444  1003  3400               	retlw	0
  3445  1004  3400               	retlw	0
  3446                           
  3447                           ;initializer for _bottom_push_state
  3448  1005  3401               	retlw	1
  3449  1006  3400               	retlw	0
  3450                           
  3451                           ;initializer for _long_press_limit
  3452  1007  34E8               	retlw	232
  3453  1008  3403               	retlw	3
  3454                           
  3455                           ;initializer for _top_push_state
  3456  1009  3406               	retlw	6
  3457  100A  3400               	retlw	0
  3458                           
  3459                           ;initializer for _blink_rate
  3460  100B  3414               	retlw	20
  3461                           
  3462                           ;initializer for _longTap_state
  3463  100C  34FF               	retlw	255
  3464                           
  3465                           ;initializer for _num_taps
  3466  100D  3404               	retlw	4
  3467                           
  3468                           ;initializer for _switchBypass_state
  3469  100E  34FF               	retlw	255
  3470                           
  3471                           	psect	idataBANK2
  3472  0003                     __pidataBANK2:	
  3473                           
  3474                           ;initializer for _presetChannel
  3475  0003  3401               	retlw	1
  3476                           
  3477                           	psect	idataBANK3
  3478  2EC4                     __pidataBANK3:	
  3479                           
  3480                           ;initializer for _baseline_mod_time
  3481  2EC4  34D0               	retlw	208
  3482  2EC5  3407               	retlw	7
  3483  2EC6  3400               	retlw	0
  3484  2EC7  3400               	retlw	0
  3485                           
  3486                           ;initializer for _blink_delay
  3487  2EC8  3464               	retlw	100
  3488  2EC9  3400               	retlw	0
  3489                           
  3490                           ;initializer for _knob1_prev
  3491  2ECA  34D0               	retlw	208
  3492  2ECB  3407               	retlw	7
  3493                           
  3494                           ;initializer for _knob2_prev
  3495  2ECC  34D0               	retlw	208
  3496  2ECD  3407               	retlw	7
  3497                           
  3498                           ;initializer for _knob3_prev
  3499  2ECE  34D0               	retlw	208
  3500  2ECF  3407               	retlw	7
  3501                           
  3502                           ;initializer for _knob4_prev
  3503  2ED0  34D0               	retlw	208
  3504  2ED1  3407               	retlw	7
  3505                           
  3506                           ;initializer for _knob5_prev
  3507  2ED2  34D0               	retlw	208
  3508  2ED3  3407               	retlw	7
  3509                           
  3510                           ;initializer for _mod_counter
  3511  2ED4  3401               	retlw	1
  3512  2ED5  3400               	retlw	0
  3513                           
  3514                           ;initializer for _mod_delay_time
  3515  2ED6  34D0               	retlw	208
  3516  2ED7  3407               	retlw	7
  3517                           
  3518                           ;initializer for _symmetry
  3519  2ED8  34B4               	retlw	180
  3520  2ED9  3400               	retlw	0
  3521                           
  3522                           ;initializer for _tap_iteration
  3523  2EDA  3401               	retlw	1
  3524  2EDB  3400               	retlw	0
  3525                           
  3526                           ;initializer for _blink_state
  3527  2EDC  3401               	retlw	1
  3528                           
  3529                           ;initializer for _currentBypassState
  3530  2EDD  34FF               	retlw	255
  3531                           
  3532                           ;initializer for _expSwitchState
  3533  2EDE  34FF               	retlw	255
  3534                           
  3535                           ;initializer for _expressModeCnst
  3536  2EDF  3402               	retlw	2
  3537                           
  3538                           ;initializer for _expressionChannel
  3539  2EE0  3401               	retlw	1
  3540                           
  3541                           ;initializer for _mod_time_changed
  3542  2EE1  3401               	retlw	1
  3543                           
  3544                           ;initializer for _presetModeCnst
  3545  2EE2  3401               	retlw	1
  3546                           
  3547                           ;initializer for _switchTap_state
  3548  2EE3  34FF               	retlw	255
  3549                           
  3550                           	psect	idataBANK4
  3551  07FE                     __pidataBANK4:	
  3552                           
  3553                           ;initializer for _switchBypass_up
  3554  07FE  3401               	retlw	1
  3555  07FF  3400               	retlw	0
  3556                           
  3557                           	psect	stringtext
  3558  2800                     __pstringtext:	
  3559  2800                     exp@coeff:	
  3560  2800  3400               	retlw	0
  3561  2801  3480               	retlw	128
  3562  2802  343F               	retlw	63
  3563  2803  3472               	retlw	114
  3564  2804  3431               	retlw	49
  3565  2805  343F               	retlw	63
  3566  2806  34FE               	retlw	254
  3567  2807  3475               	retlw	117
  3568  2808  343E               	retlw	62
  3569  2809  3458               	retlw	88
  3570  280A  3463               	retlw	99
  3571  280B  343D               	retlw	61
  3572  280C  3495               	retlw	149
  3573  280D  341D               	retlw	29
  3574  280E  343C               	retlw	60
  3575  280F  34C5               	retlw	197
  3576  2810  34AE               	retlw	174
  3577  2811  343A               	retlw	58
  3578  2812  3479               	retlw	121
  3579  2813  3421               	retlw	33
  3580  2814  3439               	retlw	57
  3581  2815  3494               	retlw	148
  3582  2816  3480               	retlw	128
  3583  2817  3437               	retlw	55
  3584  2818  3493               	retlw	147
  3585  2819  34A7               	retlw	167
  3586  281A  3435               	retlw	53
  3587  281B  3456               	retlw	86
  3588  281C  3415               	retlw	21
  3589  281D  3434               	retlw	52
  3590  281E                     __end_ofexp@coeff:	
  3591  281E                     log@coeff:	
  3592  281E  3400               	retlw	0
  3593  281F  3400               	retlw	0
  3594  2820  3400               	retlw	0
  3595  2821  3400               	retlw	0
  3596  2822  3480               	retlw	128
  3597  2823  343F               	retlw	63
  3598  2824  34F0               	retlw	240
  3599  2825  34FF               	retlw	255
  3600  2826  34BE               	retlw	190
  3601  2827  34E2               	retlw	226
  3602  2828  34A9               	retlw	169
  3603  2829  343E               	retlw	62
  3604  282A  3483               	retlw	131
  3605  282B  3476               	retlw	118
  3606  282C  34BE               	retlw	190
  3607  282D  34AE               	retlw	174
  3608  282E  342B               	retlw	43
  3609  282F  343E               	retlw	62
  3610  2830  343C               	retlw	60
  3611  2831  34C3               	retlw	195
  3612  2832  34BD               	retlw	189
  3613  2833  34D2               	retlw	210
  3614  2834  3413               	retlw	19
  3615  2835  343D               	retlw	61
  3616  2836  3478               	retlw	120
  3617  2837  34D3               	retlw	211
  3618  2838  34BB               	retlw	187
  3619  2839                     __end_oflog@coeff:	
  3620  2839                     sin@coeff_a:	
  3621  2839  34F4               	retlw	244
  3622  283A  344A               	retlw	74
  3623  283B  3448               	retlw	72
  3624  283C  3495               	retlw	149
  3625  283D  3495               	retlw	149
  3626  283E  34C7               	retlw	199
  3627  283F  34C1               	retlw	193
  3628  2840  34DC               	retlw	220
  3629  2841  3445               	retlw	69
  3630  2842  34DC               	retlw	220
  3631  2843  346D               	retlw	109
  3632  2844  34C3               	retlw	195
  3633  2845  34B3               	retlw	179
  3634  2846  3433               	retlw	51
  3635  2847  3440               	retlw	64
  3636  2848                     __end_ofsin@coeff_a:	
  3637  2848                     sin@coeff_b:	
  3638  2848  3434               	retlw	52
  3639  2849  3401               	retlw	1
  3640  284A  3448               	retlw	72
  3641  284B  349D               	retlw	157
  3642  284C  34B0               	retlw	176
  3643  284D  3445               	retlw	69
  3644  284E  3400               	retlw	0
  3645  284F  34DA               	retlw	218
  3646  2850  3442               	retlw	66
  3647  2851  3400               	retlw	0
  3648  2852  3480               	retlw	128
  3649  2853  343F               	retlw	63
  3650  2854                     __end_ofsin@coeff_b:	
  3651  000B                     _INTCONbits	set	11
  3652  0011                     _PIR1bits	set	17
  3653  000C                     _PORTAbits	set	12
  3654  000E                     _PORTCbits	set	14
  3655  000F                     _PORTDbits	set	15
  3656  0010                     _PORTEbits	set	16
  3657  001B                     _PR2	set	27
  3658  001C                     _T2CONbits	set	28
  3659  005F                     _GIE	set	95
  3660  005E                     _PEIE	set	94
  3661  0069                     _RB1	set	105
  3662  009D                     _ADCON0bits	set	157
  3663  009E                     _ADCON1bits	set	158
  3664  009C                     _ADRESH	set	156
  3665  009B                     _ADRESL	set	155
  3666  0095                     _OPTION_REGbits	set	149
  3667  0099                     _OSCCONbits	set	153
  3668  008D                     _TRISBbits	set	141
  3669  008E                     _TRISCbits	set	142
  3670  008F                     _TRISDbits	set	143
  3671  0090                     _TRISEbits	set	144
  3672  048D                     _RCIE	set	1165
  3673  011D                     _APFCONbits	set	285
  3674  010D                     _LATBbits	set	269
  3675  010F                     _LATDbits	set	271
  3676  0190                     _ANSELEbits	set	400
  3677  0192                     _PMADRH	set	402
  3678  0191                     _PMADRL	set	401
  3679  0195                     _PMCON1bits	set	405
  3680  0196                     _PMCON2	set	406
  3681  0194                     _PMDATH	set	404
  3682  0193                     _PMDATL	set	403
  3683  0199                     _RCREG	set	409
  3684  019D                     _RCSTAbits	set	413
  3685  019B                     _SPBRG	set	411
  3686  019A                     _TXREG	set	410
  3687  019E                     _TXSTAbits	set	414
  3688  0291                     _CCPR1	set	657
  3689  0298                     _CCPR2	set	664
  3690  0293                     _CCP1CONbits	set	659
  3691  029A                     _CCP2CONbits	set	666
  3692  029D                     _CCPTMRS0	set	669
  3693  029E                     _CCPTMRS1	set	670
  3694  029F                     _CCPTMRS2	set	671
  3695  0311                     _CCPR3	set	785
  3696  0318                     _CCPR4	set	792
  3697  031C                     _CCPR5	set	796
  3698  0313                     _CCP3CONbits	set	787
  3699  031A                     _CCP4CONbits	set	794
  3700  031E                     _CCP5CONbits	set	798
  3701  030C                     _TRISFbits	set	780
  3702  030D                     _TRISGbits	set	781
  3703  038C                     _LATFbits	set	908
  3704  038D                     _LATGbits	set	909
  3705  040C                     _ANSELFbits	set	1036
  3706  061F                     _CCP10CONbits	set	1567
  3707  0613                     _CCP6CONbits	set	1555
  3708  0616                     _CCP7CONbits	set	1558
  3709  0619                     _CCP8CONbits	set	1561
  3710  061C                     _CCP9CONbits	set	1564
  3711                           
  3712                           ; #config settings
  3713  0000                     
  3714                           	psect	cinit
  3715  02DF                     start_initialization:	
  3716  02DF                     __initialization:		;BIGRAM
  3717                           
  3718                           ; Clear objects allocated to BIGRAM
  3719  02DF  308A               	movlw	low (0+9098)
  3720  02E0  0084               	movwf	4
  3721  02E1  3023               	movlw	high (0+9098)
  3722  02E2  0085               	movwf	5
  3723  02E3  3066               	movlw	102
  3724  02E4  00FE               	movwf	btemp
  3725  02E5  3002               	movlw	2
  3726  02E6  00FF               	movwf	btemp+1
  3727  02E7  31AD  25D1  3182   	fcall	clear_ram0
  3728                           
  3729                           ; Clear objects allocated to BANK0
  3730  02EA  3040               	movlw	low __pbssBANK0
  3731  02EB  0084               	movwf	4
  3732  02EC  3000               	movlw	high __pbssBANK0
  3733  02ED  0085               	movwf	5
  3734  02EE  3012               	movlw	18
  3735  02EF  00FE               	movwf	btemp
  3736  02F0  3000               	movlw	0
  3737  02F1  00FF               	movwf	btemp+1
  3738  02F2  31AD  25D1  3182   	fcall	clear_ram0
  3739                           
  3740                           ; Clear objects allocated to BANK2
  3741  02F5  0022               	movlb	2	; select bank2
  3742  02F6  01EA               	clrf	__pbssBANK2& (0+127)
  3743  02F7  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3744  02F8  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3745  02F9  01ED               	clrf	(__pbssBANK2+3)& (0+127)
  3746  02FA  01EE               	clrf	(__pbssBANK2+4)& (0+127)
  3747                           
  3748                           ; Clear objects allocated to BANK3
  3749  02FB  30A0               	movlw	low __pbssBANK3
  3750  02FC  0084               	movwf	4
  3751  02FD  3001               	movlw	high __pbssBANK3
  3752  02FE  0085               	movwf	5
  3753  02FF  3027               	movlw	39
  3754  0300  00FE               	movwf	btemp
  3755  0301  3000               	movlw	0
  3756  0302  00FF               	movwf	btemp+1
  3757  0303  31AD  25D1  3182   	fcall	clear_ram0
  3758                           
  3759                           ; Clear objects allocated to BANK4
  3760  0306  3020               	movlw	low __pbssBANK4
  3761  0307  0084               	movwf	4
  3762  0308  3002               	movlw	high __pbssBANK4
  3763  0309  0085               	movwf	5
  3764  030A  3035               	movlw	53
  3765  030B  00FE               	movwf	btemp
  3766  030C  3000               	movlw	0
  3767  030D  00FF               	movwf	btemp+1
  3768  030E  31AD  25D1  3182   	fcall	clear_ram0
  3769                           
  3770                           ; Clear objects allocated to BANK5
  3771  0311  30A0               	movlw	low __pbssBANK5
  3772  0312  0084               	movwf	4
  3773  0313  3002               	movlw	high __pbssBANK5
  3774  0314  0085               	movwf	5
  3775  0315  302C               	movlw	44
  3776  0316  00FE               	movwf	btemp
  3777  0317  3000               	movlw	0
  3778  0318  00FF               	movwf	btemp+1
  3779  0319  31AD  25D1  3182   	fcall	clear_ram0
  3780                           
  3781                           ; Clear objects allocated to BANK6
  3782  031C  3020               	movlw	low __pbssBANK6
  3783  031D  0084               	movwf	4
  3784  031E  3003               	movlw	high __pbssBANK6
  3785  031F  0085               	movwf	5
  3786  0320  3040               	movlw	64
  3787  0321  00FE               	movwf	btemp
  3788  0322  3000               	movlw	0
  3789  0323  00FF               	movwf	btemp+1
  3790  0324  31AD  25D1  3182   	fcall	clear_ram0
  3791                           
  3792                           ; Clear objects allocated to BANK7
  3793  0327  30A0               	movlw	low __pbssBANK7
  3794  0328  0084               	movwf	4
  3795  0329  3003               	movlw	high __pbssBANK7
  3796  032A  0085               	movwf	5
  3797  032B  3040               	movlw	64
  3798  032C  00FE               	movwf	btemp
  3799  032D  3000               	movlw	0
  3800  032E  00FF               	movwf	btemp+1
  3801  032F  31AD  25D1  3182   	fcall	clear_ram0
  3802                           
  3803                           ; Initialize objects allocated to BANK0
  3804  0332  3001               	movlw	low __pidataBANK0
  3805  0333  0084               	movwf	4
  3806  0334  3090               	movlw	(high __pidataBANK0)| (0+128)
  3807  0335  0085               	movwf	5
  3808  0336  3052               	movlw	low __pdataBANK0
  3809  0337  0086               	movwf	6
  3810  0338  3000               	movlw	high __pdataBANK0
  3811  0339  0087               	movwf	7
  3812  033A  3000               	movlw	0
  3813  033B  00FF               	movwf	btemp+1
  3814  033C  300E               	movlw	14
  3815  033D  31AD  25C5  3182   	fcall	init_ram
  3816                           
  3817                           ; Initialize objects allocated to BANK2
  3818  0340  3180  2003  3182   	fcall	__pidataBANK2	;fetch initializer
  3819  0343  00EF               	movwf	__pdataBANK2& (0+127)
  3820                           
  3821                           ; Initialize objects allocated to BANK3
  3822  0344  30C4               	movlw	low __pidataBANK3
  3823  0345  0084               	movwf	4
  3824  0346  30AE               	movlw	(high __pidataBANK3)| (0+128)
  3825  0347  0085               	movwf	5
  3826  0348  30C7               	movlw	low __pdataBANK3
  3827  0349  0086               	movwf	6
  3828  034A  3001               	movlw	high __pdataBANK3
  3829  034B  0087               	movwf	7
  3830  034C  3000               	movlw	0
  3831  034D  00FF               	movwf	btemp+1
  3832  034E  3020               	movlw	32
  3833  034F  31AD  25C5  3182   	fcall	init_ram
  3834                           
  3835                           ; Initialize objects allocated to BANK4
  3836  0352  0024               	movlb	4	; select bank4
  3837  0353  3187  27FE  3182   	fcall	__pidataBANK4	;fetch initializer
  3838  0356  00E3               	movwf	__pdataBANK4& (0+127)
  3839  0357  3187  27FF         	fcall	__pidataBANK4+1	;fetch initializer
  3840  0359  00E4               	movwf	(__pdataBANK4+1)& (0+127)
  3841  035A                     end_of_initialization:	
  3842                           ;End of C runtime variable initialization code
  3843                           
  3844  035A                     __end_of__initialization:	
  3845  035A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3846  035B  0020               	movlb	0
  3847  035C  3183  2B5E         	ljmp	_main	;jump to C main() function
  3848                           
  3849                           	psect	bssBANK0
  3850  0040                     __pbssBANK0:	
  3851  0040                     _sub_timer:	
  3852  0040                     	ds	4
  3853  0044                     _tap_timer:	
  3854  0044                     	ds	4
  3855  0048                     _timer:	
  3856  0048                     	ds	4
  3857  004C                     _UQEnd:	
  3858  004C                     	ds	1
  3859  004D                     _UQFront:	
  3860  004D                     	ds	1
  3861  004E                     _doubleTap_state:	
  3862  004E                     	ds	1
  3863  004F                     _longBypass_state:	
  3864  004F                     	ds	1
  3865  0050                     _mode2_state:	
  3866  0050                     	ds	1
  3867  0051                     _presetSaveMode:	
  3868  0051                     	ds	1
  3869                           
  3870                           	psect	dataBANK0
  3871  0052                     __pdataBANK0:	
  3872  0052                     _delay_time:	
  3873  0052                     	ds	4
  3874  0056                     _bottom_push_state:	
  3875  0056                     	ds	2
  3876  0058                     _long_press_limit:	
  3877  0058                     	ds	2
  3878  005A                     _top_push_state:	
  3879  005A                     	ds	2
  3880  005C                     _blink_rate:	
  3881  005C                     	ds	1
  3882  005D                     _longTap_state:	
  3883  005D                     	ds	1
  3884  005E                     _num_taps:	
  3885  005E                     	ds	1
  3886  005F                     _switchBypass_state:	
  3887  005F                     	ds	1
  3888                           
  3889                           	psect	bssBANK2
  3890  016A                     __pbssBANK2:	
  3891  016A                     _longBypass_start:	
  3892  016A                     	ds	1
  3893  016B                     _longTap_start:	
  3894  016B                     	ds	1
  3895  016C                     _preset_blink:	
  3896  016C                     	ds	1
  3897  016D                     _suspend_blink:	
  3898  016D                     	ds	1
  3899  016E                     _switchTap_pressed:	
  3900  016E                     	ds	1
  3901                           
  3902                           	psect	dataBANK2
  3903  016F                     __pdataBANK2:	
  3904  016F                     _presetChannel:	
  3905  016F                     	ds	1
  3906                           
  3907                           	psect	bssBANK3
  3908  01A0                     __pbssBANK3:	
  3909  01A0                     _double_timer:	
  3910  01A0                     	ds	4
  3911  01A4                     _mod_timer:	
  3912  01A4                     	ds	4
  3913  01A8                     _knob_1_pos:	
  3914  01A8                     	ds	2
  3915  01AA                     _knob_2_pos:	
  3916  01AA                     	ds	2
  3917  01AC                     _knob_3_pos:	
  3918  01AC                     	ds	2
  3919  01AE                     _knob_4_pos:	
  3920  01AE                     	ds	2
  3921  01B0                     _knob_5_pos:	
  3922  01B0                     	ds	2
  3923  01B2                     _longBypass_timer:	
  3924  01B2                     	ds	2
  3925  01B4                     _longTap_timer:	
  3926  01B4                     	ds	2
  3927  01B6                     _switchBypass_pressed:	
  3928  01B6                     	ds	2
  3929  01B8                     _tmpModDelay:	
  3930  01B8                     	ds	2
  3931  01BA                     _adjust_mod_delay:	
  3932  01BA                     	ds	1
  3933  01BB                     _bottomTactile_pressed:	
  3934  01BB                     	ds	1
  3935  01BC                     _bypass_turning_on:	
  3936  01BC                     	ds	1
  3937  01BD                     _iCnt:	
  3938  01BD                     	ds	1
  3939  01BE                     _isInitialized:	
  3940  01BE                     	ds	1
  3941  01BF                     _longBypass_down:	
  3942  01BF                     	ds	1
  3943  01C0                     _longBypass_save:	
  3944  01C0                     	ds	1
  3945  01C1                     _mode1_state:	
  3946  01C1                     	ds	1
  3947  01C2                     _modulation_changed:	
  3948  01C2                     	ds	1
  3949  01C3                     _preset_programmning_on:	
  3950  01C3                     	ds	1
  3951  01C4                     _reset_sub_delay:	
  3952  01C4                     	ds	1
  3953  01C5                     _switchTap_down:	
  3954  01C5                     	ds	1
  3955  01C6                     _topTactile_pressed:	
  3956  01C6                     	ds	1
  3957                           
  3958                           	psect	dataBANK3
  3959  01C7                     __pdataBANK3:	
  3960  01C7                     _baseline_mod_time:	
  3961  01C7                     	ds	4
  3962  01CB                     _blink_delay:	
  3963  01CB                     	ds	2
  3964  01CD                     _knob1_prev:	
  3965  01CD                     	ds	2
  3966  01CF                     _knob2_prev:	
  3967  01CF                     	ds	2
  3968  01D1                     _knob3_prev:	
  3969  01D1                     	ds	2
  3970  01D3                     _knob4_prev:	
  3971  01D3                     	ds	2
  3972  01D5                     _knob5_prev:	
  3973  01D5                     	ds	2
  3974  01D7                     _mod_counter:	
  3975  01D7                     	ds	2
  3976  01D9                     _mod_delay_time:	
  3977  01D9                     	ds	2
  3978  01DB                     _symmetry:	
  3979  01DB                     	ds	2
  3980  01DD                     _tap_iteration:	
  3981  01DD                     	ds	2
  3982  01DF                     _blink_state:	
  3983  01DF                     	ds	1
  3984  01E0                     _currentBypassState:	
  3985  01E0                     	ds	1
  3986  01E1                     _expSwitchState:	
  3987  01E1                     	ds	1
  3988  01E2                     _expressModeCnst:	
  3989  01E2                     	ds	1
  3990  01E3                     _expressionChannel:	
  3991  01E3                     	ds	1
  3992  01E4                     _mod_time_changed:	
  3993  01E4                     	ds	1
  3994  01E5                     _presetModeCnst:	
  3995  01E5                     	ds	1
  3996  01E6                     _switchTap_state:	
  3997  01E6                     	ds	1
  3998                           
  3999                           	psect	bssBANK4
  4000  0220                     __pbssBANK4:	
  4001  0220                     _tap_history:	
  4002  0220                     	ds	20
  4003  0234                     USARTWriteInt@F3536:	
  4004  0234                     	ds	5
  4005  0239                     _ledState:	
  4006  0239                     	ds	4
  4007  023D                     _tap_total:	
  4008  023D                     	ds	4
  4009  0241                     _adjusted_pot_value:	
  4010  0241                     	ds	2
  4011  0243                     _debounce_bypass:	
  4012  0243                     	ds	2
  4013  0245                     _debounce_count:	
  4014  0245                     	ds	2
  4015  0247                     _debounce_mode1:	
  4016  0247                     	ds	2
  4017  0249                     _debounce_mode2:	
  4018  0249                     	ds	2
  4019  024B                     _delayfound:	
  4020  024B                     	ds	2
  4021  024D                     _errno:	
  4022  024D                     	ds	2
  4023  024F                     _mod_value:	
  4024  024F                     	ds	2
  4025  0251                     _switchBypass_toggle:	
  4026  0251                     	ds	2
  4027  0253                     _tmpVal:	
  4028  0253                     	ds	2
  4029                           
  4030                           	psect	dataBANK4
  4031  0263                     __pdataBANK4:	
  4032  0263                     _switchBypass_up:	
  4033  0263                     	ds	2
  4034                           
  4035                           	psect	bssBANK5
  4036  02A0                     __pbssBANK5:	
  4037  02A0                     _tap:	
  4038  02A0                     	ds	44
  4039                           
  4040                           	psect	bssBANK6
  4041  0320                     __pbssBANK6:	
  4042  0320                     _URBuff:	
  4043  0320                     	ds	64
  4044                           
  4045                           	psect	bssBANK7
  4046  03A0                     __pbssBANK7:	
  4047  03A0                     _myBuf:	
  4048  03A0                     	ds	64
  4049                           
  4050                           	psect	clrtext
  4051  2DD1                     clear_ram0:	
  4052                           ;	Called with FSR0 containing the base address, and
  4053                           ;	btemp/btemp+1 has the size to clear
  4054                           
  4055  2DD1  0064               	clrwdt	;clear the watchdog before getting into this loop
  4056  2DD2                     clrloop0:	
  4057  2DD2  0180               	clrf	0	;clear RAM location pointed to by FSR
  4058  2DD3  3101               	addfsr 0,1
  4059  2DD4  3001               	movlw	1
  4060  2DD5  02FE               	subwf	126,f
  4061  2DD6  3000               	movlw	0
  4062  2DD7  3BFF               	subwfb	127,f
  4063  2DD8  087F               	movf	127,w
  4064  2DD9  047E               	iorwf	126,w
  4065  2DDA  1903               	btfsc	3,2
  4066  2DDB  3400               	retlw	0	;all done for this memory range, return
  4067  2DDC  2DD2               	goto	clrloop0	;have we reached the end yet?
  4068                           
  4069                           	psect	inittext
  4070  2DC5                     init_ram:	
  4071  2DC5  00FE               	movwf	126
  4072  2DC6                     initloop:	
  4073  2DC6  0012               	moviw fsr0++
  4074  2DC7  001E               	movwi fsr1++
  4075  2DC8  3001               	movlw	1
  4076  2DC9  02FE               	subwf	126,f
  4077  2DCA  3000               	movlw	0
  4078  2DCB  3BFF               	subwfb	127,f
  4079  2DCC  087F               	movf	127,w
  4080  2DCD  047E               	iorwf	126,w
  4081  2DCE  1903               	btfsc	3,2
  4082  2DCF  3400               	retlw	0
  4083  2DD0  2DC6               	goto	initloop
  4084                           
  4085                           	psect	cstackBANK4
  4086  0255                     __pcstackBANK4:	
  4087  0255                     ??_main:	
  4088                           
  4089                           ; 1 bytes @ 0x0
  4090  0255                     	ds	5
  4091  025A                     _main$2840:	
  4092                           
  4093                           ; 3 bytes @ 0x5
  4094  025A                     	ds	3
  4095  025D                     _main$2841:	
  4096                           
  4097                           ; 3 bytes @ 0x8
  4098  025D                     	ds	3
  4099  0260                     _main$2842:	
  4100                           
  4101                           ; 3 bytes @ 0xB
  4102  0260                     	ds	3
  4103                           
  4104                           	psect	cstackBANK3
  4105  01E7                     __pcstackBANK3:	
  4106  01E7                     scaleA100kPot@pwm:	
  4107  01E7                     scaleA10kPot@pwm:	
  4108                           ; 3 bytes @ 0x0
  4109                           
  4110  01E7                     scaleiA10kPot@pwm:	
  4111                           ; 3 bytes @ 0x0
  4112                           
  4113                           
  4114                           ; 3 bytes @ 0x0
  4115  01E7                     	ds	3
  4116  01EA                     _scaleA100kPot$2845:	
  4117  01EA                     _scaleA10kPot$2849:	
  4118                           ; 3 bytes @ 0x3
  4119                           
  4120  01EA                     _scaleiA10kPot$2851:	
  4121                           ; 3 bytes @ 0x3
  4122                           
  4123                           
  4124                           ; 3 bytes @ 0x3
  4125  01EA                     	ds	3
  4126  01ED                     _scaleA100kPot$2846:	
  4127  01ED                     _scaleA10kPot$2850:	
  4128                           ; 3 bytes @ 0x6
  4129                           
  4130  01ED                     _scaleiA10kPot$2852:	
  4131                           ; 3 bytes @ 0x6
  4132                           
  4133                           
  4134                           ; 3 bytes @ 0x6
  4135  01ED                     	ds	3
  4136                           
  4137                           	psect	cstackBANK2
  4138  0120                     __pcstackBANK2:	
  4139  0120                     ?___fttol:	
  4140  0120                     ___fttol@f1:	
  4141                           ; 4 bytes @ 0x0
  4142                           
  4143                           
  4144                           ; 3 bytes @ 0x0
  4145  0120                     	ds	4
  4146  0124                     ??___fttol:	
  4147                           
  4148                           ; 1 bytes @ 0x4
  4149  0124                     	ds	4
  4150  0128                     ___fttol@sign1:	
  4151                           
  4152                           ; 1 bytes @ 0x8
  4153  0128                     	ds	1
  4154  0129                     ___fttol@lval:	
  4155                           
  4156                           ; 4 bytes @ 0x9
  4157  0129                     	ds	4
  4158  012D                     ___fttol@exp1:	
  4159                           
  4160                           ; 1 bytes @ 0xD
  4161  012D                     	ds	1
  4162  012E                     ?_set_subdivision:	
  4163  012E                     ?_modTri:	
  4164                           ; 2 bytes @ 0xE
  4165                           
  4166  012E                     ?_modSaw:	
  4167                           ; 2 bytes @ 0xE
  4168                           
  4169  012E                     ?___wmul:	
  4170                           ; 2 bytes @ 0xE
  4171                           
  4172  012E                     ?_floor:	
  4173                           ; 2 bytes @ 0xE
  4174                           
  4175  012E                     set_subdivision@x:	
  4176                           ; 3 bytes @ 0xE
  4177                           
  4178  012E                     getModulationDelayTime@subDiv:	
  4179                           ; 2 bytes @ 0xE
  4180                           
  4181  012E                     ___wmul@multiplier:	
  4182                           ; 2 bytes @ 0xE
  4183                           
  4184  012E                     modTri@angle:	
  4185                           ; 2 bytes @ 0xE
  4186                           
  4187  012E                     modSaw@angle:	
  4188                           ; 3 bytes @ 0xE
  4189                           
  4190  012E                     floor@x:	
  4191                           ; 3 bytes @ 0xE
  4192                           
  4193                           
  4194                           ; 3 bytes @ 0xE
  4195  012E                     	ds	2
  4196  0130                     set_subdivision@y:	
  4197  0130                     ___wmul@multiplicand:	
  4198                           ; 2 bytes @ 0x10
  4199                           
  4200                           
  4201                           ; 2 bytes @ 0x10
  4202  0130                     	ds	1
  4203  0131                     ??_floor:	
  4204  0131                     modTri@inflection:	
  4205                           ; 1 bytes @ 0x11
  4206                           
  4207  0131                     modSaw@inflection:	
  4208                           ; 3 bytes @ 0x11
  4209                           
  4210                           
  4211                           ; 3 bytes @ 0x11
  4212  0131                     	ds	1
  4213  0132                     ___wmul@product:	
  4214  0132                     set_subdivision@scalar:	
  4215                           ; 2 bytes @ 0x12
  4216                           
  4217  0132                     floor@i:	
  4218                           ; 3 bytes @ 0x12
  4219                           
  4220                           
  4221                           ; 3 bytes @ 0x12
  4222  0132                     	ds	2
  4223  0134                     ?_modCos:	
  4224  0134                     ?_eval_poly:	
  4225                           ; 2 bytes @ 0x14
  4226                           
  4227  0134                     modCos@angle:	
  4228                           ; 3 bytes @ 0x14
  4229                           
  4230  0134                     eval_poly@x:	
  4231                           ; 3 bytes @ 0x14
  4232                           
  4233  0134                     _modTri$2854:	
  4234                           ; 3 bytes @ 0x14
  4235                           
  4236  0134                     _modSaw$2855:	
  4237                           ; 3 bytes @ 0x14
  4238                           
  4239                           
  4240                           ; 3 bytes @ 0x14
  4241  0134                     	ds	1
  4242  0135                     set_subdivision@tmpX:	
  4243  0135                     floor@expon:	
  4244                           ; 2 bytes @ 0x15
  4245                           
  4246                           
  4247                           ; 2 bytes @ 0x15
  4248  0135                     	ds	2
  4249  0137                     ?___ftsub:	
  4250  0137                     eval_poly@d:	
  4251                           ; 3 bytes @ 0x17
  4252                           
  4253  0137                     modCos@inflection:	
  4254                           ; 2 bytes @ 0x17
  4255                           
  4256  0137                     modTri@shift:	
  4257                           ; 3 bytes @ 0x17
  4258                           
  4259  0137                     ___ftsub@f2:	
  4260                           ; 3 bytes @ 0x17
  4261                           
  4262  0137                     _modSaw$2856:	
  4263                           ; 3 bytes @ 0x17
  4264                           
  4265                           
  4266                           ; 3 bytes @ 0x17
  4267  0137                     	ds	2
  4268  0139                     eval_poly@n:	
  4269                           
  4270                           ; 2 bytes @ 0x19
  4271  0139                     	ds	1
  4272  013A                     ??_modCos:	
  4273  013A                     modTri@period:	
  4274                           ; 1 bytes @ 0x1A
  4275                           
  4276  013A                     ___ftsub@f1:	
  4277                           ; 3 bytes @ 0x1A
  4278                           
  4279  013A                     _modSaw$2857:	
  4280                           ; 3 bytes @ 0x1A
  4281                           
  4282                           
  4283                           ; 3 bytes @ 0x1A
  4284  013A                     	ds	1
  4285  013B                     eval_poly@res:	
  4286                           
  4287                           ; 3 bytes @ 0x1B
  4288  013B                     	ds	1
  4289  013C                     _modCos$2853:	
  4290                           
  4291                           ; 3 bytes @ 0x1C
  4292  013C                     	ds	1
  4293  013D                     modSaw@mod:	
  4294  013D                     modTri@tmpVal:	
  4295                           ; 2 bytes @ 0x1D
  4296                           
  4297                           
  4298                           ; 3 bytes @ 0x1D
  4299  013D                     	ds	1
  4300  013E                     ?_sin:	
  4301  013E                     ?_log:	
  4302                           ; 3 bytes @ 0x1E
  4303                           
  4304  013E                     ?_ldexp:	
  4305                           ; 3 bytes @ 0x1E
  4306                           
  4307  013E                     sin@f:	
  4308                           ; 3 bytes @ 0x1E
  4309                           
  4310  013E                     ldexp@value:	
  4311                           ; 3 bytes @ 0x1E
  4312                           
  4313  013E                     log@x:	
  4314                           ; 3 bytes @ 0x1E
  4315                           
  4316                           
  4317                           ; 3 bytes @ 0x1E
  4318  013E                     	ds	1
  4319  013F                     modCos@shift:	
  4320  013F                     modSaw@shift:	
  4321                           ; 3 bytes @ 0x1F
  4322                           
  4323                           
  4324                           ; 3 bytes @ 0x1F
  4325  013F                     	ds	2
  4326  0141                     ??_sin:	
  4327  0141                     ??_log:	
  4328                           ; 1 bytes @ 0x21
  4329                           
  4330  0141                     ldexp@newexp:	
  4331                           ; 1 bytes @ 0x21
  4332                           
  4333                           
  4334                           ; 2 bytes @ 0x21
  4335  0141                     	ds	1
  4336  0142                     log@exponent:	
  4337  0142                     modCos@period:	
  4338                           ; 2 bytes @ 0x22
  4339                           
  4340  0142                     modSaw@period:	
  4341                           ; 3 bytes @ 0x22
  4342                           
  4343  0142                     sin@y:	
  4344                           ; 3 bytes @ 0x22
  4345                           
  4346                           
  4347                           ; 3 bytes @ 0x22
  4348  0142                     	ds	1
  4349  0143                     ??_ldexp:	
  4350                           
  4351                           ; 1 bytes @ 0x23
  4352  0143                     	ds	2
  4353  0145                     ?_modSawRev:	
  4354  0145                     modCos@tmpVal:	
  4355                           ; 2 bytes @ 0x25
  4356                           
  4357  0145                     modSawRev@angle:	
  4358                           ; 3 bytes @ 0x25
  4359                           
  4360  0145                     _ldexp$2649:	
  4361                           ; 3 bytes @ 0x25
  4362                           
  4363  0145                     _sin$2861:	
  4364                           ; 3 bytes @ 0x25
  4365                           
  4366                           
  4367                           ; 3 bytes @ 0x25
  4368  0145                     	ds	3
  4369  0148                     ?_modSquare:	
  4370  0148                     ?_exp:	
  4371                           ; 2 bytes @ 0x28
  4372                           
  4373  0148                     modSawRev@inflection:	
  4374                           ; 3 bytes @ 0x28
  4375                           
  4376  0148                     modSquare@angle:	
  4377                           ; 3 bytes @ 0x28
  4378                           
  4379  0148                     sin@x2:	
  4380                           ; 3 bytes @ 0x28
  4381                           
  4382  0148                     exp@x:	
  4383                           ; 3 bytes @ 0x28
  4384                           
  4385                           
  4386                           ; 3 bytes @ 0x28
  4387  0148                     	ds	3
  4388  014B                     ??_modSawRev:	
  4389  014B                     ??_exp:	
  4390                           ; 1 bytes @ 0x2B
  4391                           
  4392  014B                     sin@sgn:	
  4393                           ; 1 bytes @ 0x2B
  4394                           
  4395  014B                     modSquare@inflection:	
  4396                           ; 1 bytes @ 0x2B
  4397                           
  4398                           
  4399                           ; 3 bytes @ 0x2B
  4400  014B                     	ds	1
  4401  014C                     ?_cos:	
  4402  014C                     cos@f:	
  4403                           ; 3 bytes @ 0x2C
  4404                           
  4405  014C                     _exp$2862:	
  4406                           ; 3 bytes @ 0x2C
  4407                           
  4408                           
  4409                           ; 3 bytes @ 0x2C
  4410  014C                     	ds	2
  4411  014E                     modSquare@tmpVal:	
  4412                           
  4413                           ; 2 bytes @ 0x2E
  4414  014E                     	ds	1
  4415  014F                     _exp$2612:	
  4416  014F                     _cos$2858:	
  4417                           ; 3 bytes @ 0x2F
  4418                           
  4419                           
  4420                           ; 3 bytes @ 0x2F
  4421  014F                     	ds	1
  4422  0150                     ??_updateModulationArray:	
  4423                           
  4424                           ; 1 bytes @ 0x30
  4425  0150                     	ds	2
  4426  0152                     ??_calcCosArray:	
  4427  0152                     exp@exponent:	
  4428                           ; 1 bytes @ 0x32
  4429                           
  4430                           
  4431                           ; 2 bytes @ 0x32
  4432  0152                     	ds	2
  4433  0154                     exp@sign:	
  4434  0154                     updateModulationArray@angleFactor:	
  4435                           ; 1 bytes @ 0x34
  4436                           
  4437                           
  4438                           ; 2 bytes @ 0x34
  4439  0154                     	ds	1
  4440  0155                     ?_pow:	
  4441  0155                     pow@x:	
  4442                           ; 3 bytes @ 0x35
  4443                           
  4444                           
  4445                           ; 3 bytes @ 0x35
  4446  0155                     	ds	1
  4447  0156                     updateModulationArray@subDiv:	
  4448  0156                     calcCosArray@tmpVal:	
  4449                           ; 2 bytes @ 0x36
  4450                           
  4451                           
  4452                           ; 3 bytes @ 0x36
  4453  0156                     	ds	2
  4454  0158                     updateModulationArray@thisAngle:	
  4455  0158                     pow@y:	
  4456                           ; 2 bytes @ 0x38
  4457                           
  4458                           
  4459                           ; 3 bytes @ 0x38
  4460  0158                     	ds	1
  4461  0159                     calcCosArray@iAngle:	
  4462                           
  4463                           ; 1 bytes @ 0x39
  4464  0159                     	ds	1
  4465  015A                     updateModulationArray@iAngle:	
  4466                           
  4467                           ; 1 bytes @ 0x3A
  4468  015A                     	ds	1
  4469  015B                     ??_pow:	
  4470                           
  4471                           ; 1 bytes @ 0x3B
  4472  015B                     	ds	1
  4473  015C                     _pow$2859:	
  4474                           
  4475                           ; 3 bytes @ 0x3C
  4476  015C                     	ds	3
  4477  015F                     _pow$2860:	
  4478                           
  4479                           ; 3 bytes @ 0x3F
  4480  015F                     	ds	3
  4481  0162                     pow@sign:	
  4482                           
  4483                           ; 1 bytes @ 0x42
  4484  0162                     	ds	1
  4485  0163                     pow@yi:	
  4486                           
  4487                           ; 4 bytes @ 0x43
  4488  0163                     	ds	4
  4489  0167                     ?_scaleA10kPot:	
  4490  0167                     ?_scaleiA10kPot:	
  4491                           ; 2 bytes @ 0x47
  4492                           
  4493  0167                     ?_scaleA100kPot:	
  4494                           ; 2 bytes @ 0x47
  4495                           
  4496  0167                     scaleA100kPot@input:	
  4497                           ; 2 bytes @ 0x47
  4498                           
  4499  0167                     scaleA10kPot@input:	
  4500                           ; 3 bytes @ 0x47
  4501                           
  4502  0167                     scaleiA10kPot@input:	
  4503                           ; 3 bytes @ 0x47
  4504                           
  4505                           
  4506                           ; 3 bytes @ 0x47
  4507  0167                     	ds	3
  4508                           
  4509                           	psect	cstackBANK1
  4510  00A0                     __pcstackBANK1:	
  4511  00A0                     ?___ftge:	
  4512  00A0                     ?_set_leds_top:	
  4513                           ; 1 bit 
  4514                           
  4515  00A0                     ?_USARTInit:	
  4516                           ; 1 bytes @ 0x0
  4517                           
  4518  00A0                     ??_ConfigureOscillator:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  00A0                     ??_InitApp:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  00A0                     ??_InitializeTaps:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  00A0                     ??_init_adc:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  00A0                     ??_init_pwm:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  00A0                     ??_init_timer2:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  00A0                     ??_init_timer0:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  00A0                     ?_set_leds_bottom:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  00A0                     ?_setLongBypassState:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  00A0                     ?_setLongTapState:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  00A0                     ?_updateSwitchBypassState:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  00A0                     ?_getModulationSubdivision:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  00A0                     ?_adc_convert:	
  4555                           ; 2 bytes @ 0x0
  4556                           
  4557  00A0                     ?_FLASH_ReadWord:	
  4558                           ; 2 bytes @ 0x0
  4559                           
  4560  00A0                     ?_getSwitchBypassState:	
  4561                           ; 2 bytes @ 0x0
  4562                           
  4563  00A0                     ?___awdiv:	
  4564                           ; 2 bytes @ 0x0
  4565                           
  4566  00A0                     ?___ftpack:	
  4567                           ; 2 bytes @ 0x0
  4568                           
  4569  00A0                     ?_frexp:	
  4570                           ; 3 bytes @ 0x0
  4571                           
  4572  00A0                     ?___lmul:	
  4573                           ; 3 bytes @ 0x0
  4574                           
  4575  00A0                     ?___aldiv:	
  4576                           ; 4 bytes @ 0x0
  4577                           
  4578  00A0                     FLASH_ReadWord@flashAddr:	
  4579                           ; 4 bytes @ 0x0
  4580                           
  4581  00A0                     set_leds_top@x:	
  4582                           ; 2 bytes @ 0x0
  4583                           
  4584  00A0                     set_leds_bottom@x:	
  4585                           ; 2 bytes @ 0x0
  4586                           
  4587  00A0                     updateSwitchBypassState@state:	
  4588                           ; 2 bytes @ 0x0
  4589                           
  4590  00A0                     setLongBypassState@f_state:	
  4591                           ; 2 bytes @ 0x0
  4592                           
  4593  00A0                     setLongTapState@f_state:	
  4594                           ; 2 bytes @ 0x0
  4595                           
  4596  00A0                     USARTInit@baud_rate:	
  4597                           ; 2 bytes @ 0x0
  4598                           
  4599  00A0                     ___awdiv@divisor:	
  4600                           ; 2 bytes @ 0x0
  4601                           
  4602  00A0                     ___ftpack@arg:	
  4603                           ; 2 bytes @ 0x0
  4604                           
  4605  00A0                     ___ftge@ff1:	
  4606                           ; 3 bytes @ 0x0
  4607                           
  4608  00A0                     frexp@value:	
  4609                           ; 3 bytes @ 0x0
  4610                           
  4611  00A0                     ___lmul@multiplier:	
  4612                           ; 3 bytes @ 0x0
  4613                           
  4614  00A0                     ___aldiv@divisor:	
  4615                           ; 4 bytes @ 0x0
  4616                           
  4617                           
  4618                           ; 4 bytes @ 0x0
  4619  00A0                     	ds	1
  4620  00A1                     InitializeTaps@itap:	
  4621                           
  4622                           ; 2 bytes @ 0x1
  4623  00A1                     	ds	1
  4624  00A2                     ??_getModulationSubdivision:	
  4625  00A2                     ??_USARTInit:	
  4626                           ; 1 bytes @ 0x2
  4627                           
  4628  00A2                     ??_adc_convert:	
  4629                           ; 1 bytes @ 0x2
  4630                           
  4631  00A2                     ??_FLASH_ReadWord:	
  4632                           ; 1 bytes @ 0x2
  4633                           
  4634  00A2                     ??_set_leds_bottom:	
  4635                           ; 1 bytes @ 0x2
  4636                           
  4637  00A2                     ??_setLongBypassState:	
  4638                           ; 1 bytes @ 0x2
  4639                           
  4640  00A2                     ??_setLongTapState:	
  4641                           ; 1 bytes @ 0x2
  4642                           
  4643  00A2                     ??_updateSwitchBypassState:	
  4644                           ; 1 bytes @ 0x2
  4645                           
  4646  00A2                     ??_getSwitchBypassState:	
  4647                           ; 1 bytes @ 0x2
  4648                           
  4649  00A2                     FLASH_ReadWord@GIEBitValue:	
  4650                           ; 1 bytes @ 0x2
  4651                           
  4652  00A2                     set_leds_top@ledState:	
  4653                           ; 1 bytes @ 0x2
  4654                           
  4655  00A2                     ___awdiv@dividend:	
  4656                           ; 2 bytes @ 0x2
  4657                           
  4658                           
  4659                           ; 2 bytes @ 0x2
  4660  00A2                     	ds	1
  4661  00A3                     adc_convert@channel:	
  4662  00A3                     ___ftpack@exp:	
  4663                           ; 1 bytes @ 0x3
  4664                           
  4665  00A3                     frexp@eptr:	
  4666                           ; 1 bytes @ 0x3
  4667                           
  4668  00A3                     ___ftge@ff2:	
  4669                           ; 1 bytes @ 0x3
  4670                           
  4671                           
  4672                           ; 3 bytes @ 0x3
  4673  00A3                     	ds	1
  4674  00A4                     ??_set_leds_top:	
  4675  00A4                     ??_ReadSavedSettings:	
  4676                           ; 1 bytes @ 0x4
  4677                           
  4678  00A4                     ??_resetRingLEDs:	
  4679                           ; 1 bytes @ 0x4
  4680                           
  4681  00A4                     ??_setPresetDisplay:	
  4682                           ; 1 bytes @ 0x4
  4683                           
  4684  00A4                     ??_setExpressionDisplay:	
  4685                           ; 1 bytes @ 0x4
  4686                           
  4687  00A4                     ??_frexp:	
  4688                           ; 1 bytes @ 0x4
  4689                           
  4690  00A4                     ??___awdiv:	
  4691                           ; 1 bytes @ 0x4
  4692                           
  4693  00A4                     ___ftpack@sign:	
  4694                           ; 1 bytes @ 0x4
  4695                           
  4696  00A4                     ___lmul@multiplicand:	
  4697                           ; 1 bytes @ 0x4
  4698                           
  4699  00A4                     ___aldiv@dividend:	
  4700                           ; 4 bytes @ 0x4
  4701                           
  4702                           
  4703                           ; 4 bytes @ 0x4
  4704  00A4                     	ds	1
  4705  00A5                     ??___ftpack:	
  4706  00A5                     ___awdiv@counter:	
  4707                           ; 1 bytes @ 0x5
  4708                           
  4709                           
  4710                           ; 1 bytes @ 0x5
  4711  00A5                     	ds	1
  4712  00A6                     ??___ftge:	
  4713  00A6                     setPresetDisplay@ledChannel:	
  4714                           ; 1 bytes @ 0x6
  4715                           
  4716  00A6                     setExpressionDisplay@ledChannel:	
  4717                           ; 1 bytes @ 0x6
  4718                           
  4719  00A6                     ___awdiv@sign:	
  4720                           ; 1 bytes @ 0x6
  4721                           
  4722                           
  4723                           ; 1 bytes @ 0x6
  4724  00A6                     	ds	1
  4725  00A7                     ??_update_mode:	
  4726  00A7                     ??_update_selectMode:	
  4727                           ; 1 bytes @ 0x7
  4728                           
  4729  00A7                     ??_setPedalMode:	
  4730                           ; 1 bytes @ 0x7
  4731                           
  4732  00A7                     ___awdiv@quotient:	
  4733                           ; 1 bytes @ 0x7
  4734                           
  4735                           
  4736                           ; 2 bytes @ 0x7
  4737  00A7                     	ds	1
  4738  00A8                     ??___lmul:	
  4739  00A8                     ??___aldiv:	
  4740                           ; 1 bytes @ 0x8
  4741                           
  4742  00A8                     ?___altoft:	
  4743                           ; 1 bytes @ 0x8
  4744                           
  4745  00A8                     ?___awtoft:	
  4746                           ; 3 bytes @ 0x8
  4747                           
  4748  00A8                     ?___lltoft:	
  4749                           ; 3 bytes @ 0x8
  4750                           
  4751  00A8                     ___awtoft@c:	
  4752                           ; 3 bytes @ 0x8
  4753                           
  4754  00A8                     ___lmul@product:	
  4755                           ; 2 bytes @ 0x8
  4756                           
  4757  00A8                     ___altoft@c:	
  4758                           ; 4 bytes @ 0x8
  4759                           
  4760  00A8                     ___lltoft@c:	
  4761                           ; 4 bytes @ 0x8
  4762                           
  4763                           
  4764                           ; 4 bytes @ 0x8
  4765  00A8                     	ds	1
  4766  00A9                     ___aldiv@counter:	
  4767                           
  4768                           ; 1 bytes @ 0x9
  4769  00A9                     	ds	1
  4770  00AA                     ___aldiv@sign:	
  4771                           
  4772                           ; 1 bytes @ 0xA
  4773  00AA                     	ds	1
  4774  00AB                     ??___awtoft:	
  4775  00AB                     ___aldiv@quotient:	
  4776                           ; 1 bytes @ 0xB
  4777                           
  4778                           
  4779                           ; 4 bytes @ 0xB
  4780  00AB                     	ds	1
  4781  00AC                     ?_wait_ms:	
  4782  00AC                     ??___altoft:	
  4783                           ; 1 bytes @ 0xC
  4784                           
  4785  00AC                     ??___lltoft:	
  4786                           ; 1 bytes @ 0xC
  4787                           
  4788  00AC                     wait_ms@timeSec:	
  4789                           ; 1 bytes @ 0xC
  4790                           
  4791                           
  4792                           ; 2 bytes @ 0xC
  4793  00AC                     	ds	1
  4794  00AD                     ___awtoft@sign:	
  4795  00AD                     ___lltoft@exp:	
  4796                           ; 1 bytes @ 0xD
  4797                           
  4798                           
  4799                           ; 1 bytes @ 0xD
  4800  00AD                     	ds	1
  4801  00AE                     ??_wait_ms:	
  4802  00AE                     ?___ftmul:	
  4803                           ; 1 bytes @ 0xE
  4804                           
  4805  00AE                     ___altoft@exp:	
  4806                           ; 3 bytes @ 0xE
  4807                           
  4808  00AE                     ___ftmul@f1:	
  4809                           ; 1 bytes @ 0xE
  4810                           
  4811  00AE                     wait_ms@timemsl:	
  4812                           ; 3 bytes @ 0xE
  4813                           
  4814                           
  4815                           ; 4 bytes @ 0xE
  4816  00AE                     	ds	1
  4817  00AF                     ___altoft@sign:	
  4818                           
  4819                           ; 1 bytes @ 0xF
  4820  00AF                     	ds	2
  4821  00B1                     ___ftmul@f2:	
  4822                           
  4823                           ; 3 bytes @ 0x11
  4824  00B1                     	ds	1
  4825  00B2                     ??_read_bottom_tactile:	
  4826  00B2                     ??_read_top_tactile:	
  4827                           ; 1 bytes @ 0x12
  4828                           
  4829  00B2                     ??_solidring_tactiles:	
  4830                           ; 1 bytes @ 0x12
  4831                           
  4832  00B2                     ??_ring_tactiles:	
  4833                           ; 1 bytes @ 0x12
  4834                           
  4835  00B2                     ?_setSwitchBypassRelays:	
  4836                           ; 1 bytes @ 0x12
  4837                           
  4838  00B2                     setSwitchBypassRelays@f_state:	
  4839                           ; 1 bytes @ 0x12
  4840                           
  4841                           
  4842                           ; 2 bytes @ 0x12
  4843  00B2                     	ds	1
  4844  00B3                     ring_tactiles@iLed:	
  4845                           
  4846                           ; 2 bytes @ 0x13
  4847  00B3                     	ds	1
  4848  00B4                     ??_setSwitchBypassRelays:	
  4849  00B4                     ??___ftmul:	
  4850                           ; 1 bytes @ 0x14
  4851                           
  4852  00B4                     solidring_tactiles@ring_delay:	
  4853                           ; 1 bytes @ 0x14
  4854                           
  4855                           
  4856                           ; 1 bytes @ 0x14
  4857  00B4                     	ds	1
  4858  00B5                     ring_tactiles@iLed_1532:	
  4859                           
  4860                           ; 2 bytes @ 0x15
  4861  00B5                     	ds	1
  4862  00B6                     ?_setSwitchBypassState:	
  4863  00B6                     setSwitchBypassState@f_state:	
  4864                           ; 1 bytes @ 0x16
  4865                           
  4866                           
  4867                           ; 2 bytes @ 0x16
  4868  00B6                     	ds	1
  4869  00B7                     ??_showSave:	
  4870                           
  4871                           ; 1 bytes @ 0x17
  4872  00B7                     	ds	1
  4873  00B8                     ??_setSwitchBypassState:	
  4874  00B8                     ?_setDoublePressState:	
  4875                           ; 1 bytes @ 0x18
  4876                           
  4877  00B8                     ___ftmul@exp:	
  4878                           ; 1 bytes @ 0x18
  4879                           
  4880  00B8                     setDoublePressState@f_state:	
  4881                           ; 1 bytes @ 0x18
  4882                           
  4883                           
  4884                           ; 2 bytes @ 0x18
  4885  00B8                     	ds	1
  4886  00B9                     ___ftmul@f3_as_product:	
  4887                           
  4888                           ; 3 bytes @ 0x19
  4889  00B9                     	ds	1
  4890  00BA                     ??_initSwitchBypass:	
  4891  00BA                     ??_setDoublePressState:	
  4892                           ; 1 bytes @ 0x1A
  4893                           
  4894  00BA                     initSwitchBypass@initState:	
  4895                           ; 1 bytes @ 0x1A
  4896                           
  4897                           
  4898                           ; 2 bytes @ 0x1A
  4899  00BA                     	ds	2
  4900  00BC                     ??_updateSwitchBypass:	
  4901  00BC                     ??_updateSwitchTap:	
  4902                           ; 1 bytes @ 0x1C
  4903                           
  4904  00BC                     ___ftmul@cntr:	
  4905                           ; 1 bytes @ 0x1C
  4906                           
  4907                           
  4908                           ; 1 bytes @ 0x1C
  4909  00BC                     	ds	1
  4910  00BD                     ___ftmul@sign:	
  4911                           
  4912                           ; 1 bytes @ 0x1D
  4913  00BD                     	ds	1
  4914  00BE                     ?___ftneg:	
  4915  00BE                     ___ftneg@f1:	
  4916                           ; 3 bytes @ 0x1E
  4917                           
  4918                           
  4919                           ; 3 bytes @ 0x1E
  4920  00BE                     	ds	3
  4921  00C1                     ??___ftneg:	
  4922  00C1                     ?___ftadd:	
  4923                           ; 1 bytes @ 0x21
  4924                           
  4925  00C1                     ___ftadd@f1:	
  4926                           ; 3 bytes @ 0x21
  4927                           
  4928                           
  4929                           ; 3 bytes @ 0x21
  4930  00C1                     	ds	1
  4931  00C2                     updateSwitchTap@tapCntDivisor:	
  4932                           
  4933                           ; 2 bytes @ 0x22
  4934  00C2                     	ds	2
  4935  00C4                     updateSwitchTap@iCnt:	
  4936  00C4                     ___ftadd@f2:	
  4937                           ; 1 bytes @ 0x24
  4938                           
  4939                           
  4940                           ; 3 bytes @ 0x24
  4941  00C4                     	ds	3
  4942  00C7                     ??___ftadd:	
  4943                           
  4944                           ; 1 bytes @ 0x27
  4945  00C7                     	ds	4
  4946  00CB                     ___ftadd@sign:	
  4947                           
  4948                           ; 1 bytes @ 0x2B
  4949  00CB                     	ds	1
  4950  00CC                     ___ftadd@exp2:	
  4951                           
  4952                           ; 1 bytes @ 0x2C
  4953  00CC                     	ds	1
  4954  00CD                     ___ftadd@exp1:	
  4955                           
  4956                           ; 1 bytes @ 0x2D
  4957  00CD                     	ds	1
  4958  00CE                     ?___ftdiv:	
  4959  00CE                     ___ftdiv@f2:	
  4960                           ; 3 bytes @ 0x2E
  4961                           
  4962                           
  4963                           ; 3 bytes @ 0x2E
  4964  00CE                     	ds	3
  4965  00D1                     ___ftdiv@f1:	
  4966                           
  4967                           ; 3 bytes @ 0x31
  4968  00D1                     	ds	3
  4969  00D4                     ??___ftdiv:	
  4970                           
  4971                           ; 1 bytes @ 0x34
  4972  00D4                     	ds	4
  4973  00D8                     ___ftdiv@cntr:	
  4974                           
  4975                           ; 1 bytes @ 0x38
  4976  00D8                     	ds	1
  4977  00D9                     ___ftdiv@f3:	
  4978                           
  4979                           ; 3 bytes @ 0x39
  4980  00D9                     	ds	3
  4981  00DC                     ___ftdiv@exp:	
  4982                           
  4983                           ; 1 bytes @ 0x3C
  4984  00DC                     	ds	1
  4985  00DD                     ___ftdiv@sign:	
  4986                           
  4987                           ; 1 bytes @ 0x3D
  4988  00DD                     	ds	1
  4989  00DE                     ?_map:	
  4990  00DE                     map@x:	
  4991                           ; 3 bytes @ 0x3E
  4992                           
  4993                           
  4994                           ; 3 bytes @ 0x3E
  4995  00DE                     	ds	3
  4996  00E1                     map@in_min:	
  4997                           
  4998                           ; 3 bytes @ 0x41
  4999  00E1                     	ds	3
  5000  00E4                     map@in_max:	
  5001                           
  5002                           ; 3 bytes @ 0x44
  5003  00E4                     	ds	3
  5004  00E7                     map@out_min:	
  5005                           
  5006                           ; 3 bytes @ 0x47
  5007  00E7                     	ds	3
  5008  00EA                     map@out_max:	
  5009                           
  5010                           ; 3 bytes @ 0x4A
  5011  00EA                     	ds	3
  5012  00ED                     ??_map:	
  5013  00ED                     _map$2843:	
  5014                           ; 1 bytes @ 0x4D
  5015                           
  5016                           
  5017                           ; 3 bytes @ 0x4D
  5018  00ED                     	ds	3
  5019  00F0                     ??_scaleA10kPot:	
  5020  00F0                     ??_scaleiA10kPot:	
  5021                           ; 1 bytes @ 0x50
  5022                           
  5023  00F0                     ??_scaleA100kPot:	
  5024                           ; 1 bytes @ 0x50
  5025                           
  5026  00F0                     ??_set_subdivision:	
  5027                           ; 1 bytes @ 0x50
  5028                           
  5029  00F0                     ??_getModulationDelayTime:	
  5030                           ; 1 bytes @ 0x50
  5031                           
  5032  00F0                     ??_cos:	
  5033                           ; 1 bytes @ 0x50
  5034                           
  5035  00F0                     ??_modTri:	
  5036                           ; 1 bytes @ 0x50
  5037                           
  5038  00F0                     ??_modSquare:	
  5039                           ; 1 bytes @ 0x50
  5040                           
  5041  00F0                     ??_modSaw:	
  5042                           ; 1 bytes @ 0x50
  5043                           
  5044  00F0                     ??_eval_poly:	
  5045                           ; 1 bytes @ 0x50
  5046                           
  5047  00F0                     ??___wmul:	
  5048                           ; 1 bytes @ 0x50
  5049                           
  5050  00F0                     ??___ftsub:	
  5051                           ; 1 bytes @ 0x50
  5052                           
  5053                           
  5054                           	psect	cstackCOMMON
  5055  0070                     __pcstackCOMMON:	
  5056                           ; 1 bytes @ 0x50
  5057                           
  5058  0070                     ?_calcCosArray:	
  5059  0070                     ?_ConfigureOscillator:	
  5060                           ; 1 bytes @ 0x0
  5061                           
  5062  0070                     ?_InitApp:	
  5063                           ; 1 bytes @ 0x0
  5064                           
  5065  0070                     ?_InitializeTaps:	
  5066                           ; 1 bytes @ 0x0
  5067                           
  5068  0070                     ?_initSwitchBypass:	
  5069                           ; 1 bytes @ 0x0
  5070                           
  5071  0070                     ?_ReadSavedSettings:	
  5072                           ; 1 bytes @ 0x0
  5073                           
  5074  0070                     ?_updateModulationArray:	
  5075                           ; 1 bytes @ 0x0
  5076                           
  5077  0070                     ?_update_mode:	
  5078                           ; 1 bytes @ 0x0
  5079                           
  5080  0070                     ?_update_selectMode:	
  5081                           ; 1 bytes @ 0x0
  5082                           
  5083  0070                     ?_updateSwitchBypass:	
  5084                           ; 1 bytes @ 0x0
  5085                           
  5086  0070                     ?_updateSwitchTap:	
  5087                           ; 1 bytes @ 0x0
  5088                           
  5089  0070                     ?_read_bottom_tactile:	
  5090                           ; 1 bytes @ 0x0
  5091                           
  5092  0070                     ?_read_top_tactile:	
  5093                           ; 1 bytes @ 0x0
  5094                           
  5095  0070                     ?_getModulationDelayTime:	
  5096                           ; 1 bytes @ 0x0
  5097                           
  5098  0070                     ?_init_adc:	
  5099                           ; 1 bytes @ 0x0
  5100                           
  5101  0070                     ?_init_pwm:	
  5102                           ; 1 bytes @ 0x0
  5103                           
  5104  0070                     ?_init_timer2:	
  5105                           ; 1 bytes @ 0x0
  5106                           
  5107  0070                     ?_init_timer0:	
  5108                           ; 1 bytes @ 0x0
  5109                           
  5110  0070                     ?_solidring_tactiles:	
  5111                           ; 1 bytes @ 0x0
  5112                           
  5113  0070                     ?_ring_tactiles:	
  5114                           ; 1 bytes @ 0x0
  5115                           
  5116  0070                     ?_resetRingLEDs:	
  5117                           ; 1 bytes @ 0x0
  5118                           
  5119  0070                     ?_setPedalMode:	
  5120                           ; 1 bytes @ 0x0
  5121                           
  5122  0070                     ?_setPresetDisplay:	
  5123                           ; 1 bytes @ 0x0
  5124                           
  5125  0070                     ?_setExpressionDisplay:	
  5126                           ; 1 bytes @ 0x0
  5127                           
  5128  0070                     ?_isr:	
  5129                           ; 1 bytes @ 0x0
  5130                           
  5131  0070                     ?_main:	
  5132                           ; 1 bytes @ 0x0
  5133                           
  5134  0070                     ?_showSave:	
  5135                           ; 1 bytes @ 0x0
  5136                           
  5137  0070                     ?i1_set_leds_top:	
  5138                           ; 1 bytes @ 0x0
  5139                           
  5140  0070                     ?i1_getModulationSubdivision:	
  5141                           ; 1 bytes @ 0x0
  5142                           
  5143  0070                     ?i1___awdiv:	
  5144                           ; 2 bytes @ 0x0
  5145                           
  5146  0070                     ?i1___lmul:	
  5147                           ; 2 bytes @ 0x0
  5148                           
  5149  0070                     i1set_leds_top@x:	
  5150                           ; 4 bytes @ 0x0
  5151                           
  5152  0070                     i1___awdiv@divisor:	
  5153                           ; 2 bytes @ 0x0
  5154                           
  5155  0070                     i1___lmul@multiplier:	
  5156                           ; 2 bytes @ 0x0
  5157                           
  5158                           
  5159                           ; 4 bytes @ 0x0
  5160  0070                     	ds	2
  5161  0072                     ??i1_getModulationSubdivision:	
  5162  0072                     i1set_leds_top@ledState:	
  5163                           ; 1 bytes @ 0x2
  5164                           
  5165  0072                     i1___awdiv@dividend:	
  5166                           ; 2 bytes @ 0x2
  5167                           
  5168                           
  5169                           ; 2 bytes @ 0x2
  5170  0072                     	ds	2
  5171  0074                     ??i1_set_leds_top:	
  5172  0074                     ??i1___awdiv:	
  5173                           ; 1 bytes @ 0x4
  5174                           
  5175  0074                     i1___lmul@multiplicand:	
  5176                           ; 1 bytes @ 0x4
  5177                           
  5178                           
  5179                           ; 4 bytes @ 0x4
  5180  0074                     	ds	1
  5181  0075                     i1___awdiv@counter:	
  5182                           
  5183                           ; 1 bytes @ 0x5
  5184  0075                     	ds	1
  5185  0076                     i1___awdiv@sign:	
  5186                           
  5187                           ; 1 bytes @ 0x6
  5188  0076                     	ds	1
  5189  0077                     i1___awdiv@quotient:	
  5190                           
  5191                           ; 2 bytes @ 0x7
  5192  0077                     	ds	1
  5193  0078                     ??i1___lmul:	
  5194  0078                     i1___lmul@product:	
  5195                           ; 1 bytes @ 0x8
  5196                           
  5197                           
  5198                           ; 4 bytes @ 0x8
  5199  0078                     	ds	4
  5200  007C                     ??i1___aldiv:	
  5201                           
  5202                           ; 1 bytes @ 0xC
  5203  007C                     	ds	1
  5204  007D                     isr@subDiv:	
  5205                           
  5206                           ; 1 bytes @ 0xD
  5207  007D                     	ds	1
  5208                           
  5209                           	psect	cstackBANK0
  5210  0020                     __pcstackBANK0:	
  5211  0020                     ?i1___aldiv:	
  5212  0020                     i1___aldiv@divisor:	
  5213                           ; 4 bytes @ 0x0
  5214                           
  5215                           
  5216                           ; 4 bytes @ 0x0
  5217  0020                     	ds	4
  5218  0024                     i1___aldiv@dividend:	
  5219                           
  5220                           ; 4 bytes @ 0x4
  5221  0024                     	ds	4
  5222  0028                     i1___aldiv@counter:	
  5223                           
  5224                           ; 1 bytes @ 0x8
  5225  0028                     	ds	1
  5226  0029                     i1___aldiv@sign:	
  5227                           
  5228                           ; 1 bytes @ 0x9
  5229  0029                     	ds	1
  5230  002A                     i1___aldiv@quotient:	
  5231                           
  5232                           ; 4 bytes @ 0xA
  5233  002A                     	ds	4
  5234  002E                     ?_modulation:	
  5235  002E                     modulation@x:	
  5236                           ; 4 bytes @ 0xE
  5237                           
  5238                           
  5239                           ; 4 bytes @ 0xE
  5240  002E                     	ds	4
  5241  0032                     modulation@y:	
  5242                           
  5243                           ; 4 bytes @ 0x12
  5244  0032                     	ds	4
  5245  0036                     ??_modulation:	
  5246                           
  5247                           ; 1 bytes @ 0x16
  5248  0036                     	ds	4
  5249  003A                     ??_isr:	
  5250                           
  5251                           ; 1 bytes @ 0x1A
  5252  003A                     	ds	6
  5253                           
  5254                           	psect	maintext
  5255  035E                     __pmaintext:	
  5256 ;;
  5257 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5258 ;;
  5259 ;; *************** function _main *****************
  5260 ;; Defined at:
  5261 ;;		line 68 in file "main.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : B1F/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5278 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5279 ;;Total ram usage:       14 bytes
  5280 ;; Hardware stack levels required when called:    9
  5281 ;; This function calls:
  5282 ;;		_ConfigureOscillator
  5283 ;;		_InitApp
  5284 ;;		_InitializeTaps
  5285 ;;		_ReadSavedSettings
  5286 ;;		_USARTInit
  5287 ;;		___awtoft
  5288 ;;		___fttol
  5289 ;;		_adc_convert
  5290 ;;		_calcCosArray
  5291 ;;		_getModulationDelayTime
  5292 ;;		_initSwitchBypass
  5293 ;;		_map
  5294 ;;		_read_bottom_tactile
  5295 ;;		_read_top_tactile
  5296 ;;		_scaleA100kPot
  5297 ;;		_scaleA10kPot
  5298 ;;		_scaleiA10kPot
  5299 ;;		_set_subdivision
  5300 ;;		_updateModulationArray
  5301 ;;		_updateSwitchBypass
  5302 ;;		_updateSwitchTap
  5303 ;;		_update_mode
  5304 ;;		_update_selectMode
  5305 ;; This function is called by:
  5306 ;;		Startup code after reset
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           
  5311                           ;psect for function _main
  5312  035E                     _main:	
  5313                           
  5314                           ;main.c: 70: calcCosArray();
  5315                           
  5316                           ;incstack = 0
  5317                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5318  035E  3198  2059  3183   	fcall	_calcCosArray
  5319                           
  5320                           ;main.c: 82: USARTInit(31250);
  5321  0361  3012               	movlw	18
  5322  0362  0021               	movlb	1	; select bank1
  5323  0363  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5324  0364  307A               	movlw	122
  5325  0365  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5326  0366  3188  2000  3183   	fcall	_USARTInit
  5327                           
  5328                           ;main.c: 83: ConfigureOscillator();
  5329  0369  31AD  259A  3183   	fcall	_ConfigureOscillator
  5330                           
  5331                           ;main.c: 84: InitApp();
  5332  036C  31A0  2023  3183   	fcall	_InitApp
  5333                           
  5334                           ;main.c: 86: PORTEbits.RE0 = 1;
  5335  036F  0020               	movlb	0	; select bank0
  5336  0370  1410               	bsf	16,0	;volatile
  5337                           
  5338                           ;main.c: 87: PORTEbits.RE1 = 1;
  5339  0371  1490               	bsf	16,1	;volatile
  5340                           
  5341                           ;main.c: 88: PORTDbits.RD6 = 1;
  5342  0372  170F               	bsf	15,6	;volatile
  5343                           
  5344                           ;main.c: 89: PORTDbits.RD5 = 1;
  5345  0373  168F               	bsf	15,5	;volatile
  5346                           
  5347                           ;main.c: 90: PORTCbits.RC0 = 1;
  5348  0374  140E               	bsf	14,0	;volatile
  5349                           
  5350                           ;main.c: 91: PORTDbits.RD7 = 1;
  5351  0375  178F               	bsf	15,7	;volatile
  5352                           
  5353                           ;main.c: 93: InitializeTaps();
  5354  0376  31AF  2727  3183   	fcall	_InitializeTaps
  5355                           
  5356                           ;main.c: 94: initSwitchBypass();
  5357  0379  3187  27EF  3183   	fcall	_initSwitchBypass
  5358                           
  5359                           ;main.c: 97: ReadSavedSettings();
  5360  037C  31A7  270E  3183   	fcall	_ReadSavedSettings
  5361                           
  5362                           ;main.c: 98: updateModulationArray();
  5363  037F  318D  25DD  3183   	fcall	_updateModulationArray
  5364  0382                     l9242:	
  5365                           ;main.c: 99: while (1) {
  5366                           
  5367                           
  5368                           ;main.c: 102: update_mode();
  5369  0382  31A1  211B  3183   	fcall	_update_mode
  5370                           
  5371                           ;main.c: 103: update_selectMode();
  5372  0385  3198  2000  3183   	fcall	_update_selectMode
  5373                           
  5374                           ;main.c: 106: updateSwitchBypass();
  5375  0388  3192  221B  3183   	fcall	_updateSwitchBypass
  5376                           
  5377                           ;main.c: 107: if (presetSaveMode != 1) {
  5378  038B  0020               	movlb	0	; select bank0
  5379  038C  0351               	decf	_presetSaveMode,w
  5380  038D  1903               	btfsc	3,2
  5381  038E  2B92               	goto	l9252
  5382                           
  5383                           ;main.c: 108: updateSwitchTap();
  5384  038F  318B  23F6  3183   	fcall	_updateSwitchTap
  5385  0392                     l9252:	
  5386                           
  5387                           ;main.c: 109: }
  5388                           ;main.c: 111: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5389  0392  0020               	movlb	0	; select bank0
  5390  0393  0351               	decf	_presetSaveMode,w
  5391  0394  1903               	btfsc	3,2
  5392  0395  2BA1               	goto	l9258
  5393  0396  0850               	movf	_mode2_state,w
  5394  0397  0023               	movlb	3	; select bank3
  5395  0398  0665               	xorwf	_presetModeCnst^(0+384),w
  5396  0399  1903               	skipnz
  5397  039A  2BA1               	goto	l9258
  5398                           
  5399                           ;main.c: 112: read_bottom_tactile();
  5400  039B  31A4  2405  3183   	fcall	_read_bottom_tactile
  5401                           
  5402                           ;main.c: 113: read_top_tactile();
  5403  039E  31A4  244F  3183   	fcall	_read_top_tactile
  5404  03A1                     l9258:	
  5405                           
  5406                           ;main.c: 114: }
  5407                           ;main.c: 117: knob_1_pos = adc_convert(0);
  5408  03A1  3000               	movlw	0
  5409  03A2  31AD  25DD  3183   	fcall	_adc_convert
  5410  03A5  0021               	movlb	1	; select bank1
  5411  03A6  0821               	movf	(?_adc_convert+1)^(0+128),w
  5412  03A7  0023               	movlb	3	; select bank3
  5413  03A8  00A9               	movwf	(_knob_1_pos+1)^(0+384)
  5414  03A9  0021               	movlb	1	; select bank1
  5415  03AA  0820               	movf	?_adc_convert^(0+128),w
  5416  03AB  0023               	movlb	3	; select bank3
  5417  03AC  00A8               	movwf	_knob_1_pos^(0+384)
  5418                           
  5419                           ;main.c: 118: knob_2_pos = adc_convert(1);
  5420  03AD  3001               	movlw	1
  5421  03AE  31AD  25DD  3183   	fcall	_adc_convert
  5422  03B1  0021               	movlb	1	; select bank1
  5423  03B2  0821               	movf	(?_adc_convert+1)^(0+128),w
  5424  03B3  0023               	movlb	3	; select bank3
  5425  03B4  00AB               	movwf	(_knob_2_pos+1)^(0+384)
  5426  03B5  0021               	movlb	1	; select bank1
  5427  03B6  0820               	movf	?_adc_convert^(0+128),w
  5428  03B7  0023               	movlb	3	; select bank3
  5429  03B8  00AA               	movwf	_knob_2_pos^(0+384)
  5430                           
  5431                           ;main.c: 119: knob_3_pos = adc_convert(2);
  5432  03B9  3002               	movlw	2
  5433  03BA  31AD  25DD  3183   	fcall	_adc_convert
  5434  03BD  0021               	movlb	1	; select bank1
  5435  03BE  0821               	movf	(?_adc_convert+1)^(0+128),w
  5436  03BF  0023               	movlb	3	; select bank3
  5437  03C0  00AD               	movwf	(_knob_3_pos+1)^(0+384)
  5438  03C1  0021               	movlb	1	; select bank1
  5439  03C2  0820               	movf	?_adc_convert^(0+128),w
  5440  03C3  0023               	movlb	3	; select bank3
  5441  03C4  00AC               	movwf	_knob_3_pos^(0+384)
  5442                           
  5443                           ;main.c: 120: knob_4_pos = adc_convert(3);
  5444  03C5  3003               	movlw	3
  5445  03C6  31AD  25DD  3183   	fcall	_adc_convert
  5446  03C9  0021               	movlb	1	; select bank1
  5447  03CA  0821               	movf	(?_adc_convert+1)^(0+128),w
  5448  03CB  0023               	movlb	3	; select bank3
  5449  03CC  00AF               	movwf	(_knob_4_pos+1)^(0+384)
  5450  03CD  0021               	movlb	1	; select bank1
  5451  03CE  0820               	movf	?_adc_convert^(0+128),w
  5452  03CF  0023               	movlb	3	; select bank3
  5453  03D0  00AE               	movwf	_knob_4_pos^(0+384)
  5454                           
  5455                           ;main.c: 121: knob_5_pos = adc_convert(4);
  5456  03D1  3004               	movlw	4
  5457  03D2  31AD  25DD  3183   	fcall	_adc_convert
  5458  03D5  0021               	movlb	1	; select bank1
  5459  03D6  0821               	movf	(?_adc_convert+1)^(0+128),w
  5460  03D7  0023               	movlb	3	; select bank3
  5461  03D8  00B1               	movwf	(_knob_5_pos+1)^(0+384)
  5462  03D9  0021               	movlb	1	; select bank1
  5463  03DA  0820               	movf	?_adc_convert^(0+128),w
  5464  03DB  0023               	movlb	3	; select bank3
  5465  03DC  00B0               	movwf	_knob_5_pos^(0+384)
  5466                           
  5467                           ;main.c: 125: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5468  03DD  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5469  03DE  0024               	movlb	4	; select bank4
  5470  03DF  00D5               	movwf	??_main^(0+512)
  5471  03E0  0023               	movlb	3	; select bank3
  5472  03E1  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5473  03E2  0024               	movlb	4	; select bank4
  5474  03E3  00D6               	movwf	(??_main^(0+512)+1)
  5475  03E4  0AD5               	incf	??_main^(0+512),f
  5476  03E5  1903               	skipnz
  5477  03E6  0AD6               	incf	(??_main^(0+512)+1),f
  5478  03E7  0023               	movlb	3	; select bank3
  5479  03E8  0828               	movf	_knob_1_pos^(0+384),w
  5480  03E9  0024               	movlb	4	; select bank4
  5481  03EA  0755               	addwf	??_main^(0+512),w
  5482  03EB  00D7               	movwf	(??_main+2)^(0+512)
  5483  03EC  0023               	movlb	3	; select bank3
  5484  03ED  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5485  03EE  0024               	movlb	4	; select bank4
  5486  03EF  3D56               	addwfc	(??_main+1)^(0+512),w
  5487  03F0  00D8               	movwf	(??_main+3)^(0+512)
  5488  03F1  0858               	movf	(??_main+3)^(0+512),w
  5489  03F2  3A80               	xorlw	128
  5490  03F3  00D9               	movwf	(??_main+4)^(0+512)
  5491  03F4  3080               	movlw	128
  5492  03F5  0259               	subwf	(??_main+4)^(0+512),w
  5493  03F6  1D03               	skipz
  5494  03F7  2BFA               	goto	u10185
  5495  03F8  3004               	movlw	4
  5496  03F9  0257               	subwf	(??_main+2)^(0+512),w
  5497  03FA                     u10185:	
  5498  03FA  1803               	skipnc
  5499  03FB  2C1C               	goto	l9272
  5500  03FC  0023               	movlb	3	; select bank3
  5501  03FD  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5502  03FE  0024               	movlb	4	; select bank4
  5503  03FF  00D5               	movwf	??_main^(0+512)
  5504  0400  0023               	movlb	3	; select bank3
  5505  0401  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5506  0402  0024               	movlb	4	; select bank4
  5507  0403  00D6               	movwf	(??_main^(0+512)+1)
  5508  0404  0AD5               	incf	??_main^(0+512),f
  5509  0405  1903               	skipnz
  5510  0406  0AD6               	incf	(??_main^(0+512)+1),f
  5511  0407  0023               	movlb	3	; select bank3
  5512  0408  0828               	movf	_knob_1_pos^(0+384),w
  5513  0409  0024               	movlb	4	; select bank4
  5514  040A  0755               	addwf	??_main^(0+512),w
  5515  040B  00D7               	movwf	(??_main+2)^(0+512)
  5516  040C  0023               	movlb	3	; select bank3
  5517  040D  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5518  040E  0024               	movlb	4	; select bank4
  5519  040F  3D56               	addwfc	(??_main+1)^(0+512),w
  5520  0410  00D8               	movwf	(??_main+3)^(0+512)
  5521  0411  0858               	movf	(??_main+3)^(0+512),w
  5522  0412  3A80               	xorlw	128
  5523  0413  00D9               	movwf	(??_main+4)^(0+512)
  5524  0414  307F               	movlw	127
  5525  0415  0259               	subwf	(??_main+4)^(0+512),w
  5526  0416  1D03               	skipz
  5527  0417  2C1A               	goto	u10195
  5528  0418  30FD               	movlw	253
  5529  0419  0257               	subwf	(??_main+2)^(0+512),w
  5530  041A                     u10195:	
  5531  041A  1803               	skipnc
  5532  041B  2C7A               	goto	l9282
  5533  041C                     l9272:	
  5534                           
  5535                           ;main.c: 126: knob1_prev = knob_1_pos;
  5536  041C  0023               	movlb	3	; select bank3
  5537  041D  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5538  041E  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5539  041F  0828               	movf	_knob_1_pos^(0+384),w
  5540  0420  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5541                           
  5542                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5543  0421  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5544  0422  0021               	movlb	1	; select bank1
  5545  0423  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5546  0424  0023               	movlb	3	; select bank3
  5547  0425  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5548  0426  0021               	movlb	1	; select bank1
  5549  0427  00A8               	movwf	___awtoft@c^(0+128)
  5550  0428  31AF  2705  3183   	fcall	___awtoft
  5551  042B  0021               	movlb	1	; select bank1
  5552  042C  0828               	movf	?___awtoft^(0+128),w
  5553  042D  0024               	movlb	4	; select bank4
  5554  042E  00DA               	movwf	_main$2840^(0+512)
  5555  042F  0021               	movlb	1	; select bank1
  5556  0430  0829               	movf	(?___awtoft+1)^(0+128),w
  5557  0431  0024               	movlb	4	; select bank4
  5558  0432  00DB               	movwf	(_main$2840+1)^(0+512)
  5559  0433  0021               	movlb	1	; select bank1
  5560  0434  082A               	movf	(?___awtoft+2)^(0+128),w
  5561  0435  0024               	movlb	4	; select bank4
  5562  0436  00DC               	movwf	(_main$2840+2)^(0+512)
  5563                           
  5564                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5565  0437  085A               	movf	_main$2840^(0+512),w
  5566  0438  0022               	movlb	2	; select bank2
  5567  0439  00E7               	movwf	scaleA10kPot@input^(0+256)
  5568  043A  0024               	movlb	4	; select bank4
  5569  043B  085B               	movf	(_main$2840+1)^(0+512),w
  5570  043C  0022               	movlb	2	; select bank2
  5571  043D  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5572  043E  0024               	movlb	4	; select bank4
  5573  043F  085C               	movf	(_main$2840+2)^(0+512),w
  5574  0440  0022               	movlb	2	; select bank2
  5575  0441  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5576  0442  319C  2400  3183   	fcall	_scaleA10kPot
  5577  0445  0022               	movlb	2	; select bank2
  5578  0446  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5579  0447  0026               	movlb	6	; select bank6
  5580  0448  0099               	movwf	25	;volatile
  5581  0449  0022               	movlb	2	; select bank2
  5582  044A  0867               	movf	?_scaleA10kPot^(0+256),w
  5583  044B  0026               	movlb	6	; select bank6
  5584  044C  0098               	movwf	24	;volatile
  5585                           
  5586                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5587  044D  0023               	movlb	3	; select bank3
  5588  044E  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5589  044F  0021               	movlb	1	; select bank1
  5590  0450  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5591  0451  0023               	movlb	3	; select bank3
  5592  0452  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5593  0453  0021               	movlb	1	; select bank1
  5594  0454  00A8               	movwf	___awtoft@c^(0+128)
  5595  0455  31AF  2705  3183   	fcall	___awtoft
  5596  0458  0021               	movlb	1	; select bank1
  5597  0459  0828               	movf	?___awtoft^(0+128),w
  5598  045A  0024               	movlb	4	; select bank4
  5599  045B  00DD               	movwf	_main$2841^(0+512)
  5600  045C  0021               	movlb	1	; select bank1
  5601  045D  0829               	movf	(?___awtoft+1)^(0+128),w
  5602  045E  0024               	movlb	4	; select bank4
  5603  045F  00DE               	movwf	(_main$2841+1)^(0+512)
  5604  0460  0021               	movlb	1	; select bank1
  5605  0461  082A               	movf	(?___awtoft+2)^(0+128),w
  5606  0462  0024               	movlb	4	; select bank4
  5607  0463  00DF               	movwf	(_main$2841+2)^(0+512)
  5608                           
  5609                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5610  0464  085D               	movf	_main$2841^(0+512),w
  5611  0465  0022               	movlb	2	; select bank2
  5612  0466  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5613  0467  0024               	movlb	4	; select bank4
  5614  0468  085E               	movf	(_main$2841+1)^(0+512),w
  5615  0469  0022               	movlb	2	; select bank2
  5616  046A  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5617  046B  0024               	movlb	4	; select bank4
  5618  046C  085F               	movf	(_main$2841+2)^(0+512),w
  5619  046D  0022               	movlb	2	; select bank2
  5620  046E  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5621  046F  319D  25D1  3183   	fcall	_scaleiA10kPot
  5622  0472  0022               	movlb	2	; select bank2
  5623  0473  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5624  0474  0026               	movlb	6	; select bank6
  5625  0475  009D               	movwf	29	;volatile
  5626  0476  0022               	movlb	2	; select bank2
  5627  0477  0867               	movf	?_scaleiA10kPot^(0+256),w
  5628  0478  0026               	movlb	6	; select bank6
  5629  0479  009C               	movwf	28	;volatile
  5630  047A                     l9282:	
  5631                           
  5632                           ;main.c: 130: }
  5633                           ;main.c: 134: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5634  047A  0023               	movlb	3	; select bank3
  5635  047B  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5636  047C  0024               	movlb	4	; select bank4
  5637  047D  00D5               	movwf	??_main^(0+512)
  5638  047E  0023               	movlb	3	; select bank3
  5639  047F  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5640  0480  0024               	movlb	4	; select bank4
  5641  0481  00D6               	movwf	(??_main^(0+512)+1)
  5642  0482  0AD5               	incf	??_main^(0+512),f
  5643  0483  1903               	skipnz
  5644  0484  0AD6               	incf	(??_main^(0+512)+1),f
  5645  0485  0023               	movlb	3	; select bank3
  5646  0486  082A               	movf	_knob_2_pos^(0+384),w
  5647  0487  0024               	movlb	4	; select bank4
  5648  0488  0755               	addwf	??_main^(0+512),w
  5649  0489  00D7               	movwf	(??_main+2)^(0+512)
  5650  048A  0023               	movlb	3	; select bank3
  5651  048B  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5652  048C  0024               	movlb	4	; select bank4
  5653  048D  3D56               	addwfc	(??_main+1)^(0+512),w
  5654  048E  00D8               	movwf	(??_main+3)^(0+512)
  5655  048F  0858               	movf	(??_main+3)^(0+512),w
  5656  0490  3A80               	xorlw	128
  5657  0491  00D9               	movwf	(??_main+4)^(0+512)
  5658  0492  3080               	movlw	128
  5659  0493  0259               	subwf	(??_main+4)^(0+512),w
  5660  0494  1D03               	skipz
  5661  0495  2C98               	goto	u10205
  5662  0496  3004               	movlw	4
  5663  0497  0257               	subwf	(??_main+2)^(0+512),w
  5664  0498                     u10205:	
  5665  0498  1803               	skipnc
  5666  0499  2CBA               	goto	l9286
  5667  049A  0023               	movlb	3	; select bank3
  5668  049B  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5669  049C  0024               	movlb	4	; select bank4
  5670  049D  00D5               	movwf	??_main^(0+512)
  5671  049E  0023               	movlb	3	; select bank3
  5672  049F  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5673  04A0  0024               	movlb	4	; select bank4
  5674  04A1  00D6               	movwf	(??_main^(0+512)+1)
  5675  04A2  0AD5               	incf	??_main^(0+512),f
  5676  04A3  1903               	skipnz
  5677  04A4  0AD6               	incf	(??_main^(0+512)+1),f
  5678  04A5  0023               	movlb	3	; select bank3
  5679  04A6  082A               	movf	_knob_2_pos^(0+384),w
  5680  04A7  0024               	movlb	4	; select bank4
  5681  04A8  0755               	addwf	??_main^(0+512),w
  5682  04A9  00D7               	movwf	(??_main+2)^(0+512)
  5683  04AA  0023               	movlb	3	; select bank3
  5684  04AB  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5685  04AC  0024               	movlb	4	; select bank4
  5686  04AD  3D56               	addwfc	(??_main+1)^(0+512),w
  5687  04AE  00D8               	movwf	(??_main+3)^(0+512)
  5688  04AF  0858               	movf	(??_main+3)^(0+512),w
  5689  04B0  3A80               	xorlw	128
  5690  04B1  00D9               	movwf	(??_main+4)^(0+512)
  5691  04B2  307F               	movlw	127
  5692  04B3  0259               	subwf	(??_main+4)^(0+512),w
  5693  04B4  1D03               	skipz
  5694  04B5  2CB8               	goto	u10215
  5695  04B6  30FD               	movlw	253
  5696  04B7  0257               	subwf	(??_main+2)^(0+512),w
  5697  04B8                     u10215:	
  5698  04B8  1803               	skipnc
  5699  04B9  2D30               	goto	l9296
  5700  04BA                     l9286:	
  5701                           
  5702                           ;main.c: 135: knob2_prev = knob_2_pos;
  5703  04BA  0023               	movlb	3	; select bank3
  5704  04BB  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5705  04BC  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5706  04BD  082A               	movf	_knob_2_pos^(0+384),w
  5707  04BE  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5708                           
  5709                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5710  04BF  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5711  04C0  0024               	movlb	4	; select bank4
  5712  04C1  00D5               	movwf	??_main^(0+512)
  5713  04C2  0023               	movlb	3	; select bank3
  5714  04C3  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5715  04C4  0024               	movlb	4	; select bank4
  5716  04C5  00D6               	movwf	(??_main^(0+512)+1)
  5717  04C6  0AD5               	incf	??_main^(0+512),f
  5718  04C7  1903               	skipnz
  5719  04C8  0AD6               	incf	(??_main^(0+512)+1),f
  5720  04C9  0855               	movf	??_main^(0+512),w
  5721  04CA  3EFF               	addlw	255
  5722  04CB  0021               	movlb	1	; select bank1
  5723  04CC  00A8               	movwf	___awtoft@c^(0+128)
  5724  04CD  3003               	movlw	3
  5725  04CE  0024               	movlb	4	; select bank4
  5726  04CF  3D56               	addwfc	(??_main+1)^(0+512),w
  5727  04D0  0021               	movlb	1	; select bank1
  5728  04D1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5729  04D2  31AF  2705  3183   	fcall	___awtoft
  5730  04D5  0021               	movlb	1	; select bank1
  5731  04D6  0828               	movf	?___awtoft^(0+128),w
  5732  04D7  0024               	movlb	4	; select bank4
  5733  04D8  00E0               	movwf	_main$2842^(0+512)
  5734  04D9  0021               	movlb	1	; select bank1
  5735  04DA  0829               	movf	(?___awtoft+1)^(0+128),w
  5736  04DB  0024               	movlb	4	; select bank4
  5737  04DC  00E1               	movwf	(_main$2842+1)^(0+512)
  5738  04DD  0021               	movlb	1	; select bank1
  5739  04DE  082A               	movf	(?___awtoft+2)^(0+128),w
  5740  04DF  0024               	movlb	4	; select bank4
  5741  04E0  00E2               	movwf	(_main$2842+2)^(0+512)
  5742                           
  5743                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5744  04E1  0860               	movf	_main$2842^(0+512),w
  5745  04E2  0022               	movlb	2	; select bank2
  5746  04E3  00E7               	movwf	scaleA100kPot@input^(0+256)
  5747  04E4  0024               	movlb	4	; select bank4
  5748  04E5  0861               	movf	(_main$2842+1)^(0+512),w
  5749  04E6  0022               	movlb	2	; select bank2
  5750  04E7  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5751  04E8  0024               	movlb	4	; select bank4
  5752  04E9  0862               	movf	(_main$2842+2)^(0+512),w
  5753  04EA  0022               	movlb	2	; select bank2
  5754  04EB  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5755  04EC  3199  21DE  3183   	fcall	_scaleA100kPot
  5756  04EF  0022               	movlb	2	; select bank2
  5757  04F0  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5758  04F1  0025               	movlb	5	; select bank5
  5759  04F2  0092               	movwf	18	;volatile
  5760  04F3  0022               	movlb	2	; select bank2
  5761  04F4  0867               	movf	?_scaleA100kPot^(0+256),w
  5762  04F5  0025               	movlb	5	; select bank5
  5763  04F6  0091               	movwf	17	;volatile
  5764                           
  5765                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5766  04F7  0023               	movlb	3	; select bank3
  5767  04F8  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5768  04F9  0024               	movlb	4	; select bank4
  5769  04FA  00D5               	movwf	??_main^(0+512)
  5770  04FB  0023               	movlb	3	; select bank3
  5771  04FC  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5772  04FD  0024               	movlb	4	; select bank4
  5773  04FE  00D6               	movwf	(??_main^(0+512)+1)
  5774  04FF  0AD5               	incf	??_main^(0+512),f
  5775  0500  1903               	skipnz
  5776  0501  0AD6               	incf	(??_main^(0+512)+1),f
  5777  0502  0855               	movf	??_main^(0+512),w
  5778  0503  3EFF               	addlw	255
  5779  0504  0021               	movlb	1	; select bank1
  5780  0505  00A8               	movwf	___awtoft@c^(0+128)
  5781  0506  3003               	movlw	3
  5782  0507  0024               	movlb	4	; select bank4
  5783  0508  3D56               	addwfc	(??_main+1)^(0+512),w
  5784  0509  0021               	movlb	1	; select bank1
  5785  050A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5786  050B  31AF  2705  3183   	fcall	___awtoft
  5787  050E  0021               	movlb	1	; select bank1
  5788  050F  0828               	movf	?___awtoft^(0+128),w
  5789  0510  0024               	movlb	4	; select bank4
  5790  0511  00E0               	movwf	_main$2842^(0+512)
  5791  0512  0021               	movlb	1	; select bank1
  5792  0513  0829               	movf	(?___awtoft+1)^(0+128),w
  5793  0514  0024               	movlb	4	; select bank4
  5794  0515  00E1               	movwf	(_main$2842+1)^(0+512)
  5795  0516  0021               	movlb	1	; select bank1
  5796  0517  082A               	movf	(?___awtoft+2)^(0+128),w
  5797  0518  0024               	movlb	4	; select bank4
  5798  0519  00E2               	movwf	(_main$2842+2)^(0+512)
  5799                           
  5800                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5801  051A  0860               	movf	_main$2842^(0+512),w
  5802  051B  0022               	movlb	2	; select bank2
  5803  051C  00E7               	movwf	scaleA100kPot@input^(0+256)
  5804  051D  0024               	movlb	4	; select bank4
  5805  051E  0861               	movf	(_main$2842+1)^(0+512),w
  5806  051F  0022               	movlb	2	; select bank2
  5807  0520  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5808  0521  0024               	movlb	4	; select bank4
  5809  0522  0862               	movf	(_main$2842+2)^(0+512),w
  5810  0523  0022               	movlb	2	; select bank2
  5811  0524  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5812  0525  3199  21DE  3183   	fcall	_scaleA100kPot
  5813  0528  0022               	movlb	2	; select bank2
  5814  0529  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5815  052A  0025               	movlb	5	; select bank5
  5816  052B  0099               	movwf	25	;volatile
  5817  052C  0022               	movlb	2	; select bank2
  5818  052D  0867               	movf	?_scaleA100kPot^(0+256),w
  5819  052E  0025               	movlb	5	; select bank5
  5820  052F  0098               	movwf	24	;volatile
  5821  0530                     l9296:	
  5822                           
  5823                           ;main.c: 138: }
  5824                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5825  0530  0023               	movlb	3	; select bank3
  5826  0531  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5827  0532  0024               	movlb	4	; select bank4
  5828  0533  00D5               	movwf	??_main^(0+512)
  5829  0534  0023               	movlb	3	; select bank3
  5830  0535  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5831  0536  0024               	movlb	4	; select bank4
  5832  0537  00D6               	movwf	(??_main^(0+512)+1)
  5833  0538  0AD5               	incf	??_main^(0+512),f
  5834  0539  1903               	skipnz
  5835  053A  0AD6               	incf	(??_main^(0+512)+1),f
  5836  053B  0023               	movlb	3	; select bank3
  5837  053C  082C               	movf	_knob_3_pos^(0+384),w
  5838  053D  0024               	movlb	4	; select bank4
  5839  053E  0755               	addwf	??_main^(0+512),w
  5840  053F  00D7               	movwf	(??_main+2)^(0+512)
  5841  0540  0023               	movlb	3	; select bank3
  5842  0541  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5843  0542  0024               	movlb	4	; select bank4
  5844  0543  3D56               	addwfc	(??_main+1)^(0+512),w
  5845  0544  00D8               	movwf	(??_main+3)^(0+512)
  5846  0545  0858               	movf	(??_main+3)^(0+512),w
  5847  0546  3A80               	xorlw	128
  5848  0547  00D9               	movwf	(??_main+4)^(0+512)
  5849  0548  3080               	movlw	128
  5850  0549  0259               	subwf	(??_main+4)^(0+512),w
  5851  054A  1D03               	skipz
  5852  054B  2D4E               	goto	u10225
  5853  054C  3004               	movlw	4
  5854  054D  0257               	subwf	(??_main+2)^(0+512),w
  5855  054E                     u10225:	
  5856  054E  1803               	skipnc
  5857  054F  2D70               	goto	l9300
  5858  0550  0023               	movlb	3	; select bank3
  5859  0551  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5860  0552  0024               	movlb	4	; select bank4
  5861  0553  00D5               	movwf	??_main^(0+512)
  5862  0554  0023               	movlb	3	; select bank3
  5863  0555  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5864  0556  0024               	movlb	4	; select bank4
  5865  0557  00D6               	movwf	(??_main^(0+512)+1)
  5866  0558  0AD5               	incf	??_main^(0+512),f
  5867  0559  1903               	skipnz
  5868  055A  0AD6               	incf	(??_main^(0+512)+1),f
  5869  055B  0023               	movlb	3	; select bank3
  5870  055C  082C               	movf	_knob_3_pos^(0+384),w
  5871  055D  0024               	movlb	4	; select bank4
  5872  055E  0755               	addwf	??_main^(0+512),w
  5873  055F  00D7               	movwf	(??_main+2)^(0+512)
  5874  0560  0023               	movlb	3	; select bank3
  5875  0561  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5876  0562  0024               	movlb	4	; select bank4
  5877  0563  3D56               	addwfc	(??_main+1)^(0+512),w
  5878  0564  00D8               	movwf	(??_main+3)^(0+512)
  5879  0565  0858               	movf	(??_main+3)^(0+512),w
  5880  0566  3A80               	xorlw	128
  5881  0567  00D9               	movwf	(??_main+4)^(0+512)
  5882  0568  307F               	movlw	127
  5883  0569  0259               	subwf	(??_main+4)^(0+512),w
  5884  056A  1D03               	skipz
  5885  056B  2D6E               	goto	u10235
  5886  056C  30FD               	movlw	253
  5887  056D  0257               	subwf	(??_main+2)^(0+512),w
  5888  056E                     u10235:	
  5889  056E  1803               	skipnc
  5890  056F  2DDC               	goto	l9312
  5891  0570                     l9300:	
  5892                           
  5893                           ;main.c: 149: knob3_prev = knob_3_pos;
  5894  0570  0023               	movlb	3	; select bank3
  5895  0571  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5896  0572  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5897  0573  082C               	movf	_knob_3_pos^(0+384),w
  5898  0574  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5899                           
  5900                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5901  0575  3080               	movlw	128
  5902  0576  0021               	movlb	1	; select bank1
  5903  0577  00EA               	movwf	map@out_max^(0+128)
  5904  0578  309D               	movlw	157
  5905  0579  00EB               	movwf	(map@out_max+1)^(0+128)
  5906  057A  3043               	movlw	67
  5907  057B  00EC               	movwf	(map@out_max+2)^(0+128)
  5908  057C  3000               	movlw	0
  5909  057D  00E7               	movwf	map@out_min^(0+128)
  5910  057E  3034               	movlw	52
  5911  057F  00E8               	movwf	(map@out_min+1)^(0+128)
  5912  0580  3042               	movlw	66
  5913  0581  00E9               	movwf	(map@out_min+2)^(0+128)
  5914  0582  30C0               	movlw	192
  5915  0583  00E4               	movwf	map@in_max^(0+128)
  5916  0584  307F               	movlw	127
  5917  0585  00E5               	movwf	(map@in_max+1)^(0+128)
  5918  0586  3044               	movlw	68
  5919  0587  00E6               	movwf	(map@in_max+2)^(0+128)
  5920  0588  3000               	movlw	0
  5921  0589  00E1               	movwf	map@in_min^(0+128)
  5922  058A  3000               	movlw	0
  5923  058B  00E2               	movwf	(map@in_min+1)^(0+128)
  5924  058C  3000               	movlw	0
  5925  058D  00E3               	movwf	(map@in_min+2)^(0+128)
  5926  058E  0023               	movlb	3	; select bank3
  5927  058F  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5928  0590  0021               	movlb	1	; select bank1
  5929  0591  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5930  0592  0023               	movlb	3	; select bank3
  5931  0593  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5932  0594  0021               	movlb	1	; select bank1
  5933  0595  00A8               	movwf	___awtoft@c^(0+128)
  5934  0596  31AF  2705  3183   	fcall	___awtoft
  5935  0599  0021               	movlb	1	; select bank1
  5936  059A  0828               	movf	?___awtoft^(0+128),w
  5937  059B  00DE               	movwf	map@x^(0+128)
  5938  059C  0829               	movf	(?___awtoft+1)^(0+128),w
  5939  059D  00DF               	movwf	(map@x+1)^(0+128)
  5940  059E  082A               	movf	(?___awtoft+2)^(0+128),w
  5941  059F  00E0               	movwf	(map@x+2)^(0+128)
  5942  05A0  319A  22EA  3183   	fcall	_map
  5943  05A3  0021               	movlb	1	; select bank1
  5944  05A4  085E               	movf	?_map^(0+128),w
  5945  05A5  0022               	movlb	2	; select bank2
  5946  05A6  00A0               	movwf	___fttol@f1^(0+256)
  5947  05A7  0021               	movlb	1	; select bank1
  5948  05A8  085F               	movf	(?_map+1)^(0+128),w
  5949  05A9  0022               	movlb	2	; select bank2
  5950  05AA  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5951  05AB  0021               	movlb	1	; select bank1
  5952  05AC  0860               	movf	(?_map+2)^(0+128),w
  5953  05AD  0022               	movlb	2	; select bank2
  5954  05AE  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5955  05AF  319A  2263  3183   	fcall	___fttol
  5956  05B2  0022               	movlb	2	; select bank2
  5957  05B3  0821               	movf	(?___fttol^(0+256)+1),w
  5958  05B4  0023               	movlb	3	; select bank3
  5959  05B5  00DC               	movwf	(_symmetry+1)^(0+384)
  5960  05B6  0022               	movlb	2	; select bank2
  5961  05B7  0820               	movf	?___fttol^(0+256),w
  5962  05B8  0023               	movlb	3	; select bank3
  5963  05B9  00DB               	movwf	_symmetry^(0+384)
  5964                           
  5965                           ;main.c: 152: modulation_changed = 1;
  5966  05BA  01C2               	clrf	_modulation_changed^(0+384)
  5967  05BB  0AC2               	incf	_modulation_changed^(0+384),f
  5968                           
  5969                           ;main.c: 153: if (symmetry > 174 && symmetry < 185) {
  5970  05BC  085C               	movf	(_symmetry+1)^(0+384),w
  5971  05BD  3A80               	xorlw	128
  5972  05BE  0024               	movlb	4	; select bank4
  5973  05BF  00D5               	movwf	??_main^(0+512)
  5974  05C0  3080               	movlw	128
  5975  05C1  0255               	subwf	??_main^(0+512),w
  5976  05C2  1D03               	skipz
  5977  05C3  2DC7               	goto	u10245
  5978  05C4  30AF               	movlw	175
  5979  05C5  0023               	movlb	3	; select bank3
  5980  05C6  025B               	subwf	_symmetry^(0+384),w
  5981  05C7                     u10245:	
  5982  05C7  1C03               	skipc
  5983  05C8  2DDA               	goto	l364
  5984  05C9  0023               	movlb	3	; select bank3
  5985  05CA  085C               	movf	(_symmetry+1)^(0+384),w
  5986  05CB  3A80               	xorlw	128
  5987  05CC  0024               	movlb	4	; select bank4
  5988  05CD  00D5               	movwf	??_main^(0+512)
  5989  05CE  3080               	movlw	128
  5990  05CF  0255               	subwf	??_main^(0+512),w
  5991  05D0  1D03               	skipz
  5992  05D1  2DD5               	goto	u10255
  5993  05D2  30B9               	movlw	185
  5994  05D3  0023               	movlb	3	; select bank3
  5995  05D4  025B               	subwf	_symmetry^(0+384),w
  5996  05D5                     u10255:	
  5997  05D5  1803               	skipnc
  5998  05D6  2DDA               	goto	l364
  5999                           
  6000                           ;main.c: 154: LATBbits.LATB1 = 1;
  6001  05D7  0022               	movlb	2	; select bank2
  6002  05D8  148D               	bsf	13,1	;volatile
  6003                           
  6004                           ;main.c: 155: } else {
  6005  05D9  2DDC               	goto	l9312
  6006  05DA                     l364:	
  6007                           
  6008                           ;main.c: 156: LATBbits.LATB1 = 0;
  6009  05DA  0022               	movlb	2	; select bank2
  6010  05DB  108D               	bcf	13,1	;volatile
  6011  05DC                     l9312:	
  6012                           
  6013                           ;main.c: 157: }
  6014                           ;main.c: 158: }
  6015                           ;main.c: 167: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6016  05DC  0023               	movlb	3	; select bank3
  6017  05DD  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6018  05DE  0024               	movlb	4	; select bank4
  6019  05DF  00D5               	movwf	??_main^(0+512)
  6020  05E0  0023               	movlb	3	; select bank3
  6021  05E1  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6022  05E2  0024               	movlb	4	; select bank4
  6023  05E3  00D6               	movwf	(??_main^(0+512)+1)
  6024  05E4  0AD5               	incf	??_main^(0+512),f
  6025  05E5  1903               	skipnz
  6026  05E6  0AD6               	incf	(??_main^(0+512)+1),f
  6027  05E7  0023               	movlb	3	; select bank3
  6028  05E8  082E               	movf	_knob_4_pos^(0+384),w
  6029  05E9  0024               	movlb	4	; select bank4
  6030  05EA  0755               	addwf	??_main^(0+512),w
  6031  05EB  00D7               	movwf	(??_main+2)^(0+512)
  6032  05EC  0023               	movlb	3	; select bank3
  6033  05ED  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6034  05EE  0024               	movlb	4	; select bank4
  6035  05EF  3D56               	addwfc	(??_main+1)^(0+512),w
  6036  05F0  00D8               	movwf	(??_main+3)^(0+512)
  6037  05F1  0858               	movf	(??_main+3)^(0+512),w
  6038  05F2  3A80               	xorlw	128
  6039  05F3  00D9               	movwf	(??_main+4)^(0+512)
  6040  05F4  3080               	movlw	128
  6041  05F5  0259               	subwf	(??_main+4)^(0+512),w
  6042  05F6  1D03               	skipz
  6043  05F7  2DFA               	goto	u10265
  6044  05F8  3004               	movlw	4
  6045  05F9  0257               	subwf	(??_main+2)^(0+512),w
  6046  05FA                     u10265:	
  6047  05FA  1803               	skipnc
  6048  05FB  2E1C               	goto	l9316
  6049  05FC  0023               	movlb	3	; select bank3
  6050  05FD  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6051  05FE  0024               	movlb	4	; select bank4
  6052  05FF  00D5               	movwf	??_main^(0+512)
  6053  0600  0023               	movlb	3	; select bank3
  6054  0601  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6055  0602  0024               	movlb	4	; select bank4
  6056  0603  00D6               	movwf	(??_main^(0+512)+1)
  6057  0604  0AD5               	incf	??_main^(0+512),f
  6058  0605  1903               	skipnz
  6059  0606  0AD6               	incf	(??_main^(0+512)+1),f
  6060  0607  0023               	movlb	3	; select bank3
  6061  0608  082E               	movf	_knob_4_pos^(0+384),w
  6062  0609  0024               	movlb	4	; select bank4
  6063  060A  0755               	addwf	??_main^(0+512),w
  6064  060B  00D7               	movwf	(??_main+2)^(0+512)
  6065  060C  0023               	movlb	3	; select bank3
  6066  060D  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6067  060E  0024               	movlb	4	; select bank4
  6068  060F  3D56               	addwfc	(??_main+1)^(0+512),w
  6069  0610  00D8               	movwf	(??_main+3)^(0+512)
  6070  0611  0858               	movf	(??_main+3)^(0+512),w
  6071  0612  3A80               	xorlw	128
  6072  0613  00D9               	movwf	(??_main+4)^(0+512)
  6073  0614  307F               	movlw	127
  6074  0615  0259               	subwf	(??_main+4)^(0+512),w
  6075  0616  1D03               	skipz
  6076  0617  2E1A               	goto	u10275
  6077  0618  30FD               	movlw	253
  6078  0619  0257               	subwf	(??_main+2)^(0+512),w
  6079  061A                     u10275:	
  6080  061A  1803               	skipnc
  6081  061B  2E6D               	goto	l9322
  6082  061C                     l9316:	
  6083                           
  6084                           ;main.c: 168: knob4_prev = knob_4_pos;
  6085  061C  0023               	movlb	3	; select bank3
  6086  061D  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6087  061E  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6088  061F  082E               	movf	_knob_4_pos^(0+384),w
  6089  0620  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6090                           
  6091                           ;main.c: 169: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6092  0621  3040               	movlw	64
  6093  0622  0021               	movlb	1	; select bank1
  6094  0623  00EA               	movwf	map@out_max^(0+128)
  6095  0624  3030               	movlw	48
  6096  0625  00EB               	movwf	(map@out_max+1)^(0+128)
  6097  0626  3045               	movlw	69
  6098  0627  00EC               	movwf	(map@out_max+2)^(0+128)
  6099  0628  3000               	movlw	0
  6100  0629  00E7               	movwf	map@out_min^(0+128)
  6101  062A  3034               	movlw	52
  6102  062B  00E8               	movwf	(map@out_min+1)^(0+128)
  6103  062C  3043               	movlw	67
  6104  062D  00E9               	movwf	(map@out_min+2)^(0+128)
  6105  062E  30C0               	movlw	192
  6106  062F  00E4               	movwf	map@in_max^(0+128)
  6107  0630  307F               	movlw	127
  6108  0631  00E5               	movwf	(map@in_max+1)^(0+128)
  6109  0632  3044               	movlw	68
  6110  0633  00E6               	movwf	(map@in_max+2)^(0+128)
  6111  0634  3000               	movlw	0
  6112  0635  00E1               	movwf	map@in_min^(0+128)
  6113  0636  3000               	movlw	0
  6114  0637  00E2               	movwf	(map@in_min+1)^(0+128)
  6115  0638  3000               	movlw	0
  6116  0639  00E3               	movwf	(map@in_min+2)^(0+128)
  6117  063A  0023               	movlb	3	; select bank3
  6118  063B  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6119  063C  0021               	movlb	1	; select bank1
  6120  063D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6121  063E  0023               	movlb	3	; select bank3
  6122  063F  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6123  0640  0021               	movlb	1	; select bank1
  6124  0641  00A8               	movwf	___awtoft@c^(0+128)
  6125  0642  31AF  2705  3183   	fcall	___awtoft
  6126  0645  0021               	movlb	1	; select bank1
  6127  0646  0828               	movf	?___awtoft^(0+128),w
  6128  0647  00DE               	movwf	map@x^(0+128)
  6129  0648  0829               	movf	(?___awtoft+1)^(0+128),w
  6130  0649  00DF               	movwf	(map@x+1)^(0+128)
  6131  064A  082A               	movf	(?___awtoft+2)^(0+128),w
  6132  064B  00E0               	movwf	(map@x+2)^(0+128)
  6133  064C  319A  22EA  3183   	fcall	_map
  6134  064F  0021               	movlb	1	; select bank1
  6135  0650  085E               	movf	?_map^(0+128),w
  6136  0651  0022               	movlb	2	; select bank2
  6137  0652  00A0               	movwf	___fttol@f1^(0+256)
  6138  0653  0021               	movlb	1	; select bank1
  6139  0654  085F               	movf	(?_map+1)^(0+128),w
  6140  0655  0022               	movlb	2	; select bank2
  6141  0656  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6142  0657  0021               	movlb	1	; select bank1
  6143  0658  0860               	movf	(?_map+2)^(0+128),w
  6144  0659  0022               	movlb	2	; select bank2
  6145  065A  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6146  065B  319A  2263  3183   	fcall	___fttol
  6147  065E  0022               	movlb	2	; select bank2
  6148  065F  0820               	movf	?___fttol^(0+256),w
  6149  0660  0023               	movlb	3	; select bank3
  6150  0661  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  6151  0662  0022               	movlb	2	; select bank2
  6152  0663  0821               	movf	(?___fttol^(0+256)+1),w
  6153  0664  0023               	movlb	3	; select bank3
  6154  0665  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6155  0666  0D89               	rlf	9,f
  6156  0667  3B89               	subwfb	9,f
  6157  0668  0989               	comf	9,f
  6158  0669  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6159  066A  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6160                           
  6161                           ;main.c: 170: mod_time_changed = 1;
  6162  066B  01E4               	clrf	_mod_time_changed^(0+384)
  6163  066C  0AE4               	incf	_mod_time_changed^(0+384),f
  6164  066D                     l9322:	
  6165                           
  6166                           ;main.c: 172: }
  6167                           ;main.c: 175: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6168  066D  0023               	movlb	3	; select bank3
  6169  066E  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6170  066F  0024               	movlb	4	; select bank4
  6171  0670  00D5               	movwf	??_main^(0+512)
  6172  0671  0023               	movlb	3	; select bank3
  6173  0672  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6174  0673  0024               	movlb	4	; select bank4
  6175  0674  00D6               	movwf	(??_main^(0+512)+1)
  6176  0675  0AD5               	incf	??_main^(0+512),f
  6177  0676  1903               	skipnz
  6178  0677  0AD6               	incf	(??_main^(0+512)+1),f
  6179  0678  0023               	movlb	3	; select bank3
  6180  0679  0830               	movf	_knob_5_pos^(0+384),w
  6181  067A  0024               	movlb	4	; select bank4
  6182  067B  0755               	addwf	??_main^(0+512),w
  6183  067C  00D7               	movwf	(??_main+2)^(0+512)
  6184  067D  0023               	movlb	3	; select bank3
  6185  067E  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6186  067F  0024               	movlb	4	; select bank4
  6187  0680  3D56               	addwfc	(??_main+1)^(0+512),w
  6188  0681  00D8               	movwf	(??_main+3)^(0+512)
  6189  0682  0858               	movf	(??_main+3)^(0+512),w
  6190  0683  3A80               	xorlw	128
  6191  0684  00D9               	movwf	(??_main+4)^(0+512)
  6192  0685  3080               	movlw	128
  6193  0686  0259               	subwf	(??_main+4)^(0+512),w
  6194  0687  1D03               	skipz
  6195  0688  2E8B               	goto	u10285
  6196  0689  3004               	movlw	4
  6197  068A  0257               	subwf	(??_main+2)^(0+512),w
  6198  068B                     u10285:	
  6199  068B  1803               	skipnc
  6200  068C  2EAD               	goto	l9326
  6201  068D  0023               	movlb	3	; select bank3
  6202  068E  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6203  068F  0024               	movlb	4	; select bank4
  6204  0690  00D5               	movwf	??_main^(0+512)
  6205  0691  0023               	movlb	3	; select bank3
  6206  0692  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6207  0693  0024               	movlb	4	; select bank4
  6208  0694  00D6               	movwf	(??_main^(0+512)+1)
  6209  0695  0AD5               	incf	??_main^(0+512),f
  6210  0696  1903               	skipnz
  6211  0697  0AD6               	incf	(??_main^(0+512)+1),f
  6212  0698  0023               	movlb	3	; select bank3
  6213  0699  0830               	movf	_knob_5_pos^(0+384),w
  6214  069A  0024               	movlb	4	; select bank4
  6215  069B  0755               	addwf	??_main^(0+512),w
  6216  069C  00D7               	movwf	(??_main+2)^(0+512)
  6217  069D  0023               	movlb	3	; select bank3
  6218  069E  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6219  069F  0024               	movlb	4	; select bank4
  6220  06A0  3D56               	addwfc	(??_main+1)^(0+512),w
  6221  06A1  00D8               	movwf	(??_main+3)^(0+512)
  6222  06A2  0858               	movf	(??_main+3)^(0+512),w
  6223  06A3  3A80               	xorlw	128
  6224  06A4  00D9               	movwf	(??_main+4)^(0+512)
  6225  06A5  307F               	movlw	127
  6226  06A6  0259               	subwf	(??_main+4)^(0+512),w
  6227  06A7  1D03               	skipz
  6228  06A8  2EAB               	goto	u10295
  6229  06A9  30FD               	movlw	253
  6230  06AA  0257               	subwf	(??_main+2)^(0+512),w
  6231  06AB                     u10295:	
  6232  06AB  1803               	skipnc
  6233  06AC  2EF7               	goto	l9330
  6234  06AD                     l9326:	
  6235                           
  6236                           ;main.c: 176: knob5_prev = knob_5_pos;
  6237  06AD  0023               	movlb	3	; select bank3
  6238  06AE  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6239  06AF  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6240  06B0  0830               	movf	_knob_5_pos^(0+384),w
  6241  06B1  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6242                           
  6243                           ;main.c: 177: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6244  06B2  3000               	movlw	0
  6245  06B3  0021               	movlb	1	; select bank1
  6246  06B4  00EA               	movwf	map@out_max^(0+128)
  6247  06B5  3000               	movlw	0
  6248  06B6  00EB               	movwf	(map@out_max+1)^(0+128)
  6249  06B7  3000               	movlw	0
  6250  06B8  00EC               	movwf	(map@out_max+2)^(0+128)
  6251  06B9  3060               	movlw	96
  6252  06BA  00E7               	movwf	map@out_min^(0+128)
  6253  06BB  309F               	movlw	159
  6254  06BC  00E8               	movwf	(map@out_min+1)^(0+128)
  6255  06BD  3044               	movlw	68
  6256  06BE  00E9               	movwf	(map@out_min+2)^(0+128)
  6257  06BF  30C0               	movlw	192
  6258  06C0  00E4               	movwf	map@in_max^(0+128)
  6259  06C1  307F               	movlw	127
  6260  06C2  00E5               	movwf	(map@in_max+1)^(0+128)
  6261  06C3  3044               	movlw	68
  6262  06C4  00E6               	movwf	(map@in_max+2)^(0+128)
  6263  06C5  3000               	movlw	0
  6264  06C6  00E1               	movwf	map@in_min^(0+128)
  6265  06C7  3000               	movlw	0
  6266  06C8  00E2               	movwf	(map@in_min+1)^(0+128)
  6267  06C9  3000               	movlw	0
  6268  06CA  00E3               	movwf	(map@in_min+2)^(0+128)
  6269  06CB  0023               	movlb	3	; select bank3
  6270  06CC  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6271  06CD  0021               	movlb	1	; select bank1
  6272  06CE  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6273  06CF  0023               	movlb	3	; select bank3
  6274  06D0  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6275  06D1  0021               	movlb	1	; select bank1
  6276  06D2  00A8               	movwf	___awtoft@c^(0+128)
  6277  06D3  31AF  2705  3183   	fcall	___awtoft
  6278  06D6  0021               	movlb	1	; select bank1
  6279  06D7  0828               	movf	?___awtoft^(0+128),w
  6280  06D8  00DE               	movwf	map@x^(0+128)
  6281  06D9  0829               	movf	(?___awtoft+1)^(0+128),w
  6282  06DA  00DF               	movwf	(map@x+1)^(0+128)
  6283  06DB  082A               	movf	(?___awtoft+2)^(0+128),w
  6284  06DC  00E0               	movwf	(map@x+2)^(0+128)
  6285  06DD  319A  22EA  3183   	fcall	_map
  6286  06E0  0021               	movlb	1	; select bank1
  6287  06E1  085E               	movf	?_map^(0+128),w
  6288  06E2  0022               	movlb	2	; select bank2
  6289  06E3  00A0               	movwf	___fttol@f1^(0+256)
  6290  06E4  0021               	movlb	1	; select bank1
  6291  06E5  085F               	movf	(?_map+1)^(0+128),w
  6292  06E6  0022               	movlb	2	; select bank2
  6293  06E7  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6294  06E8  0021               	movlb	1	; select bank1
  6295  06E9  0860               	movf	(?_map+2)^(0+128),w
  6296  06EA  0022               	movlb	2	; select bank2
  6297  06EB  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6298  06EC  319A  2263  3183   	fcall	___fttol
  6299  06EF  0022               	movlb	2	; select bank2
  6300  06F0  0821               	movf	(?___fttol^(0+256)+1),w
  6301  06F1  0024               	movlb	4	; select bank4
  6302  06F2  00C2               	movwf	(_adjusted_pot_value+1)^(0+512)
  6303  06F3  0022               	movlb	2	; select bank2
  6304  06F4  0820               	movf	?___fttol^(0+256),w
  6305  06F5  0024               	movlb	4	; select bank4
  6306  06F6  00C1               	movwf	_adjusted_pot_value^(0+512)
  6307  06F7                     l9330:	
  6308                           
  6309                           ;main.c: 178: }
  6310                           ;main.c: 183: if (mod_time_changed == 1) {
  6311  06F7  0023               	movlb	3	; select bank3
  6312  06F8  0364               	decf	_mod_time_changed^(0+384),w
  6313  06F9  1D03               	btfss	3,2
  6314  06FA  2F31               	goto	l9342
  6315                           
  6316                           ;main.c: 185: delay_time = baseline_mod_time;
  6317  06FB  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
  6318  06FC  0020               	movlb	0	; select bank0
  6319  06FD  00D5               	movwf	_delay_time+3	;volatile
  6320  06FE  0023               	movlb	3	; select bank3
  6321  06FF  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
  6322  0700  0020               	movlb	0	; select bank0
  6323  0701  00D4               	movwf	_delay_time+2	;volatile
  6324  0702  0023               	movlb	3	; select bank3
  6325  0703  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6326  0704  0020               	movlb	0	; select bank0
  6327  0705  00D3               	movwf	_delay_time+1	;volatile
  6328  0706  0023               	movlb	3	; select bank3
  6329  0707  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6330  0708  0020               	movlb	0	; select bank0
  6331  0709  00D2               	movwf	_delay_time	;volatile
  6332                           
  6333                           ;main.c: 186: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6334  070A  0023               	movlb	3	; select bank3
  6335  070B  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6336  070C  0022               	movlb	2	; select bank2
  6337  070D  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6338  070E  0023               	movlb	3	; select bank3
  6339  070F  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6340  0710  0022               	movlb	2	; select bank2
  6341  0711  00AE               	movwf	set_subdivision@x^(0+256)
  6342  0712  0020               	movlb	0	; select bank0
  6343  0713  085B               	movf	_top_push_state+1,w
  6344  0714  0022               	movlb	2	; select bank2
  6345  0715  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6346  0716  0020               	movlb	0	; select bank0
  6347  0717  085A               	movf	_top_push_state,w
  6348  0718  0022               	movlb	2	; select bank2
  6349  0719  00B0               	movwf	set_subdivision@y^(0+256)
  6350  071A  319B  2375  3183   	fcall	_set_subdivision
  6351  071D  0022               	movlb	2	; select bank2
  6352  071E  082E               	movf	?_set_subdivision^(0+256),w
  6353  071F  0020               	movlb	0	; select bank0
  6354  0720  00D2               	movwf	_delay_time	;volatile
  6355  0721  0022               	movlb	2	; select bank2
  6356  0722  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6357  0723  0020               	movlb	0	; select bank0
  6358  0724  00D3               	movwf	_delay_time+1	;volatile
  6359  0725  0D89               	rlf	9,f
  6360  0726  3B89               	subwfb	9,f
  6361  0727  0989               	comf	9,f
  6362  0728  00D4               	movwf	_delay_time+2	;volatile
  6363  0729  00D5               	movwf	_delay_time+3	;volatile
  6364                           
  6365                           ;main.c: 187: getModulationDelayTime();
  6366  072A  31A5  2590  3183   	fcall	_getModulationDelayTime
  6367                           
  6368                           ;main.c: 188: modulation_changed = 1;
  6369  072D  0023               	movlb	3	; select bank3
  6370  072E  01C2               	clrf	_modulation_changed^(0+384)
  6371  072F  0AC2               	incf	_modulation_changed^(0+384),f
  6372                           
  6373                           ;main.c: 189: mod_time_changed = 0;
  6374  0730  01E4               	clrf	_mod_time_changed^(0+384)
  6375  0731                     l9342:	
  6376                           
  6377                           ;main.c: 190: }
  6378                           ;main.c: 193: if (modulation_changed == 1) {
  6379  0731  0342               	decf	_modulation_changed^(0+384),w
  6380  0732  1D03               	btfss	3,2
  6381  0733  2B82               	goto	l9242
  6382                           
  6383                           ;main.c: 194: updateModulationArray();
  6384  0734  318D  25DD  3183   	fcall	_updateModulationArray
  6385                           
  6386                           ;main.c: 195: isInitialized = 1;
  6387  0737  0023               	movlb	3	; select bank3
  6388  0738  01BE               	clrf	_isInitialized^(0+384)
  6389  0739  0ABE               	incf	_isInitialized^(0+384),f
  6390  073A  2B82               	goto	l9242
  6391  073B                     __end_of_main:	
  6392                           
  6393                           	psect	text1
  6394  1800                     __ptext1:	
  6395 ;; *************** function _update_selectMode *****************
  6396 ;; Defined at:
  6397 ;;		line 139 in file "tactiles.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  1    wreg      void 
  6404 ;; Registers used:
  6405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6413 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6414 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6415 ;;Total ram usage:        1 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    5
  6418 ;; This function calls:
  6419 ;;		_setExpressionDisplay
  6420 ;;		_setPresetDisplay
  6421 ;; This function is called by:
  6422 ;;		_main
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           
  6427                           ;psect for function _update_selectMode
  6428  1800                     _update_selectMode:	
  6429                           
  6430                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6431                           
  6432                           ;incstack = 0
  6433                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6434  1800  0020               	movlb	0	; select bank0
  6435  1801  0850               	movf	_mode2_state,w
  6436  1802  1D03               	btfss	3,2
  6437  1803  2807               	goto	l1004
  6438  1804  0351               	decf	_presetSaveMode,w
  6439  1805  1D03               	btfss	3,2
  6440  1806  0008               	return
  6441  1807                     l1004:	
  6442                           ;tactiles.c: 142: return;
  6443                           
  6444                           
  6445                           ;tactiles.c: 143: }
  6446                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6447  1807  1B8F               	btfsc	15,7	;volatile
  6448  1808  2855               	goto	l8840
  6449                           
  6450                           ;tactiles.c: 145: debounce_mode1++;
  6451  1809  3001               	movlw	1
  6452  180A  0024               	movlb	4	; select bank4
  6453  180B  07C7               	addwf	_debounce_mode1^(0+512),f
  6454  180C  3000               	movlw	0
  6455  180D  3DC8               	addwfc	(_debounce_mode1+1)^(0+512),f
  6456                           
  6457                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6458  180E  0848               	movf	(_debounce_mode1+1)^(0+512),w
  6459  180F  3A80               	xorlw	128
  6460  1810  0021               	movlb	1	; select bank1
  6461  1811  00A7               	movwf	??_update_selectMode^(0+128)
  6462  1812  3080               	movlw	128
  6463  1813  0227               	subwf	??_update_selectMode^(0+128),w
  6464  1814  1D03               	skipz
  6465  1815  2819               	goto	u9405
  6466  1816  301A               	movlw	26
  6467  1817  0024               	movlb	4	; select bank4
  6468  1818  0247               	subwf	_debounce_mode1^(0+512),w
  6469  1819                     u9405:	
  6470  1819  1C03               	skipc
  6471  181A  0008               	return
  6472                           
  6473                           ;tactiles.c: 147: debounce_mode1 = 25;
  6474  181B  3019               	movlw	25
  6475  181C  0024               	movlb	4	; select bank4
  6476  181D  00C7               	movwf	_debounce_mode1^(0+512)
  6477  181E  3000               	movlw	0
  6478  181F  00C8               	movwf	(_debounce_mode1^(0+512)+1)
  6479                           
  6480                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6481  1820  0020               	movlb	0	; select bank0
  6482  1821  0850               	movf	_mode2_state,w
  6483  1822  0023               	movlb	3	; select bank3
  6484  1823  0665               	xorwf	_presetModeCnst^(0+384),w
  6485  1824  1903               	skipnz
  6486  1825  282A               	goto	l8822
  6487  1826  0020               	movlb	0	; select bank0
  6488  1827  0351               	decf	_presetSaveMode,w
  6489  1828  1D03               	btfss	3,2
  6490  1829  283B               	goto	l8830
  6491  182A                     l8822:	
  6492                           
  6493                           ;tactiles.c: 149: presetChannel++;
  6494  182A  3001               	movlw	1
  6495  182B  0021               	movlb	1	; select bank1
  6496  182C  00A7               	movwf	??_update_selectMode^(0+128)
  6497  182D  0827               	movf	??_update_selectMode^(0+128),w
  6498  182E  0022               	movlb	2	; select bank2
  6499  182F  07EF               	addwf	_presetChannel^(0+256),f
  6500                           
  6501                           ;tactiles.c: 150: if (presetChannel > 10) {
  6502  1830  300B               	movlw	11
  6503  1831  026F               	subwf	_presetChannel^(0+256),w
  6504  1832  1C03               	skipc
  6505  1833  2836               	goto	l8828
  6506                           
  6507                           ;tactiles.c: 151: presetChannel = 1;
  6508  1834  01EF               	clrf	_presetChannel^(0+256)
  6509  1835  0AEF               	incf	_presetChannel^(0+256),f
  6510  1836                     l8828:	
  6511                           
  6512                           ;tactiles.c: 152: }
  6513                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6514  1836  086F               	movf	_presetChannel^(0+256),w
  6515  1837  31A1  2153  3198   	fcall	_setPresetDisplay
  6516                           
  6517                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6518  183A  2851               	goto	l1015
  6519  183B                     l8830:	
  6520  183B  0020               	movlb	0	; select bank0
  6521  183C  0850               	movf	_mode2_state,w
  6522  183D  0023               	movlb	3	; select bank3
  6523  183E  0662               	xorwf	_expressModeCnst^(0+384),w
  6524  183F  1D03               	skipz
  6525  1840  2851               	goto	l1015
  6526                           
  6527                           ;tactiles.c: 155: expressionChannel++;
  6528  1841  3001               	movlw	1
  6529  1842  0021               	movlb	1	; select bank1
  6530  1843  00A7               	movwf	??_update_selectMode^(0+128)
  6531  1844  0827               	movf	??_update_selectMode^(0+128),w
  6532  1845  0023               	movlb	3	; select bank3
  6533  1846  07E3               	addwf	_expressionChannel^(0+384),f
  6534                           
  6535                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6536  1847  3006               	movlw	6
  6537  1848  0263               	subwf	_expressionChannel^(0+384),w
  6538  1849  1C03               	skipc
  6539  184A  284D               	goto	l8838
  6540                           
  6541                           ;tactiles.c: 157: expressionChannel = 1;
  6542  184B  01E3               	clrf	_expressionChannel^(0+384)
  6543  184C  0AE3               	incf	_expressionChannel^(0+384),f
  6544  184D                     l8838:	
  6545                           
  6546                           ;tactiles.c: 158: }
  6547                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6548  184D  0863               	movf	_expressionChannel^(0+384),w
  6549  184E  31AE  2604  3198   	fcall	_setExpressionDisplay
  6550  1851                     l1015:	
  6551                           ;tactiles.c: 160: }
  6552                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6553                           
  6554  1851  0020               	movlb	0	; select bank0
  6555  1852  1B8F               	btfsc	15,7	;volatile
  6556  1853  0008               	return
  6557  1854  2851               	goto	l1015
  6558  1855                     l8840:	
  6559                           ;tactiles.c: 168: }
  6560                           ;tactiles.c: 169: }
  6561                           ;tactiles.c: 170: } else {
  6562                           
  6563                           
  6564                           ;tactiles.c: 171: debounce_mode1 = 0;
  6565  1855  0024               	movlb	4	; select bank4
  6566  1856  01C7               	clrf	_debounce_mode1^(0+512)
  6567  1857  01C8               	clrf	(_debounce_mode1+1)^(0+512)
  6568  1858  0008               	return
  6569  1859                     __end_of_update_selectMode:	
  6570                           
  6571                           	psect	text2
  6572  211B                     __ptext2:	
  6573 ;; *************** function _update_mode *****************
  6574 ;; Defined at:
  6575 ;;		line 87 in file "tactiles.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;		None
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;		None
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  1    wreg      void 
  6582 ;; Registers used:
  6583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6591 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6592 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6593 ;;Total ram usage:        1 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    6
  6596 ;; This function calls:
  6597 ;;		_resetRingLEDs
  6598 ;;		_setPedalMode
  6599 ;; This function is called by:
  6600 ;;		_main
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           
  6605                           ;psect for function _update_mode
  6606  211B                     _update_mode:	
  6607                           
  6608                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6609                           
  6610                           ;incstack = 0
  6611                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6612  211B  0020               	movlb	0	; select bank0
  6613  211C  180E               	btfsc	14,0	;volatile
  6614  211D  294F               	goto	l8808
  6615                           
  6616                           ;tactiles.c: 95: debounce_mode2++;
  6617  211E  3001               	movlw	1
  6618  211F  0024               	movlb	4	; select bank4
  6619  2120  07C9               	addwf	_debounce_mode2^(0+512),f
  6620  2121  3000               	movlw	0
  6621  2122  3DCA               	addwfc	(_debounce_mode2+1)^(0+512),f
  6622                           
  6623                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6624  2123  084A               	movf	(_debounce_mode2+1)^(0+512),w
  6625  2124  3A80               	xorlw	128
  6626  2125  0021               	movlb	1	; select bank1
  6627  2126  00A7               	movwf	??_update_mode^(0+128)
  6628  2127  3080               	movlw	128
  6629  2128  0227               	subwf	??_update_mode^(0+128),w
  6630  2129  1D03               	skipz
  6631  212A  292E               	goto	u9335
  6632  212B  301A               	movlw	26
  6633  212C  0024               	movlb	4	; select bank4
  6634  212D  0249               	subwf	_debounce_mode2^(0+512),w
  6635  212E                     u9335:	
  6636  212E  1C03               	skipc
  6637  212F  0008               	return
  6638                           
  6639                           ;tactiles.c: 97: debounce_mode2 = 25;
  6640  2130  3019               	movlw	25
  6641  2131  0024               	movlb	4	; select bank4
  6642  2132  00C9               	movwf	_debounce_mode2^(0+512)
  6643  2133  3000               	movlw	0
  6644  2134  00CA               	movwf	(_debounce_mode2^(0+512)+1)
  6645                           
  6646                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6647  2135  0020               	movlb	0	; select bank0
  6648  2136  0351               	decf	_presetSaveMode,w
  6649  2137  1D03               	btfss	3,2
  6650  2138  293E               	goto	l8800
  6651                           
  6652                           ;tactiles.c: 100: presetSaveMode = 0;
  6653  2139  01D1               	clrf	_presetSaveMode
  6654                           
  6655                           ;tactiles.c: 101: resetRingLEDs();
  6656  213A  31AE  261C  31A1   	fcall	_resetRingLEDs
  6657                           
  6658                           ;tactiles.c: 102: } else {
  6659  213D  2948               	goto	l8806
  6660  213E                     l8800:	
  6661                           
  6662                           ;tactiles.c: 103: mode2_state++;
  6663  213E  3001               	movlw	1
  6664  213F  0021               	movlb	1	; select bank1
  6665  2140  00A7               	movwf	??_update_mode^(0+128)
  6666  2141  0827               	movf	??_update_mode^(0+128),w
  6667  2142  0020               	movlb	0	; select bank0
  6668  2143  07D0               	addwf	_mode2_state,f
  6669                           
  6670                           ;tactiles.c: 104: if (mode2_state > 2) {
  6671  2144  3003               	movlw	3
  6672  2145  0250               	subwf	_mode2_state,w
  6673  2146  1803               	btfsc	3,0
  6674                           
  6675                           ;tactiles.c: 105: mode2_state = 0;
  6676  2147  01D0               	clrf	_mode2_state
  6677  2148                     l8806:	
  6678                           
  6679                           ;tactiles.c: 106: }
  6680                           ;tactiles.c: 107: }
  6681                           ;tactiles.c: 109: setPedalMode();
  6682  2148  31A0  2000  31A1   	fcall	_setPedalMode
  6683  214B                     l989:	
  6684                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6685                           
  6686  214B  0020               	movlb	0	; select bank0
  6687  214C  180E               	btfsc	14,0	;volatile
  6688  214D  0008               	return
  6689  214E  294B               	goto	l989
  6690  214F                     l8808:	
  6691                           ;tactiles.c: 111: }
  6692                           ;tactiles.c: 112: }
  6693                           ;tactiles.c: 113: } else {
  6694                           
  6695                           
  6696                           ;tactiles.c: 114: debounce_mode2 = 0;
  6697  214F  0024               	movlb	4	; select bank4
  6698  2150  01C9               	clrf	_debounce_mode2^(0+512)
  6699  2151  01CA               	clrf	(_debounce_mode2+1)^(0+512)
  6700  2152  0008               	return
  6701  2153                     __end_of_update_mode:	
  6702                           
  6703                           	psect	text3
  6704  0BF6                     __ptext3:	
  6705 ;; *************** function _updateSwitchTap *****************
  6706 ;; Defined at:
  6707 ;;		line 48 in file "SwitchTap.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6712 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  1    wreg      void 
  6715 ;; Registers used:
  6716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6723 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6724 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6725 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6726 ;;Total ram usage:        9 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    8
  6729 ;; This function calls:
  6730 ;;		___aldiv
  6731 ;;		_setDoublePressState
  6732 ;;		_setLongTapState
  6733 ;; This function is called by:
  6734 ;;		_main
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           
  6739                           ;psect for function _updateSwitchTap
  6740  0BF6                     _updateSwitchTap:	
  6741                           
  6742                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6743                           
  6744                           ;incstack = 0
  6745                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6746  0BF6  0021               	movlb	1	; select bank1
  6747  0BF7  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6748                           
  6749                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6750  0BF8  0020               	movlb	0	; select bank0
  6751  0BF9  1810               	btfsc	16,0	;volatile
  6752  0BFA  2C02               	goto	l8964
  6753                           
  6754                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6755  0BFB  0022               	movlb	2	; select bank2
  6756  0BFC  086E               	movf	_switchTap_pressed^(0+256),w
  6757  0BFD  1903               	btfsc	3,2
  6758  0BFE  2C0D               	goto	l1418
  6759                           
  6760                           ;SwitchTap.c: 59: switchTap_pressed--;
  6761  0BFF  3001               	movlw	1
  6762  0C00  02EE               	subwf	_switchTap_pressed^(0+256),f
  6763                           
  6764                           ;SwitchTap.c: 60: }
  6765                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6766  0C01  2C0D               	goto	l1418
  6767  0C02                     l8964:	
  6768  0C02  3019               	movlw	25
  6769  0C03  0022               	movlb	2	; select bank2
  6770  0C04  026E               	subwf	_switchTap_pressed^(0+256),w
  6771  0C05  1803               	skipnc
  6772  0C06  2C0D               	goto	l1418
  6773                           
  6774                           ;SwitchTap.c: 62: switchTap_pressed++;
  6775  0C07  3001               	movlw	1
  6776  0C08  0021               	movlb	1	; select bank1
  6777  0C09  00BC               	movwf	??_updateSwitchTap^(0+128)
  6778  0C0A  083C               	movf	??_updateSwitchTap^(0+128),w
  6779  0C0B  0022               	movlb	2	; select bank2
  6780  0C0C  07EE               	addwf	_switchTap_pressed^(0+256),f
  6781  0C0D                     l1418:	
  6782                           
  6783                           ;SwitchTap.c: 63: }
  6784                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6785  0C0D  086E               	movf	_switchTap_pressed^(0+256),w
  6786  0C0E  1D03               	btfss	3,2
  6787  0C0F  2DC3               	goto	l9048
  6788                           
  6789                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6790  0C10  0020               	movlb	0	; select bank0
  6791  0C11  1BC7               	btfsc	_tap_timer+3,7	;volatile
  6792  0C12  2C98               	goto	l9008
  6793  0C13  0847               	movf	_tap_timer+3,w	;volatile
  6794  0C14  1D03               	btfss	3,2
  6795  0C15  2C1F               	goto	l8970
  6796  0C16  0846               	movf	_tap_timer+2,w	;volatile
  6797  0C17  1D03               	btfss	3,2
  6798  0C18  2C1F               	goto	l8970
  6799  0C19  301B               	movlw	27
  6800  0C1A  0244               	subwf	_tap_timer,w	;volatile
  6801  0C1B  3006               	movlw	6
  6802  0C1C  3B45               	subwfb	_tap_timer+1,w	;volatile
  6803  0C1D  1C03               	btfss	3,0
  6804  0C1E  2C98               	goto	l9008
  6805  0C1F                     l8970:	
  6806                           
  6807                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6808  0C1F  0023               	movlb	3	; select bank3
  6809  0C20  0345               	decf	_switchTap_down^(0+384),w
  6810  0C21  1903               	btfsc	3,2
  6811  0C22  2C5E               	goto	l8986
  6812                           
  6813                           ;SwitchTap.c: 78: switchTap_down = 1;
  6814  0C23  01C5               	clrf	_switchTap_down^(0+384)
  6815  0C24  0AC5               	incf	_switchTap_down^(0+384),f
  6816                           
  6817                           ;SwitchTap.c: 79: tap_timer = 0;
  6818  0C25  3000               	movlw	0
  6819  0C26  0020               	movlb	0	; select bank0
  6820  0C27  00C7               	movwf	_tap_timer+3	;volatile
  6821  0C28  3000               	movlw	0
  6822  0C29  00C6               	movwf	_tap_timer+2	;volatile
  6823  0C2A  3000               	movlw	0
  6824  0C2B  00C5               	movwf	_tap_timer+1	;volatile
  6825  0C2C  3000               	movlw	0
  6826  0C2D  00C4               	movwf	_tap_timer	;volatile
  6827                           
  6828                           ;SwitchTap.c: 80: tap_iteration = 1;
  6829  0C2E  3001               	movlw	1
  6830  0C2F  0023               	movlb	3	; select bank3
  6831  0C30  00DD               	movwf	_tap_iteration^(0+384)
  6832  0C31  3000               	movlw	0
  6833  0C32  00DE               	movwf	(_tap_iteration^(0+384)+1)
  6834                           
  6835                           ;SwitchTap.c: 81: tap_total = 0;
  6836  0C33  3000               	movlw	0
  6837  0C34  0024               	movlb	4	; select bank4
  6838  0C35  00C0               	movwf	(_tap_total+3)^(0+512)
  6839  0C36  3000               	movlw	0
  6840  0C37  00BF               	movwf	(_tap_total+2)^(0+512)
  6841  0C38  3000               	movlw	0
  6842  0C39  00BE               	movwf	(_tap_total+1)^(0+512)
  6843  0C3A  3000               	movlw	0
  6844  0C3B  00BD               	movwf	_tap_total^(0+512)
  6845                           
  6846                           ;SwitchTap.c: 82: mod_time_changed = 0;
  6847  0C3C  0023               	movlb	3	; select bank3
  6848  0C3D  01E4               	clrf	_mod_time_changed^(0+384)
  6849                           
  6850                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6851  0C3E  0021               	movlb	1	; select bank1
  6852  0C3F  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6853  0C40  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6854  0C41                     l8984:	
  6855  0C41  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6856  0C42  0020               	movlb	0	; select bank0
  6857  0C43  025E               	subwf	_num_taps,w
  6858  0C44  1C03               	btfss	3,0
  6859  0C45  2C5E               	goto	l8986
  6860                           
  6861                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6862  0C46  0021               	movlb	1	; select bank1
  6863  0C47  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6864  0C48  00BC               	movwf	??_updateSwitchTap^(0+128)
  6865  0C49  3001               	movlw	1
  6866  0C4A                     u9775:	
  6867  0C4A  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6868  0C4B  3EFF               	addlw	-1
  6869  0C4C  1D03               	skipz
  6870  0C4D  2C4A               	goto	u9775
  6871  0C4E  353C               	lslf	??_updateSwitchTap^(0+128),w
  6872  0C4F  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6873  0C50  0086               	movwf	6
  6874  0C51  3002               	movlw	2	; select bank4/5
  6875  0C52  0087               	movwf	7
  6876  0C53  3000               	movlw	0
  6877  0C54  3FC0               	movwi [0]fsr1
  6878  0C55  3000               	movlw	0
  6879  0C56  3FC1               	movwi [1]fsr1
  6880  0C57  3FC2               	movwi [2]fsr1
  6881  0C58  3FC3               	movwi [3]fsr1
  6882  0C59  3001               	movlw	1
  6883  0C5A  00BC               	movwf	??_updateSwitchTap^(0+128)
  6884  0C5B  083C               	movf	??_updateSwitchTap^(0+128),w
  6885  0C5C  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6886  0C5D  2C41               	goto	l8984
  6887  0C5E                     l8986:	
  6888                           
  6889                           ;SwitchTap.c: 86: }
  6890                           ;SwitchTap.c: 87: }
  6891                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6892  0C5E  0022               	movlb	2	; select bank2
  6893  0C5F  086B               	movf	_longTap_start^(0+256),w
  6894  0C60  1D03               	btfss	3,2
  6895  0C61  2C69               	goto	l8992
  6896                           
  6897                           ;SwitchTap.c: 91: longTap_start = 1;
  6898  0C62  01EB               	clrf	_longTap_start^(0+256)
  6899  0C63  0AEB               	incf	_longTap_start^(0+256),f
  6900                           
  6901                           ;SwitchTap.c: 92: longTap_state = 0;
  6902  0C64  0020               	movlb	0	; select bank0
  6903  0C65  01DD               	clrf	_longTap_state	;volatile
  6904                           
  6905                           ;SwitchTap.c: 93: longTap_timer = 0;
  6906  0C66  0023               	movlb	3	; select bank3
  6907  0C67  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  6908  0C68  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6909  0C69                     l8992:	
  6910                           
  6911                           ;SwitchTap.c: 94: }
  6912                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6913  0C69  0020               	movlb	0	; select bank0
  6914  0C6A  0859               	movf	_long_press_limit+1,w
  6915  0C6B  0023               	movlb	3	; select bank3
  6916  0C6C  0235               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6917  0C6D  1D03               	skipz
  6918  0C6E  2C73               	goto	u9805
  6919  0C6F  0020               	movlb	0	; select bank0
  6920  0C70  0858               	movf	_long_press_limit,w
  6921  0C71  0023               	movlb	3	; select bank3
  6922  0C72  0234               	subwf	_longTap_timer^(0+384),w	;volatile
  6923  0C73                     u9805:	
  6924  0C73  1C03               	skipc
  6925  0C74  0008               	return
  6926  0C75  0020               	movlb	0	; select bank0
  6927  0C76  085D               	movf	_longTap_state,w	;volatile
  6928  0C77  1D03               	btfss	3,2
  6929  0C78  0008               	return
  6930  0C79  084E               	movf	_doubleTap_state,w	;volatile
  6931  0C7A  1D03               	btfss	3,2
  6932  0C7B  0008               	return
  6933                           
  6934                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6935  0C7C  0859               	movf	_long_press_limit+1,w
  6936  0C7D  0023               	movlb	3	; select bank3
  6937  0C7E  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6938  0C7F  0020               	movlb	0	; select bank0
  6939  0C80  0858               	movf	_long_press_limit,w
  6940  0C81  0023               	movlb	3	; select bank3
  6941  0C82  00B4               	movwf	_longTap_timer^(0+384)	;volatile
  6942                           
  6943                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6944  0C83  0022               	movlb	2	; select bank2
  6945  0C84  120D               	bcf	13,4	;volatile
  6946                           
  6947                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6948  0C85  036A               	decf	_longBypass_start^(0+256),w
  6949  0C86  1903               	btfsc	3,2
  6950  0C87  2C90               	goto	l9006
  6951                           
  6952                           ;SwitchTap.c: 104: setLongTapState(1);
  6953  0C88  3001               	movlw	1
  6954  0C89  0021               	movlb	1	; select bank1
  6955  0C8A  00A0               	movwf	setLongTapState@f_state^(0+128)
  6956  0C8B  3000               	movlw	0
  6957  0C8C  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6958  0C8D  31AE  2636         	fcall	_setLongTapState
  6959                           
  6960                           ;SwitchTap.c: 105: } else {
  6961  0C8F  0008               	return
  6962  0C90                     l9006:	
  6963                           
  6964                           ;SwitchTap.c: 106: setDoublePressState(1);
  6965  0C90  3001               	movlw	1
  6966  0C91  0021               	movlb	1	; select bank1
  6967  0C92  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6968  0C93  3000               	movlw	0
  6969  0C94  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6970  0C95  31A2  227E         	fcall	_setDoublePressState
  6971                           
  6972                           ;SwitchTap.c: 107: }
  6973                           ;SwitchTap.c: 108: }
  6974                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6975  0C97  0008               	return
  6976  0C98                     l9008:	
  6977  0C98  0020               	movlb	0	; select bank0
  6978  0C99  1BC7               	btfsc	_tap_timer+3,7	;volatile
  6979  0C9A  2CA7               	goto	l9010
  6980  0C9B  0847               	movf	_tap_timer+3,w	;volatile
  6981  0C9C  1D03               	btfss	3,2
  6982  0C9D  0008               	return
  6983  0C9E  0846               	movf	_tap_timer+2,w	;volatile
  6984  0C9F  1D03               	btfss	3,2
  6985  0CA0  0008               	return
  6986  0CA1  301B               	movlw	27
  6987  0CA2  0244               	subwf	_tap_timer,w	;volatile
  6988  0CA3  3006               	movlw	6
  6989  0CA4  3B45               	subwfb	_tap_timer+1,w	;volatile
  6990  0CA5  1803               	btfsc	3,0
  6991  0CA6  0008               	return
  6992  0CA7                     l9010:	
  6993  0CA7  085D               	movf	_longTap_state,w	;volatile
  6994  0CA8  1D03               	btfss	3,2
  6995  0CA9  0008               	return
  6996  0CAA  0023               	movlb	3	; select bank3
  6997  0CAB  0345               	decf	_switchTap_down^(0+384),w
  6998  0CAC  1903               	btfsc	3,2
  6999  0CAD  0008               	return
  7000                           
  7001                           ;SwitchTap.c: 112: switchTap_down = 1;
  7002  0CAE  01C5               	clrf	_switchTap_down^(0+384)
  7003  0CAF  0AC5               	incf	_switchTap_down^(0+384),f
  7004                           
  7005                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7006  0CB0  0020               	movlb	0	; select bank0
  7007  0CB1  1BC7               	btfsc	_tap_timer+3,7	;volatile
  7008  0CB2  2CC7               	goto	l1432
  7009  0CB3  0847               	movf	_tap_timer+3,w	;volatile
  7010  0CB4  1D03               	btfss	3,2
  7011  0CB5  2CBF               	goto	l9018
  7012  0CB6  0846               	movf	_tap_timer+2,w	;volatile
  7013  0CB7  1D03               	btfss	3,2
  7014  0CB8  2CBF               	goto	l9018
  7015  0CB9  3094               	movlw	148
  7016  0CBA  0244               	subwf	_tap_timer,w	;volatile
  7017  0CBB  3004               	movlw	4
  7018  0CBC  3B45               	subwfb	_tap_timer+1,w	;volatile
  7019  0CBD  1C03               	btfss	3,0
  7020  0CBE  2CC7               	goto	l1432
  7021  0CBF                     l9018:	
  7022                           
  7023                           ;SwitchTap.c: 114: tap_timer = 1172;
  7024  0CBF  3000               	movlw	0
  7025  0CC0  00C7               	movwf	_tap_timer+3	;volatile
  7026  0CC1  3000               	movlw	0
  7027  0CC2  00C6               	movwf	_tap_timer+2	;volatile
  7028  0CC3  3004               	movlw	4
  7029  0CC4  00C5               	movwf	_tap_timer+1	;volatile
  7030  0CC5  3094               	movlw	148
  7031  0CC6  00C4               	movwf	_tap_timer	;volatile
  7032  0CC7                     l1432:	
  7033                           
  7034                           ;SwitchTap.c: 115: }
  7035                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7036  0CC7  085E               	movf	_num_taps,w
  7037  0CC8  0021               	movlb	1	; select bank1
  7038  0CC9  00BC               	movwf	??_updateSwitchTap^(0+128)
  7039  0CCA  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7040  0CCB  083C               	movf	??_updateSwitchTap^(0+128),w
  7041  0CCC  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7042  0CCD  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7043  0CCE  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7044                           
  7045                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7046  0CCF  0023               	movlb	3	; select bank3
  7047  0CD0  085E               	movf	(_tap_iteration+1)^(0+384),w
  7048  0CD1  3A80               	xorlw	128
  7049  0CD2  3C80               	sublw	128
  7050  0CD3  1D03               	skipz
  7051  0CD4  2CD8               	goto	u9885
  7052  0CD5  085D               	movf	_tap_iteration^(0+384),w
  7053  0CD6  0020               	movlb	0	; select bank0
  7054  0CD7  025E               	subwf	_num_taps,w
  7055  0CD8                     u9885:	
  7056  0CD8  1C03               	skipc
  7057  0CD9  2D0A               	goto	l9026
  7058                           
  7059                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7060  0CDA  0020               	movlb	0	; select bank0
  7061  0CDB  0844               	movf	_tap_timer,w	;volatile
  7062  0CDC  0024               	movlb	4	; select bank4
  7063  0CDD  07BD               	addwf	_tap_total^(0+512),f
  7064  0CDE  0020               	movlb	0	; select bank0
  7065  0CDF  0845               	movf	_tap_timer+1,w	;volatile
  7066  0CE0  0024               	movlb	4	; select bank4
  7067  0CE1  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7068  0CE2  0020               	movlb	0	; select bank0
  7069  0CE3  0846               	movf	_tap_timer+2,w	;volatile
  7070  0CE4  0024               	movlb	4	; select bank4
  7071  0CE5  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7072  0CE6  0020               	movlb	0	; select bank0
  7073  0CE7  0847               	movf	_tap_timer+3,w	;volatile
  7074  0CE8  0024               	movlb	4	; select bank4
  7075  0CE9  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7076                           
  7077                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7078  0CEA  0023               	movlb	3	; select bank3
  7079  0CEB  085D               	movf	_tap_iteration^(0+384),w
  7080  0CEC  0021               	movlb	1	; select bank1
  7081  0CED  00BC               	movwf	??_updateSwitchTap^(0+128)
  7082  0CEE  3001               	movlw	1
  7083  0CEF                     u9895:	
  7084  0CEF  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7085  0CF0  3EFF               	addlw	-1
  7086  0CF1  1D03               	skipz
  7087  0CF2  2CEF               	goto	u9895
  7088  0CF3  353C               	lslf	??_updateSwitchTap^(0+128),w
  7089  0CF4  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7090  0CF5  0086               	movwf	6
  7091  0CF6  3002               	movlw	2	; select bank4/5
  7092  0CF7  0087               	movwf	7
  7093  0CF8  0020               	movlb	0	; select bank0
  7094  0CF9  0844               	movf	_tap_timer,w	;volatile
  7095  0CFA  3FC0               	movwi [0]fsr1
  7096  0CFB  0845               	movf	_tap_timer+1,w	;volatile
  7097  0CFC  3FC1               	movwi [1]fsr1
  7098  0CFD  0846               	movf	_tap_timer+2,w	;volatile
  7099  0CFE  3FC2               	movwi [2]fsr1
  7100  0CFF  0847               	movf	_tap_timer+3,w	;volatile
  7101  0D00  3FC3               	movwi [3]fsr1
  7102                           
  7103                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7104  0D01  0023               	movlb	3	; select bank3
  7105  0D02  085E               	movf	(_tap_iteration+1)^(0+384),w
  7106  0D03  0021               	movlb	1	; select bank1
  7107  0D04  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7108  0D05  0023               	movlb	3	; select bank3
  7109  0D06  085D               	movf	_tap_iteration^(0+384),w
  7110  0D07  0021               	movlb	1	; select bank1
  7111  0D08  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7112                           
  7113                           ;SwitchTap.c: 122: } else {
  7114  0D09  2D86               	goto	l9040
  7115  0D0A                     l9026:	
  7116                           
  7117                           ;SwitchTap.c: 123: tap_total = 0;
  7118  0D0A  3000               	movlw	0
  7119  0D0B  0024               	movlb	4	; select bank4
  7120  0D0C  00C0               	movwf	(_tap_total+3)^(0+512)
  7121  0D0D  3000               	movlw	0
  7122  0D0E  00BF               	movwf	(_tap_total+2)^(0+512)
  7123  0D0F  3000               	movlw	0
  7124  0D10  00BE               	movwf	(_tap_total+1)^(0+512)
  7125  0D11  3000               	movlw	0
  7126  0D12  00BD               	movwf	_tap_total^(0+512)
  7127                           
  7128                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7129  0D13  0021               	movlb	1	; select bank1
  7130  0D14  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7131  0D15  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7132  0D16                     l9034:	
  7133  0D16  0020               	movlb	0	; select bank0
  7134  0D17  085E               	movf	_num_taps,w
  7135  0D18  0021               	movlb	1	; select bank1
  7136  0D19  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7137  0D1A  1803               	btfsc	3,0
  7138  0D1B  2D60               	goto	l9036
  7139                           
  7140                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7141  0D1C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7142  0D1D  00BC               	movwf	??_updateSwitchTap^(0+128)
  7143  0D1E  3001               	movlw	1
  7144  0D1F                     u9905:	
  7145  0D1F  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7146  0D20  3EFF               	addlw	-1
  7147  0D21  1D03               	skipz
  7148  0D22  2D1F               	goto	u9905
  7149  0D23  353C               	lslf	??_updateSwitchTap^(0+128),w
  7150  0D24  3E04               	addlw	4
  7151  0D25  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7152  0D26  0086               	movwf	6
  7153  0D27  3002               	movlw	2	; select bank4/5
  7154  0D28  0087               	movwf	7
  7155  0D29  3F40               	moviw [0]fsr1
  7156  0D2A  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7157  0D2B  3F41               	moviw [1]fsr1
  7158  0D2C  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7159  0D2D  3F42               	moviw [2]fsr1
  7160  0D2E  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7161  0D2F  3F43               	moviw [3]fsr1
  7162  0D30  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7163  0D31  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7164  0D32  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7165  0D33  3001               	movlw	1
  7166  0D34                     u9915:	
  7167  0D34  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7168  0D35  3EFF               	addlw	-1
  7169  0D36  1D03               	skipz
  7170  0D37  2D34               	goto	u9915
  7171  0D38  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7172  0D39  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7173  0D3A  0086               	movwf	6
  7174  0D3B  3002               	movlw	2	; select bank4/5
  7175  0D3C  0087               	movwf	7
  7176  0D3D  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7177  0D3E  3FC0               	movwi [0]fsr1
  7178  0D3F  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7179  0D40  3FC1               	movwi [1]fsr1
  7180  0D41  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7181  0D42  3FC2               	movwi [2]fsr1
  7182  0D43  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7183  0D44  3FC3               	movwi [3]fsr1
  7184                           
  7185                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7186  0D45  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7187  0D46  00BC               	movwf	??_updateSwitchTap^(0+128)
  7188  0D47  3001               	movlw	1
  7189  0D48                     u9925:	
  7190  0D48  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7191  0D49  3EFF               	addlw	-1
  7192  0D4A  1D03               	skipz
  7193  0D4B  2D48               	goto	u9925
  7194  0D4C  353C               	lslf	??_updateSwitchTap^(0+128),w
  7195  0D4D  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7196  0D4E  0086               	movwf	6
  7197  0D4F  3002               	movlw	2	; select bank4/5
  7198  0D50  0087               	movwf	7
  7199  0D51  3F40               	moviw [0]fsr1
  7200  0D52  0024               	movlb	4	; select bank4
  7201  0D53  07BD               	addwf	_tap_total^(0+512),f
  7202  0D54  3F41               	moviw [1]fsr1
  7203  0D55  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7204  0D56  3F42               	moviw [2]fsr1
  7205  0D57  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7206  0D58  3F43               	moviw [3]fsr1
  7207  0D59  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7208  0D5A  3001               	movlw	1
  7209  0D5B  0021               	movlb	1	; select bank1
  7210  0D5C  00BC               	movwf	??_updateSwitchTap^(0+128)
  7211  0D5D  083C               	movf	??_updateSwitchTap^(0+128),w
  7212  0D5E  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7213  0D5F  2D16               	goto	l9034
  7214  0D60                     l9036:	
  7215                           
  7216                           ;SwitchTap.c: 127: }
  7217                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7218  0D60  0020               	movlb	0	; select bank0
  7219  0D61  085E               	movf	_num_taps,w
  7220  0D62  0021               	movlb	1	; select bank1
  7221  0D63  00BC               	movwf	??_updateSwitchTap^(0+128)
  7222  0D64  3001               	movlw	1
  7223  0D65                     u9945:	
  7224  0D65  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7225  0D66  3EFF               	addlw	-1
  7226  0D67  1D03               	skipz
  7227  0D68  2D65               	goto	u9945
  7228  0D69  353C               	lslf	??_updateSwitchTap^(0+128),w
  7229  0D6A  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7230  0D6B  0086               	movwf	6
  7231  0D6C  3002               	movlw	2	; select bank4/5
  7232  0D6D  0087               	movwf	7
  7233  0D6E  0020               	movlb	0	; select bank0
  7234  0D6F  0844               	movf	_tap_timer,w	;volatile
  7235  0D70  3FC0               	movwi [0]fsr1
  7236  0D71  0845               	movf	_tap_timer+1,w	;volatile
  7237  0D72  3FC1               	movwi [1]fsr1
  7238  0D73  0846               	movf	_tap_timer+2,w	;volatile
  7239  0D74  3FC2               	movwi [2]fsr1
  7240  0D75  0847               	movf	_tap_timer+3,w	;volatile
  7241  0D76  3FC3               	movwi [3]fsr1
  7242                           
  7243                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7244  0D77  0844               	movf	_tap_timer,w	;volatile
  7245  0D78  0024               	movlb	4	; select bank4
  7246  0D79  07BD               	addwf	_tap_total^(0+512),f
  7247  0D7A  0020               	movlb	0	; select bank0
  7248  0D7B  0845               	movf	_tap_timer+1,w	;volatile
  7249  0D7C  0024               	movlb	4	; select bank4
  7250  0D7D  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7251  0D7E  0020               	movlb	0	; select bank0
  7252  0D7F  0846               	movf	_tap_timer+2,w	;volatile
  7253  0D80  0024               	movlb	4	; select bank4
  7254  0D81  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7255  0D82  0020               	movlb	0	; select bank0
  7256  0D83  0847               	movf	_tap_timer+3,w	;volatile
  7257  0D84  0024               	movlb	4	; select bank4
  7258  0D85  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7259  0D86                     l9040:	
  7260                           
  7261                           ;SwitchTap.c: 130: }
  7262                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7263  0D86  0021               	movlb	1	; select bank1
  7264  0D87  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7265  0D88  00A0               	movwf	___aldiv@divisor^(0+128)
  7266  0D89  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7267  0D8A  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7268  0D8B  0D89               	rlf	9,f
  7269  0D8C  3B89               	subwfb	9,f
  7270  0D8D  0989               	comf	9,f
  7271  0D8E  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7272  0D8F  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7273  0D90  0024               	movlb	4	; select bank4
  7274  0D91  0840               	movf	(_tap_total+3)^(0+512),w
  7275  0D92  0021               	movlb	1	; select bank1
  7276  0D93  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7277  0D94  0024               	movlb	4	; select bank4
  7278  0D95  083F               	movf	(_tap_total+2)^(0+512),w
  7279  0D96  0021               	movlb	1	; select bank1
  7280  0D97  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7281  0D98  0024               	movlb	4	; select bank4
  7282  0D99  083E               	movf	(_tap_total+1)^(0+512),w
  7283  0D9A  0021               	movlb	1	; select bank1
  7284  0D9B  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7285  0D9C  0024               	movlb	4	; select bank4
  7286  0D9D  083D               	movf	_tap_total^(0+512),w
  7287  0D9E  0021               	movlb	1	; select bank1
  7288  0D9F  00A4               	movwf	___aldiv@dividend^(0+128)
  7289  0DA0  3199  215C         	fcall	___aldiv
  7290  0DA2  0021               	movlb	1	; select bank1
  7291  0DA3  0823               	movf	(?___aldiv+3)^(0+128),w
  7292  0DA4  0023               	movlb	3	; select bank3
  7293  0DA5  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  7294  0DA6  0021               	movlb	1	; select bank1
  7295  0DA7  0822               	movf	(?___aldiv+2)^(0+128),w
  7296  0DA8  0023               	movlb	3	; select bank3
  7297  0DA9  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  7298  0DAA  0021               	movlb	1	; select bank1
  7299  0DAB  0821               	movf	(?___aldiv+1)^(0+128),w
  7300  0DAC  0023               	movlb	3	; select bank3
  7301  0DAD  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  7302  0DAE  0021               	movlb	1	; select bank1
  7303  0DAF  0820               	movf	?___aldiv^(0+128),w
  7304  0DB0  0023               	movlb	3	; select bank3
  7305  0DB1  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  7306                           
  7307                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7308  0DB2  01E4               	clrf	_mod_time_changed^(0+384)
  7309  0DB3  0AE4               	incf	_mod_time_changed^(0+384),f
  7310                           
  7311                           ;SwitchTap.c: 134: tap_timer = 0;
  7312  0DB4  3000               	movlw	0
  7313  0DB5  0020               	movlb	0	; select bank0
  7314  0DB6  00C7               	movwf	_tap_timer+3	;volatile
  7315  0DB7  3000               	movlw	0
  7316  0DB8  00C6               	movwf	_tap_timer+2	;volatile
  7317  0DB9  3000               	movlw	0
  7318  0DBA  00C5               	movwf	_tap_timer+1	;volatile
  7319  0DBB  3000               	movlw	0
  7320  0DBC  00C4               	movwf	_tap_timer	;volatile
  7321                           
  7322                           ;SwitchTap.c: 136: tap_iteration++;
  7323  0DBD  3001               	movlw	1
  7324  0DBE  0023               	movlb	3	; select bank3
  7325  0DBF  07DD               	addwf	_tap_iteration^(0+384),f
  7326  0DC0  3000               	movlw	0
  7327  0DC1  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7328                           
  7329                           ;SwitchTap.c: 137: }
  7330                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7331  0DC2  0008               	return
  7332  0DC3                     l9048:	
  7333  0DC3  3019               	movlw	25
  7334  0DC4  0022               	movlb	2	; select bank2
  7335  0DC5  026E               	subwf	_switchTap_pressed^(0+256),w
  7336  0DC6  1C03               	skipc
  7337  0DC7  0008               	return
  7338                           
  7339                           ;SwitchTap.c: 140: switchTap_down = 0;
  7340  0DC8  0023               	movlb	3	; select bank3
  7341  0DC9  01C5               	clrf	_switchTap_down^(0+384)
  7342                           
  7343                           ;SwitchTap.c: 141: switchTap_state = 0;
  7344  0DCA  01E6               	clrf	_switchTap_state^(0+384)
  7345                           
  7346                           ;SwitchTap.c: 147: setLongTapState(0);
  7347  0DCB  3000               	movlw	0
  7348  0DCC  0021               	movlb	1	; select bank1
  7349  0DCD  00A0               	movwf	setLongTapState@f_state^(0+128)
  7350  0DCE  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7351  0DCF  31AE  2636         	fcall	_setLongTapState
  7352                           
  7353                           ;SwitchTap.c: 149: longTap_timer = 0;
  7354  0DD1  0023               	movlb	3	; select bank3
  7355  0DD2  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  7356  0DD3  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7357                           
  7358                           ;SwitchTap.c: 150: longTap_start = 0;
  7359  0DD4  0022               	movlb	2	; select bank2
  7360  0DD5  01EB               	clrf	_longTap_start^(0+256)
  7361                           
  7362                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7363  0DD6  3019               	movlw	25
  7364  0DD7  0021               	movlb	1	; select bank1
  7365  0DD8  00BC               	movwf	??_updateSwitchTap^(0+128)
  7366  0DD9  083C               	movf	??_updateSwitchTap^(0+128),w
  7367  0DDA  0022               	movlb	2	; select bank2
  7368  0DDB  00EE               	movwf	_switchTap_pressed^(0+256)
  7369  0DDC  0008               	return
  7370  0DDD                     __end_of_updateSwitchTap:	
  7371                           
  7372                           	psect	text4
  7373  2E36                     __ptext4:	
  7374 ;; *************** function _setLongTapState *****************
  7375 ;; Defined at:
  7376 ;;		line 167 in file "SwitchTap.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  f_state         2    0[BANK1 ] int 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;		None
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  1    wreg      void 
  7383 ;; Registers used:
  7384 ;;		wreg, status,0
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7390 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7392 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7393 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7394 ;;Total ram usage:        4 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    3
  7397 ;; This function calls:
  7398 ;;		Nothing
  7399 ;; This function is called by:
  7400 ;;		_updateSwitchTap
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function _setLongTapState
  7406  2E36                     _setLongTapState:	
  7407                           
  7408                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7409                           
  7410                           ;incstack = 0
  7411                           ; Regs used in _setLongTapState: [wreg+status,0]
  7412  2E36  0020               	movlb	0	; select bank0
  7413  2E37  085D               	movf	_longTap_state,w	;volatile
  7414  2E38  0021               	movlb	1	; select bank1
  7415  2E39  00A2               	movwf	??_setLongTapState^(0+128)
  7416  2E3A  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7417  2E3B  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7418  2E3C  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7419  2E3D  1D03               	skipz
  7420  2E3E  2E41               	goto	u8945
  7421  2E3F  0820               	movf	setLongTapState@f_state^(0+128),w
  7422  2E40  0622               	xorwf	??_setLongTapState^(0+128),w
  7423  2E41                     u8945:	
  7424  2E41  1903               	btfsc	3,2
  7425  2E42  0008               	return
  7426                           
  7427                           ;SwitchTap.c: 169: longTap_state = f_state;
  7428  2E43  0820               	movf	setLongTapState@f_state^(0+128),w
  7429  2E44  00A2               	movwf	??_setLongTapState^(0+128)
  7430  2E45  0822               	movf	??_setLongTapState^(0+128),w
  7431  2E46  0020               	movlb	0	; select bank0
  7432  2E47  00DD               	movwf	_longTap_state	;volatile
  7433                           
  7434                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7435  2E48  0021               	movlb	1	; select bank1
  7436  2E49  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7437  2E4A  0022               	movlb	2	; select bank2
  7438  2E4B  1C03               	skipc
  7439  2E4C  128D               	bcf	13,5	;volatile
  7440  2E4D  1803               	skipnc
  7441  2E4E  168D               	bsf	13,5	;volatile
  7442  2E4F  0008               	return
  7443  2E50                     __end_of_setLongTapState:	
  7444                           
  7445                           	psect	text5
  7446  195C                     __ptext5:	
  7447 ;; *************** function ___aldiv *****************
  7448 ;; Defined at:
  7449 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  divisor         4    0[BANK1 ] long 
  7452 ;;  dividend        4    4[BANK1 ] long 
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;  quotient        4   11[BANK1 ] long 
  7455 ;;  sign            1   10[BANK1 ] unsigned char 
  7456 ;;  counter         1    9[BANK1 ] unsigned char 
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  4    0[BANK1 ] long 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7466 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7467 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7468 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7469 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7470 ;;Total ram usage:       15 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    3
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_updateSwitchTap
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function ___aldiv
  7482  195C                     ___aldiv:	
  7483                           
  7484                           ;incstack = 0
  7485                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7486  195C  0021               	movlb	1	; select bank1
  7487  195D  01AA               	clrf	___aldiv@sign^(0+128)
  7488  195E  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7489  195F  296D               	goto	l2013
  7490  1960  09A0               	comf	___aldiv@divisor^(0+128),f
  7491  1961  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7492  1962  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7493  1963  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7494  1964  0AA0               	incf	___aldiv@divisor^(0+128),f
  7495  1965  1903               	skipnz
  7496  1966  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7497  1967  1903               	skipnz
  7498  1968  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7499  1969  1903               	skipnz
  7500  196A  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7501  196B  01AA               	clrf	___aldiv@sign^(0+128)
  7502  196C  0AAA               	incf	___aldiv@sign^(0+128),f
  7503  196D                     l2013:	
  7504  196D  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7505  196E  297E               	goto	l8570
  7506  196F  09A4               	comf	___aldiv@dividend^(0+128),f
  7507  1970  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7508  1971  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7509  1972  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7510  1973  0AA4               	incf	___aldiv@dividend^(0+128),f
  7511  1974  1903               	skipnz
  7512  1975  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7513  1976  1903               	skipnz
  7514  1977  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7515  1978  1903               	skipnz
  7516  1979  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7517  197A  3001               	movlw	1
  7518  197B  00A8               	movwf	??___aldiv^(0+128)
  7519  197C  0828               	movf	??___aldiv^(0+128),w
  7520  197D  06AA               	xorwf	___aldiv@sign^(0+128),f
  7521  197E                     l8570:	
  7522  197E  3000               	movlw	0
  7523  197F  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7524  1980  3000               	movlw	0
  7525  1981  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7526  1982  3000               	movlw	0
  7527  1983  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7528  1984  3000               	movlw	0
  7529  1985  00AB               	movwf	___aldiv@quotient^(0+128)
  7530  1986  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7531  1987  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7532  1988  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7533  1989  0420               	iorwf	___aldiv@divisor^(0+128),w
  7534  198A  1903               	skipnz
  7535  198B  29C7               	goto	l8592
  7536  198C  01A9               	clrf	___aldiv@counter^(0+128)
  7537  198D  0AA9               	incf	___aldiv@counter^(0+128),f
  7538  198E                     l8578:	
  7539  198E  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7540  198F  299C               	goto	l8580
  7541  1990  3001               	movlw	1
  7542  1991                     u9025:	
  7543  1991  35A0               	lslf	___aldiv@divisor^(0+128),f
  7544  1992  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7545  1993  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7546  1994  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7547  1995  0B89               	decfsz	9,f
  7548  1996  2991               	goto	u9025
  7549  1997  3001               	movlw	1
  7550  1998  00A8               	movwf	??___aldiv^(0+128)
  7551  1999  0828               	movf	??___aldiv^(0+128),w
  7552  199A  07A9               	addwf	___aldiv@counter^(0+128),f
  7553  199B  298E               	goto	l8578
  7554  199C                     l8580:	
  7555  199C  3001               	movlw	1
  7556  199D                     u9045:	
  7557  199D  35AB               	lslf	___aldiv@quotient^(0+128),f
  7558  199E  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7559  199F  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7560  19A0  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7561  19A1  0B89               	decfsz	9,f
  7562  19A2  299D               	goto	u9045
  7563  19A3  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7564  19A4  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7565  19A5  1D03               	skipz
  7566  19A6  29B1               	goto	u9055
  7567  19A7  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7568  19A8  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7569  19A9  1D03               	skipz
  7570  19AA  29B1               	goto	u9055
  7571  19AB  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7572  19AC  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7573  19AD  1D03               	skipz
  7574  19AE  29B1               	goto	u9055
  7575  19AF  0820               	movf	___aldiv@divisor^(0+128),w
  7576  19B0  0224               	subwf	___aldiv@dividend^(0+128),w
  7577  19B1                     u9055:	
  7578  19B1  1C03               	skipc
  7579  19B2  29BC               	goto	l8588
  7580  19B3  0820               	movf	___aldiv@divisor^(0+128),w
  7581  19B4  02A4               	subwf	___aldiv@dividend^(0+128),f
  7582  19B5  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7583  19B6  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7584  19B7  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7585  19B8  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7586  19B9  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7587  19BA  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7588  19BB  142B               	bsf	___aldiv@quotient^(0+128),0
  7589  19BC                     l8588:	
  7590  19BC  3001               	movlw	1
  7591  19BD                     u9065:	
  7592  19BD  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7593  19BE  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7594  19BF  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7595  19C0  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7596  19C1  0B89               	decfsz	9,f
  7597  19C2  29BD               	goto	u9065
  7598  19C3  3001               	movlw	1
  7599  19C4  02A9               	subwf	___aldiv@counter^(0+128),f
  7600  19C5  1D03               	btfss	3,2
  7601  19C6  299C               	goto	l8580
  7602  19C7                     l8592:	
  7603  19C7  082A               	movf	___aldiv@sign^(0+128),w
  7604  19C8  1903               	btfsc	3,2
  7605  19C9  29D5               	goto	l8596
  7606  19CA  09AB               	comf	___aldiv@quotient^(0+128),f
  7607  19CB  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7608  19CC  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7609  19CD  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7610  19CE  0AAB               	incf	___aldiv@quotient^(0+128),f
  7611  19CF  1903               	skipnz
  7612  19D0  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7613  19D1  1903               	skipnz
  7614  19D2  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7615  19D3  1903               	skipnz
  7616  19D4  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7617  19D5                     l8596:	
  7618  19D5  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7619  19D6  00A3               	movwf	(?___aldiv+3)^(0+128)
  7620  19D7  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7621  19D8  00A2               	movwf	(?___aldiv+2)^(0+128)
  7622  19D9  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7623  19DA  00A1               	movwf	(?___aldiv+1)^(0+128)
  7624  19DB  082B               	movf	___aldiv@quotient^(0+128),w
  7625  19DC  00A0               	movwf	?___aldiv^(0+128)
  7626  19DD  0008               	return
  7627  19DE                     __end_of___aldiv:	
  7628                           
  7629                           	psect	text6
  7630  121B                     __ptext6:	
  7631 ;; *************** function _updateSwitchBypass *****************
  7632 ;; Defined at:
  7633 ;;		line 34 in file "SwitchBypass.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;		None
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;		None
  7638 ;; Return value:  Size  Location     Type
  7639 ;;                  1    wreg      void 
  7640 ;; Registers used:
  7641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7649 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7650 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7651 ;;Total ram usage:        2 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    8
  7654 ;; This function calls:
  7655 ;;		_setDoublePressState
  7656 ;;		_setLongBypassState
  7657 ;;		_setSwitchBypassRelays
  7658 ;;		_setSwitchBypassState
  7659 ;; This function is called by:
  7660 ;;		_main
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _updateSwitchBypass
  7666  121B                     _updateSwitchBypass:	
  7667                           
  7668                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7669                           
  7670                           ;incstack = 0
  7671                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7672  121B  0020               	movlb	0	; select bank0
  7673  121C  1890               	btfsc	16,1	;volatile
  7674  121D  2A31               	goto	l8848
  7675                           
  7676                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7677  121E  0023               	movlb	3	; select bank3
  7678  121F  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7679  1220  3A80               	xorlw	128
  7680  1221  0021               	movlb	1	; select bank1
  7681  1222  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7682  1223  3080               	movlw	128
  7683  1224  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7684  1225  1D03               	skipz
  7685  1226  2A2A               	goto	u9485
  7686  1227  3001               	movlw	1
  7687  1228  0023               	movlb	3	; select bank3
  7688  1229  0236               	subwf	_switchBypass_pressed^(0+384),w
  7689  122A                     u9485:	
  7690  122A  1C03               	skipc
  7691  122B  2A44               	goto	l8852
  7692                           
  7693                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7694  122C  30FF               	movlw	255
  7695  122D  0023               	movlb	3	; select bank3
  7696  122E  07B6               	addwf	_switchBypass_pressed^(0+384),f
  7697  122F  30FF               	movlw	255
  7698  1230  2A43               	goto	L1
  7699  1231                     l8848:	
  7700                           ;SwitchBypass.c: 44: }
  7701                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7702                           
  7703  1231  0023               	movlb	3	; select bank3
  7704  1232  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7705  1233  3A80               	xorlw	128
  7706  1234  0021               	movlb	1	; select bank1
  7707  1235  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7708  1236  3080               	movlw	128
  7709  1237  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7710  1238  1D03               	skipz
  7711  1239  2A3D               	goto	u9495
  7712  123A  3019               	movlw	25
  7713  123B  0023               	movlb	3	; select bank3
  7714  123C  0236               	subwf	_switchBypass_pressed^(0+384),w
  7715  123D                     u9495:	
  7716  123D  1803               	skipnc
  7717  123E  2A44               	goto	l8852
  7718                           
  7719                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7720  123F  3001               	movlw	1
  7721  1240  0023               	movlb	3	; select bank3
  7722  1241  07B6               	addwf	_switchBypass_pressed^(0+384),f
  7723  1242  3000               	movlw	0
  7724  1243                     L1:	
  7725  1243  3DB7               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7726  1244                     l8852:	
  7727                           
  7728                           ;SwitchBypass.c: 47: }
  7729                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7730  1244  0023               	movlb	3	; select bank3
  7731  1245  0836               	movf	_switchBypass_pressed^(0+384),w
  7732  1246  0437               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7733  1247  1D03               	btfss	3,2
  7734  1248  2ACF               	goto	l8914
  7735                           
  7736                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7737  1249  0022               	movlb	2	; select bank2
  7738  124A  086A               	movf	_longBypass_start^(0+256),w
  7739  124B  1D03               	btfss	3,2
  7740  124C  2A52               	goto	l8860
  7741                           
  7742                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7743  124D  01EA               	clrf	_longBypass_start^(0+256)
  7744  124E  0AEA               	incf	_longBypass_start^(0+256),f
  7745                           
  7746                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7747  124F  0023               	movlb	3	; select bank3
  7748  1250  01B2               	clrf	_longBypass_timer^(0+384)	;volatile
  7749  1251  01B3               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7750  1252                     l8860:	
  7751                           
  7752                           ;SwitchBypass.c: 59: }
  7753                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7754  1252  0020               	movlb	0	; select bank0
  7755  1253  0859               	movf	_long_press_limit+1,w
  7756  1254  0023               	movlb	3	; select bank3
  7757  1255  0233               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7758  1256  1D03               	skipz
  7759  1257  2A5C               	goto	u9525
  7760  1258  0020               	movlb	0	; select bank0
  7761  1259  0858               	movf	_long_press_limit,w
  7762  125A  0023               	movlb	3	; select bank3
  7763  125B  0232               	subwf	_longBypass_timer^(0+384),w	;volatile
  7764  125C                     u9525:	
  7765  125C  1C03               	skipc
  7766  125D  2A9A               	goto	l8886
  7767  125E  083F               	movf	_longBypass_down^(0+384),w
  7768  125F  1D03               	btfss	3,2
  7769  1260  2A9A               	goto	l8886
  7770  1261  0020               	movlb	0	; select bank0
  7771  1262  084E               	movf	_doubleTap_state,w	;volatile
  7772  1263  1D03               	btfss	3,2
  7773  1264  2A9A               	goto	l8886
  7774                           
  7775                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7776  1265  0022               	movlb	2	; select bank2
  7777  1266  110D               	bcf	13,2	;volatile
  7778                           
  7779                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7780  1267  036B               	decf	_longTap_start^(0+256),w
  7781  1268  1903               	btfsc	3,2
  7782  1269  2A92               	goto	l8884
  7783                           
  7784                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7785  126A  0020               	movlb	0	; select bank0
  7786  126B  035F               	decf	_switchBypass_state,w
  7787  126C  1D03               	btfss	3,2
  7788  126D  2A9A               	goto	l8886
  7789                           
  7790                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7791  126E  0023               	movlb	3	; select bank3
  7792  126F  01BF               	clrf	_longBypass_down^(0+384)
  7793  1270  0ABF               	incf	_longBypass_down^(0+384),f
  7794                           
  7795                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7796  1271  0020               	movlb	0	; select bank0
  7797  1272  084F               	movf	_longBypass_state,w	;volatile
  7798  1273  1D03               	btfss	3,2
  7799  1274  2A80               	goto	l8880
  7800                           
  7801                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7802  1275  0022               	movlb	2	; select bank2
  7803  1276  110D               	bcf	13,2	;volatile
  7804                           
  7805                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7806  1277  3001               	movlw	1
  7807  1278  0021               	movlb	1	; select bank1
  7808  1279  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7809  127A  3000               	movlw	0
  7810  127B  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7811  127C  31AE  26E4  3192   	fcall	_setLongBypassState
  7812                           
  7813                           ;SwitchBypass.c: 71: } else {
  7814  127F  2A9A               	goto	l8886
  7815  1280                     l8880:	
  7816                           
  7817                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7818  1280  3001               	movlw	1
  7819  1281  0021               	movlb	1	; select bank1
  7820  1282  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7821  1283  3000               	movlw	0
  7822  1284  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7823  1285  31AE  266C  3192   	fcall	_setSwitchBypassState
  7824                           
  7825                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7826  1288  3000               	movlw	0
  7827  1289  0021               	movlb	1	; select bank1
  7828  128A  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7829  128B  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7830  128C  31AE  26E4  3192   	fcall	_setLongBypassState
  7831                           
  7832                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7833  128F  0022               	movlb	2	; select bank2
  7834  1290  150D               	bsf	13,2	;volatile
  7835                           
  7836                           ;SwitchBypass.c: 75: }
  7837                           ;SwitchBypass.c: 76: }
  7838                           ;SwitchBypass.c: 77: } else {
  7839  1291  2A9A               	goto	l8886
  7840  1292                     l8884:	
  7841                           
  7842                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7843  1292  3001               	movlw	1
  7844  1293  0021               	movlb	1	; select bank1
  7845  1294  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7846  1295  3000               	movlw	0
  7847  1296  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7848  1297  31A2  227E  3192   	fcall	_setDoublePressState
  7849  129A                     l8886:	
  7850                           
  7851                           ;SwitchBypass.c: 79: }
  7852                           ;SwitchBypass.c: 80: }
  7853                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  7854  129A  0022               	movlb	2	; select bank2
  7855  129B  120F               	bcf	15,4	;volatile
  7856                           
  7857                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  7858  129C  0020               	movlb	0	; select bank0
  7859  129D  084E               	movf	_doubleTap_state,w	;volatile
  7860  129E  1D03               	btfss	3,2
  7861  129F  2ACB               	goto	l8912
  7862  12A0  0023               	movlb	3	; select bank3
  7863  12A1  083F               	movf	_longBypass_down^(0+384),w
  7864  12A2  1D03               	btfss	3,2
  7865  12A3  2ACB               	goto	l8912
  7866                           
  7867                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7868  12A4  0020               	movlb	0	; select bank0
  7869  12A5  035F               	decf	_switchBypass_state,w
  7870  12A6  1D03               	btfss	3,2
  7871  12A7  2AB6               	goto	l8900
  7872                           
  7873                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7874  12A8  0024               	movlb	4	; select bank4
  7875  12A9  0363               	decf	_switchBypass_up^(0+512),w
  7876  12AA  0464               	iorwf	(_switchBypass_up+1)^(0+512),w
  7877  12AB  1D03               	btfss	3,2
  7878  12AC  2ACB               	goto	l8912
  7879                           
  7880                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7881  12AD  0023               	movlb	3	; select bank3
  7882  12AE  01E0               	clrf	_currentBypassState^(0+384)
  7883  12AF  0AE0               	incf	_currentBypassState^(0+384),f
  7884                           
  7885                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7886  12B0  3001               	movlw	1
  7887  12B1  0024               	movlb	4	; select bank4
  7888  12B2  00D1               	movwf	_switchBypass_toggle^(0+512)
  7889  12B3  3000               	movlw	0
  7890  12B4  00D2               	movwf	(_switchBypass_toggle^(0+512)+1)
  7891                           
  7892                           ;SwitchBypass.c: 88: }
  7893                           ;SwitchBypass.c: 89: } else {
  7894  12B5  2ACB               	goto	l8912
  7895  12B6                     l8900:	
  7896                           
  7897                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7898  12B6  0023               	movlb	3	; select bank3
  7899  12B7  033C               	decf	_bypass_turning_on^(0+384),w
  7900  12B8  1903               	btfsc	3,2
  7901  12B9  2ACB               	goto	l8912
  7902                           
  7903                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7904  12BA  01E0               	clrf	_currentBypassState^(0+384)
  7905                           
  7906                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7907  12BB  01BC               	clrf	_bypass_turning_on^(0+384)
  7908  12BC  0ABC               	incf	_bypass_turning_on^(0+384),f
  7909                           
  7910                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7911  12BD  0024               	movlb	4	; select bank4
  7912  12BE  01D1               	clrf	_switchBypass_toggle^(0+512)
  7913  12BF  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  7914                           
  7915                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  7916  12C0  0020               	movlb	0	; select bank0
  7917  12C1  084F               	movf	_longBypass_state,w	;volatile
  7918  12C2  0021               	movlb	1	; select bank1
  7919  12C3  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7920  12C4  083C               	movf	??_updateSwitchBypass^(0+128),w
  7921  12C5  0023               	movlb	3	; select bank3
  7922  12C6  00C0               	movwf	_longBypass_save^(0+384)
  7923                           
  7924                           ;SwitchBypass.c: 98: longBypass_state = 0;
  7925  12C7  0020               	movlb	0	; select bank0
  7926  12C8  01CF               	clrf	_longBypass_state	;volatile
  7927                           
  7928                           ;SwitchBypass.c: 99: longBypass_start = 0;
  7929  12C9  0022               	movlb	2	; select bank2
  7930  12CA  01EA               	clrf	_longBypass_start^(0+256)
  7931  12CB                     l8912:	
  7932                           
  7933                           ;SwitchBypass.c: 100: }
  7934                           ;SwitchBypass.c: 101: }
  7935                           ;SwitchBypass.c: 103: }
  7936                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  7937  12CB  0024               	movlb	4	; select bank4
  7938  12CC  01E3               	clrf	_switchBypass_up^(0+512)
  7939  12CD  01E4               	clrf	(_switchBypass_up+1)^(0+512)
  7940                           
  7941                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  7942  12CE  0008               	return
  7943  12CF                     l8914:	
  7944  12CF  0023               	movlb	3	; select bank3
  7945  12D0  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7946  12D1  3A80               	xorlw	128
  7947  12D2  0021               	movlb	1	; select bank1
  7948  12D3  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7949  12D4  3080               	movlw	128
  7950  12D5  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7951  12D6  1D03               	skipz
  7952  12D7  2ADB               	goto	u9635
  7953  12D8  3019               	movlw	25
  7954  12D9  0023               	movlb	3	; select bank3
  7955  12DA  0236               	subwf	_switchBypass_pressed^(0+384),w
  7956  12DB                     u9635:	
  7957  12DB  1C03               	skipc
  7958  12DC  0008               	return
  7959                           
  7960                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  7961  12DD  0020               	movlb	0	; select bank0
  7962  12DE  034E               	decf	_doubleTap_state,w	;volatile
  7963  12DF  1D03               	btfss	3,2
  7964  12E0  2AEA               	goto	l8920
  7965                           
  7966                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  7967  12E1  0023               	movlb	3	; select bank3
  7968  12E2  0860               	movf	_currentBypassState^(0+384),w
  7969  12E3  0021               	movlb	1	; select bank1
  7970  12E4  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7971  12E5  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7972  12E6  083C               	movf	??_updateSwitchBypass^(0+128),w
  7973  12E7  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7974  12E8  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7975  12E9  2B1A               	goto	L2
  7976  12EA                     l8920:	
  7977                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  7978                           
  7979  12EA  0023               	movlb	3	; select bank3
  7980  12EB  033C               	decf	_bypass_turning_on^(0+384),w
  7981  12EC  1D03               	btfss	3,2
  7982  12ED  2B0A               	goto	l8930
  7983                           
  7984                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  7985  12EE  0340               	decf	_longBypass_save^(0+384),w
  7986  12EF  1D03               	btfss	3,2
  7987  12F0  2B04               	goto	l8928
  7988                           
  7989                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  7990  12F1  0022               	movlb	2	; select bank2
  7991  12F2  110D               	bcf	13,2	;volatile
  7992                           
  7993                           ;SwitchBypass.c: 112: setLongBypassState(1);
  7994  12F3  3001               	movlw	1
  7995  12F4  0021               	movlb	1	; select bank1
  7996  12F5  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7997  12F6  3000               	movlw	0
  7998  12F7  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7999  12F8  31AE  26E4  3192   	fcall	_setLongBypassState
  8000                           
  8001                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  8002  12FB  3001               	movlw	1
  8003  12FC  0021               	movlb	1	; select bank1
  8004  12FD  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8005  12FE  3000               	movlw	0
  8006  12FF  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8007  1300  31A0  20E5  3192   	fcall	_setSwitchBypassRelays
  8008                           
  8009                           ;SwitchBypass.c: 114: } else {
  8010  1303  2B1E               	goto	l8938
  8011  1304                     l8928:	
  8012                           
  8013                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  8014  1304  3001               	movlw	1
  8015  1305  0021               	movlb	1	; select bank1
  8016  1306  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8017  1307  3000               	movlw	0
  8018  1308  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8019  1309  2B1B               	goto	L3
  8020  130A                     l8930:	
  8021                           ;SwitchBypass.c: 116: }
  8022                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8023                           
  8024  130A  0024               	movlb	4	; select bank4
  8025  130B  0351               	decf	_switchBypass_toggle^(0+512),w
  8026  130C  0452               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8027  130D  1D03               	btfss	3,2
  8028  130E  2B1E               	goto	l8938
  8029  130F  0023               	movlb	3	; select bank3
  8030  1310  083F               	movf	_longBypass_down^(0+384),w
  8031  1311  1D03               	btfss	3,2
  8032  1312  2B1E               	goto	l8938
  8033  1313  0020               	movlb	0	; select bank0
  8034  1314  084E               	movf	_doubleTap_state,w	;volatile
  8035  1315  1D03               	btfss	3,2
  8036  1316  2B1E               	goto	l8938
  8037                           
  8038                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  8039  1317  3000               	movlw	0
  8040  1318  0021               	movlb	1	; select bank1
  8041  1319  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8042  131A                     L2:	
  8043  131A  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8044  131B                     L3:	
  8045  131B  31AE  266C  3192   	fcall	_setSwitchBypassState
  8046  131E                     l8938:	
  8047                           
  8048                           ;SwitchBypass.c: 120: }
  8049                           ;SwitchBypass.c: 122: longBypass_down = 0;
  8050  131E  0023               	movlb	3	; select bank3
  8051  131F  01BF               	clrf	_longBypass_down^(0+384)
  8052                           
  8053                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  8054  1320  0020               	movlb	0	; select bank0
  8055  1321  084F               	movf	_longBypass_state,w	;volatile
  8056  1322  1D03               	btfss	3,2
  8057  1323  2B2A               	goto	l8944
  8058                           
  8059                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  8060  1324  0C5F               	rrf	_switchBypass_state,w
  8061  1325  0022               	movlb	2	; select bank2
  8062  1326  1C03               	skipc
  8063  1327  110D               	bcf	13,2	;volatile
  8064  1328  1803               	skipnc
  8065  1329  150D               	bsf	13,2	;volatile
  8066  132A                     l8944:	
  8067                           
  8068                           ;SwitchBypass.c: 125: }
  8069                           ;SwitchBypass.c: 127: setDoublePressState(0);
  8070  132A  3000               	movlw	0
  8071  132B  0021               	movlb	1	; select bank1
  8072  132C  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8073  132D  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8074  132E  31A2  227E         	fcall	_setDoublePressState
  8075                           
  8076                           ;SwitchBypass.c: 128: longBypass_start = 0;
  8077  1330  0022               	movlb	2	; select bank2
  8078  1331  01EA               	clrf	_longBypass_start^(0+256)
  8079                           
  8080                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  8081  1332  0023               	movlb	3	; select bank3
  8082  1333  01BC               	clrf	_bypass_turning_on^(0+384)
  8083                           
  8084                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  8085  1334  0024               	movlb	4	; select bank4
  8086  1335  01D1               	clrf	_switchBypass_toggle^(0+512)
  8087  1336  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  8088                           
  8089                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  8090  1337  3001               	movlw	1
  8091  1338  00E3               	movwf	_switchBypass_up^(0+512)
  8092  1339  3000               	movlw	0
  8093  133A  00E4               	movwf	(_switchBypass_up^(0+512)+1)
  8094                           
  8095                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  8096  133B  3019               	movlw	25
  8097  133C  0023               	movlb	3	; select bank3
  8098  133D  00B6               	movwf	_switchBypass_pressed^(0+384)
  8099  133E  3000               	movlw	0
  8100  133F  00B7               	movwf	(_switchBypass_pressed^(0+384)+1)
  8101  1340  0008               	return
  8102  1341                     __end_of_updateSwitchBypass:	
  8103                           
  8104                           	psect	text7
  8105  2EE4                     __ptext7:	
  8106 ;; *************** function _setLongBypassState *****************
  8107 ;; Defined at:
  8108 ;;		line 163 in file "SwitchBypass.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;  f_state         2    0[BANK1 ] int 
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      void 
  8115 ;; Registers used:
  8116 ;;		wreg, status,0
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8122 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8124 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8125 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8126 ;;Total ram usage:        4 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    3
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_updateSwitchBypass
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           
  8137                           ;psect for function _setLongBypassState
  8138  2EE4                     _setLongBypassState:	
  8139                           
  8140                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  8141                           
  8142                           ;incstack = 0
  8143                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8144  2EE4  0020               	movlb	0	; select bank0
  8145  2EE5  084F               	movf	_longBypass_state,w	;volatile
  8146  2EE6  0021               	movlb	1	; select bank1
  8147  2EE7  00A2               	movwf	??_setLongBypassState^(0+128)
  8148  2EE8  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8149  2EE9  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8150  2EEA  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8151  2EEB  1D03               	skipz
  8152  2EEC  2EEF               	goto	u8895
  8153  2EED  0820               	movf	setLongBypassState@f_state^(0+128),w
  8154  2EEE  0622               	xorwf	??_setLongBypassState^(0+128),w
  8155  2EEF                     u8895:	
  8156  2EEF  1903               	btfsc	3,2
  8157  2EF0  0008               	return
  8158                           
  8159                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  8160  2EF1  0820               	movf	setLongBypassState@f_state^(0+128),w
  8161  2EF2  00A2               	movwf	??_setLongBypassState^(0+128)
  8162  2EF3  0822               	movf	??_setLongBypassState^(0+128),w
  8163  2EF4  0020               	movlb	0	; select bank0
  8164  2EF5  00CF               	movwf	_longBypass_state	;volatile
  8165                           
  8166                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  8167  2EF6  0021               	movlb	1	; select bank1
  8168  2EF7  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8169  2EF8  0022               	movlb	2	; select bank2
  8170  2EF9  1C03               	skipc
  8171  2EFA  118D               	bcf	13,3	;volatile
  8172  2EFB  1803               	skipnc
  8173  2EFC  158D               	bsf	13,3	;volatile
  8174                           
  8175                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  8176  2EFD  0021               	movlb	1	; select bank1
  8177  2EFE  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8178  2EFF  0020               	movlb	0	; select bank0
  8179  2F00  1C03               	skipc
  8180  2F01  120E               	bcf	14,4	;volatile
  8181  2F02  1803               	skipnc
  8182  2F03  160E               	bsf	14,4	;volatile
  8183  2F04  0008               	return
  8184  2F05                     __end_of_setLongBypassState:	
  8185                           
  8186                           	psect	text8
  8187  227E                     __ptext8:	
  8188 ;; *************** function _setDoublePressState *****************
  8189 ;; Defined at:
  8190 ;;		line 21 in file "preset_programming.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  f_state         2   24[BANK1 ] int 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      void 
  8197 ;; Registers used:
  8198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8204 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8206 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8207 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8208 ;;Total ram usage:        4 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    7
  8211 ;; This function calls:
  8212 ;;		_resetRingLEDs
  8213 ;;		_setPedalMode
  8214 ;;		_setPresetDisplay
  8215 ;;		_showSave
  8216 ;;		_wait_ms
  8217 ;; This function is called by:
  8218 ;;		_updateSwitchBypass
  8219 ;;		_updateSwitchTap
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           
  8224                           ;psect for function _setDoublePressState
  8225  227E                     _setDoublePressState:	
  8226                           
  8227                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8228                           
  8229                           ;incstack = 0
  8230                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8231  227E  0020               	movlb	0	; select bank0
  8232  227F  084E               	movf	_doubleTap_state,w	;volatile
  8233  2280  0021               	movlb	1	; select bank1
  8234  2281  00BA               	movwf	??_setDoublePressState^(0+128)
  8235  2282  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8236  2283  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8237  2284  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8238  2285  1D03               	skipz
  8239  2286  2A89               	goto	u8905
  8240  2287  0838               	movf	setDoublePressState@f_state^(0+128),w
  8241  2288  063A               	xorwf	??_setDoublePressState^(0+128),w
  8242  2289                     u8905:	
  8243  2289  1903               	btfsc	3,2
  8244  228A  0008               	return
  8245                           
  8246                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8247  228B  0838               	movf	setDoublePressState@f_state^(0+128),w
  8248  228C  00BA               	movwf	??_setDoublePressState^(0+128)
  8249  228D  083A               	movf	??_setDoublePressState^(0+128),w
  8250  228E  0020               	movlb	0	; select bank0
  8251  228F  00CE               	movwf	_doubleTap_state	;volatile
  8252                           
  8253                           ;preset_programming.c: 24: if (f_state == 1) {
  8254  2290  0021               	movlb	1	; select bank1
  8255  2291  0338               	decf	setDoublePressState@f_state^(0+128),w
  8256  2292  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8257  2293  1D03               	btfss	3,2
  8258  2294  2A98               	goto	l8492
  8259                           
  8260                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8261  2295  0022               	movlb	2	; select bank2
  8262  2296  120D               	bcf	13,4	;volatile
  8263                           
  8264                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8265  2297  128D               	bcf	13,5	;volatile
  8266  2298                     l8492:	
  8267                           
  8268                           ;preset_programming.c: 30: }
  8269                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8270  2298  0020               	movlb	0	; select bank0
  8271  2299  034E               	decf	_doubleTap_state,w	;volatile
  8272  229A  1D03               	btfss	3,2
  8273  229B  2AB3               	goto	l8508
  8274                           
  8275                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8276  229C  0851               	movf	_presetSaveMode,w
  8277  229D  1D03               	btfss	3,2
  8278  229E  2AA8               	goto	l8500
  8279                           
  8280                           ;preset_programming.c: 34: presetSaveMode = 1;
  8281  229F  01D1               	clrf	_presetSaveMode
  8282  22A0  0AD1               	incf	_presetSaveMode,f
  8283                           
  8284                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8285  22A1  0022               	movlb	2	; select bank2
  8286  22A2  108D               	bcf	13,1	;volatile
  8287                           
  8288                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8289  22A3  086F               	movf	_presetChannel^(0+256),w
  8290  22A4  31A1  2153  31A2   	fcall	_setPresetDisplay
  8291                           
  8292                           ;preset_programming.c: 37: } else {
  8293  22A7  2AB3               	goto	l8508
  8294  22A8                     l8500:	
  8295                           
  8296                           ;preset_programming.c: 39: presetSaveMode = 0;
  8297  22A8  0020               	movlb	0	; select bank0
  8298  22A9  01D1               	clrf	_presetSaveMode
  8299                           
  8300                           ;preset_programming.c: 40: setPedalMode();
  8301  22AA  31A0  2000  31A2   	fcall	_setPedalMode
  8302                           
  8303                           ;preset_programming.c: 41: resetRingLEDs();
  8304  22AD  31AE  261C  31A2   	fcall	_resetRingLEDs
  8305                           
  8306                           ;preset_programming.c: 42: showSave();
  8307  22B0  31AD  25F0  31A2   	fcall	_showSave
  8308  22B3                     l8508:	
  8309                           
  8310                           ;preset_programming.c: 44: }
  8311                           ;preset_programming.c: 45: }
  8312                           ;preset_programming.c: 47: wait_ms(20);
  8313  22B3  3014               	movlw	20
  8314  22B4  0021               	movlb	1	; select bank1
  8315  22B5  00AC               	movwf	wait_ms@timeSec^(0+128)
  8316  22B6  3000               	movlw	0
  8317  22B7  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8318  22B8  31A0  20B3         	fcall	_wait_ms
  8319  22BA  0008               	return
  8320  22BB                     __end_of_setDoublePressState:	
  8321                           
  8322                           	psect	text9
  8323  2DF0                     __ptext9:	
  8324 ;; *************** function _showSave *****************
  8325 ;; Defined at:
  8326 ;;		line 112 in file "LEDs.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;		None
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;		None
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      void 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8342 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8343 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8344 ;;Total ram usage:        1 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    6
  8347 ;; This function calls:
  8348 ;;		_ring_tactiles
  8349 ;;		_solidring_tactiles
  8350 ;; This function is called by:
  8351 ;;		_setDoublePressState
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _showSave
  8357  2DF0                     _showSave:	
  8358                           
  8359                           ;LEDs.c: 113: suspend_blink = 1;
  8360                           
  8361                           ;incstack = 0
  8362                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8363  2DF0  3001               	movlw	1
  8364  2DF1  0021               	movlb	1	; select bank1
  8365  2DF2  00B7               	movwf	??_showSave^(0+128)
  8366  2DF3  0837               	movf	??_showSave^(0+128),w
  8367  2DF4  0022               	movlb	2	; select bank2
  8368  2DF5  00ED               	movwf	_suspend_blink^(0+256)	;volatile
  8369                           
  8370                           ;LEDs.c: 114: ring_tactiles();
  8371  2DF6  31A4  249D  31AD   	fcall	_ring_tactiles
  8372                           
  8373                           ;LEDs.c: 115: ring_tactiles();
  8374  2DF9  31A4  249D  31AD   	fcall	_ring_tactiles
  8375                           
  8376                           ;LEDs.c: 116: solidring_tactiles();
  8377  2DFC  31A2  22FB  31AD   	fcall	_solidring_tactiles
  8378                           
  8379                           ;LEDs.c: 117: solidring_tactiles();
  8380  2DFF  31A2  22FB         	fcall	_solidring_tactiles
  8381                           
  8382                           ;LEDs.c: 118: suspend_blink = 0;
  8383  2E01  0022               	movlb	2	; select bank2
  8384  2E02  01ED               	clrf	_suspend_blink^(0+256)	;volatile
  8385  2E03  0008               	return
  8386  2E04                     __end_of_showSave:	
  8387                           
  8388                           	psect	text10
  8389  22FB                     __ptext10:	
  8390 ;; *************** function _solidring_tactiles *****************
  8391 ;; Defined at:
  8392 ;;		line 208 in file "LEDs.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;		None
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8407 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8408 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8409 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8410 ;;Total ram usage:        3 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    5
  8413 ;; This function calls:
  8414 ;;		_set_leds_bottom
  8415 ;;		_set_leds_top
  8416 ;;		_wait_ms
  8417 ;; This function is called by:
  8418 ;;		_showSave
  8419 ;;		_showBootSequence
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           
  8424                           ;psect for function _solidring_tactiles
  8425  22FB                     _solidring_tactiles:	
  8426                           
  8427                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8428                           
  8429                           ;incstack = 0
  8430                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8431  22FB  301E               	movlw	30
  8432  22FC  0021               	movlb	1	; select bank1
  8433  22FD  00B2               	movwf	??_solidring_tactiles^(0+128)
  8434  22FE  0832               	movf	??_solidring_tactiles^(0+128),w
  8435  22FF  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8436                           
  8437                           ;LEDs.c: 210: set_leds_top(100, 1);
  8438  2300  3064               	movlw	100
  8439  2301  00A0               	movwf	set_leds_top@x^(0+128)
  8440  2302  3000               	movlw	0
  8441  2303  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8442  2304  3001               	movlw	1
  8443  2305  00A2               	movwf	set_leds_top@ledState^(0+128)
  8444  2306  3000               	movlw	0
  8445  2307  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8446  2308  31A5  25E3  31A2   	fcall	_set_leds_top
  8447                           
  8448                           ;LEDs.c: 211: set_leds_bottom(100);
  8449  230B  3064               	movlw	100
  8450  230C  0021               	movlb	1	; select bank1
  8451  230D  00A0               	movwf	set_leds_bottom@x^(0+128)
  8452  230E  3000               	movlw	0
  8453  230F  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8454  2310  31A1  218D  31A2   	fcall	_set_leds_bottom
  8455                           
  8456                           ;LEDs.c: 212: wait_ms(ring_delay);
  8457  2313  0021               	movlb	1	; select bank1
  8458  2314  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8459  2315  00B2               	movwf	??_solidring_tactiles^(0+128)
  8460  2316  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8461  2317  0832               	movf	??_solidring_tactiles^(0+128),w
  8462  2318  00AC               	movwf	wait_ms@timeSec^(0+128)
  8463  2319  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8464  231A  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8465  231B  31A0  20B3  31A2   	fcall	_wait_ms
  8466                           
  8467                           ;LEDs.c: 214: set_leds_top(0, 1);
  8468  231E  3000               	movlw	0
  8469  231F  0021               	movlb	1	; select bank1
  8470  2320  00A0               	movwf	set_leds_top@x^(0+128)
  8471  2321  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8472  2322  3001               	movlw	1
  8473  2323  00A2               	movwf	set_leds_top@ledState^(0+128)
  8474  2324  3000               	movlw	0
  8475  2325  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8476  2326  31A5  25E3  31A2   	fcall	_set_leds_top
  8477                           
  8478                           ;LEDs.c: 215: set_leds_bottom(0);
  8479  2329  3000               	movlw	0
  8480  232A  0021               	movlb	1	; select bank1
  8481  232B  00A0               	movwf	set_leds_bottom@x^(0+128)
  8482  232C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8483  232D  31A1  218D  31A2   	fcall	_set_leds_bottom
  8484                           
  8485                           ;LEDs.c: 216: wait_ms(ring_delay);
  8486  2330  0021               	movlb	1	; select bank1
  8487  2331  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8488  2332  00B2               	movwf	??_solidring_tactiles^(0+128)
  8489  2333  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8490  2334  0832               	movf	??_solidring_tactiles^(0+128),w
  8491  2335  00AC               	movwf	wait_ms@timeSec^(0+128)
  8492  2336  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8493  2337  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8494  2338  31A0  20B3         	fcall	_wait_ms
  8495  233A  0008               	return
  8496  233B                     __end_of_solidring_tactiles:	
  8497                           
  8498                           	psect	text11
  8499  249D                     __ptext11:	
  8500 ;; *************** function _ring_tactiles *****************
  8501 ;; Defined at:
  8502 ;;		line 196 in file "LEDs.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;		None
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;  iLed            2   21[BANK1 ] int 
  8507 ;;  iLed            2   19[BANK1 ] int 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  1    wreg      void 
  8510 ;; Registers used:
  8511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8518 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8519 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8520 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8521 ;;Total ram usage:        5 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    5
  8524 ;; This function calls:
  8525 ;;		_set_leds_bottom
  8526 ;;		_set_leds_top
  8527 ;;		_wait_ms
  8528 ;; This function is called by:
  8529 ;;		_showSave
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           
  8534                           ;psect for function _ring_tactiles
  8535  249D                     _ring_tactiles:	
  8536                           
  8537                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8538                           
  8539                           ;incstack = 0
  8540                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8541  249D  3001               	movlw	1
  8542  249E  0021               	movlb	1	; select bank1
  8543  249F  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8544  24A0  3000               	movlw	0
  8545  24A1  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8546  24A2  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8547  24A3  3A80               	xorlw	128
  8548  24A4  00B2               	movwf	??_ring_tactiles^(0+128)
  8549  24A5  3080               	movlw	128
  8550  24A6  0232               	subwf	??_ring_tactiles^(0+128),w
  8551  24A7  1D03               	skipz
  8552  24A8  2CAB               	goto	u8345
  8553  24A9  3007               	movlw	7
  8554  24AA  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8555  24AB                     u8345:	
  8556  24AB  1803               	btfsc	3,0
  8557  24AC  2CD1               	goto	l7984
  8558  24AD                     l7976:	
  8559                           
  8560                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8561  24AD  0021               	movlb	1	; select bank1
  8562  24AE  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8563  24AF  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8564  24B0  0833               	movf	ring_tactiles@iLed^(0+128),w
  8565  24B1  00A0               	movwf	set_leds_top@x^(0+128)
  8566  24B2  3001               	movlw	1
  8567  24B3  00A2               	movwf	set_leds_top@ledState^(0+128)
  8568  24B4  3000               	movlw	0
  8569  24B5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8570  24B6  31A5  25E3  31A4   	fcall	_set_leds_top
  8571                           
  8572                           ;LEDs.c: 199: wait_ms(5);
  8573  24B9  3005               	movlw	5
  8574  24BA  0021               	movlb	1	; select bank1
  8575  24BB  00AC               	movwf	wait_ms@timeSec^(0+128)
  8576  24BC  3000               	movlw	0
  8577  24BD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8578  24BE  31A0  20B3  31A4   	fcall	_wait_ms
  8579  24C1  3001               	movlw	1
  8580  24C2  0021               	movlb	1	; select bank1
  8581  24C3  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8582  24C4  3000               	movlw	0
  8583  24C5  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8584  24C6  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8585  24C7  3A80               	xorlw	128
  8586  24C8  00B2               	movwf	??_ring_tactiles^(0+128)
  8587  24C9  3080               	movlw	128
  8588  24CA  0232               	subwf	??_ring_tactiles^(0+128),w
  8589  24CB  1D03               	skipz
  8590  24CC  2CCF               	goto	u8355
  8591  24CD  3007               	movlw	7
  8592  24CE  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8593  24CF                     u8355:	
  8594  24CF  1C03               	skipc
  8595  24D0  2CAD               	goto	l7976
  8596  24D1                     l7984:	
  8597                           
  8598                           ;LEDs.c: 200: }
  8599                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8600  24D1  3005               	movlw	5
  8601  24D2  0021               	movlb	1	; select bank1
  8602  24D3  00B5               	movwf	ring_tactiles@iLed_1532^(0+128)
  8603  24D4  3000               	movlw	0
  8604  24D5  00B6               	movwf	(ring_tactiles@iLed_1532^(0+128)+1)
  8605  24D6                     L4:	
  8606  24D6  1BB6               	btfsc	(ring_tactiles@iLed_1532+1)^(0+128),7
  8607  24D7  0008               	return
  8608                           
  8609                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8610  24D8  0836               	movf	(ring_tactiles@iLed_1532+1)^(0+128),w
  8611  24D9  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8612  24DA  0835               	movf	ring_tactiles@iLed_1532^(0+128),w
  8613  24DB  00A0               	movwf	set_leds_bottom@x^(0+128)
  8614  24DC  31A1  218D  31A4   	fcall	_set_leds_bottom
  8615                           
  8616                           ;LEDs.c: 203: wait_ms(5);
  8617  24DF  3005               	movlw	5
  8618  24E0  0021               	movlb	1	; select bank1
  8619  24E1  00AC               	movwf	wait_ms@timeSec^(0+128)
  8620  24E2  3000               	movlw	0
  8621  24E3  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8622  24E4  31A0  20B3  31A4   	fcall	_wait_ms
  8623  24E7  30FF               	movlw	255
  8624  24E8  0021               	movlb	1	; select bank1
  8625  24E9  07B5               	addwf	ring_tactiles@iLed_1532^(0+128),f
  8626  24EA  30FF               	movlw	255
  8627  24EB  3DB6               	addwfc	(ring_tactiles@iLed_1532+1)^(0+128),f
  8628  24EC  2CD6               	goto	L4
  8629  24ED                     __end_of_ring_tactiles:	
  8630                           
  8631                           	psect	text12
  8632  2000                     __ptext12:	
  8633 ;; *************** function _setPedalMode *****************
  8634 ;; Defined at:
  8635 ;;		line 119 in file "tactiles.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;		None
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      void 
  8642 ;; Registers used:
  8643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8653 ;;Total ram usage:        0 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    5
  8656 ;; This function calls:
  8657 ;;		_resetRingLEDs
  8658 ;;		_setExpressionDisplay
  8659 ;;		_setPresetDisplay
  8660 ;; This function is called by:
  8661 ;;		_update_mode
  8662 ;;		_setDoublePressState
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           
  8667                           ;psect for function _setPedalMode
  8668  2000                     _setPedalMode:	
  8669                           
  8670                           ;tactiles.c: 120: switch (mode2_state) {
  8671                           
  8672                           ;incstack = 0
  8673                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8674  2000  2816               	goto	l8184
  8675  2001                     l997:	
  8676                           ;tactiles.c: 121: case 0:
  8677                           
  8678                           
  8679                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8680  2001  0022               	movlb	2	; select bank2
  8681  2002  108D               	bcf	13,1	;volatile
  8682                           
  8683                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8684  2003  100D               	bcf	13,0	;volatile
  8685                           
  8686                           ;tactiles.c: 124: resetRingLEDs();
  8687  2004  31AE  261C         	fcall	_resetRingLEDs
  8688                           
  8689                           ;tactiles.c: 125: break;
  8690  2006  0008               	return
  8691  2007                     l999:	
  8692                           ;tactiles.c: 126: case 1:
  8693                           
  8694                           
  8695                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8696  2007  0022               	movlb	2	; select bank2
  8697  2008  108D               	bcf	13,1	;volatile
  8698                           
  8699                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8700  2009  140D               	bsf	13,0	;volatile
  8701                           
  8702                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8703  200A  086F               	movf	_presetChannel^(0+256),w
  8704  200B  31A1  2153         	fcall	_setPresetDisplay
  8705                           
  8706                           ;tactiles.c: 130: break;
  8707  200D  0008               	return
  8708  200E                     l1000:	
  8709                           ;tactiles.c: 131: case 2:
  8710                           
  8711                           
  8712                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8713  200E  0022               	movlb	2	; select bank2
  8714  200F  148D               	bsf	13,1	;volatile
  8715                           
  8716                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8717  2010  100D               	bcf	13,0	;volatile
  8718                           
  8719                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8720  2011  0023               	movlb	3	; select bank3
  8721  2012  0863               	movf	_expressionChannel^(0+384),w
  8722  2013  31AE  2604         	fcall	_setExpressionDisplay
  8723                           
  8724                           ;tactiles.c: 136: }
  8725                           
  8726                           ;tactiles.c: 135: break;
  8727  2015  0008               	return
  8728  2016                     l8184:	
  8729  2016  0020               	movlb	0	; select bank0
  8730  2017  0850               	movf	_mode2_state,w
  8731                           
  8732                           ; Switch size 1, requested type "space"
  8733                           ; Number of cases is 3, Range of values is 0 to 2
  8734                           ; switch strategies available:
  8735                           ; Name         Instructions Cycles
  8736                           ; simple_byte           10     6 (average)
  8737                           ; direct_byte           12     6 (fixed)
  8738                           ; jumptable            260     6 (fixed)
  8739                           ;	Chosen strategy is simple_byte
  8740  2018  3A00               	xorlw	0	; case 0
  8741  2019  1903               	skipnz
  8742  201A  2801               	goto	l997
  8743  201B  3A01               	xorlw	1	; case 1
  8744  201C  1903               	skipnz
  8745  201D  2807               	goto	l999
  8746  201E  3A03               	xorlw	3	; case 2
  8747  201F  1903               	skipnz
  8748  2020  280E               	goto	l1000
  8749  2021  2822               	goto	l1001
  8750  2022                     l1001:	
  8751  2022  0008               	return
  8752  2023                     __end_of_setPedalMode:	
  8753                           
  8754                           	psect	text13
  8755  2153                     __ptext13:	
  8756 ;; *************** function _setPresetDisplay *****************
  8757 ;; Defined at:
  8758 ;;		line 51 in file "preset_programming.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;  ledChannel      1    wreg     unsigned char 
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8763 ;; Return value:  Size  Location     Type
  8764 ;;                  1    wreg      void 
  8765 ;; Registers used:
  8766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8773 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8774 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8775 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8776 ;;Total ram usage:        3 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; Hardware stack levels required when called:    4
  8779 ;; This function calls:
  8780 ;;		_set_leds_bottom
  8781 ;;		_set_leds_top
  8782 ;; This function is called by:
  8783 ;;		_setPedalMode
  8784 ;;		_update_selectMode
  8785 ;;		_setDoublePressState
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           
  8790                           ;psect for function _setPresetDisplay
  8791  2153                     _setPresetDisplay:	
  8792                           
  8793                           ;incstack = 0
  8794                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8795                           ;setPresetDisplay@ledChannel stored from wreg
  8796  2153  0021               	movlb	1	; select bank1
  8797  2154  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8798                           
  8799                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8800  2155  3006               	movlw	6
  8801  2156  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8802  2157  1803               	skipnc
  8803  2158  296F               	goto	l8004
  8804                           
  8805                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8806  2159  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8807  215A  00A4               	movwf	??_setPresetDisplay^(0+128)
  8808  215B  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8809  215C  0824               	movf	??_setPresetDisplay^(0+128),w
  8810  215D  00A0               	movwf	set_leds_top@x^(0+128)
  8811  215E  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8812  215F  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8813  2160  3001               	movlw	1
  8814  2161  00A2               	movwf	set_leds_top@ledState^(0+128)
  8815  2162  3000               	movlw	0
  8816  2163  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8817  2164  31A5  25E3  31A1   	fcall	_set_leds_top
  8818                           
  8819                           ;preset_programming.c: 54: set_leds_bottom(6);
  8820  2167  3006               	movlw	6
  8821  2168  0021               	movlb	1	; select bank1
  8822  2169  00A0               	movwf	set_leds_bottom@x^(0+128)
  8823  216A  3000               	movlw	0
  8824  216B  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8825  216C  31A1  218D         	fcall	_set_leds_bottom
  8826                           
  8827                           ;preset_programming.c: 55: } else {
  8828  216E  0008               	return
  8829  216F                     l8004:	
  8830                           
  8831                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8832  216F  3006               	movlw	6
  8833  2170  0021               	movlb	1	; select bank1
  8834  2171  00A0               	movwf	set_leds_top@x^(0+128)
  8835  2172  3000               	movlw	0
  8836  2173  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8837  2174  3001               	movlw	1
  8838  2175  00A2               	movwf	set_leds_top@ledState^(0+128)
  8839  2176  3000               	movlw	0
  8840  2177  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8841  2178  31A5  25E3  31A1   	fcall	_set_leds_top
  8842                           
  8843                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8844  217B  0021               	movlb	1	; select bank1
  8845  217C  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8846  217D  00A4               	movwf	??_setPresetDisplay^(0+128)
  8847  217E  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8848  217F  09A4               	comf	??_setPresetDisplay^(0+128),f
  8849  2180  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8850  2181  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8851  2182  1903               	skipnz
  8852  2183  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8853  2184  0824               	movf	??_setPresetDisplay^(0+128),w
  8854  2185  3E0B               	addlw	11
  8855  2186  00A0               	movwf	set_leds_bottom@x^(0+128)
  8856  2187  3000               	movlw	0
  8857  2188  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8858  2189  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8859  218A  31A1  218D         	fcall	_set_leds_bottom
  8860  218C  0008               	return
  8861  218D                     __end_of_setPresetDisplay:	
  8862                           
  8863                           	psect	text14
  8864  2E04                     __ptext14:	
  8865 ;; *************** function _setExpressionDisplay *****************
  8866 ;; Defined at:
  8867 ;;		line 66 in file "preset_programming.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;  ledChannel      1    wreg     unsigned char 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  1    wreg      void 
  8874 ;; Registers used:
  8875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8882 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8883 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8884 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8885 ;;Total ram usage:        3 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    4
  8888 ;; This function calls:
  8889 ;;		_set_leds_bottom
  8890 ;;		_set_leds_top
  8891 ;; This function is called by:
  8892 ;;		_setPedalMode
  8893 ;;		_update_selectMode
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           
  8898                           ;psect for function _setExpressionDisplay
  8899  2E04                     _setExpressionDisplay:	
  8900                           
  8901                           ;incstack = 0
  8902                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8903                           ;setExpressionDisplay@ledChannel stored from wreg
  8904  2E04  0021               	movlb	1	; select bank1
  8905  2E05  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8906                           
  8907                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8908  2E06  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8909  2E07  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8910  2E08  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8911  2E09  0824               	movf	??_setExpressionDisplay^(0+128),w
  8912  2E0A  00A0               	movwf	set_leds_top@x^(0+128)
  8913  2E0B  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8914  2E0C  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8915  2E0D  3001               	movlw	1
  8916  2E0E  00A2               	movwf	set_leds_top@ledState^(0+128)
  8917  2E0F  3000               	movlw	0
  8918  2E10  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8919  2E11  31A5  25E3  31AE   	fcall	_set_leds_top
  8920                           
  8921                           ;preset_programming.c: 68: set_leds_bottom(6);
  8922  2E14  3006               	movlw	6
  8923  2E15  0021               	movlb	1	; select bank1
  8924  2E16  00A0               	movwf	set_leds_bottom@x^(0+128)
  8925  2E17  3000               	movlw	0
  8926  2E18  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8927  2E19  31A1  218D         	fcall	_set_leds_bottom
  8928  2E1B  0008               	return
  8929  2E1C                     __end_of_setExpressionDisplay:	
  8930                           
  8931                           	psect	text15
  8932  2E1C                     __ptext15:	
  8933 ;; *************** function _resetRingLEDs *****************
  8934 ;; Defined at:
  8935 ;;		line 61 in file "preset_programming.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  1    wreg      void 
  8942 ;; Registers used:
  8943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8953 ;;Total ram usage:        0 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    4
  8956 ;; This function calls:
  8957 ;;		_set_leds_bottom
  8958 ;;		_set_leds_top
  8959 ;; This function is called by:
  8960 ;;		_update_mode
  8961 ;;		_setPedalMode
  8962 ;;		_setDoublePressState
  8963 ;; This function uses a non-reentrant model
  8964 ;;
  8965                           
  8966                           
  8967                           ;psect for function _resetRingLEDs
  8968  2E1C                     _resetRingLEDs:	
  8969                           
  8970                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8971                           
  8972                           ;incstack = 0
  8973                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8974  2E1C  0020               	movlb	0	; select bank0
  8975  2E1D  085B               	movf	_top_push_state+1,w
  8976  2E1E  0021               	movlb	1	; select bank1
  8977  2E1F  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8978  2E20  0020               	movlb	0	; select bank0
  8979  2E21  085A               	movf	_top_push_state,w
  8980  2E22  0021               	movlb	1	; select bank1
  8981  2E23  00A0               	movwf	set_leds_top@x^(0+128)
  8982  2E24  3001               	movlw	1
  8983  2E25  00A2               	movwf	set_leds_top@ledState^(0+128)
  8984  2E26  3000               	movlw	0
  8985  2E27  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8986  2E28  31A5  25E3  31AE   	fcall	_set_leds_top
  8987                           
  8988                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8989  2E2B  0020               	movlb	0	; select bank0
  8990  2E2C  0857               	movf	_bottom_push_state+1,w
  8991  2E2D  0021               	movlb	1	; select bank1
  8992  2E2E  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8993  2E2F  0020               	movlb	0	; select bank0
  8994  2E30  0856               	movf	_bottom_push_state,w
  8995  2E31  0021               	movlb	1	; select bank1
  8996  2E32  00A0               	movwf	set_leds_bottom@x^(0+128)
  8997  2E33  31A1  218D         	fcall	_set_leds_bottom
  8998  2E35  0008               	return
  8999  2E36                     __end_of_resetRingLEDs:	
  9000                           
  9001                           	psect	text16
  9002  0DDD                     __ptext16:	
  9003 ;; *************** function _updateModulationArray *****************
  9004 ;; Defined at:
  9005 ;;		line 44 in file "modulation.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;		None
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  thisAngle       2   56[BANK2 ] int 
  9010 ;;  iAngle          1   58[BANK2 ] unsigned char 
  9011 ;;  subDiv          2   54[BANK2 ] int 
  9012 ;;  angleFactor     2   52[BANK2 ] int 
  9013 ;; Return value:  Size  Location     Type
  9014 ;;                  1    wreg      void 
  9015 ;; Registers used:
  9016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9023 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9024 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9025 ;;      Totals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9026 ;;Total ram usage:       11 bytes
  9027 ;; Hardware stack levels used:    1
  9028 ;; Hardware stack levels required when called:    7
  9029 ;; This function calls:
  9030 ;;		___awdiv
  9031 ;;		___awtoft
  9032 ;;		___wmul
  9033 ;;		_getModulationSubdivision
  9034 ;;		_modCos
  9035 ;;		_modSaw
  9036 ;;		_modSawRev
  9037 ;;		_modSquare
  9038 ;;		_modTri
  9039 ;; This function is called by:
  9040 ;;		_main
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           
  9045                           ;psect for function _updateModulationArray
  9046  0DDD                     _updateModulationArray:	
  9047                           
  9048                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9049                           
  9050                           ;incstack = 0
  9051                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9052  0DDD  31A0  2053  318D   	fcall	_getModulationSubdivision
  9053  0DE0  0021               	movlb	1	; select bank1
  9054  0DE1  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9055  0DE2  0022               	movlb	2	; select bank2
  9056  0DE3  00D7               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9057  0DE4  0021               	movlb	1	; select bank1
  9058  0DE5  0820               	movf	?_getModulationSubdivision^(0+128),w
  9059  0DE6  0022               	movlb	2	; select bank2
  9060  0DE7  00D6               	movwf	updateModulationArray@subDiv^(0+256)
  9061                           
  9062                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9063  0DE8  307A               	movlw	122
  9064  0DE9  0086               	movwf	6
  9065  0DEA  3024               	movlw	36
  9066  0DEB  0087               	movwf	7
  9067  0DEC  3F40               	moviw [0]fsr1
  9068  0DED  00D0               	movwf	??_updateModulationArray^(0+256)
  9069  0DEE  3F41               	moviw [1]fsr1
  9070  0DEF  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9071  0DF0  0020               	movlb	0	; select bank0
  9072  0DF1  0857               	movf	_bottom_push_state+1,w
  9073  0DF2  0022               	movlb	2	; select bank2
  9074  0DF3  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9075  0DF4  1D03               	skipz
  9076  0DF5  2DFA               	goto	u9285
  9077  0DF6  0020               	movlb	0	; select bank0
  9078  0DF7  0856               	movf	_bottom_push_state,w
  9079  0DF8  0022               	movlb	2	; select bank2
  9080  0DF9  0650               	xorwf	??_updateModulationArray^(0+256),w
  9081  0DFA                     u9285:	
  9082  0DFA  1D03               	skipz
  9083  0DFB  2E20               	goto	l8756
  9084  0DFC  307C               	movlw	124
  9085  0DFD  0086               	movwf	6
  9086  0DFE  3024               	movlw	36
  9087  0DFF  0087               	movwf	7
  9088  0E00  3F40               	moviw [0]fsr1
  9089  0E01  00D0               	movwf	??_updateModulationArray^(0+256)
  9090  0E02  3F41               	moviw [1]fsr1
  9091  0E03  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9092  0E04  0023               	movlb	3	; select bank3
  9093  0E05  085C               	movf	(_symmetry+1)^(0+384),w
  9094  0E06  0022               	movlb	2	; select bank2
  9095  0E07  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9096  0E08  1D03               	skipz
  9097  0E09  2E0E               	goto	u9295
  9098  0E0A  0023               	movlb	3	; select bank3
  9099  0E0B  085B               	movf	_symmetry^(0+384),w
  9100  0E0C  0022               	movlb	2	; select bank2
  9101  0E0D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9102  0E0E                     u9295:	
  9103  0E0E  1D03               	skipz
  9104  0E0F  2E20               	goto	l8756
  9105  0E10  307E               	movlw	126
  9106  0E11  0086               	movwf	6
  9107  0E12  3024               	movlw	36
  9108  0E13  0087               	movwf	7
  9109  0E14  3F40               	moviw [0]fsr1
  9110  0E15  00D0               	movwf	??_updateModulationArray^(0+256)
  9111  0E16  3F41               	moviw [1]fsr1
  9112  0E17  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9113  0E18  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9114  0E19  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9115  0E1A  1D03               	skipz
  9116  0E1B  2E1E               	goto	u9305
  9117  0E1C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9118  0E1D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9119  0E1E                     u9305:	
  9120  0E1E  1903               	btfsc	3,2
  9121  0E1F  0008               	return
  9122  0E20                     l8756:	
  9123                           ;modulation.c: 48: return;
  9124                           
  9125                           
  9126                           ;modulation.c: 49: }
  9127                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9128  0E20  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9129  0E21  0021               	movlb	1	; select bank1
  9130  0E22  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9131  0E23  0022               	movlb	2	; select bank2
  9132  0E24  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9133  0E25  0021               	movlb	1	; select bank1
  9134  0E26  00A0               	movwf	___awdiv@divisor^(0+128)
  9135  0E27  3068               	movlw	104
  9136  0E28  00A2               	movwf	___awdiv@dividend^(0+128)
  9137  0E29  3001               	movlw	1
  9138  0E2A  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9139  0E2B  31A5  253E  318D   	fcall	___awdiv
  9140  0E2E  0021               	movlb	1	; select bank1
  9141  0E2F  0821               	movf	(?___awdiv+1)^(0+128),w
  9142  0E30  0022               	movlb	2	; select bank2
  9143  0E31  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9144  0E32  0021               	movlb	1	; select bank1
  9145  0E33  0820               	movf	?___awdiv^(0+128),w
  9146  0E34  0022               	movlb	2	; select bank2
  9147  0E35  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9148                           
  9149                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9150  0E36  01DA               	clrf	updateModulationArray@iAngle^(0+256)
  9151  0E37                     l8780:	
  9152  0E37  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9153  0E38  3A80               	xorlw	128
  9154  0E39  3C80               	sublw	128
  9155  0E3A  1D03               	skipz
  9156  0E3B  2E3E               	goto	u9315
  9157  0E3C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9158  0E3D  025A               	subwf	updateModulationArray@iAngle^(0+256),w
  9159  0E3E                     u9315:	
  9160  0E3E  1803               	btfsc	3,0
  9161  0E3F  2FE4               	goto	l8782
  9162                           
  9163                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9164  0E40  0022               	movlb	2	; select bank2
  9165  0E41  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9166  0E42  00D0               	movwf	??_updateModulationArray^(0+256)
  9167  0E43  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9168  0E44  0850               	movf	??_updateModulationArray^(0+256),w
  9169  0E45  00AE               	movwf	___wmul@multiplier^(0+256)
  9170  0E46  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9171  0E47  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9172  0E48  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9173  0E49  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9174  0E4A  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9175  0E4B  00B0               	movwf	___wmul@multiplicand^(0+256)
  9176  0E4C  31AE  2650  318D   	fcall	___wmul
  9177  0E4F  0022               	movlb	2	; select bank2
  9178  0E50  082F               	movf	(?___wmul+1)^(0+256),w
  9179  0E51  00D9               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9180  0E52  082E               	movf	?___wmul^(0+256),w
  9181  0E53  00D8               	movwf	updateModulationArray@thisAngle^(0+256)
  9182                           
  9183                           ;modulation.c: 54: switch (bottom_push_state) {
  9184  0E54  2FC7               	goto	l8776
  9185  0E55                     l8762:	
  9186                           ;modulation.c: 55: case 1:
  9187                           
  9188                           
  9189                           ;modulation.c: 56: modArray[iAngle] = modCos(thisAngle, symmetry);
  9190  0E55  0022               	movlb	2	; select bank2
  9191  0E56  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9192  0E57  0021               	movlb	1	; select bank1
  9193  0E58  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9194  0E59  0022               	movlb	2	; select bank2
  9195  0E5A  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9196  0E5B  0021               	movlb	1	; select bank1
  9197  0E5C  00A8               	movwf	___awtoft@c^(0+128)
  9198  0E5D  31AF  2705  318D   	fcall	___awtoft
  9199  0E60  0021               	movlb	1	; select bank1
  9200  0E61  0828               	movf	?___awtoft^(0+128),w
  9201  0E62  0022               	movlb	2	; select bank2
  9202  0E63  00B4               	movwf	modCos@angle^(0+256)
  9203  0E64  0021               	movlb	1	; select bank1
  9204  0E65  0829               	movf	(?___awtoft+1)^(0+128),w
  9205  0E66  0022               	movlb	2	; select bank2
  9206  0E67  00B5               	movwf	(modCos@angle+1)^(0+256)
  9207  0E68  0021               	movlb	1	; select bank1
  9208  0E69  082A               	movf	(?___awtoft+2)^(0+128),w
  9209  0E6A  0022               	movlb	2	; select bank2
  9210  0E6B  00B6               	movwf	(modCos@angle+2)^(0+256)
  9211  0E6C  0023               	movlb	3	; select bank3
  9212  0E6D  085C               	movf	(_symmetry+1)^(0+384),w
  9213  0E6E  0021               	movlb	1	; select bank1
  9214  0E6F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9215  0E70  0023               	movlb	3	; select bank3
  9216  0E71  085B               	movf	_symmetry^(0+384),w
  9217  0E72  0021               	movlb	1	; select bank1
  9218  0E73  00A8               	movwf	___awtoft@c^(0+128)
  9219  0E74  31AF  2705  318D   	fcall	___awtoft
  9220  0E77  0021               	movlb	1	; select bank1
  9221  0E78  0828               	movf	?___awtoft^(0+128),w
  9222  0E79  0022               	movlb	2	; select bank2
  9223  0E7A  00B7               	movwf	modCos@inflection^(0+256)
  9224  0E7B  0021               	movlb	1	; select bank1
  9225  0E7C  0829               	movf	(?___awtoft+1)^(0+128),w
  9226  0E7D  0022               	movlb	2	; select bank2
  9227  0E7E  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9228  0E7F  0021               	movlb	1	; select bank1
  9229  0E80  082A               	movf	(?___awtoft+2)^(0+128),w
  9230  0E81  0022               	movlb	2	; select bank2
  9231  0E82  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9232  0E83  3194  249A  318D   	fcall	_modCos
  9233  0E86  0022               	movlb	2	; select bank2
  9234  0E87  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9235  0E88  00D0               	movwf	??_updateModulationArray^(0+256)
  9236  0E89  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9237  0E8A  35D0               	lslf	??_updateModulationArray^(0+256),f
  9238  0E8B  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9239  0E8C  308A               	movlw	138
  9240  0E8D  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9241  0E8E  3023               	movlw	35
  9242  0E8F  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9243  0E90  0850               	movf	??_updateModulationArray^(0+256),w
  9244  0E91  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9245  0E92  0086               	movwf	6
  9246  0E93  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9247  0E94  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9248  0E95  0087               	movwf	7
  9249  0E96  0834               	movf	?_modCos^(0+256),w
  9250  0E97  3FC0               	movwi [0]fsr1
  9251  0E98  0835               	movf	(?_modCos+1)^(0+256),w
  9252  0E99  3FC1               	movwi [1]fsr1
  9253                           
  9254                           ;modulation.c: 57: break;
  9255  0E9A  2FDE               	goto	l8778
  9256  0E9B                     l8764:	
  9257                           ;modulation.c: 58: case 2:
  9258                           
  9259                           
  9260                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9261  0E9B  0022               	movlb	2	; select bank2
  9262  0E9C  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9263  0E9D  0021               	movlb	1	; select bank1
  9264  0E9E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9265  0E9F  0022               	movlb	2	; select bank2
  9266  0EA0  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9267  0EA1  0021               	movlb	1	; select bank1
  9268  0EA2  00A8               	movwf	___awtoft@c^(0+128)
  9269  0EA3  31AF  2705  318D   	fcall	___awtoft
  9270  0EA6  0021               	movlb	1	; select bank1
  9271  0EA7  0828               	movf	?___awtoft^(0+128),w
  9272  0EA8  0022               	movlb	2	; select bank2
  9273  0EA9  00AE               	movwf	modTri@angle^(0+256)
  9274  0EAA  0021               	movlb	1	; select bank1
  9275  0EAB  0829               	movf	(?___awtoft+1)^(0+128),w
  9276  0EAC  0022               	movlb	2	; select bank2
  9277  0EAD  00AF               	movwf	(modTri@angle+1)^(0+256)
  9278  0EAE  0021               	movlb	1	; select bank1
  9279  0EAF  082A               	movf	(?___awtoft+2)^(0+128),w
  9280  0EB0  0022               	movlb	2	; select bank2
  9281  0EB1  00B0               	movwf	(modTri@angle+2)^(0+256)
  9282  0EB2  0023               	movlb	3	; select bank3
  9283  0EB3  085C               	movf	(_symmetry+1)^(0+384),w
  9284  0EB4  0021               	movlb	1	; select bank1
  9285  0EB5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9286  0EB6  0023               	movlb	3	; select bank3
  9287  0EB7  085B               	movf	_symmetry^(0+384),w
  9288  0EB8  0021               	movlb	1	; select bank1
  9289  0EB9  00A8               	movwf	___awtoft@c^(0+128)
  9290  0EBA  31AF  2705  318D   	fcall	___awtoft
  9291  0EBD  0021               	movlb	1	; select bank1
  9292  0EBE  0828               	movf	?___awtoft^(0+128),w
  9293  0EBF  0022               	movlb	2	; select bank2
  9294  0EC0  00B1               	movwf	modTri@inflection^(0+256)
  9295  0EC1  0021               	movlb	1	; select bank1
  9296  0EC2  0829               	movf	(?___awtoft+1)^(0+128),w
  9297  0EC3  0022               	movlb	2	; select bank2
  9298  0EC4  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9299  0EC5  0021               	movlb	1	; select bank1
  9300  0EC6  082A               	movf	(?___awtoft+2)^(0+128),w
  9301  0EC7  0022               	movlb	2	; select bank2
  9302  0EC8  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9303  0EC9  318A  2213  318D   	fcall	_modTri
  9304  0ECC  0022               	movlb	2	; select bank2
  9305  0ECD  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9306  0ECE  00D0               	movwf	??_updateModulationArray^(0+256)
  9307  0ECF  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9308  0ED0  35D0               	lslf	??_updateModulationArray^(0+256),f
  9309  0ED1  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9310  0ED2  308A               	movlw	138
  9311  0ED3  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9312  0ED4  3023               	movlw	35
  9313  0ED5  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9314  0ED6  0850               	movf	??_updateModulationArray^(0+256),w
  9315  0ED7  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9316  0ED8  0086               	movwf	6
  9317  0ED9  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9318  0EDA  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9319  0EDB  0087               	movwf	7
  9320  0EDC  082E               	movf	?_modTri^(0+256),w
  9321  0EDD  3FC0               	movwi [0]fsr1
  9322  0EDE  082F               	movf	(?_modTri+1)^(0+256),w
  9323  0EDF  3FC1               	movwi [1]fsr1
  9324                           
  9325                           ;modulation.c: 60: break;
  9326  0EE0  2FDE               	goto	l8778
  9327  0EE1                     l8766:	
  9328                           ;modulation.c: 61: case 3:
  9329                           
  9330                           
  9331                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9332  0EE1  0022               	movlb	2	; select bank2
  9333  0EE2  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9334  0EE3  0021               	movlb	1	; select bank1
  9335  0EE4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9336  0EE5  0022               	movlb	2	; select bank2
  9337  0EE6  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9338  0EE7  0021               	movlb	1	; select bank1
  9339  0EE8  00A8               	movwf	___awtoft@c^(0+128)
  9340  0EE9  31AF  2705  318D   	fcall	___awtoft
  9341  0EEC  0021               	movlb	1	; select bank1
  9342  0EED  0828               	movf	?___awtoft^(0+128),w
  9343  0EEE  0022               	movlb	2	; select bank2
  9344  0EEF  00C8               	movwf	modSquare@angle^(0+256)
  9345  0EF0  0021               	movlb	1	; select bank1
  9346  0EF1  0829               	movf	(?___awtoft+1)^(0+128),w
  9347  0EF2  0022               	movlb	2	; select bank2
  9348  0EF3  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9349  0EF4  0021               	movlb	1	; select bank1
  9350  0EF5  082A               	movf	(?___awtoft+2)^(0+128),w
  9351  0EF6  0022               	movlb	2	; select bank2
  9352  0EF7  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9353  0EF8  0023               	movlb	3	; select bank3
  9354  0EF9  085C               	movf	(_symmetry+1)^(0+384),w
  9355  0EFA  0021               	movlb	1	; select bank1
  9356  0EFB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9357  0EFC  0023               	movlb	3	; select bank3
  9358  0EFD  085B               	movf	_symmetry^(0+384),w
  9359  0EFE  0021               	movlb	1	; select bank1
  9360  0EFF  00A8               	movwf	___awtoft@c^(0+128)
  9361  0F00  31AF  2705  318D   	fcall	___awtoft
  9362  0F03  0021               	movlb	1	; select bank1
  9363  0F04  0828               	movf	?___awtoft^(0+128),w
  9364  0F05  0022               	movlb	2	; select bank2
  9365  0F06  00CB               	movwf	modSquare@inflection^(0+256)
  9366  0F07  0021               	movlb	1	; select bank1
  9367  0F08  0829               	movf	(?___awtoft+1)^(0+128),w
  9368  0F09  0022               	movlb	2	; select bank2
  9369  0F0A  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9370  0F0B  0021               	movlb	1	; select bank1
  9371  0F0C  082A               	movf	(?___awtoft+2)^(0+128),w
  9372  0F0D  0022               	movlb	2	; select bank2
  9373  0F0E  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9374  0F0F  31A2  2241  318D   	fcall	_modSquare
  9375  0F12  0022               	movlb	2	; select bank2
  9376  0F13  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9377  0F14  00D0               	movwf	??_updateModulationArray^(0+256)
  9378  0F15  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9379  0F16  35D0               	lslf	??_updateModulationArray^(0+256),f
  9380  0F17  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9381  0F18  308A               	movlw	138
  9382  0F19  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9383  0F1A  3023               	movlw	35
  9384  0F1B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9385  0F1C  0850               	movf	??_updateModulationArray^(0+256),w
  9386  0F1D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9387  0F1E  0086               	movwf	6
  9388  0F1F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9389  0F20  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9390  0F21  0087               	movwf	7
  9391  0F22  0848               	movf	?_modSquare^(0+256),w
  9392  0F23  3FC0               	movwi [0]fsr1
  9393  0F24  0849               	movf	(?_modSquare+1)^(0+256),w
  9394  0F25  3FC1               	movwi [1]fsr1
  9395                           
  9396                           ;modulation.c: 63: break;
  9397  0F26  2FDE               	goto	l8778
  9398  0F27                     l8768:	
  9399                           ;modulation.c: 64: case 4:
  9400                           
  9401                           
  9402                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9403  0F27  0022               	movlb	2	; select bank2
  9404  0F28  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9405  0F29  0021               	movlb	1	; select bank1
  9406  0F2A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9407  0F2B  0022               	movlb	2	; select bank2
  9408  0F2C  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9409  0F2D  0021               	movlb	1	; select bank1
  9410  0F2E  00A8               	movwf	___awtoft@c^(0+128)
  9411  0F2F  31AF  2705  318D   	fcall	___awtoft
  9412  0F32  0021               	movlb	1	; select bank1
  9413  0F33  0828               	movf	?___awtoft^(0+128),w
  9414  0F34  0022               	movlb	2	; select bank2
  9415  0F35  00C5               	movwf	modSawRev@angle^(0+256)
  9416  0F36  0021               	movlb	1	; select bank1
  9417  0F37  0829               	movf	(?___awtoft+1)^(0+128),w
  9418  0F38  0022               	movlb	2	; select bank2
  9419  0F39  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9420  0F3A  0021               	movlb	1	; select bank1
  9421  0F3B  082A               	movf	(?___awtoft+2)^(0+128),w
  9422  0F3C  0022               	movlb	2	; select bank2
  9423  0F3D  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9424  0F3E  0023               	movlb	3	; select bank3
  9425  0F3F  085C               	movf	(_symmetry+1)^(0+384),w
  9426  0F40  0021               	movlb	1	; select bank1
  9427  0F41  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9428  0F42  0023               	movlb	3	; select bank3
  9429  0F43  085B               	movf	_symmetry^(0+384),w
  9430  0F44  0021               	movlb	1	; select bank1
  9431  0F45  00A8               	movwf	___awtoft@c^(0+128)
  9432  0F46  31AF  2705  318D   	fcall	___awtoft
  9433  0F49  0021               	movlb	1	; select bank1
  9434  0F4A  0828               	movf	?___awtoft^(0+128),w
  9435  0F4B  0022               	movlb	2	; select bank2
  9436  0F4C  00C8               	movwf	modSawRev@inflection^(0+256)
  9437  0F4D  0021               	movlb	1	; select bank1
  9438  0F4E  0829               	movf	(?___awtoft+1)^(0+128),w
  9439  0F4F  0022               	movlb	2	; select bank2
  9440  0F50  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9441  0F51  0021               	movlb	1	; select bank1
  9442  0F52  082A               	movf	(?___awtoft+2)^(0+128),w
  9443  0F53  0022               	movlb	2	; select bank2
  9444  0F54  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9445  0F55  31AE  2688  318D   	fcall	_modSawRev
  9446  0F58  0022               	movlb	2	; select bank2
  9447  0F59  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9448  0F5A  00D0               	movwf	??_updateModulationArray^(0+256)
  9449  0F5B  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9450  0F5C  35D0               	lslf	??_updateModulationArray^(0+256),f
  9451  0F5D  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9452  0F5E  308A               	movlw	138
  9453  0F5F  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9454  0F60  3023               	movlw	35
  9455  0F61  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9456  0F62  0850               	movf	??_updateModulationArray^(0+256),w
  9457  0F63  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9458  0F64  0086               	movwf	6
  9459  0F65  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9460  0F66  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9461  0F67  0087               	movwf	7
  9462  0F68  0845               	movf	?_modSawRev^(0+256),w
  9463  0F69  3FC0               	movwi [0]fsr1
  9464  0F6A  0846               	movf	(?_modSawRev+1)^(0+256),w
  9465  0F6B  3FC1               	movwi [1]fsr1
  9466                           
  9467                           ;modulation.c: 66: break;
  9468  0F6C  2FDE               	goto	l8778
  9469  0F6D                     l8770:	
  9470                           ;modulation.c: 67: case 5:
  9471                           
  9472                           
  9473                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9474  0F6D  0022               	movlb	2	; select bank2
  9475  0F6E  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9476  0F6F  0021               	movlb	1	; select bank1
  9477  0F70  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9478  0F71  0022               	movlb	2	; select bank2
  9479  0F72  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9480  0F73  0021               	movlb	1	; select bank1
  9481  0F74  00A8               	movwf	___awtoft@c^(0+128)
  9482  0F75  31AF  2705  318D   	fcall	___awtoft
  9483  0F78  0021               	movlb	1	; select bank1
  9484  0F79  0828               	movf	?___awtoft^(0+128),w
  9485  0F7A  0022               	movlb	2	; select bank2
  9486  0F7B  00AE               	movwf	modSaw@angle^(0+256)
  9487  0F7C  0021               	movlb	1	; select bank1
  9488  0F7D  0829               	movf	(?___awtoft+1)^(0+128),w
  9489  0F7E  0022               	movlb	2	; select bank2
  9490  0F7F  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9491  0F80  0021               	movlb	1	; select bank1
  9492  0F81  082A               	movf	(?___awtoft+2)^(0+128),w
  9493  0F82  0022               	movlb	2	; select bank2
  9494  0F83  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9495  0F84  0023               	movlb	3	; select bank3
  9496  0F85  085C               	movf	(_symmetry+1)^(0+384),w
  9497  0F86  0021               	movlb	1	; select bank1
  9498  0F87  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9499  0F88  0023               	movlb	3	; select bank3
  9500  0F89  085B               	movf	_symmetry^(0+384),w
  9501  0F8A  0021               	movlb	1	; select bank1
  9502  0F8B  00A8               	movwf	___awtoft@c^(0+128)
  9503  0F8C  31AF  2705  318D   	fcall	___awtoft
  9504  0F8F  0021               	movlb	1	; select bank1
  9505  0F90  0828               	movf	?___awtoft^(0+128),w
  9506  0F91  0022               	movlb	2	; select bank2
  9507  0F92  00B1               	movwf	modSaw@inflection^(0+256)
  9508  0F93  0021               	movlb	1	; select bank1
  9509  0F94  0829               	movf	(?___awtoft+1)^(0+128),w
  9510  0F95  0022               	movlb	2	; select bank2
  9511  0F96  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9512  0F97  0021               	movlb	1	; select bank1
  9513  0F98  082A               	movf	(?___awtoft+2)^(0+128),w
  9514  0F99  0022               	movlb	2	; select bank2
  9515  0F9A  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9516  0F9B  3196  2646  318D   	fcall	_modSaw
  9517  0F9E  0022               	movlb	2	; select bank2
  9518  0F9F  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9519  0FA0  00D0               	movwf	??_updateModulationArray^(0+256)
  9520  0FA1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9521  0FA2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9522  0FA3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9523  0FA4  308A               	movlw	138
  9524  0FA5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9525  0FA6  3023               	movlw	35
  9526  0FA7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9527  0FA8  0850               	movf	??_updateModulationArray^(0+256),w
  9528  0FA9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9529  0FAA  0086               	movwf	6
  9530  0FAB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9531  0FAC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9532  0FAD  0087               	movwf	7
  9533  0FAE  082E               	movf	?_modSaw^(0+256),w
  9534  0FAF  3FC0               	movwi [0]fsr1
  9535  0FB0  082F               	movf	(?_modSaw+1)^(0+256),w
  9536  0FB1  3FC1               	movwi [1]fsr1
  9537                           
  9538                           ;modulation.c: 69: break;
  9539  0FB2  2FDE               	goto	l8778
  9540  0FB3                     l8772:	
  9541                           ;modulation.c: 70: default:
  9542                           
  9543                           
  9544                           ;modulation.c: 71: modArray[iAngle] = 0;
  9545  0FB3  0022               	movlb	2	; select bank2
  9546  0FB4  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9547  0FB5  00D0               	movwf	??_updateModulationArray^(0+256)
  9548  0FB6  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9549  0FB7  35D0               	lslf	??_updateModulationArray^(0+256),f
  9550  0FB8  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9551  0FB9  308A               	movlw	138
  9552  0FBA  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9553  0FBB  3023               	movlw	35
  9554  0FBC  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9555  0FBD  0850               	movf	??_updateModulationArray^(0+256),w
  9556  0FBE  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9557  0FBF  0086               	movwf	6
  9558  0FC0  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9559  0FC1  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9560  0FC2  0087               	movwf	7
  9561  0FC3  3000               	movlw	0
  9562  0FC4  3FC0               	movwi [0]fsr1
  9563  0FC5  3FC1               	movwi [1]fsr1
  9564                           
  9565                           ;modulation.c: 73: }
  9566                           
  9567                           ;modulation.c: 72: break;
  9568  0FC6  2FDE               	goto	l8778
  9569  0FC7                     l8776:	
  9570                           
  9571                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9572                           ; Switch size 1, requested type "space"
  9573                           ; Number of cases is 1, Range of values is 0 to 0
  9574                           ; switch strategies available:
  9575                           ; Name         Instructions Cycles
  9576                           ; simple_byte            4     3 (average)
  9577                           ; direct_byte            8     6 (fixed)
  9578                           ; jumptable            260     6 (fixed)
  9579                           ;	Chosen strategy is simple_byte
  9580  0FC7  0020               	movlb	0	; select bank0
  9581  0FC8  0857               	movf	_bottom_push_state+1,w
  9582  0FC9  3A00               	xorlw	0	; case 0
  9583  0FCA  1903               	skipnz
  9584  0FCB  2FCD               	goto	l9772
  9585  0FCC  2FB3               	goto	l8772
  9586  0FCD                     l9772:	
  9587                           
  9588                           ; Switch size 1, requested type "space"
  9589                           ; Number of cases is 5, Range of values is 1 to 5
  9590                           ; switch strategies available:
  9591                           ; Name         Instructions Cycles
  9592                           ; simple_byte           16     9 (average)
  9593                           ; direct_byte           19     9 (fixed)
  9594                           ; jumptable            263     9 (fixed)
  9595                           ;	Chosen strategy is simple_byte
  9596  0FCD  0856               	movf	_bottom_push_state,w
  9597  0FCE  3A01               	xorlw	1	; case 1
  9598  0FCF  1903               	skipnz
  9599  0FD0  2E55               	goto	l8762
  9600  0FD1  3A03               	xorlw	3	; case 2
  9601  0FD2  1903               	skipnz
  9602  0FD3  2E9B               	goto	l8764
  9603  0FD4  3A01               	xorlw	1	; case 3
  9604  0FD5  1903               	skipnz
  9605  0FD6  2EE1               	goto	l8766
  9606  0FD7  3A07               	xorlw	7	; case 4
  9607  0FD8  1903               	skipnz
  9608  0FD9  2F27               	goto	l8768
  9609  0FDA  3A01               	xorlw	1	; case 5
  9610  0FDB  1903               	skipnz
  9611  0FDC  2F6D               	goto	l8770
  9612  0FDD  2FB3               	goto	l8772
  9613  0FDE                     l8778:	
  9614  0FDE  3001               	movlw	1
  9615  0FDF  0022               	movlb	2	; select bank2
  9616  0FE0  00D0               	movwf	??_updateModulationArray^(0+256)
  9617  0FE1  0850               	movf	??_updateModulationArray^(0+256),w
  9618  0FE2  07DA               	addwf	updateModulationArray@iAngle^(0+256),f
  9619  0FE3  2E37               	goto	l8780
  9620  0FE4                     l8782:	
  9621                           
  9622                           ;modulation.c: 74: }
  9623                           ;modulation.c: 75: modArray[120] = bottom_push_state;
  9624  0FE4  307A               	movlw	122
  9625  0FE5  0086               	movwf	6
  9626  0FE6  3024               	movlw	36
  9627  0FE7  0087               	movwf	7
  9628  0FE8  0020               	movlb	0	; select bank0
  9629  0FE9  0856               	movf	_bottom_push_state,w
  9630  0FEA  3FC0               	movwi [0]fsr1
  9631  0FEB  0857               	movf	_bottom_push_state+1,w
  9632  0FEC  3FC1               	movwi [1]fsr1
  9633                           
  9634                           ;modulation.c: 76: modArray[121] = symmetry;
  9635  0FED  307C               	movlw	124
  9636  0FEE  0086               	movwf	6
  9637  0FEF  3024               	movlw	36
  9638  0FF0  0087               	movwf	7
  9639  0FF1  0023               	movlb	3	; select bank3
  9640  0FF2  085B               	movf	_symmetry^(0+384),w
  9641  0FF3  3FC0               	movwi [0]fsr1
  9642  0FF4  085C               	movf	(_symmetry+1)^(0+384),w
  9643  0FF5  3FC1               	movwi [1]fsr1
  9644                           
  9645                           ;modulation.c: 77: modArray[122] = subDiv;
  9646  0FF6  307E               	movlw	126
  9647  0FF7  0086               	movwf	6
  9648  0FF8  3024               	movlw	36
  9649  0FF9  0087               	movwf	7
  9650  0FFA  0022               	movlb	2	; select bank2
  9651  0FFB  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9652  0FFC  3FC0               	movwi [0]fsr1
  9653  0FFD  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9654  0FFE  3FC1               	movwi [1]fsr1
  9655  0FFF  0008               	return
  9656  1000                     __end_of_updateModulationArray:	
  9657                           
  9658                           	psect	text17
  9659  0A13                     __ptext17:	
  9660 ;; *************** function _modTri *****************
  9661 ;; Defined at:
  9662 ;;		line 96 in file "modulation.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;  angle           3   14[BANK2 ] void 
  9665 ;;  inflection      3   17[BANK2 ] void 
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;  tmpVal          3   29[BANK2 ] void 
  9668 ;;  period          3   26[BANK2 ] void 
  9669 ;;  shift           3   23[BANK2 ] void 
  9670 ;; Return value:  Size  Location     Type
  9671 ;;                  2   14[BANK2 ] int 
  9672 ;; Registers used:
  9673 ;;		wreg, status,2, status,0, pclath, cstack
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9679 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9680 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9682 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9683 ;;Total ram usage:       18 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    5
  9686 ;; This function calls:
  9687 ;;		___ftadd
  9688 ;;		___ftdiv
  9689 ;;		___ftge
  9690 ;;		___ftmul
  9691 ;;		___ftneg
  9692 ;;		___fttol
  9693 ;; This function is called by:
  9694 ;;		_updateModulationArray
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           
  9699                           ;psect for function _modTri
  9700  0A13                     _modTri:	
  9701                           
  9702                           ;modulation.c: 97: double period = 1.0;
  9703                           
  9704                           ;incstack = 0
  9705                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9706  0A13  3000               	movlw	0
  9707  0A14  0022               	movlb	2	; select bank2
  9708  0A15  00BA               	movwf	modTri@period^(0+256)
  9709  0A16  3080               	movlw	128
  9710  0A17  00BB               	movwf	(modTri@period+1)^(0+256)
  9711  0A18  303F               	movlw	63
  9712  0A19  00BC               	movwf	(modTri@period+2)^(0+256)
  9713                           
  9714                           ;modulation.c: 98: double shift = 0;
  9715  0A1A  3000               	movlw	0
  9716  0A1B  00B7               	movwf	modTri@shift^(0+256)
  9717  0A1C  3000               	movlw	0
  9718  0A1D  00B8               	movwf	(modTri@shift+1)^(0+256)
  9719  0A1E  3000               	movlw	0
  9720  0A1F  00B9               	movwf	(modTri@shift+2)^(0+256)
  9721                           
  9722                           ;modulation.c: 100: if(angle<=inflection) {
  9723  0A20  0831               	movf	modTri@inflection^(0+256),w
  9724  0A21  0021               	movlb	1	; select bank1
  9725  0A22  00A0               	movwf	___ftge@ff1^(0+128)
  9726  0A23  0022               	movlb	2	; select bank2
  9727  0A24  0832               	movf	(modTri@inflection+1)^(0+256),w
  9728  0A25  0021               	movlb	1	; select bank1
  9729  0A26  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9730  0A27  0022               	movlb	2	; select bank2
  9731  0A28  0833               	movf	(modTri@inflection+2)^(0+256),w
  9732  0A29  0021               	movlb	1	; select bank1
  9733  0A2A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9734  0A2B  0022               	movlb	2	; select bank2
  9735  0A2C  082E               	movf	modTri@angle^(0+256),w
  9736  0A2D  0021               	movlb	1	; select bank1
  9737  0A2E  00A3               	movwf	___ftge@ff2^(0+128)
  9738  0A2F  0022               	movlb	2	; select bank2
  9739  0A30  082F               	movf	(modTri@angle+1)^(0+256),w
  9740  0A31  0021               	movlb	1	; select bank1
  9741  0A32  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9742  0A33  0022               	movlb	2	; select bank2
  9743  0A34  0830               	movf	(modTri@angle+2)^(0+256),w
  9744  0A35  0021               	movlb	1	; select bank1
  9745  0A36  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9746  0A37  31A1  21C8  318A   	fcall	___ftge
  9747  0A3A  1C03               	btfss	3,0
  9748  0A3B  2A48               	goto	l8538
  9749                           
  9750                           ;modulation.c: 101: period = 180.0/inflection;
  9751  0A3C  0022               	movlb	2	; select bank2
  9752  0A3D  0831               	movf	modTri@inflection^(0+256),w
  9753  0A3E  0021               	movlb	1	; select bank1
  9754  0A3F  00CE               	movwf	___ftdiv@f2^(0+128)
  9755  0A40  0022               	movlb	2	; select bank2
  9756  0A41  0832               	movf	(modTri@inflection+1)^(0+256),w
  9757  0A42  0021               	movlb	1	; select bank1
  9758  0A43  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9759  0A44  0022               	movlb	2	; select bank2
  9760  0A45  0833               	movf	(modTri@inflection+2)^(0+256),w
  9761  0A46  0021               	movlb	1	; select bank1
  9762  0A47  2B03               	goto	L5
  9763  0A48                     l8538:	
  9764                           ;modulation.c: 102: } else {
  9765                           
  9766                           
  9767                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9768  0A48  0022               	movlb	2	; select bank2
  9769  0A49  0831               	movf	modTri@inflection^(0+256),w
  9770  0A4A  0021               	movlb	1	; select bank1
  9771  0A4B  00B1               	movwf	___ftmul@f2^(0+128)
  9772  0A4C  0022               	movlb	2	; select bank2
  9773  0A4D  0832               	movf	(modTri@inflection+1)^(0+256),w
  9774  0A4E  0021               	movlb	1	; select bank1
  9775  0A4F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9776  0A50  0022               	movlb	2	; select bank2
  9777  0A51  0833               	movf	(modTri@inflection+2)^(0+256),w
  9778  0A52  0021               	movlb	1	; select bank1
  9779  0A53  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9780  0A54  3000               	movlw	0
  9781  0A55  00AE               	movwf	___ftmul@f1^(0+128)
  9782  0A56  3000               	movlw	0
  9783  0A57  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9784  0A58  3040               	movlw	64
  9785  0A59  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9786  0A5A  3187  273B  318A   	fcall	___ftmul
  9787  0A5D  0021               	movlb	1	; select bank1
  9788  0A5E  082E               	movf	?___ftmul^(0+128),w
  9789  0A5F  00BE               	movwf	___ftneg@f1^(0+128)
  9790  0A60  082F               	movf	(?___ftmul+1)^(0+128),w
  9791  0A61  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9792  0A62  0830               	movf	(?___ftmul+2)^(0+128),w
  9793  0A63  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9794  0A64  31AD  25B2  318A   	fcall	___ftneg
  9795  0A67  0021               	movlb	1	; select bank1
  9796  0A68  083E               	movf	?___ftneg^(0+128),w
  9797  0A69  00C4               	movwf	___ftadd@f2^(0+128)
  9798  0A6A  083F               	movf	(?___ftneg+1)^(0+128),w
  9799  0A6B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9800  0A6C  0840               	movf	(?___ftneg+2)^(0+128),w
  9801  0A6D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9802  0A6E  3000               	movlw	0
  9803  0A6F  00C1               	movwf	___ftadd@f1^(0+128)
  9804  0A70  30B4               	movlw	180
  9805  0A71  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9806  0A72  3043               	movlw	67
  9807  0A73  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9808  0A74  3190  200F  318A   	fcall	___ftadd
  9809  0A77  0021               	movlb	1	; select bank1
  9810  0A78  0841               	movf	?___ftadd^(0+128),w
  9811  0A79  0022               	movlb	2	; select bank2
  9812  0A7A  00B4               	movwf	_modTri$2854^(0+256)
  9813  0A7B  0021               	movlb	1	; select bank1
  9814  0A7C  0842               	movf	(?___ftadd+1)^(0+128),w
  9815  0A7D  0022               	movlb	2	; select bank2
  9816  0A7E  00B5               	movwf	(_modTri$2854+1)^(0+256)
  9817  0A7F  0021               	movlb	1	; select bank1
  9818  0A80  0843               	movf	(?___ftadd+2)^(0+128),w
  9819  0A81  0022               	movlb	2	; select bank2
  9820  0A82  00B6               	movwf	(_modTri$2854+2)^(0+256)
  9821                           
  9822                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9823  0A83  0834               	movf	_modTri$2854^(0+256),w
  9824  0A84  0021               	movlb	1	; select bank1
  9825  0A85  00BE               	movwf	___ftneg@f1^(0+128)
  9826  0A86  0022               	movlb	2	; select bank2
  9827  0A87  0835               	movf	(_modTri$2854+1)^(0+256),w
  9828  0A88  0021               	movlb	1	; select bank1
  9829  0A89  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9830  0A8A  0022               	movlb	2	; select bank2
  9831  0A8B  0836               	movf	(_modTri$2854+2)^(0+256),w
  9832  0A8C  0021               	movlb	1	; select bank1
  9833  0A8D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9834  0A8E  31AD  25B2  318A   	fcall	___ftneg
  9835  0A91  0021               	movlb	1	; select bank1
  9836  0A92  083E               	movf	?___ftneg^(0+128),w
  9837  0A93  00AE               	movwf	___ftmul@f1^(0+128)
  9838  0A94  083F               	movf	(?___ftneg+1)^(0+128),w
  9839  0A95  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9840  0A96  0840               	movf	(?___ftneg+2)^(0+128),w
  9841  0A97  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9842  0A98  3000               	movlw	0
  9843  0A99  00C1               	movwf	___ftadd@f1^(0+128)
  9844  0A9A  30B4               	movlw	180
  9845  0A9B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9846  0A9C  3043               	movlw	67
  9847  0A9D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9848  0A9E  0022               	movlb	2	; select bank2
  9849  0A9F  0831               	movf	modTri@inflection^(0+256),w
  9850  0AA0  0021               	movlb	1	; select bank1
  9851  0AA1  00BE               	movwf	___ftneg@f1^(0+128)
  9852  0AA2  0022               	movlb	2	; select bank2
  9853  0AA3  0832               	movf	(modTri@inflection+1)^(0+256),w
  9854  0AA4  0021               	movlb	1	; select bank1
  9855  0AA5  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9856  0AA6  0022               	movlb	2	; select bank2
  9857  0AA7  0833               	movf	(modTri@inflection+2)^(0+256),w
  9858  0AA8  0021               	movlb	1	; select bank1
  9859  0AA9  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9860  0AAA  31AD  25B2  318A   	fcall	___ftneg
  9861  0AAD  0021               	movlb	1	; select bank1
  9862  0AAE  083E               	movf	?___ftneg^(0+128),w
  9863  0AAF  00C4               	movwf	___ftadd@f2^(0+128)
  9864  0AB0  083F               	movf	(?___ftneg+1)^(0+128),w
  9865  0AB1  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9866  0AB2  0840               	movf	(?___ftneg+2)^(0+128),w
  9867  0AB3  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9868  0AB4  3190  200F  318A   	fcall	___ftadd
  9869  0AB7  0021               	movlb	1	; select bank1
  9870  0AB8  0841               	movf	?___ftadd^(0+128),w
  9871  0AB9  00CE               	movwf	___ftdiv@f2^(0+128)
  9872  0ABA  0842               	movf	(?___ftadd+1)^(0+128),w
  9873  0ABB  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9874  0ABC  0843               	movf	(?___ftadd+2)^(0+128),w
  9875  0ABD  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9876  0ABE  3000               	movlw	0
  9877  0ABF  00D1               	movwf	___ftdiv@f1^(0+128)
  9878  0AC0  3034               	movlw	52
  9879  0AC1  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9880  0AC2  3043               	movlw	67
  9881  0AC3  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9882  0AC4  319D  2528  318A   	fcall	___ftdiv
  9883  0AC7  0021               	movlb	1	; select bank1
  9884  0AC8  084E               	movf	?___ftdiv^(0+128),w
  9885  0AC9  00B1               	movwf	___ftmul@f2^(0+128)
  9886  0ACA  084F               	movf	(?___ftdiv+1)^(0+128),w
  9887  0ACB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9888  0ACC  0850               	movf	(?___ftdiv+2)^(0+128),w
  9889  0ACD  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9890  0ACE  3187  273B  318A   	fcall	___ftmul
  9891  0AD1  0021               	movlb	1	; select bank1
  9892  0AD2  082E               	movf	?___ftmul^(0+128),w
  9893  0AD3  0022               	movlb	2	; select bank2
  9894  0AD4  00B7               	movwf	modTri@shift^(0+256)
  9895  0AD5  0021               	movlb	1	; select bank1
  9896  0AD6  082F               	movf	(?___ftmul+1)^(0+128),w
  9897  0AD7  0022               	movlb	2	; select bank2
  9898  0AD8  00B8               	movwf	(modTri@shift+1)^(0+256)
  9899  0AD9  0021               	movlb	1	; select bank1
  9900  0ADA  0830               	movf	(?___ftmul+2)^(0+128),w
  9901  0ADB  0022               	movlb	2	; select bank2
  9902  0ADC  00B9               	movwf	(modTri@shift+2)^(0+256)
  9903                           
  9904                           ;modulation.c: 104: period = 180/(360-inflection);
  9905  0ADD  3000               	movlw	0
  9906  0ADE  0021               	movlb	1	; select bank1
  9907  0ADF  00C1               	movwf	___ftadd@f1^(0+128)
  9908  0AE0  30B4               	movlw	180
  9909  0AE1  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9910  0AE2  3043               	movlw	67
  9911  0AE3  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9912  0AE4  0022               	movlb	2	; select bank2
  9913  0AE5  0831               	movf	modTri@inflection^(0+256),w
  9914  0AE6  0021               	movlb	1	; select bank1
  9915  0AE7  00BE               	movwf	___ftneg@f1^(0+128)
  9916  0AE8  0022               	movlb	2	; select bank2
  9917  0AE9  0832               	movf	(modTri@inflection+1)^(0+256),w
  9918  0AEA  0021               	movlb	1	; select bank1
  9919  0AEB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9920  0AEC  0022               	movlb	2	; select bank2
  9921  0AED  0833               	movf	(modTri@inflection+2)^(0+256),w
  9922  0AEE  0021               	movlb	1	; select bank1
  9923  0AEF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9924  0AF0  31AD  25B2  318A   	fcall	___ftneg
  9925  0AF3  0021               	movlb	1	; select bank1
  9926  0AF4  083E               	movf	?___ftneg^(0+128),w
  9927  0AF5  00C4               	movwf	___ftadd@f2^(0+128)
  9928  0AF6  083F               	movf	(?___ftneg+1)^(0+128),w
  9929  0AF7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9930  0AF8  0840               	movf	(?___ftneg+2)^(0+128),w
  9931  0AF9  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9932  0AFA  3190  200F  318A   	fcall	___ftadd
  9933  0AFD  0021               	movlb	1	; select bank1
  9934  0AFE  0841               	movf	?___ftadd^(0+128),w
  9935  0AFF  00CE               	movwf	___ftdiv@f2^(0+128)
  9936  0B00  0842               	movf	(?___ftadd+1)^(0+128),w
  9937  0B01  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9938  0B02  0843               	movf	(?___ftadd+2)^(0+128),w
  9939  0B03                     L5:	
  9940  0B03  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9941  0B04  3000               	movlw	0
  9942  0B05  00D1               	movwf	___ftdiv@f1^(0+128)
  9943  0B06  3034               	movlw	52
  9944  0B07  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9945  0B08  3043               	movlw	67
  9946  0B09  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9947  0B0A  319D  2528  318A   	fcall	___ftdiv
  9948  0B0D  0021               	movlb	1	; select bank1
  9949  0B0E  084E               	movf	?___ftdiv^(0+128),w
  9950  0B0F  0022               	movlb	2	; select bank2
  9951  0B10  00BA               	movwf	modTri@period^(0+256)
  9952  0B11  0021               	movlb	1	; select bank1
  9953  0B12  084F               	movf	(?___ftdiv+1)^(0+128),w
  9954  0B13  0022               	movlb	2	; select bank2
  9955  0B14  00BB               	movwf	(modTri@period+1)^(0+256)
  9956  0B15  0021               	movlb	1	; select bank1
  9957  0B16  0850               	movf	(?___ftdiv+2)^(0+128),w
  9958  0B17  0022               	movlb	2	; select bank2
  9959  0B18  00BC               	movwf	(modTri@period+2)^(0+256)
  9960                           
  9961                           ;modulation.c: 106: }
  9962                           ;modulation.c: 107: double tmpVal = (period*angle-shift) ;
  9963  0B19  0837               	movf	modTri@shift^(0+256),w
  9964  0B1A  0021               	movlb	1	; select bank1
  9965  0B1B  00BE               	movwf	___ftneg@f1^(0+128)
  9966  0B1C  0022               	movlb	2	; select bank2
  9967  0B1D  0838               	movf	(modTri@shift+1)^(0+256),w
  9968  0B1E  0021               	movlb	1	; select bank1
  9969  0B1F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9970  0B20  0022               	movlb	2	; select bank2
  9971  0B21  0839               	movf	(modTri@shift+2)^(0+256),w
  9972  0B22  0021               	movlb	1	; select bank1
  9973  0B23  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9974  0B24  31AD  25B2  318A   	fcall	___ftneg
  9975  0B27  0021               	movlb	1	; select bank1
  9976  0B28  083E               	movf	?___ftneg^(0+128),w
  9977  0B29  00C1               	movwf	___ftadd@f1^(0+128)
  9978  0B2A  083F               	movf	(?___ftneg+1)^(0+128),w
  9979  0B2B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9980  0B2C  0840               	movf	(?___ftneg+2)^(0+128),w
  9981  0B2D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9982  0B2E  0022               	movlb	2	; select bank2
  9983  0B2F  082E               	movf	modTri@angle^(0+256),w
  9984  0B30  0021               	movlb	1	; select bank1
  9985  0B31  00AE               	movwf	___ftmul@f1^(0+128)
  9986  0B32  0022               	movlb	2	; select bank2
  9987  0B33  082F               	movf	(modTri@angle+1)^(0+256),w
  9988  0B34  0021               	movlb	1	; select bank1
  9989  0B35  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9990  0B36  0022               	movlb	2	; select bank2
  9991  0B37  0830               	movf	(modTri@angle+2)^(0+256),w
  9992  0B38  0021               	movlb	1	; select bank1
  9993  0B39  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9994  0B3A  0022               	movlb	2	; select bank2
  9995  0B3B  083A               	movf	modTri@period^(0+256),w
  9996  0B3C  0021               	movlb	1	; select bank1
  9997  0B3D  00B1               	movwf	___ftmul@f2^(0+128)
  9998  0B3E  0022               	movlb	2	; select bank2
  9999  0B3F  083B               	movf	(modTri@period+1)^(0+256),w
 10000  0B40  0021               	movlb	1	; select bank1
 10001  0B41  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10002  0B42  0022               	movlb	2	; select bank2
 10003  0B43  083C               	movf	(modTri@period+2)^(0+256),w
 10004  0B44  0021               	movlb	1	; select bank1
 10005  0B45  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10006  0B46  3187  273B  318A   	fcall	___ftmul
 10007  0B49  0021               	movlb	1	; select bank1
 10008  0B4A  082E               	movf	?___ftmul^(0+128),w
 10009  0B4B  00C4               	movwf	___ftadd@f2^(0+128)
 10010  0B4C  082F               	movf	(?___ftmul+1)^(0+128),w
 10011  0B4D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10012  0B4E  0830               	movf	(?___ftmul+2)^(0+128),w
 10013  0B4F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10014  0B50  3190  200F  318A   	fcall	___ftadd
 10015  0B53  0021               	movlb	1	; select bank1
 10016  0B54  0841               	movf	?___ftadd^(0+128),w
 10017  0B55  0022               	movlb	2	; select bank2
 10018  0B56  00BD               	movwf	modTri@tmpVal^(0+256)
 10019  0B57  0021               	movlb	1	; select bank1
 10020  0B58  0842               	movf	(?___ftadd+1)^(0+128),w
 10021  0B59  0022               	movlb	2	; select bank2
 10022  0B5A  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10023  0B5B  0021               	movlb	1	; select bank1
 10024  0B5C  0843               	movf	(?___ftadd+2)^(0+128),w
 10025  0B5D  0022               	movlb	2	; select bank2
 10026  0B5E  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10027                           
 10028                           ;modulation.c: 108: if (tmpVal > 180) {
 10029  0B5F  3000               	movlw	0
 10030  0B60  0021               	movlb	1	; select bank1
 10031  0B61  00A0               	movwf	___ftge@ff1^(0+128)
 10032  0B62  3034               	movlw	52
 10033  0B63  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10034  0B64  3043               	movlw	67
 10035  0B65  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10036  0B66  0022               	movlb	2	; select bank2
 10037  0B67  083D               	movf	modTri@tmpVal^(0+256),w
 10038  0B68  0021               	movlb	1	; select bank1
 10039  0B69  00A3               	movwf	___ftge@ff2^(0+128)
 10040  0B6A  0022               	movlb	2	; select bank2
 10041  0B6B  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10042  0B6C  0021               	movlb	1	; select bank1
 10043  0B6D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10044  0B6E  0022               	movlb	2	; select bank2
 10045  0B6F  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10046  0B70  0021               	movlb	1	; select bank1
 10047  0B71  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10048  0B72  31A1  21C8  318A   	fcall	___ftge
 10049  0B75  1803               	btfsc	3,0
 10050  0B76  2B8A               	goto	l8542
 10051                           
 10052                           ;modulation.c: 109: tmpVal = tmpVal - 270.0;
 10053  0B77  3000               	movlw	0
 10054  0B78  0021               	movlb	1	; select bank1
 10055  0B79  00C1               	movwf	___ftadd@f1^(0+128)
 10056  0B7A  3087               	movlw	135
 10057  0B7B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10058  0B7C  30C3               	movlw	195
 10059  0B7D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10060  0B7E  0022               	movlb	2	; select bank2
 10061  0B7F  083D               	movf	modTri@tmpVal^(0+256),w
 10062  0B80  0021               	movlb	1	; select bank1
 10063  0B81  00C4               	movwf	___ftadd@f2^(0+128)
 10064  0B82  0022               	movlb	2	; select bank2
 10065  0B83  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10066  0B84  0021               	movlb	1	; select bank1
 10067  0B85  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10068  0B86  0022               	movlb	2	; select bank2
 10069  0B87  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10070  0B88  0021               	movlb	1	; select bank1
 10071  0B89  2BA6               	goto	L6
 10072  0B8A                     l8542:	
 10073                           ;modulation.c: 110: } else {
 10074                           
 10075                           
 10076                           ;modulation.c: 111: tmpVal = 90 - tmpVal;
 10077  0B8A  3000               	movlw	0
 10078  0B8B  0021               	movlb	1	; select bank1
 10079  0B8C  00C1               	movwf	___ftadd@f1^(0+128)
 10080  0B8D  30B4               	movlw	180
 10081  0B8E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10082  0B8F  3042               	movlw	66
 10083  0B90  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10084  0B91  0022               	movlb	2	; select bank2
 10085  0B92  083D               	movf	modTri@tmpVal^(0+256),w
 10086  0B93  0021               	movlb	1	; select bank1
 10087  0B94  00BE               	movwf	___ftneg@f1^(0+128)
 10088  0B95  0022               	movlb	2	; select bank2
 10089  0B96  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10090  0B97  0021               	movlb	1	; select bank1
 10091  0B98  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10092  0B99  0022               	movlb	2	; select bank2
 10093  0B9A  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10094  0B9B  0021               	movlb	1	; select bank1
 10095  0B9C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10096  0B9D  31AD  25B2  318A   	fcall	___ftneg
 10097  0BA0  0021               	movlb	1	; select bank1
 10098  0BA1  083E               	movf	?___ftneg^(0+128),w
 10099  0BA2  00C4               	movwf	___ftadd@f2^(0+128)
 10100  0BA3  083F               	movf	(?___ftneg+1)^(0+128),w
 10101  0BA4  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10102  0BA5  0840               	movf	(?___ftneg+2)^(0+128),w
 10103  0BA6                     L6:	
 10104  0BA6  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10105  0BA7  3190  200F  318A   	fcall	___ftadd
 10106  0BAA  0021               	movlb	1	; select bank1
 10107  0BAB  0841               	movf	?___ftadd^(0+128),w
 10108  0BAC  0022               	movlb	2	; select bank2
 10109  0BAD  00BD               	movwf	modTri@tmpVal^(0+256)
 10110  0BAE  0021               	movlb	1	; select bank1
 10111  0BAF  0842               	movf	(?___ftadd+1)^(0+128),w
 10112  0BB0  0022               	movlb	2	; select bank2
 10113  0BB1  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10114  0BB2  0021               	movlb	1	; select bank1
 10115  0BB3  0843               	movf	(?___ftadd+2)^(0+128),w
 10116  0BB4  0022               	movlb	2	; select bank2
 10117  0BB5  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10118                           
 10119                           ;modulation.c: 112: }
 10120                           ;modulation.c: 113: tmpVal = tmpVal * -10/9;
 10121  0BB6  3000               	movlw	0
 10122  0BB7  0021               	movlb	1	; select bank1
 10123  0BB8  00CE               	movwf	___ftdiv@f2^(0+128)
 10124  0BB9  3010               	movlw	16
 10125  0BBA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10126  0BBB  3041               	movlw	65
 10127  0BBC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10128  0BBD  3000               	movlw	0
 10129  0BBE  00AE               	movwf	___ftmul@f1^(0+128)
 10130  0BBF  3020               	movlw	32
 10131  0BC0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10132  0BC1  30C1               	movlw	193
 10133  0BC2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10134  0BC3  0022               	movlb	2	; select bank2
 10135  0BC4  083D               	movf	modTri@tmpVal^(0+256),w
 10136  0BC5  0021               	movlb	1	; select bank1
 10137  0BC6  00B1               	movwf	___ftmul@f2^(0+128)
 10138  0BC7  0022               	movlb	2	; select bank2
 10139  0BC8  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10140  0BC9  0021               	movlb	1	; select bank1
 10141  0BCA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10142  0BCB  0022               	movlb	2	; select bank2
 10143  0BCC  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10144  0BCD  0021               	movlb	1	; select bank1
 10145  0BCE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10146  0BCF  3187  273B  318A   	fcall	___ftmul
 10147  0BD2  0021               	movlb	1	; select bank1
 10148  0BD3  082E               	movf	?___ftmul^(0+128),w
 10149  0BD4  00D1               	movwf	___ftdiv@f1^(0+128)
 10150  0BD5  082F               	movf	(?___ftmul+1)^(0+128),w
 10151  0BD6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10152  0BD7  0830               	movf	(?___ftmul+2)^(0+128),w
 10153  0BD8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10154  0BD9  319D  2528  318A   	fcall	___ftdiv
 10155  0BDC  0021               	movlb	1	; select bank1
 10156  0BDD  084E               	movf	?___ftdiv^(0+128),w
 10157  0BDE  0022               	movlb	2	; select bank2
 10158  0BDF  00BD               	movwf	modTri@tmpVal^(0+256)
 10159  0BE0  0021               	movlb	1	; select bank1
 10160  0BE1  084F               	movf	(?___ftdiv+1)^(0+128),w
 10161  0BE2  0022               	movlb	2	; select bank2
 10162  0BE3  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10163  0BE4  0021               	movlb	1	; select bank1
 10164  0BE5  0850               	movf	(?___ftdiv+2)^(0+128),w
 10165  0BE6  0022               	movlb	2	; select bank2
 10166  0BE7  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10167                           
 10168                           ;modulation.c: 115: return (int)(tmpVal);
 10169  0BE8  083D               	movf	modTri@tmpVal^(0+256),w
 10170  0BE9  00A0               	movwf	___fttol@f1^(0+256)
 10171  0BEA  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10172  0BEB  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10173  0BEC  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10174  0BED  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10175  0BEE  319A  2263         	fcall	___fttol
 10176  0BF0  0022               	movlb	2	; select bank2
 10177  0BF1  0821               	movf	(?___fttol^(0+256)+1),w
 10178  0BF2  00AF               	movwf	(?_modTri+1)^(0+256)
 10179  0BF3  0820               	movf	?___fttol^(0+256),w
 10180  0BF4  00AE               	movwf	?_modTri^(0+256)
 10181  0BF5  0008               	return
 10182  0BF6                     __end_of_modTri:	
 10183                           
 10184                           	psect	text18
 10185  2241                     __ptext18:	
 10186 ;; *************** function _modSquare *****************
 10187 ;; Defined at:
 10188 ;;		line 139 in file "modulation.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  angle           3   40[BANK2 ] int 
 10191 ;;  inflection      3   43[BANK2 ] int 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  tmpVal          2   46[BANK2 ] int 
 10194 ;; Return value:  Size  Location     Type
 10195 ;;                  2   40[BANK2 ] int 
 10196 ;; Registers used:
 10197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10203 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10204 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10206 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10207 ;;Total ram usage:        8 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    6
 10210 ;; This function calls:
 10211 ;;		___ftge
 10212 ;;		_modCos
 10213 ;; This function is called by:
 10214 ;;		_updateModulationArray
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           
 10219                           ;psect for function _modSquare
 10220  2241                     _modSquare:	
 10221                           
 10222                           ;modulation.c: 140: int tmpVal = modCos(angle, inflection);
 10223                           
 10224                           ;incstack = 0
 10225                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10226  2241  0022               	movlb	2	; select bank2
 10227  2242  0848               	movf	modSquare@angle^(0+256),w
 10228  2243  00B4               	movwf	modCos@angle^(0+256)
 10229  2244  0849               	movf	(modSquare@angle+1)^(0+256),w
 10230  2245  00B5               	movwf	(modCos@angle+1)^(0+256)
 10231  2246  084A               	movf	(modSquare@angle+2)^(0+256),w
 10232  2247  00B6               	movwf	(modCos@angle+2)^(0+256)
 10233  2248  084B               	movf	modSquare@inflection^(0+256),w
 10234  2249  00B7               	movwf	modCos@inflection^(0+256)
 10235  224A  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10236  224B  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10237  224C  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10238  224D  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10239  224E  3194  249A  31A2   	fcall	_modCos
 10240  2251  0022               	movlb	2	; select bank2
 10241  2252  0835               	movf	(?_modCos+1)^(0+256),w
 10242  2253  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10243  2254  0834               	movf	?_modCos^(0+256),w
 10244  2255  00CE               	movwf	modSquare@tmpVal^(0+256)
 10245                           
 10246                           ;modulation.c: 141: return (angle <= inflection) ? -100 : 100;
 10247  2256  084B               	movf	modSquare@inflection^(0+256),w
 10248  2257  0021               	movlb	1	; select bank1
 10249  2258  00A0               	movwf	___ftge@ff1^(0+128)
 10250  2259  0022               	movlb	2	; select bank2
 10251  225A  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10252  225B  0021               	movlb	1	; select bank1
 10253  225C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10254  225D  0022               	movlb	2	; select bank2
 10255  225E  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10256  225F  0021               	movlb	1	; select bank1
 10257  2260  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10258  2261  0022               	movlb	2	; select bank2
 10259  2262  0848               	movf	modSquare@angle^(0+256),w
 10260  2263  0021               	movlb	1	; select bank1
 10261  2264  00A3               	movwf	___ftge@ff2^(0+128)
 10262  2265  0022               	movlb	2	; select bank2
 10263  2266  0849               	movf	(modSquare@angle+1)^(0+256),w
 10264  2267  0021               	movlb	1	; select bank1
 10265  2268  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10266  2269  0022               	movlb	2	; select bank2
 10267  226A  084A               	movf	(modSquare@angle+2)^(0+256),w
 10268  226B  0021               	movlb	1	; select bank1
 10269  226C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10270  226D  31A1  21C8  31A2   	fcall	___ftge
 10271  2270  1803               	btfsc	3,0
 10272  2271  2A78               	goto	l8552
 10273  2272  3064               	movlw	100
 10274  2273  0022               	movlb	2	; select bank2
 10275  2274  00C8               	movwf	?_modSquare^(0+256)
 10276  2275  3000               	movlw	0
 10277  2276  00C9               	movwf	(?_modSquare^(0+256)+1)
 10278  2277  0008               	return
 10279  2278                     l8552:	
 10280  2278  309C               	movlw	156
 10281  2279  0022               	movlb	2	; select bank2
 10282  227A  00C8               	movwf	?_modSquare^(0+256)
 10283  227B  30FF               	movlw	255
 10284  227C  00C9               	movwf	(?_modSquare^(0+256)+1)
 10285  227D  0008               	return
 10286  227E                     __end_of_modSquare:	
 10287                           
 10288                           	psect	text19
 10289  149A                     __ptext19:	
 10290 ;; *************** function _modCos *****************
 10291 ;; Defined at:
 10292 ;;		line 80 in file "modulation.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;  angle           3   20[BANK2 ] int 
 10295 ;;  inflection      3   23[BANK2 ] int 
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;  tmpVal          3   37[BANK2 ] int 
 10298 ;;  period          3   34[BANK2 ] int 
 10299 ;;  shift           3   31[BANK2 ] int 
 10300 ;; Return value:  Size  Location     Type
 10301 ;;                  2   20[BANK2 ] int 
 10302 ;; Registers used:
 10303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10304 ;; Tracked objects:
 10305 ;;		On entry : 0/0
 10306 ;;		On exit  : 0/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10309 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10310 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10311 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10312 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10313 ;;Total ram usage:       20 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; Hardware stack levels required when called:    5
 10316 ;; This function calls:
 10317 ;;		___ftadd
 10318 ;;		___ftdiv
 10319 ;;		___ftge
 10320 ;;		___ftmul
 10321 ;;		___ftneg
 10322 ;;		___fttol
 10323 ;;		___wmul
 10324 ;; This function is called by:
 10325 ;;		_updateModulationArray
 10326 ;;		_modSquare
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           
 10331                           ;psect for function _modCos
 10332  149A                     _modCos:	
 10333                           
 10334                           ;modulation.c: 81: double period = 1.0;
 10335                           
 10336                           ;incstack = 0
 10337                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10338  149A  3000               	movlw	0
 10339  149B  0022               	movlb	2	; select bank2
 10340  149C  00C2               	movwf	modCos@period^(0+256)
 10341  149D  3080               	movlw	128
 10342  149E  00C3               	movwf	(modCos@period+1)^(0+256)
 10343  149F  303F               	movlw	63
 10344  14A0  00C4               	movwf	(modCos@period+2)^(0+256)
 10345                           
 10346                           ;modulation.c: 82: double shift = 0.0;
 10347  14A1  3000               	movlw	0
 10348  14A2  00BF               	movwf	modCos@shift^(0+256)
 10349  14A3  3000               	movlw	0
 10350  14A4  00C0               	movwf	(modCos@shift+1)^(0+256)
 10351  14A5  3000               	movlw	0
 10352  14A6  00C1               	movwf	(modCos@shift+2)^(0+256)
 10353                           
 10354                           ;modulation.c: 84: if(angle<=inflection) {
 10355  14A7  0837               	movf	modCos@inflection^(0+256),w
 10356  14A8  0021               	movlb	1	; select bank1
 10357  14A9  00A0               	movwf	___ftge@ff1^(0+128)
 10358  14AA  0022               	movlb	2	; select bank2
 10359  14AB  0838               	movf	(modCos@inflection+1)^(0+256),w
 10360  14AC  0021               	movlb	1	; select bank1
 10361  14AD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10362  14AE  0022               	movlb	2	; select bank2
 10363  14AF  0839               	movf	(modCos@inflection+2)^(0+256),w
 10364  14B0  0021               	movlb	1	; select bank1
 10365  14B1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10366  14B2  0022               	movlb	2	; select bank2
 10367  14B3  0834               	movf	modCos@angle^(0+256),w
 10368  14B4  0021               	movlb	1	; select bank1
 10369  14B5  00A3               	movwf	___ftge@ff2^(0+128)
 10370  14B6  0022               	movlb	2	; select bank2
 10371  14B7  0835               	movf	(modCos@angle+1)^(0+256),w
 10372  14B8  0021               	movlb	1	; select bank1
 10373  14B9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10374  14BA  0022               	movlb	2	; select bank2
 10375  14BB  0836               	movf	(modCos@angle+2)^(0+256),w
 10376  14BC  0021               	movlb	1	; select bank1
 10377  14BD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10378  14BE  31A1  21C8  3194   	fcall	___ftge
 10379  14C1  1C03               	btfss	3,0
 10380  14C2  2CCF               	goto	l8208
 10381                           
 10382                           ;modulation.c: 85: period = 180.0/inflection;
 10383  14C3  0022               	movlb	2	; select bank2
 10384  14C4  0837               	movf	modCos@inflection^(0+256),w
 10385  14C5  0021               	movlb	1	; select bank1
 10386  14C6  00CE               	movwf	___ftdiv@f2^(0+128)
 10387  14C7  0022               	movlb	2	; select bank2
 10388  14C8  0838               	movf	(modCos@inflection+1)^(0+256),w
 10389  14C9  0021               	movlb	1	; select bank1
 10390  14CA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10391  14CB  0022               	movlb	2	; select bank2
 10392  14CC  0839               	movf	(modCos@inflection+2)^(0+256),w
 10393  14CD  0021               	movlb	1	; select bank1
 10394  14CE  2D8A               	goto	L7
 10395  14CF                     l8208:	
 10396                           ;modulation.c: 86: } else {
 10397                           
 10398                           
 10399                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10400  14CF  0022               	movlb	2	; select bank2
 10401  14D0  0837               	movf	modCos@inflection^(0+256),w
 10402  14D1  0021               	movlb	1	; select bank1
 10403  14D2  00B1               	movwf	___ftmul@f2^(0+128)
 10404  14D3  0022               	movlb	2	; select bank2
 10405  14D4  0838               	movf	(modCos@inflection+1)^(0+256),w
 10406  14D5  0021               	movlb	1	; select bank1
 10407  14D6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10408  14D7  0022               	movlb	2	; select bank2
 10409  14D8  0839               	movf	(modCos@inflection+2)^(0+256),w
 10410  14D9  0021               	movlb	1	; select bank1
 10411  14DA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10412  14DB  3000               	movlw	0
 10413  14DC  00AE               	movwf	___ftmul@f1^(0+128)
 10414  14DD  3000               	movlw	0
 10415  14DE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10416  14DF  3040               	movlw	64
 10417  14E0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10418  14E1  3187  273B  3194   	fcall	___ftmul
 10419  14E4  0021               	movlb	1	; select bank1
 10420  14E5  082E               	movf	?___ftmul^(0+128),w
 10421  14E6  00BE               	movwf	___ftneg@f1^(0+128)
 10422  14E7  082F               	movf	(?___ftmul+1)^(0+128),w
 10423  14E8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10424  14E9  0830               	movf	(?___ftmul+2)^(0+128),w
 10425  14EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10426  14EB  31AD  25B2  3194   	fcall	___ftneg
 10427  14EE  0021               	movlb	1	; select bank1
 10428  14EF  083E               	movf	?___ftneg^(0+128),w
 10429  14F0  00C4               	movwf	___ftadd@f2^(0+128)
 10430  14F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10431  14F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10432  14F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10433  14F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10434  14F5  3000               	movlw	0
 10435  14F6  00C1               	movwf	___ftadd@f1^(0+128)
 10436  14F7  30B4               	movlw	180
 10437  14F8  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10438  14F9  3043               	movlw	67
 10439  14FA  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10440  14FB  3190  200F  3194   	fcall	___ftadd
 10441  14FE  0021               	movlb	1	; select bank1
 10442  14FF  0841               	movf	?___ftadd^(0+128),w
 10443  1500  0022               	movlb	2	; select bank2
 10444  1501  00BC               	movwf	_modCos$2853^(0+256)
 10445  1502  0021               	movlb	1	; select bank1
 10446  1503  0842               	movf	(?___ftadd+1)^(0+128),w
 10447  1504  0022               	movlb	2	; select bank2
 10448  1505  00BD               	movwf	(_modCos$2853+1)^(0+256)
 10449  1506  0021               	movlb	1	; select bank1
 10450  1507  0843               	movf	(?___ftadd+2)^(0+128),w
 10451  1508  0022               	movlb	2	; select bank2
 10452  1509  00BE               	movwf	(_modCos$2853+2)^(0+256)
 10453                           
 10454                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10455  150A  083C               	movf	_modCos$2853^(0+256),w
 10456  150B  0021               	movlb	1	; select bank1
 10457  150C  00BE               	movwf	___ftneg@f1^(0+128)
 10458  150D  0022               	movlb	2	; select bank2
 10459  150E  083D               	movf	(_modCos$2853+1)^(0+256),w
 10460  150F  0021               	movlb	1	; select bank1
 10461  1510  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10462  1511  0022               	movlb	2	; select bank2
 10463  1512  083E               	movf	(_modCos$2853+2)^(0+256),w
 10464  1513  0021               	movlb	1	; select bank1
 10465  1514  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10466  1515  31AD  25B2  3194   	fcall	___ftneg
 10467  1518  0021               	movlb	1	; select bank1
 10468  1519  083E               	movf	?___ftneg^(0+128),w
 10469  151A  00AE               	movwf	___ftmul@f1^(0+128)
 10470  151B  083F               	movf	(?___ftneg+1)^(0+128),w
 10471  151C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10472  151D  0840               	movf	(?___ftneg+2)^(0+128),w
 10473  151E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10474  151F  3000               	movlw	0
 10475  1520  00C1               	movwf	___ftadd@f1^(0+128)
 10476  1521  30B4               	movlw	180
 10477  1522  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10478  1523  3043               	movlw	67
 10479  1524  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10480  1525  0022               	movlb	2	; select bank2
 10481  1526  0837               	movf	modCos@inflection^(0+256),w
 10482  1527  0021               	movlb	1	; select bank1
 10483  1528  00BE               	movwf	___ftneg@f1^(0+128)
 10484  1529  0022               	movlb	2	; select bank2
 10485  152A  0838               	movf	(modCos@inflection+1)^(0+256),w
 10486  152B  0021               	movlb	1	; select bank1
 10487  152C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10488  152D  0022               	movlb	2	; select bank2
 10489  152E  0839               	movf	(modCos@inflection+2)^(0+256),w
 10490  152F  0021               	movlb	1	; select bank1
 10491  1530  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10492  1531  31AD  25B2  3194   	fcall	___ftneg
 10493  1534  0021               	movlb	1	; select bank1
 10494  1535  083E               	movf	?___ftneg^(0+128),w
 10495  1536  00C4               	movwf	___ftadd@f2^(0+128)
 10496  1537  083F               	movf	(?___ftneg+1)^(0+128),w
 10497  1538  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10498  1539  0840               	movf	(?___ftneg+2)^(0+128),w
 10499  153A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10500  153B  3190  200F  3194   	fcall	___ftadd
 10501  153E  0021               	movlb	1	; select bank1
 10502  153F  0841               	movf	?___ftadd^(0+128),w
 10503  1540  00CE               	movwf	___ftdiv@f2^(0+128)
 10504  1541  0842               	movf	(?___ftadd+1)^(0+128),w
 10505  1542  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10506  1543  0843               	movf	(?___ftadd+2)^(0+128),w
 10507  1544  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10508  1545  3000               	movlw	0
 10509  1546  00D1               	movwf	___ftdiv@f1^(0+128)
 10510  1547  3034               	movlw	52
 10511  1548  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10512  1549  3043               	movlw	67
 10513  154A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10514  154B  319D  2528  3194   	fcall	___ftdiv
 10515  154E  0021               	movlb	1	; select bank1
 10516  154F  084E               	movf	?___ftdiv^(0+128),w
 10517  1550  00B1               	movwf	___ftmul@f2^(0+128)
 10518  1551  084F               	movf	(?___ftdiv+1)^(0+128),w
 10519  1552  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10520  1553  0850               	movf	(?___ftdiv+2)^(0+128),w
 10521  1554  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10522  1555  3187  273B  3194   	fcall	___ftmul
 10523  1558  0021               	movlb	1	; select bank1
 10524  1559  082E               	movf	?___ftmul^(0+128),w
 10525  155A  0022               	movlb	2	; select bank2
 10526  155B  00BF               	movwf	modCos@shift^(0+256)
 10527  155C  0021               	movlb	1	; select bank1
 10528  155D  082F               	movf	(?___ftmul+1)^(0+128),w
 10529  155E  0022               	movlb	2	; select bank2
 10530  155F  00C0               	movwf	(modCos@shift+1)^(0+256)
 10531  1560  0021               	movlb	1	; select bank1
 10532  1561  0830               	movf	(?___ftmul+2)^(0+128),w
 10533  1562  0022               	movlb	2	; select bank2
 10534  1563  00C1               	movwf	(modCos@shift+2)^(0+256)
 10535                           
 10536                           ;modulation.c: 88: period = 180/(360-inflection);
 10537  1564  3000               	movlw	0
 10538  1565  0021               	movlb	1	; select bank1
 10539  1566  00C1               	movwf	___ftadd@f1^(0+128)
 10540  1567  30B4               	movlw	180
 10541  1568  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10542  1569  3043               	movlw	67
 10543  156A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10544  156B  0022               	movlb	2	; select bank2
 10545  156C  0837               	movf	modCos@inflection^(0+256),w
 10546  156D  0021               	movlb	1	; select bank1
 10547  156E  00BE               	movwf	___ftneg@f1^(0+128)
 10548  156F  0022               	movlb	2	; select bank2
 10549  1570  0838               	movf	(modCos@inflection+1)^(0+256),w
 10550  1571  0021               	movlb	1	; select bank1
 10551  1572  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10552  1573  0022               	movlb	2	; select bank2
 10553  1574  0839               	movf	(modCos@inflection+2)^(0+256),w
 10554  1575  0021               	movlb	1	; select bank1
 10555  1576  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10556  1577  31AD  25B2  3194   	fcall	___ftneg
 10557  157A  0021               	movlb	1	; select bank1
 10558  157B  083E               	movf	?___ftneg^(0+128),w
 10559  157C  00C4               	movwf	___ftadd@f2^(0+128)
 10560  157D  083F               	movf	(?___ftneg+1)^(0+128),w
 10561  157E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10562  157F  0840               	movf	(?___ftneg+2)^(0+128),w
 10563  1580  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10564  1581  3190  200F  3194   	fcall	___ftadd
 10565  1584  0021               	movlb	1	; select bank1
 10566  1585  0841               	movf	?___ftadd^(0+128),w
 10567  1586  00CE               	movwf	___ftdiv@f2^(0+128)
 10568  1587  0842               	movf	(?___ftadd+1)^(0+128),w
 10569  1588  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10570  1589  0843               	movf	(?___ftadd+2)^(0+128),w
 10571  158A                     L7:	
 10572  158A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10573  158B  3000               	movlw	0
 10574  158C  00D1               	movwf	___ftdiv@f1^(0+128)
 10575  158D  3034               	movlw	52
 10576  158E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10577  158F  3043               	movlw	67
 10578  1590  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10579  1591  319D  2528  3194   	fcall	___ftdiv
 10580  1594  0021               	movlb	1	; select bank1
 10581  1595  084E               	movf	?___ftdiv^(0+128),w
 10582  1596  0022               	movlb	2	; select bank2
 10583  1597  00C2               	movwf	modCos@period^(0+256)
 10584  1598  0021               	movlb	1	; select bank1
 10585  1599  084F               	movf	(?___ftdiv+1)^(0+128),w
 10586  159A  0022               	movlb	2	; select bank2
 10587  159B  00C3               	movwf	(modCos@period+1)^(0+256)
 10588  159C  0021               	movlb	1	; select bank1
 10589  159D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10590  159E  0022               	movlb	2	; select bank2
 10591  159F  00C4               	movwf	(modCos@period+2)^(0+256)
 10592                           
 10593                           ;modulation.c: 90: }
 10594                           ;modulation.c: 91: double tmpVal = (period*angle-shift) /3;
 10595  15A0  3000               	movlw	0
 10596  15A1  0021               	movlb	1	; select bank1
 10597  15A2  00CE               	movwf	___ftdiv@f2^(0+128)
 10598  15A3  3040               	movlw	64
 10599  15A4  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10600  15A5  3040               	movlw	64
 10601  15A6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10602  15A7  0022               	movlb	2	; select bank2
 10603  15A8  083F               	movf	modCos@shift^(0+256),w
 10604  15A9  0021               	movlb	1	; select bank1
 10605  15AA  00BE               	movwf	___ftneg@f1^(0+128)
 10606  15AB  0022               	movlb	2	; select bank2
 10607  15AC  0840               	movf	(modCos@shift+1)^(0+256),w
 10608  15AD  0021               	movlb	1	; select bank1
 10609  15AE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10610  15AF  0022               	movlb	2	; select bank2
 10611  15B0  0841               	movf	(modCos@shift+2)^(0+256),w
 10612  15B1  0021               	movlb	1	; select bank1
 10613  15B2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10614  15B3  31AD  25B2  3194   	fcall	___ftneg
 10615  15B6  0021               	movlb	1	; select bank1
 10616  15B7  083E               	movf	?___ftneg^(0+128),w
 10617  15B8  00C1               	movwf	___ftadd@f1^(0+128)
 10618  15B9  083F               	movf	(?___ftneg+1)^(0+128),w
 10619  15BA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10620  15BB  0840               	movf	(?___ftneg+2)^(0+128),w
 10621  15BC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10622  15BD  0022               	movlb	2	; select bank2
 10623  15BE  0834               	movf	modCos@angle^(0+256),w
 10624  15BF  0021               	movlb	1	; select bank1
 10625  15C0  00AE               	movwf	___ftmul@f1^(0+128)
 10626  15C1  0022               	movlb	2	; select bank2
 10627  15C2  0835               	movf	(modCos@angle+1)^(0+256),w
 10628  15C3  0021               	movlb	1	; select bank1
 10629  15C4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10630  15C5  0022               	movlb	2	; select bank2
 10631  15C6  0836               	movf	(modCos@angle+2)^(0+256),w
 10632  15C7  0021               	movlb	1	; select bank1
 10633  15C8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10634  15C9  0022               	movlb	2	; select bank2
 10635  15CA  0842               	movf	modCos@period^(0+256),w
 10636  15CB  0021               	movlb	1	; select bank1
 10637  15CC  00B1               	movwf	___ftmul@f2^(0+128)
 10638  15CD  0022               	movlb	2	; select bank2
 10639  15CE  0843               	movf	(modCos@period+1)^(0+256),w
 10640  15CF  0021               	movlb	1	; select bank1
 10641  15D0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10642  15D1  0022               	movlb	2	; select bank2
 10643  15D2  0844               	movf	(modCos@period+2)^(0+256),w
 10644  15D3  0021               	movlb	1	; select bank1
 10645  15D4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10646  15D5  3187  273B  3194   	fcall	___ftmul
 10647  15D8  0021               	movlb	1	; select bank1
 10648  15D9  082E               	movf	?___ftmul^(0+128),w
 10649  15DA  00C4               	movwf	___ftadd@f2^(0+128)
 10650  15DB  082F               	movf	(?___ftmul+1)^(0+128),w
 10651  15DC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10652  15DD  0830               	movf	(?___ftmul+2)^(0+128),w
 10653  15DE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10654  15DF  3190  200F  3194   	fcall	___ftadd
 10655  15E2  0021               	movlb	1	; select bank1
 10656  15E3  0841               	movf	?___ftadd^(0+128),w
 10657  15E4  00D1               	movwf	___ftdiv@f1^(0+128)
 10658  15E5  0842               	movf	(?___ftadd+1)^(0+128),w
 10659  15E6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10660  15E7  0843               	movf	(?___ftadd+2)^(0+128),w
 10661  15E8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10662  15E9  319D  2528  3194   	fcall	___ftdiv
 10663  15EC  0021               	movlb	1	; select bank1
 10664  15ED  084E               	movf	?___ftdiv^(0+128),w
 10665  15EE  0022               	movlb	2	; select bank2
 10666  15EF  00C5               	movwf	modCos@tmpVal^(0+256)
 10667  15F0  0021               	movlb	1	; select bank1
 10668  15F1  084F               	movf	(?___ftdiv+1)^(0+128),w
 10669  15F2  0022               	movlb	2	; select bank2
 10670  15F3  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10671  15F4  0021               	movlb	1	; select bank1
 10672  15F5  0850               	movf	(?___ftdiv+2)^(0+128),w
 10673  15F6  0022               	movlb	2	; select bank2
 10674  15F7  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10675                           
 10676                           ;modulation.c: 92: tmpVal = cosArray[(int)(tmpVal)];
 10677  15F8  0845               	movf	modCos@tmpVal^(0+256),w
 10678  15F9  00A0               	movwf	___fttol@f1^(0+256)
 10679  15FA  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10680  15FB  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10681  15FC  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10682  15FD  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10683  15FE  319A  2263  3194   	fcall	___fttol
 10684  1601  0022               	movlb	2	; select bank2
 10685  1602  0821               	movf	(?___fttol^(0+256)+1),w
 10686  1603  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10687  1604  0820               	movf	?___fttol^(0+256),w
 10688  1605  00AE               	movwf	___wmul@multiplier^(0+256)
 10689  1606  3003               	movlw	3
 10690  1607  00B0               	movwf	___wmul@multiplicand^(0+256)
 10691  1608  3000               	movlw	0
 10692  1609  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10693  160A  31AE  2650  3194   	fcall	___wmul
 10694  160D  3082               	movlw	130
 10695  160E  0022               	movlb	2	; select bank2
 10696  160F  00BA               	movwf	??_modCos^(0+256)
 10697  1610  3024               	movlw	36
 10698  1611  00BB               	movwf	(??_modCos^(0+256)+1)
 10699  1612  082E               	movf	?___wmul^(0+256),w
 10700  1613  073A               	addwf	??_modCos^(0+256),w
 10701  1614  0086               	movwf	6
 10702  1615  082F               	movf	(?___wmul+1)^(0+256),w
 10703  1616  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 10704  1617  0087               	movwf	7
 10705  1618  3F40               	moviw [0]fsr1
 10706  1619  00C5               	movwf	modCos@tmpVal^(0+256)
 10707  161A  3F41               	moviw [1]fsr1
 10708  161B  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10709  161C  3F42               	moviw [2]fsr1
 10710  161D  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10711                           
 10712                           ;modulation.c: 93: return (int)(-100.0 * tmpVal);
 10713  161E  0845               	movf	modCos@tmpVal^(0+256),w
 10714  161F  0021               	movlb	1	; select bank1
 10715  1620  00B1               	movwf	___ftmul@f2^(0+128)
 10716  1621  0022               	movlb	2	; select bank2
 10717  1622  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10718  1623  0021               	movlb	1	; select bank1
 10719  1624  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10720  1625  0022               	movlb	2	; select bank2
 10721  1626  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10722  1627  0021               	movlb	1	; select bank1
 10723  1628  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10724  1629  3000               	movlw	0
 10725  162A  00AE               	movwf	___ftmul@f1^(0+128)
 10726  162B  30C8               	movlw	200
 10727  162C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10728  162D  30C2               	movlw	194
 10729  162E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10730  162F  3187  273B  3194   	fcall	___ftmul
 10731  1632  0021               	movlb	1	; select bank1
 10732  1633  082E               	movf	?___ftmul^(0+128),w
 10733  1634  0022               	movlb	2	; select bank2
 10734  1635  00A0               	movwf	___fttol@f1^(0+256)
 10735  1636  0021               	movlb	1	; select bank1
 10736  1637  082F               	movf	(?___ftmul+1)^(0+128),w
 10737  1638  0022               	movlb	2	; select bank2
 10738  1639  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10739  163A  0021               	movlb	1	; select bank1
 10740  163B  0830               	movf	(?___ftmul+2)^(0+128),w
 10741  163C  0022               	movlb	2	; select bank2
 10742  163D  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10743  163E  319A  2263         	fcall	___fttol
 10744  1640  0022               	movlb	2	; select bank2
 10745  1641  0821               	movf	(?___fttol^(0+256)+1),w
 10746  1642  00B5               	movwf	(?_modCos+1)^(0+256)
 10747  1643  0820               	movf	?___fttol^(0+256),w
 10748  1644  00B4               	movwf	?_modCos^(0+256)
 10749  1645  0008               	return
 10750  1646                     __end_of_modCos:	
 10751                           
 10752                           	psect	text20
 10753  2E88                     __ptext20:	
 10754 ;; *************** function _modSawRev *****************
 10755 ;; Defined at:
 10756 ;;		line 134 in file "modulation.c"
 10757 ;; Parameters:    Size  Location     Type
 10758 ;;  angle           3   37[BANK2 ] int 
 10759 ;;  inflection      3   40[BANK2 ] int 
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;		None
 10762 ;; Return value:  Size  Location     Type
 10763 ;;                  2   37[BANK2 ] int 
 10764 ;; Registers used:
 10765 ;;		wreg, status,2, status,0, pclath, cstack
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10771 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10773 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10774 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10775 ;;Total ram usage:        8 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; Hardware stack levels required when called:    6
 10778 ;; This function calls:
 10779 ;;		_modSaw
 10780 ;; This function is called by:
 10781 ;;		_updateModulationArray
 10782 ;; This function uses a non-reentrant model
 10783 ;;
 10784                           
 10785                           
 10786                           ;psect for function _modSawRev
 10787  2E88                     _modSawRev:	
 10788                           
 10789                           ;modulation.c: 135: return -1 * modSaw(angle, inflection);
 10790                           
 10791                           ;incstack = 0
 10792                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10793  2E88  0022               	movlb	2	; select bank2
 10794  2E89  0845               	movf	modSawRev@angle^(0+256),w
 10795  2E8A  00AE               	movwf	modSaw@angle^(0+256)
 10796  2E8B  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10797  2E8C  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10798  2E8D  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10799  2E8E  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10800  2E8F  0848               	movf	modSawRev@inflection^(0+256),w
 10801  2E90  00B1               	movwf	modSaw@inflection^(0+256)
 10802  2E91  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10803  2E92  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10804  2E93  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10805  2E94  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10806  2E95  3196  2646         	fcall	_modSaw
 10807  2E97  0022               	movlb	2	; select bank2
 10808  2E98  092E               	comf	?_modSaw^(0+256),w
 10809  2E99  00CB               	movwf	??_modSawRev^(0+256)
 10810  2E9A  092F               	comf	(?_modSaw+1)^(0+256),w
 10811  2E9B  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10812  2E9C  0ACB               	incf	??_modSawRev^(0+256),f
 10813  2E9D  1903               	skipnz
 10814  2E9E  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10815  2E9F  084B               	movf	??_modSawRev^(0+256),w
 10816  2EA0  00C5               	movwf	?_modSawRev^(0+256)
 10817  2EA1  084C               	movf	(??_modSawRev+1)^(0+256),w
 10818  2EA2  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10819  2EA3  0008               	return
 10820  2EA4                     __end_of_modSawRev:	
 10821                           
 10822                           	psect	text21
 10823  1646                     __ptext21:	
 10824 ;; *************** function _modSaw *****************
 10825 ;; Defined at:
 10826 ;;		line 119 in file "modulation.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;  angle           3   14[BANK2 ] int 
 10829 ;;  inflection      3   17[BANK2 ] int 
 10830 ;; Auto vars:     Size  Location     Type
 10831 ;;  period          3   34[BANK2 ] int 
 10832 ;;  shift           3   31[BANK2 ] int 
 10833 ;;  mod             2   29[BANK2 ] int 
 10834 ;; Return value:  Size  Location     Type
 10835 ;;                  2   14[BANK2 ] int 
 10836 ;; Registers used:
 10837 ;;		wreg, status,2, status,0, pclath, cstack
 10838 ;; Tracked objects:
 10839 ;;		On entry : 0/0
 10840 ;;		On exit  : 0/0
 10841 ;;		Unchanged: 0/0
 10842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10843 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10844 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10846 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10847 ;;Total ram usage:       23 bytes
 10848 ;; Hardware stack levels used:    1
 10849 ;; Hardware stack levels required when called:    5
 10850 ;; This function calls:
 10851 ;;		___ftadd
 10852 ;;		___ftdiv
 10853 ;;		___ftge
 10854 ;;		___ftmul
 10855 ;;		___ftneg
 10856 ;;		___fttol
 10857 ;; This function is called by:
 10858 ;;		_updateModulationArray
 10859 ;;		_modSawRev
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           
 10864                           ;psect for function _modSaw
 10865  1646                     _modSaw:	
 10866                           
 10867                           ;modulation.c: 120: double period = 1.0;
 10868                           
 10869                           ;incstack = 0
 10870                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10871  1646  3000               	movlw	0
 10872  1647  0022               	movlb	2	; select bank2
 10873  1648  00C2               	movwf	modSaw@period^(0+256)
 10874  1649  3080               	movlw	128
 10875  164A  00C3               	movwf	(modSaw@period+1)^(0+256)
 10876  164B  303F               	movlw	63
 10877  164C  00C4               	movwf	(modSaw@period+2)^(0+256)
 10878                           
 10879                           ;modulation.c: 121: double shift = 0;
 10880  164D  3000               	movlw	0
 10881  164E  00BF               	movwf	modSaw@shift^(0+256)
 10882  164F  3000               	movlw	0
 10883  1650  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10884  1651  3000               	movlw	0
 10885  1652  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10886                           
 10887                           ;modulation.c: 123: if(angle<=inflection) {
 10888  1653  0831               	movf	modSaw@inflection^(0+256),w
 10889  1654  0021               	movlb	1	; select bank1
 10890  1655  00A0               	movwf	___ftge@ff1^(0+128)
 10891  1656  0022               	movlb	2	; select bank2
 10892  1657  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10893  1658  0021               	movlb	1	; select bank1
 10894  1659  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10895  165A  0022               	movlb	2	; select bank2
 10896  165B  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10897  165C  0021               	movlb	1	; select bank1
 10898  165D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10899  165E  0022               	movlb	2	; select bank2
 10900  165F  082E               	movf	modSaw@angle^(0+256),w
 10901  1660  0021               	movlb	1	; select bank1
 10902  1661  00A3               	movwf	___ftge@ff2^(0+128)
 10903  1662  0022               	movlb	2	; select bank2
 10904  1663  082F               	movf	(modSaw@angle+1)^(0+256),w
 10905  1664  0021               	movlb	1	; select bank1
 10906  1665  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10907  1666  0022               	movlb	2	; select bank2
 10908  1667  0830               	movf	(modSaw@angle+2)^(0+256),w
 10909  1668  0021               	movlb	1	; select bank1
 10910  1669  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10911  166A  31A1  21C8  3196   	fcall	___ftge
 10912  166D  1C03               	btfss	3,0
 10913  166E  2E7B               	goto	l8222
 10914                           
 10915                           ;modulation.c: 124: period = 180.0/inflection;
 10916  166F  0022               	movlb	2	; select bank2
 10917  1670  0831               	movf	modSaw@inflection^(0+256),w
 10918  1671  0021               	movlb	1	; select bank1
 10919  1672  00CE               	movwf	___ftdiv@f2^(0+128)
 10920  1673  0022               	movlb	2	; select bank2
 10921  1674  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10922  1675  0021               	movlb	1	; select bank1
 10923  1676  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10924  1677  0022               	movlb	2	; select bank2
 10925  1678  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10926  1679  0021               	movlb	1	; select bank1
 10927  167A  2F58               	goto	L8
 10928  167B                     l8222:	
 10929                           ;modulation.c: 125: } else {
 10930                           
 10931                           
 10932                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10933  167B  0022               	movlb	2	; select bank2
 10934  167C  0831               	movf	modSaw@inflection^(0+256),w
 10935  167D  0021               	movlb	1	; select bank1
 10936  167E  00B1               	movwf	___ftmul@f2^(0+128)
 10937  167F  0022               	movlb	2	; select bank2
 10938  1680  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10939  1681  0021               	movlb	1	; select bank1
 10940  1682  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10941  1683  0022               	movlb	2	; select bank2
 10942  1684  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10943  1685  0021               	movlb	1	; select bank1
 10944  1686  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10945  1687  3000               	movlw	0
 10946  1688  00AE               	movwf	___ftmul@f1^(0+128)
 10947  1689  3000               	movlw	0
 10948  168A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10949  168B  3040               	movlw	64
 10950  168C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10951  168D  3187  273B  3196   	fcall	___ftmul
 10952  1690  0021               	movlb	1	; select bank1
 10953  1691  082E               	movf	?___ftmul^(0+128),w
 10954  1692  00BE               	movwf	___ftneg@f1^(0+128)
 10955  1693  082F               	movf	(?___ftmul+1)^(0+128),w
 10956  1694  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10957  1695  0830               	movf	(?___ftmul+2)^(0+128),w
 10958  1696  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10959  1697  31AD  25B2  3196   	fcall	___ftneg
 10960  169A  0021               	movlb	1	; select bank1
 10961  169B  083E               	movf	?___ftneg^(0+128),w
 10962  169C  00C4               	movwf	___ftadd@f2^(0+128)
 10963  169D  083F               	movf	(?___ftneg+1)^(0+128),w
 10964  169E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10965  169F  0840               	movf	(?___ftneg+2)^(0+128),w
 10966  16A0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10967  16A1  3000               	movlw	0
 10968  16A2  00C1               	movwf	___ftadd@f1^(0+128)
 10969  16A3  30B4               	movlw	180
 10970  16A4  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10971  16A5  3043               	movlw	67
 10972  16A6  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10973  16A7  3190  200F  3196   	fcall	___ftadd
 10974  16AA  0021               	movlb	1	; select bank1
 10975  16AB  0841               	movf	?___ftadd^(0+128),w
 10976  16AC  0022               	movlb	2	; select bank2
 10977  16AD  00B4               	movwf	_modSaw$2855^(0+256)
 10978  16AE  0021               	movlb	1	; select bank1
 10979  16AF  0842               	movf	(?___ftadd+1)^(0+128),w
 10980  16B0  0022               	movlb	2	; select bank2
 10981  16B1  00B5               	movwf	(_modSaw$2855+1)^(0+256)
 10982  16B2  0021               	movlb	1	; select bank1
 10983  16B3  0843               	movf	(?___ftadd+2)^(0+128),w
 10984  16B4  0022               	movlb	2	; select bank2
 10985  16B5  00B6               	movwf	(_modSaw$2855+2)^(0+256)
 10986                           
 10987                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10988  16B6  0834               	movf	_modSaw$2855^(0+256),w
 10989  16B7  0021               	movlb	1	; select bank1
 10990  16B8  00BE               	movwf	___ftneg@f1^(0+128)
 10991  16B9  0022               	movlb	2	; select bank2
 10992  16BA  0835               	movf	(_modSaw$2855+1)^(0+256),w
 10993  16BB  0021               	movlb	1	; select bank1
 10994  16BC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10995  16BD  0022               	movlb	2	; select bank2
 10996  16BE  0836               	movf	(_modSaw$2855+2)^(0+256),w
 10997  16BF  0021               	movlb	1	; select bank1
 10998  16C0  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10999  16C1  31AD  25B2  3196   	fcall	___ftneg
 11000  16C4  0021               	movlb	1	; select bank1
 11001  16C5  083E               	movf	?___ftneg^(0+128),w
 11002  16C6  00AE               	movwf	___ftmul@f1^(0+128)
 11003  16C7  083F               	movf	(?___ftneg+1)^(0+128),w
 11004  16C8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11005  16C9  0840               	movf	(?___ftneg+2)^(0+128),w
 11006  16CA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11007  16CB  3000               	movlw	0
 11008  16CC  00C1               	movwf	___ftadd@f1^(0+128)
 11009  16CD  30B4               	movlw	180
 11010  16CE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11011  16CF  3043               	movlw	67
 11012  16D0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11013  16D1  0022               	movlb	2	; select bank2
 11014  16D2  0831               	movf	modSaw@inflection^(0+256),w
 11015  16D3  0021               	movlb	1	; select bank1
 11016  16D4  00BE               	movwf	___ftneg@f1^(0+128)
 11017  16D5  0022               	movlb	2	; select bank2
 11018  16D6  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11019  16D7  0021               	movlb	1	; select bank1
 11020  16D8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11021  16D9  0022               	movlb	2	; select bank2
 11022  16DA  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11023  16DB  0021               	movlb	1	; select bank1
 11024  16DC  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11025  16DD  31AD  25B2  3196   	fcall	___ftneg
 11026  16E0  0021               	movlb	1	; select bank1
 11027  16E1  083E               	movf	?___ftneg^(0+128),w
 11028  16E2  00C4               	movwf	___ftadd@f2^(0+128)
 11029  16E3  083F               	movf	(?___ftneg+1)^(0+128),w
 11030  16E4  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11031  16E5  0840               	movf	(?___ftneg+2)^(0+128),w
 11032  16E6  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11033  16E7  3190  200F  3196   	fcall	___ftadd
 11034  16EA  0021               	movlb	1	; select bank1
 11035  16EB  0841               	movf	?___ftadd^(0+128),w
 11036  16EC  00CE               	movwf	___ftdiv@f2^(0+128)
 11037  16ED  0842               	movf	(?___ftadd+1)^(0+128),w
 11038  16EE  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11039  16EF  0843               	movf	(?___ftadd+2)^(0+128),w
 11040  16F0  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11041  16F1  3000               	movlw	0
 11042  16F2  00D1               	movwf	___ftdiv@f1^(0+128)
 11043  16F3  3034               	movlw	52
 11044  16F4  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11045  16F5  3043               	movlw	67
 11046  16F6  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11047  16F7  319D  2528  3196   	fcall	___ftdiv
 11048  16FA  0021               	movlb	1	; select bank1
 11049  16FB  084E               	movf	?___ftdiv^(0+128),w
 11050  16FC  00B1               	movwf	___ftmul@f2^(0+128)
 11051  16FD  084F               	movf	(?___ftdiv+1)^(0+128),w
 11052  16FE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11053  16FF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11054  1700  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11055  1701  3187  273B  3196   	fcall	___ftmul
 11056  1704  0021               	movlb	1	; select bank1
 11057  1705  082E               	movf	?___ftmul^(0+128),w
 11058  1706  0022               	movlb	2	; select bank2
 11059  1707  00B7               	movwf	_modSaw$2856^(0+256)
 11060  1708  0021               	movlb	1	; select bank1
 11061  1709  082F               	movf	(?___ftmul+1)^(0+128),w
 11062  170A  0022               	movlb	2	; select bank2
 11063  170B  00B8               	movwf	(_modSaw$2856+1)^(0+256)
 11064  170C  0021               	movlb	1	; select bank1
 11065  170D  0830               	movf	(?___ftmul+2)^(0+128),w
 11066  170E  0022               	movlb	2	; select bank2
 11067  170F  00B9               	movwf	(_modSaw$2856+2)^(0+256)
 11068                           
 11069                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 11070  1710  3000               	movlw	0
 11071  1711  0021               	movlb	1	; select bank1
 11072  1712  00C1               	movwf	___ftadd@f1^(0+128)
 11073  1713  30B4               	movlw	180
 11074  1714  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11075  1715  3043               	movlw	67
 11076  1716  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11077  1717  0022               	movlb	2	; select bank2
 11078  1718  0837               	movf	_modSaw$2856^(0+256),w
 11079  1719  0021               	movlb	1	; select bank1
 11080  171A  00C4               	movwf	___ftadd@f2^(0+128)
 11081  171B  0022               	movlb	2	; select bank2
 11082  171C  0838               	movf	(_modSaw$2856+1)^(0+256),w
 11083  171D  0021               	movlb	1	; select bank1
 11084  171E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11085  171F  0022               	movlb	2	; select bank2
 11086  1720  0839               	movf	(_modSaw$2856+2)^(0+256),w
 11087  1721  0021               	movlb	1	; select bank1
 11088  1722  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11089  1723  3190  200F  3196   	fcall	___ftadd
 11090  1726  0021               	movlb	1	; select bank1
 11091  1727  0841               	movf	?___ftadd^(0+128),w
 11092  1728  0022               	movlb	2	; select bank2
 11093  1729  00BF               	movwf	modSaw@shift^(0+256)
 11094  172A  0021               	movlb	1	; select bank1
 11095  172B  0842               	movf	(?___ftadd+1)^(0+128),w
 11096  172C  0022               	movlb	2	; select bank2
 11097  172D  00C0               	movwf	(modSaw@shift+1)^(0+256)
 11098  172E  0021               	movlb	1	; select bank1
 11099  172F  0843               	movf	(?___ftadd+2)^(0+128),w
 11100  1730  0022               	movlb	2	; select bank2
 11101  1731  00C1               	movwf	(modSaw@shift+2)^(0+256)
 11102                           
 11103                           ;modulation.c: 127: period = 180/(360-inflection);
 11104  1732  3000               	movlw	0
 11105  1733  0021               	movlb	1	; select bank1
 11106  1734  00C1               	movwf	___ftadd@f1^(0+128)
 11107  1735  30B4               	movlw	180
 11108  1736  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11109  1737  3043               	movlw	67
 11110  1738  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11111  1739  0022               	movlb	2	; select bank2
 11112  173A  0831               	movf	modSaw@inflection^(0+256),w
 11113  173B  0021               	movlb	1	; select bank1
 11114  173C  00BE               	movwf	___ftneg@f1^(0+128)
 11115  173D  0022               	movlb	2	; select bank2
 11116  173E  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11117  173F  0021               	movlb	1	; select bank1
 11118  1740  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11119  1741  0022               	movlb	2	; select bank2
 11120  1742  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11121  1743  0021               	movlb	1	; select bank1
 11122  1744  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11123  1745  31AD  25B2  3196   	fcall	___ftneg
 11124  1748  0021               	movlb	1	; select bank1
 11125  1749  083E               	movf	?___ftneg^(0+128),w
 11126  174A  00C4               	movwf	___ftadd@f2^(0+128)
 11127  174B  083F               	movf	(?___ftneg+1)^(0+128),w
 11128  174C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11129  174D  0840               	movf	(?___ftneg+2)^(0+128),w
 11130  174E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11131  174F  3190  200F  3196   	fcall	___ftadd
 11132  1752  0021               	movlb	1	; select bank1
 11133  1753  0841               	movf	?___ftadd^(0+128),w
 11134  1754  00CE               	movwf	___ftdiv@f2^(0+128)
 11135  1755  0842               	movf	(?___ftadd+1)^(0+128),w
 11136  1756  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11137  1757  0843               	movf	(?___ftadd+2)^(0+128),w
 11138  1758                     L8:	
 11139  1758  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11140  1759  3000               	movlw	0
 11141  175A  00D1               	movwf	___ftdiv@f1^(0+128)
 11142  175B  3034               	movlw	52
 11143  175C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11144  175D  3043               	movlw	67
 11145  175E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11146  175F  319D  2528  3196   	fcall	___ftdiv
 11147  1762  0021               	movlb	1	; select bank1
 11148  1763  084E               	movf	?___ftdiv^(0+128),w
 11149  1764  0022               	movlb	2	; select bank2
 11150  1765  00C2               	movwf	modSaw@period^(0+256)
 11151  1766  0021               	movlb	1	; select bank1
 11152  1767  084F               	movf	(?___ftdiv+1)^(0+128),w
 11153  1768  0022               	movlb	2	; select bank2
 11154  1769  00C3               	movwf	(modSaw@period+1)^(0+256)
 11155  176A  0021               	movlb	1	; select bank1
 11156  176B  0850               	movf	(?___ftdiv+2)^(0+128),w
 11157  176C  0022               	movlb	2	; select bank2
 11158  176D  00C4               	movwf	(modSaw@period+2)^(0+256)
 11159                           
 11160                           ;modulation.c: 128: }
 11161                           ;modulation.c: 130: int mod = (int)((period*angle-shift-180)*5/9);
 11162  176E  0842               	movf	modSaw@period^(0+256),w
 11163  176F  0021               	movlb	1	; select bank1
 11164  1770  00B1               	movwf	___ftmul@f2^(0+128)
 11165  1771  0022               	movlb	2	; select bank2
 11166  1772  0843               	movf	(modSaw@period+1)^(0+256),w
 11167  1773  0021               	movlb	1	; select bank1
 11168  1774  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11169  1775  0022               	movlb	2	; select bank2
 11170  1776  0844               	movf	(modSaw@period+2)^(0+256),w
 11171  1777  0021               	movlb	1	; select bank1
 11172  1778  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11173  1779  0022               	movlb	2	; select bank2
 11174  177A  082E               	movf	modSaw@angle^(0+256),w
 11175  177B  0021               	movlb	1	; select bank1
 11176  177C  00AE               	movwf	___ftmul@f1^(0+128)
 11177  177D  0022               	movlb	2	; select bank2
 11178  177E  082F               	movf	(modSaw@angle+1)^(0+256),w
 11179  177F  0021               	movlb	1	; select bank1
 11180  1780  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11181  1781  0022               	movlb	2	; select bank2
 11182  1782  0830               	movf	(modSaw@angle+2)^(0+256),w
 11183  1783  0021               	movlb	1	; select bank1
 11184  1784  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11185  1785  3187  273B  3196   	fcall	___ftmul
 11186  1788  0021               	movlb	1	; select bank1
 11187  1789  082E               	movf	?___ftmul^(0+128),w
 11188  178A  00C4               	movwf	___ftadd@f2^(0+128)
 11189  178B  082F               	movf	(?___ftmul+1)^(0+128),w
 11190  178C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11191  178D  0830               	movf	(?___ftmul+2)^(0+128),w
 11192  178E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11193  178F  0022               	movlb	2	; select bank2
 11194  1790  083F               	movf	modSaw@shift^(0+256),w
 11195  1791  0021               	movlb	1	; select bank1
 11196  1792  00BE               	movwf	___ftneg@f1^(0+128)
 11197  1793  0022               	movlb	2	; select bank2
 11198  1794  0840               	movf	(modSaw@shift+1)^(0+256),w
 11199  1795  0021               	movlb	1	; select bank1
 11200  1796  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11201  1797  0022               	movlb	2	; select bank2
 11202  1798  0841               	movf	(modSaw@shift+2)^(0+256),w
 11203  1799  0021               	movlb	1	; select bank1
 11204  179A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11205  179B  31AD  25B2  3196   	fcall	___ftneg
 11206  179E  0021               	movlb	1	; select bank1
 11207  179F  083E               	movf	?___ftneg^(0+128),w
 11208  17A0  00C1               	movwf	___ftadd@f1^(0+128)
 11209  17A1  083F               	movf	(?___ftneg+1)^(0+128),w
 11210  17A2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11211  17A3  0840               	movf	(?___ftneg+2)^(0+128),w
 11212  17A4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11213  17A5  3190  200F  3196   	fcall	___ftadd
 11214  17A8  0021               	movlb	1	; select bank1
 11215  17A9  0841               	movf	?___ftadd^(0+128),w
 11216  17AA  0022               	movlb	2	; select bank2
 11217  17AB  00BA               	movwf	_modSaw$2857^(0+256)
 11218  17AC  0021               	movlb	1	; select bank1
 11219  17AD  0842               	movf	(?___ftadd+1)^(0+128),w
 11220  17AE  0022               	movlb	2	; select bank2
 11221  17AF  00BB               	movwf	(_modSaw$2857+1)^(0+256)
 11222  17B0  0021               	movlb	1	; select bank1
 11223  17B1  0843               	movf	(?___ftadd+2)^(0+128),w
 11224  17B2  0022               	movlb	2	; select bank2
 11225  17B3  00BC               	movwf	(_modSaw$2857+2)^(0+256)
 11226                           
 11227                           ;modulation.c: 128: }
 11228                           ;modulation.c: 130: int mod = (int)((period*angle-shift-180)*5/9);
 11229  17B4  083A               	movf	_modSaw$2857^(0+256),w
 11230  17B5  0021               	movlb	1	; select bank1
 11231  17B6  00C4               	movwf	___ftadd@f2^(0+128)
 11232  17B7  0022               	movlb	2	; select bank2
 11233  17B8  083B               	movf	(_modSaw$2857+1)^(0+256),w
 11234  17B9  0021               	movlb	1	; select bank1
 11235  17BA  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11236  17BB  0022               	movlb	2	; select bank2
 11237  17BC  083C               	movf	(_modSaw$2857+2)^(0+256),w
 11238  17BD  0021               	movlb	1	; select bank1
 11239  17BE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11240  17BF  3000               	movlw	0
 11241  17C0  00C1               	movwf	___ftadd@f1^(0+128)
 11242  17C1  3034               	movlw	52
 11243  17C2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11244  17C3  30C3               	movlw	195
 11245  17C4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11246  17C5  3190  200F  3196   	fcall	___ftadd
 11247  17C8  0021               	movlb	1	; select bank1
 11248  17C9  0841               	movf	?___ftadd^(0+128),w
 11249  17CA  00B1               	movwf	___ftmul@f2^(0+128)
 11250  17CB  0842               	movf	(?___ftadd+1)^(0+128),w
 11251  17CC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11252  17CD  0843               	movf	(?___ftadd+2)^(0+128),w
 11253  17CE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11254  17CF  3000               	movlw	0
 11255  17D0  00AE               	movwf	___ftmul@f1^(0+128)
 11256  17D1  30A0               	movlw	160
 11257  17D2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11258  17D3  3040               	movlw	64
 11259  17D4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11260  17D5  3187  273B  3196   	fcall	___ftmul
 11261  17D8  0021               	movlb	1	; select bank1
 11262  17D9  082E               	movf	?___ftmul^(0+128),w
 11263  17DA  00D1               	movwf	___ftdiv@f1^(0+128)
 11264  17DB  082F               	movf	(?___ftmul+1)^(0+128),w
 11265  17DC  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11266  17DD  0830               	movf	(?___ftmul+2)^(0+128),w
 11267  17DE  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11268  17DF  3000               	movlw	0
 11269  17E0  00CE               	movwf	___ftdiv@f2^(0+128)
 11270  17E1  3010               	movlw	16
 11271  17E2  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11272  17E3  3041               	movlw	65
 11273  17E4  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11274  17E5  319D  2528  3196   	fcall	___ftdiv
 11275  17E8  0021               	movlb	1	; select bank1
 11276  17E9  084E               	movf	?___ftdiv^(0+128),w
 11277  17EA  0022               	movlb	2	; select bank2
 11278  17EB  00A0               	movwf	___fttol@f1^(0+256)
 11279  17EC  0021               	movlb	1	; select bank1
 11280  17ED  084F               	movf	(?___ftdiv+1)^(0+128),w
 11281  17EE  0022               	movlb	2	; select bank2
 11282  17EF  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11283  17F0  0021               	movlb	1	; select bank1
 11284  17F1  0850               	movf	(?___ftdiv+2)^(0+128),w
 11285  17F2  0022               	movlb	2	; select bank2
 11286  17F3  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11287  17F4  319A  2263         	fcall	___fttol
 11288  17F6  0022               	movlb	2	; select bank2
 11289  17F7  0821               	movf	(?___fttol^(0+256)+1),w
 11290  17F8  00BE               	movwf	(modSaw@mod+1)^(0+256)
 11291  17F9  0820               	movf	?___fttol^(0+256),w
 11292  17FA  00BD               	movwf	modSaw@mod^(0+256)
 11293                           
 11294                           ;modulation.c: 131: return mod;
 11295  17FB  083E               	movf	(modSaw@mod+1)^(0+256),w
 11296  17FC  00AF               	movwf	(?_modSaw+1)^(0+256)
 11297  17FD  083D               	movf	modSaw@mod^(0+256),w
 11298  17FE  00AE               	movwf	?_modSaw^(0+256)
 11299  17FF  0008               	return
 11300  1800                     __end_of_modSaw:	
 11301                           
 11302                           	psect	text22
 11303  253E                     __ptext22:	
 11304 ;; *************** function ___awdiv *****************
 11305 ;; Defined at:
 11306 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;  divisor         2    0[BANK1 ] int 
 11309 ;;  dividend        2    2[BANK1 ] int 
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;  quotient        2    7[BANK1 ] int 
 11312 ;;  sign            1    6[BANK1 ] unsigned char 
 11313 ;;  counter         1    5[BANK1 ] unsigned char 
 11314 ;; Return value:  Size  Location     Type
 11315 ;;                  2    0[BANK1 ] int 
 11316 ;; Registers used:
 11317 ;;		wreg, status,2, status,0
 11318 ;; Tracked objects:
 11319 ;;		On entry : 0/0
 11320 ;;		On exit  : 0/0
 11321 ;;		Unchanged: 0/0
 11322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11323 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11324 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11325 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11326 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11327 ;;Total ram usage:        9 bytes
 11328 ;; Hardware stack levels used:    1
 11329 ;; Hardware stack levels required when called:    3
 11330 ;; This function calls:
 11331 ;;		Nothing
 11332 ;; This function is called by:
 11333 ;;		_updateModulationArray
 11334 ;;		_USARTWriteInt
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           
 11339                           ;psect for function ___awdiv
 11340  253E                     ___awdiv:	
 11341                           
 11342                           ;incstack = 0
 11343                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11344  253E  0021               	movlb	1	; select bank1
 11345  253F  01A6               	clrf	___awdiv@sign^(0+128)
 11346  2540  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11347  2541  2D49               	goto	l8608
 11348  2542  09A0               	comf	___awdiv@divisor^(0+128),f
 11349  2543  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11350  2544  0AA0               	incf	___awdiv@divisor^(0+128),f
 11351  2545  1903               	skipnz
 11352  2546  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11353  2547  01A6               	clrf	___awdiv@sign^(0+128)
 11354  2548  0AA6               	incf	___awdiv@sign^(0+128),f
 11355  2549                     l8608:	
 11356  2549  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11357  254A  2D54               	goto	l8614
 11358  254B  09A2               	comf	___awdiv@dividend^(0+128),f
 11359  254C  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11360  254D  0AA2               	incf	___awdiv@dividend^(0+128),f
 11361  254E  1903               	skipnz
 11362  254F  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11363  2550  3001               	movlw	1
 11364  2551  00A4               	movwf	??___awdiv^(0+128)
 11365  2552  0824               	movf	??___awdiv^(0+128),w
 11366  2553  06A6               	xorwf	___awdiv@sign^(0+128),f
 11367  2554                     l8614:	
 11368  2554  01A7               	clrf	___awdiv@quotient^(0+128)
 11369  2555  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11370  2556  0820               	movf	___awdiv@divisor^(0+128),w
 11371  2557  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11372  2558  1903               	btfsc	3,2
 11373  2559  2D83               	goto	l8636
 11374  255A  01A5               	clrf	___awdiv@counter^(0+128)
 11375  255B  0AA5               	incf	___awdiv@counter^(0+128),f
 11376  255C                     l8624:	
 11377  255C  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11378  255D  2D68               	goto	l8626
 11379  255E  3001               	movlw	1
 11380  255F                     u9125:	
 11381  255F  35A0               	lslf	___awdiv@divisor^(0+128),f
 11382  2560  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11383  2561  0B89               	decfsz	9,f
 11384  2562  2D5F               	goto	u9125
 11385  2563  3001               	movlw	1
 11386  2564  00A4               	movwf	??___awdiv^(0+128)
 11387  2565  0824               	movf	??___awdiv^(0+128),w
 11388  2566  07A5               	addwf	___awdiv@counter^(0+128),f
 11389  2567  2D5C               	goto	l8624
 11390  2568                     l8626:	
 11391  2568  3001               	movlw	1
 11392  2569                     u9145:	
 11393  2569  35A7               	lslf	___awdiv@quotient^(0+128),f
 11394  256A  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11395  256B  0B89               	decfsz	9,f
 11396  256C  2D69               	goto	u9145
 11397  256D  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11398  256E  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11399  256F  1D03               	skipz
 11400  2570  2D73               	goto	u9155
 11401  2571  0820               	movf	___awdiv@divisor^(0+128),w
 11402  2572  0222               	subwf	___awdiv@dividend^(0+128),w
 11403  2573                     u9155:	
 11404  2573  1C03               	skipc
 11405  2574  2D7A               	goto	l8632
 11406  2575  0820               	movf	___awdiv@divisor^(0+128),w
 11407  2576  02A2               	subwf	___awdiv@dividend^(0+128),f
 11408  2577  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11409  2578  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11410  2579  1427               	bsf	___awdiv@quotient^(0+128),0
 11411  257A                     l8632:	
 11412  257A  3001               	movlw	1
 11413  257B                     u9165:	
 11414  257B  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11415  257C  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11416  257D  0B89               	decfsz	9,f
 11417  257E  2D7B               	goto	u9165
 11418  257F  3001               	movlw	1
 11419  2580  02A5               	subwf	___awdiv@counter^(0+128),f
 11420  2581  1D03               	btfss	3,2
 11421  2582  2D68               	goto	l8626
 11422  2583                     l8636:	
 11423  2583  0826               	movf	___awdiv@sign^(0+128),w
 11424  2584  1903               	btfsc	3,2
 11425  2585  2D8B               	goto	l8640
 11426  2586  09A7               	comf	___awdiv@quotient^(0+128),f
 11427  2587  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11428  2588  0AA7               	incf	___awdiv@quotient^(0+128),f
 11429  2589  1903               	skipnz
 11430  258A  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11431  258B                     l8640:	
 11432  258B  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11433  258C  00A1               	movwf	(?___awdiv+1)^(0+128)
 11434  258D  0827               	movf	___awdiv@quotient^(0+128),w
 11435  258E  00A0               	movwf	?___awdiv^(0+128)
 11436  258F  0008               	return
 11437  2590                     __end_of___awdiv:	
 11438                           
 11439                           	psect	text23
 11440  1B75                     __ptext23:	
 11441 ;; *************** function _set_subdivision *****************
 11442 ;; Defined at:
 11443 ;;		line 77 in file "user.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;  x               2   14[BANK2 ] int 
 11446 ;;  y               2   16[BANK2 ] int 
 11447 ;; Auto vars:     Size  Location     Type
 11448 ;;  scalar          3   18[BANK2 ] float 
 11449 ;;  tmpX            2   21[BANK2 ] int 
 11450 ;; Return value:  Size  Location     Type
 11451 ;;                  2   14[BANK2 ] int 
 11452 ;; Registers used:
 11453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11454 ;; Tracked objects:
 11455 ;;		On entry : 0/0
 11456 ;;		On exit  : 0/0
 11457 ;;		Unchanged: 0/0
 11458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11459 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11460 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11462 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11463 ;;Total ram usage:        9 bytes
 11464 ;; Hardware stack levels used:    1
 11465 ;; Hardware stack levels required when called:    5
 11466 ;; This function calls:
 11467 ;;		___awtoft
 11468 ;;		___ftmul
 11469 ;;		___fttol
 11470 ;; This function is called by:
 11471 ;;		_main
 11472 ;; This function uses a non-reentrant model
 11473 ;;
 11474                           
 11475                           
 11476                           ;psect for function _set_subdivision
 11477  1B75                     _set_subdivision:	
 11478                           
 11479                           ;user.c: 81: adjust_mod_delay = 0;
 11480                           
 11481                           ;incstack = 0
 11482                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11483  1B75  0023               	movlb	3	; select bank3
 11484  1B76  01BA               	clrf	_adjust_mod_delay^(0+384)
 11485                           
 11486                           ;user.c: 82: int tmpX = x;
 11487  1B77  0022               	movlb	2	; select bank2
 11488  1B78  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11489  1B79  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11490  1B7A  082E               	movf	set_subdivision@x^(0+256),w
 11491  1B7B  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11492                           
 11493                           ;user.c: 83: float scalar = 1.0;
 11494  1B7C  3000               	movlw	0
 11495  1B7D  00B2               	movwf	set_subdivision@scalar^(0+256)
 11496  1B7E  3080               	movlw	128
 11497  1B7F  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11498  1B80  303F               	movlw	63
 11499  1B81  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11500                           
 11501                           ;user.c: 85: switch (y) {
 11502  1B82  2BA2               	goto	l9194
 11503  1B83                     l9180:	
 11504                           ;user.c: 86: case 1:
 11505                           
 11506                           
 11507                           ;user.c: 87: scalar = 2.0;
 11508  1B83  3000               	movlw	0
 11509  1B84  00B2               	movwf	set_subdivision@scalar^(0+256)
 11510  1B85  3000               	movlw	0
 11511  1B86  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11512  1B87  3040               	movlw	64
 11513  1B88  2BA0               	goto	L13
 11514  1B89                     l9182:	
 11515                           ;user.c: 89: case 2:
 11516                           
 11517                           ;user.c: 88: break;
 11518                           
 11519                           
 11520                           ;user.c: 90: scalar = 0.6666;
 11521  1B89  30A6               	movlw	166
 11522  1B8A  00B2               	movwf	set_subdivision@scalar^(0+256)
 11523  1B8B  302A               	movlw	42
 11524  1B8C  2B9E               	goto	L14
 11525  1B8D                     l9184:	
 11526                           ;user.c: 92: case 3:
 11527                           
 11528                           ;user.c: 91: break;
 11529                           
 11530                           
 11531                           ;user.c: 93: scalar = .5;
 11532  1B8D  3000               	movlw	0
 11533  1B8E  00B2               	movwf	set_subdivision@scalar^(0+256)
 11534  1B8F  3000               	movlw	0
 11535  1B90  2B9E               	goto	L14
 11536  1B91                     l9186:	
 11537                           ;user.c: 95: case 4:
 11538                           
 11539                           ;user.c: 94: break;
 11540                           
 11541                           
 11542                           ;user.c: 96: scalar = 0.3333;
 11543  1B91  30A6               	movlw	166
 11544  1B92  00B2               	movwf	set_subdivision@scalar^(0+256)
 11545  1B93  30AA               	movlw	170
 11546  1B94  2B98               	goto	L15
 11547  1B95                     l9188:	
 11548                           ;user.c: 98: case 5:
 11549                           
 11550                           ;user.c: 97: break;
 11551                           
 11552                           
 11553                           ;user.c: 99: scalar = 0.25;
 11554  1B95  3000               	movlw	0
 11555  1B96  00B2               	movwf	set_subdivision@scalar^(0+256)
 11556  1B97  3080               	movlw	128
 11557  1B98                     L15:	
 11558  1B98  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11559  1B99  303E               	movlw	62
 11560  1B9A  2BA0               	goto	L13
 11561  1B9B                     l9190:	
 11562                           ;user.c: 101: case 6:
 11563                           
 11564                           ;user.c: 100: break;
 11565                           
 11566                           
 11567                           ;user.c: 102: scalar = 1.0;
 11568  1B9B  3000               	movlw	0
 11569  1B9C  00B2               	movwf	set_subdivision@scalar^(0+256)
 11570  1B9D  3080               	movlw	128
 11571  1B9E                     L14:	
 11572  1B9E  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11573  1B9F  303F               	movlw	63
 11574  1BA0                     L13:	
 11575  1BA0  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11576                           
 11577                           ;user.c: 104: }
 11578                           
 11579                           ;user.c: 103: break;
 11580  1BA1  2BBB               	goto	l9196
 11581  1BA2                     l9194:	
 11582                           
 11583                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11584                           ; Switch size 1, requested type "space"
 11585                           ; Number of cases is 1, Range of values is 0 to 0
 11586                           ; switch strategies available:
 11587                           ; Name         Instructions Cycles
 11588                           ; simple_byte            4     3 (average)
 11589                           ; direct_byte            8     6 (fixed)
 11590                           ; jumptable            260     6 (fixed)
 11591                           ;	Chosen strategy is simple_byte
 11592  1BA2  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11593  1BA3  3A00               	xorlw	0	; case 0
 11594  1BA4  1903               	skipnz
 11595  1BA5  2BA7               	goto	l9774
 11596  1BA6  2BBB               	goto	l9196
 11597  1BA7                     l9774:	
 11598                           
 11599                           ; Switch size 1, requested type "space"
 11600                           ; Number of cases is 6, Range of values is 1 to 6
 11601                           ; switch strategies available:
 11602                           ; Name         Instructions Cycles
 11603                           ; simple_byte           19    10 (average)
 11604                           ; direct_byte           21     9 (fixed)
 11605                           ; jumptable            263     9 (fixed)
 11606                           ;	Chosen strategy is simple_byte
 11607  1BA7  0830               	movf	set_subdivision@y^(0+256),w
 11608  1BA8  3A01               	xorlw	1	; case 1
 11609  1BA9  1903               	skipnz
 11610  1BAA  2B83               	goto	l9180
 11611  1BAB  3A03               	xorlw	3	; case 2
 11612  1BAC  1903               	skipnz
 11613  1BAD  2B89               	goto	l9182
 11614  1BAE  3A01               	xorlw	1	; case 3
 11615  1BAF  1903               	skipnz
 11616  1BB0  2B8D               	goto	l9184
 11617  1BB1  3A07               	xorlw	7	; case 4
 11618  1BB2  1903               	skipnz
 11619  1BB3  2B91               	goto	l9186
 11620  1BB4  3A01               	xorlw	1	; case 5
 11621  1BB5  1903               	skipnz
 11622  1BB6  2B95               	goto	l9188
 11623  1BB7  3A03               	xorlw	3	; case 6
 11624  1BB8  1903               	skipnz
 11625  1BB9  2B9B               	goto	l9190
 11626  1BBA  2BBB               	goto	l9196
 11627  1BBB                     l9196:	
 11628                           
 11629                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11630  1BBB  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11631  1BBC  0021               	movlb	1	; select bank1
 11632  1BBD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11633  1BBE  0022               	movlb	2	; select bank2
 11634  1BBF  0835               	movf	set_subdivision@tmpX^(0+256),w
 11635  1BC0  0021               	movlb	1	; select bank1
 11636  1BC1  00A8               	movwf	___awtoft@c^(0+128)
 11637  1BC2  31AF  2705  319B   	fcall	___awtoft
 11638  1BC5  0021               	movlb	1	; select bank1
 11639  1BC6  0828               	movf	?___awtoft^(0+128),w
 11640  1BC7  00B1               	movwf	___ftmul@f2^(0+128)
 11641  1BC8  0829               	movf	(?___awtoft+1)^(0+128),w
 11642  1BC9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11643  1BCA  082A               	movf	(?___awtoft+2)^(0+128),w
 11644  1BCB  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11645  1BCC  0022               	movlb	2	; select bank2
 11646  1BCD  0832               	movf	set_subdivision@scalar^(0+256),w
 11647  1BCE  0021               	movlb	1	; select bank1
 11648  1BCF  00AE               	movwf	___ftmul@f1^(0+128)
 11649  1BD0  0022               	movlb	2	; select bank2
 11650  1BD1  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11651  1BD2  0021               	movlb	1	; select bank1
 11652  1BD3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11653  1BD4  0022               	movlb	2	; select bank2
 11654  1BD5  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11655  1BD6  0021               	movlb	1	; select bank1
 11656  1BD7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11657  1BD8  3187  273B  319B   	fcall	___ftmul
 11658  1BDB  0021               	movlb	1	; select bank1
 11659  1BDC  082E               	movf	?___ftmul^(0+128),w
 11660  1BDD  0022               	movlb	2	; select bank2
 11661  1BDE  00A0               	movwf	___fttol@f1^(0+256)
 11662  1BDF  0021               	movlb	1	; select bank1
 11663  1BE0  082F               	movf	(?___ftmul+1)^(0+128),w
 11664  1BE1  0022               	movlb	2	; select bank2
 11665  1BE2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11666  1BE3  0021               	movlb	1	; select bank1
 11667  1BE4  0830               	movf	(?___ftmul+2)^(0+128),w
 11668  1BE5  0022               	movlb	2	; select bank2
 11669  1BE6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11670  1BE7  319A  2263  319B   	fcall	___fttol
 11671  1BEA  0022               	movlb	2	; select bank2
 11672  1BEB  0821               	movf	(?___fttol^(0+256)+1),w
 11673  1BEC  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11674  1BED  0820               	movf	?___fttol^(0+256),w
 11675  1BEE  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11676                           
 11677                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11678  1BEF  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11679  1BF0  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11680  1BF1  1D03               	skipz
 11681  1BF2  2BF5               	goto	u10145
 11682  1BF3  0835               	movf	set_subdivision@tmpX^(0+256),w
 11683  1BF4  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11684  1BF5                     u10145:	
 11685  1BF5  1903               	skipnz
 11686  1BF6  2BFA               	goto	l9202
 11687                           
 11688                           ;user.c: 109: adjust_mod_delay = 1;
 11689  1BF7  0023               	movlb	3	; select bank3
 11690  1BF8  01BA               	clrf	_adjust_mod_delay^(0+384)
 11691  1BF9  0ABA               	incf	_adjust_mod_delay^(0+384),f
 11692  1BFA                     l9202:	
 11693                           
 11694                           ;user.c: 110: }
 11695                           ;user.c: 112: return tmpX;
 11696  1BFA  0022               	movlb	2	; select bank2
 11697  1BFB  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11698  1BFC  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11699  1BFD  0835               	movf	set_subdivision@tmpX^(0+256),w
 11700  1BFE  00AE               	movwf	?_set_subdivision^(0+256)
 11701  1BFF  0008               	return
 11702  1C00                     __end_of_set_subdivision:	
 11703                           
 11704                           	psect	text24
 11705  1DD1                     __ptext24:	
 11706 ;; *************** function _scaleiA10kPot *****************
 11707 ;; Defined at:
 11708 ;;		line 211 in file "user.c"
 11709 ;; Parameters:    Size  Location     Type
 11710 ;;  input           3   71[BANK2 ] int 
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;  pwm             3    0[BANK3 ] float 
 11713 ;; Return value:  Size  Location     Type
 11714 ;;                  2   71[BANK2 ] int 
 11715 ;; Registers used:
 11716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11717 ;; Tracked objects:
 11718 ;;		On entry : 0/0
 11719 ;;		On exit  : 0/0
 11720 ;;		Unchanged: 0/0
 11721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11722 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11723 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11725 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11726 ;;Total ram usage:       12 bytes
 11727 ;; Hardware stack levels used:    1
 11728 ;; Hardware stack levels required when called:    8
 11729 ;; This function calls:
 11730 ;;		___ftadd
 11731 ;;		___ftdiv
 11732 ;;		___ftmul
 11733 ;;		___ftneg
 11734 ;;		___fttol
 11735 ;;		_pow
 11736 ;; This function is called by:
 11737 ;;		_main
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           
 11742                           ;psect for function _scaleiA10kPot
 11743  1DD1                     _scaleiA10kPot:	
 11744                           
 11745                           ;user.c: 214: if (input == 0.0) {return 0;}
 11746                           
 11747                           ;incstack = 0
 11748                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11749  1DD1  0022               	movlb	2	; select bank2
 11750  1DD2  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11751  1DD3  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11752  1DD4  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11753  1DD5  1D03               	skipz
 11754  1DD6  2DDA               	goto	l9140
 11755  1DD7  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11756  1DD8  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11757  1DD9  0008               	return
 11758  1DDA                     l9140:	
 11759                           
 11760                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11761  1DDA  30C0               	movlw	192
 11762  1DDB  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11763  1DDC  307F               	movlw	127
 11764  1DDD  1903               	skipnz
 11765  1DDE  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11766  1DDF  3044               	movlw	68
 11767  1DE0  1903               	skipnz
 11768  1DE1  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11769  1DE2  1D03               	btfss	3,2
 11770  1DE3  2DE9               	goto	l9146
 11771  1DE4  30FF               	movlw	255
 11772  1DE5  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11773  1DE6  3000               	movlw	0
 11774  1DE7  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11775  1DE8  0008               	return
 11776  1DE9                     l9146:	
 11777                           
 11778                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11779  1DE9  3000               	movlw	0
 11780  1DEA  0021               	movlb	1	; select bank1
 11781  1DEB  00C1               	movwf	___ftadd@f1^(0+128)
 11782  1DEC  3080               	movlw	128
 11783  1DED  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11784  1DEE  303F               	movlw	63
 11785  1DEF  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11786  1DF0  0022               	movlb	2	; select bank2
 11787  1DF1  0867               	movf	scaleiA10kPot@input^(0+256),w
 11788  1DF2  0021               	movlb	1	; select bank1
 11789  1DF3  00D1               	movwf	___ftdiv@f1^(0+128)
 11790  1DF4  0022               	movlb	2	; select bank2
 11791  1DF5  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11792  1DF6  0021               	movlb	1	; select bank1
 11793  1DF7  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11794  1DF8  0022               	movlb	2	; select bank2
 11795  1DF9  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11796  1DFA  0021               	movlb	1	; select bank1
 11797  1DFB  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11798  1DFC  30C0               	movlw	192
 11799  1DFD  00CE               	movwf	___ftdiv@f2^(0+128)
 11800  1DFE  307F               	movlw	127
 11801  1DFF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11802  1E00  3044               	movlw	68
 11803  1E01  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11804  1E02  319D  2528  319D   	fcall	___ftdiv
 11805  1E05  0021               	movlb	1	; select bank1
 11806  1E06  084E               	movf	?___ftdiv^(0+128),w
 11807  1E07  00BE               	movwf	___ftneg@f1^(0+128)
 11808  1E08  084F               	movf	(?___ftdiv+1)^(0+128),w
 11809  1E09  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11810  1E0A  0850               	movf	(?___ftdiv+2)^(0+128),w
 11811  1E0B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11812  1E0C  31AD  25B2  319D   	fcall	___ftneg
 11813  1E0F  0021               	movlb	1	; select bank1
 11814  1E10  083E               	movf	?___ftneg^(0+128),w
 11815  1E11  00C4               	movwf	___ftadd@f2^(0+128)
 11816  1E12  083F               	movf	(?___ftneg+1)^(0+128),w
 11817  1E13  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11818  1E14  0840               	movf	(?___ftneg+2)^(0+128),w
 11819  1E15  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11820  1E16  3190  200F  319D   	fcall	___ftadd
 11821  1E19  0021               	movlb	1	; select bank1
 11822  1E1A  0841               	movf	?___ftadd^(0+128),w
 11823  1E1B  0023               	movlb	3	; select bank3
 11824  1E1C  00EA               	movwf	_scaleiA10kPot$2851^(0+384)
 11825  1E1D  0021               	movlb	1	; select bank1
 11826  1E1E  0842               	movf	(?___ftadd+1)^(0+128),w
 11827  1E1F  0023               	movlb	3	; select bank3
 11828  1E20  00EB               	movwf	(_scaleiA10kPot$2851+1)^(0+384)
 11829  1E21  0021               	movlb	1	; select bank1
 11830  1E22  0843               	movf	(?___ftadd+2)^(0+128),w
 11831  1E23  0023               	movlb	3	; select bank3
 11832  1E24  00EC               	movwf	(_scaleiA10kPot$2851+2)^(0+384)
 11833                           
 11834                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11835  1E25  306A               	movlw	106
 11836  1E26  0022               	movlb	2	; select bank2
 11837  1E27  00D8               	movwf	pow@y^(0+256)
 11838  1E28  309C               	movlw	156
 11839  1E29  00D9               	movwf	(pow@y+1)^(0+256)
 11840  1E2A  30BF               	movlw	191
 11841  1E2B  00DA               	movwf	(pow@y+2)^(0+256)
 11842  1E2C  0023               	movlb	3	; select bank3
 11843  1E2D  086A               	movf	_scaleiA10kPot$2851^(0+384),w
 11844  1E2E  0022               	movlb	2	; select bank2
 11845  1E2F  00D5               	movwf	pow@x^(0+256)
 11846  1E30  0023               	movlb	3	; select bank3
 11847  1E31  086B               	movf	(_scaleiA10kPot$2851+1)^(0+384),w
 11848  1E32  0022               	movlb	2	; select bank2
 11849  1E33  00D6               	movwf	(pow@x+1)^(0+256)
 11850  1E34  0023               	movlb	3	; select bank3
 11851  1E35  086C               	movf	(_scaleiA10kPot$2851+2)^(0+384),w
 11852  1E36  0022               	movlb	2	; select bank2
 11853  1E37  00D7               	movwf	(pow@x+2)^(0+256)
 11854  1E38  3191  2105  319D   	fcall	_pow
 11855  1E3B  0022               	movlb	2	; select bank2
 11856  1E3C  0855               	movf	?_pow^(0+256),w
 11857  1E3D  0023               	movlb	3	; select bank3
 11858  1E3E  00ED               	movwf	_scaleiA10kPot$2852^(0+384)
 11859  1E3F  0022               	movlb	2	; select bank2
 11860  1E40  0856               	movf	(?_pow+1)^(0+256),w
 11861  1E41  0023               	movlb	3	; select bank3
 11862  1E42  00EE               	movwf	(_scaleiA10kPot$2852+1)^(0+384)
 11863  1E43  0022               	movlb	2	; select bank2
 11864  1E44  0857               	movf	(?_pow+2)^(0+256),w
 11865  1E45  0023               	movlb	3	; select bank3
 11866  1E46  00EF               	movwf	(_scaleiA10kPot$2852+2)^(0+384)
 11867                           
 11868                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11869  1E47  30E3               	movlw	227
 11870  1E48  0021               	movlb	1	; select bank1
 11871  1E49  00AE               	movwf	___ftmul@f1^(0+128)
 11872  1E4A  300B               	movlw	11
 11873  1E4B  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11874  1E4C  3041               	movlw	65
 11875  1E4D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11876  1E4E  0023               	movlb	3	; select bank3
 11877  1E4F  086D               	movf	_scaleiA10kPot$2852^(0+384),w
 11878  1E50  0021               	movlb	1	; select bank1
 11879  1E51  00B1               	movwf	___ftmul@f2^(0+128)
 11880  1E52  0023               	movlb	3	; select bank3
 11881  1E53  086E               	movf	(_scaleiA10kPot$2852+1)^(0+384),w
 11882  1E54  0021               	movlb	1	; select bank1
 11883  1E55  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11884  1E56  0023               	movlb	3	; select bank3
 11885  1E57  086F               	movf	(_scaleiA10kPot$2852+2)^(0+384),w
 11886  1E58  0021               	movlb	1	; select bank1
 11887  1E59  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11888  1E5A  3187  273B  319D   	fcall	___ftmul
 11889  1E5D  0021               	movlb	1	; select bank1
 11890  1E5E  082E               	movf	?___ftmul^(0+128),w
 11891  1E5F  0023               	movlb	3	; select bank3
 11892  1E60  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 11893  1E61  0021               	movlb	1	; select bank1
 11894  1E62  082F               	movf	(?___ftmul+1)^(0+128),w
 11895  1E63  0023               	movlb	3	; select bank3
 11896  1E64  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 11897  1E65  0021               	movlb	1	; select bank1
 11898  1E66  0830               	movf	(?___ftmul+2)^(0+128),w
 11899  1E67  0023               	movlb	3	; select bank3
 11900  1E68  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 11901                           
 11902                           ;user.c: 219: return (int)(pwm);
 11903  1E69  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 11904  1E6A  0022               	movlb	2	; select bank2
 11905  1E6B  00A0               	movwf	___fttol@f1^(0+256)
 11906  1E6C  0023               	movlb	3	; select bank3
 11907  1E6D  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 11908  1E6E  0022               	movlb	2	; select bank2
 11909  1E6F  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11910  1E70  0023               	movlb	3	; select bank3
 11911  1E71  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 11912  1E72  0022               	movlb	2	; select bank2
 11913  1E73  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11914  1E74  319A  2263         	fcall	___fttol
 11915  1E76  0022               	movlb	2	; select bank2
 11916  1E77  0821               	movf	(?___fttol^(0+256)+1),w
 11917  1E78  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 11918  1E79  0820               	movf	?___fttol^(0+256),w
 11919  1E7A  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11920  1E7B  0008               	return
 11921  1E7C                     __end_of_scaleiA10kPot:	
 11922                           
 11923                           	psect	text25
 11924  1C00                     __ptext25:	
 11925 ;; *************** function _scaleA10kPot *****************
 11926 ;; Defined at:
 11927 ;;		line 202 in file "user.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;  input           3   71[BANK2 ] int 
 11930 ;; Auto vars:     Size  Location     Type
 11931 ;;  pwm             3    0[BANK3 ] float 
 11932 ;; Return value:  Size  Location     Type
 11933 ;;                  2   71[BANK2 ] int 
 11934 ;; Registers used:
 11935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11936 ;; Tracked objects:
 11937 ;;		On entry : 0/0
 11938 ;;		On exit  : 0/0
 11939 ;;		Unchanged: 0/0
 11940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11941 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11942 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11944 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11945 ;;Total ram usage:       12 bytes
 11946 ;; Hardware stack levels used:    1
 11947 ;; Hardware stack levels required when called:    8
 11948 ;; This function calls:
 11949 ;;		___ftdiv
 11950 ;;		___ftmul
 11951 ;;		___fttol
 11952 ;;		_pow
 11953 ;; This function is called by:
 11954 ;;		_main
 11955 ;; This function uses a non-reentrant model
 11956 ;;
 11957                           
 11958                           
 11959                           ;psect for function _scaleA10kPot
 11960  1C00                     _scaleA10kPot:	
 11961                           
 11962                           ;user.c: 204: if (input == 0.0) {return 255;}
 11963                           
 11964                           ;incstack = 0
 11965                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11966  1C00  0022               	movlb	2	; select bank2
 11967  1C01  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11968  1C02  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 11969  1C03  0467               	iorwf	scaleA10kPot@input^(0+256),w
 11970  1C04  1D03               	skipz
 11971  1C05  2C0B               	goto	l9118
 11972  1C06  30FF               	movlw	255
 11973  1C07  00E7               	movwf	?_scaleA10kPot^(0+256)
 11974  1C08  3000               	movlw	0
 11975  1C09  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 11976  1C0A  0008               	return
 11977  1C0B                     l9118:	
 11978                           
 11979                           ;user.c: 205: if (input == 1023.0) {return 0;}
 11980  1C0B  30C0               	movlw	192
 11981  1C0C  0667               	xorwf	scaleA10kPot@input^(0+256),w
 11982  1C0D  307F               	movlw	127
 11983  1C0E  1903               	skipnz
 11984  1C0F  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 11985  1C10  3044               	movlw	68
 11986  1C11  1903               	skipnz
 11987  1C12  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 11988  1C13  1D03               	btfss	3,2
 11989  1C14  2C18               	goto	l9124
 11990  1C15  01E7               	clrf	?_scaleA10kPot^(0+256)
 11991  1C16  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 11992  1C17  0008               	return
 11993  1C18                     l9124:	
 11994                           
 11995                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11996  1C18  30C0               	movlw	192
 11997  1C19  0021               	movlb	1	; select bank1
 11998  1C1A  00CE               	movwf	___ftdiv@f2^(0+128)
 11999  1C1B  307F               	movlw	127
 12000  1C1C  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12001  1C1D  3044               	movlw	68
 12002  1C1E  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12003  1C1F  0022               	movlb	2	; select bank2
 12004  1C20  0867               	movf	scaleA10kPot@input^(0+256),w
 12005  1C21  0021               	movlb	1	; select bank1
 12006  1C22  00D1               	movwf	___ftdiv@f1^(0+128)
 12007  1C23  0022               	movlb	2	; select bank2
 12008  1C24  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12009  1C25  0021               	movlb	1	; select bank1
 12010  1C26  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12011  1C27  0022               	movlb	2	; select bank2
 12012  1C28  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12013  1C29  0021               	movlb	1	; select bank1
 12014  1C2A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12015  1C2B  319D  2528  319C   	fcall	___ftdiv
 12016  1C2E  0021               	movlb	1	; select bank1
 12017  1C2F  084E               	movf	?___ftdiv^(0+128),w
 12018  1C30  0023               	movlb	3	; select bank3
 12019  1C31  00EA               	movwf	_scaleA10kPot$2849^(0+384)
 12020  1C32  0021               	movlb	1	; select bank1
 12021  1C33  084F               	movf	(?___ftdiv+1)^(0+128),w
 12022  1C34  0023               	movlb	3	; select bank3
 12023  1C35  00EB               	movwf	(_scaleA10kPot$2849+1)^(0+384)
 12024  1C36  0021               	movlb	1	; select bank1
 12025  1C37  0850               	movf	(?___ftdiv+2)^(0+128),w
 12026  1C38  0023               	movlb	3	; select bank3
 12027  1C39  00EC               	movwf	(_scaleA10kPot$2849+2)^(0+384)
 12028                           
 12029                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12030  1C3A  306A               	movlw	106
 12031  1C3B  0022               	movlb	2	; select bank2
 12032  1C3C  00D8               	movwf	pow@y^(0+256)
 12033  1C3D  309C               	movlw	156
 12034  1C3E  00D9               	movwf	(pow@y+1)^(0+256)
 12035  1C3F  30BF               	movlw	191
 12036  1C40  00DA               	movwf	(pow@y+2)^(0+256)
 12037  1C41  0023               	movlb	3	; select bank3
 12038  1C42  086A               	movf	_scaleA10kPot$2849^(0+384),w
 12039  1C43  0022               	movlb	2	; select bank2
 12040  1C44  00D5               	movwf	pow@x^(0+256)
 12041  1C45  0023               	movlb	3	; select bank3
 12042  1C46  086B               	movf	(_scaleA10kPot$2849+1)^(0+384),w
 12043  1C47  0022               	movlb	2	; select bank2
 12044  1C48  00D6               	movwf	(pow@x+1)^(0+256)
 12045  1C49  0023               	movlb	3	; select bank3
 12046  1C4A  086C               	movf	(_scaleA10kPot$2849+2)^(0+384),w
 12047  1C4B  0022               	movlb	2	; select bank2
 12048  1C4C  00D7               	movwf	(pow@x+2)^(0+256)
 12049  1C4D  3191  2105  319C   	fcall	_pow
 12050  1C50  0022               	movlb	2	; select bank2
 12051  1C51  0855               	movf	?_pow^(0+256),w
 12052  1C52  0023               	movlb	3	; select bank3
 12053  1C53  00ED               	movwf	_scaleA10kPot$2850^(0+384)
 12054  1C54  0022               	movlb	2	; select bank2
 12055  1C55  0856               	movf	(?_pow+1)^(0+256),w
 12056  1C56  0023               	movlb	3	; select bank3
 12057  1C57  00EE               	movwf	(_scaleA10kPot$2850+1)^(0+384)
 12058  1C58  0022               	movlb	2	; select bank2
 12059  1C59  0857               	movf	(?_pow+2)^(0+256),w
 12060  1C5A  0023               	movlb	3	; select bank3
 12061  1C5B  00EF               	movwf	(_scaleA10kPot$2850+2)^(0+384)
 12062                           
 12063                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12064  1C5C  30E3               	movlw	227
 12065  1C5D  0021               	movlb	1	; select bank1
 12066  1C5E  00AE               	movwf	___ftmul@f1^(0+128)
 12067  1C5F  300B               	movlw	11
 12068  1C60  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12069  1C61  3041               	movlw	65
 12070  1C62  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12071  1C63  0023               	movlb	3	; select bank3
 12072  1C64  086D               	movf	_scaleA10kPot$2850^(0+384),w
 12073  1C65  0021               	movlb	1	; select bank1
 12074  1C66  00B1               	movwf	___ftmul@f2^(0+128)
 12075  1C67  0023               	movlb	3	; select bank3
 12076  1C68  086E               	movf	(_scaleA10kPot$2850+1)^(0+384),w
 12077  1C69  0021               	movlb	1	; select bank1
 12078  1C6A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12079  1C6B  0023               	movlb	3	; select bank3
 12080  1C6C  086F               	movf	(_scaleA10kPot$2850+2)^(0+384),w
 12081  1C6D  0021               	movlb	1	; select bank1
 12082  1C6E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12083  1C6F  3187  273B  319C   	fcall	___ftmul
 12084  1C72  0021               	movlb	1	; select bank1
 12085  1C73  082E               	movf	?___ftmul^(0+128),w
 12086  1C74  0023               	movlb	3	; select bank3
 12087  1C75  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 12088  1C76  0021               	movlb	1	; select bank1
 12089  1C77  082F               	movf	(?___ftmul+1)^(0+128),w
 12090  1C78  0023               	movlb	3	; select bank3
 12091  1C79  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12092  1C7A  0021               	movlb	1	; select bank1
 12093  1C7B  0830               	movf	(?___ftmul+2)^(0+128),w
 12094  1C7C  0023               	movlb	3	; select bank3
 12095  1C7D  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12096                           
 12097                           ;user.c: 207: return (int)(pwm);
 12098  1C7E  0867               	movf	scaleA10kPot@pwm^(0+384),w
 12099  1C7F  0022               	movlb	2	; select bank2
 12100  1C80  00A0               	movwf	___fttol@f1^(0+256)
 12101  1C81  0023               	movlb	3	; select bank3
 12102  1C82  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12103  1C83  0022               	movlb	2	; select bank2
 12104  1C84  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12105  1C85  0023               	movlb	3	; select bank3
 12106  1C86  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12107  1C87  0022               	movlb	2	; select bank2
 12108  1C88  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12109  1C89  319A  2263         	fcall	___fttol
 12110  1C8B  0022               	movlb	2	; select bank2
 12111  1C8C  0821               	movf	(?___fttol^(0+256)+1),w
 12112  1C8D  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12113  1C8E  0820               	movf	?___fttol^(0+256),w
 12114  1C8F  00E7               	movwf	?_scaleA10kPot^(0+256)
 12115  1C90  0008               	return
 12116  1C91                     __end_of_scaleA10kPot:	
 12117                           
 12118                           	psect	text26
 12119  19DE                     __ptext26:	
 12120 ;; *************** function _scaleA100kPot *****************
 12121 ;; Defined at:
 12122 ;;		line 188 in file "user.c"
 12123 ;; Parameters:    Size  Location     Type
 12124 ;;  input           3   71[BANK2 ] int 
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;  pwm             3    0[BANK3 ] float 
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  2   71[BANK2 ] int 
 12129 ;; Registers used:
 12130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12136 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12137 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12139 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12140 ;;Total ram usage:       12 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; Hardware stack levels required when called:    8
 12143 ;; This function calls:
 12144 ;;		___ftdiv
 12145 ;;		___ftmul
 12146 ;;		___fttol
 12147 ;;		_pow
 12148 ;; This function is called by:
 12149 ;;		_main
 12150 ;; This function uses a non-reentrant model
 12151 ;;
 12152                           
 12153                           
 12154                           ;psect for function _scaleA100kPot
 12155  19DE                     _scaleA100kPot:	
 12156                           
 12157                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12158                           
 12159                           ;incstack = 0
 12160                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12161  19DE  0022               	movlb	2	; select bank2
 12162  19DF  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12163  19E0  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12164  19E1  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12165  19E2  1D03               	skipz
 12166  19E3  29EA               	goto	l9160
 12167  19E4  3000               	movlw	0
 12168  19E5  00E7               	movwf	scaleA100kPot@input^(0+256)
 12169  19E6  3080               	movlw	128
 12170  19E7  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12171  19E8  303F               	movlw	63
 12172  19E9  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12173  19EA                     l9160:	
 12174                           
 12175                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12176  19EA  30C0               	movlw	192
 12177  19EB  0021               	movlb	1	; select bank1
 12178  19EC  00CE               	movwf	___ftdiv@f2^(0+128)
 12179  19ED  307F               	movlw	127
 12180  19EE  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12181  19EF  3044               	movlw	68
 12182  19F0  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12183  19F1  0022               	movlb	2	; select bank2
 12184  19F2  0867               	movf	scaleA100kPot@input^(0+256),w
 12185  19F3  0021               	movlb	1	; select bank1
 12186  19F4  00D1               	movwf	___ftdiv@f1^(0+128)
 12187  19F5  0022               	movlb	2	; select bank2
 12188  19F6  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12189  19F7  0021               	movlb	1	; select bank1
 12190  19F8  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12191  19F9  0022               	movlb	2	; select bank2
 12192  19FA  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12193  19FB  0021               	movlb	1	; select bank1
 12194  19FC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12195  19FD  319D  2528  3199   	fcall	___ftdiv
 12196  1A00  0021               	movlb	1	; select bank1
 12197  1A01  084E               	movf	?___ftdiv^(0+128),w
 12198  1A02  0023               	movlb	3	; select bank3
 12199  1A03  00EA               	movwf	_scaleA100kPot$2845^(0+384)
 12200  1A04  0021               	movlb	1	; select bank1
 12201  1A05  084F               	movf	(?___ftdiv+1)^(0+128),w
 12202  1A06  0023               	movlb	3	; select bank3
 12203  1A07  00EB               	movwf	(_scaleA100kPot$2845+1)^(0+384)
 12204  1A08  0021               	movlb	1	; select bank1
 12205  1A09  0850               	movf	(?___ftdiv+2)^(0+128),w
 12206  1A0A  0023               	movlb	3	; select bank3
 12207  1A0B  00EC               	movwf	(_scaleA100kPot$2845+2)^(0+384)
 12208                           
 12209                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12210  1A0C  3056               	movlw	86
 12211  1A0D  0022               	movlb	2	; select bank2
 12212  1A0E  00D8               	movwf	pow@y^(0+256)
 12213  1A0F  308E               	movlw	142
 12214  1A10  00D9               	movwf	(pow@y+1)^(0+256)
 12215  1A11  30BF               	movlw	191
 12216  1A12  00DA               	movwf	(pow@y+2)^(0+256)
 12217  1A13  0023               	movlb	3	; select bank3
 12218  1A14  086A               	movf	_scaleA100kPot$2845^(0+384),w
 12219  1A15  0022               	movlb	2	; select bank2
 12220  1A16  00D5               	movwf	pow@x^(0+256)
 12221  1A17  0023               	movlb	3	; select bank3
 12222  1A18  086B               	movf	(_scaleA100kPot$2845+1)^(0+384),w
 12223  1A19  0022               	movlb	2	; select bank2
 12224  1A1A  00D6               	movwf	(pow@x+1)^(0+256)
 12225  1A1B  0023               	movlb	3	; select bank3
 12226  1A1C  086C               	movf	(_scaleA100kPot$2845+2)^(0+384),w
 12227  1A1D  0022               	movlb	2	; select bank2
 12228  1A1E  00D7               	movwf	(pow@x+2)^(0+256)
 12229  1A1F  3191  2105  3199   	fcall	_pow
 12230  1A22  0022               	movlb	2	; select bank2
 12231  1A23  0855               	movf	?_pow^(0+256),w
 12232  1A24  0023               	movlb	3	; select bank3
 12233  1A25  00ED               	movwf	_scaleA100kPot$2846^(0+384)
 12234  1A26  0022               	movlb	2	; select bank2
 12235  1A27  0856               	movf	(?_pow+1)^(0+256),w
 12236  1A28  0023               	movlb	3	; select bank3
 12237  1A29  00EE               	movwf	(_scaleA100kPot$2846+1)^(0+384)
 12238  1A2A  0022               	movlb	2	; select bank2
 12239  1A2B  0857               	movf	(?_pow+2)^(0+256),w
 12240  1A2C  0023               	movlb	3	; select bank3
 12241  1A2D  00EF               	movwf	(_scaleA100kPot$2846+2)^(0+384)
 12242                           
 12243                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12244  1A2E  309F               	movlw	159
 12245  1A2F  0021               	movlb	1	; select bank1
 12246  1A30  00AE               	movwf	___ftmul@f1^(0+128)
 12247  1A31  3068               	movlw	104
 12248  1A32  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12249  1A33  3040               	movlw	64
 12250  1A34  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12251  1A35  0023               	movlb	3	; select bank3
 12252  1A36  086D               	movf	_scaleA100kPot$2846^(0+384),w
 12253  1A37  0021               	movlb	1	; select bank1
 12254  1A38  00B1               	movwf	___ftmul@f2^(0+128)
 12255  1A39  0023               	movlb	3	; select bank3
 12256  1A3A  086E               	movf	(_scaleA100kPot$2846+1)^(0+384),w
 12257  1A3B  0021               	movlb	1	; select bank1
 12258  1A3C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12259  1A3D  0023               	movlb	3	; select bank3
 12260  1A3E  086F               	movf	(_scaleA100kPot$2846+2)^(0+384),w
 12261  1A3F  0021               	movlb	1	; select bank1
 12262  1A40  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12263  1A41  3187  273B  3199   	fcall	___ftmul
 12264  1A44  0021               	movlb	1	; select bank1
 12265  1A45  082E               	movf	?___ftmul^(0+128),w
 12266  1A46  0023               	movlb	3	; select bank3
 12267  1A47  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 12268  1A48  0021               	movlb	1	; select bank1
 12269  1A49  082F               	movf	(?___ftmul+1)^(0+128),w
 12270  1A4A  0023               	movlb	3	; select bank3
 12271  1A4B  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12272  1A4C  0021               	movlb	1	; select bank1
 12273  1A4D  0830               	movf	(?___ftmul+2)^(0+128),w
 12274  1A4E  0023               	movlb	3	; select bank3
 12275  1A4F  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12276                           
 12277                           ;user.c: 192: return (int)(pwm);
 12278  1A50  0867               	movf	scaleA100kPot@pwm^(0+384),w
 12279  1A51  0022               	movlb	2	; select bank2
 12280  1A52  00A0               	movwf	___fttol@f1^(0+256)
 12281  1A53  0023               	movlb	3	; select bank3
 12282  1A54  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12283  1A55  0022               	movlb	2	; select bank2
 12284  1A56  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12285  1A57  0023               	movlb	3	; select bank3
 12286  1A58  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12287  1A59  0022               	movlb	2	; select bank2
 12288  1A5A  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12289  1A5B  319A  2263         	fcall	___fttol
 12290  1A5D  0022               	movlb	2	; select bank2
 12291  1A5E  0821               	movf	(?___fttol^(0+256)+1),w
 12292  1A5F  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12293  1A60  0820               	movf	?___fttol^(0+256),w
 12294  1A61  00E7               	movwf	?_scaleA100kPot^(0+256)
 12295  1A62  0008               	return
 12296  1A63                     __end_of_scaleA100kPot:	
 12297                           
 12298                           	psect	text27
 12299  1105                     __ptext27:	
 12300 ;; *************** function _pow *****************
 12301 ;; Defined at:
 12302 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12303 ;; Parameters:    Size  Location     Type
 12304 ;;  x               3   53[BANK2 ] int 
 12305 ;;  y               3   56[BANK2 ] int 
 12306 ;; Auto vars:     Size  Location     Type
 12307 ;;  yi              4   67[BANK2 ] unsigned long 
 12308 ;;  sign            1   66[BANK2 ] unsigned char 
 12309 ;; Return value:  Size  Location     Type
 12310 ;;                  3   53[BANK2 ] unsigned char 
 12311 ;; Registers used:
 12312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12313 ;; Tracked objects:
 12314 ;;		On entry : 0/0
 12315 ;;		On exit  : 0/0
 12316 ;;		Unchanged: 0/0
 12317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12318 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12319 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12320 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12321 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12322 ;;Total ram usage:       18 bytes
 12323 ;; Hardware stack levels used:    1
 12324 ;; Hardware stack levels required when called:    7
 12325 ;; This function calls:
 12326 ;;		___ftge
 12327 ;;		___ftmul
 12328 ;;		___ftneg
 12329 ;;		___fttol
 12330 ;;		___lltoft
 12331 ;;		_exp
 12332 ;;		_log
 12333 ;; This function is called by:
 12334 ;;		_scaleA100kPot
 12335 ;;		_scaleA10kPot
 12336 ;;		_scaleiA10kPot
 12337 ;;		_scaleiA100kPot
 12338 ;; This function uses a non-reentrant model
 12339 ;;
 12340                           
 12341                           
 12342                           ;psect for function _pow
 12343  1105                     _pow:	
 12344                           
 12345                           ;incstack = 0
 12346                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12347  1105  0022               	movlb	2	; select bank2
 12348  1106  01E2               	clrf	pow@sign^(0+256)
 12349  1107  0857               	movf	(pow@x+2)^(0+256),w
 12350  1108  0456               	iorwf	(pow@x+1)^(0+256),w
 12351  1109  0455               	iorwf	pow@x^(0+256),w
 12352  110A  1D03               	skipz
 12353  110B  2931               	goto	l8406
 12354  110C  3000               	movlw	0
 12355  110D  0021               	movlb	1	; select bank1
 12356  110E  00A0               	movwf	___ftge@ff1^(0+128)
 12357  110F  3000               	movlw	0
 12358  1110  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12359  1111  3000               	movlw	0
 12360  1112  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12361  1113  0022               	movlb	2	; select bank2
 12362  1114  0858               	movf	pow@y^(0+256),w
 12363  1115  0021               	movlb	1	; select bank1
 12364  1116  00A3               	movwf	___ftge@ff2^(0+128)
 12365  1117  0022               	movlb	2	; select bank2
 12366  1118  0859               	movf	(pow@y+1)^(0+256),w
 12367  1119  0021               	movlb	1	; select bank1
 12368  111A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12369  111B  0022               	movlb	2	; select bank2
 12370  111C  085A               	movf	(pow@y+2)^(0+256),w
 12371  111D  0021               	movlb	1	; select bank1
 12372  111E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12373  111F  31A1  21C8  3191   	fcall	___ftge
 12374  1122  1C03               	btfss	3,0
 12375  1123  2929               	goto	l2328
 12376  1124  3021               	movlw	33
 12377  1125  0024               	movlb	4	; select bank4
 12378  1126  00CD               	movwf	_errno^(0+512)
 12379  1127  3000               	movlw	0
 12380  1128  00CE               	movwf	(_errno^(0+512)+1)
 12381  1129                     l2328:	
 12382  1129  3000               	movlw	0
 12383  112A  0022               	movlb	2	; select bank2
 12384  112B  00D5               	movwf	?_pow^(0+256)
 12385  112C  3000               	movlw	0
 12386  112D  00D6               	movwf	(?_pow+1)^(0+256)
 12387  112E  3000               	movlw	0
 12388  112F  00D7               	movwf	(?_pow+2)^(0+256)
 12389  1130  0008               	return
 12390  1131                     l8406:	
 12391  1131  085A               	movf	(pow@y+2)^(0+256),w
 12392  1132  0459               	iorwf	(pow@y+1)^(0+256),w
 12393  1133  0458               	iorwf	pow@y^(0+256),w
 12394  1134  1D03               	skipz
 12395  1135  293D               	goto	l8412
 12396  1136  3000               	movlw	0
 12397  1137  00D5               	movwf	?_pow^(0+256)
 12398  1138  3080               	movlw	128
 12399  1139  00D6               	movwf	(?_pow+1)^(0+256)
 12400  113A  303F               	movlw	63
 12401  113B  00D7               	movwf	(?_pow+2)^(0+256)
 12402  113C  0008               	return
 12403  113D                     l8412:	
 12404  113D  0855               	movf	pow@x^(0+256),w
 12405  113E  0021               	movlb	1	; select bank1
 12406  113F  00A0               	movwf	___ftge@ff1^(0+128)
 12407  1140  0022               	movlb	2	; select bank2
 12408  1141  0856               	movf	(pow@x+1)^(0+256),w
 12409  1142  0021               	movlb	1	; select bank1
 12410  1143  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12411  1144  0022               	movlb	2	; select bank2
 12412  1145  0857               	movf	(pow@x+2)^(0+256),w
 12413  1146  0021               	movlb	1	; select bank1
 12414  1147  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12415  1148  3000               	movlw	0
 12416  1149  00A3               	movwf	___ftge@ff2^(0+128)
 12417  114A  3000               	movlw	0
 12418  114B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12419  114C  3000               	movlw	0
 12420  114D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12421  114E  31A1  21C8  3191   	fcall	___ftge
 12422  1151  1803               	btfsc	3,0
 12423  1152  29B7               	goto	l8424
 12424  1153  0022               	movlb	2	; select bank2
 12425  1154  0858               	movf	pow@y^(0+256),w
 12426  1155  00A0               	movwf	___fttol@f1^(0+256)
 12427  1156  0859               	movf	(pow@y+1)^(0+256),w
 12428  1157  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12429  1158  085A               	movf	(pow@y+2)^(0+256),w
 12430  1159  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12431  115A  319A  2263  3191   	fcall	___fttol
 12432  115D  0022               	movlb	2	; select bank2
 12433  115E  0823               	movf	(?___fttol+3)^(0+256),w
 12434  115F  00E6               	movwf	(pow@yi+3)^(0+256)
 12435  1160  0822               	movf	(?___fttol+2)^(0+256),w
 12436  1161  00E5               	movwf	(pow@yi+2)^(0+256)
 12437  1162  0821               	movf	(?___fttol+1)^(0+256),w
 12438  1163  00E4               	movwf	(pow@yi+1)^(0+256)
 12439  1164  0820               	movf	?___fttol^(0+256),w
 12440  1165  00E3               	movwf	pow@yi^(0+256)
 12441  1166  0866               	movf	(pow@yi+3)^(0+256),w
 12442  1167  0021               	movlb	1	; select bank1
 12443  1168  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12444  1169  0022               	movlb	2	; select bank2
 12445  116A  0865               	movf	(pow@yi+2)^(0+256),w
 12446  116B  0021               	movlb	1	; select bank1
 12447  116C  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12448  116D  0022               	movlb	2	; select bank2
 12449  116E  0864               	movf	(pow@yi+1)^(0+256),w
 12450  116F  0021               	movlb	1	; select bank1
 12451  1170  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12452  1171  0022               	movlb	2	; select bank2
 12453  1172  0863               	movf	pow@yi^(0+256),w
 12454  1173  0021               	movlb	1	; select bank1
 12455  1174  00A8               	movwf	___lltoft@c^(0+128)
 12456  1175  31AF  274D  3191   	fcall	___lltoft
 12457  1178  0022               	movlb	2	; select bank2
 12458  1179  085A               	movf	(pow@y+2)^(0+256),w
 12459  117A  0021               	movlb	1	; select bank1
 12460  117B  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12461  117C  1D03               	skipz
 12462  117D  2988               	goto	u8865
 12463  117E  0022               	movlb	2	; select bank2
 12464  117F  0859               	movf	(pow@y+1)^(0+256),w
 12465  1180  0021               	movlb	1	; select bank1
 12466  1181  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12467  1182  1D03               	skipz
 12468  1183  2988               	goto	u8865
 12469  1184  0022               	movlb	2	; select bank2
 12470  1185  0858               	movf	pow@y^(0+256),w
 12471  1186  0021               	movlb	1	; select bank1
 12472  1187  0628               	xorwf	?___lltoft^(0+128),w
 12473  1188                     u8865:	
 12474  1188  1903               	skipnz
 12475  1189  2997               	goto	l8420
 12476  118A  3021               	movlw	33
 12477  118B  0024               	movlb	4	; select bank4
 12478  118C  00CD               	movwf	_errno^(0+512)
 12479  118D  3000               	movlw	0
 12480  118E  00CE               	movwf	(_errno^(0+512)+1)
 12481  118F  3000               	movlw	0
 12482  1190  0022               	movlb	2	; select bank2
 12483  1191  00D5               	movwf	?_pow^(0+256)
 12484  1192  3000               	movlw	0
 12485  1193  00D6               	movwf	(?_pow+1)^(0+256)
 12486  1194  3000               	movlw	0
 12487  1195  00D7               	movwf	(?_pow+2)^(0+256)
 12488  1196  0008               	return
 12489  1197                     l8420:	
 12490  1197  0022               	movlb	2	; select bank2
 12491  1198  0863               	movf	pow@yi^(0+256),w
 12492  1199  3901               	andlw	1
 12493  119A  00DB               	movwf	??_pow^(0+256)
 12494  119B  085B               	movf	??_pow^(0+256),w
 12495  119C  00E2               	movwf	pow@sign^(0+256)
 12496  119D  0855               	movf	pow@x^(0+256),w
 12497  119E  0021               	movlb	1	; select bank1
 12498  119F  00BE               	movwf	___ftneg@f1^(0+128)
 12499  11A0  0022               	movlb	2	; select bank2
 12500  11A1  0856               	movf	(pow@x+1)^(0+256),w
 12501  11A2  0021               	movlb	1	; select bank1
 12502  11A3  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12503  11A4  0022               	movlb	2	; select bank2
 12504  11A5  0857               	movf	(pow@x+2)^(0+256),w
 12505  11A6  0021               	movlb	1	; select bank1
 12506  11A7  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12507  11A8  31AD  25B2  3191   	fcall	___ftneg
 12508  11AB  0021               	movlb	1	; select bank1
 12509  11AC  083E               	movf	?___ftneg^(0+128),w
 12510  11AD  0022               	movlb	2	; select bank2
 12511  11AE  00D5               	movwf	pow@x^(0+256)
 12512  11AF  0021               	movlb	1	; select bank1
 12513  11B0  083F               	movf	(?___ftneg+1)^(0+128),w
 12514  11B1  0022               	movlb	2	; select bank2
 12515  11B2  00D6               	movwf	(pow@x+1)^(0+256)
 12516  11B3  0021               	movlb	1	; select bank1
 12517  11B4  0840               	movf	(?___ftneg+2)^(0+128),w
 12518  11B5  0022               	movlb	2	; select bank2
 12519  11B6  00D7               	movwf	(pow@x+2)^(0+256)
 12520  11B7                     l8424:	
 12521  11B7  0022               	movlb	2	; select bank2
 12522  11B8  0855               	movf	pow@x^(0+256),w
 12523  11B9  00BE               	movwf	log@x^(0+256)
 12524  11BA  0856               	movf	(pow@x+1)^(0+256),w
 12525  11BB  00BF               	movwf	(log@x+1)^(0+256)
 12526  11BC  0857               	movf	(pow@x+2)^(0+256),w
 12527  11BD  00C0               	movwf	(log@x+2)^(0+256)
 12528  11BE  319F  272F  3191   	fcall	_log
 12529  11C1  0022               	movlb	2	; select bank2
 12530  11C2  083E               	movf	?_log^(0+256),w
 12531  11C3  00DC               	movwf	_pow$2859^(0+256)
 12532  11C4  083F               	movf	(?_log+1)^(0+256),w
 12533  11C5  00DD               	movwf	(_pow$2859+1)^(0+256)
 12534  11C6  0840               	movf	(?_log+2)^(0+256),w
 12535  11C7  00DE               	movwf	(_pow$2859+2)^(0+256)
 12536  11C8  0858               	movf	pow@y^(0+256),w
 12537  11C9  0021               	movlb	1	; select bank1
 12538  11CA  00AE               	movwf	___ftmul@f1^(0+128)
 12539  11CB  0022               	movlb	2	; select bank2
 12540  11CC  0859               	movf	(pow@y+1)^(0+256),w
 12541  11CD  0021               	movlb	1	; select bank1
 12542  11CE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12543  11CF  0022               	movlb	2	; select bank2
 12544  11D0  085A               	movf	(pow@y+2)^(0+256),w
 12545  11D1  0021               	movlb	1	; select bank1
 12546  11D2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12547  11D3  0022               	movlb	2	; select bank2
 12548  11D4  085C               	movf	_pow$2859^(0+256),w
 12549  11D5  0021               	movlb	1	; select bank1
 12550  11D6  00B1               	movwf	___ftmul@f2^(0+128)
 12551  11D7  0022               	movlb	2	; select bank2
 12552  11D8  085D               	movf	(_pow$2859+1)^(0+256),w
 12553  11D9  0021               	movlb	1	; select bank1
 12554  11DA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12555  11DB  0022               	movlb	2	; select bank2
 12556  11DC  085E               	movf	(_pow$2859+2)^(0+256),w
 12557  11DD  0021               	movlb	1	; select bank1
 12558  11DE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12559  11DF  3187  273B  3191   	fcall	___ftmul
 12560  11E2  0021               	movlb	1	; select bank1
 12561  11E3  082E               	movf	?___ftmul^(0+128),w
 12562  11E4  0022               	movlb	2	; select bank2
 12563  11E5  00DF               	movwf	_pow$2860^(0+256)
 12564  11E6  0021               	movlb	1	; select bank1
 12565  11E7  082F               	movf	(?___ftmul+1)^(0+128),w
 12566  11E8  0022               	movlb	2	; select bank2
 12567  11E9  00E0               	movwf	(_pow$2860+1)^(0+256)
 12568  11EA  0021               	movlb	1	; select bank1
 12569  11EB  0830               	movf	(?___ftmul+2)^(0+128),w
 12570  11EC  0022               	movlb	2	; select bank2
 12571  11ED  00E1               	movwf	(_pow$2860+2)^(0+256)
 12572  11EE  085F               	movf	_pow$2860^(0+256),w
 12573  11EF  00C8               	movwf	exp@x^(0+256)
 12574  11F0  0860               	movf	(_pow$2860+1)^(0+256),w
 12575  11F1  00C9               	movwf	(exp@x+1)^(0+256)
 12576  11F2  0861               	movf	(_pow$2860+2)^(0+256),w
 12577  11F3  00CA               	movwf	(exp@x+2)^(0+256)
 12578  11F4  3193  2341  3191   	fcall	_exp
 12579  11F7  0022               	movlb	2	; select bank2
 12580  11F8  0848               	movf	?_exp^(0+256),w
 12581  11F9  00D5               	movwf	pow@x^(0+256)
 12582  11FA  0849               	movf	(?_exp+1)^(0+256),w
 12583  11FB  00D6               	movwf	(pow@x+1)^(0+256)
 12584  11FC  084A               	movf	(?_exp+2)^(0+256),w
 12585  11FD  00D7               	movwf	(pow@x+2)^(0+256)
 12586  11FE  0862               	movf	pow@sign^(0+256),w
 12587  11FF  1903               	btfsc	3,2
 12588  1200  0008               	return
 12589  1201  0855               	movf	pow@x^(0+256),w
 12590  1202  0021               	movlb	1	; select bank1
 12591  1203  00BE               	movwf	___ftneg@f1^(0+128)
 12592  1204  0022               	movlb	2	; select bank2
 12593  1205  0856               	movf	(pow@x+1)^(0+256),w
 12594  1206  0021               	movlb	1	; select bank1
 12595  1207  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12596  1208  0022               	movlb	2	; select bank2
 12597  1209  0857               	movf	(pow@x+2)^(0+256),w
 12598  120A  0021               	movlb	1	; select bank1
 12599  120B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12600  120C  31AD  25B2         	fcall	___ftneg
 12601  120E  0021               	movlb	1	; select bank1
 12602  120F  083E               	movf	?___ftneg^(0+128),w
 12603  1210  0022               	movlb	2	; select bank2
 12604  1211  00D5               	movwf	?_pow^(0+256)
 12605  1212  0021               	movlb	1	; select bank1
 12606  1213  083F               	movf	(?___ftneg+1)^(0+128),w
 12607  1214  0022               	movlb	2	; select bank2
 12608  1215  00D6               	movwf	(?_pow+1)^(0+256)
 12609  1216  0021               	movlb	1	; select bank1
 12610  1217  0840               	movf	(?___ftneg+2)^(0+128),w
 12611  1218  0022               	movlb	2	; select bank2
 12612  1219  00D7               	movwf	(?_pow+2)^(0+256)
 12613  121A  0008               	return
 12614  121B                     __end_of_pow:	
 12615                           
 12616                           	psect	text28
 12617  1F2F                     __ptext28:	
 12618 ;; *************** function _log *****************
 12619 ;; Defined at:
 12620 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12621 ;; Parameters:    Size  Location     Type
 12622 ;;  x               3   30[BANK2 ] unsigned char 
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;  exponent        2   34[BANK2 ] int 
 12625 ;; Return value:  Size  Location     Type
 12626 ;;                  3   30[BANK2 ] int 
 12627 ;; Registers used:
 12628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12629 ;; Tracked objects:
 12630 ;;		On entry : 0/0
 12631 ;;		On exit  : 0/0
 12632 ;;		Unchanged: 0/0
 12633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12634 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12635 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12636 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12637 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12638 ;;Total ram usage:        6 bytes
 12639 ;; Hardware stack levels used:    1
 12640 ;; Hardware stack levels required when called:    6
 12641 ;; This function calls:
 12642 ;;		___awtoft
 12643 ;;		___ftadd
 12644 ;;		___ftge
 12645 ;;		___ftmul
 12646 ;;		_eval_poly
 12647 ;;		_frexp
 12648 ;; This function is called by:
 12649 ;;		_pow
 12650 ;; This function uses a non-reentrant model
 12651 ;;
 12652                           
 12653                           
 12654                           ;psect for function _log
 12655  1F2F                     _log:	
 12656                           
 12657                           ;incstack = 0
 12658                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12659  1F2F  0022               	movlb	2	; select bank2
 12660  1F30  083E               	movf	log@x^(0+256),w
 12661  1F31  0021               	movlb	1	; select bank1
 12662  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12663  1F33  0022               	movlb	2	; select bank2
 12664  1F34  083F               	movf	(log@x+1)^(0+256),w
 12665  1F35  0021               	movlb	1	; select bank1
 12666  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12667  1F37  0022               	movlb	2	; select bank2
 12668  1F38  0840               	movf	(log@x+2)^(0+256),w
 12669  1F39  0021               	movlb	1	; select bank1
 12670  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12671  1F3B  3000               	movlw	0
 12672  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12673  1F3D  3000               	movlw	0
 12674  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12675  1F3F  3000               	movlw	0
 12676  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12677  1F41  31A1  21C8  319F   	fcall	___ftge
 12678  1F44  1803               	btfsc	3,0
 12679  1F45  2F53               	goto	l8278
 12680  1F46  3021               	movlw	33
 12681  1F47  0024               	movlb	4	; select bank4
 12682  1F48  00CD               	movwf	_errno^(0+512)
 12683  1F49  3000               	movlw	0
 12684  1F4A  00CE               	movwf	(_errno^(0+512)+1)
 12685  1F4B  3000               	movlw	0
 12686  1F4C  0022               	movlb	2	; select bank2
 12687  1F4D  00BE               	movwf	?_log^(0+256)
 12688  1F4E  3000               	movlw	0
 12689  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12690  1F50  3000               	movlw	0
 12691  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12692  1F52  0008               	return
 12693  1F53                     l8278:	
 12694  1F53  0022               	movlb	2	; select bank2
 12695  1F54  0840               	movf	(log@x+2)^(0+256),w
 12696  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12697  1F56  043E               	iorwf	log@x^(0+256),w
 12698  1F57  1D03               	skipz
 12699  1F58  2F66               	goto	l8284
 12700  1F59  3022               	movlw	34
 12701  1F5A  0024               	movlb	4	; select bank4
 12702  1F5B  00CD               	movwf	_errno^(0+512)
 12703  1F5C  3000               	movlw	0
 12704  1F5D  00CE               	movwf	(_errno^(0+512)+1)
 12705  1F5E  3000               	movlw	0
 12706  1F5F  0022               	movlb	2	; select bank2
 12707  1F60  00BE               	movwf	?_log^(0+256)
 12708  1F61  3000               	movlw	0
 12709  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12710  1F63  3000               	movlw	0
 12711  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12712  1F65  0008               	return
 12713  1F66                     l8284:	
 12714  1F66  3000               	movlw	0
 12715  1F67  0021               	movlb	1	; select bank1
 12716  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12717  1F69  3080               	movlw	128
 12718  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12719  1F6B  30BF               	movlw	191
 12720  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12721  1F6D  3000               	movlw	0
 12722  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12723  1F6F  3000               	movlw	0
 12724  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12725  1F71  3040               	movlw	64
 12726  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12727  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12728  1F74  0022               	movlb	2	; select bank2
 12729  1F75  00C1               	movwf	??_log^(0+256)
 12730  1F76  0841               	movf	??_log^(0+256),w
 12731  1F77  0021               	movlb	1	; select bank1
 12732  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12733  1F79  0022               	movlb	2	; select bank2
 12734  1F7A  083E               	movf	log@x^(0+256),w
 12735  1F7B  0021               	movlb	1	; select bank1
 12736  1F7C  00A0               	movwf	frexp@value^(0+128)
 12737  1F7D  0022               	movlb	2	; select bank2
 12738  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12739  1F7F  0021               	movlb	1	; select bank1
 12740  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12741  1F81  0022               	movlb	2	; select bank2
 12742  1F82  0840               	movf	(log@x+2)^(0+256),w
 12743  1F83  0021               	movlb	1	; select bank1
 12744  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12745  1F85  31A2  22BB  319F   	fcall	_frexp
 12746  1F88  0021               	movlb	1	; select bank1
 12747  1F89  0820               	movf	?_frexp^(0+128),w
 12748  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12749  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12750  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12751  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12752  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12753  1F8F  3187  273B  319F   	fcall	___ftmul
 12754  1F92  0021               	movlb	1	; select bank1
 12755  1F93  082E               	movf	?___ftmul^(0+128),w
 12756  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12757  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12758  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12759  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12760  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12761  1F99  3190  200F  319F   	fcall	___ftadd
 12762  1F9C  0021               	movlb	1	; select bank1
 12763  1F9D  0841               	movf	?___ftadd^(0+128),w
 12764  1F9E  0022               	movlb	2	; select bank2
 12765  1F9F  00BE               	movwf	log@x^(0+256)
 12766  1FA0  0021               	movlb	1	; select bank1
 12767  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12768  1FA2  0022               	movlb	2	; select bank2
 12769  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12770  1FA4  0021               	movlb	1	; select bank1
 12771  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12772  1FA6  0022               	movlb	2	; select bank2
 12773  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12774  1FA8  30FF               	movlw	255
 12775  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12776  1FAA  30FF               	movlw	255
 12777  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12778  1FAC  083E               	movf	log@x^(0+256),w
 12779  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12780  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12781  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12782  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12783  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12784  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12785  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12786  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12787  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12788  1FB6  3008               	movlw	8
 12789  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12790  1FB8  3000               	movlw	0
 12791  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12792  1FBA  31A6  269C  319F   	fcall	_eval_poly
 12793  1FBD  0022               	movlb	2	; select bank2
 12794  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12795  1FBF  00BE               	movwf	log@x^(0+256)
 12796  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 12797  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 12798  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 12799  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 12800  1FC4  083E               	movf	log@x^(0+256),w
 12801  1FC5  0021               	movlb	1	; select bank1
 12802  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 12803  1FC7  0022               	movlb	2	; select bank2
 12804  1FC8  083F               	movf	(log@x+1)^(0+256),w
 12805  1FC9  0021               	movlb	1	; select bank1
 12806  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12807  1FCB  0022               	movlb	2	; select bank2
 12808  1FCC  0840               	movf	(log@x+2)^(0+256),w
 12809  1FCD  0021               	movlb	1	; select bank1
 12810  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12811  1FCF  3072               	movlw	114
 12812  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 12813  1FD1  3031               	movlw	49
 12814  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12815  1FD3  303F               	movlw	63
 12816  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12817  1FD5  0022               	movlb	2	; select bank2
 12818  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 12819  1FD7  0021               	movlb	1	; select bank1
 12820  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12821  1FD9  0022               	movlb	2	; select bank2
 12822  1FDA  0842               	movf	log@exponent^(0+256),w
 12823  1FDB  0021               	movlb	1	; select bank1
 12824  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 12825  1FDD  31AF  2705  319F   	fcall	___awtoft
 12826  1FE0  0021               	movlb	1	; select bank1
 12827  1FE1  0828               	movf	?___awtoft^(0+128),w
 12828  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 12829  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 12830  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12831  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 12832  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12833  1FE7  3187  273B  319F   	fcall	___ftmul
 12834  1FEA  0021               	movlb	1	; select bank1
 12835  1FEB  082E               	movf	?___ftmul^(0+128),w
 12836  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 12837  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 12838  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12839  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 12840  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12841  1FF1  3190  200F         	fcall	___ftadd
 12842  1FF3  0021               	movlb	1	; select bank1
 12843  1FF4  0841               	movf	?___ftadd^(0+128),w
 12844  1FF5  0022               	movlb	2	; select bank2
 12845  1FF6  00BE               	movwf	?_log^(0+256)
 12846  1FF7  0021               	movlb	1	; select bank1
 12847  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 12848  1FF9  0022               	movlb	2	; select bank2
 12849  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 12850  1FFB  0021               	movlb	1	; select bank1
 12851  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 12852  1FFD  0022               	movlb	2	; select bank2
 12853  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 12854  1FFF  0008               	return
 12855  2000                     __end_of_log:	
 12856                           
 12857                           	psect	text29
 12858  1341                     __ptext29:	
 12859 ;; *************** function _exp *****************
 12860 ;; Defined at:
 12861 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 12862 ;; Parameters:    Size  Location     Type
 12863 ;;  x               3   40[BANK2 ] int 
 12864 ;; Auto vars:     Size  Location     Type
 12865 ;;  exponent        2   50[BANK2 ] int 
 12866 ;;  sign            1   52[BANK2 ] unsigned char 
 12867 ;; Return value:  Size  Location     Type
 12868 ;;                  3   40[BANK2 ] unsigned char 
 12869 ;; Registers used:
 12870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12871 ;; Tracked objects:
 12872 ;;		On entry : 0/0
 12873 ;;		On exit  : 0/0
 12874 ;;		Unchanged: 0/0
 12875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12876 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12877 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12878 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12879 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12880 ;;Total ram usage:       13 bytes
 12881 ;; Hardware stack levels used:    1
 12882 ;; Hardware stack levels required when called:    6
 12883 ;; This function calls:
 12884 ;;		___awtoft
 12885 ;;		___ftdiv
 12886 ;;		___ftge
 12887 ;;		___ftmul
 12888 ;;		___ftneg
 12889 ;;		___ftsub
 12890 ;;		___fttol
 12891 ;;		_eval_poly
 12892 ;;		_floor
 12893 ;;		_ldexp
 12894 ;; This function is called by:
 12895 ;;		_pow
 12896 ;; This function uses a non-reentrant model
 12897 ;;
 12898                           
 12899                           
 12900                           ;psect for function _exp
 12901  1341                     _exp:	
 12902                           
 12903                           ;incstack = 0
 12904                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12905  1341  0022               	movlb	2	; select bank2
 12906  1342  084A               	movf	(exp@x+2)^(0+256),w
 12907  1343  0449               	iorwf	(exp@x+1)^(0+256),w
 12908  1344  0448               	iorwf	exp@x^(0+256),w
 12909  1345  1D03               	skipz
 12910  1346  2B4E               	goto	l8300
 12911  1347  3000               	movlw	0
 12912  1348  00C8               	movwf	?_exp^(0+256)
 12913  1349  3080               	movlw	128
 12914  134A  00C9               	movwf	(?_exp+1)^(0+256)
 12915  134B  303F               	movlw	63
 12916  134C  00CA               	movwf	(?_exp+2)^(0+256)
 12917  134D  0008               	return
 12918  134E                     l8300:	
 12919  134E  3072               	movlw	114
 12920  134F  0021               	movlb	1	; select bank1
 12921  1350  00A0               	movwf	___ftge@ff1^(0+128)
 12922  1351  3031               	movlw	49
 12923  1352  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12924  1353  3044               	movlw	68
 12925  1354  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12926  1355  0022               	movlb	2	; select bank2
 12927  1356  0848               	movf	exp@x^(0+256),w
 12928  1357  0021               	movlb	1	; select bank1
 12929  1358  00A3               	movwf	___ftge@ff2^(0+128)
 12930  1359  0022               	movlb	2	; select bank2
 12931  135A  0849               	movf	(exp@x+1)^(0+256),w
 12932  135B  0021               	movlb	1	; select bank1
 12933  135C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12934  135D  0022               	movlb	2	; select bank2
 12935  135E  084A               	movf	(exp@x+2)^(0+256),w
 12936  135F  0021               	movlb	1	; select bank1
 12937  1360  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12938  1361  31A1  21C8  3193   	fcall	___ftge
 12939  1364  1803               	btfsc	3,0
 12940  1365  2B73               	goto	l8310
 12941  1366  3022               	movlw	34
 12942  1367  0024               	movlb	4	; select bank4
 12943  1368  00CD               	movwf	_errno^(0+512)
 12944  1369  3000               	movlw	0
 12945  136A  00CE               	movwf	(_errno^(0+512)+1)
 12946  136B  30FF               	movlw	255
 12947  136C  0022               	movlb	2	; select bank2
 12948  136D  00C8               	movwf	?_exp^(0+256)
 12949  136E  307F               	movlw	127
 12950  136F  00C9               	movwf	(?_exp+1)^(0+256)
 12951  1370  307F               	movlw	127
 12952  1371  00CA               	movwf	(?_exp+2)^(0+256)
 12953  1372  0008               	return
 12954  1373                     l8310:	
 12955  1373  0022               	movlb	2	; select bank2
 12956  1374  0848               	movf	exp@x^(0+256),w
 12957  1375  0021               	movlb	1	; select bank1
 12958  1376  00A0               	movwf	___ftge@ff1^(0+128)
 12959  1377  0022               	movlb	2	; select bank2
 12960  1378  0849               	movf	(exp@x+1)^(0+256),w
 12961  1379  0021               	movlb	1	; select bank1
 12962  137A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12963  137B  0022               	movlb	2	; select bank2
 12964  137C  084A               	movf	(exp@x+2)^(0+256),w
 12965  137D  0021               	movlb	1	; select bank1
 12966  137E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12967  137F  3049               	movlw	73
 12968  1380  00A3               	movwf	___ftge@ff2^(0+128)
 12969  1381  303A               	movlw	58
 12970  1382  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12971  1383  30C4               	movlw	196
 12972  1384  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12973  1385  31A1  21C8  3193   	fcall	___ftge
 12974  1388  1803               	btfsc	3,0
 12975  1389  2B97               	goto	l8316
 12976  138A  3022               	movlw	34
 12977  138B  0024               	movlb	4	; select bank4
 12978  138C  00CD               	movwf	_errno^(0+512)
 12979  138D  3000               	movlw	0
 12980  138E  00CE               	movwf	(_errno^(0+512)+1)
 12981  138F  3000               	movlw	0
 12982  1390  0022               	movlb	2	; select bank2
 12983  1391  00C8               	movwf	?_exp^(0+256)
 12984  1392  3000               	movlw	0
 12985  1393  00C9               	movwf	(?_exp+1)^(0+256)
 12986  1394  3000               	movlw	0
 12987  1395  00CA               	movwf	(?_exp+2)^(0+256)
 12988  1396  0008               	return
 12989  1397                     l8316:	
 12990  1397  0022               	movlb	2	; select bank2
 12991  1398  0848               	movf	exp@x^(0+256),w
 12992  1399  0021               	movlb	1	; select bank1
 12993  139A  00A0               	movwf	___ftge@ff1^(0+128)
 12994  139B  0022               	movlb	2	; select bank2
 12995  139C  0849               	movf	(exp@x+1)^(0+256),w
 12996  139D  0021               	movlb	1	; select bank1
 12997  139E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12998  139F  0022               	movlb	2	; select bank2
 12999  13A0  084A               	movf	(exp@x+2)^(0+256),w
 13000  13A1  0021               	movlb	1	; select bank1
 13001  13A2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13002  13A3  3000               	movlw	0
 13003  13A4  00A3               	movwf	___ftge@ff2^(0+128)
 13004  13A5  3000               	movlw	0
 13005  13A6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13006  13A7  3000               	movlw	0
 13007  13A8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13008  13A9  31A1  21C8  3193   	fcall	___ftge
 13009  13AC  1803               	btfsc	3,0
 13010  13AD  2BB0               	goto	u8750
 13011  13AE  3001               	movlw	1
 13012  13AF  2BB1               	goto	u8760
 13013  13B0                     u8750:	
 13014  13B0  3000               	movlw	0
 13015  13B1                     u8760:	
 13016  13B1  0022               	movlb	2	; select bank2
 13017  13B2  00CB               	movwf	??_exp^(0+256)
 13018  13B3  084B               	movf	??_exp^(0+256),w
 13019  13B4  00D4               	movwf	exp@sign^(0+256)
 13020  13B5  0854               	movf	exp@sign^(0+256),w
 13021  13B6  1903               	btfsc	3,2
 13022  13B7  2BD2               	goto	l8322
 13023  13B8  0848               	movf	exp@x^(0+256),w
 13024  13B9  0021               	movlb	1	; select bank1
 13025  13BA  00BE               	movwf	___ftneg@f1^(0+128)
 13026  13BB  0022               	movlb	2	; select bank2
 13027  13BC  0849               	movf	(exp@x+1)^(0+256),w
 13028  13BD  0021               	movlb	1	; select bank1
 13029  13BE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13030  13BF  0022               	movlb	2	; select bank2
 13031  13C0  084A               	movf	(exp@x+2)^(0+256),w
 13032  13C1  0021               	movlb	1	; select bank1
 13033  13C2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13034  13C3  31AD  25B2  3193   	fcall	___ftneg
 13035  13C6  0021               	movlb	1	; select bank1
 13036  13C7  083E               	movf	?___ftneg^(0+128),w
 13037  13C8  0022               	movlb	2	; select bank2
 13038  13C9  00C8               	movwf	exp@x^(0+256)
 13039  13CA  0021               	movlb	1	; select bank1
 13040  13CB  083F               	movf	(?___ftneg+1)^(0+128),w
 13041  13CC  0022               	movlb	2	; select bank2
 13042  13CD  00C9               	movwf	(exp@x+1)^(0+256)
 13043  13CE  0021               	movlb	1	; select bank1
 13044  13CF  0840               	movf	(?___ftneg+2)^(0+128),w
 13045  13D0  0022               	movlb	2	; select bank2
 13046  13D1  00CA               	movwf	(exp@x+2)^(0+256)
 13047  13D2                     l8322:	
 13048  13D2  30AA               	movlw	170
 13049  13D3  0021               	movlb	1	; select bank1
 13050  13D4  00AE               	movwf	___ftmul@f1^(0+128)
 13051  13D5  30B8               	movlw	184
 13052  13D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13053  13D7  303F               	movlw	63
 13054  13D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13055  13D9  0022               	movlb	2	; select bank2
 13056  13DA  0848               	movf	exp@x^(0+256),w
 13057  13DB  0021               	movlb	1	; select bank1
 13058  13DC  00B1               	movwf	___ftmul@f2^(0+128)
 13059  13DD  0022               	movlb	2	; select bank2
 13060  13DE  0849               	movf	(exp@x+1)^(0+256),w
 13061  13DF  0021               	movlb	1	; select bank1
 13062  13E0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13063  13E1  0022               	movlb	2	; select bank2
 13064  13E2  084A               	movf	(exp@x+2)^(0+256),w
 13065  13E3  0021               	movlb	1	; select bank1
 13066  13E4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13067  13E5  3187  273B  3193   	fcall	___ftmul
 13068  13E8  0021               	movlb	1	; select bank1
 13069  13E9  082E               	movf	?___ftmul^(0+128),w
 13070  13EA  0022               	movlb	2	; select bank2
 13071  13EB  00C8               	movwf	exp@x^(0+256)
 13072  13EC  0021               	movlb	1	; select bank1
 13073  13ED  082F               	movf	(?___ftmul+1)^(0+128),w
 13074  13EE  0022               	movlb	2	; select bank2
 13075  13EF  00C9               	movwf	(exp@x+1)^(0+256)
 13076  13F0  0021               	movlb	1	; select bank1
 13077  13F1  0830               	movf	(?___ftmul+2)^(0+128),w
 13078  13F2  0022               	movlb	2	; select bank2
 13079  13F3  00CA               	movwf	(exp@x+2)^(0+256)
 13080  13F4  0848               	movf	exp@x^(0+256),w
 13081  13F5  00AE               	movwf	floor@x^(0+256)
 13082  13F6  0849               	movf	(exp@x+1)^(0+256),w
 13083  13F7  00AF               	movwf	(floor@x+1)^(0+256)
 13084  13F8  084A               	movf	(exp@x+2)^(0+256),w
 13085  13F9  00B0               	movwf	(floor@x+2)^(0+256)
 13086  13FA  319E  267C  3193   	fcall	_floor
 13087  13FD  0022               	movlb	2	; select bank2
 13088  13FE  082E               	movf	?_floor^(0+256),w
 13089  13FF  00CC               	movwf	_exp$2862^(0+256)
 13090  1400  082F               	movf	(?_floor+1)^(0+256),w
 13091  1401  00CD               	movwf	(_exp$2862+1)^(0+256)
 13092  1402  0830               	movf	(?_floor+2)^(0+256),w
 13093  1403  00CE               	movwf	(_exp$2862+2)^(0+256)
 13094  1404  084C               	movf	_exp$2862^(0+256),w
 13095  1405  00A0               	movwf	___fttol@f1^(0+256)
 13096  1406  084D               	movf	(_exp$2862+1)^(0+256),w
 13097  1407  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13098  1408  084E               	movf	(_exp$2862+2)^(0+256),w
 13099  1409  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13100  140A  319A  2263  3193   	fcall	___fttol
 13101  140D  0022               	movlb	2	; select bank2
 13102  140E  0821               	movf	(?___fttol^(0+256)+1),w
 13103  140F  00D3               	movwf	(exp@exponent+1)^(0+256)
 13104  1410  0820               	movf	?___fttol^(0+256),w
 13105  1411  00D2               	movwf	exp@exponent^(0+256)
 13106  1412  0853               	movf	(exp@exponent+1)^(0+256),w
 13107  1413  0021               	movlb	1	; select bank1
 13108  1414  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13109  1415  0022               	movlb	2	; select bank2
 13110  1416  0852               	movf	exp@exponent^(0+256),w
 13111  1417  0021               	movlb	1	; select bank1
 13112  1418  00A8               	movwf	___awtoft@c^(0+128)
 13113  1419  31AF  2705  3193   	fcall	___awtoft
 13114  141C  0021               	movlb	1	; select bank1
 13115  141D  0828               	movf	?___awtoft^(0+128),w
 13116  141E  0022               	movlb	2	; select bank2
 13117  141F  00B7               	movwf	___ftsub@f2^(0+256)
 13118  1420  0021               	movlb	1	; select bank1
 13119  1421  0829               	movf	(?___awtoft+1)^(0+128),w
 13120  1422  0022               	movlb	2	; select bank2
 13121  1423  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 13122  1424  0021               	movlb	1	; select bank1
 13123  1425  082A               	movf	(?___awtoft+2)^(0+128),w
 13124  1426  0022               	movlb	2	; select bank2
 13125  1427  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 13126  1428  0848               	movf	exp@x^(0+256),w
 13127  1429  00BA               	movwf	___ftsub@f1^(0+256)
 13128  142A  0849               	movf	(exp@x+1)^(0+256),w
 13129  142B  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 13130  142C  084A               	movf	(exp@x+2)^(0+256),w
 13131  142D  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 13132  142E  31AF  27A3  3193   	fcall	___ftsub
 13133  1431  0022               	movlb	2	; select bank2
 13134  1432  0837               	movf	?___ftsub^(0+256),w
 13135  1433  00C8               	movwf	exp@x^(0+256)
 13136  1434  0838               	movf	(?___ftsub+1)^(0+256),w
 13137  1435  00C9               	movwf	(exp@x+1)^(0+256)
 13138  1436  0839               	movf	(?___ftsub+2)^(0+256),w
 13139  1437  00CA               	movwf	(exp@x+2)^(0+256)
 13140  1438  0848               	movf	exp@x^(0+256),w
 13141  1439  00B4               	movwf	eval_poly@x^(0+256)
 13142  143A  0849               	movf	(exp@x+1)^(0+256),w
 13143  143B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13144  143C  084A               	movf	(exp@x+2)^(0+256),w
 13145  143D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13146  143E  3000               	movlw	low (exp@coeff| (0+32768))
 13147  143F  00B7               	movwf	eval_poly@d^(0+256)
 13148  1440  30A8               	movlw	high (exp@coeff| (0+32768))
 13149  1441  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13150  1442  3009               	movlw	9
 13151  1443  00B9               	movwf	eval_poly@n^(0+256)
 13152  1444  3000               	movlw	0
 13153  1445  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13154  1446  31A6  269C  3193   	fcall	_eval_poly
 13155  1449  0022               	movlb	2	; select bank2
 13156  144A  0834               	movf	?_eval_poly^(0+256),w
 13157  144B  00BE               	movwf	ldexp@value^(0+256)
 13158  144C  0835               	movf	(?_eval_poly+1)^(0+256),w
 13159  144D  00BF               	movwf	(ldexp@value+1)^(0+256)
 13160  144E  0836               	movf	(?_eval_poly+2)^(0+256),w
 13161  144F  00C0               	movwf	(ldexp@value+2)^(0+256)
 13162  1450  0853               	movf	(exp@exponent+1)^(0+256),w
 13163  1451  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13164  1452  0852               	movf	exp@exponent^(0+256),w
 13165  1453  00C1               	movwf	ldexp@newexp^(0+256)
 13166  1454  319C  2491  3193   	fcall	_ldexp
 13167  1457  0022               	movlb	2	; select bank2
 13168  1458  083E               	movf	?_ldexp^(0+256),w
 13169  1459  00C8               	movwf	exp@x^(0+256)
 13170  145A  083F               	movf	(?_ldexp+1)^(0+256),w
 13171  145B  00C9               	movwf	(exp@x+1)^(0+256)
 13172  145C  0840               	movf	(?_ldexp+2)^(0+256),w
 13173  145D  00CA               	movwf	(exp@x+2)^(0+256)
 13174  145E  0854               	movf	exp@sign^(0+256),w
 13175  145F  1903               	btfsc	3,2
 13176  1460  0008               	return
 13177  1461  30FF               	movlw	255
 13178  1462  00CF               	movwf	_exp$2612^(0+256)
 13179  1463  307F               	movlw	127
 13180  1464  00D0               	movwf	(_exp$2612+1)^(0+256)
 13181  1465  307F               	movlw	127
 13182  1466  00D1               	movwf	(_exp$2612+2)^(0+256)
 13183  1467  084A               	movf	(exp@x+2)^(0+256),w
 13184  1468  0651               	xorwf	(_exp$2612+2)^(0+256),w
 13185  1469  1D03               	skipz
 13186  146A  2C71               	goto	u8795
 13187  146B  0849               	movf	(exp@x+1)^(0+256),w
 13188  146C  0650               	xorwf	(_exp$2612+1)^(0+256),w
 13189  146D  1D03               	skipz
 13190  146E  2C71               	goto	u8795
 13191  146F  0848               	movf	exp@x^(0+256),w
 13192  1470  064F               	xorwf	_exp$2612^(0+256),w
 13193  1471                     u8795:	
 13194  1471  1D03               	skipz
 13195  1472  2C7A               	goto	l8344
 13196  1473  3000               	movlw	0
 13197  1474  00C8               	movwf	?_exp^(0+256)
 13198  1475  3000               	movlw	0
 13199  1476  00C9               	movwf	(?_exp+1)^(0+256)
 13200  1477  3000               	movlw	0
 13201  1478  00CA               	movwf	(?_exp+2)^(0+256)
 13202  1479  0008               	return
 13203  147A                     l8344:	
 13204  147A  0848               	movf	exp@x^(0+256),w
 13205  147B  0021               	movlb	1	; select bank1
 13206  147C  00CE               	movwf	___ftdiv@f2^(0+128)
 13207  147D  0022               	movlb	2	; select bank2
 13208  147E  0849               	movf	(exp@x+1)^(0+256),w
 13209  147F  0021               	movlb	1	; select bank1
 13210  1480  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13211  1481  0022               	movlb	2	; select bank2
 13212  1482  084A               	movf	(exp@x+2)^(0+256),w
 13213  1483  0021               	movlb	1	; select bank1
 13214  1484  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13215  1485  3000               	movlw	0
 13216  1486  00D1               	movwf	___ftdiv@f1^(0+128)
 13217  1487  3080               	movlw	128
 13218  1488  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13219  1489  303F               	movlw	63
 13220  148A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13221  148B  319D  2528         	fcall	___ftdiv
 13222  148D  0021               	movlb	1	; select bank1
 13223  148E  084E               	movf	?___ftdiv^(0+128),w
 13224  148F  0022               	movlb	2	; select bank2
 13225  1490  00C8               	movwf	?_exp^(0+256)
 13226  1491  0021               	movlb	1	; select bank1
 13227  1492  084F               	movf	(?___ftdiv+1)^(0+128),w
 13228  1493  0022               	movlb	2	; select bank2
 13229  1494  00C9               	movwf	(?_exp+1)^(0+256)
 13230  1495  0021               	movlb	1	; select bank1
 13231  1496  0850               	movf	(?___ftdiv+2)^(0+128),w
 13232  1497  0022               	movlb	2	; select bank2
 13233  1498  00CA               	movwf	(?_exp+2)^(0+256)
 13234  1499  0008               	return
 13235  149A                     __end_of_exp:	
 13236                           
 13237                           	psect	text30
 13238  1C91                     __ptext30:	
 13239 ;; *************** function _ldexp *****************
 13240 ;; Defined at:
 13241 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13242 ;; Parameters:    Size  Location     Type
 13243 ;;  value           3   30[BANK2 ] unsigned char 
 13244 ;;  newexp          2   33[BANK2 ] int 
 13245 ;; Auto vars:     Size  Location     Type
 13246 ;;		None
 13247 ;; Return value:  Size  Location     Type
 13248 ;;                  3   30[BANK2 ] int 
 13249 ;; Registers used:
 13250 ;;		wreg, status,2, status,0, pclath, cstack
 13251 ;; Tracked objects:
 13252 ;;		On entry : 0/0
 13253 ;;		On exit  : 0/0
 13254 ;;		Unchanged: 0/0
 13255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13256 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13257 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13258 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13259 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13260 ;;Total ram usage:       10 bytes
 13261 ;; Hardware stack levels used:    1
 13262 ;; Hardware stack levels required when called:    4
 13263 ;; This function calls:
 13264 ;;		___ftge
 13265 ;;		___ftneg
 13266 ;; This function is called by:
 13267 ;;		_exp
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           
 13272                           ;psect for function _ldexp
 13273  1C91                     _ldexp:	
 13274                           
 13275                           ;incstack = 0
 13276                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13277  1C91  0022               	movlb	2	; select bank2
 13278  1C92  0840               	movf	(ldexp@value+2)^(0+256),w
 13279  1C93  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13280  1C94  043E               	iorwf	ldexp@value^(0+256),w
 13281  1C95  1D03               	skipz
 13282  1C96  2C9E               	goto	l8114
 13283  1C97  3000               	movlw	0
 13284  1C98  00BE               	movwf	?_ldexp^(0+256)
 13285  1C99  3000               	movlw	0
 13286  1C9A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13287  1C9B  3000               	movlw	0
 13288  1C9C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13289  1C9D  0008               	return
 13290  1C9E                     l8114:	
 13291  1C9E  0840               	movf	(ldexp@value^(0+256)+2),w
 13292  1C9F  397F               	andlw	127
 13293  1CA0  00C3               	movwf	??_ldexp^(0+256)
 13294  1CA1  01C4               	clrf	(??_ldexp^(0+256)+1)
 13295  1CA2  35C3               	lslf	??_ldexp^(0+256),f
 13296  1CA3  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13297  1CA4  0843               	movf	??_ldexp^(0+256),w
 13298  1CA5  07C1               	addwf	ldexp@newexp^(0+256),f
 13299  1CA6  0844               	movf	(??_ldexp+1)^(0+256),w
 13300  1CA7  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13301  1CA8  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13302  1CA9  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13303  1CAA  3901               	andlw	1
 13304  1CAB  00C3               	movwf	??_ldexp^(0+256)
 13305  1CAC  01C4               	clrf	(??_ldexp^(0+256)+1)
 13306  1CAD  0843               	movf	??_ldexp^(0+256),w
 13307  1CAE  07C1               	addwf	ldexp@newexp^(0+256),f
 13308  1CAF  0844               	movf	(??_ldexp+1)^(0+256),w
 13309  1CB0  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13310  1CB1  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13311  1CB2  2CC0               	goto	l8124
 13312  1CB3  3022               	movlw	34
 13313  1CB4  0024               	movlb	4	; select bank4
 13314  1CB5  00CD               	movwf	_errno^(0+512)
 13315  1CB6  3000               	movlw	0
 13316  1CB7  00CE               	movwf	(_errno^(0+512)+1)
 13317  1CB8  3000               	movlw	0
 13318  1CB9  0022               	movlb	2	; select bank2
 13319  1CBA  00BE               	movwf	?_ldexp^(0+256)
 13320  1CBB  3000               	movlw	0
 13321  1CBC  00BF               	movwf	(?_ldexp+1)^(0+256)
 13322  1CBD  3000               	movlw	0
 13323  1CBE  00C0               	movwf	(?_ldexp+2)^(0+256)
 13324  1CBF  0008               	return
 13325  1CC0                     l8124:	
 13326  1CC0  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13327  1CC1  3A80               	xorlw	128
 13328  1CC2  00C3               	movwf	??_ldexp^(0+256)
 13329  1CC3  3081               	movlw	129
 13330  1CC4  0243               	subwf	??_ldexp^(0+256),w
 13331  1CC5  1D03               	skipz
 13332  1CC6  2CC9               	goto	u8565
 13333  1CC7  3000               	movlw	0
 13334  1CC8  0241               	subwf	ldexp@newexp^(0+256),w
 13335  1CC9                     u8565:	
 13336  1CC9  1C03               	skipc
 13337  1CCA  2D10               	goto	l8148
 13338  1CCB  3022               	movlw	34
 13339  1CCC  0024               	movlb	4	; select bank4
 13340  1CCD  00CD               	movwf	_errno^(0+512)
 13341  1CCE  3000               	movlw	0
 13342  1CCF  00CE               	movwf	(_errno^(0+512)+1)
 13343  1CD0  0022               	movlb	2	; select bank2
 13344  1CD1  083E               	movf	ldexp@value^(0+256),w
 13345  1CD2  0021               	movlb	1	; select bank1
 13346  1CD3  00A0               	movwf	___ftge@ff1^(0+128)
 13347  1CD4  0022               	movlb	2	; select bank2
 13348  1CD5  083F               	movf	(ldexp@value+1)^(0+256),w
 13349  1CD6  0021               	movlb	1	; select bank1
 13350  1CD7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13351  1CD8  0022               	movlb	2	; select bank2
 13352  1CD9  0840               	movf	(ldexp@value+2)^(0+256),w
 13353  1CDA  0021               	movlb	1	; select bank1
 13354  1CDB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13355  1CDC  3000               	movlw	0
 13356  1CDD  00A3               	movwf	___ftge@ff2^(0+128)
 13357  1CDE  3000               	movlw	0
 13358  1CDF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13359  1CE0  3000               	movlw	0
 13360  1CE1  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13361  1CE2  31A1  21C8  319C   	fcall	___ftge
 13362  1CE5  1803               	btfsc	3,0
 13363  1CE6  2D08               	goto	l8144
 13364  1CE7  30FF               	movlw	255
 13365  1CE8  0022               	movlb	2	; select bank2
 13366  1CE9  00C5               	movwf	_ldexp$2649^(0+256)
 13367  1CEA  307F               	movlw	127
 13368  1CEB  00C6               	movwf	(_ldexp$2649+1)^(0+256)
 13369  1CEC  307F               	movlw	127
 13370  1CED  00C7               	movwf	(_ldexp$2649+2)^(0+256)
 13371  1CEE  0845               	movf	_ldexp$2649^(0+256),w
 13372  1CEF  0021               	movlb	1	; select bank1
 13373  1CF0  00BE               	movwf	___ftneg@f1^(0+128)
 13374  1CF1  0022               	movlb	2	; select bank2
 13375  1CF2  0846               	movf	(_ldexp$2649+1)^(0+256),w
 13376  1CF3  0021               	movlb	1	; select bank1
 13377  1CF4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13378  1CF5  0022               	movlb	2	; select bank2
 13379  1CF6  0847               	movf	(_ldexp$2649+2)^(0+256),w
 13380  1CF7  0021               	movlb	1	; select bank1
 13381  1CF8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13382  1CF9  31AD  25B2         	fcall	___ftneg
 13383  1CFB  0021               	movlb	1	; select bank1
 13384  1CFC  083E               	movf	?___ftneg^(0+128),w
 13385  1CFD  0022               	movlb	2	; select bank2
 13386  1CFE  00BE               	movwf	?_ldexp^(0+256)
 13387  1CFF  0021               	movlb	1	; select bank1
 13388  1D00  083F               	movf	(?___ftneg+1)^(0+128),w
 13389  1D01  0022               	movlb	2	; select bank2
 13390  1D02  00BF               	movwf	(?_ldexp+1)^(0+256)
 13391  1D03  0021               	movlb	1	; select bank1
 13392  1D04  0840               	movf	(?___ftneg+2)^(0+128),w
 13393  1D05  0022               	movlb	2	; select bank2
 13394  1D06  00C0               	movwf	(?_ldexp+2)^(0+256)
 13395  1D07  0008               	return
 13396  1D08                     l8144:	
 13397  1D08  30FF               	movlw	255
 13398  1D09  0022               	movlb	2	; select bank2
 13399  1D0A  00BE               	movwf	?_ldexp^(0+256)
 13400  1D0B  307F               	movlw	127
 13401  1D0C  00BF               	movwf	(?_ldexp+1)^(0+256)
 13402  1D0D  307F               	movlw	127
 13403  1D0E  00C0               	movwf	(?_ldexp+2)^(0+256)
 13404  1D0F  0008               	return
 13405  1D10                     l8148:	
 13406  1D10  0022               	movlb	2	; select bank2
 13407  1D11  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13408  1D12  00C4               	movwf	(??_ldexp^(0+256)+1)
 13409  1D13  0841               	movf	ldexp@newexp^(0+256),w
 13410  1D14  00C3               	movwf	??_ldexp^(0+256)
 13411  1D15  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13412  1D16  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13413  1D17  0CC3               	rrf	??_ldexp^(0+256),f
 13414  1D18  0840               	movf	(ldexp@value^(0+256)+2),w
 13415  1D19  0643               	xorwf	??_ldexp^(0+256),w
 13416  1D1A  3980               	andlw	-128
 13417  1D1B  0643               	xorwf	??_ldexp^(0+256),w
 13418  1D1C  00C0               	movwf	(ldexp@value^(0+256)+2)
 13419  1D1D  0841               	movf	ldexp@newexp^(0+256),w
 13420  1D1E  3901               	andlw	1
 13421  1D1F  00C3               	movwf	??_ldexp^(0+256)
 13422  1D20  0CC3               	rrf	??_ldexp^(0+256),f
 13423  1D21  0CC3               	rrf	??_ldexp^(0+256),f
 13424  1D22  083F               	movf	(ldexp@value^(0+256)+1),w
 13425  1D23  0643               	xorwf	??_ldexp^(0+256),w
 13426  1D24  397F               	andlw	-129
 13427  1D25  0643               	xorwf	??_ldexp^(0+256),w
 13428  1D26  00BF               	movwf	(ldexp@value^(0+256)+1)
 13429  1D27  0008               	return
 13430  1D28                     __end_of_ldexp:	
 13431                           
 13432                           	psect	text31
 13433  2F4D                     __ptext31:	
 13434 ;; *************** function ___lltoft *****************
 13435 ;; Defined at:
 13436 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13437 ;; Parameters:    Size  Location     Type
 13438 ;;  c               4    8[BANK1 ] unsigned long 
 13439 ;; Auto vars:     Size  Location     Type
 13440 ;;  exp             1   13[BANK1 ] unsigned char 
 13441 ;; Return value:  Size  Location     Type
 13442 ;;                  3    8[BANK1 ] float 
 13443 ;; Registers used:
 13444 ;;		wreg, status,2, status,0, pclath, cstack
 13445 ;; Tracked objects:
 13446 ;;		On entry : 0/0
 13447 ;;		On exit  : 0/0
 13448 ;;		Unchanged: 0/0
 13449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13450 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13451 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13452 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13453 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13454 ;;Total ram usage:        6 bytes
 13455 ;; Hardware stack levels used:    1
 13456 ;; Hardware stack levels required when called:    4
 13457 ;; This function calls:
 13458 ;;		___ftpack
 13459 ;; This function is called by:
 13460 ;;		_pow
 13461 ;; This function uses a non-reentrant model
 13462 ;;
 13463                           
 13464                           
 13465                           ;psect for function ___lltoft
 13466  2F4D                     ___lltoft:	
 13467                           
 13468                           ;incstack = 0
 13469                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13470  2F4D  308E               	movlw	142
 13471  2F4E  0021               	movlb	1	; select bank1
 13472  2F4F  00AC               	movwf	??___lltoft^(0+128)
 13473  2F50  082C               	movf	??___lltoft^(0+128),w
 13474  2F51  00AD               	movwf	___lltoft@exp^(0+128)
 13475  2F52                     l8266:	
 13476  2F52  30FF               	movlw	255
 13477  2F53  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13478  2F54  1903               	btfsc	3,2
 13479  2F55  2F62               	goto	l8268
 13480  2F56  3001               	movlw	1
 13481  2F57                     u8685:	
 13482  2F57  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13483  2F58  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13484  2F59  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13485  2F5A  0CA8               	rrf	___lltoft@c^(0+128),f
 13486  2F5B  0B89               	decfsz	9,f
 13487  2F5C  2F57               	goto	u8685
 13488  2F5D  3001               	movlw	1
 13489  2F5E  00AC               	movwf	??___lltoft^(0+128)
 13490  2F5F  082C               	movf	??___lltoft^(0+128),w
 13491  2F60  07AD               	addwf	___lltoft@exp^(0+128),f
 13492  2F61  2F52               	goto	l8266
 13493  2F62                     l8268:	
 13494  2F62  0828               	movf	___lltoft@c^(0+128),w
 13495  2F63  00A0               	movwf	___ftpack@arg^(0+128)
 13496  2F64  0829               	movf	(___lltoft@c+1)^(0+128),w
 13497  2F65  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13498  2F66  082A               	movf	(___lltoft@c+2)^(0+128),w
 13499  2F67  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13500  2F68  082D               	movf	___lltoft@exp^(0+128),w
 13501  2F69  00AC               	movwf	??___lltoft^(0+128)
 13502  2F6A  082C               	movf	??___lltoft^(0+128),w
 13503  2F6B  00A3               	movwf	___ftpack@exp^(0+128)
 13504  2F6C  01A4               	clrf	___ftpack@sign^(0+128)
 13505  2F6D  31A6  2637         	fcall	___ftpack
 13506  2F6F  0021               	movlb	1	; select bank1
 13507  2F70  0820               	movf	?___ftpack^(0+128),w
 13508  2F71  00A8               	movwf	?___lltoft^(0+128)
 13509  2F72  0821               	movf	(?___ftpack+1)^(0+128),w
 13510  2F73  00A9               	movwf	(?___lltoft+1)^(0+128)
 13511  2F74  0822               	movf	(?___ftpack+2)^(0+128),w
 13512  2F75  00AA               	movwf	(?___lltoft+2)^(0+128)
 13513  2F76  0008               	return
 13514  2F77                     __end_of___lltoft:	
 13515                           
 13516                           	psect	text32
 13517  244F                     __ptext32:	
 13518 ;; *************** function _read_top_tactile *****************
 13519 ;; Defined at:
 13520 ;;		line 50 in file "tactiles.c"
 13521 ;; Parameters:    Size  Location     Type
 13522 ;;		None
 13523 ;; Auto vars:     Size  Location     Type
 13524 ;;		None
 13525 ;; Return value:  Size  Location     Type
 13526 ;;                  1    wreg      void 
 13527 ;; Registers used:
 13528 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13529 ;; Tracked objects:
 13530 ;;		On entry : 0/0
 13531 ;;		On exit  : 0/0
 13532 ;;		Unchanged: 0/0
 13533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13536 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13537 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13538 ;;Total ram usage:        1 bytes
 13539 ;; Hardware stack levels used:    1
 13540 ;; Hardware stack levels required when called:    5
 13541 ;; This function calls:
 13542 ;;		_set_leds_top
 13543 ;;		_wait_ms
 13544 ;; This function is called by:
 13545 ;;		_main
 13546 ;; This function uses a non-reentrant model
 13547 ;;
 13548                           
 13549                           
 13550                           ;psect for function _read_top_tactile
 13551  244F                     _read_top_tactile:	
 13552                           
 13553                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13554                           
 13555                           ;incstack = 0
 13556                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13557  244F  0020               	movlb	0	; select bank0
 13558  2450  1A8F               	btfsc	15,5	;volatile
 13559  2451  2C59               	goto	l9088
 13560                           
 13561                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13562  2452  0023               	movlb	3	; select bank3
 13563  2453  0846               	movf	_topTactile_pressed^(0+384),w
 13564  2454  1903               	btfsc	3,2
 13565  2455  2C64               	goto	l974
 13566                           
 13567                           ;tactiles.c: 62: topTactile_pressed--;
 13568  2456  3001               	movlw	1
 13569  2457  02C6               	subwf	_topTactile_pressed^(0+384),f
 13570                           
 13571                           ;tactiles.c: 63: }
 13572                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13573  2458  2C64               	goto	l974
 13574  2459                     l9088:	
 13575  2459  3019               	movlw	25
 13576  245A  0023               	movlb	3	; select bank3
 13577  245B  0246               	subwf	_topTactile_pressed^(0+384),w
 13578  245C  1803               	skipnc
 13579  245D  2C64               	goto	l974
 13580                           
 13581                           ;tactiles.c: 65: topTactile_pressed++;
 13582  245E  3001               	movlw	1
 13583  245F  0021               	movlb	1	; select bank1
 13584  2460  00B2               	movwf	??_read_top_tactile^(0+128)
 13585  2461  0832               	movf	??_read_top_tactile^(0+128),w
 13586  2462  0023               	movlb	3	; select bank3
 13587  2463  07C6               	addwf	_topTactile_pressed^(0+384),f
 13588  2464                     l974:	
 13589                           
 13590                           ;tactiles.c: 66: }
 13591                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13592  2464  0846               	movf	_topTactile_pressed^(0+384),w
 13593  2465  1D03               	btfss	3,2
 13594  2466  0008               	return
 13595                           
 13596                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13597  2467  0020               	movlb	0	; select bank0
 13598  2468  085A               	movf	_top_push_state,w
 13599  2469  3E01               	addlw	1
 13600  246A  00DA               	movwf	_top_push_state
 13601  246B  3000               	movlw	0
 13602  246C  3D5B               	addwfc	_top_push_state+1,w
 13603  246D  00DB               	movwf	_top_push_state+1
 13604                           
 13605                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13606  246E  085B               	movf	_top_push_state+1,w
 13607  246F  3A80               	xorlw	128
 13608  2470  0021               	movlb	1	; select bank1
 13609  2471  00B2               	movwf	??_read_top_tactile^(0+128)
 13610  2472  3080               	movlw	128
 13611  2473  0232               	subwf	??_read_top_tactile^(0+128),w
 13612  2474  1D03               	skipz
 13613  2475  2C79               	goto	u10065
 13614  2476  3007               	movlw	7
 13615  2477  0020               	movlb	0	; select bank0
 13616  2478  025A               	subwf	_top_push_state,w
 13617  2479                     u10065:	
 13618  2479  1C03               	skipc
 13619  247A  2C80               	goto	l9098
 13620                           
 13621                           ;tactiles.c: 75: top_push_state = 1;
 13622  247B  3001               	movlw	1
 13623  247C  0020               	movlb	0	; select bank0
 13624  247D  00DA               	movwf	_top_push_state
 13625  247E  3000               	movlw	0
 13626  247F  00DB               	movwf	_top_push_state+1
 13627  2480                     l9098:	
 13628                           
 13629                           ;tactiles.c: 76: }
 13630                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13631  2480  0020               	movlb	0	; select bank0
 13632  2481  085B               	movf	_top_push_state+1,w
 13633  2482  0021               	movlb	1	; select bank1
 13634  2483  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13635  2484  0020               	movlb	0	; select bank0
 13636  2485  085A               	movf	_top_push_state,w
 13637  2486  0021               	movlb	1	; select bank1
 13638  2487  00A0               	movwf	set_leds_top@x^(0+128)
 13639  2488  3001               	movlw	1
 13640  2489  00A2               	movwf	set_leds_top@ledState^(0+128)
 13641  248A  3000               	movlw	0
 13642  248B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13643  248C  31A5  25E3  31A4   	fcall	_set_leds_top
 13644                           
 13645                           ;tactiles.c: 78: mod_time_changed = 1;
 13646  248F  0023               	movlb	3	; select bank3
 13647  2490  01E4               	clrf	_mod_time_changed^(0+384)
 13648  2491  0AE4               	incf	_mod_time_changed^(0+384),f
 13649  2492                     l978:	
 13650                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13651                           
 13652  2492  0020               	movlb	0	; select bank0
 13653  2493  1E8F               	btfss	15,5	;volatile
 13654  2494  2C92               	goto	l978
 13655                           
 13656                           ;tactiles.c: 82: }
 13657                           ;tactiles.c: 83: wait_ms(20);
 13658  2495  3014               	movlw	20
 13659  2496  0021               	movlb	1	; select bank1
 13660  2497  00AC               	movwf	wait_ms@timeSec^(0+128)
 13661  2498  3000               	movlw	0
 13662  2499  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13663  249A  31A0  20B3         	fcall	_wait_ms
 13664  249C  0008               	return
 13665  249D                     __end_of_read_top_tactile:	
 13666                           
 13667                           	psect	text33
 13668  2405                     __ptext33:	
 13669 ;; *************** function _read_bottom_tactile *****************
 13670 ;; Defined at:
 13671 ;;		line 18 in file "tactiles.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;		None
 13674 ;; Auto vars:     Size  Location     Type
 13675 ;;		None
 13676 ;; Return value:  Size  Location     Type
 13677 ;;                  1    wreg      void 
 13678 ;; Registers used:
 13679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13680 ;; Tracked objects:
 13681 ;;		On entry : 0/0
 13682 ;;		On exit  : 0/0
 13683 ;;		Unchanged: 0/0
 13684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13687 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13688 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13689 ;;Total ram usage:        1 bytes
 13690 ;; Hardware stack levels used:    1
 13691 ;; Hardware stack levels required when called:    5
 13692 ;; This function calls:
 13693 ;;		_set_leds_bottom
 13694 ;;		_wait_ms
 13695 ;; This function is called by:
 13696 ;;		_main
 13697 ;; This function uses a non-reentrant model
 13698 ;;
 13699                           
 13700                           
 13701                           ;psect for function _read_bottom_tactile
 13702  2405                     _read_bottom_tactile:	
 13703                           
 13704                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13705                           
 13706                           ;incstack = 0
 13707                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13708  2405  0020               	movlb	0	; select bank0
 13709  2406  1B0F               	btfsc	15,6	;volatile
 13710  2407  2C0F               	goto	l9066
 13711                           
 13712                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13713  2408  0023               	movlb	3	; select bank3
 13714  2409  083B               	movf	_bottomTactile_pressed^(0+384),w
 13715  240A  1903               	btfsc	3,2
 13716  240B  2C1A               	goto	l962
 13717                           
 13718                           ;tactiles.c: 29: bottomTactile_pressed--;
 13719  240C  3001               	movlw	1
 13720  240D  02BB               	subwf	_bottomTactile_pressed^(0+384),f
 13721                           
 13722                           ;tactiles.c: 30: }
 13723                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13724  240E  2C1A               	goto	l962
 13725  240F                     l9066:	
 13726  240F  3019               	movlw	25
 13727  2410  0023               	movlb	3	; select bank3
 13728  2411  023B               	subwf	_bottomTactile_pressed^(0+384),w
 13729  2412  1803               	skipnc
 13730  2413  2C1A               	goto	l962
 13731                           
 13732                           ;tactiles.c: 32: bottomTactile_pressed++;
 13733  2414  3001               	movlw	1
 13734  2415  0021               	movlb	1	; select bank1
 13735  2416  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13736  2417  0832               	movf	??_read_bottom_tactile^(0+128),w
 13737  2418  0023               	movlb	3	; select bank3
 13738  2419  07BB               	addwf	_bottomTactile_pressed^(0+384),f
 13739  241A                     l962:	
 13740                           
 13741                           ;tactiles.c: 33: }
 13742                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13743  241A  083B               	movf	_bottomTactile_pressed^(0+384),w
 13744  241B  1D03               	btfss	3,2
 13745  241C  0008               	return
 13746                           
 13747                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13748  241D  0020               	movlb	0	; select bank0
 13749  241E  0856               	movf	_bottom_push_state,w
 13750  241F  3E01               	addlw	1
 13751  2420  00D6               	movwf	_bottom_push_state
 13752  2421  3000               	movlw	0
 13753  2422  3D57               	addwfc	_bottom_push_state+1,w
 13754  2423  00D7               	movwf	_bottom_push_state+1
 13755                           
 13756                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13757  2424  0857               	movf	_bottom_push_state+1,w
 13758  2425  3A80               	xorlw	128
 13759  2426  0021               	movlb	1	; select bank1
 13760  2427  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13761  2428  3080               	movlw	128
 13762  2429  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13763  242A  1D03               	skipz
 13764  242B  2C2F               	goto	u10005
 13765  242C  3006               	movlw	6
 13766  242D  0020               	movlb	0	; select bank0
 13767  242E  0256               	subwf	_bottom_push_state,w
 13768  242F                     u10005:	
 13769  242F  1C03               	skipc
 13770  2430  2C36               	goto	l9076
 13771                           
 13772                           ;tactiles.c: 39: bottom_push_state = 1;
 13773  2431  3001               	movlw	1
 13774  2432  0020               	movlb	0	; select bank0
 13775  2433  00D6               	movwf	_bottom_push_state
 13776  2434  3000               	movlw	0
 13777  2435  00D7               	movwf	_bottom_push_state+1
 13778  2436                     l9076:	
 13779                           
 13780                           ;tactiles.c: 40: }
 13781                           ;tactiles.c: 41: modulation_changed = 1;
 13782  2436  0023               	movlb	3	; select bank3
 13783  2437  01C2               	clrf	_modulation_changed^(0+384)
 13784  2438  0AC2               	incf	_modulation_changed^(0+384),f
 13785                           
 13786                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13787  2439  0020               	movlb	0	; select bank0
 13788  243A  0857               	movf	_bottom_push_state+1,w
 13789  243B  0021               	movlb	1	; select bank1
 13790  243C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13791  243D  0020               	movlb	0	; select bank0
 13792  243E  0856               	movf	_bottom_push_state,w
 13793  243F  0021               	movlb	1	; select bank1
 13794  2440  00A0               	movwf	set_leds_bottom@x^(0+128)
 13795  2441  31A1  218D  31A4   	fcall	_set_leds_bottom
 13796  2444                     l966:	
 13797                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13798                           
 13799  2444  0020               	movlb	0	; select bank0
 13800  2445  1F0F               	btfss	15,6	;volatile
 13801  2446  2C44               	goto	l966
 13802                           
 13803                           ;tactiles.c: 45: }
 13804                           ;tactiles.c: 46: wait_ms(20);
 13805  2447  3014               	movlw	20
 13806  2448  0021               	movlb	1	; select bank1
 13807  2449  00AC               	movwf	wait_ms@timeSec^(0+128)
 13808  244A  3000               	movlw	0
 13809  244B  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13810  244C  31A0  20B3         	fcall	_wait_ms
 13811  244E  0008               	return
 13812  244F                     __end_of_read_bottom_tactile:	
 13813                           
 13814                           	psect	text34
 13815  1AEA                     __ptext34:	
 13816 ;; *************** function _map *****************
 13817 ;; Defined at:
 13818 ;;		line 177 in file "user.c"
 13819 ;; Parameters:    Size  Location     Type
 13820 ;;  x               3   62[BANK1 ] float 
 13821 ;;  in_min          3   65[BANK1 ] float 
 13822 ;;  in_max          3   68[BANK1 ] float 
 13823 ;;  out_min         3   71[BANK1 ] float 
 13824 ;;  out_max         3   74[BANK1 ] float 
 13825 ;; Auto vars:     Size  Location     Type
 13826 ;;		None
 13827 ;; Return value:  Size  Location     Type
 13828 ;;                  3   62[BANK1 ] float 
 13829 ;; Registers used:
 13830 ;;		wreg, status,2, status,0, pclath, cstack
 13831 ;; Tracked objects:
 13832 ;;		On entry : 0/0
 13833 ;;		On exit  : 0/0
 13834 ;;		Unchanged: 0/0
 13835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13836 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13837 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13839 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13840 ;;Total ram usage:       18 bytes
 13841 ;; Hardware stack levels used:    1
 13842 ;; Hardware stack levels required when called:    5
 13843 ;; This function calls:
 13844 ;;		___ftadd
 13845 ;;		___ftdiv
 13846 ;;		___ftmul
 13847 ;;		___ftneg
 13848 ;; This function is called by:
 13849 ;;		_main
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853                           
 13854                           ;psect for function _map
 13855  1AEA                     _map:	
 13856                           
 13857                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13858                           
 13859                           ;incstack = 0
 13860                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13861  1AEA  0021               	movlb	1	; select bank1
 13862  1AEB  0864               	movf	map@in_max^(0+128),w
 13863  1AEC  00C1               	movwf	___ftadd@f1^(0+128)
 13864  1AED  0865               	movf	(map@in_max+1)^(0+128),w
 13865  1AEE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13866  1AEF  0866               	movf	(map@in_max+2)^(0+128),w
 13867  1AF0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13868  1AF1  0861               	movf	map@in_min^(0+128),w
 13869  1AF2  00BE               	movwf	___ftneg@f1^(0+128)
 13870  1AF3  0862               	movf	(map@in_min+1)^(0+128),w
 13871  1AF4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13872  1AF5  0863               	movf	(map@in_min+2)^(0+128),w
 13873  1AF6  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13874  1AF7  31AD  25B2  319A   	fcall	___ftneg
 13875  1AFA  0021               	movlb	1	; select bank1
 13876  1AFB  083E               	movf	?___ftneg^(0+128),w
 13877  1AFC  00C4               	movwf	___ftadd@f2^(0+128)
 13878  1AFD  083F               	movf	(?___ftneg+1)^(0+128),w
 13879  1AFE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13880  1AFF  0840               	movf	(?___ftneg+2)^(0+128),w
 13881  1B00  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13882  1B01  3190  200F  319A   	fcall	___ftadd
 13883  1B04  0021               	movlb	1	; select bank1
 13884  1B05  0841               	movf	?___ftadd^(0+128),w
 13885  1B06  00CE               	movwf	___ftdiv@f2^(0+128)
 13886  1B07  0842               	movf	(?___ftadd+1)^(0+128),w
 13887  1B08  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13888  1B09  0843               	movf	(?___ftadd+2)^(0+128),w
 13889  1B0A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13890  1B0B  086A               	movf	map@out_max^(0+128),w
 13891  1B0C  00C1               	movwf	___ftadd@f1^(0+128)
 13892  1B0D  086B               	movf	(map@out_max+1)^(0+128),w
 13893  1B0E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13894  1B0F  086C               	movf	(map@out_max+2)^(0+128),w
 13895  1B10  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13896  1B11  0867               	movf	map@out_min^(0+128),w
 13897  1B12  00BE               	movwf	___ftneg@f1^(0+128)
 13898  1B13  0868               	movf	(map@out_min+1)^(0+128),w
 13899  1B14  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13900  1B15  0869               	movf	(map@out_min+2)^(0+128),w
 13901  1B16  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13902  1B17  31AD  25B2  319A   	fcall	___ftneg
 13903  1B1A  0021               	movlb	1	; select bank1
 13904  1B1B  083E               	movf	?___ftneg^(0+128),w
 13905  1B1C  00C4               	movwf	___ftadd@f2^(0+128)
 13906  1B1D  083F               	movf	(?___ftneg+1)^(0+128),w
 13907  1B1E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13908  1B1F  0840               	movf	(?___ftneg+2)^(0+128),w
 13909  1B20  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13910  1B21  3190  200F  319A   	fcall	___ftadd
 13911  1B24  0021               	movlb	1	; select bank1
 13912  1B25  0841               	movf	?___ftadd^(0+128),w
 13913  1B26  00AE               	movwf	___ftmul@f1^(0+128)
 13914  1B27  0842               	movf	(?___ftadd+1)^(0+128),w
 13915  1B28  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13916  1B29  0843               	movf	(?___ftadd+2)^(0+128),w
 13917  1B2A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13918  1B2B  085E               	movf	map@x^(0+128),w
 13919  1B2C  00C1               	movwf	___ftadd@f1^(0+128)
 13920  1B2D  085F               	movf	(map@x+1)^(0+128),w
 13921  1B2E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13922  1B2F  0860               	movf	(map@x+2)^(0+128),w
 13923  1B30  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13924  1B31  0861               	movf	map@in_min^(0+128),w
 13925  1B32  00BE               	movwf	___ftneg@f1^(0+128)
 13926  1B33  0862               	movf	(map@in_min+1)^(0+128),w
 13927  1B34  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13928  1B35  0863               	movf	(map@in_min+2)^(0+128),w
 13929  1B36  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13930  1B37  31AD  25B2  319A   	fcall	___ftneg
 13931  1B3A  0021               	movlb	1	; select bank1
 13932  1B3B  083E               	movf	?___ftneg^(0+128),w
 13933  1B3C  00C4               	movwf	___ftadd@f2^(0+128)
 13934  1B3D  083F               	movf	(?___ftneg+1)^(0+128),w
 13935  1B3E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13936  1B3F  0840               	movf	(?___ftneg+2)^(0+128),w
 13937  1B40  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13938  1B41  3190  200F  319A   	fcall	___ftadd
 13939  1B44  0021               	movlb	1	; select bank1
 13940  1B45  0841               	movf	?___ftadd^(0+128),w
 13941  1B46  00B1               	movwf	___ftmul@f2^(0+128)
 13942  1B47  0842               	movf	(?___ftadd+1)^(0+128),w
 13943  1B48  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13944  1B49  0843               	movf	(?___ftadd+2)^(0+128),w
 13945  1B4A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13946  1B4B  3187  273B  319A   	fcall	___ftmul
 13947  1B4E  0021               	movlb	1	; select bank1
 13948  1B4F  082E               	movf	?___ftmul^(0+128),w
 13949  1B50  00D1               	movwf	___ftdiv@f1^(0+128)
 13950  1B51  082F               	movf	(?___ftmul+1)^(0+128),w
 13951  1B52  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13952  1B53  0830               	movf	(?___ftmul+2)^(0+128),w
 13953  1B54  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13954  1B55  319D  2528  319A   	fcall	___ftdiv
 13955  1B58  0021               	movlb	1	; select bank1
 13956  1B59  084E               	movf	?___ftdiv^(0+128),w
 13957  1B5A  00ED               	movwf	_map$2843^(0+128)
 13958  1B5B  084F               	movf	(?___ftdiv+1)^(0+128),w
 13959  1B5C  00EE               	movwf	(_map$2843+1)^(0+128)
 13960  1B5D  0850               	movf	(?___ftdiv+2)^(0+128),w
 13961  1B5E  00EF               	movwf	(_map$2843+2)^(0+128)
 13962                           
 13963                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13964  1B5F  0867               	movf	map@out_min^(0+128),w
 13965  1B60  00C1               	movwf	___ftadd@f1^(0+128)
 13966  1B61  0868               	movf	(map@out_min+1)^(0+128),w
 13967  1B62  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13968  1B63  0869               	movf	(map@out_min+2)^(0+128),w
 13969  1B64  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13970  1B65  086D               	movf	_map$2843^(0+128),w
 13971  1B66  00C4               	movwf	___ftadd@f2^(0+128)
 13972  1B67  086E               	movf	(_map$2843+1)^(0+128),w
 13973  1B68  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13974  1B69  086F               	movf	(_map$2843+2)^(0+128),w
 13975  1B6A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13976  1B6B  3190  200F         	fcall	___ftadd
 13977  1B6D  0021               	movlb	1	; select bank1
 13978  1B6E  0841               	movf	?___ftadd^(0+128),w
 13979  1B6F  00DE               	movwf	?_map^(0+128)
 13980  1B70  0842               	movf	(?___ftadd+1)^(0+128),w
 13981  1B71  00DF               	movwf	(?_map+1)^(0+128)
 13982  1B72  0843               	movf	(?___ftadd+2)^(0+128),w
 13983  1B73  00E0               	movwf	(?_map+2)^(0+128)
 13984  1B74  0008               	return
 13985  1B75                     __end_of_map:	
 13986                           
 13987                           	psect	text35
 13988  07EF                     __ptext35:	
 13989 ;; *************** function _initSwitchBypass *****************
 13990 ;; Defined at:
 13991 ;;		line 29 in file "SwitchBypass.c"
 13992 ;; Parameters:    Size  Location     Type
 13993 ;;		None
 13994 ;; Auto vars:     Size  Location     Type
 13995 ;;  initState       2   26[BANK1 ] int 
 13996 ;; Return value:  Size  Location     Type
 13997 ;;                  1    wreg      void 
 13998 ;; Registers used:
 13999 ;;		wreg, status,2, status,0, pclath, cstack
 14000 ;; Tracked objects:
 14001 ;;		On entry : 0/0
 14002 ;;		On exit  : 0/0
 14003 ;;		Unchanged: 0/0
 14004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14006 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14008 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14009 ;;Total ram usage:        2 bytes
 14010 ;; Hardware stack levels used:    1
 14011 ;; Hardware stack levels required when called:    7
 14012 ;; This function calls:
 14013 ;;		_getSwitchBypassState
 14014 ;;		_setSwitchBypassState
 14015 ;; This function is called by:
 14016 ;;		_main
 14017 ;; This function uses a non-reentrant model
 14018 ;;
 14019                           
 14020                           
 14021                           ;psect for function _initSwitchBypass
 14022  07EF                     _initSwitchBypass:	
 14023                           
 14024                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14025                           
 14026                           ;incstack = 0
 14027                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14028  07EF  31AD  259E  3187   	fcall	_getSwitchBypassState
 14029  07F2  0021               	movlb	1	; select bank1
 14030  07F3  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14031  07F4  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14032  07F5  0820               	movf	?_getSwitchBypassState^(0+128),w
 14033  07F6  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14034                           
 14035                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14036  07F7  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14037  07F8  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14038  07F9  083A               	movf	initSwitchBypass@initState^(0+128),w
 14039  07FA  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14040  07FB  31AE  266C         	fcall	_setSwitchBypassState
 14041  07FD  0008               	return
 14042  07FE                     __end_of_initSwitchBypass:	
 14043                           
 14044                           	psect	text36
 14045  2E6C                     __ptext36:	
 14046 ;; *************** function _setSwitchBypassState *****************
 14047 ;; Defined at:
 14048 ;;		line 140 in file "SwitchBypass.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;  f_state         2   22[BANK1 ] int 
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;		None
 14053 ;; Return value:  Size  Location     Type
 14054 ;;                  1    wreg      void 
 14055 ;; Registers used:
 14056 ;;		wreg, status,2, status,0, pclath, cstack
 14057 ;; Tracked objects:
 14058 ;;		On entry : 0/0
 14059 ;;		On exit  : 0/0
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14062 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14064 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14065 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14066 ;;Total ram usage:        4 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; Hardware stack levels required when called:    6
 14069 ;; This function calls:
 14070 ;;		_setSwitchBypassRelays
 14071 ;; This function is called by:
 14072 ;;		_initSwitchBypass
 14073 ;;		_updateSwitchBypass
 14074 ;; This function uses a non-reentrant model
 14075 ;;
 14076                           
 14077                           
 14078                           ;psect for function _setSwitchBypassState
 14079  2E6C                     _setSwitchBypassState:	
 14080                           
 14081                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 14082                           
 14083                           ;incstack = 0
 14084                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14085  2E6C  0020               	movlb	0	; select bank0
 14086  2E6D  085F               	movf	_switchBypass_state,w
 14087  2E6E  0021               	movlb	1	; select bank1
 14088  2E6F  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14089  2E70  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14090  2E71  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14091  2E72  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14092  2E73  1D03               	skipz
 14093  2E74  2E77               	goto	u8885
 14094  2E75  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14095  2E76  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14096  2E77                     u8885:	
 14097  2E77  1903               	btfsc	3,2
 14098  2E78  0008               	return
 14099                           
 14100                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 14101  2E79  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14102  2E7A  0022               	movlb	2	; select bank2
 14103  2E7B  1C03               	skipc
 14104  2E7C  110D               	bcf	13,2	;volatile
 14105  2E7D  1803               	skipnc
 14106  2E7E  150D               	bsf	13,2	;volatile
 14107                           
 14108                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 14109  2E7F  118D               	bcf	13,3	;volatile
 14110                           
 14111                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 14112  2E80  0021               	movlb	1	; select bank1
 14113  2E81  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14114  2E82  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14115  2E83  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14116  2E84  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14117  2E85  31A0  20E5         	fcall	_setSwitchBypassRelays
 14118  2E87  0008               	return
 14119  2E88                     __end_of_setSwitchBypassState:	
 14120                           
 14121                           	psect	text37
 14122  20E5                     __ptext37:	
 14123 ;; *************** function _setSwitchBypassRelays *****************
 14124 ;; Defined at:
 14125 ;;		line 148 in file "SwitchBypass.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;  f_state         2   18[BANK1 ] int 
 14128 ;; Auto vars:     Size  Location     Type
 14129 ;;		None
 14130 ;; Return value:  Size  Location     Type
 14131 ;;                  1    wreg      void 
 14132 ;; Registers used:
 14133 ;;		wreg, status,2, status,0, pclath, cstack
 14134 ;; Tracked objects:
 14135 ;;		On entry : 0/0
 14136 ;;		On exit  : 0/0
 14137 ;;		Unchanged: 0/0
 14138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14139 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14141 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14142 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14143 ;;Total ram usage:        4 bytes
 14144 ;; Hardware stack levels used:    1
 14145 ;; Hardware stack levels required when called:    5
 14146 ;; This function calls:
 14147 ;;		_updateSwitchBypassState
 14148 ;;		_wait_ms
 14149 ;; This function is called by:
 14150 ;;		_updateSwitchBypass
 14151 ;;		_setSwitchBypassState
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           
 14156                           ;psect for function _setSwitchBypassRelays
 14157  20E5                     _setSwitchBypassRelays:	
 14158                           
 14159                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 14160                           
 14161                           ;incstack = 0
 14162                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14163  20E5  0021               	movlb	1	; select bank1
 14164  20E6  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14165  20E7  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14166  20E8  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14167  20E9  0020               	movlb	0	; select bank0
 14168  20EA  00DF               	movwf	_switchBypass_state
 14169                           
 14170                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 14171  20EB  0021               	movlb	1	; select bank1
 14172  20EC  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14173  20ED  0027               	movlb	7	; select bank7
 14174  20EE  1C03               	skipc
 14175  20EF  110D               	bcf	13,2	;volatile
 14176  20F0  1803               	skipnc
 14177  20F1  150D               	bsf	13,2	;volatile
 14178                           
 14179                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 14180  20F2  0021               	movlb	1	; select bank1
 14181  20F3  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14182  20F4  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14183  20F5  1D03               	btfss	3,2
 14184  20F6  28FA               	goto	u8580
 14185  20F7  0027               	movlb	7	; select bank7
 14186  20F8  148D               	bsf	13,1	;volatile
 14187  20F9  28FC               	goto	l8192
 14188  20FA                     u8580:	
 14189  20FA  0027               	movlb	7	; select bank7
 14190  20FB  108D               	bcf	13,1	;volatile
 14191  20FC                     l8192:	
 14192                           
 14193                           ;SwitchBypass.c: 153: wait_ms(20);
 14194  20FC  3014               	movlw	20
 14195  20FD  0021               	movlb	1	; select bank1
 14196  20FE  00AC               	movwf	wait_ms@timeSec^(0+128)
 14197  20FF  3000               	movlw	0
 14198  2100  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14199  2101  31A0  20B3  31A0   	fcall	_wait_ms
 14200                           
 14201                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 14202  2104  0027               	movlb	7	; select bank7
 14203  2105  110D               	bcf	13,2	;volatile
 14204                           
 14205                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 14206  2106  108D               	bcf	13,1	;volatile
 14207                           
 14208                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 14209  2107  0020               	movlb	0	; select bank0
 14210  2108  085F               	movf	_switchBypass_state,w
 14211  2109  0021               	movlb	1	; select bank1
 14212  210A  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14213  210B  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14214  210C  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14215  210D  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14216  210E  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14217  210F  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14218  2110  3180  2002  31A0   	fcall	_updateSwitchBypassState
 14219                           
 14220                           ;SwitchBypass.c: 159: wait_ms(20);
 14221  2113  3014               	movlw	20
 14222  2114  0021               	movlb	1	; select bank1
 14223  2115  00AC               	movwf	wait_ms@timeSec^(0+128)
 14224  2116  3000               	movlw	0
 14225  2117  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14226  2118  31A0  20B3         	fcall	_wait_ms
 14227  211A  0008               	return
 14228  211B                     __end_of_setSwitchBypassRelays:	
 14229                           
 14230                           	psect	text38
 14231  20B3                     __ptext38:	
 14232 ;; *************** function _wait_ms *****************
 14233 ;; Defined at:
 14234 ;;		line 23 in file "system.c"
 14235 ;; Parameters:    Size  Location     Type
 14236 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14237 ;; Auto vars:     Size  Location     Type
 14238 ;;  timemsl         4   14[BANK1 ] long 
 14239 ;; Return value:  Size  Location     Type
 14240 ;;                  1    wreg      void 
 14241 ;; Registers used:
 14242 ;;		wreg, status,2, status,0, pclath, cstack
 14243 ;; Tracked objects:
 14244 ;;		On entry : 0/0
 14245 ;;		On exit  : 0/0
 14246 ;;		Unchanged: 0/0
 14247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14248 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14249 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14251 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14252 ;;Total ram usage:        6 bytes
 14253 ;; Hardware stack levels used:    1
 14254 ;; Hardware stack levels required when called:    4
 14255 ;; This function calls:
 14256 ;;		___lmul
 14257 ;; This function is called by:
 14258 ;;		_ring_tactiles
 14259 ;;		_solidring_tactiles
 14260 ;;		_read_bottom_tactile
 14261 ;;		_read_top_tactile
 14262 ;;		_setSwitchBypassRelays
 14263 ;;		_setDoublePressState
 14264 ;;		_showError_Alternating
 14265 ;;		_show_error
 14266 ;;		_show_cancel
 14267 ;;		_star_tactiles
 14268 ;;		_initExpModeState
 14269 ;; This function uses a non-reentrant model
 14270 ;;
 14271                           
 14272                           
 14273                           ;psect for function _wait_ms
 14274  20B3                     _wait_ms:	
 14275                           
 14276                           ;system.c: 25: long timemsl = 0;
 14277                           
 14278                           ;incstack = 0
 14279                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14280  20B3  3000               	movlw	0
 14281  20B4  0021               	movlb	1	; select bank1
 14282  20B5  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14283  20B6  3000               	movlw	0
 14284  20B7  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14285  20B8  3000               	movlw	0
 14286  20B9  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14287  20BA  3000               	movlw	0
 14288  20BB  00AE               	movwf	wait_ms@timemsl^(0+128)
 14289                           
 14290                           ;system.c: 26: timemsl = timeSec * 1000l;
 14291  20BC  082C               	movf	wait_ms@timeSec^(0+128),w
 14292  20BD  00A0               	movwf	___lmul@multiplier^(0+128)
 14293  20BE  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14294  20BF  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14295  20C0  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14296  20C1  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14297  20C2  3000               	movlw	0
 14298  20C3  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14299  20C4  3000               	movlw	0
 14300  20C5  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14301  20C6  3003               	movlw	3
 14302  20C7  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14303  20C8  30E8               	movlw	232
 14304  20C9  00A4               	movwf	___lmul@multiplicand^(0+128)
 14305  20CA  31A0  2083  31A0   	fcall	___lmul
 14306  20CD  0021               	movlb	1	; select bank1
 14307  20CE  0823               	movf	(?___lmul+3)^(0+128),w
 14308  20CF  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14309  20D0  0822               	movf	(?___lmul+2)^(0+128),w
 14310  20D1  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14311  20D2  0821               	movf	(?___lmul+1)^(0+128),w
 14312  20D3  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14313  20D4  0820               	movf	?___lmul^(0+128),w
 14314  20D5  00AE               	movwf	wait_ms@timemsl^(0+128)
 14315  20D6                     l384:	
 14316                           ;system.c: 27: for( ; timemsl; timemsl--);
 14317                           
 14318  20D6  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14319  20D7  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14320  20D8  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14321  20D9  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14322  20DA  1903               	btfsc	3,2
 14323  20DB  0008               	return
 14324  20DC  30FF               	movlw	255
 14325  20DD  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14326  20DE  30FF               	movlw	255
 14327  20DF  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14328  20E0  30FF               	movlw	255
 14329  20E1  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14330  20E2  30FF               	movlw	255
 14331  20E3  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14332  20E4  28D6               	goto	l384
 14333  20E5                     __end_of_wait_ms:	
 14334                           
 14335                           	psect	text39
 14336  2083                     __ptext39:	
 14337 ;; *************** function ___lmul *****************
 14338 ;; Defined at:
 14339 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14340 ;; Parameters:    Size  Location     Type
 14341 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14342 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14343 ;; Auto vars:     Size  Location     Type
 14344 ;;  product         4    8[BANK1 ] unsigned long 
 14345 ;; Return value:  Size  Location     Type
 14346 ;;                  4    0[BANK1 ] unsigned long 
 14347 ;; Registers used:
 14348 ;;		wreg, status,2, status,0
 14349 ;; Tracked objects:
 14350 ;;		On entry : 0/0
 14351 ;;		On exit  : 0/0
 14352 ;;		Unchanged: 0/0
 14353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14354 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14355 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14357 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14358 ;;Total ram usage:       12 bytes
 14359 ;; Hardware stack levels used:    1
 14360 ;; Hardware stack levels required when called:    3
 14361 ;; This function calls:
 14362 ;;		Nothing
 14363 ;; This function is called by:
 14364 ;;		_wait_ms
 14365 ;; This function uses a non-reentrant model
 14366 ;;
 14367                           
 14368                           
 14369                           ;psect for function ___lmul
 14370  2083                     ___lmul:	
 14371                           
 14372                           ;incstack = 0
 14373                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14374  2083  3000               	movlw	0
 14375  2084  0021               	movlb	1	; select bank1
 14376  2085  00AB               	movwf	(___lmul@product+3)^(0+128)
 14377  2086  3000               	movlw	0
 14378  2087  00AA               	movwf	(___lmul@product+2)^(0+128)
 14379  2088  3000               	movlw	0
 14380  2089  00A9               	movwf	(___lmul@product+1)^(0+128)
 14381  208A  3000               	movlw	0
 14382  208B  00A8               	movwf	___lmul@product^(0+128)
 14383  208C                     l7638:	
 14384  208C  1C20               	btfss	___lmul@multiplier^(0+128),0
 14385  208D  2896               	goto	l7642
 14386  208E  0824               	movf	___lmul@multiplicand^(0+128),w
 14387  208F  07A8               	addwf	___lmul@product^(0+128),f
 14388  2090  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14389  2091  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14390  2092  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14391  2093  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14392  2094  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14393  2095  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14394  2096                     l7642:	
 14395  2096  3001               	movlw	1
 14396  2097                     u7615:	
 14397  2097  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14398  2098  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14399  2099  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14400  209A  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14401  209B  0B89               	decfsz	9,f
 14402  209C  2897               	goto	u7615
 14403  209D  3001               	movlw	1
 14404  209E                     u7625:	
 14405  209E  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14406  209F  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14407  20A0  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14408  20A1  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14409  20A2  0B89               	decfsz	9,f
 14410  20A3  289E               	goto	u7625
 14411  20A4  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14412  20A5  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14413  20A6  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14414  20A7  0420               	iorwf	___lmul@multiplier^(0+128),w
 14415  20A8  1D03               	skipz
 14416  20A9  288C               	goto	l7638
 14417  20AA  082B               	movf	(___lmul@product+3)^(0+128),w
 14418  20AB  00A3               	movwf	(?___lmul+3)^(0+128)
 14419  20AC  082A               	movf	(___lmul@product+2)^(0+128),w
 14420  20AD  00A2               	movwf	(?___lmul+2)^(0+128)
 14421  20AE  0829               	movf	(___lmul@product+1)^(0+128),w
 14422  20AF  00A1               	movwf	(?___lmul+1)^(0+128)
 14423  20B0  0828               	movf	___lmul@product^(0+128),w
 14424  20B1  00A0               	movwf	?___lmul^(0+128)
 14425  20B2  0008               	return
 14426  20B3                     __end_of___lmul:	
 14427                           
 14428                           	psect	text40
 14429  0002                     __ptext40:	
 14430 ;; *************** function _updateSwitchBypassState *****************
 14431 ;; Defined at:
 14432 ;;		line 96 in file "state_manager.c"
 14433 ;; Parameters:    Size  Location     Type
 14434 ;;  state           2    0[BANK1 ] int 
 14435 ;; Auto vars:     Size  Location     Type
 14436 ;;		None
 14437 ;; Return value:  Size  Location     Type
 14438 ;;                  1    wreg      void 
 14439 ;; Registers used:
 14440 ;;		None
 14441 ;; Tracked objects:
 14442 ;;		On entry : 0/0
 14443 ;;		On exit  : 0/0
 14444 ;;		Unchanged: 0/0
 14445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14446 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14449 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14450 ;;Total ram usage:        2 bytes
 14451 ;; Hardware stack levels used:    1
 14452 ;; Hardware stack levels required when called:    3
 14453 ;; This function calls:
 14454 ;;		Nothing
 14455 ;; This function is called by:
 14456 ;;		_setSwitchBypassRelays
 14457 ;; This function uses a non-reentrant model
 14458 ;;
 14459                           
 14460                           
 14461                           ;psect for function _updateSwitchBypassState
 14462  0002                     _updateSwitchBypassState:	
 14463                           
 14464                           ;incstack = 0
 14465                           ; Regs used in _updateSwitchBypassState: []
 14466  0002  0008               	return
 14467  0003                     __end_of_updateSwitchBypassState:	
 14468                           
 14469                           	psect	text41
 14470  2D9E                     __ptext41:	
 14471 ;; *************** function _getSwitchBypassState *****************
 14472 ;; Defined at:
 14473 ;;		line 103 in file "state_manager.c"
 14474 ;; Parameters:    Size  Location     Type
 14475 ;;		None
 14476 ;; Auto vars:     Size  Location     Type
 14477 ;;		None
 14478 ;; Return value:  Size  Location     Type
 14479 ;;                  2    0[BANK1 ] int 
 14480 ;; Registers used:
 14481 ;;		status,2
 14482 ;; Tracked objects:
 14483 ;;		On entry : 0/0
 14484 ;;		On exit  : 0/0
 14485 ;;		Unchanged: 0/0
 14486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14487 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14490 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14491 ;;Total ram usage:        2 bytes
 14492 ;; Hardware stack levels used:    1
 14493 ;; Hardware stack levels required when called:    3
 14494 ;; This function calls:
 14495 ;;		Nothing
 14496 ;; This function is called by:
 14497 ;;		_initSwitchBypass
 14498 ;; This function uses a non-reentrant model
 14499 ;;
 14500                           
 14501                           
 14502                           ;psect for function _getSwitchBypassState
 14503  2D9E                     _getSwitchBypassState:	
 14504                           
 14505                           ;state_manager.c: 108: return 0;
 14506                           
 14507                           ;incstack = 0
 14508                           ; Regs used in _getSwitchBypassState: [status,2]
 14509  2D9E  0021               	movlb	1	; select bank1
 14510  2D9F  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14511  2DA0  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14512  2DA1  0008               	return
 14513  2DA2                     __end_of_getSwitchBypassState:	
 14514                           
 14515                           	psect	text42
 14516  2590                     __ptext42:	
 14517 ;; *************** function _getModulationDelayTime *****************
 14518 ;; Defined at:
 14519 ;;		line 35 in file "modulation.c"
 14520 ;; Parameters:    Size  Location     Type
 14521 ;;		None
 14522 ;; Auto vars:     Size  Location     Type
 14523 ;;  subDiv          2   14[BANK2 ] int 
 14524 ;; Return value:  Size  Location     Type
 14525 ;;                  1    wreg      void 
 14526 ;; Registers used:
 14527 ;;		wreg, status,2, status,0, pclath, cstack
 14528 ;; Tracked objects:
 14529 ;;		On entry : 0/0
 14530 ;;		On exit  : 0/0
 14531 ;;		Unchanged: 0/0
 14532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14534 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14536 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14537 ;;Total ram usage:        2 bytes
 14538 ;; Hardware stack levels used:    1
 14539 ;; Hardware stack levels required when called:    5
 14540 ;; This function calls:
 14541 ;;		___altoft
 14542 ;;		___awtoft
 14543 ;;		___ftdiv
 14544 ;;		___fttol
 14545 ;;		_getModulationSubdivision
 14546 ;; This function is called by:
 14547 ;;		_main
 14548 ;; This function uses a non-reentrant model
 14549 ;;
 14550                           
 14551                           
 14552                           ;psect for function _getModulationDelayTime
 14553  2590                     _getModulationDelayTime:	
 14554                           
 14555                           ;modulation.c: 36: adjust_mod_delay = 0;
 14556                           
 14557                           ;incstack = 0
 14558                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14559  2590  0023               	movlb	3	; select bank3
 14560  2591  01BA               	clrf	_adjust_mod_delay^(0+384)
 14561                           
 14562                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14563  2592  31A0  2053  31A5   	fcall	_getModulationSubdivision
 14564  2595  0021               	movlb	1	; select bank1
 14565  2596  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14566  2597  0022               	movlb	2	; select bank2
 14567  2598  00AF               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14568  2599  0021               	movlb	1	; select bank1
 14569  259A  0820               	movf	?_getModulationSubdivision^(0+128),w
 14570  259B  0022               	movlb	2	; select bank2
 14571  259C  00AE               	movwf	getModulationDelayTime@subDiv^(0+256)
 14572                           
 14573                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14574  259D  0020               	movlb	0	; select bank0
 14575  259E  0855               	movf	_delay_time+3,w	;volatile
 14576  259F  0021               	movlb	1	; select bank1
 14577  25A0  00AB               	movwf	(___altoft@c+3)^(0+128)
 14578  25A1  0020               	movlb	0	; select bank0
 14579  25A2  0854               	movf	_delay_time+2,w	;volatile
 14580  25A3  0021               	movlb	1	; select bank1
 14581  25A4  00AA               	movwf	(___altoft@c+2)^(0+128)
 14582  25A5  0020               	movlb	0	; select bank0
 14583  25A6  0853               	movf	_delay_time+1,w	;volatile
 14584  25A7  0021               	movlb	1	; select bank1
 14585  25A8  00A9               	movwf	(___altoft@c+1)^(0+128)
 14586  25A9  0020               	movlb	0	; select bank0
 14587  25AA  0852               	movf	_delay_time,w	;volatile
 14588  25AB  0021               	movlb	1	; select bank1
 14589  25AC  00A8               	movwf	___altoft@c^(0+128)
 14590  25AD  31A2  2204  31A5   	fcall	___altoft
 14591  25B0  0021               	movlb	1	; select bank1
 14592  25B1  0828               	movf	?___altoft^(0+128),w
 14593  25B2  00D1               	movwf	___ftdiv@f1^(0+128)
 14594  25B3  0829               	movf	(?___altoft+1)^(0+128),w
 14595  25B4  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14596  25B5  082A               	movf	(?___altoft+2)^(0+128),w
 14597  25B6  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14598  25B7  0022               	movlb	2	; select bank2
 14599  25B8  082F               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14600  25B9  0021               	movlb	1	; select bank1
 14601  25BA  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14602  25BB  0022               	movlb	2	; select bank2
 14603  25BC  082E               	movf	getModulationDelayTime@subDiv^(0+256),w
 14604  25BD  0021               	movlb	1	; select bank1
 14605  25BE  00A8               	movwf	___awtoft@c^(0+128)
 14606  25BF  31AF  2705  31A5   	fcall	___awtoft
 14607  25C2  0021               	movlb	1	; select bank1
 14608  25C3  0828               	movf	?___awtoft^(0+128),w
 14609  25C4  00CE               	movwf	___ftdiv@f2^(0+128)
 14610  25C5  0829               	movf	(?___awtoft+1)^(0+128),w
 14611  25C6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14612  25C7  082A               	movf	(?___awtoft+2)^(0+128),w
 14613  25C8  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14614  25C9  319D  2528  31A5   	fcall	___ftdiv
 14615  25CC  0021               	movlb	1	; select bank1
 14616  25CD  084E               	movf	?___ftdiv^(0+128),w
 14617  25CE  0022               	movlb	2	; select bank2
 14618  25CF  00A0               	movwf	___fttol@f1^(0+256)
 14619  25D0  0021               	movlb	1	; select bank1
 14620  25D1  084F               	movf	(?___ftdiv+1)^(0+128),w
 14621  25D2  0022               	movlb	2	; select bank2
 14622  25D3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14623  25D4  0021               	movlb	1	; select bank1
 14624  25D5  0850               	movf	(?___ftdiv+2)^(0+128),w
 14625  25D6  0022               	movlb	2	; select bank2
 14626  25D7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14627  25D8  319A  2263         	fcall	___fttol
 14628  25DA  0022               	movlb	2	; select bank2
 14629  25DB  0821               	movf	(?___fttol^(0+256)+1),w
 14630  25DC  0023               	movlb	3	; select bank3
 14631  25DD  00DA               	movwf	(_mod_delay_time+1)^(0+384)
 14632  25DE  0022               	movlb	2	; select bank2
 14633  25DF  0820               	movf	?___fttol^(0+256),w
 14634  25E0  0023               	movlb	3	; select bank3
 14635  25E1  00D9               	movwf	_mod_delay_time^(0+384)
 14636  25E2  0008               	return
 14637  25E3                     __end_of_getModulationDelayTime:	
 14638                           
 14639                           	psect	text43
 14640  2053                     __ptext43:	
 14641 ;; *************** function _getModulationSubdivision *****************
 14642 ;; Defined at:
 14643 ;;		line 26 in file "modulation.c"
 14644 ;; Parameters:    Size  Location     Type
 14645 ;;		None
 14646 ;; Auto vars:     Size  Location     Type
 14647 ;;		None
 14648 ;; Return value:  Size  Location     Type
 14649 ;;                  2    0[BANK1 ] int 
 14650 ;; Registers used:
 14651 ;;		wreg, status,2, status,0
 14652 ;; Tracked objects:
 14653 ;;		On entry : 0/0
 14654 ;;		On exit  : 0/0
 14655 ;;		Unchanged: 0/0
 14656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14657 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14660 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14661 ;;Total ram usage:        2 bytes
 14662 ;; Hardware stack levels used:    1
 14663 ;; Hardware stack levels required when called:    3
 14664 ;; This function calls:
 14665 ;;		Nothing
 14666 ;; This function is called by:
 14667 ;;		_getModulationDelayTime
 14668 ;;		_updateModulationArray
 14669 ;; This function uses a non-reentrant model
 14670 ;;
 14671                           
 14672                           
 14673                           ;psect for function _getModulationSubdivision
 14674  2053                     _getModulationSubdivision:	
 14675                           
 14676                           ;modulation.c: 27: if (delay_time >= 2400) {
 14677                           
 14678                           ;incstack = 0
 14679                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14680  2053  0020               	movlb	0	; select bank0
 14681  2054  1BD5               	btfsc	_delay_time+3,7	;volatile
 14682  2055  2868               	goto	l8356
 14683  2056  0855               	movf	_delay_time+3,w	;volatile
 14684  2057  1D03               	btfss	3,2
 14685  2058  2862               	goto	l8350
 14686  2059  0854               	movf	_delay_time+2,w	;volatile
 14687  205A  1D03               	btfss	3,2
 14688  205B  2862               	goto	l8350
 14689  205C  3060               	movlw	96
 14690  205D  0252               	subwf	_delay_time,w	;volatile
 14691  205E  3009               	movlw	9
 14692  205F  3B53               	subwfb	_delay_time+1,w	;volatile
 14693  2060  1C03               	btfss	3,0
 14694  2061  2868               	goto	l8356
 14695  2062                     l8350:	
 14696                           
 14697                           ;modulation.c: 28: return 120;
 14698  2062  3078               	movlw	120
 14699  2063  0021               	movlb	1	; select bank1
 14700  2064  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14701  2065  3000               	movlw	0
 14702  2066  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14703                           
 14704                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14705  2067  0008               	return
 14706  2068                     l8356:	
 14707  2068  0020               	movlb	0	; select bank0
 14708  2069  1BD5               	btfsc	_delay_time+3,7	;volatile
 14709  206A  287D               	goto	l8364
 14710  206B  0855               	movf	_delay_time+3,w	;volatile
 14711  206C  1D03               	btfss	3,2
 14712  206D  2877               	goto	l8358
 14713  206E  0854               	movf	_delay_time+2,w	;volatile
 14714  206F  1D03               	btfss	3,2
 14715  2070  2877               	goto	l8358
 14716  2071  3058               	movlw	88
 14717  2072  0252               	subwf	_delay_time,w	;volatile
 14718  2073  3002               	movlw	2
 14719  2074  3B53               	subwfb	_delay_time+1,w	;volatile
 14720  2075  1C03               	btfss	3,0
 14721  2076  287D               	goto	l8364
 14722  2077                     l8358:	
 14723                           
 14724                           ;modulation.c: 30: return 60;
 14725  2077  303C               	movlw	60
 14726  2078  0021               	movlb	1	; select bank1
 14727  2079  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14728  207A  3000               	movlw	0
 14729  207B  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14730                           
 14731                           ;modulation.c: 31: } else {
 14732  207C  0008               	return
 14733  207D                     l8364:	
 14734                           
 14735                           ;modulation.c: 32: return 30;
 14736  207D  301E               	movlw	30
 14737  207E  0021               	movlb	1	; select bank1
 14738  207F  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14739  2080  3000               	movlw	0
 14740  2081  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14741  2082  0008               	return
 14742  2083                     __end_of_getModulationSubdivision:	
 14743                           
 14744                           	psect	text44
 14745  1859                     __ptext44:	
 14746 ;; *************** function _calcCosArray *****************
 14747 ;; Defined at:
 14748 ;;		line 18 in file "modulation.c"
 14749 ;; Parameters:    Size  Location     Type
 14750 ;;		None
 14751 ;; Auto vars:     Size  Location     Type
 14752 ;;  tmpVal          3   54[BANK2 ] int 
 14753 ;;  iAngle          1   57[BANK2 ] unsigned char 
 14754 ;; Return value:  Size  Location     Type
 14755 ;;                  1    wreg      void 
 14756 ;; Registers used:
 14757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14758 ;; Tracked objects:
 14759 ;;		On entry : 0/0
 14760 ;;		On exit  : 0/0
 14761 ;;		Unchanged: 0/0
 14762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14764 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14765 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14766 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14767 ;;Total ram usage:        8 bytes
 14768 ;; Hardware stack levels used:    1
 14769 ;; Hardware stack levels required when called:    8
 14770 ;; This function calls:
 14771 ;;		___awtoft
 14772 ;;		___ftdiv
 14773 ;;		___ftmul
 14774 ;;		___wmul
 14775 ;;		_cos
 14776 ;; This function is called by:
 14777 ;;		_main
 14778 ;; This function uses a non-reentrant model
 14779 ;;
 14780                           
 14781                           
 14782                           ;psect for function _calcCosArray
 14783  1859                     _calcCosArray:	
 14784                           
 14785                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14786                           
 14787                           ;incstack = 0
 14788                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14789  1859  0022               	movlb	2	; select bank2
 14790  185A  01D9               	clrf	calcCosArray@iAngle^(0+256)
 14791  185B                     L17:	
 14792  185B  3078               	movlw	120
 14793  185C  0259               	subwf	calcCosArray@iAngle^(0+256),w
 14794  185D  1803               	btfsc	3,0
 14795  185E  0008               	return
 14796                           
 14797                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14798  185F  3000               	movlw	0
 14799  1860  0021               	movlb	1	; select bank1
 14800  1861  00CE               	movwf	___ftdiv@f2^(0+128)
 14801  1862  3034               	movlw	52
 14802  1863  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14803  1864  3043               	movlw	67
 14804  1865  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14805  1866  3010               	movlw	16
 14806  1867  00AE               	movwf	___ftmul@f1^(0+128)
 14807  1868  3049               	movlw	73
 14808  1869  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14809  186A  3040               	movlw	64
 14810  186B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14811  186C  0022               	movlb	2	; select bank2
 14812  186D  0859               	movf	calcCosArray@iAngle^(0+256),w
 14813  186E  00D2               	movwf	??_calcCosArray^(0+256)
 14814  186F  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 14815  1870  0852               	movf	??_calcCosArray^(0+256),w
 14816  1871  00AE               	movwf	___wmul@multiplier^(0+256)
 14817  1872  0853               	movf	(??_calcCosArray+1)^(0+256),w
 14818  1873  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14819  1874  3003               	movlw	3
 14820  1875  00B0               	movwf	___wmul@multiplicand^(0+256)
 14821  1876  3000               	movlw	0
 14822  1877  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14823  1878  31AE  2650  3198   	fcall	___wmul
 14824  187B  0022               	movlb	2	; select bank2
 14825  187C  082F               	movf	(?___wmul+1)^(0+256),w
 14826  187D  0021               	movlb	1	; select bank1
 14827  187E  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14828  187F  0022               	movlb	2	; select bank2
 14829  1880  082E               	movf	?___wmul^(0+256),w
 14830  1881  0021               	movlb	1	; select bank1
 14831  1882  00A8               	movwf	___awtoft@c^(0+128)
 14832  1883  31AF  2705  3198   	fcall	___awtoft
 14833  1886  0021               	movlb	1	; select bank1
 14834  1887  0828               	movf	?___awtoft^(0+128),w
 14835  1888  00B1               	movwf	___ftmul@f2^(0+128)
 14836  1889  0829               	movf	(?___awtoft+1)^(0+128),w
 14837  188A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14838  188B  082A               	movf	(?___awtoft+2)^(0+128),w
 14839  188C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14840  188D  3187  273B  3198   	fcall	___ftmul
 14841  1890  0021               	movlb	1	; select bank1
 14842  1891  082E               	movf	?___ftmul^(0+128),w
 14843  1892  00D1               	movwf	___ftdiv@f1^(0+128)
 14844  1893  082F               	movf	(?___ftmul+1)^(0+128),w
 14845  1894  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14846  1895  0830               	movf	(?___ftmul+2)^(0+128),w
 14847  1896  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14848  1897  319D  2528  3198   	fcall	___ftdiv
 14849  189A  0021               	movlb	1	; select bank1
 14850  189B  084E               	movf	?___ftdiv^(0+128),w
 14851  189C  0022               	movlb	2	; select bank2
 14852  189D  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 14853  189E  0021               	movlb	1	; select bank1
 14854  189F  084F               	movf	(?___ftdiv+1)^(0+128),w
 14855  18A0  0022               	movlb	2	; select bank2
 14856  18A1  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 14857  18A2  0021               	movlb	1	; select bank1
 14858  18A3  0850               	movf	(?___ftdiv+2)^(0+128),w
 14859  18A4  0022               	movlb	2	; select bank2
 14860  18A5  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 14861                           
 14862                           ;modulation.c: 21: tmpVal = cos(tmpVal);
 14863  18A6  0856               	movf	calcCosArray@tmpVal^(0+256),w
 14864  18A7  00CC               	movwf	cos@f^(0+256)
 14865  18A8  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 14866  18A9  00CD               	movwf	(cos@f+1)^(0+256)
 14867  18AA  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 14868  18AB  00CE               	movwf	(cos@f+2)^(0+256)
 14869  18AC  31A7  2784  3198   	fcall	_cos
 14870  18AF  0022               	movlb	2	; select bank2
 14871  18B0  084C               	movf	?_cos^(0+256),w
 14872  18B1  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 14873  18B2  084D               	movf	(?_cos+1)^(0+256),w
 14874  18B3  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 14875  18B4  084E               	movf	(?_cos+2)^(0+256),w
 14876  18B5  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 14877                           
 14878                           ;modulation.c: 22: cosArray[iAngle] = tmpVal;
 14879  18B6  0859               	movf	calcCosArray@iAngle^(0+256),w
 14880  18B7  00D2               	movwf	??_calcCosArray^(0+256)
 14881  18B8  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 14882  18B9  0852               	movf	??_calcCosArray^(0+256),w
 14883  18BA  00AE               	movwf	___wmul@multiplier^(0+256)
 14884  18BB  0853               	movf	(??_calcCosArray+1)^(0+256),w
 14885  18BC  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14886  18BD  3003               	movlw	3
 14887  18BE  00B0               	movwf	___wmul@multiplicand^(0+256)
 14888  18BF  3000               	movlw	0
 14889  18C0  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14890  18C1  31AE  2650  3198   	fcall	___wmul
 14891  18C4  3082               	movlw	130
 14892  18C5  0022               	movlb	2	; select bank2
 14893  18C6  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 14894  18C7  3024               	movlw	36
 14895  18C8  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 14896  18C9  082E               	movf	?___wmul^(0+256),w
 14897  18CA  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 14898  18CB  0086               	movwf	6
 14899  18CC  082F               	movf	(?___wmul+1)^(0+256),w
 14900  18CD  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 14901  18CE  0087               	movwf	7
 14902  18CF  0856               	movf	calcCosArray@tmpVal^(0+256),w
 14903  18D0  3FC0               	movwi [0]fsr1
 14904  18D1  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 14905  18D2  3FC1               	movwi [1]fsr1
 14906  18D3  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 14907  18D4  3FC2               	movwi [2]fsr1
 14908  18D5  3001               	movlw	1
 14909  18D6  00D2               	movwf	??_calcCosArray^(0+256)
 14910  18D7  0852               	movf	??_calcCosArray^(0+256),w
 14911  18D8  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 14912  18D9  285B               	goto	L17
 14913  18DA                     __end_of_calcCosArray:	
 14914                           
 14915                           	psect	text45
 14916  2784                     __ptext45:	
 14917 ;; *************** function _cos *****************
 14918 ;; Defined at:
 14919 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 14920 ;; Parameters:    Size  Location     Type
 14921 ;;  f               3   44[BANK2 ] void 
 14922 ;; Auto vars:     Size  Location     Type
 14923 ;;		None
 14924 ;; Return value:  Size  Location     Type
 14925 ;;                  3   44[BANK2 ] void 
 14926 ;; Registers used:
 14927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14928 ;; Tracked objects:
 14929 ;;		On entry : 0/0
 14930 ;;		On exit  : 0/0
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14933 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14934 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14936 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14937 ;;Total ram usage:        6 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; Hardware stack levels required when called:    7
 14940 ;; This function calls:
 14941 ;;		___ftadd
 14942 ;;		___ftge
 14943 ;;		_sin
 14944 ;; This function is called by:
 14945 ;;		_calcCosArray
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           
 14950                           ;psect for function _cos
 14951  2784                     _cos:	
 14952                           
 14953                           ;incstack = 0
 14954                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14955  2784  3010               	movlw	16
 14956  2785  0021               	movlb	1	; select bank1
 14957  2786  00A0               	movwf	___ftge@ff1^(0+128)
 14958  2787  3049               	movlw	73
 14959  2788  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14960  2789  3040               	movlw	64
 14961  278A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14962  278B  0022               	movlb	2	; select bank2
 14963  278C  084C               	movf	cos@f^(0+256),w
 14964  278D  0021               	movlb	1	; select bank1
 14965  278E  00A3               	movwf	___ftge@ff2^(0+128)
 14966  278F  0022               	movlb	2	; select bank2
 14967  2790  084D               	movf	(cos@f+1)^(0+256),w
 14968  2791  0021               	movlb	1	; select bank1
 14969  2792  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14970  2793  0022               	movlb	2	; select bank2
 14971  2794  084E               	movf	(cos@f+2)^(0+256),w
 14972  2795  0021               	movlb	1	; select bank1
 14973  2796  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14974  2797  31A1  21C8  31A7   	fcall	___ftge
 14975  279A  1803               	btfsc	3,0
 14976  279B  2FCE               	goto	l8526
 14977  279C  30CC               	movlw	204
 14978  279D  0021               	movlb	1	; select bank1
 14979  279E  00C1               	movwf	___ftadd@f1^(0+128)
 14980  279F  3096               	movlw	150
 14981  27A0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14982  27A1  30C0               	movlw	192
 14983  27A2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14984  27A3  0022               	movlb	2	; select bank2
 14985  27A4  084C               	movf	cos@f^(0+256),w
 14986  27A5  0021               	movlb	1	; select bank1
 14987  27A6  00C4               	movwf	___ftadd@f2^(0+128)
 14988  27A7  0022               	movlb	2	; select bank2
 14989  27A8  084D               	movf	(cos@f+1)^(0+256),w
 14990  27A9  0021               	movlb	1	; select bank1
 14991  27AA  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14992  27AB  0022               	movlb	2	; select bank2
 14993  27AC  084E               	movf	(cos@f+2)^(0+256),w
 14994  27AD  0021               	movlb	1	; select bank1
 14995  27AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14996  27AF  3190  200F  31A7   	fcall	___ftadd
 14997  27B2  0021               	movlb	1	; select bank1
 14998  27B3  0841               	movf	?___ftadd^(0+128),w
 14999  27B4  0022               	movlb	2	; select bank2
 15000  27B5  00CF               	movwf	_cos$2858^(0+256)
 15001  27B6  0021               	movlb	1	; select bank1
 15002  27B7  0842               	movf	(?___ftadd+1)^(0+128),w
 15003  27B8  0022               	movlb	2	; select bank2
 15004  27B9  00D0               	movwf	(_cos$2858+1)^(0+256)
 15005  27BA  0021               	movlb	1	; select bank1
 15006  27BB  0843               	movf	(?___ftadd+2)^(0+128),w
 15007  27BC  0022               	movlb	2	; select bank2
 15008  27BD  00D1               	movwf	(_cos$2858+2)^(0+256)
 15009  27BE  084F               	movf	_cos$2858^(0+256),w
 15010  27BF  00BE               	movwf	sin@f^(0+256)
 15011  27C0  0850               	movf	(_cos$2858+1)^(0+256),w
 15012  27C1  00BF               	movwf	(sin@f+1)^(0+256)
 15013  27C2  0851               	movf	(_cos$2858+2)^(0+256),w
 15014  27C3  00C0               	movwf	(sin@f+2)^(0+256)
 15015  27C4  3188  2044         	fcall	_sin
 15016  27C6  0022               	movlb	2	; select bank2
 15017  27C7  083E               	movf	?_sin^(0+256),w
 15018  27C8  00CC               	movwf	?_cos^(0+256)
 15019  27C9  083F               	movf	(?_sin+1)^(0+256),w
 15020  27CA  00CD               	movwf	(?_cos+1)^(0+256)
 15021  27CB  0840               	movf	(?_sin+2)^(0+256),w
 15022  27CC  00CE               	movwf	(?_cos+2)^(0+256)
 15023  27CD  0008               	return
 15024  27CE                     l8526:	
 15025  27CE  3010               	movlw	16
 15026  27CF  0021               	movlb	1	; select bank1
 15027  27D0  00C1               	movwf	___ftadd@f1^(0+128)
 15028  27D1  30C9               	movlw	201
 15029  27D2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15030  27D3  303F               	movlw	63
 15031  27D4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15032  27D5  0022               	movlb	2	; select bank2
 15033  27D6  084C               	movf	cos@f^(0+256),w
 15034  27D7  0021               	movlb	1	; select bank1
 15035  27D8  00C4               	movwf	___ftadd@f2^(0+128)
 15036  27D9  0022               	movlb	2	; select bank2
 15037  27DA  084D               	movf	(cos@f+1)^(0+256),w
 15038  27DB  0021               	movlb	1	; select bank1
 15039  27DC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15040  27DD  0022               	movlb	2	; select bank2
 15041  27DE  084E               	movf	(cos@f+2)^(0+256),w
 15042  27DF  0021               	movlb	1	; select bank1
 15043  27E0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15044  27E1  3190  200F  31A7   	fcall	___ftadd
 15045  27E4  0021               	movlb	1	; select bank1
 15046  27E5  0841               	movf	?___ftadd^(0+128),w
 15047  27E6  0022               	movlb	2	; select bank2
 15048  27E7  00CF               	movwf	_cos$2858^(0+256)
 15049  27E8  0021               	movlb	1	; select bank1
 15050  27E9  0842               	movf	(?___ftadd+1)^(0+128),w
 15051  27EA  0022               	movlb	2	; select bank2
 15052  27EB  00D0               	movwf	(_cos$2858+1)^(0+256)
 15053  27EC  0021               	movlb	1	; select bank1
 15054  27ED  0843               	movf	(?___ftadd+2)^(0+128),w
 15055  27EE  0022               	movlb	2	; select bank2
 15056  27EF  00D1               	movwf	(_cos$2858+2)^(0+256)
 15057  27F0  084F               	movf	_cos$2858^(0+256),w
 15058  27F1  00BE               	movwf	sin@f^(0+256)
 15059  27F2  0850               	movf	(_cos$2858+1)^(0+256),w
 15060  27F3  00BF               	movwf	(sin@f+1)^(0+256)
 15061  27F4  0851               	movf	(_cos$2858+2)^(0+256),w
 15062  27F5  00C0               	movwf	(sin@f+2)^(0+256)
 15063  27F6  3188  2044         	fcall	_sin
 15064  27F8  0022               	movlb	2	; select bank2
 15065  27F9  083E               	movf	?_sin^(0+256),w
 15066  27FA  00CC               	movwf	?_cos^(0+256)
 15067  27FB  083F               	movf	(?_sin+1)^(0+256),w
 15068  27FC  00CD               	movwf	(?_cos+1)^(0+256)
 15069  27FD  0840               	movf	(?_sin+2)^(0+256),w
 15070  27FE  00CE               	movwf	(?_cos+2)^(0+256)
 15071  27FF  0008               	return
 15072  2800                     __end_of_cos:	
 15073                           
 15074                           	psect	text46
 15075  0844                     __ptext46:	
 15076 ;; *************** function _sin *****************
 15077 ;; Defined at:
 15078 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15079 ;; Parameters:    Size  Location     Type
 15080 ;;  f               3   30[BANK2 ] void 
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;  x2              3   40[BANK2 ] void 
 15083 ;;  y               3   34[BANK2 ] void 
 15084 ;;  sgn             1   43[BANK2 ] unsigned char 
 15085 ;; Return value:  Size  Location     Type
 15086 ;;                  3   30[BANK2 ] unsigned char 
 15087 ;; Registers used:
 15088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15089 ;; Tracked objects:
 15090 ;;		On entry : 0/0
 15091 ;;		On exit  : 0/0
 15092 ;;		Unchanged: 0/0
 15093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15094 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15095 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15096 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15097 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15098 ;;Total ram usage:       14 bytes
 15099 ;; Hardware stack levels used:    1
 15100 ;; Hardware stack levels required when called:    6
 15101 ;; This function calls:
 15102 ;;		___ftadd
 15103 ;;		___ftdiv
 15104 ;;		___ftge
 15105 ;;		___ftmul
 15106 ;;		___ftneg
 15107 ;;		___ftsub
 15108 ;;		_eval_poly
 15109 ;;		_floor
 15110 ;; This function is called by:
 15111 ;;		_cos
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115                           
 15116                           ;psect for function _sin
 15117  0844                     _sin:	
 15118                           
 15119                           ;incstack = 0
 15120                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15121  0844  0022               	movlb	2	; select bank2
 15122  0845  01CB               	clrf	sin@sgn^(0+256)
 15123  0846  083E               	movf	sin@f^(0+256),w
 15124  0847  0021               	movlb	1	; select bank1
 15125  0848  00A0               	movwf	___ftge@ff1^(0+128)
 15126  0849  0022               	movlb	2	; select bank2
 15127  084A  083F               	movf	(sin@f+1)^(0+256),w
 15128  084B  0021               	movlb	1	; select bank1
 15129  084C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15130  084D  0022               	movlb	2	; select bank2
 15131  084E  0840               	movf	(sin@f+2)^(0+256),w
 15132  084F  0021               	movlb	1	; select bank1
 15133  0850  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15134  0851  3000               	movlw	0
 15135  0852  00A3               	movwf	___ftge@ff2^(0+128)
 15136  0853  3000               	movlw	0
 15137  0854  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15138  0855  3000               	movlw	0
 15139  0856  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15140  0857  31A1  21C8  3188   	fcall	___ftge
 15141  085A  1803               	btfsc	3,0
 15142  085B  2879               	goto	l8236
 15143  085C  0022               	movlb	2	; select bank2
 15144  085D  083E               	movf	sin@f^(0+256),w
 15145  085E  0021               	movlb	1	; select bank1
 15146  085F  00BE               	movwf	___ftneg@f1^(0+128)
 15147  0860  0022               	movlb	2	; select bank2
 15148  0861  083F               	movf	(sin@f+1)^(0+256),w
 15149  0862  0021               	movlb	1	; select bank1
 15150  0863  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15151  0864  0022               	movlb	2	; select bank2
 15152  0865  0840               	movf	(sin@f+2)^(0+256),w
 15153  0866  0021               	movlb	1	; select bank1
 15154  0867  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15155  0868  31AD  25B2  3188   	fcall	___ftneg
 15156  086B  0021               	movlb	1	; select bank1
 15157  086C  083E               	movf	?___ftneg^(0+128),w
 15158  086D  0022               	movlb	2	; select bank2
 15159  086E  00BE               	movwf	sin@f^(0+256)
 15160  086F  0021               	movlb	1	; select bank1
 15161  0870  083F               	movf	(?___ftneg+1)^(0+128),w
 15162  0871  0022               	movlb	2	; select bank2
 15163  0872  00BF               	movwf	(sin@f+1)^(0+256)
 15164  0873  0021               	movlb	1	; select bank1
 15165  0874  0840               	movf	(?___ftneg+2)^(0+128),w
 15166  0875  0022               	movlb	2	; select bank2
 15167  0876  00C0               	movwf	(sin@f+2)^(0+256)
 15168  0877  01CB               	clrf	sin@sgn^(0+256)
 15169  0878  0ACB               	incf	sin@sgn^(0+256),f
 15170  0879                     l8236:	
 15171  0879  30FA               	movlw	250
 15172  087A  0021               	movlb	1	; select bank1
 15173  087B  00AE               	movwf	___ftmul@f1^(0+128)
 15174  087C  3022               	movlw	34
 15175  087D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15176  087E  303E               	movlw	62
 15177  087F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15178  0880  0022               	movlb	2	; select bank2
 15179  0881  083E               	movf	sin@f^(0+256),w
 15180  0882  0021               	movlb	1	; select bank1
 15181  0883  00B1               	movwf	___ftmul@f2^(0+128)
 15182  0884  0022               	movlb	2	; select bank2
 15183  0885  083F               	movf	(sin@f+1)^(0+256),w
 15184  0886  0021               	movlb	1	; select bank1
 15185  0887  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15186  0888  0022               	movlb	2	; select bank2
 15187  0889  0840               	movf	(sin@f+2)^(0+256),w
 15188  088A  0021               	movlb	1	; select bank1
 15189  088B  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15190  088C  3187  273B  3188   	fcall	___ftmul
 15191  088F  0021               	movlb	1	; select bank1
 15192  0890  082E               	movf	?___ftmul^(0+128),w
 15193  0891  0022               	movlb	2	; select bank2
 15194  0892  00BE               	movwf	sin@f^(0+256)
 15195  0893  0021               	movlb	1	; select bank1
 15196  0894  082F               	movf	(?___ftmul+1)^(0+128),w
 15197  0895  0022               	movlb	2	; select bank2
 15198  0896  00BF               	movwf	(sin@f+1)^(0+256)
 15199  0897  0021               	movlb	1	; select bank1
 15200  0898  0830               	movf	(?___ftmul+2)^(0+128),w
 15201  0899  0022               	movlb	2	; select bank2
 15202  089A  00C0               	movwf	(sin@f+2)^(0+256)
 15203  089B  083E               	movf	sin@f^(0+256),w
 15204  089C  00AE               	movwf	floor@x^(0+256)
 15205  089D  083F               	movf	(sin@f+1)^(0+256),w
 15206  089E  00AF               	movwf	(floor@x+1)^(0+256)
 15207  089F  0840               	movf	(sin@f+2)^(0+256),w
 15208  08A0  00B0               	movwf	(floor@x+2)^(0+256)
 15209  08A1  319E  267C  3188   	fcall	_floor
 15210  08A4  0022               	movlb	2	; select bank2
 15211  08A5  082E               	movf	?_floor^(0+256),w
 15212  08A6  00B7               	movwf	___ftsub@f2^(0+256)
 15213  08A7  082F               	movf	(?_floor+1)^(0+256),w
 15214  08A8  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15215  08A9  0830               	movf	(?_floor+2)^(0+256),w
 15216  08AA  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15217  08AB  083E               	movf	sin@f^(0+256),w
 15218  08AC  00BA               	movwf	___ftsub@f1^(0+256)
 15219  08AD  083F               	movf	(sin@f+1)^(0+256),w
 15220  08AE  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15221  08AF  0840               	movf	(sin@f+2)^(0+256),w
 15222  08B0  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15223  08B1  31AF  27A3  3188   	fcall	___ftsub
 15224  08B4  0022               	movlb	2	; select bank2
 15225  08B5  0837               	movf	?___ftsub^(0+256),w
 15226  08B6  00BE               	movwf	sin@f^(0+256)
 15227  08B7  0838               	movf	(?___ftsub+1)^(0+256),w
 15228  08B8  00BF               	movwf	(sin@f+1)^(0+256)
 15229  08B9  0839               	movf	(?___ftsub+2)^(0+256),w
 15230  08BA  00C0               	movwf	(sin@f+2)^(0+256)
 15231  08BB  3000               	movlw	0
 15232  08BC  0021               	movlb	1	; select bank1
 15233  08BD  00AE               	movwf	___ftmul@f1^(0+128)
 15234  08BE  3080               	movlw	128
 15235  08BF  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15236  08C0  3040               	movlw	64
 15237  08C1  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15238  08C2  0022               	movlb	2	; select bank2
 15239  08C3  083E               	movf	sin@f^(0+256),w
 15240  08C4  0021               	movlb	1	; select bank1
 15241  08C5  00B1               	movwf	___ftmul@f2^(0+128)
 15242  08C6  0022               	movlb	2	; select bank2
 15243  08C7  083F               	movf	(sin@f+1)^(0+256),w
 15244  08C8  0021               	movlb	1	; select bank1
 15245  08C9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15246  08CA  0022               	movlb	2	; select bank2
 15247  08CB  0840               	movf	(sin@f+2)^(0+256),w
 15248  08CC  0021               	movlb	1	; select bank1
 15249  08CD  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15250  08CE  3187  273B  3188   	fcall	___ftmul
 15251  08D1  0021               	movlb	1	; select bank1
 15252  08D2  082E               	movf	?___ftmul^(0+128),w
 15253  08D3  0022               	movlb	2	; select bank2
 15254  08D4  00BE               	movwf	sin@f^(0+256)
 15255  08D5  0021               	movlb	1	; select bank1
 15256  08D6  082F               	movf	(?___ftmul+1)^(0+128),w
 15257  08D7  0022               	movlb	2	; select bank2
 15258  08D8  00BF               	movwf	(sin@f+1)^(0+256)
 15259  08D9  0021               	movlb	1	; select bank1
 15260  08DA  0830               	movf	(?___ftmul+2)^(0+128),w
 15261  08DB  0022               	movlb	2	; select bank2
 15262  08DC  00C0               	movwf	(sin@f+2)^(0+256)
 15263  08DD  3000               	movlw	0
 15264  08DE  0021               	movlb	1	; select bank1
 15265  08DF  00A0               	movwf	___ftge@ff1^(0+128)
 15266  08E0  3000               	movlw	0
 15267  08E1  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15268  08E2  3040               	movlw	64
 15269  08E3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15270  08E4  0022               	movlb	2	; select bank2
 15271  08E5  083E               	movf	sin@f^(0+256),w
 15272  08E6  0021               	movlb	1	; select bank1
 15273  08E7  00A3               	movwf	___ftge@ff2^(0+128)
 15274  08E8  0022               	movlb	2	; select bank2
 15275  08E9  083F               	movf	(sin@f+1)^(0+256),w
 15276  08EA  0021               	movlb	1	; select bank1
 15277  08EB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15278  08EC  0022               	movlb	2	; select bank2
 15279  08ED  0840               	movf	(sin@f+2)^(0+256),w
 15280  08EE  0021               	movlb	1	; select bank1
 15281  08EF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15282  08F0  31A1  21C8  3188   	fcall	___ftge
 15283  08F3  1803               	btfsc	3,0
 15284  08F4  2915               	goto	l8248
 15285  08F5  3000               	movlw	0
 15286  08F6  0022               	movlb	2	; select bank2
 15287  08F7  00B7               	movwf	___ftsub@f2^(0+256)
 15288  08F8  3000               	movlw	0
 15289  08F9  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15290  08FA  3040               	movlw	64
 15291  08FB  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15292  08FC  083E               	movf	sin@f^(0+256),w
 15293  08FD  00BA               	movwf	___ftsub@f1^(0+256)
 15294  08FE  083F               	movf	(sin@f+1)^(0+256),w
 15295  08FF  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15296  0900  0840               	movf	(sin@f+2)^(0+256),w
 15297  0901  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15298  0902  31AF  27A3  3188   	fcall	___ftsub
 15299  0905  0022               	movlb	2	; select bank2
 15300  0906  0837               	movf	?___ftsub^(0+256),w
 15301  0907  00BE               	movwf	sin@f^(0+256)
 15302  0908  0838               	movf	(?___ftsub+1)^(0+256),w
 15303  0909  00BF               	movwf	(sin@f+1)^(0+256)
 15304  090A  0839               	movf	(?___ftsub+2)^(0+256),w
 15305  090B  00C0               	movwf	(sin@f+2)^(0+256)
 15306  090C  084B               	movf	sin@sgn^(0+256),w
 15307  090D  1D03               	btfss	3,2
 15308  090E  2911               	goto	u8640
 15309  090F  3001               	movlw	1
 15310  0910  2912               	goto	u8650
 15311  0911                     u8640:	
 15312  0911  3000               	movlw	0
 15313  0912                     u8650:	
 15314  0912  00C1               	movwf	??_sin^(0+256)
 15315  0913  0841               	movf	??_sin^(0+256),w
 15316  0914  00CB               	movwf	sin@sgn^(0+256)
 15317  0915                     l8248:	
 15318  0915  3000               	movlw	0
 15319  0916  0021               	movlb	1	; select bank1
 15320  0917  00A0               	movwf	___ftge@ff1^(0+128)
 15321  0918  3080               	movlw	128
 15322  0919  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15323  091A  303F               	movlw	63
 15324  091B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15325  091C  0022               	movlb	2	; select bank2
 15326  091D  083E               	movf	sin@f^(0+256),w
 15327  091E  0021               	movlb	1	; select bank1
 15328  091F  00A3               	movwf	___ftge@ff2^(0+128)
 15329  0920  0022               	movlb	2	; select bank2
 15330  0921  083F               	movf	(sin@f+1)^(0+256),w
 15331  0922  0021               	movlb	1	; select bank1
 15332  0923  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15333  0924  0022               	movlb	2	; select bank2
 15334  0925  0840               	movf	(sin@f+2)^(0+256),w
 15335  0926  0021               	movlb	1	; select bank1
 15336  0927  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15337  0928  31A1  21C8  3188   	fcall	___ftge
 15338  092B  1803               	btfsc	3,0
 15339  092C  2959               	goto	l2346
 15340  092D  3000               	movlw	0
 15341  092E  0021               	movlb	1	; select bank1
 15342  092F  00C1               	movwf	___ftadd@f1^(0+128)
 15343  0930  3000               	movlw	0
 15344  0931  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15345  0932  3040               	movlw	64
 15346  0933  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15347  0934  0022               	movlb	2	; select bank2
 15348  0935  083E               	movf	sin@f^(0+256),w
 15349  0936  0021               	movlb	1	; select bank1
 15350  0937  00BE               	movwf	___ftneg@f1^(0+128)
 15351  0938  0022               	movlb	2	; select bank2
 15352  0939  083F               	movf	(sin@f+1)^(0+256),w
 15353  093A  0021               	movlb	1	; select bank1
 15354  093B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15355  093C  0022               	movlb	2	; select bank2
 15356  093D  0840               	movf	(sin@f+2)^(0+256),w
 15357  093E  0021               	movlb	1	; select bank1
 15358  093F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15359  0940  31AD  25B2  3188   	fcall	___ftneg
 15360  0943  0021               	movlb	1	; select bank1
 15361  0944  083E               	movf	?___ftneg^(0+128),w
 15362  0945  00C4               	movwf	___ftadd@f2^(0+128)
 15363  0946  083F               	movf	(?___ftneg+1)^(0+128),w
 15364  0947  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15365  0948  0840               	movf	(?___ftneg+2)^(0+128),w
 15366  0949  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15367  094A  3190  200F  3188   	fcall	___ftadd
 15368  094D  0021               	movlb	1	; select bank1
 15369  094E  0841               	movf	?___ftadd^(0+128),w
 15370  094F  0022               	movlb	2	; select bank2
 15371  0950  00BE               	movwf	sin@f^(0+256)
 15372  0951  0021               	movlb	1	; select bank1
 15373  0952  0842               	movf	(?___ftadd+1)^(0+128),w
 15374  0953  0022               	movlb	2	; select bank2
 15375  0954  00BF               	movwf	(sin@f+1)^(0+256)
 15376  0955  0021               	movlb	1	; select bank1
 15377  0956  0843               	movf	(?___ftadd+2)^(0+128),w
 15378  0957  0022               	movlb	2	; select bank2
 15379  0958  00C0               	movwf	(sin@f+2)^(0+256)
 15380  0959                     l2346:	
 15381  0959  0022               	movlb	2	; select bank2
 15382  095A  083E               	movf	sin@f^(0+256),w
 15383  095B  0021               	movlb	1	; select bank1
 15384  095C  00AE               	movwf	___ftmul@f1^(0+128)
 15385  095D  0022               	movlb	2	; select bank2
 15386  095E  083F               	movf	(sin@f+1)^(0+256),w
 15387  095F  0021               	movlb	1	; select bank1
 15388  0960  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15389  0961  0022               	movlb	2	; select bank2
 15390  0962  0840               	movf	(sin@f+2)^(0+256),w
 15391  0963  0021               	movlb	1	; select bank1
 15392  0964  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15393  0965  0022               	movlb	2	; select bank2
 15394  0966  083E               	movf	sin@f^(0+256),w
 15395  0967  0021               	movlb	1	; select bank1
 15396  0968  00B1               	movwf	___ftmul@f2^(0+128)
 15397  0969  0022               	movlb	2	; select bank2
 15398  096A  083F               	movf	(sin@f+1)^(0+256),w
 15399  096B  0021               	movlb	1	; select bank1
 15400  096C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15401  096D  0022               	movlb	2	; select bank2
 15402  096E  0840               	movf	(sin@f+2)^(0+256),w
 15403  096F  0021               	movlb	1	; select bank1
 15404  0970  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15405  0971  3187  273B  3188   	fcall	___ftmul
 15406  0974  0021               	movlb	1	; select bank1
 15407  0975  082E               	movf	?___ftmul^(0+128),w
 15408  0976  0022               	movlb	2	; select bank2
 15409  0977  00C8               	movwf	sin@x2^(0+256)
 15410  0978  0021               	movlb	1	; select bank1
 15411  0979  082F               	movf	(?___ftmul+1)^(0+128),w
 15412  097A  0022               	movlb	2	; select bank2
 15413  097B  00C9               	movwf	(sin@x2+1)^(0+256)
 15414  097C  0021               	movlb	1	; select bank1
 15415  097D  0830               	movf	(?___ftmul+2)^(0+128),w
 15416  097E  0022               	movlb	2	; select bank2
 15417  097F  00CA               	movwf	(sin@x2+2)^(0+256)
 15418  0980  0848               	movf	sin@x2^(0+256),w
 15419  0981  00B4               	movwf	eval_poly@x^(0+256)
 15420  0982  0849               	movf	(sin@x2+1)^(0+256),w
 15421  0983  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15422  0984  084A               	movf	(sin@x2+2)^(0+256),w
 15423  0985  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15424  0986  3048               	movlw	low (sin@coeff_b| (0+32768))
 15425  0987  00B7               	movwf	eval_poly@d^(0+256)
 15426  0988  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15427  0989  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15428  098A  3003               	movlw	3
 15429  098B  00B9               	movwf	eval_poly@n^(0+256)
 15430  098C  3000               	movlw	0
 15431  098D  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15432  098E  31A6  269C  3188   	fcall	_eval_poly
 15433  0991  0022               	movlb	2	; select bank2
 15434  0992  0834               	movf	?_eval_poly^(0+256),w
 15435  0993  00C2               	movwf	sin@y^(0+256)
 15436  0994  0835               	movf	(?_eval_poly+1)^(0+256),w
 15437  0995  00C3               	movwf	(sin@y+1)^(0+256)
 15438  0996  0836               	movf	(?_eval_poly+2)^(0+256),w
 15439  0997  00C4               	movwf	(sin@y+2)^(0+256)
 15440  0998  3004               	movlw	4
 15441  0999  00B9               	movwf	eval_poly@n^(0+256)
 15442  099A  3000               	movlw	0
 15443  099B  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15444  099C  3039               	movlw	low (sin@coeff_a| (0+32768))
 15445  099D  00B7               	movwf	eval_poly@d^(0+256)
 15446  099E  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15447  099F  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15448  09A0  0848               	movf	sin@x2^(0+256),w
 15449  09A1  00B4               	movwf	eval_poly@x^(0+256)
 15450  09A2  0849               	movf	(sin@x2+1)^(0+256),w
 15451  09A3  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15452  09A4  084A               	movf	(sin@x2+2)^(0+256),w
 15453  09A5  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15454  09A6  31A6  269C  3188   	fcall	_eval_poly
 15455  09A9  0022               	movlb	2	; select bank2
 15456  09AA  0834               	movf	?_eval_poly^(0+256),w
 15457  09AB  0021               	movlb	1	; select bank1
 15458  09AC  00D1               	movwf	___ftdiv@f1^(0+128)
 15459  09AD  0022               	movlb	2	; select bank2
 15460  09AE  0835               	movf	(?_eval_poly+1)^(0+256),w
 15461  09AF  0021               	movlb	1	; select bank1
 15462  09B0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15463  09B1  0022               	movlb	2	; select bank2
 15464  09B2  0836               	movf	(?_eval_poly+2)^(0+256),w
 15465  09B3  0021               	movlb	1	; select bank1
 15466  09B4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15467  09B5  0022               	movlb	2	; select bank2
 15468  09B6  0842               	movf	sin@y^(0+256),w
 15469  09B7  0021               	movlb	1	; select bank1
 15470  09B8  00CE               	movwf	___ftdiv@f2^(0+128)
 15471  09B9  0022               	movlb	2	; select bank2
 15472  09BA  0843               	movf	(sin@y+1)^(0+256),w
 15473  09BB  0021               	movlb	1	; select bank1
 15474  09BC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15475  09BD  0022               	movlb	2	; select bank2
 15476  09BE  0844               	movf	(sin@y+2)^(0+256),w
 15477  09BF  0021               	movlb	1	; select bank1
 15478  09C0  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15479  09C1  319D  2528  3188   	fcall	___ftdiv
 15480  09C4  0021               	movlb	1	; select bank1
 15481  09C5  084E               	movf	?___ftdiv^(0+128),w
 15482  09C6  0022               	movlb	2	; select bank2
 15483  09C7  00C5               	movwf	_sin$2861^(0+256)
 15484  09C8  0021               	movlb	1	; select bank1
 15485  09C9  084F               	movf	(?___ftdiv+1)^(0+128),w
 15486  09CA  0022               	movlb	2	; select bank2
 15487  09CB  00C6               	movwf	(_sin$2861+1)^(0+256)
 15488  09CC  0021               	movlb	1	; select bank1
 15489  09CD  0850               	movf	(?___ftdiv+2)^(0+128),w
 15490  09CE  0022               	movlb	2	; select bank2
 15491  09CF  00C7               	movwf	(_sin$2861+2)^(0+256)
 15492  09D0  0845               	movf	_sin$2861^(0+256),w
 15493  09D1  0021               	movlb	1	; select bank1
 15494  09D2  00AE               	movwf	___ftmul@f1^(0+128)
 15495  09D3  0022               	movlb	2	; select bank2
 15496  09D4  0846               	movf	(_sin$2861+1)^(0+256),w
 15497  09D5  0021               	movlb	1	; select bank1
 15498  09D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15499  09D7  0022               	movlb	2	; select bank2
 15500  09D8  0847               	movf	(_sin$2861+2)^(0+256),w
 15501  09D9  0021               	movlb	1	; select bank1
 15502  09DA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15503  09DB  0022               	movlb	2	; select bank2
 15504  09DC  083E               	movf	sin@f^(0+256),w
 15505  09DD  0021               	movlb	1	; select bank1
 15506  09DE  00B1               	movwf	___ftmul@f2^(0+128)
 15507  09DF  0022               	movlb	2	; select bank2
 15508  09E0  083F               	movf	(sin@f+1)^(0+256),w
 15509  09E1  0021               	movlb	1	; select bank1
 15510  09E2  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15511  09E3  0022               	movlb	2	; select bank2
 15512  09E4  0840               	movf	(sin@f+2)^(0+256),w
 15513  09E5  0021               	movlb	1	; select bank1
 15514  09E6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15515  09E7  3187  273B  3188   	fcall	___ftmul
 15516  09EA  0021               	movlb	1	; select bank1
 15517  09EB  082E               	movf	?___ftmul^(0+128),w
 15518  09EC  0022               	movlb	2	; select bank2
 15519  09ED  00BE               	movwf	sin@f^(0+256)
 15520  09EE  0021               	movlb	1	; select bank1
 15521  09EF  082F               	movf	(?___ftmul+1)^(0+128),w
 15522  09F0  0022               	movlb	2	; select bank2
 15523  09F1  00BF               	movwf	(sin@f+1)^(0+256)
 15524  09F2  0021               	movlb	1	; select bank1
 15525  09F3  0830               	movf	(?___ftmul+2)^(0+128),w
 15526  09F4  0022               	movlb	2	; select bank2
 15527  09F5  00C0               	movwf	(sin@f+2)^(0+256)
 15528  09F6  084B               	movf	sin@sgn^(0+256),w
 15529  09F7  1903               	btfsc	3,2
 15530  09F8  0008               	return
 15531  09F9  083E               	movf	sin@f^(0+256),w
 15532  09FA  0021               	movlb	1	; select bank1
 15533  09FB  00BE               	movwf	___ftneg@f1^(0+128)
 15534  09FC  0022               	movlb	2	; select bank2
 15535  09FD  083F               	movf	(sin@f+1)^(0+256),w
 15536  09FE  0021               	movlb	1	; select bank1
 15537  09FF  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15538  0A00  0022               	movlb	2	; select bank2
 15539  0A01  0840               	movf	(sin@f+2)^(0+256),w
 15540  0A02  0021               	movlb	1	; select bank1
 15541  0A03  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15542  0A04  31AD  25B2         	fcall	___ftneg
 15543  0A06  0021               	movlb	1	; select bank1
 15544  0A07  083E               	movf	?___ftneg^(0+128),w
 15545  0A08  0022               	movlb	2	; select bank2
 15546  0A09  00BE               	movwf	?_sin^(0+256)
 15547  0A0A  0021               	movlb	1	; select bank1
 15548  0A0B  083F               	movf	(?___ftneg+1)^(0+128),w
 15549  0A0C  0022               	movlb	2	; select bank2
 15550  0A0D  00BF               	movwf	(?_sin+1)^(0+256)
 15551  0A0E  0021               	movlb	1	; select bank1
 15552  0A0F  0840               	movf	(?___ftneg+2)^(0+128),w
 15553  0A10  0022               	movlb	2	; select bank2
 15554  0A11  00C0               	movwf	(?_sin+2)^(0+256)
 15555  0A12  0008               	return
 15556  0A13                     __end_of_sin:	
 15557                           
 15558                           	psect	text47
 15559  1E7C                     __ptext47:	
 15560 ;; *************** function _floor *****************
 15561 ;; Defined at:
 15562 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15563 ;; Parameters:    Size  Location     Type
 15564 ;;  x               3   14[BANK2 ] unsigned char 
 15565 ;; Auto vars:     Size  Location     Type
 15566 ;;  i               3   18[BANK2 ] unsigned char 
 15567 ;;  expon           2   21[BANK2 ] int 
 15568 ;; Return value:  Size  Location     Type
 15569 ;;                  3   14[BANK2 ] int 
 15570 ;; Registers used:
 15571 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15572 ;; Tracked objects:
 15573 ;;		On entry : 0/0
 15574 ;;		On exit  : 0/0
 15575 ;;		Unchanged: 0/0
 15576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15577 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15578 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15579 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15580 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15581 ;;Total ram usage:        9 bytes
 15582 ;; Hardware stack levels used:    1
 15583 ;; Hardware stack levels required when called:    5
 15584 ;; This function calls:
 15585 ;;		___altoft
 15586 ;;		___ftadd
 15587 ;;		___ftge
 15588 ;;		___fttol
 15589 ;;		_frexp
 15590 ;; This function is called by:
 15591 ;;		_sin
 15592 ;;		_exp
 15593 ;; This function uses a non-reentrant model
 15594 ;;
 15595                           
 15596                           
 15597                           ;psect for function _floor
 15598  1E7C                     _floor:	
 15599                           
 15600                           ;incstack = 0
 15601                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15602  1E7C  0022               	movlb	2	; select bank2
 15603  1E7D  082E               	movf	floor@x^(0+256),w
 15604  1E7E  0021               	movlb	1	; select bank1
 15605  1E7F  00A0               	movwf	frexp@value^(0+128)
 15606  1E80  0022               	movlb	2	; select bank2
 15607  1E81  082F               	movf	(floor@x+1)^(0+256),w
 15608  1E82  0021               	movlb	1	; select bank1
 15609  1E83  00A1               	movwf	(frexp@value+1)^(0+128)
 15610  1E84  0022               	movlb	2	; select bank2
 15611  1E85  0830               	movf	(floor@x+2)^(0+256),w
 15612  1E86  0021               	movlb	1	; select bank1
 15613  1E87  00A2               	movwf	(frexp@value+2)^(0+128)
 15614  1E88  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15615  1E89  0022               	movlb	2	; select bank2
 15616  1E8A  00B1               	movwf	??_floor^(0+256)
 15617  1E8B  0831               	movf	??_floor^(0+256),w
 15618  1E8C  0021               	movlb	1	; select bank1
 15619  1E8D  00A3               	movwf	frexp@eptr^(0+128)
 15620  1E8E  31A2  22BB  319E   	fcall	_frexp
 15621  1E91  0022               	movlb	2	; select bank2
 15622  1E92  1FB6               	btfss	(floor@expon+1)^(0+256),7
 15623  1E93  2EBA               	goto	l8084
 15624  1E94  082E               	movf	floor@x^(0+256),w
 15625  1E95  0021               	movlb	1	; select bank1
 15626  1E96  00A0               	movwf	___ftge@ff1^(0+128)
 15627  1E97  0022               	movlb	2	; select bank2
 15628  1E98  082F               	movf	(floor@x+1)^(0+256),w
 15629  1E99  0021               	movlb	1	; select bank1
 15630  1E9A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15631  1E9B  0022               	movlb	2	; select bank2
 15632  1E9C  0830               	movf	(floor@x+2)^(0+256),w
 15633  1E9D  0021               	movlb	1	; select bank1
 15634  1E9E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15635  1E9F  3000               	movlw	0
 15636  1EA0  00A3               	movwf	___ftge@ff2^(0+128)
 15637  1EA1  3000               	movlw	0
 15638  1EA2  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15639  1EA3  3000               	movlw	0
 15640  1EA4  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15641  1EA5  31A1  21C8  319E   	fcall	___ftge
 15642  1EA8  1803               	btfsc	3,0
 15643  1EA9  2EB2               	goto	l8080
 15644  1EAA  3000               	movlw	0
 15645  1EAB  0022               	movlb	2	; select bank2
 15646  1EAC  00AE               	movwf	?_floor^(0+256)
 15647  1EAD  3080               	movlw	128
 15648  1EAE  00AF               	movwf	(?_floor+1)^(0+256)
 15649  1EAF  30BF               	movlw	191
 15650  1EB0  00B0               	movwf	(?_floor+2)^(0+256)
 15651  1EB1  0008               	return
 15652  1EB2                     l8080:	
 15653  1EB2  3000               	movlw	0
 15654  1EB3  0022               	movlb	2	; select bank2
 15655  1EB4  00AE               	movwf	?_floor^(0+256)
 15656  1EB5  3000               	movlw	0
 15657  1EB6  00AF               	movwf	(?_floor+1)^(0+256)
 15658  1EB7  3000               	movlw	0
 15659  1EB8  00B0               	movwf	(?_floor+2)^(0+256)
 15660  1EB9  0008               	return
 15661  1EBA                     l8084:	
 15662  1EBA  3000               	movlw	0
 15663  1EBB  0236               	subwf	(floor@expon+1)^(0+256),w
 15664  1EBC  3015               	movlw	21
 15665  1EBD  1903               	skipnz
 15666  1EBE  0235               	subwf	floor@expon^(0+256),w
 15667  1EBF  1803               	btfsc	3,0
 15668  1EC0  0008               	return
 15669  1EC1  082E               	movf	floor@x^(0+256),w
 15670  1EC2  00A0               	movwf	___fttol@f1^(0+256)
 15671  1EC3  082F               	movf	(floor@x+1)^(0+256),w
 15672  1EC4  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15673  1EC5  0830               	movf	(floor@x+2)^(0+256),w
 15674  1EC6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15675  1EC7  319A  2263  319E   	fcall	___fttol
 15676  1ECA  0022               	movlb	2	; select bank2
 15677  1ECB  0823               	movf	(?___fttol+3)^(0+256),w
 15678  1ECC  0021               	movlb	1	; select bank1
 15679  1ECD  00AB               	movwf	(___altoft@c+3)^(0+128)
 15680  1ECE  0022               	movlb	2	; select bank2
 15681  1ECF  0822               	movf	(?___fttol+2)^(0+256),w
 15682  1ED0  0021               	movlb	1	; select bank1
 15683  1ED1  00AA               	movwf	(___altoft@c+2)^(0+128)
 15684  1ED2  0022               	movlb	2	; select bank2
 15685  1ED3  0821               	movf	(?___fttol+1)^(0+256),w
 15686  1ED4  0021               	movlb	1	; select bank1
 15687  1ED5  00A9               	movwf	(___altoft@c+1)^(0+128)
 15688  1ED6  0022               	movlb	2	; select bank2
 15689  1ED7  0820               	movf	?___fttol^(0+256),w
 15690  1ED8  0021               	movlb	1	; select bank1
 15691  1ED9  00A8               	movwf	___altoft@c^(0+128)
 15692  1EDA  31A2  2204  319E   	fcall	___altoft
 15693  1EDD  0021               	movlb	1	; select bank1
 15694  1EDE  0828               	movf	?___altoft^(0+128),w
 15695  1EDF  0022               	movlb	2	; select bank2
 15696  1EE0  00B2               	movwf	floor@i^(0+256)
 15697  1EE1  0021               	movlb	1	; select bank1
 15698  1EE2  0829               	movf	(?___altoft+1)^(0+128),w
 15699  1EE3  0022               	movlb	2	; select bank2
 15700  1EE4  00B3               	movwf	(floor@i+1)^(0+256)
 15701  1EE5  0021               	movlb	1	; select bank1
 15702  1EE6  082A               	movf	(?___altoft+2)^(0+128),w
 15703  1EE7  0022               	movlb	2	; select bank2
 15704  1EE8  00B4               	movwf	(floor@i+2)^(0+256)
 15705  1EE9  082E               	movf	floor@x^(0+256),w
 15706  1EEA  0021               	movlb	1	; select bank1
 15707  1EEB  00A0               	movwf	___ftge@ff1^(0+128)
 15708  1EEC  0022               	movlb	2	; select bank2
 15709  1EED  082F               	movf	(floor@x+1)^(0+256),w
 15710  1EEE  0021               	movlb	1	; select bank1
 15711  1EEF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15712  1EF0  0022               	movlb	2	; select bank2
 15713  1EF1  0830               	movf	(floor@x+2)^(0+256),w
 15714  1EF2  0021               	movlb	1	; select bank1
 15715  1EF3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15716  1EF4  0022               	movlb	2	; select bank2
 15717  1EF5  0832               	movf	floor@i^(0+256),w
 15718  1EF6  0021               	movlb	1	; select bank1
 15719  1EF7  00A3               	movwf	___ftge@ff2^(0+128)
 15720  1EF8  0022               	movlb	2	; select bank2
 15721  1EF9  0833               	movf	(floor@i+1)^(0+256),w
 15722  1EFA  0021               	movlb	1	; select bank1
 15723  1EFB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15724  1EFC  0022               	movlb	2	; select bank2
 15725  1EFD  0834               	movf	(floor@i+2)^(0+256),w
 15726  1EFE  0021               	movlb	1	; select bank1
 15727  1EFF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15728  1F00  31A1  21C8  319E   	fcall	___ftge
 15729  1F03  1803               	btfsc	3,0
 15730  1F04  2F27               	goto	l8094
 15731  1F05  3000               	movlw	0
 15732  1F06  0021               	movlb	1	; select bank1
 15733  1F07  00C1               	movwf	___ftadd@f1^(0+128)
 15734  1F08  3080               	movlw	128
 15735  1F09  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15736  1F0A  30BF               	movlw	191
 15737  1F0B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15738  1F0C  0022               	movlb	2	; select bank2
 15739  1F0D  0832               	movf	floor@i^(0+256),w
 15740  1F0E  0021               	movlb	1	; select bank1
 15741  1F0F  00C4               	movwf	___ftadd@f2^(0+128)
 15742  1F10  0022               	movlb	2	; select bank2
 15743  1F11  0833               	movf	(floor@i+1)^(0+256),w
 15744  1F12  0021               	movlb	1	; select bank1
 15745  1F13  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15746  1F14  0022               	movlb	2	; select bank2
 15747  1F15  0834               	movf	(floor@i+2)^(0+256),w
 15748  1F16  0021               	movlb	1	; select bank1
 15749  1F17  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15750  1F18  3190  200F         	fcall	___ftadd
 15751  1F1A  0021               	movlb	1	; select bank1
 15752  1F1B  0841               	movf	?___ftadd^(0+128),w
 15753  1F1C  0022               	movlb	2	; select bank2
 15754  1F1D  00AE               	movwf	?_floor^(0+256)
 15755  1F1E  0021               	movlb	1	; select bank1
 15756  1F1F  0842               	movf	(?___ftadd+1)^(0+128),w
 15757  1F20  0022               	movlb	2	; select bank2
 15758  1F21  00AF               	movwf	(?_floor+1)^(0+256)
 15759  1F22  0021               	movlb	1	; select bank1
 15760  1F23  0843               	movf	(?___ftadd+2)^(0+128),w
 15761  1F24  0022               	movlb	2	; select bank2
 15762  1F25  00B0               	movwf	(?_floor+2)^(0+256)
 15763  1F26  0008               	return
 15764  1F27                     l8094:	
 15765  1F27  0022               	movlb	2	; select bank2
 15766  1F28  0832               	movf	floor@i^(0+256),w
 15767  1F29  00AE               	movwf	?_floor^(0+256)
 15768  1F2A  0833               	movf	(floor@i+1)^(0+256),w
 15769  1F2B  00AF               	movwf	(?_floor+1)^(0+256)
 15770  1F2C  0834               	movf	(floor@i+2)^(0+256),w
 15771  1F2D  00B0               	movwf	(?_floor+2)^(0+256)
 15772  1F2E  0008               	return
 15773  1F2F                     __end_of_floor:	
 15774                           
 15775                           	psect	text48
 15776  22BB                     __ptext48:	
 15777 ;; *************** function _frexp *****************
 15778 ;; Defined at:
 15779 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15780 ;; Parameters:    Size  Location     Type
 15781 ;;  value           3    0[BANK1 ] int 
 15782 ;;  eptr            1    3[BANK1 ] PTR int 
 15783 ;;		 -> log@exponent(2), floor@expon(2), 
 15784 ;; Auto vars:     Size  Location     Type
 15785 ;;		None
 15786 ;; Return value:  Size  Location     Type
 15787 ;;                  3    0[BANK1 ] PTR int 
 15788 ;; Registers used:
 15789 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15790 ;; Tracked objects:
 15791 ;;		On entry : 0/0
 15792 ;;		On exit  : 0/0
 15793 ;;		Unchanged: 0/0
 15794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15795 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15797 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15798 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15799 ;;Total ram usage:        6 bytes
 15800 ;; Hardware stack levels used:    1
 15801 ;; Hardware stack levels required when called:    3
 15802 ;; This function calls:
 15803 ;;		Nothing
 15804 ;; This function is called by:
 15805 ;;		_floor
 15806 ;;		_log
 15807 ;; This function uses a non-reentrant model
 15808 ;;
 15809                           
 15810                           
 15811                           ;psect for function _frexp
 15812  22BB                     _frexp:	
 15813                           
 15814                           ;incstack = 0
 15815                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15816  22BB  0021               	movlb	1	; select bank1
 15817  22BC  0822               	movf	(frexp@value+2)^(0+128),w
 15818  22BD  0421               	iorwf	(frexp@value+1)^(0+128),w
 15819  22BE  0420               	iorwf	frexp@value^(0+128),w
 15820  22BF  1D03               	skipz
 15821  22C0  2ACF               	goto	l7946
 15822  22C1  0823               	movf	frexp@eptr^(0+128),w
 15823  22C2  0086               	movwf	6
 15824  22C3  3001               	movlw	1	; select bank2/3
 15825  22C4  0087               	movwf	7
 15826  22C5  3000               	movlw	0
 15827  22C6  3FC0               	movwi [0]fsr1
 15828  22C7  3FC1               	movwi [1]fsr1
 15829  22C8  3000               	movlw	0
 15830  22C9  00A0               	movwf	?_frexp^(0+128)
 15831  22CA  3000               	movlw	0
 15832  22CB  00A1               	movwf	(?_frexp+1)^(0+128)
 15833  22CC  3000               	movlw	0
 15834  22CD  00A2               	movwf	(?_frexp+2)^(0+128)
 15835  22CE  0008               	return
 15836  22CF                     l7946:	
 15837  22CF  0822               	movf	(frexp@value^(0+128)+2),w
 15838  22D0  397F               	andlw	127
 15839  22D1  00A4               	movwf	??_frexp^(0+128)
 15840  22D2  01A5               	clrf	(??_frexp^(0+128)+1)
 15841  22D3  35A4               	lslf	??_frexp^(0+128),f
 15842  22D4  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15843  22D5  0823               	movf	frexp@eptr^(0+128),w
 15844  22D6  0086               	movwf	6
 15845  22D7  3001               	movlw	1	; select bank2/3
 15846  22D8  0087               	movwf	7
 15847  22D9  0824               	movf	??_frexp^(0+128),w
 15848  22DA  3FC0               	movwi [0]fsr1
 15849  22DB  0825               	movf	(??_frexp+1)^(0+128),w
 15850  22DC  3FC1               	movwi [1]fsr1
 15851  22DD  0D21               	rlf	(frexp@value^(0+128)+1),w
 15852  22DE  0D21               	rlf	(frexp@value^(0+128)+1),w
 15853  22DF  3901               	andlw	1
 15854  22E0  00A4               	movwf	??_frexp^(0+128)
 15855  22E1  01A5               	clrf	(??_frexp^(0+128)+1)
 15856  22E2  0823               	movf	frexp@eptr^(0+128),w
 15857  22E3  0086               	movwf	6
 15858  22E4  3001               	movlw	1	; select bank2/3
 15859  22E5  0087               	movwf	7
 15860  22E6  0824               	movf	??_frexp^(0+128),w
 15861  22E7  0481               	iorwf	1,f
 15862  22E8  3141               	addfsr 1,1
 15863  22E9  0825               	movf	(??_frexp+1)^(0+128),w
 15864  22EA  0481               	iorwf	1,f
 15865  22EB  0823               	movf	frexp@eptr^(0+128),w
 15866  22EC  0086               	movwf	6
 15867  22ED  3001               	movlw	1	; select bank2/3
 15868  22EE  0087               	movwf	7
 15869  22EF  3082               	movlw	130
 15870  22F0  0781               	addwf	1,f
 15871  22F1  3141               	addfsr 1,1
 15872  22F2  30FF               	movlw	255
 15873  22F3  3D81               	addwfc	1,f
 15874  22F4  317F               	addfsr 1,-1
 15875  22F5  0822               	movf	(frexp@value^(0+128)+2),w
 15876  22F6  3980               	andlw	-128
 15877  22F7  383F               	iorlw	63
 15878  22F8  00A2               	movwf	(frexp@value^(0+128)+2)
 15879  22F9  13A1               	bcf	(frexp@value^(0+128)+1),7
 15880  22FA  0008               	return
 15881  22FB                     __end_of_frexp:	
 15882                           
 15883                           	psect	text49
 15884  1A63                     __ptext49:	
 15885 ;; *************** function ___fttol *****************
 15886 ;; Defined at:
 15887 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15888 ;; Parameters:    Size  Location     Type
 15889 ;;  f1              3    0[BANK2 ] float 
 15890 ;; Auto vars:     Size  Location     Type
 15891 ;;  lval            4    9[BANK2 ] unsigned long 
 15892 ;;  exp1            1   13[BANK2 ] unsigned char 
 15893 ;;  sign1           1    8[BANK2 ] unsigned char 
 15894 ;; Return value:  Size  Location     Type
 15895 ;;                  4    0[BANK2 ] long 
 15896 ;; Registers used:
 15897 ;;		wreg, status,2, status,0
 15898 ;; Tracked objects:
 15899 ;;		On entry : 0/0
 15900 ;;		On exit  : 0/0
 15901 ;;		Unchanged: 0/0
 15902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15903 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15904 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15905 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15906 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15907 ;;Total ram usage:       14 bytes
 15908 ;; Hardware stack levels used:    1
 15909 ;; Hardware stack levels required when called:    3
 15910 ;; This function calls:
 15911 ;;		Nothing
 15912 ;; This function is called by:
 15913 ;;		_main
 15914 ;;		_set_subdivision
 15915 ;;		_scaleA100kPot
 15916 ;;		_scaleA10kPot
 15917 ;;		_scaleiA10kPot
 15918 ;;		_getModulationDelayTime
 15919 ;;		_modCos
 15920 ;;		_modTri
 15921 ;;		_modSaw
 15922 ;;		_pow
 15923 ;;		_exp
 15924 ;;		_floor
 15925 ;;		_scaleiA100kPot
 15926 ;; This function uses a non-reentrant model
 15927 ;;
 15928                           
 15929                           
 15930                           ;psect for function ___fttol
 15931  1A63                     ___fttol:	
 15932                           
 15933                           ;incstack = 0
 15934                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15935  1A63  0022               	movlb	2	; select bank2
 15936  1A64  0820               	movf	___fttol@f1^(0+256),w
 15937  1A65  00A4               	movwf	??___fttol^(0+256)
 15938  1A66  0821               	movf	(___fttol@f1+1)^(0+256),w
 15939  1A67  00A5               	movwf	(??___fttol^(0+256)+1)
 15940  1A68  0822               	movf	(___fttol@f1+2)^(0+256),w
 15941  1A69  00A6               	movwf	(??___fttol^(0+256)+2)
 15942  1A6A  1003               	clrc
 15943  1A6B  0D25               	rlf	(??___fttol^(0+256)+1),w
 15944  1A6C  0D26               	rlf	(??___fttol^(0+256)+2),w
 15945  1A6D  00A7               	movwf	(??___fttol+3)^(0+256)
 15946  1A6E  0827               	movf	(??___fttol+3)^(0+256),w
 15947  1A6F  00AD               	movwf	___fttol@exp1^(0+256)
 15948  1A70  082D               	movf	___fttol@exp1^(0+256),w
 15949  1A71  1D03               	btfss	3,2
 15950  1A72  2A7C               	goto	l7902
 15951  1A73  3000               	movlw	0
 15952  1A74  00A3               	movwf	(?___fttol+3)^(0+256)
 15953  1A75  3000               	movlw	0
 15954  1A76  00A2               	movwf	(?___fttol+2)^(0+256)
 15955  1A77  3000               	movlw	0
 15956  1A78  00A1               	movwf	(?___fttol+1)^(0+256)
 15957  1A79  3000               	movlw	0
 15958  1A7A  00A0               	movwf	?___fttol^(0+256)
 15959  1A7B  0008               	return
 15960  1A7C                     l7902:	
 15961  1A7C  0820               	movf	___fttol@f1^(0+256),w
 15962  1A7D  00A4               	movwf	??___fttol^(0+256)
 15963  1A7E  0821               	movf	(___fttol@f1+1)^(0+256),w
 15964  1A7F  00A5               	movwf	(??___fttol^(0+256)+1)
 15965  1A80  0822               	movf	(___fttol@f1+2)^(0+256),w
 15966  1A81  00A6               	movwf	(??___fttol^(0+256)+2)
 15967  1A82  3017               	movlw	23
 15968  1A83                     u8245:	
 15969  1A83  36A6               	lsrf	(??___fttol^(0+256)+2),f
 15970  1A84  0CA5               	rrf	(??___fttol^(0+256)+1),f
 15971  1A85  0CA4               	rrf	??___fttol^(0+256),f
 15972  1A86  0B89               	decfsz	9,f
 15973  1A87  2A83               	goto	u8245
 15974  1A88  0824               	movf	??___fttol^(0+256),w
 15975  1A89  00A7               	movwf	(??___fttol+3)^(0+256)
 15976  1A8A  0827               	movf	(??___fttol+3)^(0+256),w
 15977  1A8B  00A8               	movwf	___fttol@sign1^(0+256)
 15978  1A8C  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 15979  1A8D  30FF               	movlw	255
 15980  1A8E  05A0               	andwf	___fttol@f1^(0+256),f
 15981  1A8F  30FF               	movlw	255
 15982  1A90  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 15983  1A91  3000               	movlw	0
 15984  1A92  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 15985  1A93  0820               	movf	___fttol@f1^(0+256),w
 15986  1A94  00A9               	movwf	___fttol@lval^(0+256)
 15987  1A95  0821               	movf	(___fttol@f1+1)^(0+256),w
 15988  1A96  00AA               	movwf	(___fttol@lval^(0+256)+1)
 15989  1A97  0822               	movf	(___fttol@f1+2)^(0+256),w
 15990  1A98  00AB               	movwf	(___fttol@lval^(0+256)+2)
 15991  1A99  01AC               	clrf	(___fttol@lval^(0+256)+3)
 15992  1A9A  308E               	movlw	142
 15993  1A9B  02AD               	subwf	___fttol@exp1^(0+256),f
 15994  1A9C  1FAD               	btfss	___fttol@exp1^(0+256),7
 15995  1A9D  2ABA               	goto	l7922
 15996  1A9E  082D               	movf	___fttol@exp1^(0+256),w
 15997  1A9F  3A80               	xorlw	128
 15998  1AA0  3E8F               	addlw	143
 15999  1AA1  1803               	skipnc
 16000  1AA2  2AAC               	goto	l7920
 16001  1AA3  3000               	movlw	0
 16002  1AA4  00A3               	movwf	(?___fttol+3)^(0+256)
 16003  1AA5  3000               	movlw	0
 16004  1AA6  00A2               	movwf	(?___fttol+2)^(0+256)
 16005  1AA7  3000               	movlw	0
 16006  1AA8  00A1               	movwf	(?___fttol+1)^(0+256)
 16007  1AA9  3000               	movlw	0
 16008  1AAA  00A0               	movwf	?___fttol^(0+256)
 16009  1AAB  0008               	return
 16010  1AAC                     l7920:	
 16011  1AAC  3001               	movlw	1
 16012  1AAD                     u8275:	
 16013  1AAD  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16014  1AAE  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16015  1AAF  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16016  1AB0  0CA9               	rrf	___fttol@lval^(0+256),f
 16017  1AB1  0B89               	decfsz	9,f
 16018  1AB2  2AAD               	goto	u8275
 16019  1AB3  3001               	movlw	1
 16020  1AB4  00A4               	movwf	??___fttol^(0+256)
 16021  1AB5  0824               	movf	??___fttol^(0+256),w
 16022  1AB6  07AD               	addwf	___fttol@exp1^(0+256),f
 16023  1AB7  1903               	btfsc	3,2
 16024  1AB8  2AD3               	goto	l7930
 16025  1AB9  2AAC               	goto	l7920
 16026  1ABA                     l7922:	
 16027  1ABA  3018               	movlw	24
 16028  1ABB  022D               	subwf	___fttol@exp1^(0+256),w
 16029  1ABC  1C03               	skipc
 16030  1ABD  2AD0               	goto	l2216
 16031  1ABE  3000               	movlw	0
 16032  1ABF  00A3               	movwf	(?___fttol+3)^(0+256)
 16033  1AC0  3000               	movlw	0
 16034  1AC1  00A2               	movwf	(?___fttol+2)^(0+256)
 16035  1AC2  3000               	movlw	0
 16036  1AC3  00A1               	movwf	(?___fttol+1)^(0+256)
 16037  1AC4  3000               	movlw	0
 16038  1AC5  00A0               	movwf	?___fttol^(0+256)
 16039  1AC6  0008               	return
 16040  1AC7                     l7928:	
 16041  1AC7  3001               	movlw	1
 16042  1AC8                     u8305:	
 16043  1AC8  35A9               	lslf	___fttol@lval^(0+256),f
 16044  1AC9  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16045  1ACA  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16046  1ACB  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16047  1ACC  0B89               	decfsz	9,f
 16048  1ACD  2AC8               	goto	u8305
 16049  1ACE  3001               	movlw	1
 16050  1ACF  02AD               	subwf	___fttol@exp1^(0+256),f
 16051  1AD0                     l2216:	
 16052  1AD0  082D               	movf	___fttol@exp1^(0+256),w
 16053  1AD1  1D03               	btfss	3,2
 16054  1AD2  2AC7               	goto	l7928
 16055  1AD3                     l7930:	
 16056  1AD3  0828               	movf	___fttol@sign1^(0+256),w
 16057  1AD4  1903               	btfsc	3,2
 16058  1AD5  2AE1               	goto	l7934
 16059  1AD6  09A9               	comf	___fttol@lval^(0+256),f
 16060  1AD7  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16061  1AD8  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16062  1AD9  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16063  1ADA  0AA9               	incf	___fttol@lval^(0+256),f
 16064  1ADB  1903               	skipnz
 16065  1ADC  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16066  1ADD  1903               	skipnz
 16067  1ADE  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16068  1ADF  1903               	skipnz
 16069  1AE0  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16070  1AE1                     l7934:	
 16071  1AE1  082C               	movf	(___fttol@lval+3)^(0+256),w
 16072  1AE2  00A3               	movwf	(?___fttol+3)^(0+256)
 16073  1AE3  082B               	movf	(___fttol@lval+2)^(0+256),w
 16074  1AE4  00A2               	movwf	(?___fttol+2)^(0+256)
 16075  1AE5  082A               	movf	(___fttol@lval+1)^(0+256),w
 16076  1AE6  00A1               	movwf	(?___fttol+1)^(0+256)
 16077  1AE7  0829               	movf	___fttol@lval^(0+256),w
 16078  1AE8  00A0               	movwf	?___fttol^(0+256)
 16079  1AE9  0008               	return
 16080  1AEA                     __end_of___fttol:	
 16081                           
 16082                           	psect	text50
 16083  21C8                     __ptext50:	
 16084 ;; *************** function ___ftge *****************
 16085 ;; Defined at:
 16086 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16087 ;; Parameters:    Size  Location     Type
 16088 ;;  ff1             3    0[BANK1 ] float 
 16089 ;;  ff2             3    3[BANK1 ] float 
 16090 ;; Auto vars:     Size  Location     Type
 16091 ;;		None
 16092 ;; Return value:  Size  Location     Type
 16093 ;;		None               void
 16094 ;; Registers used:
 16095 ;;		wreg, status,2, status,0
 16096 ;; Tracked objects:
 16097 ;;		On entry : 0/0
 16098 ;;		On exit  : 0/0
 16099 ;;		Unchanged: 0/0
 16100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16101 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16103 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16104 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16105 ;;Total ram usage:        9 bytes
 16106 ;; Hardware stack levels used:    1
 16107 ;; Hardware stack levels required when called:    3
 16108 ;; This function calls:
 16109 ;;		Nothing
 16110 ;; This function is called by:
 16111 ;;		_modCos
 16112 ;;		_modTri
 16113 ;;		_modSaw
 16114 ;;		_modSquare
 16115 ;;		_cos
 16116 ;;		_pow
 16117 ;;		_sin
 16118 ;;		_exp
 16119 ;;		_floor
 16120 ;;		_ldexp
 16121 ;;		_log
 16122 ;; This function uses a non-reentrant model
 16123 ;;
 16124                           
 16125                           
 16126                           ;psect for function ___ftge
 16127  21C8                     ___ftge:	
 16128                           
 16129                           ;incstack = 0
 16130                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16131  21C8  0021               	movlb	1	; select bank1
 16132  21C9  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16133  21CA  29DF               	goto	l7822
 16134  21CB  0920               	comf	___ftge@ff1^(0+128),w
 16135  21CC  00A6               	movwf	??___ftge^(0+128)
 16136  21CD  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16137  21CE  00A7               	movwf	(??___ftge^(0+128)+1)
 16138  21CF  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16139  21D0  00A8               	movwf	(??___ftge^(0+128)+2)
 16140  21D1  0AA6               	incf	??___ftge^(0+128),f
 16141  21D2  1903               	skipnz
 16142  21D3  0AA7               	incf	(??___ftge^(0+128)+1),f
 16143  21D4  1903               	skipnz
 16144  21D5  0AA8               	incf	(??___ftge^(0+128)+2),f
 16145  21D6  3000               	movlw	0
 16146  21D7  0726               	addwf	??___ftge^(0+128),w
 16147  21D8  00A0               	movwf	___ftge@ff1^(0+128)
 16148  21D9  3000               	movlw	0
 16149  21DA  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16150  21DB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16151  21DC  3080               	movlw	128
 16152  21DD  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16153  21DE  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16154  21DF                     l7822:	
 16155  21DF  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16156  21E0  29F5               	goto	l7826
 16157  21E1  0923               	comf	___ftge@ff2^(0+128),w
 16158  21E2  00A6               	movwf	??___ftge^(0+128)
 16159  21E3  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16160  21E4  00A7               	movwf	(??___ftge^(0+128)+1)
 16161  21E5  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16162  21E6  00A8               	movwf	(??___ftge^(0+128)+2)
 16163  21E7  0AA6               	incf	??___ftge^(0+128),f
 16164  21E8  1903               	skipnz
 16165  21E9  0AA7               	incf	(??___ftge^(0+128)+1),f
 16166  21EA  1903               	skipnz
 16167  21EB  0AA8               	incf	(??___ftge^(0+128)+2),f
 16168  21EC  3000               	movlw	0
 16169  21ED  0726               	addwf	??___ftge^(0+128),w
 16170  21EE  00A3               	movwf	___ftge@ff2^(0+128)
 16171  21EF  3000               	movlw	0
 16172  21F0  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16173  21F1  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16174  21F2  3080               	movlw	128
 16175  21F3  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16176  21F4  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16177  21F5                     l7826:	
 16178  21F5  3080               	movlw	128
 16179  21F6  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16180  21F7  3080               	movlw	128
 16181  21F8  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16182  21F9  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16183  21FA  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16184  21FB  1D03               	skipz
 16185  21FC  0008               	return
 16186  21FD  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16187  21FE  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16188  21FF  1D03               	skipz
 16189  2200  0008               	return
 16190  2201  0823               	movf	___ftge@ff2^(0+128),w
 16191  2202  0220               	subwf	___ftge@ff1^(0+128),w
 16192  2203  0008               	return
 16193  2204                     __end_of___ftge:	
 16194                           
 16195                           	psect	text51
 16196  2204                     __ptext51:	
 16197 ;; *************** function ___altoft *****************
 16198 ;; Defined at:
 16199 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16200 ;; Parameters:    Size  Location     Type
 16201 ;;  c               4    8[BANK1 ] long 
 16202 ;; Auto vars:     Size  Location     Type
 16203 ;;  sign            1   15[BANK1 ] unsigned char 
 16204 ;;  exp             1   14[BANK1 ] unsigned char 
 16205 ;; Return value:  Size  Location     Type
 16206 ;;                  3    8[BANK1 ] float 
 16207 ;; Registers used:
 16208 ;;		wreg, status,2, status,0, pclath, cstack
 16209 ;; Tracked objects:
 16210 ;;		On entry : 0/0
 16211 ;;		On exit  : 0/0
 16212 ;;		Unchanged: 0/0
 16213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16214 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16215 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16216 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16217 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16218 ;;Total ram usage:        8 bytes
 16219 ;; Hardware stack levels used:    1
 16220 ;; Hardware stack levels required when called:    4
 16221 ;; This function calls:
 16222 ;;		___ftpack
 16223 ;; This function is called by:
 16224 ;;		_getModulationDelayTime
 16225 ;;		_floor
 16226 ;; This function uses a non-reentrant model
 16227 ;;
 16228                           
 16229                           
 16230                           ;psect for function ___altoft
 16231  2204                     ___altoft:	
 16232                           
 16233                           ;incstack = 0
 16234                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16235  2204  0021               	movlb	1	; select bank1
 16236  2205  01AF               	clrf	___altoft@sign^(0+128)
 16237  2206  308E               	movlw	142
 16238  2207  00AC               	movwf	??___altoft^(0+128)
 16239  2208  082C               	movf	??___altoft^(0+128),w
 16240  2209  00AE               	movwf	___altoft@exp^(0+128)
 16241  220A  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 16242  220B  2A19               	goto	l7742
 16243  220C  09A8               	comf	___altoft@c^(0+128),f
 16244  220D  09A9               	comf	(___altoft@c+1)^(0+128),f
 16245  220E  09AA               	comf	(___altoft@c+2)^(0+128),f
 16246  220F  09AB               	comf	(___altoft@c+3)^(0+128),f
 16247  2210  0AA8               	incf	___altoft@c^(0+128),f
 16248  2211  1903               	skipnz
 16249  2212  0AA9               	incf	(___altoft@c+1)^(0+128),f
 16250  2213  1903               	skipnz
 16251  2214  0AAA               	incf	(___altoft@c+2)^(0+128),f
 16252  2215  1903               	skipnz
 16253  2216  0AAB               	incf	(___altoft@c+3)^(0+128),f
 16254  2217  01AF               	clrf	___altoft@sign^(0+128)
 16255  2218  0AAF               	incf	___altoft@sign^(0+128),f
 16256  2219                     l7742:	
 16257  2219  30FF               	movlw	255
 16258  221A  052B               	andwf	(___altoft@c+3)^(0+128),w
 16259  221B  1903               	btfsc	3,2
 16260  221C  2A29               	goto	l7744
 16261  221D  3001               	movlw	1
 16262  221E                     u7825:	
 16263  221E  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 16264  221F  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 16265  2220  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 16266  2221  0CA8               	rrf	___altoft@c^(0+128),f
 16267  2222  0B89               	decfsz	9,f
 16268  2223  2A1E               	goto	u7825
 16269  2224  3001               	movlw	1
 16270  2225  00AC               	movwf	??___altoft^(0+128)
 16271  2226  082C               	movf	??___altoft^(0+128),w
 16272  2227  07AE               	addwf	___altoft@exp^(0+128),f
 16273  2228  2A19               	goto	l7742
 16274  2229                     l7744:	
 16275  2229  0828               	movf	___altoft@c^(0+128),w
 16276  222A  00A0               	movwf	___ftpack@arg^(0+128)
 16277  222B  0829               	movf	(___altoft@c+1)^(0+128),w
 16278  222C  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16279  222D  082A               	movf	(___altoft@c+2)^(0+128),w
 16280  222E  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16281  222F  082E               	movf	___altoft@exp^(0+128),w
 16282  2230  00AC               	movwf	??___altoft^(0+128)
 16283  2231  082C               	movf	??___altoft^(0+128),w
 16284  2232  00A3               	movwf	___ftpack@exp^(0+128)
 16285  2233  082F               	movf	___altoft@sign^(0+128),w
 16286  2234  00AD               	movwf	(??___altoft+1)^(0+128)
 16287  2235  082D               	movf	(??___altoft+1)^(0+128),w
 16288  2236  00A4               	movwf	___ftpack@sign^(0+128)
 16289  2237  31A6  2637         	fcall	___ftpack
 16290  2239  0021               	movlb	1	; select bank1
 16291  223A  0820               	movf	?___ftpack^(0+128),w
 16292  223B  00A8               	movwf	?___altoft^(0+128)
 16293  223C  0821               	movf	(?___ftpack+1)^(0+128),w
 16294  223D  00A9               	movwf	(?___altoft+1)^(0+128)
 16295  223E  0822               	movf	(?___ftpack+2)^(0+128),w
 16296  223F  00AA               	movwf	(?___altoft+2)^(0+128)
 16297  2240  0008               	return
 16298  2241                     __end_of___altoft:	
 16299                           
 16300                           	psect	text52
 16301  269C                     __ptext52:	
 16302 ;; *************** function _eval_poly *****************
 16303 ;; Defined at:
 16304 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16305 ;; Parameters:    Size  Location     Type
 16306 ;;  x               3   20[BANK2 ] float 
 16307 ;;  d               2   23[BANK2 ] PTR const 
 16308 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16309 ;;  n               2   25[BANK2 ] int 
 16310 ;; Auto vars:     Size  Location     Type
 16311 ;;  res             3   27[BANK2 ] int 
 16312 ;; Return value:  Size  Location     Type
 16313 ;;                  3   20[BANK2 ] int 
 16314 ;; Registers used:
 16315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16316 ;; Tracked objects:
 16317 ;;		On entry : 0/0
 16318 ;;		On exit  : 0/0
 16319 ;;		Unchanged: 0/0
 16320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16321 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16322 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16324 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16325 ;;Total ram usage:       10 bytes
 16326 ;; Hardware stack levels used:    1
 16327 ;; Hardware stack levels required when called:    5
 16328 ;; This function calls:
 16329 ;;		___ftadd
 16330 ;;		___ftmul
 16331 ;;		___wmul
 16332 ;; This function is called by:
 16333 ;;		_sin
 16334 ;;		_exp
 16335 ;;		_log
 16336 ;; This function uses a non-reentrant model
 16337 ;;
 16338                           
 16339                           
 16340                           ;psect for function _eval_poly
 16341  269C                     _eval_poly:	
 16342                           
 16343                           ;incstack = 0
 16344                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16345  269C  0022               	movlb	2	; select bank2
 16346  269D  083A               	movf	(eval_poly@n+1)^(0+256),w
 16347  269E  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16348  269F  0839               	movf	eval_poly@n^(0+256),w
 16349  26A0  00AE               	movwf	___wmul@multiplier^(0+256)
 16350  26A1  3003               	movlw	3
 16351  26A2  00B0               	movwf	___wmul@multiplicand^(0+256)
 16352  26A3  3000               	movlw	0
 16353  26A4  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16354  26A5  31AE  2650  31A6   	fcall	___wmul
 16355  26A8  0022               	movlb	2	; select bank2
 16356  26A9  0837               	movf	eval_poly@d^(0+256),w
 16357  26AA  072E               	addwf	?___wmul^(0+256),w
 16358  26AB  0084               	movwf	4
 16359  26AC  0838               	movf	(eval_poly@d+1)^(0+256),w
 16360  26AD  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16361  26AE  0085               	movwf	5
 16362  26AF  3F00               	moviw [0]fsr0
 16363  26B0  00BB               	movwf	eval_poly@res^(0+256)
 16364  26B1  3F01               	moviw [1]fsr0
 16365  26B2  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16366  26B3  3F02               	moviw [2]fsr0
 16367  26B4                     L19:	
 16368  26B4  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16369  26B5  0839               	movf	eval_poly@n^(0+256),w
 16370  26B6  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16371  26B7  1903               	btfsc	3,2
 16372  26B8  2F07               	goto	l8104
 16373  26B9  30FF               	movlw	255
 16374  26BA  07B9               	addwf	eval_poly@n^(0+256),f
 16375  26BB  30FF               	movlw	255
 16376  26BC  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16377  26BD  083A               	movf	(eval_poly@n+1)^(0+256),w
 16378  26BE  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16379  26BF  0839               	movf	eval_poly@n^(0+256),w
 16380  26C0  00AE               	movwf	___wmul@multiplier^(0+256)
 16381  26C1  3003               	movlw	3
 16382  26C2  00B0               	movwf	___wmul@multiplicand^(0+256)
 16383  26C3  3000               	movlw	0
 16384  26C4  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16385  26C5  31AE  2650  31A6   	fcall	___wmul
 16386  26C8  0022               	movlb	2	; select bank2
 16387  26C9  0837               	movf	eval_poly@d^(0+256),w
 16388  26CA  072E               	addwf	?___wmul^(0+256),w
 16389  26CB  0084               	movwf	4
 16390  26CC  0838               	movf	(eval_poly@d+1)^(0+256),w
 16391  26CD  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16392  26CE  0085               	movwf	5
 16393  26CF  3F00               	moviw [0]fsr0
 16394  26D0  0021               	movlb	1	; select bank1
 16395  26D1  00C1               	movwf	___ftadd@f1^(0+128)
 16396  26D2  3F01               	moviw [1]fsr0
 16397  26D3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16398  26D4  3F02               	moviw [2]fsr0
 16399  26D5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16400  26D6  0022               	movlb	2	; select bank2
 16401  26D7  083B               	movf	eval_poly@res^(0+256),w
 16402  26D8  0021               	movlb	1	; select bank1
 16403  26D9  00AE               	movwf	___ftmul@f1^(0+128)
 16404  26DA  0022               	movlb	2	; select bank2
 16405  26DB  083C               	movf	(eval_poly@res+1)^(0+256),w
 16406  26DC  0021               	movlb	1	; select bank1
 16407  26DD  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16408  26DE  0022               	movlb	2	; select bank2
 16409  26DF  083D               	movf	(eval_poly@res+2)^(0+256),w
 16410  26E0  0021               	movlb	1	; select bank1
 16411  26E1  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16412  26E2  0022               	movlb	2	; select bank2
 16413  26E3  0834               	movf	eval_poly@x^(0+256),w
 16414  26E4  0021               	movlb	1	; select bank1
 16415  26E5  00B1               	movwf	___ftmul@f2^(0+128)
 16416  26E6  0022               	movlb	2	; select bank2
 16417  26E7  0835               	movf	(eval_poly@x+1)^(0+256),w
 16418  26E8  0021               	movlb	1	; select bank1
 16419  26E9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16420  26EA  0022               	movlb	2	; select bank2
 16421  26EB  0836               	movf	(eval_poly@x+2)^(0+256),w
 16422  26EC  0021               	movlb	1	; select bank1
 16423  26ED  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16424  26EE  3187  273B  31A6   	fcall	___ftmul
 16425  26F1  0021               	movlb	1	; select bank1
 16426  26F2  082E               	movf	?___ftmul^(0+128),w
 16427  26F3  00C4               	movwf	___ftadd@f2^(0+128)
 16428  26F4  082F               	movf	(?___ftmul+1)^(0+128),w
 16429  26F5  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16430  26F6  0830               	movf	(?___ftmul+2)^(0+128),w
 16431  26F7  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16432  26F8  3190  200F  31A6   	fcall	___ftadd
 16433  26FB  0021               	movlb	1	; select bank1
 16434  26FC  0841               	movf	?___ftadd^(0+128),w
 16435  26FD  0022               	movlb	2	; select bank2
 16436  26FE  00BB               	movwf	eval_poly@res^(0+256)
 16437  26FF  0021               	movlb	1	; select bank1
 16438  2700  0842               	movf	(?___ftadd+1)^(0+128),w
 16439  2701  0022               	movlb	2	; select bank2
 16440  2702  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16441  2703  0021               	movlb	1	; select bank1
 16442  2704  0843               	movf	(?___ftadd+2)^(0+128),w
 16443  2705  0022               	movlb	2	; select bank2
 16444  2706  2EB4               	goto	L19
 16445  2707                     l8104:	
 16446  2707  083B               	movf	eval_poly@res^(0+256),w
 16447  2708  00B4               	movwf	?_eval_poly^(0+256)
 16448  2709  083C               	movf	(eval_poly@res+1)^(0+256),w
 16449  270A  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16450  270B  083D               	movf	(eval_poly@res+2)^(0+256),w
 16451  270C  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16452  270D  0008               	return
 16453  270E                     __end_of_eval_poly:	
 16454                           
 16455                           	psect	text53
 16456  2E50                     __ptext53:	
 16457 ;; *************** function ___wmul *****************
 16458 ;; Defined at:
 16459 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16460 ;; Parameters:    Size  Location     Type
 16461 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16462 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16463 ;; Auto vars:     Size  Location     Type
 16464 ;;  product         2   18[BANK2 ] unsigned int 
 16465 ;; Return value:  Size  Location     Type
 16466 ;;                  2   14[BANK2 ] unsigned int 
 16467 ;; Registers used:
 16468 ;;		wreg, status,2, status,0
 16469 ;; Tracked objects:
 16470 ;;		On entry : 0/0
 16471 ;;		On exit  : 0/0
 16472 ;;		Unchanged: 0/0
 16473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16474 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16475 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16477 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16478 ;;Total ram usage:        6 bytes
 16479 ;; Hardware stack levels used:    1
 16480 ;; Hardware stack levels required when called:    3
 16481 ;; This function calls:
 16482 ;;		Nothing
 16483 ;; This function is called by:
 16484 ;;		_calcCosArray
 16485 ;;		_updateModulationArray
 16486 ;;		_modCos
 16487 ;;		_eval_poly
 16488 ;; This function uses a non-reentrant model
 16489 ;;
 16490                           
 16491                           
 16492                           ;psect for function ___wmul
 16493  2E50                     ___wmul:	
 16494                           
 16495                           ;incstack = 0
 16496                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16497  2E50  0022               	movlb	2	; select bank2
 16498  2E51  01B2               	clrf	___wmul@product^(0+256)
 16499  2E52  01B3               	clrf	(___wmul@product+1)^(0+256)
 16500  2E53                     l7720:	
 16501  2E53  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16502  2E54  2E59               	goto	l1958
 16503  2E55  0830               	movf	___wmul@multiplicand^(0+256),w
 16504  2E56  07B2               	addwf	___wmul@product^(0+256),f
 16505  2E57  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16506  2E58  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16507  2E59                     l1958:	
 16508  2E59  3001               	movlw	1
 16509  2E5A                     u7785:	
 16510  2E5A  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16511  2E5B  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16512  2E5C  0B89               	decfsz	9,f
 16513  2E5D  2E5A               	goto	u7785
 16514  2E5E  3001               	movlw	1
 16515  2E5F                     u7795:	
 16516  2E5F  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16517  2E60  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16518  2E61  0B89               	decfsz	9,f
 16519  2E62  2E5F               	goto	u7795
 16520  2E63  082E               	movf	___wmul@multiplier^(0+256),w
 16521  2E64  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16522  2E65  1D03               	btfss	3,2
 16523  2E66  2E53               	goto	l7720
 16524  2E67  0833               	movf	(___wmul@product+1)^(0+256),w
 16525  2E68  00AF               	movwf	(?___wmul+1)^(0+256)
 16526  2E69  0832               	movf	___wmul@product^(0+256),w
 16527  2E6A  00AE               	movwf	?___wmul^(0+256)
 16528  2E6B  0008               	return
 16529  2E6C                     __end_of___wmul:	
 16530                           
 16531                           	psect	text54
 16532  073B                     __ptext54:	
 16533 ;; *************** function ___ftmul *****************
 16534 ;; Defined at:
 16535 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16536 ;; Parameters:    Size  Location     Type
 16537 ;;  f1              3   14[BANK1 ] float 
 16538 ;;  f2              3   17[BANK1 ] float 
 16539 ;; Auto vars:     Size  Location     Type
 16540 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16541 ;;  sign            1   29[BANK1 ] unsigned char 
 16542 ;;  cntr            1   28[BANK1 ] unsigned char 
 16543 ;;  exp             1   24[BANK1 ] unsigned char 
 16544 ;; Return value:  Size  Location     Type
 16545 ;;                  3   14[BANK1 ] float 
 16546 ;; Registers used:
 16547 ;;		wreg, status,2, status,0, pclath, cstack
 16548 ;; Tracked objects:
 16549 ;;		On entry : 0/0
 16550 ;;		On exit  : 0/0
 16551 ;;		Unchanged: 0/0
 16552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16553 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16554 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16555 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16556 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16557 ;;Total ram usage:       16 bytes
 16558 ;; Hardware stack levels used:    1
 16559 ;; Hardware stack levels required when called:    4
 16560 ;; This function calls:
 16561 ;;		___ftpack
 16562 ;; This function is called by:
 16563 ;;		_set_subdivision
 16564 ;;		_map
 16565 ;;		_scaleA100kPot
 16566 ;;		_scaleA10kPot
 16567 ;;		_scaleiA10kPot
 16568 ;;		_calcCosArray
 16569 ;;		_modCos
 16570 ;;		_modTri
 16571 ;;		_modSaw
 16572 ;;		_pow
 16573 ;;		_sin
 16574 ;;		_eval_poly
 16575 ;;		_exp
 16576 ;;		_log
 16577 ;;		_scalePotValue
 16578 ;;		_scaleiA100kPot
 16579 ;; This function uses a non-reentrant model
 16580 ;;
 16581                           
 16582                           
 16583                           ;psect for function ___ftmul
 16584  073B                     ___ftmul:	
 16585                           
 16586                           ;incstack = 0
 16587                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16588  073B  0021               	movlb	1	; select bank1
 16589  073C  082E               	movf	___ftmul@f1^(0+128),w
 16590  073D  00B4               	movwf	??___ftmul^(0+128)
 16591  073E  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16592  073F  00B5               	movwf	(??___ftmul^(0+128)+1)
 16593  0740  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16594  0741  00B6               	movwf	(??___ftmul^(0+128)+2)
 16595  0742  1003               	clrc
 16596  0743  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16597  0744  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16598  0745  00B7               	movwf	(??___ftmul+3)^(0+128)
 16599  0746  0837               	movf	(??___ftmul+3)^(0+128),w
 16600  0747  00B8               	movwf	___ftmul@exp^(0+128)
 16601  0748  0838               	movf	___ftmul@exp^(0+128),w
 16602  0749  1D03               	btfss	3,2
 16603  074A  2F52               	goto	l7844
 16604  074B  3000               	movlw	0
 16605  074C  00AE               	movwf	?___ftmul^(0+128)
 16606  074D  3000               	movlw	0
 16607  074E  00AF               	movwf	(?___ftmul+1)^(0+128)
 16608  074F  3000               	movlw	0
 16609  0750  00B0               	movwf	(?___ftmul+2)^(0+128)
 16610  0751  0008               	return
 16611  0752                     l7844:	
 16612  0752  0831               	movf	___ftmul@f2^(0+128),w
 16613  0753  00B4               	movwf	??___ftmul^(0+128)
 16614  0754  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16615  0755  00B5               	movwf	(??___ftmul^(0+128)+1)
 16616  0756  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16617  0757  00B6               	movwf	(??___ftmul^(0+128)+2)
 16618  0758  1003               	clrc
 16619  0759  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16620  075A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16621  075B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16622  075C  0837               	movf	(??___ftmul+3)^(0+128),w
 16623  075D  00BD               	movwf	___ftmul@sign^(0+128)
 16624  075E  083D               	movf	___ftmul@sign^(0+128),w
 16625  075F  1D03               	btfss	3,2
 16626  0760  2F68               	goto	l7850
 16627  0761  3000               	movlw	0
 16628  0762  00AE               	movwf	?___ftmul^(0+128)
 16629  0763  3000               	movlw	0
 16630  0764  00AF               	movwf	(?___ftmul+1)^(0+128)
 16631  0765  3000               	movlw	0
 16632  0766  00B0               	movwf	(?___ftmul+2)^(0+128)
 16633  0767  0008               	return
 16634  0768                     l7850:	
 16635  0768  083D               	movf	___ftmul@sign^(0+128),w
 16636  0769  3E7B               	addlw	123
 16637  076A  00B4               	movwf	??___ftmul^(0+128)
 16638  076B  0834               	movf	??___ftmul^(0+128),w
 16639  076C  07B8               	addwf	___ftmul@exp^(0+128),f
 16640  076D  082E               	movf	___ftmul@f1^(0+128),w
 16641  076E  00B4               	movwf	??___ftmul^(0+128)
 16642  076F  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16643  0770  00B5               	movwf	(??___ftmul^(0+128)+1)
 16644  0771  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16645  0772  00B6               	movwf	(??___ftmul^(0+128)+2)
 16646  0773  3010               	movlw	16
 16647  0774                     u8125:	
 16648  0774  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16649  0775  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16650  0776  0CB4               	rrf	??___ftmul^(0+128),f
 16651  0777  0B89               	decfsz	9,f
 16652  0778  2F74               	goto	u8125
 16653  0779  0834               	movf	??___ftmul^(0+128),w
 16654  077A  00B7               	movwf	(??___ftmul+3)^(0+128)
 16655  077B  0837               	movf	(??___ftmul+3)^(0+128),w
 16656  077C  00BD               	movwf	___ftmul@sign^(0+128)
 16657  077D  0831               	movf	___ftmul@f2^(0+128),w
 16658  077E  00B4               	movwf	??___ftmul^(0+128)
 16659  077F  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16660  0780  00B5               	movwf	(??___ftmul^(0+128)+1)
 16661  0781  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16662  0782  00B6               	movwf	(??___ftmul^(0+128)+2)
 16663  0783  3010               	movlw	16
 16664  0784                     u8135:	
 16665  0784  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16666  0785  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16667  0786  0CB4               	rrf	??___ftmul^(0+128),f
 16668  0787  0B89               	decfsz	9,f
 16669  0788  2F84               	goto	u8135
 16670  0789  0834               	movf	??___ftmul^(0+128),w
 16671  078A  00B7               	movwf	(??___ftmul+3)^(0+128)
 16672  078B  0837               	movf	(??___ftmul+3)^(0+128),w
 16673  078C  06BD               	xorwf	___ftmul@sign^(0+128),f
 16674  078D  3080               	movlw	128
 16675  078E  00B4               	movwf	??___ftmul^(0+128)
 16676  078F  0834               	movf	??___ftmul^(0+128),w
 16677  0790  05BD               	andwf	___ftmul@sign^(0+128),f
 16678  0791  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16679  0792  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16680  0793  30FF               	movlw	255
 16681  0794  05B1               	andwf	___ftmul@f2^(0+128),f
 16682  0795  30FF               	movlw	255
 16683  0796  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16684  0797  3000               	movlw	0
 16685  0798  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16686  0799  3000               	movlw	0
 16687  079A  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16688  079B  3000               	movlw	0
 16689  079C  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16690  079D  3000               	movlw	0
 16691  079E  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16692  079F  3007               	movlw	7
 16693  07A0  00B4               	movwf	??___ftmul^(0+128)
 16694  07A1  0834               	movf	??___ftmul^(0+128),w
 16695  07A2  00BC               	movwf	___ftmul@cntr^(0+128)
 16696  07A3                     l7862:	
 16697  07A3  1C2E               	btfss	___ftmul@f1^(0+128),0
 16698  07A4  2FAB               	goto	l7866
 16699  07A5  0831               	movf	___ftmul@f2^(0+128),w
 16700  07A6  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16701  07A7  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16702  07A8  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16703  07A9  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16704  07AA  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16705  07AB                     l7866:	
 16706  07AB  3001               	movlw	1
 16707  07AC                     u8155:	
 16708  07AC  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16709  07AD  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16710  07AE  0CAE               	rrf	___ftmul@f1^(0+128),f
 16711  07AF  0B89               	decfsz	9,f
 16712  07B0  2FAC               	goto	u8155
 16713  07B1  3001               	movlw	1
 16714  07B2                     u8165:	
 16715  07B2  35B1               	lslf	___ftmul@f2^(0+128),f
 16716  07B3  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16717  07B4  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16718  07B5  0B89               	decfsz	9,f
 16719  07B6  2FB2               	goto	u8165
 16720  07B7  3001               	movlw	1
 16721  07B8  02BC               	subwf	___ftmul@cntr^(0+128),f
 16722  07B9  1D03               	btfss	3,2
 16723  07BA  2FA3               	goto	l7862
 16724  07BB  3009               	movlw	9
 16725  07BC  00B4               	movwf	??___ftmul^(0+128)
 16726  07BD  0834               	movf	??___ftmul^(0+128),w
 16727  07BE  00BC               	movwf	___ftmul@cntr^(0+128)
 16728  07BF                     l7874:	
 16729  07BF  1C2E               	btfss	___ftmul@f1^(0+128),0
 16730  07C0  2FC7               	goto	l7878
 16731  07C1  0831               	movf	___ftmul@f2^(0+128),w
 16732  07C2  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16733  07C3  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16734  07C4  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16735  07C5  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16736  07C6  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16737  07C7                     l7878:	
 16738  07C7  3001               	movlw	1
 16739  07C8                     u8195:	
 16740  07C8  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16741  07C9  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16742  07CA  0CAE               	rrf	___ftmul@f1^(0+128),f
 16743  07CB  0B89               	decfsz	9,f
 16744  07CC  2FC8               	goto	u8195
 16745  07CD  3001               	movlw	1
 16746  07CE                     u8205:	
 16747  07CE  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16748  07CF  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16749  07D0  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16750  07D1  0B89               	decfsz	9,f
 16751  07D2  2FCE               	goto	u8205
 16752  07D3  3001               	movlw	1
 16753  07D4  02BC               	subwf	___ftmul@cntr^(0+128),f
 16754  07D5  1D03               	btfss	3,2
 16755  07D6  2FBF               	goto	l7874
 16756  07D7  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16757  07D8  00A0               	movwf	___ftpack@arg^(0+128)
 16758  07D9  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16759  07DA  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16760  07DB  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16761  07DC  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16762  07DD  0838               	movf	___ftmul@exp^(0+128),w
 16763  07DE  00B4               	movwf	??___ftmul^(0+128)
 16764  07DF  0834               	movf	??___ftmul^(0+128),w
 16765  07E0  00A3               	movwf	___ftpack@exp^(0+128)
 16766  07E1  083D               	movf	___ftmul@sign^(0+128),w
 16767  07E2  00B5               	movwf	(??___ftmul+1)^(0+128)
 16768  07E3  0835               	movf	(??___ftmul+1)^(0+128),w
 16769  07E4  00A4               	movwf	___ftpack@sign^(0+128)
 16770  07E5  31A6  2637         	fcall	___ftpack
 16771  07E7  0021               	movlb	1	; select bank1
 16772  07E8  0820               	movf	?___ftpack^(0+128),w
 16773  07E9  00AE               	movwf	?___ftmul^(0+128)
 16774  07EA  0821               	movf	(?___ftpack+1)^(0+128),w
 16775  07EB  00AF               	movwf	(?___ftmul+1)^(0+128)
 16776  07EC  0822               	movf	(?___ftpack+2)^(0+128),w
 16777  07ED  00B0               	movwf	(?___ftmul+2)^(0+128)
 16778  07EE  0008               	return
 16779  07EF                     __end_of___ftmul:	
 16780                           
 16781                           	psect	text55
 16782  2FA3                     __ptext55:	
 16783 ;; *************** function ___ftsub *****************
 16784 ;; Defined at:
 16785 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16786 ;; Parameters:    Size  Location     Type
 16787 ;;  f2              3   23[BANK2 ] float 
 16788 ;;  f1              3   26[BANK2 ] float 
 16789 ;; Auto vars:     Size  Location     Type
 16790 ;;		None
 16791 ;; Return value:  Size  Location     Type
 16792 ;;                  3   23[BANK2 ] float 
 16793 ;; Registers used:
 16794 ;;		wreg, status,2, status,0, pclath, cstack
 16795 ;; Tracked objects:
 16796 ;;		On entry : 0/0
 16797 ;;		On exit  : 0/0
 16798 ;;		Unchanged: 0/0
 16799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16800 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16803 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16804 ;;Total ram usage:        6 bytes
 16805 ;; Hardware stack levels used:    1
 16806 ;; Hardware stack levels required when called:    5
 16807 ;; This function calls:
 16808 ;;		___ftadd
 16809 ;; This function is called by:
 16810 ;;		_sin
 16811 ;;		_exp
 16812 ;; This function uses a non-reentrant model
 16813 ;;
 16814                           
 16815                           
 16816                           ;psect for function ___ftsub
 16817  2FA3                     ___ftsub:	
 16818                           
 16819                           ;incstack = 0
 16820                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16821  2FA3  0022               	movlb	2	; select bank2
 16822  2FA4  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16823  2FA5  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 16824  2FA6  0437               	iorwf	___ftsub@f2^(0+256),w
 16825  2FA7  1903               	skipnz
 16826  2FA8  2FAB               	goto	l8066
 16827  2FA9  3080               	movlw	128
 16828  2FAA  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 16829  2FAB                     l8066:	
 16830  2FAB  083A               	movf	___ftsub@f1^(0+256),w
 16831  2FAC  0021               	movlb	1	; select bank1
 16832  2FAD  00C1               	movwf	___ftadd@f1^(0+128)
 16833  2FAE  0022               	movlb	2	; select bank2
 16834  2FAF  083B               	movf	(___ftsub@f1+1)^(0+256),w
 16835  2FB0  0021               	movlb	1	; select bank1
 16836  2FB1  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16837  2FB2  0022               	movlb	2	; select bank2
 16838  2FB3  083C               	movf	(___ftsub@f1+2)^(0+256),w
 16839  2FB4  0021               	movlb	1	; select bank1
 16840  2FB5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16841  2FB6  0022               	movlb	2	; select bank2
 16842  2FB7  0837               	movf	___ftsub@f2^(0+256),w
 16843  2FB8  0021               	movlb	1	; select bank1
 16844  2FB9  00C4               	movwf	___ftadd@f2^(0+128)
 16845  2FBA  0022               	movlb	2	; select bank2
 16846  2FBB  0838               	movf	(___ftsub@f2+1)^(0+256),w
 16847  2FBC  0021               	movlb	1	; select bank1
 16848  2FBD  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16849  2FBE  0022               	movlb	2	; select bank2
 16850  2FBF  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16851  2FC0  0021               	movlb	1	; select bank1
 16852  2FC1  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16853  2FC2  3190  200F         	fcall	___ftadd
 16854  2FC4  0021               	movlb	1	; select bank1
 16855  2FC5  0841               	movf	?___ftadd^(0+128),w
 16856  2FC6  0022               	movlb	2	; select bank2
 16857  2FC7  00B7               	movwf	?___ftsub^(0+256)
 16858  2FC8  0021               	movlb	1	; select bank1
 16859  2FC9  0842               	movf	(?___ftadd+1)^(0+128),w
 16860  2FCA  0022               	movlb	2	; select bank2
 16861  2FCB  00B8               	movwf	(?___ftsub+1)^(0+256)
 16862  2FCC  0021               	movlb	1	; select bank1
 16863  2FCD  0843               	movf	(?___ftadd+2)^(0+128),w
 16864  2FCE  0022               	movlb	2	; select bank2
 16865  2FCF  00B9               	movwf	(?___ftsub+2)^(0+256)
 16866  2FD0  0008               	return
 16867  2FD1                     __end_of___ftsub:	
 16868                           
 16869                           	psect	text56
 16870  100F                     __ptext56:	
 16871 ;; *************** function ___ftadd *****************
 16872 ;; Defined at:
 16873 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16874 ;; Parameters:    Size  Location     Type
 16875 ;;  f1              3   33[BANK1 ] float 
 16876 ;;  f2              3   36[BANK1 ] float 
 16877 ;; Auto vars:     Size  Location     Type
 16878 ;;  exp1            1   45[BANK1 ] unsigned char 
 16879 ;;  exp2            1   44[BANK1 ] unsigned char 
 16880 ;;  sign            1   43[BANK1 ] unsigned char 
 16881 ;; Return value:  Size  Location     Type
 16882 ;;                  3   33[BANK1 ] float 
 16883 ;; Registers used:
 16884 ;;		wreg, status,2, status,0, pclath, cstack
 16885 ;; Tracked objects:
 16886 ;;		On entry : 0/0
 16887 ;;		On exit  : 0/0
 16888 ;;		Unchanged: 0/0
 16889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16890 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16891 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16892 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16893 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16894 ;;Total ram usage:       13 bytes
 16895 ;; Hardware stack levels used:    1
 16896 ;; Hardware stack levels required when called:    4
 16897 ;; This function calls:
 16898 ;;		___ftpack
 16899 ;; This function is called by:
 16900 ;;		_map
 16901 ;;		_scaleiA10kPot
 16902 ;;		_modCos
 16903 ;;		_modTri
 16904 ;;		_modSaw
 16905 ;;		_cos
 16906 ;;		___ftsub
 16907 ;;		_sin
 16908 ;;		_eval_poly
 16909 ;;		_floor
 16910 ;;		_log
 16911 ;;		_scalePotValue
 16912 ;; This function uses a non-reentrant model
 16913 ;;
 16914                           
 16915                           
 16916                           ;psect for function ___ftadd
 16917  100F                     ___ftadd:	
 16918                           
 16919                           ;incstack = 0
 16920                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16921  100F  0021               	movlb	1	; select bank1
 16922  1010  0841               	movf	___ftadd@f1^(0+128),w
 16923  1011  00C7               	movwf	??___ftadd^(0+128)
 16924  1012  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16925  1013  00C8               	movwf	(??___ftadd^(0+128)+1)
 16926  1014  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16927  1015  00C9               	movwf	(??___ftadd^(0+128)+2)
 16928  1016  1003               	clrc
 16929  1017  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16930  1018  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16931  1019  00CA               	movwf	(??___ftadd+3)^(0+128)
 16932  101A  084A               	movf	(??___ftadd+3)^(0+128),w
 16933  101B  00CD               	movwf	___ftadd@exp1^(0+128)
 16934  101C  0844               	movf	___ftadd@f2^(0+128),w
 16935  101D  00C7               	movwf	??___ftadd^(0+128)
 16936  101E  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16937  101F  00C8               	movwf	(??___ftadd^(0+128)+1)
 16938  1020  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16939  1021  00C9               	movwf	(??___ftadd^(0+128)+2)
 16940  1022  1003               	clrc
 16941  1023  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16942  1024  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16943  1025  00CA               	movwf	(??___ftadd+3)^(0+128)
 16944  1026  084A               	movf	(??___ftadd+3)^(0+128),w
 16945  1027  00CC               	movwf	___ftadd@exp2^(0+128)
 16946  1028  084D               	movf	___ftadd@exp1^(0+128),w
 16947  1029  1903               	btfsc	3,2
 16948  102A  2837               	goto	l7754
 16949  102B  084C               	movf	___ftadd@exp2^(0+128),w
 16950  102C  024D               	subwf	___ftadd@exp1^(0+128),w
 16951  102D  1803               	skipnc
 16952  102E  283E               	goto	l7758
 16953  102F  034D               	decf	___ftadd@exp1^(0+128),w
 16954  1030  3AFF               	xorlw	255
 16955  1031  074C               	addwf	___ftadd@exp2^(0+128),w
 16956  1032  00C7               	movwf	??___ftadd^(0+128)
 16957  1033  3019               	movlw	25
 16958  1034  0247               	subwf	??___ftadd^(0+128),w
 16959  1035  1C03               	skipc
 16960  1036  283E               	goto	l7758
 16961  1037                     l7754:	
 16962  1037  0844               	movf	___ftadd@f2^(0+128),w
 16963  1038  00C1               	movwf	?___ftadd^(0+128)
 16964  1039  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16965  103A  00C2               	movwf	(?___ftadd+1)^(0+128)
 16966  103B  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16967  103C  00C3               	movwf	(?___ftadd+2)^(0+128)
 16968  103D  0008               	return
 16969  103E                     l7758:	
 16970  103E  084C               	movf	___ftadd@exp2^(0+128),w
 16971  103F  1903               	btfsc	3,2
 16972  1040  0008               	return
 16973  1041  084D               	movf	___ftadd@exp1^(0+128),w
 16974  1042  024C               	subwf	___ftadd@exp2^(0+128),w
 16975  1043  1803               	skipnc
 16976  1044  284D               	goto	l7764
 16977  1045  034C               	decf	___ftadd@exp2^(0+128),w
 16978  1046  3AFF               	xorlw	255
 16979  1047  074D               	addwf	___ftadd@exp1^(0+128),w
 16980  1048  00C7               	movwf	??___ftadd^(0+128)
 16981  1049  3019               	movlw	25
 16982  104A  0247               	subwf	??___ftadd^(0+128),w
 16983  104B  1803               	btfsc	3,0
 16984  104C  0008               	return
 16985  104D                     l7764:	
 16986  104D  3006               	movlw	6
 16987  104E  00C7               	movwf	??___ftadd^(0+128)
 16988  104F  0847               	movf	??___ftadd^(0+128),w
 16989  1050  00CB               	movwf	___ftadd@sign^(0+128)
 16990  1051  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 16991  1052  17CB               	bsf	___ftadd@sign^(0+128),7
 16992  1053  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 16993  1054  174B               	bsf	___ftadd@sign^(0+128),6
 16994  1055  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 16995  1056  30FF               	movlw	255
 16996  1057  05C1               	andwf	___ftadd@f1^(0+128),f
 16997  1058  30FF               	movlw	255
 16998  1059  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 16999  105A  3000               	movlw	0
 17000  105B  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17001  105C  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17002  105D  30FF               	movlw	255
 17003  105E  05C4               	andwf	___ftadd@f2^(0+128),f
 17004  105F  30FF               	movlw	255
 17005  1060  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17006  1061  3000               	movlw	0
 17007  1062  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17008  1063  084C               	movf	___ftadd@exp2^(0+128),w
 17009  1064  024D               	subwf	___ftadd@exp1^(0+128),w
 17010  1065  1803               	skipnc
 17011  1066  2889               	goto	l7786
 17012  1067                     l7776:	
 17013  1067  3001               	movlw	1
 17014  1068                     u7935:	
 17015  1068  35C4               	lslf	___ftadd@f2^(0+128),f
 17016  1069  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17017  106A  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17018  106B  0B89               	decfsz	9,f
 17019  106C  2868               	goto	u7935
 17020  106D  3001               	movlw	1
 17021  106E  02CC               	subwf	___ftadd@exp2^(0+128),f
 17022  106F  084C               	movf	___ftadd@exp2^(0+128),w
 17023  1070  064D               	xorwf	___ftadd@exp1^(0+128),w
 17024  1071  1903               	skipnz
 17025  1072  2884               	goto	l7784
 17026  1073  3001               	movlw	1
 17027  1074  02CB               	subwf	___ftadd@sign^(0+128),f
 17028  1075  084B               	movf	___ftadd@sign^(0+128),w
 17029  1076  3907               	andlw	7
 17030  1077  1903               	btfsc	3,2
 17031  1078  2884               	goto	l7784
 17032  1079  2867               	goto	l7776
 17033  107A                     l7782:	
 17034  107A  3001               	movlw	1
 17035  107B                     u7965:	
 17036  107B  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17037  107C  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17038  107D  0CC1               	rrf	___ftadd@f1^(0+128),f
 17039  107E  0B89               	decfsz	9,f
 17040  107F  287B               	goto	u7965
 17041  1080  3001               	movlw	1
 17042  1081  00C7               	movwf	??___ftadd^(0+128)
 17043  1082  0847               	movf	??___ftadd^(0+128),w
 17044  1083  07CD               	addwf	___ftadd@exp1^(0+128),f
 17045  1084                     l7784:	
 17046  1084  084D               	movf	___ftadd@exp1^(0+128),w
 17047  1085  064C               	xorwf	___ftadd@exp2^(0+128),w
 17048  1086  1903               	btfsc	3,2
 17049  1087  28AE               	goto	l2156
 17050  1088  287A               	goto	l7782
 17051  1089                     l7786:	
 17052  1089  084D               	movf	___ftadd@exp1^(0+128),w
 17053  108A  024C               	subwf	___ftadd@exp2^(0+128),w
 17054  108B  1803               	skipnc
 17055  108C  28AE               	goto	l2156
 17056  108D                     l7788:	
 17057  108D  3001               	movlw	1
 17058  108E                     u7995:	
 17059  108E  35C1               	lslf	___ftadd@f1^(0+128),f
 17060  108F  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17061  1090  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17062  1091  0B89               	decfsz	9,f
 17063  1092  288E               	goto	u7995
 17064  1093  3001               	movlw	1
 17065  1094  02CD               	subwf	___ftadd@exp1^(0+128),f
 17066  1095  084C               	movf	___ftadd@exp2^(0+128),w
 17067  1096  064D               	xorwf	___ftadd@exp1^(0+128),w
 17068  1097  1903               	skipnz
 17069  1098  28AA               	goto	l7796
 17070  1099  3001               	movlw	1
 17071  109A  02CB               	subwf	___ftadd@sign^(0+128),f
 17072  109B  084B               	movf	___ftadd@sign^(0+128),w
 17073  109C  3907               	andlw	7
 17074  109D  1903               	btfsc	3,2
 17075  109E  28AA               	goto	l7796
 17076  109F  288D               	goto	l7788
 17077  10A0                     l7794:	
 17078  10A0  3001               	movlw	1
 17079  10A1                     u8025:	
 17080  10A1  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17081  10A2  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17082  10A3  0CC4               	rrf	___ftadd@f2^(0+128),f
 17083  10A4  0B89               	decfsz	9,f
 17084  10A5  28A1               	goto	u8025
 17085  10A6  3001               	movlw	1
 17086  10A7  00C7               	movwf	??___ftadd^(0+128)
 17087  10A8  0847               	movf	??___ftadd^(0+128),w
 17088  10A9  07CC               	addwf	___ftadd@exp2^(0+128),f
 17089  10AA                     l7796:	
 17090  10AA  084D               	movf	___ftadd@exp1^(0+128),w
 17091  10AB  064C               	xorwf	___ftadd@exp2^(0+128),w
 17092  10AC  1D03               	skipz
 17093  10AD  28A0               	goto	l7794
 17094  10AE                     l2156:	
 17095  10AE  1FCB               	btfss	___ftadd@sign^(0+128),7
 17096  10AF  28C0               	goto	l7800
 17097  10B0  30FF               	movlw	255
 17098  10B1  06C1               	xorwf	___ftadd@f1^(0+128),f
 17099  10B2  30FF               	movlw	255
 17100  10B3  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17101  10B4  30FF               	movlw	255
 17102  10B5  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17103  10B6  3001               	movlw	1
 17104  10B7  07C1               	addwf	___ftadd@f1^(0+128),f
 17105  10B8  3000               	movlw	0
 17106  10B9  1803               	skipnc
 17107  10BA  3001               	movlw	1
 17108  10BB  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17109  10BC  3000               	movlw	0
 17110  10BD  1803               	skipnc
 17111  10BE  3001               	movlw	1
 17112  10BF  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17113  10C0                     l7800:	
 17114  10C0  1F4B               	btfss	___ftadd@sign^(0+128),6
 17115  10C1  28D2               	goto	l7804
 17116  10C2  30FF               	movlw	255
 17117  10C3  06C4               	xorwf	___ftadd@f2^(0+128),f
 17118  10C4  30FF               	movlw	255
 17119  10C5  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17120  10C6  30FF               	movlw	255
 17121  10C7  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17122  10C8  3001               	movlw	1
 17123  10C9  07C4               	addwf	___ftadd@f2^(0+128),f
 17124  10CA  3000               	movlw	0
 17125  10CB  1803               	skipnc
 17126  10CC  3001               	movlw	1
 17127  10CD  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17128  10CE  3000               	movlw	0
 17129  10CF  1803               	skipnc
 17130  10D0  3001               	movlw	1
 17131  10D1  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17132  10D2                     l7804:	
 17133  10D2  01CB               	clrf	___ftadd@sign^(0+128)
 17134  10D3  0841               	movf	___ftadd@f1^(0+128),w
 17135  10D4  07C4               	addwf	___ftadd@f2^(0+128),f
 17136  10D5  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17137  10D6  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17138  10D7  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17139  10D8  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17140  10D9  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17141  10DA  28ED               	goto	l7814
 17142  10DB  30FF               	movlw	255
 17143  10DC  06C4               	xorwf	___ftadd@f2^(0+128),f
 17144  10DD  30FF               	movlw	255
 17145  10DE  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17146  10DF  30FF               	movlw	255
 17147  10E0  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17148  10E1  3001               	movlw	1
 17149  10E2  07C4               	addwf	___ftadd@f2^(0+128),f
 17150  10E3  3000               	movlw	0
 17151  10E4  1803               	skipnc
 17152  10E5  3001               	movlw	1
 17153  10E6  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17154  10E7  3000               	movlw	0
 17155  10E8  1803               	skipnc
 17156  10E9  3001               	movlw	1
 17157  10EA  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17158  10EB  01CB               	clrf	___ftadd@sign^(0+128)
 17159  10EC  0ACB               	incf	___ftadd@sign^(0+128),f
 17160  10ED                     l7814:	
 17161  10ED  0844               	movf	___ftadd@f2^(0+128),w
 17162  10EE  00A0               	movwf	___ftpack@arg^(0+128)
 17163  10EF  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17164  10F0  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17165  10F1  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17166  10F2  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17167  10F3  084D               	movf	___ftadd@exp1^(0+128),w
 17168  10F4  00C7               	movwf	??___ftadd^(0+128)
 17169  10F5  0847               	movf	??___ftadd^(0+128),w
 17170  10F6  00A3               	movwf	___ftpack@exp^(0+128)
 17171  10F7  084B               	movf	___ftadd@sign^(0+128),w
 17172  10F8  00C8               	movwf	(??___ftadd+1)^(0+128)
 17173  10F9  0848               	movf	(??___ftadd+1)^(0+128),w
 17174  10FA  00A4               	movwf	___ftpack@sign^(0+128)
 17175  10FB  31A6  2637         	fcall	___ftpack
 17176  10FD  0021               	movlb	1	; select bank1
 17177  10FE  0820               	movf	?___ftpack^(0+128),w
 17178  10FF  00C1               	movwf	?___ftadd^(0+128)
 17179  1100  0821               	movf	(?___ftpack+1)^(0+128),w
 17180  1101  00C2               	movwf	(?___ftadd+1)^(0+128)
 17181  1102  0822               	movf	(?___ftpack+2)^(0+128),w
 17182  1103  00C3               	movwf	(?___ftadd+2)^(0+128)
 17183  1104  0008               	return
 17184  1105                     __end_of___ftadd:	
 17185                           
 17186                           	psect	text57
 17187  2DB2                     __ptext57:	
 17188 ;; *************** function ___ftneg *****************
 17189 ;; Defined at:
 17190 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17191 ;; Parameters:    Size  Location     Type
 17192 ;;  f1              3   30[BANK1 ] float 
 17193 ;; Auto vars:     Size  Location     Type
 17194 ;;		None
 17195 ;; Return value:  Size  Location     Type
 17196 ;;                  3   30[BANK1 ] float 
 17197 ;; Registers used:
 17198 ;;		wreg
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : 0/0
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17204 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17207 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17208 ;;Total ram usage:        3 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; Hardware stack levels required when called:    3
 17211 ;; This function calls:
 17212 ;;		Nothing
 17213 ;; This function is called by:
 17214 ;;		_map
 17215 ;;		_scaleiA10kPot
 17216 ;;		_modCos
 17217 ;;		_modTri
 17218 ;;		_modSaw
 17219 ;;		_pow
 17220 ;;		_sin
 17221 ;;		_exp
 17222 ;;		_ldexp
 17223 ;;		_scalePotValue
 17224 ;; This function uses a non-reentrant model
 17225 ;;
 17226                           
 17227                           
 17228                           ;psect for function ___ftneg
 17229  2DB2                     ___ftneg:	
 17230                           
 17231                           ;incstack = 0
 17232                           ; Regs used in ___ftneg: [wreg]
 17233  2DB2  0021               	movlb	1	; select bank1
 17234  2DB3  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17235  2DB4  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17236  2DB5  043E               	iorwf	___ftneg@f1^(0+128),w
 17237  2DB6  1903               	skipnz
 17238  2DB7  0008               	return
 17239  2DB8  3080               	movlw	128
 17240  2DB9  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17241  2DBA  0008               	return
 17242  2DBB                     __end_of___ftneg:	
 17243                           
 17244                           	psect	text58
 17245  1D28                     __ptext58:	
 17246 ;; *************** function ___ftdiv *****************
 17247 ;; Defined at:
 17248 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17249 ;; Parameters:    Size  Location     Type
 17250 ;;  f2              3   46[BANK1 ] float 
 17251 ;;  f1              3   49[BANK1 ] float 
 17252 ;; Auto vars:     Size  Location     Type
 17253 ;;  f3              3   57[BANK1 ] float 
 17254 ;;  sign            1   61[BANK1 ] unsigned char 
 17255 ;;  exp             1   60[BANK1 ] unsigned char 
 17256 ;;  cntr            1   56[BANK1 ] unsigned char 
 17257 ;; Return value:  Size  Location     Type
 17258 ;;                  3   46[BANK1 ] float 
 17259 ;; Registers used:
 17260 ;;		wreg, status,2, status,0, pclath, cstack
 17261 ;; Tracked objects:
 17262 ;;		On entry : 0/0
 17263 ;;		On exit  : 0/0
 17264 ;;		Unchanged: 0/0
 17265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17266 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17267 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17268 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17269 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17270 ;;Total ram usage:       16 bytes
 17271 ;; Hardware stack levels used:    1
 17272 ;; Hardware stack levels required when called:    4
 17273 ;; This function calls:
 17274 ;;		___ftpack
 17275 ;; This function is called by:
 17276 ;;		_map
 17277 ;;		_scaleA100kPot
 17278 ;;		_scaleA10kPot
 17279 ;;		_scaleiA10kPot
 17280 ;;		_calcCosArray
 17281 ;;		_getModulationDelayTime
 17282 ;;		_modCos
 17283 ;;		_modTri
 17284 ;;		_modSaw
 17285 ;;		_sin
 17286 ;;		_exp
 17287 ;;		_scalePotValue
 17288 ;;		_scaleiA100kPot
 17289 ;; This function uses a non-reentrant model
 17290 ;;
 17291                           
 17292                           
 17293                           ;psect for function ___ftdiv
 17294  1D28                     ___ftdiv:	
 17295                           
 17296                           ;incstack = 0
 17297                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17298  1D28  0021               	movlb	1	; select bank1
 17299  1D29  0851               	movf	___ftdiv@f1^(0+128),w
 17300  1D2A  00D4               	movwf	??___ftdiv^(0+128)
 17301  1D2B  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17302  1D2C  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17303  1D2D  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17304  1D2E  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17305  1D2F  1003               	clrc
 17306  1D30  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17307  1D31  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17308  1D32  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17309  1D33  0857               	movf	(??___ftdiv+3)^(0+128),w
 17310  1D34  00DC               	movwf	___ftdiv@exp^(0+128)
 17311  1D35  085C               	movf	___ftdiv@exp^(0+128),w
 17312  1D36  1D03               	btfss	3,2
 17313  1D37  2D3F               	goto	l8026
 17314  1D38  3000               	movlw	0
 17315  1D39  00CE               	movwf	?___ftdiv^(0+128)
 17316  1D3A  3000               	movlw	0
 17317  1D3B  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17318  1D3C  3000               	movlw	0
 17319  1D3D  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17320  1D3E  0008               	return
 17321  1D3F                     l8026:	
 17322  1D3F  084E               	movf	___ftdiv@f2^(0+128),w
 17323  1D40  00D4               	movwf	??___ftdiv^(0+128)
 17324  1D41  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17325  1D42  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17326  1D43  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17327  1D44  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17328  1D45  1003               	clrc
 17329  1D46  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17330  1D47  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17331  1D48  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17332  1D49  0857               	movf	(??___ftdiv+3)^(0+128),w
 17333  1D4A  00DD               	movwf	___ftdiv@sign^(0+128)
 17334  1D4B  085D               	movf	___ftdiv@sign^(0+128),w
 17335  1D4C  1D03               	btfss	3,2
 17336  1D4D  2D55               	goto	l8032
 17337  1D4E  3000               	movlw	0
 17338  1D4F  00CE               	movwf	?___ftdiv^(0+128)
 17339  1D50  3000               	movlw	0
 17340  1D51  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17341  1D52  3000               	movlw	0
 17342  1D53  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17343  1D54  0008               	return
 17344  1D55                     l8032:	
 17345  1D55  3000               	movlw	0
 17346  1D56  00D9               	movwf	___ftdiv@f3^(0+128)
 17347  1D57  3000               	movlw	0
 17348  1D58  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17349  1D59  3000               	movlw	0
 17350  1D5A  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17351  1D5B  3089               	movlw	137
 17352  1D5C  075D               	addwf	___ftdiv@sign^(0+128),w
 17353  1D5D  00D4               	movwf	??___ftdiv^(0+128)
 17354  1D5E  0854               	movf	??___ftdiv^(0+128),w
 17355  1D5F  02DC               	subwf	___ftdiv@exp^(0+128),f
 17356  1D60  0851               	movf	___ftdiv@f1^(0+128),w
 17357  1D61  00D4               	movwf	??___ftdiv^(0+128)
 17358  1D62  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17359  1D63  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17360  1D64  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17361  1D65  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17362  1D66  3010               	movlw	16
 17363  1D67                     u8425:	
 17364  1D67  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17365  1D68  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17366  1D69  0CD4               	rrf	??___ftdiv^(0+128),f
 17367  1D6A  0B89               	decfsz	9,f
 17368  1D6B  2D67               	goto	u8425
 17369  1D6C  0854               	movf	??___ftdiv^(0+128),w
 17370  1D6D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17371  1D6E  0857               	movf	(??___ftdiv+3)^(0+128),w
 17372  1D6F  00DD               	movwf	___ftdiv@sign^(0+128)
 17373  1D70  084E               	movf	___ftdiv@f2^(0+128),w
 17374  1D71  00D4               	movwf	??___ftdiv^(0+128)
 17375  1D72  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17376  1D73  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17377  1D74  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17378  1D75  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17379  1D76  3010               	movlw	16
 17380  1D77                     u8435:	
 17381  1D77  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17382  1D78  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17383  1D79  0CD4               	rrf	??___ftdiv^(0+128),f
 17384  1D7A  0B89               	decfsz	9,f
 17385  1D7B  2D77               	goto	u8435
 17386  1D7C  0854               	movf	??___ftdiv^(0+128),w
 17387  1D7D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17388  1D7E  0857               	movf	(??___ftdiv+3)^(0+128),w
 17389  1D7F  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17390  1D80  3080               	movlw	128
 17391  1D81  00D4               	movwf	??___ftdiv^(0+128)
 17392  1D82  0854               	movf	??___ftdiv^(0+128),w
 17393  1D83  05DD               	andwf	___ftdiv@sign^(0+128),f
 17394  1D84  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17395  1D85  30FF               	movlw	255
 17396  1D86  05D1               	andwf	___ftdiv@f1^(0+128),f
 17397  1D87  30FF               	movlw	255
 17398  1D88  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17399  1D89  3000               	movlw	0
 17400  1D8A  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17401  1D8B  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17402  1D8C  30FF               	movlw	255
 17403  1D8D  05CE               	andwf	___ftdiv@f2^(0+128),f
 17404  1D8E  30FF               	movlw	255
 17405  1D8F  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17406  1D90  3000               	movlw	0
 17407  1D91  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17408  1D92  3018               	movlw	24
 17409  1D93  00D4               	movwf	??___ftdiv^(0+128)
 17410  1D94  0854               	movf	??___ftdiv^(0+128),w
 17411  1D95  00D8               	movwf	___ftdiv@cntr^(0+128)
 17412  1D96                     l8046:	
 17413  1D96  3001               	movlw	1
 17414  1D97                     u8445:	
 17415  1D97  35D9               	lslf	___ftdiv@f3^(0+128),f
 17416  1D98  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17417  1D99  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17418  1D9A  0B89               	decfsz	9,f
 17419  1D9B  2D97               	goto	u8445
 17420  1D9C  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17421  1D9D  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17422  1D9E  1D03               	skipz
 17423  1D9F  2DA6               	goto	u8455
 17424  1DA0  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17425  1DA1  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17426  1DA2  1D03               	skipz
 17427  1DA3  2DA6               	goto	u8455
 17428  1DA4  084E               	movf	___ftdiv@f2^(0+128),w
 17429  1DA5  0251               	subwf	___ftdiv@f1^(0+128),w
 17430  1DA6                     u8455:	
 17431  1DA6  1C03               	skipc
 17432  1DA7  2DAF               	goto	l8054
 17433  1DA8  084E               	movf	___ftdiv@f2^(0+128),w
 17434  1DA9  02D1               	subwf	___ftdiv@f1^(0+128),f
 17435  1DAA  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17436  1DAB  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17437  1DAC  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17438  1DAD  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17439  1DAE  1459               	bsf	___ftdiv@f3^(0+128),0
 17440  1DAF                     l8054:	
 17441  1DAF  3001               	movlw	1
 17442  1DB0                     u8465:	
 17443  1DB0  35D1               	lslf	___ftdiv@f1^(0+128),f
 17444  1DB1  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17445  1DB2  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17446  1DB3  0B89               	decfsz	9,f
 17447  1DB4  2DB0               	goto	u8465
 17448  1DB5  3001               	movlw	1
 17449  1DB6  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17450  1DB7  1D03               	btfss	3,2
 17451  1DB8  2D96               	goto	l8046
 17452  1DB9  0859               	movf	___ftdiv@f3^(0+128),w
 17453  1DBA  00A0               	movwf	___ftpack@arg^(0+128)
 17454  1DBB  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17455  1DBC  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17456  1DBD  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17457  1DBE  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17458  1DBF  085C               	movf	___ftdiv@exp^(0+128),w
 17459  1DC0  00D4               	movwf	??___ftdiv^(0+128)
 17460  1DC1  0854               	movf	??___ftdiv^(0+128),w
 17461  1DC2  00A3               	movwf	___ftpack@exp^(0+128)
 17462  1DC3  085D               	movf	___ftdiv@sign^(0+128),w
 17463  1DC4  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17464  1DC5  0855               	movf	(??___ftdiv+1)^(0+128),w
 17465  1DC6  00A4               	movwf	___ftpack@sign^(0+128)
 17466  1DC7  31A6  2637         	fcall	___ftpack
 17467  1DC9  0021               	movlb	1	; select bank1
 17468  1DCA  0820               	movf	?___ftpack^(0+128),w
 17469  1DCB  00CE               	movwf	?___ftdiv^(0+128)
 17470  1DCC  0821               	movf	(?___ftpack+1)^(0+128),w
 17471  1DCD  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17472  1DCE  0822               	movf	(?___ftpack+2)^(0+128),w
 17473  1DCF  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17474  1DD0  0008               	return
 17475  1DD1                     __end_of___ftdiv:	
 17476                           
 17477                           	psect	text59
 17478  2F05                     __ptext59:	
 17479 ;; *************** function ___awtoft *****************
 17480 ;; Defined at:
 17481 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17482 ;; Parameters:    Size  Location     Type
 17483 ;;  c               2    8[BANK1 ] int 
 17484 ;; Auto vars:     Size  Location     Type
 17485 ;;  sign            1   13[BANK1 ] unsigned char 
 17486 ;; Return value:  Size  Location     Type
 17487 ;;                  3    8[BANK1 ] float 
 17488 ;; Registers used:
 17489 ;;		wreg, status,2, status,0, pclath, cstack
 17490 ;; Tracked objects:
 17491 ;;		On entry : 0/0
 17492 ;;		On exit  : 0/0
 17493 ;;		Unchanged: 0/0
 17494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17495 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17496 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17497 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17498 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17499 ;;Total ram usage:        6 bytes
 17500 ;; Hardware stack levels used:    1
 17501 ;; Hardware stack levels required when called:    4
 17502 ;; This function calls:
 17503 ;;		___ftpack
 17504 ;; This function is called by:
 17505 ;;		_main
 17506 ;;		_set_subdivision
 17507 ;;		_calcCosArray
 17508 ;;		_getModulationDelayTime
 17509 ;;		_updateModulationArray
 17510 ;;		_exp
 17511 ;;		_log
 17512 ;; This function uses a non-reentrant model
 17513 ;;
 17514                           
 17515                           
 17516                           ;psect for function ___awtoft
 17517  2F05                     ___awtoft:	
 17518                           
 17519                           ;incstack = 0
 17520                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17521  2F05  0021               	movlb	1	; select bank1
 17522  2F06  01AD               	clrf	___awtoft@sign^(0+128)
 17523  2F07  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17524  2F08  2F10               	goto	l8016
 17525  2F09  09A8               	comf	___awtoft@c^(0+128),f
 17526  2F0A  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17527  2F0B  0AA8               	incf	___awtoft@c^(0+128),f
 17528  2F0C  1903               	skipnz
 17529  2F0D  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17530  2F0E  01AD               	clrf	___awtoft@sign^(0+128)
 17531  2F0F  0AAD               	incf	___awtoft@sign^(0+128),f
 17532  2F10                     l8016:	
 17533  2F10  0828               	movf	___awtoft@c^(0+128),w
 17534  2F11  00A0               	movwf	___ftpack@arg^(0+128)
 17535  2F12  0829               	movf	(___awtoft@c+1)^(0+128),w
 17536  2F13  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17537  2F14  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17538  2F15  308E               	movlw	142
 17539  2F16  00AB               	movwf	??___awtoft^(0+128)
 17540  2F17  082B               	movf	??___awtoft^(0+128),w
 17541  2F18  00A3               	movwf	___ftpack@exp^(0+128)
 17542  2F19  082D               	movf	___awtoft@sign^(0+128),w
 17543  2F1A  00AC               	movwf	(??___awtoft+1)^(0+128)
 17544  2F1B  082C               	movf	(??___awtoft+1)^(0+128),w
 17545  2F1C  00A4               	movwf	___ftpack@sign^(0+128)
 17546  2F1D  31A6  2637         	fcall	___ftpack
 17547  2F1F  0021               	movlb	1	; select bank1
 17548  2F20  0820               	movf	?___ftpack^(0+128),w
 17549  2F21  00A8               	movwf	?___awtoft^(0+128)
 17550  2F22  0821               	movf	(?___ftpack+1)^(0+128),w
 17551  2F23  00A9               	movwf	(?___awtoft+1)^(0+128)
 17552  2F24  0822               	movf	(?___ftpack+2)^(0+128),w
 17553  2F25  00AA               	movwf	(?___awtoft+2)^(0+128)
 17554  2F26  0008               	return
 17555  2F27                     __end_of___awtoft:	
 17556                           
 17557                           	psect	text60
 17558  2637                     __ptext60:	
 17559 ;; *************** function ___ftpack *****************
 17560 ;; Defined at:
 17561 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17562 ;; Parameters:    Size  Location     Type
 17563 ;;  arg             3    0[BANK1 ] unsigned um
 17564 ;;  exp             1    3[BANK1 ] unsigned char 
 17565 ;;  sign            1    4[BANK1 ] unsigned char 
 17566 ;; Auto vars:     Size  Location     Type
 17567 ;;		None
 17568 ;; Return value:  Size  Location     Type
 17569 ;;                  3    0[BANK1 ] float 
 17570 ;; Registers used:
 17571 ;;		wreg, status,2, status,0
 17572 ;; Tracked objects:
 17573 ;;		On entry : 0/0
 17574 ;;		On exit  : 0/0
 17575 ;;		Unchanged: 0/0
 17576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17577 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17579 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17580 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17581 ;;Total ram usage:        8 bytes
 17582 ;; Hardware stack levels used:    1
 17583 ;; Hardware stack levels required when called:    3
 17584 ;; This function calls:
 17585 ;;		Nothing
 17586 ;; This function is called by:
 17587 ;;		___altoft
 17588 ;;		___awtoft
 17589 ;;		___ftadd
 17590 ;;		___ftdiv
 17591 ;;		___ftmul
 17592 ;;		___lltoft
 17593 ;; This function uses a non-reentrant model
 17594 ;;
 17595                           
 17596                           
 17597                           ;psect for function ___ftpack
 17598  2637                     ___ftpack:	
 17599                           
 17600                           ;incstack = 0
 17601                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17602  2637  0021               	movlb	1	; select bank1
 17603  2638  0823               	movf	___ftpack@exp^(0+128),w
 17604  2639  1903               	btfsc	3,2
 17605  263A  2E40               	goto	l7654
 17606  263B  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17607  263C  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17608  263D  0420               	iorwf	___ftpack@arg^(0+128),w
 17609  263E  1D03               	skipz
 17610  263F  2E51               	goto	l7660
 17611  2640                     l7654:	
 17612  2640  3000               	movlw	0
 17613  2641  00A0               	movwf	?___ftpack^(0+128)
 17614  2642  3000               	movlw	0
 17615  2643  00A1               	movwf	(?___ftpack+1)^(0+128)
 17616  2644  3000               	movlw	0
 17617  2645  00A2               	movwf	(?___ftpack+2)^(0+128)
 17618  2646  0008               	return
 17619  2647                     l7658:	
 17620  2647  3001               	movlw	1
 17621  2648  00A5               	movwf	??___ftpack^(0+128)
 17622  2649  0825               	movf	??___ftpack^(0+128),w
 17623  264A  07A3               	addwf	___ftpack@exp^(0+128),f
 17624  264B  3001               	movlw	1
 17625  264C                     u7665:	
 17626  264C  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17627  264D  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17628  264E  0CA0               	rrf	___ftpack@arg^(0+128),f
 17629  264F  0B89               	decfsz	9,f
 17630  2650  2E4C               	goto	u7665
 17631  2651                     l7660:	
 17632  2651  30FE               	movlw	254
 17633  2652  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17634  2653  1903               	btfsc	3,2
 17635  2654  2E6A               	goto	l2125
 17636  2655  2E47               	goto	l7658
 17637  2656                     l7662:	
 17638  2656  3001               	movlw	1
 17639  2657  00A5               	movwf	??___ftpack^(0+128)
 17640  2658  0825               	movf	??___ftpack^(0+128),w
 17641  2659  07A3               	addwf	___ftpack@exp^(0+128),f
 17642  265A  3001               	movlw	1
 17643  265B  07A0               	addwf	___ftpack@arg^(0+128),f
 17644  265C  3000               	movlw	0
 17645  265D  1803               	skipnc
 17646  265E  3001               	movlw	1
 17647  265F  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17648  2660  3000               	movlw	0
 17649  2661  1803               	skipnc
 17650  2662  3001               	movlw	1
 17651  2663  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17652  2664  3001               	movlw	1
 17653  2665                     u7685:	
 17654  2665  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17655  2666  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17656  2667  0CA0               	rrf	___ftpack@arg^(0+128),f
 17657  2668  0B89               	decfsz	9,f
 17658  2669  2E65               	goto	u7685
 17659  266A                     l2125:	
 17660  266A  30FF               	movlw	255
 17661  266B  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17662  266C  1903               	btfsc	3,2
 17663  266D  2E77               	goto	l7670
 17664  266E  2E56               	goto	l7662
 17665  266F                     l7668:	
 17666  266F  3001               	movlw	1
 17667  2670  02A3               	subwf	___ftpack@exp^(0+128),f
 17668  2671  3001               	movlw	1
 17669  2672                     u7705:	
 17670  2672  35A0               	lslf	___ftpack@arg^(0+128),f
 17671  2673  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17672  2674  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17673  2675  0B89               	decfsz	9,f
 17674  2676  2E72               	goto	u7705
 17675  2677                     l7670:	
 17676  2677  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17677  2678  2E7D               	goto	l2132
 17678  2679  3002               	movlw	2
 17679  267A  0223               	subwf	___ftpack@exp^(0+128),w
 17680  267B  1803               	skipnc
 17681  267C  2E6F               	goto	l7668
 17682  267D                     l2132:	
 17683  267D  1823               	btfsc	___ftpack@exp^(0+128),0
 17684  267E  2E85               	goto	l2133
 17685  267F  30FF               	movlw	255
 17686  2680  05A0               	andwf	___ftpack@arg^(0+128),f
 17687  2681  307F               	movlw	127
 17688  2682  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17689  2683  30FF               	movlw	255
 17690  2684  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17691  2685                     l2133:	
 17692  2685  1003               	clrc
 17693  2686  0CA3               	rrf	___ftpack@exp^(0+128),f
 17694  2687  0823               	movf	___ftpack@exp^(0+128),w
 17695  2688  00A5               	movwf	??___ftpack^(0+128)
 17696  2689  01A6               	clrf	(??___ftpack^(0+128)+1)
 17697  268A  01A7               	clrf	(??___ftpack^(0+128)+2)
 17698  268B  3010               	movlw	16
 17699  268C                     u7745:	
 17700  268C  35A5               	lslf	??___ftpack^(0+128),f
 17701  268D  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17702  268E  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17703  268F  0B89               	decfsz	9,f
 17704  2690  2E8C               	goto	u7745
 17705  2691  0825               	movf	??___ftpack^(0+128),w
 17706  2692  04A0               	iorwf	___ftpack@arg^(0+128),f
 17707  2693  0826               	movf	(??___ftpack+1)^(0+128),w
 17708  2694  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17709  2695  0827               	movf	(??___ftpack+2)^(0+128),w
 17710  2696  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17711  2697  0824               	movf	___ftpack@sign^(0+128),w
 17712  2698  1903               	btfsc	3,2
 17713  2699  0008               	return
 17714  269A  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17715  269B  0008               	return
 17716  269C                     __end_of___ftpack:	
 17717                           
 17718                           	psect	text61
 17719  2DDD                     __ptext61:	
 17720 ;; *************** function _adc_convert *****************
 17721 ;; Defined at:
 17722 ;;		line 122 in file "user.c"
 17723 ;; Parameters:    Size  Location     Type
 17724 ;;  channel         1    wreg     unsigned char 
 17725 ;; Auto vars:     Size  Location     Type
 17726 ;;  channel         1    3[BANK1 ] unsigned char 
 17727 ;; Return value:  Size  Location     Type
 17728 ;;                  2    0[BANK1 ] unsigned int 
 17729 ;; Registers used:
 17730 ;;		wreg, status,2, status,0
 17731 ;; Tracked objects:
 17732 ;;		On entry : 0/0
 17733 ;;		On exit  : 0/0
 17734 ;;		Unchanged: 0/0
 17735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17736 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17737 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17738 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17739 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17740 ;;Total ram usage:        4 bytes
 17741 ;; Hardware stack levels used:    1
 17742 ;; Hardware stack levels required when called:    3
 17743 ;; This function calls:
 17744 ;;		Nothing
 17745 ;; This function is called by:
 17746 ;;		_main
 17747 ;; This function uses a non-reentrant model
 17748 ;;
 17749                           
 17750                           
 17751                           ;psect for function _adc_convert
 17752  2DDD                     _adc_convert:	
 17753                           
 17754                           ;incstack = 0
 17755                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17756                           ;adc_convert@channel stored from wreg
 17757  2DDD  0021               	movlb	1	; select bank1
 17758  2DDE  00A3               	movwf	adc_convert@channel^(0+128)
 17759                           
 17760                           ;user.c: 123: ADCON0bits.CHS = channel;
 17761  2DDF  0823               	movf	adc_convert@channel^(0+128),w
 17762  2DE0  00A2               	movwf	??_adc_convert^(0+128)
 17763  2DE1  0DA2               	rlf	??_adc_convert^(0+128),f
 17764  2DE2  0DA2               	rlf	??_adc_convert^(0+128),f
 17765  2DE3  081D               	movf	29,w	;volatile
 17766  2DE4  0622               	xorwf	??_adc_convert^(0+128),w
 17767  2DE5  3983               	andlw	-125
 17768  2DE6  0622               	xorwf	??_adc_convert^(0+128),w
 17769  2DE7  009D               	movwf	29	;volatile
 17770                           
 17771                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17772  2DE8  149D               	bsf	29,1	;volatile
 17773  2DE9                     l586:	
 17774                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17775                           
 17776  2DE9  189D               	btfsc	29,1	;volatile
 17777  2DEA  2DE9               	goto	l586
 17778                           
 17779                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17780  2DEB  081C               	movf	28,w	;volatile
 17781  2DEC  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17782  2DED  081B               	movf	27,w	;volatile
 17783  2DEE  00A0               	movwf	?_adc_convert^(0+128)
 17784  2DEF  0008               	return
 17785  2DF0                     __end_of_adc_convert:	
 17786                           
 17787                           	psect	text62
 17788  0800                     __ptext62:	
 17789 ;; *************** function _USARTInit *****************
 17790 ;; Defined at:
 17791 ;;		line 31 in file "usart_pic16.c"
 17792 ;; Parameters:    Size  Location     Type
 17793 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17794 ;; Auto vars:     Size  Location     Type
 17795 ;;		None
 17796 ;; Return value:  Size  Location     Type
 17797 ;;                  1    wreg      void 
 17798 ;; Registers used:
 17799 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17800 ;; Tracked objects:
 17801 ;;		On entry : 0/0
 17802 ;;		On exit  : 0/0
 17803 ;;		Unchanged: 0/0
 17804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17805 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17807 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17808 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17809 ;;Total ram usage:        3 bytes
 17810 ;; Hardware stack levels used:    1
 17811 ;; Hardware stack levels required when called:    3
 17812 ;; This function calls:
 17813 ;;		Nothing
 17814 ;; This function is called by:
 17815 ;;		_main
 17816 ;; This function uses a non-reentrant model
 17817 ;;
 17818                           
 17819                           
 17820                           ;psect for function _USARTInit
 17821  0800                     _USARTInit:	
 17822                           
 17823                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17824                           
 17825                           ;incstack = 0
 17826                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17827  0800  30FF               	movlw	255
 17828  0801  0020               	movlb	0	; select bank0
 17829  0802  00CC               	movwf	_UQEnd	;volatile
 17830  0803  0021               	movlb	1	; select bank1
 17831  0804  00A2               	movwf	??_USARTInit^(0+128)
 17832  0805  0822               	movf	??_USARTInit^(0+128),w
 17833  0806  0020               	movlb	0	; select bank0
 17834  0807  00CD               	movwf	_UQFront	;volatile
 17835                           
 17836                           ;usart_pic16.c: 37: switch(baud_rate)
 17837  0808  2813               	goto	l8672
 17838  0809                     l8662:	
 17839                           ;usart_pic16.c: 38: {
 17840                           ;usart_pic16.c: 39: case 9600:
 17841                           
 17842                           
 17843                           ;usart_pic16.c: 40: SPBRG=103;
 17844  0809  3067               	movlw	103
 17845  080A  2810               	goto	L22
 17846  080B                     l8664:	
 17847                           ;usart_pic16.c: 42: case 19200:
 17848                           
 17849                           ;usart_pic16.c: 41: break;
 17850                           
 17851                           
 17852                           ;usart_pic16.c: 43: SPBRG=51;
 17853  080B  3033               	movlw	51
 17854  080C  2810               	goto	L22
 17855  080D                     l8666:	
 17856                           ;usart_pic16.c: 45: case 31250:
 17857                           
 17858                           ;usart_pic16.c: 44: break;
 17859                           
 17860                           
 17861                           ;usart_pic16.c: 46: SPBRG = 31;
 17862  080D  301F               	movlw	31
 17863  080E  2810               	goto	L22
 17864  080F                     l8668:	
 17865                           ;usart_pic16.c: 48: case 38400:
 17866                           
 17867                           ;usart_pic16.c: 47: break;
 17868                           
 17869                           
 17870                           ;usart_pic16.c: 49: SPBRG=25;
 17871  080F  3019               	movlw	25
 17872  0810                     L22:	
 17873  0810  0023               	movlb	3	; select bank3
 17874  0811  009B               	movwf	27	;volatile
 17875                           
 17876                           ;usart_pic16.c: 51: }
 17877                           
 17878                           ;usart_pic16.c: 50: break;
 17879  0812  2836               	goto	l1712
 17880  0813                     l8672:	
 17881                           
 17882                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17883                           ; Switch size 1, requested type "space"
 17884                           ; Number of cases is 4, Range of values is 37 to 150
 17885                           ; switch strategies available:
 17886                           ; Name         Instructions Cycles
 17887                           ; simple_byte           13     7 (average)
 17888                           ; direct_byte          237     9 (fixed)
 17889                           ; jumptable            263     9 (fixed)
 17890                           ;	Chosen strategy is simple_byte
 17891  0813  0021               	movlb	1	; select bank1
 17892  0814  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17893  0815  3A25               	xorlw	37	; case 37
 17894  0816  1903               	skipnz
 17895  0817  2822               	goto	l9776
 17896  0818  3A6E               	xorlw	110	; case 75
 17897  0819  1903               	skipnz
 17898  081A  2827               	goto	l9778
 17899  081B  3A31               	xorlw	49	; case 122
 17900  081C  1903               	skipnz
 17901  081D  282C               	goto	l9780
 17902  081E  3AEC               	xorlw	236	; case 150
 17903  081F  1903               	skipnz
 17904  0820  2831               	goto	l9782
 17905  0821  2836               	goto	l1712
 17906  0822                     l9776:	
 17907                           
 17908                           ; Switch size 1, requested type "space"
 17909                           ; Number of cases is 1, Range of values is 128 to 128
 17910                           ; switch strategies available:
 17911                           ; Name         Instructions Cycles
 17912                           ; simple_byte            4     3 (average)
 17913                           ; direct_byte           11     9 (fixed)
 17914                           ; jumptable            263     9 (fixed)
 17915                           ;	Chosen strategy is simple_byte
 17916  0822  0820               	movf	USARTInit@baud_rate^(0+128),w
 17917  0823  3A80               	xorlw	128	; case 128
 17918  0824  1903               	skipnz
 17919  0825  2809               	goto	l8662
 17920  0826  2836               	goto	l1712
 17921  0827                     l9778:	
 17922                           
 17923                           ; Switch size 1, requested type "space"
 17924                           ; Number of cases is 1, Range of values is 0 to 0
 17925                           ; switch strategies available:
 17926                           ; Name         Instructions Cycles
 17927                           ; simple_byte            4     3 (average)
 17928                           ; direct_byte            8     6 (fixed)
 17929                           ; jumptable            260     6 (fixed)
 17930                           ;	Chosen strategy is simple_byte
 17931  0827  0820               	movf	USARTInit@baud_rate^(0+128),w
 17932  0828  3A00               	xorlw	0	; case 0
 17933  0829  1903               	skipnz
 17934  082A  280B               	goto	l8664
 17935  082B  2836               	goto	l1712
 17936  082C                     l9780:	
 17937                           
 17938                           ; Switch size 1, requested type "space"
 17939                           ; Number of cases is 1, Range of values is 18 to 18
 17940                           ; switch strategies available:
 17941                           ; Name         Instructions Cycles
 17942                           ; simple_byte            4     3 (average)
 17943                           ; direct_byte           11     9 (fixed)
 17944                           ; jumptable            263     9 (fixed)
 17945                           ;	Chosen strategy is simple_byte
 17946  082C  0820               	movf	USARTInit@baud_rate^(0+128),w
 17947  082D  3A12               	xorlw	18	; case 18
 17948  082E  1903               	skipnz
 17949  082F  280D               	goto	l8666
 17950  0830  2836               	goto	l1712
 17951  0831                     l9782:	
 17952                           
 17953                           ; Switch size 1, requested type "space"
 17954                           ; Number of cases is 1, Range of values is 0 to 0
 17955                           ; switch strategies available:
 17956                           ; Name         Instructions Cycles
 17957                           ; simple_byte            4     3 (average)
 17958                           ; direct_byte            8     6 (fixed)
 17959                           ; jumptable            260     6 (fixed)
 17960                           ;	Chosen strategy is simple_byte
 17961  0831  0820               	movf	USARTInit@baud_rate^(0+128),w
 17962  0832  3A00               	xorlw	0	; case 0
 17963  0833  1903               	skipnz
 17964  0834  280F               	goto	l8668
 17965  0835  2836               	goto	l1712
 17966  0836                     l1712:	
 17967                           
 17968                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 17969  0836  0023               	movlb	3	; select bank3
 17970  0837  131E               	bcf	30,6	;volatile
 17971                           
 17972                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 17973  0838  169E               	bsf	30,5	;volatile
 17974                           
 17975                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 17976  0839  121E               	bcf	30,4	;volatile
 17977                           
 17978                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 17979  083A  151E               	bsf	30,2	;volatile
 17980                           
 17981                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 17982  083B  179D               	bsf	29,7	;volatile
 17983                           
 17984                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 17985  083C  131D               	bcf	29,6	;volatile
 17986                           
 17987                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 17988  083D  161D               	bsf	29,4	;volatile
 17989                           
 17990                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 17991  083E  119D               	bcf	29,3	;volatile
 17992                           
 17993                           ;usart_pic16.c: 65: RCIE=1;
 17994  083F  0021               	movlb	1	; select bank1
 17995  0840  1691               	bsf	17,5	;volatile
 17996                           
 17997                           ;usart_pic16.c: 66: PEIE=1;
 17998  0841  170B               	bsf	11,6	;volatile
 17999                           
 18000                           ;usart_pic16.c: 68: (GIE = 1);
 18001  0842  178B               	bsf	11,7	;volatile
 18002  0843  0008               	return
 18003  0844                     __end_of_USARTInit:	
 18004                           
 18005                           	psect	text63
 18006  270E                     __ptext63:	
 18007 ;; *************** function _ReadSavedSettings *****************
 18008 ;; Defined at:
 18009 ;;		line 234 in file "user.c"
 18010 ;; Parameters:    Size  Location     Type
 18011 ;;		None
 18012 ;; Auto vars:     Size  Location     Type
 18013 ;;		None
 18014 ;; Return value:  Size  Location     Type
 18015 ;;                  1    wreg      void 
 18016 ;; Registers used:
 18017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18018 ;; Tracked objects:
 18019 ;;		On entry : 0/0
 18020 ;;		On exit  : 0/0
 18021 ;;		Unchanged: 0/0
 18022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18025 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18026 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18027 ;;Total ram usage:        1 bytes
 18028 ;; Hardware stack levels used:    1
 18029 ;; Hardware stack levels required when called:    4
 18030 ;; This function calls:
 18031 ;;		_FLASH_ReadWord
 18032 ;;		_set_leds_bottom
 18033 ;;		_set_leds_top
 18034 ;; This function is called by:
 18035 ;;		_main
 18036 ;; This function uses a non-reentrant model
 18037 ;;
 18038                           
 18039                           
 18040                           ;psect for function _ReadSavedSettings
 18041  270E                     _ReadSavedSettings:	
 18042                           
 18043                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 18044                           
 18045                           ;incstack = 0
 18046                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18047  270E  3081               	movlw	129
 18048  270F  0021               	movlb	1	; select bank1
 18049  2710  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18050  2711  301F               	movlw	31
 18051  2712  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18052  2713  31AE  26A4  31A7   	fcall	_FLASH_ReadWord
 18053  2716  0021               	movlb	1	; select bank1
 18054  2717  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18055  2718  0020               	movlb	0	; select bank0
 18056  2719  00DB               	movwf	_top_push_state+1
 18057  271A  0021               	movlb	1	; select bank1
 18058  271B  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18059  271C  0020               	movlb	0	; select bank0
 18060  271D  00DA               	movwf	_top_push_state
 18061                           
 18062                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 18063  271E  3082               	movlw	130
 18064  271F  0021               	movlb	1	; select bank1
 18065  2720  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18066  2721  301F               	movlw	31
 18067  2722  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18068  2723  31AE  26A4  31A7   	fcall	_FLASH_ReadWord
 18069  2726  0021               	movlb	1	; select bank1
 18070  2727  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18071  2728  0020               	movlb	0	; select bank0
 18072  2729  00D7               	movwf	_bottom_push_state+1
 18073  272A  0021               	movlb	1	; select bank1
 18074  272B  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18075  272C  0020               	movlb	0	; select bank0
 18076  272D  00D6               	movwf	_bottom_push_state
 18077                           
 18078                           ;user.c: 239: if (top_push_state > 6) {
 18079  272E  085B               	movf	_top_push_state+1,w
 18080  272F  3A80               	xorlw	128
 18081  2730  0021               	movlb	1	; select bank1
 18082  2731  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18083  2732  3080               	movlw	128
 18084  2733  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18085  2734  1D03               	skipz
 18086  2735  2F39               	goto	u9245
 18087  2736  3007               	movlw	7
 18088  2737  0020               	movlb	0	; select bank0
 18089  2738  025A               	subwf	_top_push_state,w
 18090  2739                     u9245:	
 18091  2739  1C03               	skipc
 18092  273A  2F40               	goto	l633
 18093                           
 18094                           ;user.c: 241: top_push_state = 6;
 18095  273B  3006               	movlw	6
 18096  273C  0020               	movlb	0	; select bank0
 18097  273D  00DA               	movwf	_top_push_state
 18098  273E  3000               	movlw	0
 18099  273F  00DB               	movwf	_top_push_state+1
 18100  2740                     l633:	
 18101                           
 18102                           ;user.c: 242: }
 18103                           ;user.c: 243: if (bottom_push_state > 5) {
 18104  2740  0020               	movlb	0	; select bank0
 18105  2741  0857               	movf	_bottom_push_state+1,w
 18106  2742  3A80               	xorlw	128
 18107  2743  0021               	movlb	1	; select bank1
 18108  2744  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18109  2745  3080               	movlw	128
 18110  2746  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18111  2747  1D03               	skipz
 18112  2748  2F4C               	goto	u9255
 18113  2749  3006               	movlw	6
 18114  274A  0020               	movlb	0	; select bank0
 18115  274B  0256               	subwf	_bottom_push_state,w
 18116  274C                     u9255:	
 18117  274C  1C03               	skipc
 18118  274D  2F53               	goto	l8726
 18119                           
 18120                           ;user.c: 245: bottom_push_state = 1;
 18121  274E  3001               	movlw	1
 18122  274F  0020               	movlb	0	; select bank0
 18123  2750  00D6               	movwf	_bottom_push_state
 18124  2751  3000               	movlw	0
 18125  2752  00D7               	movwf	_bottom_push_state+1
 18126  2753                     l8726:	
 18127                           
 18128                           ;user.c: 246: }
 18129                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 18130  2753  0020               	movlb	0	; select bank0
 18131  2754  085F               	movf	_switchBypass_state,w
 18132  2755  1D03               	btfss	3,2
 18133  2756  2F5A               	goto	u9260
 18134  2757  0027               	movlb	7	; select bank7
 18135  2758  148D               	bsf	13,1	;volatile
 18136  2759  2F5C               	goto	l8728
 18137  275A                     u9260:	
 18138  275A  0027               	movlb	7	; select bank7
 18139  275B  108D               	bcf	13,1	;volatile
 18140  275C                     l8728:	
 18141                           
 18142                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 18143  275C  0020               	movlb	0	; select bank0
 18144  275D  0C5F               	rrf	_switchBypass_state,w
 18145  275E  0027               	movlb	7	; select bank7
 18146  275F  1C03               	skipc
 18147  2760  110D               	bcf	13,2	;volatile
 18148  2761  1803               	skipnc
 18149  2762  150D               	bsf	13,2	;volatile
 18150                           
 18151                           ;user.c: 251: LATBbits.LATB2 = 0;
 18152  2763  0022               	movlb	2	; select bank2
 18153  2764  110D               	bcf	13,2	;volatile
 18154                           
 18155                           ;user.c: 252: LATBbits.LATB3 = 0;
 18156  2765  118D               	bcf	13,3	;volatile
 18157                           
 18158                           ;user.c: 254: LATBbits.LATB4 = 0;
 18159  2766  120D               	bcf	13,4	;volatile
 18160                           
 18161                           ;user.c: 255: LATBbits.LATB5 = 0;
 18162  2767  128D               	bcf	13,5	;volatile
 18163                           
 18164                           ;user.c: 257: LATBbits.LATB1 = 0;
 18165  2768  108D               	bcf	13,1	;volatile
 18166                           
 18167                           ;user.c: 258: LATBbits.LATB0 = 0;
 18168  2769  100D               	bcf	13,0	;volatile
 18169                           
 18170                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18171  276A  0020               	movlb	0	; select bank0
 18172  276B  085B               	movf	_top_push_state+1,w
 18173  276C  0021               	movlb	1	; select bank1
 18174  276D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18175  276E  0020               	movlb	0	; select bank0
 18176  276F  085A               	movf	_top_push_state,w
 18177  2770  0021               	movlb	1	; select bank1
 18178  2771  00A0               	movwf	set_leds_top@x^(0+128)
 18179  2772  3001               	movlw	1
 18180  2773  00A2               	movwf	set_leds_top@ledState^(0+128)
 18181  2774  3000               	movlw	0
 18182  2775  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18183  2776  31A5  25E3  31A7   	fcall	_set_leds_top
 18184                           
 18185                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18186  2779  0020               	movlb	0	; select bank0
 18187  277A  0857               	movf	_bottom_push_state+1,w
 18188  277B  0021               	movlb	1	; select bank1
 18189  277C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18190  277D  0020               	movlb	0	; select bank0
 18191  277E  0856               	movf	_bottom_push_state,w
 18192  277F  0021               	movlb	1	; select bank1
 18193  2780  00A0               	movwf	set_leds_bottom@x^(0+128)
 18194  2781  31A1  218D         	fcall	_set_leds_bottom
 18195  2783  0008               	return
 18196  2784                     __end_of_ReadSavedSettings:	
 18197                           
 18198                           	psect	text64
 18199  25E3                     __ptext64:	
 18200 ;; *************** function _set_leds_top *****************
 18201 ;; Defined at:
 18202 ;;		line 16 in file "LEDs.c"
 18203 ;; Parameters:    Size  Location     Type
 18204 ;;  x               2    0[BANK1 ] int 
 18205 ;;  ledState        2    2[BANK1 ] int 
 18206 ;; Auto vars:     Size  Location     Type
 18207 ;;		None
 18208 ;; Return value:  Size  Location     Type
 18209 ;;                  1    wreg      void 
 18210 ;; Registers used:
 18211 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18212 ;; Tracked objects:
 18213 ;;		On entry : 0/0
 18214 ;;		On exit  : 0/0
 18215 ;;		Unchanged: 0/0
 18216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18217 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18220 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18221 ;;Total ram usage:        4 bytes
 18222 ;; Hardware stack levels used:    1
 18223 ;; Hardware stack levels required when called:    3
 18224 ;; This function calls:
 18225 ;;		Nothing
 18226 ;; This function is called by:
 18227 ;;		_ReadSavedSettings
 18228 ;;		_ring_tactiles
 18229 ;;		_solidring_tactiles
 18230 ;;		_read_top_tactile
 18231 ;;		_setPresetDisplay
 18232 ;;		_resetRingLEDs
 18233 ;;		_setExpressionDisplay
 18234 ;;		_star_tactiles
 18235 ;; This function uses a non-reentrant model
 18236 ;;
 18237                           
 18238                           
 18239                           ;psect for function _set_leds_top
 18240  25E3                     _set_leds_top:	
 18241                           
 18242                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18243                           
 18244                           ;incstack = 0
 18245                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18246  25E3  0027               	movlb	7	; select bank7
 18247  25E4  100C               	bcf	12,0	;volatile
 18248                           
 18249                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18250  25E5  108C               	bcf	12,1	;volatile
 18251                           
 18252                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18253  25E6  110C               	bcf	12,2	;volatile
 18254                           
 18255                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18256  25E7  118C               	bcf	12,3	;volatile
 18257                           
 18258                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18259  25E8  120C               	bcf	12,4	;volatile
 18260                           
 18261                           ;LEDs.c: 22: switch (x) {
 18262  25E9  2E19               	goto	l7696
 18263  25EA                     l7684:	
 18264                           ;LEDs.c: 23: case 1:
 18265                           
 18266                           
 18267                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18268  25EA  0021               	movlb	1	; select bank1
 18269  25EB  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18270  25EC  0027               	movlb	7	; select bank7
 18271  25ED  1C03               	skipc
 18272  25EE  100C               	bcf	12,0	;volatile
 18273  25EF  1803               	skipnc
 18274  25F0  140C               	bsf	12,0	;volatile
 18275                           
 18276                           ;LEDs.c: 25: break;
 18277  25F1  0008               	return
 18278  25F2                     l7686:	
 18279                           ;LEDs.c: 26: case 2:
 18280                           
 18281                           
 18282                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18283  25F2  0021               	movlb	1	; select bank1
 18284  25F3  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18285  25F4  0027               	movlb	7	; select bank7
 18286  25F5  1C03               	skipc
 18287  25F6  108C               	bcf	12,1	;volatile
 18288  25F7  1803               	skipnc
 18289  25F8  148C               	bsf	12,1	;volatile
 18290                           
 18291                           ;LEDs.c: 28: break;
 18292  25F9  0008               	return
 18293  25FA                     l7688:	
 18294                           ;LEDs.c: 29: case 3:
 18295                           
 18296                           
 18297                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18298  25FA  0021               	movlb	1	; select bank1
 18299  25FB  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18300  25FC  0027               	movlb	7	; select bank7
 18301  25FD  1C03               	skipc
 18302  25FE  110C               	bcf	12,2	;volatile
 18303  25FF  1803               	skipnc
 18304  2600  150C               	bsf	12,2	;volatile
 18305                           
 18306                           ;LEDs.c: 31: break;
 18307  2601  0008               	return
 18308  2602                     l7690:	
 18309                           ;LEDs.c: 32: case 4:
 18310                           
 18311                           
 18312                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18313  2602  0021               	movlb	1	; select bank1
 18314  2603  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18315  2604  0027               	movlb	7	; select bank7
 18316  2605  1C03               	skipc
 18317  2606  118C               	bcf	12,3	;volatile
 18318  2607  1803               	skipnc
 18319  2608  158C               	bsf	12,3	;volatile
 18320                           
 18321                           ;LEDs.c: 34: break;
 18322  2609  0008               	return
 18323  260A                     l7692:	
 18324                           ;LEDs.c: 35: case 5:
 18325                           
 18326                           
 18327                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18328  260A  0021               	movlb	1	; select bank1
 18329  260B  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18330  260C  0027               	movlb	7	; select bank7
 18331  260D  1C03               	skipc
 18332  260E  120C               	bcf	12,4	;volatile
 18333  260F  1803               	skipnc
 18334  2610  160C               	bsf	12,4	;volatile
 18335                           
 18336                           ;LEDs.c: 39: break;
 18337                           
 18338                           ;LEDs.c: 38: case 6:
 18339                           
 18340                           ;LEDs.c: 37: break;
 18341  2611  0008               	return
 18342  2612                     l792:	
 18343                           ;LEDs.c: 40: case 100:
 18344                           
 18345                           
 18346                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18347  2612  0027               	movlb	7	; select bank7
 18348  2613  140C               	bsf	12,0	;volatile
 18349                           
 18350                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18351  2614  148C               	bsf	12,1	;volatile
 18352                           
 18353                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18354  2615  150C               	bsf	12,2	;volatile
 18355                           
 18356                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18357  2616  158C               	bsf	12,3	;volatile
 18358                           
 18359                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18360  2617  160C               	bsf	12,4	;volatile
 18361                           
 18362                           ;LEDs.c: 47: }
 18363                           
 18364                           ;LEDs.c: 46: break;
 18365  2618  0008               	return
 18366  2619                     l7696:	
 18367                           
 18368                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18369                           ; Switch size 1, requested type "space"
 18370                           ; Number of cases is 1, Range of values is 0 to 0
 18371                           ; switch strategies available:
 18372                           ; Name         Instructions Cycles
 18373                           ; simple_byte            4     3 (average)
 18374                           ; direct_byte            8     6 (fixed)
 18375                           ; jumptable            260     6 (fixed)
 18376                           ;	Chosen strategy is simple_byte
 18377  2619  0021               	movlb	1	; select bank1
 18378  261A  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18379  261B  3A00               	xorlw	0	; case 0
 18380  261C  1903               	skipnz
 18381  261D  2E1F               	goto	l9784
 18382  261E  2E36               	goto	l793
 18383  261F                     l9784:	
 18384                           
 18385                           ; Switch size 1, requested type "space"
 18386                           ; Number of cases is 7, Range of values is 1 to 100
 18387                           ; switch strategies available:
 18388                           ; Name         Instructions Cycles
 18389                           ; simple_byte           22    12 (average)
 18390                           ; direct_byte          209     9 (fixed)
 18391                           ; jumptable            263     9 (fixed)
 18392                           ;	Chosen strategy is simple_byte
 18393  261F  0820               	movf	set_leds_top@x^(0+128),w
 18394  2620  3A01               	xorlw	1	; case 1
 18395  2621  1903               	skipnz
 18396  2622  2DEA               	goto	l7684
 18397  2623  3A03               	xorlw	3	; case 2
 18398  2624  1903               	skipnz
 18399  2625  2DF2               	goto	l7686
 18400  2626  3A01               	xorlw	1	; case 3
 18401  2627  1903               	skipnz
 18402  2628  2DFA               	goto	l7688
 18403  2629  3A07               	xorlw	7	; case 4
 18404  262A  1903               	skipnz
 18405  262B  2E02               	goto	l7690
 18406  262C  3A01               	xorlw	1	; case 5
 18407  262D  1903               	skipnz
 18408  262E  2E0A               	goto	l7692
 18409  262F  3A03               	xorlw	3	; case 6
 18410  2630  1903               	skipnz
 18411  2631  2E36               	goto	l793
 18412  2632  3A62               	xorlw	98	; case 100
 18413  2633  1903               	skipnz
 18414  2634  2E12               	goto	l792
 18415  2635  2E36               	goto	l793
 18416  2636                     l793:	
 18417  2636  0008               	return
 18418  2637                     __end_of_set_leds_top:	
 18419                           
 18420                           	psect	text65
 18421  218D                     __ptext65:	
 18422 ;; *************** function _set_leds_bottom *****************
 18423 ;; Defined at:
 18424 ;;		line 51 in file "LEDs.c"
 18425 ;; Parameters:    Size  Location     Type
 18426 ;;  x               2    0[BANK1 ] int 
 18427 ;; Auto vars:     Size  Location     Type
 18428 ;;		None
 18429 ;; Return value:  Size  Location     Type
 18430 ;;                  1    wreg      void 
 18431 ;; Registers used:
 18432 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18433 ;; Tracked objects:
 18434 ;;		On entry : 0/0
 18435 ;;		On exit  : 0/0
 18436 ;;		Unchanged: 0/0
 18437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18438 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18441 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18442 ;;Total ram usage:        2 bytes
 18443 ;; Hardware stack levels used:    1
 18444 ;; Hardware stack levels required when called:    3
 18445 ;; This function calls:
 18446 ;;		Nothing
 18447 ;; This function is called by:
 18448 ;;		_ReadSavedSettings
 18449 ;;		_ring_tactiles
 18450 ;;		_solidring_tactiles
 18451 ;;		_read_bottom_tactile
 18452 ;;		_setPresetDisplay
 18453 ;;		_resetRingLEDs
 18454 ;;		_setExpressionDisplay
 18455 ;;		_star_tactiles
 18456 ;; This function uses a non-reentrant model
 18457 ;;
 18458                           
 18459                           
 18460                           ;psect for function _set_leds_bottom
 18461  218D                     _set_leds_bottom:	
 18462                           
 18463                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18464                           
 18465                           ;incstack = 0
 18466                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18467  218D  0022               	movlb	2	; select bank2
 18468  218E  100F               	bcf	15,0	;volatile
 18469                           
 18470                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18471  218F  108F               	bcf	15,1	;volatile
 18472                           
 18473                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18474  2190  110F               	bcf	15,2	;volatile
 18475                           
 18476                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18477  2191  118F               	bcf	15,3	;volatile
 18478                           
 18479                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18480  2192  120F               	bcf	15,4	;volatile
 18481                           
 18482                           ;LEDs.c: 57: switch (x) {
 18483  2193  29AA               	goto	l7712
 18484  2194                     l797:	
 18485                           ;LEDs.c: 58: case 1:
 18486                           
 18487                           
 18488                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18489  2194  0022               	movlb	2	; select bank2
 18490  2195  140F               	bsf	15,0	;volatile
 18491                           
 18492                           ;LEDs.c: 60: break;
 18493  2196  0008               	return
 18494  2197                     l799:	
 18495                           ;LEDs.c: 61: case 2:
 18496                           
 18497                           
 18498                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18499  2197  0022               	movlb	2	; select bank2
 18500  2198  148F               	bsf	15,1	;volatile
 18501                           
 18502                           ;LEDs.c: 63: break;
 18503  2199  0008               	return
 18504  219A                     l800:	
 18505                           ;LEDs.c: 64: case 3:
 18506                           
 18507                           
 18508                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18509  219A  0022               	movlb	2	; select bank2
 18510  219B  150F               	bsf	15,2	;volatile
 18511                           
 18512                           ;LEDs.c: 66: break;
 18513  219C  0008               	return
 18514  219D                     l801:	
 18515                           ;LEDs.c: 67: case 4:
 18516                           
 18517                           
 18518                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18519  219D  0022               	movlb	2	; select bank2
 18520  219E  158F               	bsf	15,3	;volatile
 18521                           
 18522                           ;LEDs.c: 69: break;
 18523  219F  0008               	return
 18524  21A0                     l802:	
 18525                           ;LEDs.c: 70: case 5:
 18526                           
 18527                           
 18528                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18529  21A0  0022               	movlb	2	; select bank2
 18530  21A1  160F               	bsf	15,4	;volatile
 18531                           
 18532                           ;LEDs.c: 74: break;
 18533                           
 18534                           ;LEDs.c: 73: case 6:
 18535                           
 18536                           ;LEDs.c: 72: break;
 18537  21A2  0008               	return
 18538  21A3                     l804:	
 18539                           ;LEDs.c: 75: case 100:
 18540                           
 18541                           
 18542                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18543  21A3  0022               	movlb	2	; select bank2
 18544  21A4  140F               	bsf	15,0	;volatile
 18545                           
 18546                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18547  21A5  148F               	bsf	15,1	;volatile
 18548                           
 18549                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18550  21A6  150F               	bsf	15,2	;volatile
 18551                           
 18552                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18553  21A7  158F               	bsf	15,3	;volatile
 18554                           
 18555                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18556  21A8  160F               	bsf	15,4	;volatile
 18557                           
 18558                           ;LEDs.c: 82: }
 18559                           
 18560                           ;LEDs.c: 81: break;
 18561  21A9  0008               	return
 18562  21AA                     l7712:	
 18563                           
 18564                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18565                           ; Switch size 1, requested type "space"
 18566                           ; Number of cases is 1, Range of values is 0 to 0
 18567                           ; switch strategies available:
 18568                           ; Name         Instructions Cycles
 18569                           ; simple_byte            4     3 (average)
 18570                           ; direct_byte            8     6 (fixed)
 18571                           ; jumptable            260     6 (fixed)
 18572                           ;	Chosen strategy is simple_byte
 18573  21AA  0021               	movlb	1	; select bank1
 18574  21AB  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18575  21AC  3A00               	xorlw	0	; case 0
 18576  21AD  1903               	skipnz
 18577  21AE  29B0               	goto	l9786
 18578  21AF  29C7               	goto	l805
 18579  21B0                     l9786:	
 18580                           
 18581                           ; Switch size 1, requested type "space"
 18582                           ; Number of cases is 7, Range of values is 1 to 100
 18583                           ; switch strategies available:
 18584                           ; Name         Instructions Cycles
 18585                           ; simple_byte           22    12 (average)
 18586                           ; direct_byte          209     9 (fixed)
 18587                           ; jumptable            263     9 (fixed)
 18588                           ;	Chosen strategy is simple_byte
 18589  21B0  0820               	movf	set_leds_bottom@x^(0+128),w
 18590  21B1  3A01               	xorlw	1	; case 1
 18591  21B2  1903               	skipnz
 18592  21B3  2994               	goto	l797
 18593  21B4  3A03               	xorlw	3	; case 2
 18594  21B5  1903               	skipnz
 18595  21B6  2997               	goto	l799
 18596  21B7  3A01               	xorlw	1	; case 3
 18597  21B8  1903               	skipnz
 18598  21B9  299A               	goto	l800
 18599  21BA  3A07               	xorlw	7	; case 4
 18600  21BB  1903               	skipnz
 18601  21BC  299D               	goto	l801
 18602  21BD  3A01               	xorlw	1	; case 5
 18603  21BE  1903               	skipnz
 18604  21BF  29A0               	goto	l802
 18605  21C0  3A03               	xorlw	3	; case 6
 18606  21C1  1903               	skipnz
 18607  21C2  29C7               	goto	l805
 18608  21C3  3A62               	xorlw	98	; case 100
 18609  21C4  1903               	skipnz
 18610  21C5  29A3               	goto	l804
 18611  21C6  29C7               	goto	l805
 18612  21C7                     l805:	
 18613  21C7  0008               	return
 18614  21C8                     __end_of_set_leds_bottom:	
 18615                           
 18616                           	psect	text66
 18617  2EA4                     __ptext66:	
 18618 ;; *************** function _FLASH_ReadWord *****************
 18619 ;; Defined at:
 18620 ;;		line 58 in file "memory.c"
 18621 ;; Parameters:    Size  Location     Type
 18622 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18623 ;; Auto vars:     Size  Location     Type
 18624 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18625 ;; Return value:  Size  Location     Type
 18626 ;;                  2    0[BANK1 ] unsigned int 
 18627 ;; Registers used:
 18628 ;;		wreg, status,2, status,0
 18629 ;; Tracked objects:
 18630 ;;		On entry : 0/0
 18631 ;;		On exit  : 0/0
 18632 ;;		Unchanged: 0/0
 18633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18634 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18635 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18637 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18638 ;;Total ram usage:        3 bytes
 18639 ;; Hardware stack levels used:    1
 18640 ;; Hardware stack levels required when called:    3
 18641 ;; This function calls:
 18642 ;;		Nothing
 18643 ;; This function is called by:
 18644 ;;		_ReadSavedSettings
 18645 ;;		_FLASH_WriteWord
 18646 ;; This function uses a non-reentrant model
 18647 ;;
 18648                           
 18649                           
 18650                           ;psect for function _FLASH_ReadWord
 18651  2EA4                     _FLASH_ReadWord:	
 18652                           
 18653                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18654                           
 18655                           ;incstack = 0
 18656                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18657  2EA4  3000               	movlw	0
 18658  2EA5  1B8B               	btfsc	11,7	;volatile
 18659  2EA6  3001               	movlw	1
 18660  2EA7  0021               	movlb	1	; select bank1
 18661  2EA8  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18662                           
 18663                           ;memory.c: 61: INTCONbits.GIE = 0;
 18664  2EA9  138B               	bcf	11,7	;volatile
 18665                           
 18666                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18667  2EAA  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18668  2EAB  0023               	movlb	3	; select bank3
 18669  2EAC  0091               	movwf	17	;volatile
 18670                           
 18671                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18672  2EAD  0021               	movlb	1	; select bank1
 18673  2EAE  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18674  2EAF  0023               	movlb	3	; select bank3
 18675  2EB0  0092               	movwf	18	;volatile
 18676                           
 18677                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18678  2EB1  1315               	bcf	21,6	;volatile
 18679                           
 18680                           ;memory.c: 66: PMCON1bits.RD = 1;
 18681  2EB2  1415               	bsf	21,0	;volatile
 18682                           
 18683                           ;memory.c: 67: __nop();
 18684  2EB3  0000               	nop
 18685                           
 18686                           ;memory.c: 68: __nop();
 18687  2EB4  0000               	nop
 18688                           
 18689                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18690  2EB5  0021               	movlb	1	; select bank1
 18691  2EB6  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18692  2EB7  1C03               	skipc
 18693  2EB8  138B               	bcf	11,7	;volatile
 18694  2EB9  1803               	skipnc
 18695  2EBA  178B               	bsf	11,7	;volatile
 18696                           
 18697                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18698  2EBB  0023               	movlb	3	; select bank3
 18699  2EBC  0814               	movf	20,w	;volatile
 18700  2EBD  0021               	movlb	1	; select bank1
 18701  2EBE  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18702  2EBF  0023               	movlb	3	; select bank3
 18703  2EC0  0813               	movf	19,w	;volatile
 18704  2EC1  0021               	movlb	1	; select bank1
 18705  2EC2  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18706  2EC3  0008               	return
 18707  2EC4                     __end_of_FLASH_ReadWord:	
 18708                           
 18709                           	psect	text67
 18710  2F27                     __ptext67:	
 18711 ;; *************** function _InitializeTaps *****************
 18712 ;; Defined at:
 18713 ;;		line 228 in file "user.c"
 18714 ;; Parameters:    Size  Location     Type
 18715 ;;		None
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;  itap            2    1[BANK1 ] int 
 18718 ;; Return value:  Size  Location     Type
 18719 ;;                  1    wreg      void 
 18720 ;; Registers used:
 18721 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18722 ;; Tracked objects:
 18723 ;;		On entry : 0/0
 18724 ;;		On exit  : 0/0
 18725 ;;		Unchanged: 0/0
 18726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18728 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18729 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18730 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18731 ;;Total ram usage:        3 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; Hardware stack levels required when called:    3
 18734 ;; This function calls:
 18735 ;;		Nothing
 18736 ;; This function is called by:
 18737 ;;		_main
 18738 ;; This function uses a non-reentrant model
 18739 ;;
 18740                           
 18741                           
 18742                           ;psect for function _InitializeTaps
 18743  2F27                     _InitializeTaps:	
 18744                           
 18745                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18746                           
 18747                           ;incstack = 0
 18748                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18749  2F27  0021               	movlb	1	; select bank1
 18750  2F28  01A1               	clrf	InitializeTaps@itap^(0+128)
 18751  2F29  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18752  2F2A                     L23:	
 18753  2F2A  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18754  2F2B  3A80               	xorlw	128
 18755  2F2C  00A0               	movwf	??_InitializeTaps^(0+128)
 18756  2F2D  3080               	movlw	128
 18757  2F2E  0220               	subwf	??_InitializeTaps^(0+128),w
 18758  2F2F  1D03               	skipz
 18759  2F30  2F33               	goto	u9215
 18760  2F31  300C               	movlw	12
 18761  2F32  0221               	subwf	InitializeTaps@itap^(0+128),w
 18762  2F33                     u9215:	
 18763  2F33  1803               	btfsc	3,0
 18764  2F34  0008               	return
 18765                           
 18766                           ;user.c: 230: tap[itap] = 0;
 18767  2F35  0021               	movlb	1	; select bank1
 18768  2F36  0821               	movf	InitializeTaps@itap^(0+128),w
 18769  2F37  00A0               	movwf	??_InitializeTaps^(0+128)
 18770  2F38  3001               	movlw	1
 18771  2F39                     u9225:	
 18772  2F39  35A0               	lslf	??_InitializeTaps^(0+128),f
 18773  2F3A  3EFF               	addlw	-1
 18774  2F3B  1D03               	skipz
 18775  2F3C  2F39               	goto	u9225
 18776  2F3D  3520               	lslf	??_InitializeTaps^(0+128),w
 18777  2F3E  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18778  2F3F  0086               	movwf	6
 18779  2F40  3002               	movlw	2	; select bank5/6
 18780  2F41  0087               	movwf	7
 18781  2F42  3000               	movlw	0
 18782  2F43  3FC0               	movwi [0]fsr1
 18783  2F44  3000               	movlw	0
 18784  2F45  3FC1               	movwi [1]fsr1
 18785  2F46  3FC2               	movwi [2]fsr1
 18786  2F47  3FC3               	movwi [3]fsr1
 18787  2F48  3001               	movlw	1
 18788  2F49  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18789  2F4A  3000               	movlw	0
 18790  2F4B  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18791  2F4C  2F2A               	goto	L23
 18792  2F4D                     __end_of_InitializeTaps:	
 18793                           
 18794                           	psect	text68
 18795  2023                     __ptext68:	
 18796 ;; *************** function _InitApp *****************
 18797 ;; Defined at:
 18798 ;;		line 23 in file "user.c"
 18799 ;; Parameters:    Size  Location     Type
 18800 ;;		None
 18801 ;; Auto vars:     Size  Location     Type
 18802 ;;		None
 18803 ;; Return value:  Size  Location     Type
 18804 ;;                  1    wreg      void 
 18805 ;; Registers used:
 18806 ;;		wreg, status,2, status,0, pclath, cstack
 18807 ;; Tracked objects:
 18808 ;;		On entry : 0/0
 18809 ;;		On exit  : 0/0
 18810 ;;		Unchanged: 0/0
 18811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18816 ;;Total ram usage:        0 bytes
 18817 ;; Hardware stack levels used:    1
 18818 ;; Hardware stack levels required when called:    5
 18819 ;; This function calls:
 18820 ;;		_init_adc
 18821 ;;		_init_pwm
 18822 ;; This function is called by:
 18823 ;;		_main
 18824 ;; This function uses a non-reentrant model
 18825 ;;
 18826                           
 18827                           
 18828                           ;psect for function _InitApp
 18829  2023                     _InitApp:	
 18830                           
 18831                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18832                           
 18833                           ;incstack = 0
 18834                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18835  2023  0021               	movlb	1	; select bank1
 18836  2024  100D               	bcf	13,0	;volatile
 18837                           
 18838                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18839  2025  108D               	bcf	13,1	;volatile
 18840                           
 18841                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18842  2026  110D               	bcf	13,2	;volatile
 18843                           
 18844                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18845  2027  118D               	bcf	13,3	;volatile
 18846                           
 18847                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18848  2028  120D               	bcf	13,4	;volatile
 18849                           
 18850                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18851  2029  128D               	bcf	13,5	;volatile
 18852                           
 18853                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18854  202A  140E               	bsf	14,0	;volatile
 18855                           
 18856                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18857  202B  120E               	bcf	14,4	;volatile
 18858                           
 18859                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18860  202C  128E               	bcf	14,5	;volatile
 18861                           
 18862                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18863  202D  100F               	bcf	15,0	;volatile
 18864                           
 18865                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18866  202E  108F               	bcf	15,1	;volatile
 18867                           
 18868                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18869  202F  110F               	bcf	15,2	;volatile
 18870                           
 18871                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18872  2030  118F               	bcf	15,3	;volatile
 18873                           
 18874                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18875  2031  120F               	bcf	15,4	;volatile
 18876                           
 18877                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18878  2032  168F               	bsf	15,5	;volatile
 18879                           
 18880                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18881  2033  170F               	bsf	15,6	;volatile
 18882                           
 18883                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18884  2034  178F               	bsf	15,7	;volatile
 18885                           
 18886                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18887  2035  1410               	bsf	16,0	;volatile
 18888                           
 18889                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18890  2036  1490               	bsf	16,1	;volatile
 18891                           
 18892                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18893  2037  0023               	movlb	3	; select bank3
 18894  2038  1010               	bcf	16,0	;volatile
 18895                           
 18896                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18897  2039  1090               	bcf	16,1	;volatile
 18898                           
 18899                           ;user.c: 53: PORTEbits.RE0 = 0;
 18900  203A  0020               	movlb	0	; select bank0
 18901  203B  1010               	bcf	16,0	;volatile
 18902                           
 18903                           ;user.c: 54: PORTEbits.RE1 = 0;
 18904  203C  1090               	bcf	16,1	;volatile
 18905                           
 18906                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18907  203D  0026               	movlb	6	; select bank6
 18908  203E  100C               	bcf	12,0	;volatile
 18909                           
 18910                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18911  203F  108C               	bcf	12,1	;volatile
 18912                           
 18913                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18914  2040  110C               	bcf	12,2	;volatile
 18915                           
 18916                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18917  2041  118C               	bcf	12,3	;volatile
 18918                           
 18919                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18920  2042  120C               	bcf	12,4	;volatile
 18921                           
 18922                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18923  2043  128C               	bcf	12,5	;volatile
 18924                           
 18925                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18926  2044  170C               	bsf	12,6	;volatile
 18927                           
 18928                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18929  2045  0028               	movlb	8	; select bank8
 18930  2046  130C               	bcf	12,6	;volatile
 18931                           
 18932                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18933  2047  0026               	movlb	6	; select bank6
 18934  2048  108D               	bcf	13,1	;volatile
 18935                           
 18936                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18937  2049  110D               	bcf	13,2	;volatile
 18938                           
 18939                           ;user.c: 68: init_adc();
 18940  204A  31AD  25BB  31A0   	fcall	_init_adc
 18941                           
 18942                           ;user.c: 69: init_pwm();
 18943  204D  31A3  237C         	fcall	_init_pwm
 18944                           
 18945                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18946  204F  178B               	bsf	11,7	;volatile
 18947                           
 18948                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18949  2050  168B               	bsf	11,5	;volatile
 18950                           
 18951                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18952  2051  110B               	bcf	11,2	;volatile
 18953  2052  0008               	return
 18954  2053                     __end_of_InitApp:	
 18955                           
 18956                           	psect	text69
 18957  237C                     __ptext69:	
 18958 ;; *************** function _init_pwm *****************
 18959 ;; Defined at:
 18960 ;;		line 129 in file "user.c"
 18961 ;; Parameters:    Size  Location     Type
 18962 ;;		None
 18963 ;; Auto vars:     Size  Location     Type
 18964 ;;		None
 18965 ;; Return value:  Size  Location     Type
 18966 ;;                  1    wreg      void 
 18967 ;; Registers used:
 18968 ;;		wreg, status,2, status,0, pclath, cstack
 18969 ;; Tracked objects:
 18970 ;;		On entry : 0/0
 18971 ;;		On exit  : 0/0
 18972 ;;		Unchanged: 0/0
 18973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18978 ;;Total ram usage:        0 bytes
 18979 ;; Hardware stack levels used:    1
 18980 ;; Hardware stack levels required when called:    4
 18981 ;; This function calls:
 18982 ;;		_init_timer0
 18983 ;;		_init_timer2
 18984 ;; This function is called by:
 18985 ;;		_InitApp
 18986 ;; This function uses a non-reentrant model
 18987 ;;
 18988                           
 18989                           
 18990                           ;psect for function _init_pwm
 18991  237C                     _init_pwm:	
 18992                           
 18993                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 18994                           
 18995                           ;incstack = 0
 18996                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 18997  237C  0022               	movlb	2	; select bank2
 18998  237D  101D               	bcf	29,0	;volatile
 18999                           
 19000                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19001  237E  0021               	movlb	1	; select bank1
 19002  237F  110E               	bcf	14,2	;volatile
 19003                           
 19004                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19005  2380  108E               	bcf	14,1	;volatile
 19006                           
 19007                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19008  2381  0026               	movlb	6	; select bank6
 19009  2382  100D               	bcf	13,0	;volatile
 19010                           
 19011                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19012  2383  118D               	bcf	13,3	;volatile
 19013                           
 19014                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19015  2384  120D               	bcf	13,4	;volatile
 19016                           
 19017                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19018  2385  0021               	movlb	1	; select bank1
 19019  2386  1310               	bcf	16,6	;volatile
 19020                           
 19021                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19022  2387  1290               	bcf	16,5	;volatile
 19023                           
 19024                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19025  2388  1210               	bcf	16,4	;volatile
 19026                           
 19027                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19028  2389  1190               	bcf	16,3	;volatile
 19029                           
 19030                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19031  238A  1110               	bcf	16,2	;volatile
 19032                           
 19033                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19034  238B  300F               	movlw	15
 19035  238C  0025               	movlb	5	; select bank5
 19036  238D  0493               	iorwf	19,f	;volatile
 19037                           
 19038                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19039  238E  300F               	movlw	15
 19040  238F  049A               	iorwf	26,f	;volatile
 19041                           
 19042                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19043  2390  300F               	movlw	15
 19044  2391  0026               	movlb	6	; select bank6
 19045  2392  0493               	iorwf	19,f	;volatile
 19046                           
 19047                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19048  2393  300F               	movlw	15
 19049  2394  049A               	iorwf	26,f	;volatile
 19050                           
 19051                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19052  2395  300F               	movlw	15
 19053  2396  049E               	iorwf	30,f	;volatile
 19054                           
 19055                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19056  2397  300F               	movlw	15
 19057  2398  002C               	movlb	12	; select bank12
 19058  2399  0493               	iorwf	19,f	;volatile
 19059                           
 19060                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19061  239A  300F               	movlw	15
 19062  239B  0496               	iorwf	22,f	;volatile
 19063                           
 19064                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19065  239C  300F               	movlw	15
 19066  239D  0499               	iorwf	25,f	;volatile
 19067                           
 19068                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19069  239E  300F               	movlw	15
 19070  239F  049C               	iorwf	28,f	;volatile
 19071                           
 19072                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19073  23A0  300F               	movlw	15
 19074  23A1  049F               	iorwf	31,f	;volatile
 19075                           
 19076                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19077  23A2  0025               	movlb	5	; select bank5
 19078  23A3  019D               	clrf	29	;volatile
 19079                           
 19080                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19081  23A4  019E               	clrf	30	;volatile
 19082                           
 19083                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19084  23A5  019F               	clrf	31	;volatile
 19085                           
 19086                           ;user.c: 154: CCPR1 = 50;
 19087  23A6  3000               	movlw	0
 19088  23A7  0092               	movwf	18	;volatile
 19089  23A8  3032               	movlw	50
 19090  23A9  0091               	movwf	17	;volatile
 19091                           
 19092                           ;user.c: 155: CCPR2 = 100;
 19093  23AA  3000               	movlw	0
 19094  23AB  0099               	movwf	25	;volatile
 19095  23AC  3064               	movlw	100
 19096  23AD  0098               	movwf	24	;volatile
 19097                           
 19098                           ;user.c: 156: CCPR3 = 150;
 19099  23AE  3000               	movlw	0
 19100  23AF  0026               	movlb	6	; select bank6
 19101  23B0  0092               	movwf	18	;volatile
 19102  23B1  3096               	movlw	150
 19103  23B2  0091               	movwf	17	;volatile
 19104                           
 19105                           ;user.c: 157: CCPR4 = 200;
 19106  23B3  3000               	movlw	0
 19107  23B4  0099               	movwf	25	;volatile
 19108  23B5  30C8               	movlw	200
 19109  23B6  0098               	movwf	24	;volatile
 19110                           
 19111                           ;user.c: 158: init_timer2();
 19112  23B7  31AD  25A9  31A3   	fcall	_init_timer2
 19113                           
 19114                           ;user.c: 159: init_timer0();
 19115  23BA  31AD  25A2         	fcall	_init_timer0
 19116  23BC  0008               	return
 19117  23BD                     __end_of_init_pwm:	
 19118                           
 19119                           	psect	text70
 19120  2DA9                     __ptext70:	
 19121 ;; *************** function _init_timer2 *****************
 19122 ;; Defined at:
 19123 ;;		line 162 in file "user.c"
 19124 ;; Parameters:    Size  Location     Type
 19125 ;;		None
 19126 ;; Auto vars:     Size  Location     Type
 19127 ;;		None
 19128 ;; Return value:  Size  Location     Type
 19129 ;;                  1    wreg      void 
 19130 ;; Registers used:
 19131 ;;		wreg, status,2, status,0
 19132 ;; Tracked objects:
 19133 ;;		On entry : 0/0
 19134 ;;		On exit  : 0/0
 19135 ;;		Unchanged: 0/0
 19136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19141 ;;Total ram usage:        0 bytes
 19142 ;; Hardware stack levels used:    1
 19143 ;; Hardware stack levels required when called:    3
 19144 ;; This function calls:
 19145 ;;		Nothing
 19146 ;; This function is called by:
 19147 ;;		_init_pwm
 19148 ;; This function uses a non-reentrant model
 19149 ;;
 19150                           
 19151                           
 19152                           ;psect for function _init_timer2
 19153  2DA9                     _init_timer2:	
 19154                           
 19155                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19156                           
 19157                           ;incstack = 0
 19158                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19159  2DA9  3087               	movlw	-121
 19160  2DAA  0020               	movlb	0	; select bank0
 19161  2DAB  059C               	andwf	28,f	;volatile
 19162                           
 19163                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19164  2DAC  30FC               	movlw	-4
 19165  2DAD  059C               	andwf	28,f	;volatile
 19166                           
 19167                           ;user.c: 165: PR2 = 0xFF;
 19168  2DAE  30FF               	movlw	255
 19169  2DAF  009B               	movwf	27	;volatile
 19170                           
 19171                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19172  2DB0  151C               	bsf	28,2	;volatile
 19173  2DB1  0008               	return
 19174  2DB2                     __end_of_init_timer2:	
 19175                           
 19176                           	psect	text71
 19177  2DA2                     __ptext71:	
 19178 ;; *************** function _init_timer0 *****************
 19179 ;; Defined at:
 19180 ;;		line 169 in file "user.c"
 19181 ;; Parameters:    Size  Location     Type
 19182 ;;		None
 19183 ;; Auto vars:     Size  Location     Type
 19184 ;;		None
 19185 ;; Return value:  Size  Location     Type
 19186 ;;                  1    wreg      void 
 19187 ;; Registers used:
 19188 ;;		None
 19189 ;; Tracked objects:
 19190 ;;		On entry : 0/0
 19191 ;;		On exit  : 0/0
 19192 ;;		Unchanged: 0/0
 19193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19198 ;;Total ram usage:        0 bytes
 19199 ;; Hardware stack levels used:    1
 19200 ;; Hardware stack levels required when called:    3
 19201 ;; This function calls:
 19202 ;;		Nothing
 19203 ;; This function is called by:
 19204 ;;		_init_pwm
 19205 ;; This function uses a non-reentrant model
 19206 ;;
 19207                           
 19208                           
 19209                           ;psect for function _init_timer0
 19210  2DA2                     _init_timer0:	
 19211                           
 19212                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19213                           
 19214                           ;incstack = 0
 19215                           ; Regs used in _init_timer0: []
 19216  2DA2  0021               	movlb	1	; select bank1
 19217  2DA3  1295               	bcf	21,5	;volatile
 19218                           
 19219                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19220  2DA4  1195               	bcf	21,3	;volatile
 19221                           
 19222                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19223  2DA5  1015               	bcf	21,0	;volatile
 19224                           
 19225                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19226  2DA6  1495               	bsf	21,1	;volatile
 19227                           
 19228                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19229  2DA7  1115               	bcf	21,2	;volatile
 19230  2DA8  0008               	return
 19231  2DA9                     __end_of_init_timer0:	
 19232                           
 19233                           	psect	text72
 19234  2DBB                     __ptext72:	
 19235 ;; *************** function _init_adc *****************
 19236 ;; Defined at:
 19237 ;;		line 115 in file "user.c"
 19238 ;; Parameters:    Size  Location     Type
 19239 ;;		None
 19240 ;; Auto vars:     Size  Location     Type
 19241 ;;		None
 19242 ;; Return value:  Size  Location     Type
 19243 ;;                  1    wreg      void 
 19244 ;; Registers used:
 19245 ;;		wreg, status,2, status,0
 19246 ;; Tracked objects:
 19247 ;;		On entry : 0/0
 19248 ;;		On exit  : 0/0
 19249 ;;		Unchanged: 0/0
 19250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19255 ;;Total ram usage:        0 bytes
 19256 ;; Hardware stack levels used:    1
 19257 ;; Hardware stack levels required when called:    3
 19258 ;; This function calls:
 19259 ;;		Nothing
 19260 ;; This function is called by:
 19261 ;;		_InitApp
 19262 ;; This function uses a non-reentrant model
 19263 ;;
 19264                           
 19265                           
 19266                           ;psect for function _init_adc
 19267  2DBB                     _init_adc:	
 19268                           
 19269                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19270                           
 19271                           ;incstack = 0
 19272                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19273  2DBB  0021               	movlb	1	; select bank1
 19274  2DBC  179E               	bsf	30,7	;volatile
 19275                           
 19276                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19277  2DBD  081E               	movf	30,w	;volatile
 19278  2DBE  398F               	andlw	-113
 19279  2DBF  3860               	iorlw	96
 19280  2DC0  009E               	movwf	30	;volatile
 19281                           
 19282                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19283  2DC1  30FC               	movlw	-4
 19284  2DC2  059E               	andwf	30,f	;volatile
 19285                           
 19286                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19287  2DC3  141D               	bsf	29,0	;volatile
 19288  2DC4  0008               	return
 19289  2DC5                     __end_of_init_adc:	
 19290                           
 19291                           	psect	text73
 19292  2D9A                     __ptext73:	
 19293 ;; *************** function _ConfigureOscillator *****************
 19294 ;; Defined at:
 19295 ;;		line 18 in file "system.c"
 19296 ;; Parameters:    Size  Location     Type
 19297 ;;		None
 19298 ;; Auto vars:     Size  Location     Type
 19299 ;;		None
 19300 ;; Return value:  Size  Location     Type
 19301 ;;                  1    wreg      void 
 19302 ;; Registers used:
 19303 ;;		wreg, status,2, status,0
 19304 ;; Tracked objects:
 19305 ;;		On entry : 0/0
 19306 ;;		On exit  : 0/0
 19307 ;;		Unchanged: 0/0
 19308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19313 ;;Total ram usage:        0 bytes
 19314 ;; Hardware stack levels used:    1
 19315 ;; Hardware stack levels required when called:    3
 19316 ;; This function calls:
 19317 ;;		Nothing
 19318 ;; This function is called by:
 19319 ;;		_main
 19320 ;; This function uses a non-reentrant model
 19321 ;;
 19322                           
 19323                           
 19324                           ;psect for function _ConfigureOscillator
 19325  2D9A                     _ConfigureOscillator:	
 19326                           
 19327                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19328                           
 19329                           ;incstack = 0
 19330                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19331  2D9A  30FC               	movlw	-4
 19332  2D9B  0021               	movlb	1	; select bank1
 19333  2D9C  0599               	andwf	25,f	;volatile
 19334  2D9D  0008               	return
 19335  2D9E                     __end_of_ConfigureOscillator:	
 19336                           
 19337                           	psect	intentry
 19338  0004                     __pintentry:	
 19339 ;; *************** function _isr *****************
 19340 ;; Defined at:
 19341 ;;		line 28 in file "interrupts.c"
 19342 ;; Parameters:    Size  Location     Type
 19343 ;;		None
 19344 ;; Auto vars:     Size  Location     Type
 19345 ;;  subDiv          1   13[COMMON] unsigned char 
 19346 ;; Return value:  Size  Location     Type
 19347 ;;                  1    wreg      void 
 19348 ;; Registers used:
 19349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19350 ;; Tracked objects:
 19351 ;;		On entry : 0/0
 19352 ;;		On exit  : 0/0
 19353 ;;		Unchanged: 0/0
 19354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19357 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19358 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19359 ;;Total ram usage:        7 bytes
 19360 ;; Hardware stack levels used:    1
 19361 ;; Hardware stack levels required when called:    2
 19362 ;; This function calls:
 19363 ;;		_modulation
 19364 ;;		i1___awdiv
 19365 ;;		i1_getModulationSubdivision
 19366 ;;		i1_set_leds_top
 19367 ;; This function is called by:
 19368 ;;		Interrupt level 1
 19369 ;; This function uses a non-reentrant model
 19370 ;;
 19371                           
 19372  0004                     _isr:	
 19373                           
 19374                           ;incstack = 0
 19375                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19376  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19377  0005  3180               	pagesel	$
 19378  0006  0020               	movlb	0	; select bank0
 19379  0007  087F               	movf	127,w
 19380  0008  00BF               	movwf	??_isr+5
 19381                           
 19382                           ;interrupts.c: 31: extern char isInitialized;
 19383                           ;interrupts.c: 32: extern volatile long timer;
 19384                           ;interrupts.c: 33: extern volatile long sub_timer;
 19385                           ;interrupts.c: 34: extern volatile long tap_timer;
 19386                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19387                           ;interrupts.c: 36: extern int mod_delay_time;
 19388                           ;interrupts.c: 40: extern int top_push_state;
 19389                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19390                           ;interrupts.c: 42: extern volatile long mod_timer;
 19391                           ;interrupts.c: 43: extern volatile long delay_time;
 19392                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 19393  0009  1D0B               	btfss	11,2	;volatile
 19394  000A  2AD8               	goto	i1l135
 19395                           
 19396                           ;interrupts.c: 47: if (isInitialized == 0) {
 19397  000B  0023               	movlb	3	; select bank3
 19398  000C  083E               	movf	_isInitialized^(0+384),w
 19399  000D  1903               	btfsc	3,2
 19400  000E  2AD7               	goto	i1l6974
 19401                           
 19402                           ;interrupts.c: 52: }
 19403                           ;interrupts.c: 62: if (timer == 0) {
 19404                           
 19405                           ;interrupts.c: 51: return;
 19406                           
 19407                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 19408  000F  0020               	movlb	0	; select bank0
 19409  0010  084B               	movf	_timer+3,w	;volatile
 19410  0011  044A               	iorwf	_timer+2,w	;volatile
 19411  0012  0449               	iorwf	_timer+1,w	;volatile
 19412  0013  0448               	iorwf	_timer,w	;volatile
 19413  0014  1D03               	skipz
 19414  0015  281B               	goto	i1l136
 19415                           
 19416                           ;interrupts.c: 63: tmpModDelay = mod_delay_time;
 19417  0016  0023               	movlb	3	; select bank3
 19418  0017  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19419  0018  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19420  0019  0859               	movf	_mod_delay_time^(0+384),w
 19421  001A  00B8               	movwf	_tmpModDelay^(0+384)
 19422  001B                     i1l136:	
 19423                           
 19424                           ;interrupts.c: 64: }
 19425                           ;interrupts.c: 65: timer = timer + 1;
 19426  001B  3001               	movlw	1
 19427  001C  0020               	movlb	0	; select bank0
 19428  001D  00BA               	movwf	??_isr
 19429  001E  3000               	movlw	0
 19430  001F  00BB               	movwf	??_isr+1
 19431  0020  3000               	movlw	0
 19432  0021  00BC               	movwf	??_isr+2
 19433  0022  3000               	movlw	0
 19434  0023  00BD               	movwf	??_isr+3
 19435  0024  0848               	movf	_timer,w	;volatile
 19436  0025  07BA               	addwf	??_isr,f
 19437  0026  0849               	movf	_timer+1,w	;volatile
 19438  0027  3DBB               	addwfc	??_isr+1,f
 19439  0028  084A               	movf	_timer+2,w	;volatile
 19440  0029  3DBC               	addwfc	??_isr+2,f
 19441  002A  084B               	movf	_timer+3,w	;volatile
 19442  002B  3DBD               	addwfc	??_isr+3,f
 19443  002C  083D               	movf	??_isr+3,w
 19444  002D  00CB               	movwf	_timer+3	;volatile
 19445  002E  083C               	movf	??_isr+2,w
 19446  002F  00CA               	movwf	_timer+2	;volatile
 19447  0030  083B               	movf	??_isr+1,w
 19448  0031  00C9               	movwf	_timer+1	;volatile
 19449  0032  083A               	movf	??_isr,w
 19450  0033  00C8               	movwf	_timer	;volatile
 19451                           
 19452                           ;interrupts.c: 66: sub_timer = sub_timer + 1;
 19453  0034  3001               	movlw	1
 19454  0035  00BA               	movwf	??_isr
 19455  0036  3000               	movlw	0
 19456  0037  00BB               	movwf	??_isr+1
 19457  0038  3000               	movlw	0
 19458  0039  00BC               	movwf	??_isr+2
 19459  003A  3000               	movlw	0
 19460  003B  00BD               	movwf	??_isr+3
 19461  003C  0840               	movf	_sub_timer,w	;volatile
 19462  003D  07BA               	addwf	??_isr,f
 19463  003E  0841               	movf	_sub_timer+1,w	;volatile
 19464  003F  3DBB               	addwfc	??_isr+1,f
 19465  0040  0842               	movf	_sub_timer+2,w	;volatile
 19466  0041  3DBC               	addwfc	??_isr+2,f
 19467  0042  0843               	movf	_sub_timer+3,w	;volatile
 19468  0043  3DBD               	addwfc	??_isr+3,f
 19469  0044  083D               	movf	??_isr+3,w
 19470  0045  00C3               	movwf	_sub_timer+3	;volatile
 19471  0046  083C               	movf	??_isr+2,w
 19472  0047  00C2               	movwf	_sub_timer+2	;volatile
 19473  0048  083B               	movf	??_isr+1,w
 19474  0049  00C1               	movwf	_sub_timer+1	;volatile
 19475  004A  083A               	movf	??_isr,w
 19476  004B  00C0               	movwf	_sub_timer	;volatile
 19477                           
 19478                           ;interrupts.c: 67: tap_timer = tap_timer + 1;
 19479  004C  3001               	movlw	1
 19480  004D  00BA               	movwf	??_isr
 19481  004E  3000               	movlw	0
 19482  004F  00BB               	movwf	??_isr+1
 19483  0050  3000               	movlw	0
 19484  0051  00BC               	movwf	??_isr+2
 19485  0052  3000               	movlw	0
 19486  0053  00BD               	movwf	??_isr+3
 19487  0054  0844               	movf	_tap_timer,w	;volatile
 19488  0055  07BA               	addwf	??_isr,f
 19489  0056  0845               	movf	_tap_timer+1,w	;volatile
 19490  0057  3DBB               	addwfc	??_isr+1,f
 19491  0058  0846               	movf	_tap_timer+2,w	;volatile
 19492  0059  3DBC               	addwfc	??_isr+2,f
 19493  005A  0847               	movf	_tap_timer+3,w	;volatile
 19494  005B  3DBD               	addwfc	??_isr+3,f
 19495  005C  083D               	movf	??_isr+3,w
 19496  005D  00C7               	movwf	_tap_timer+3	;volatile
 19497  005E  083C               	movf	??_isr+2,w
 19498  005F  00C6               	movwf	_tap_timer+2	;volatile
 19499  0060  083B               	movf	??_isr+1,w
 19500  0061  00C5               	movwf	_tap_timer+1	;volatile
 19501  0062  083A               	movf	??_isr,w
 19502  0063  00C4               	movwf	_tap_timer	;volatile
 19503                           
 19504                           ;interrupts.c: 68: mod_timer = mod_timer + 1;
 19505  0064  3001               	movlw	1
 19506  0065  00BA               	movwf	??_isr
 19507  0066  3000               	movlw	0
 19508  0067  00BB               	movwf	??_isr+1
 19509  0068  3000               	movlw	0
 19510  0069  00BC               	movwf	??_isr+2
 19511  006A  3000               	movlw	0
 19512  006B  00BD               	movwf	??_isr+3
 19513  006C  0023               	movlb	3	; select bank3
 19514  006D  0824               	movf	_mod_timer^(0+384),w	;volatile
 19515  006E  0020               	movlb	0	; select bank0
 19516  006F  07BA               	addwf	??_isr,f
 19517  0070  0023               	movlb	3	; select bank3
 19518  0071  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19519  0072  0020               	movlb	0	; select bank0
 19520  0073  3DBB               	addwfc	??_isr+1,f
 19521  0074  0023               	movlb	3	; select bank3
 19522  0075  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19523  0076  0020               	movlb	0	; select bank0
 19524  0077  3DBC               	addwfc	??_isr+2,f
 19525  0078  0023               	movlb	3	; select bank3
 19526  0079  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19527  007A  0020               	movlb	0	; select bank0
 19528  007B  3DBD               	addwfc	??_isr+3,f
 19529  007C  083D               	movf	??_isr+3,w
 19530  007D  0023               	movlb	3	; select bank3
 19531  007E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19532  007F  0020               	movlb	0	; select bank0
 19533  0080  083C               	movf	??_isr+2,w
 19534  0081  0023               	movlb	3	; select bank3
 19535  0082  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19536  0083  0020               	movlb	0	; select bank0
 19537  0084  083B               	movf	??_isr+1,w
 19538  0085  0023               	movlb	3	; select bank3
 19539  0086  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19540  0087  0020               	movlb	0	; select bank0
 19541  0088  083A               	movf	??_isr,w
 19542  0089  0023               	movlb	3	; select bank3
 19543  008A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19544                           
 19545                           ;interrupts.c: 69: double_timer++;
 19546  008B  3001               	movlw	1
 19547  008C  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19548  008D  3000               	movlw	0
 19549  008E  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19550  008F  3000               	movlw	0
 19551  0090  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19552  0091  3000               	movlw	0
 19553  0092  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19554                           
 19555                           ;interrupts.c: 71: char subDiv = getModulationSubdivision();
 19556  0093  31AF  2777  3180   	fcall	i1_getModulationSubdivision
 19557  0096  0870               	movf	?i1_getModulationSubdivision,w
 19558  0097  0020               	movlb	0	; select bank0
 19559  0098  00BA               	movwf	??_isr
 19560  0099  083A               	movf	??_isr,w
 19561  009A  00FD               	movwf	isr@subDiv
 19562                           
 19563                           ;interrupts.c: 76: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 19564  009B  0023               	movlb	3	; select bank3
 19565  009C  0838               	movf	_tmpModDelay^(0+384),w
 19566  009D  0020               	movlb	0	; select bank0
 19567  009E  00BA               	movwf	??_isr
 19568  009F  0023               	movlb	3	; select bank3
 19569  00A0  0839               	movf	(_tmpModDelay+1)^(0+384),w
 19570  00A1  0020               	movlb	0	; select bank0
 19571  00A2  00BB               	movwf	??_isr+1
 19572  00A3  3000               	movlw	0
 19573  00A4  1BBB               	btfsc	??_isr+1,7
 19574  00A5  30FF               	movlw	255
 19575  00A6  00BC               	movwf	??_isr+2
 19576  00A7  00BD               	movwf	??_isr+3
 19577  00A8  0023               	movlb	3	; select bank3
 19578  00A9  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19579  00AA  3A80               	xorlw	128
 19580  00AB  0020               	movlb	0	; select bank0
 19581  00AC  00BE               	movwf	??_isr+4
 19582  00AD  083D               	movf	??_isr+3,w
 19583  00AE  3A80               	xorlw	128
 19584  00AF  023E               	subwf	??_isr+4,w
 19585  00B0  0023               	movlb	3	; select bank3
 19586  00B1  1D03               	skipz
 19587  00B2  28C3               	goto	u670_23
 19588  00B3  0020               	movlb	0	; select bank0
 19589  00B4  083C               	movf	??_isr+2,w
 19590  00B5  0023               	movlb	3	; select bank3
 19591  00B6  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19592  00B7  1D03               	skipz
 19593  00B8  28C3               	goto	u670_23
 19594  00B9  0020               	movlb	0	; select bank0
 19595  00BA  083B               	movf	??_isr+1,w
 19596  00BB  0023               	movlb	3	; select bank3
 19597  00BC  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19598  00BD  1D03               	skipz
 19599  00BE  28C3               	goto	u670_23
 19600  00BF  0020               	movlb	0	; select bank0
 19601  00C0  083A               	movf	??_isr,w
 19602  00C1  0023               	movlb	3	; select bank3
 19603  00C2  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19604  00C3                     u670_23:	
 19605  00C3  1C03               	skipc
 19606  00C4  28EF               	goto	i1l137
 19607  00C5  087D               	movf	isr@subDiv,w
 19608  00C6  0020               	movlb	0	; select bank0
 19609  00C7  00BA               	movwf	??_isr
 19610  00C8  01BB               	clrf	??_isr+1
 19611  00C9  0023               	movlb	3	; select bank3
 19612  00CA  0858               	movf	(_mod_counter+1)^(0+384),w
 19613  00CB  0020               	movlb	0	; select bank0
 19614  00CC  063B               	xorwf	??_isr+1,w
 19615  00CD  1D03               	skipz
 19616  00CE  28D3               	goto	u671_25
 19617  00CF  0023               	movlb	3	; select bank3
 19618  00D0  0857               	movf	_mod_counter^(0+384),w
 19619  00D1  0020               	movlb	0	; select bank0
 19620  00D2  063A               	xorwf	??_isr,w
 19621  00D3                     u671_25:	
 19622  00D3  1D03               	skipz
 19623  00D4  28EF               	goto	i1l137
 19624  00D5  0023               	movlb	3	; select bank3
 19625  00D6  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19626  00D7  0639               	xorwf	(_tmpModDelay+1)^(0+384),w
 19627  00D8  1D03               	skipz
 19628  00D9  28DC               	goto	u672_25
 19629  00DA  0859               	movf	_mod_delay_time^(0+384),w
 19630  00DB  0638               	xorwf	_tmpModDelay^(0+384),w
 19631  00DC                     u672_25:	
 19632  00DC  1D03               	skipz
 19633  00DD  28EF               	goto	i1l137
 19634                           
 19635                           ;interrupts.c: 77: tmpModDelay = (delay_time - sub_timer);
 19636  00DE  0020               	movlb	0	; select bank0
 19637  00DF  0940               	comf	_sub_timer,w	;volatile
 19638  00E0  00BA               	movwf	??_isr
 19639  00E1  0941               	comf	_sub_timer+1,w	;volatile
 19640  00E2  00BB               	movwf	??_isr+1
 19641  00E3  0ABA               	incf	??_isr,f
 19642  00E4  1903               	skipnz
 19643  00E5  0ABB               	incf	??_isr+1,f
 19644  00E6  0852               	movf	_delay_time,w	;volatile
 19645  00E7  073A               	addwf	??_isr,w
 19646  00E8  0023               	movlb	3	; select bank3
 19647  00E9  00B8               	movwf	_tmpModDelay^(0+384)
 19648  00EA  0020               	movlb	0	; select bank0
 19649  00EB  0853               	movf	_delay_time+1,w	;volatile
 19650  00EC  3D3B               	addwfc	??_isr+1,w
 19651  00ED  0023               	movlb	3	; select bank3
 19652  00EE  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19653  00EF                     i1l137:	
 19654                           
 19655                           ;interrupts.c: 78: }
 19656                           ;interrupts.c: 80: if (longBypass_start == 1) {
 19657  00EF  0022               	movlb	2	; select bank2
 19658  00F0  036A               	decf	_longBypass_start^(0+256),w
 19659  00F1  1D03               	btfss	3,2
 19660  00F2  290A               	goto	i1l6878
 19661                           
 19662                           ;interrupts.c: 81: longBypass_timer++;
 19663  00F3  3001               	movlw	1
 19664  00F4  0023               	movlb	3	; select bank3
 19665  00F5  07B2               	addwf	_longBypass_timer^(0+384),f	;volatile
 19666  00F6  3000               	movlw	0
 19667  00F7  3DB3               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19668                           
 19669                           ;interrupts.c: 82: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19670  00F8  0833               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19671  00F9  0020               	movlb	0	; select bank0
 19672  00FA  0259               	subwf	_long_press_limit+1,w
 19673  00FB  1D03               	skipz
 19674  00FC  2901               	goto	u674_25
 19675  00FD  0023               	movlb	3	; select bank3
 19676  00FE  0832               	movf	_longBypass_timer^(0+384),w	;volatile
 19677  00FF  0020               	movlb	0	; select bank0
 19678  0100  0258               	subwf	_long_press_limit,w
 19679  0101                     u674_25:	
 19680  0101  1803               	skipnc
 19681  0102  290A               	goto	i1l6878
 19682  0103  0859               	movf	_long_press_limit+1,w
 19683  0104  0023               	movlb	3	; select bank3
 19684  0105  00B3               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19685  0106  0020               	movlb	0	; select bank0
 19686  0107  0858               	movf	_long_press_limit,w
 19687  0108  0023               	movlb	3	; select bank3
 19688  0109  00B2               	movwf	_longBypass_timer^(0+384)	;volatile
 19689  010A                     i1l6878:	
 19690                           
 19691                           ;interrupts.c: 83: }
 19692                           ;interrupts.c: 84: if (longTap_start == 1) {
 19693  010A  0022               	movlb	2	; select bank2
 19694  010B  036B               	decf	_longTap_start^(0+256),w
 19695  010C  1D03               	btfss	3,2
 19696  010D  2925               	goto	i1l6884
 19697                           
 19698                           ;interrupts.c: 85: longTap_timer++;
 19699  010E  3001               	movlw	1
 19700  010F  0023               	movlb	3	; select bank3
 19701  0110  07B4               	addwf	_longTap_timer^(0+384),f	;volatile
 19702  0111  3000               	movlw	0
 19703  0112  3DB5               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19704                           
 19705                           ;interrupts.c: 86: if (longTap_timer > long_press_limit) {
 19706  0113  0835               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19707  0114  0020               	movlb	0	; select bank0
 19708  0115  0259               	subwf	_long_press_limit+1,w
 19709  0116  1D03               	skipz
 19710  0117  291C               	goto	u676_25
 19711  0118  0023               	movlb	3	; select bank3
 19712  0119  0834               	movf	_longTap_timer^(0+384),w	;volatile
 19713  011A  0020               	movlb	0	; select bank0
 19714  011B  0258               	subwf	_long_press_limit,w
 19715  011C                     u676_25:	
 19716  011C  1803               	skipnc
 19717  011D  2925               	goto	i1l6884
 19718                           
 19719                           ;interrupts.c: 87: longTap_timer = long_press_limit;
 19720  011E  0859               	movf	_long_press_limit+1,w
 19721  011F  0023               	movlb	3	; select bank3
 19722  0120  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19723  0121  0020               	movlb	0	; select bank0
 19724  0122  0858               	movf	_long_press_limit,w
 19725  0123  0023               	movlb	3	; select bank3
 19726  0124  00B4               	movwf	_longTap_timer^(0+384)	;volatile
 19727  0125                     i1l6884:	
 19728                           
 19729                           ;interrupts.c: 88: }
 19730                           ;interrupts.c: 89: }
 19731                           ;interrupts.c: 91: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19732  0125  0020               	movlb	0	; select bank0
 19733  0126  085D               	movf	_longTap_state,w	;volatile
 19734  0127  1D03               	btfss	3,2
 19735  0128  2985               	goto	i1l6910
 19736  0129  084E               	movf	_doubleTap_state,w	;volatile
 19737  012A  1D03               	btfss	3,2
 19738  012B  2985               	goto	i1l6910
 19739  012C  0851               	movf	_presetSaveMode,w
 19740  012D  1D03               	btfss	3,2
 19741  012E  2985               	goto	i1l6910
 19742                           
 19743                           ;interrupts.c: 93: if (timer >= baseline_mod_time) {
 19744  012F  084B               	movf	_timer+3,w	;volatile
 19745  0130  3A80               	xorlw	128
 19746  0131  00BA               	movwf	??_isr
 19747  0132  0023               	movlb	3	; select bank3
 19748  0133  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
 19749  0134  3A80               	xorlw	128
 19750  0135  0020               	movlb	0	; select bank0
 19751  0136  023A               	subwf	??_isr,w
 19752  0137  1D03               	skipz
 19753  0138  2949               	goto	u680_23
 19754  0139  0023               	movlb	3	; select bank3
 19755  013A  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
 19756  013B  0020               	movlb	0	; select bank0
 19757  013C  024A               	subwf	_timer+2,w	;volatile
 19758  013D  1D03               	skipz
 19759  013E  2949               	goto	u680_23
 19760  013F  0023               	movlb	3	; select bank3
 19761  0140  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
 19762  0141  0020               	movlb	0	; select bank0
 19763  0142  0249               	subwf	_timer+1,w	;volatile
 19764  0143  1D03               	skipz
 19765  0144  2949               	goto	u680_23
 19766  0145  0023               	movlb	3	; select bank3
 19767  0146  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
 19768  0147  0020               	movlb	0	; select bank0
 19769  0148  0248               	subwf	_timer,w	;volatile
 19770  0149                     u680_23:	
 19771  0149  1C03               	skipc
 19772  014A  2973               	goto	i1l6906
 19773                           
 19774                           ;interrupts.c: 96: LATBbits.LATB4 = 1;
 19775  014B  0022               	movlb	2	; select bank2
 19776  014C  160D               	bsf	13,4	;volatile
 19777                           
 19778                           ;interrupts.c: 98: timer = 0;
 19779  014D  3000               	movlw	0
 19780  014E  0020               	movlb	0	; select bank0
 19781  014F  00CB               	movwf	_timer+3	;volatile
 19782  0150  3000               	movlw	0
 19783  0151  00CA               	movwf	_timer+2	;volatile
 19784  0152  3000               	movlw	0
 19785  0153  00C9               	movwf	_timer+1	;volatile
 19786  0154  3000               	movlw	0
 19787  0155  00C8               	movwf	_timer	;volatile
 19788                           
 19789                           ;interrupts.c: 100: if (modulation_changed == 1) {
 19790  0156  0023               	movlb	3	; select bank3
 19791  0157  0342               	decf	_modulation_changed^(0+384),w
 19792  0158  1D03               	btfss	3,2
 19793  0159  2973               	goto	i1l6906
 19794                           
 19795                           ;interrupts.c: 103: modulation_changed = 0;
 19796  015A  01C2               	clrf	_modulation_changed^(0+384)
 19797                           
 19798                           ;interrupts.c: 104: mod_time_changed = 0;
 19799  015B  01E4               	clrf	_mod_time_changed^(0+384)
 19800                           
 19801                           ;interrupts.c: 105: sub_timer = delay_time;
 19802  015C  0020               	movlb	0	; select bank0
 19803  015D  0855               	movf	_delay_time+3,w	;volatile
 19804  015E  00C3               	movwf	_sub_timer+3	;volatile
 19805  015F  0854               	movf	_delay_time+2,w	;volatile
 19806  0160  00C2               	movwf	_sub_timer+2	;volatile
 19807  0161  0853               	movf	_delay_time+1,w	;volatile
 19808  0162  00C1               	movwf	_sub_timer+1	;volatile
 19809  0163  0852               	movf	_delay_time,w	;volatile
 19810  0164  00C0               	movwf	_sub_timer	;volatile
 19811                           
 19812                           ;interrupts.c: 106: tmpModDelay = mod_delay_time;
 19813  0165  0023               	movlb	3	; select bank3
 19814  0166  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19815  0167  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19816  0168  0859               	movf	_mod_delay_time^(0+384),w
 19817  0169  00B8               	movwf	_tmpModDelay^(0+384)
 19818                           
 19819                           ;interrupts.c: 107: mod_timer = tmpModDelay;
 19820  016A  0838               	movf	_tmpModDelay^(0+384),w
 19821  016B  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19822  016C  0839               	movf	(_tmpModDelay+1)^(0+384),w
 19823  016D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19824  016E  0D89               	rlf	9,f
 19825  016F  3B89               	subwfb	9,f
 19826  0170  0989               	comf	9,f
 19827  0171  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19828  0172  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19829  0173                     i1l6906:	
 19830                           
 19831                           ;interrupts.c: 115: }
 19832                           ;interrupts.c: 116: }
 19833                           ;interrupts.c: 118: if (timer >= 30) {
 19834  0173  0020               	movlb	0	; select bank0
 19835  0174  1BCB               	btfsc	_timer+3,7	;volatile
 19836  0175  2985               	goto	i1l6910
 19837  0176  084B               	movf	_timer+3,w	;volatile
 19838  0177  1D03               	btfss	3,2
 19839  0178  2983               	goto	i1l6908
 19840  0179  084A               	movf	_timer+2,w	;volatile
 19841  017A  1D03               	btfss	3,2
 19842  017B  2983               	goto	i1l6908
 19843  017C  0849               	movf	_timer+1,w	;volatile
 19844  017D  1D03               	btfss	3,2
 19845  017E  2983               	goto	i1l6908
 19846  017F  301E               	movlw	30
 19847  0180  0248               	subwf	_timer,w	;volatile
 19848  0181  1C03               	btfss	3,0
 19849  0182  2985               	goto	i1l6910
 19850  0183                     i1l6908:	
 19851                           
 19852                           ;interrupts.c: 120: LATBbits.LATB4 = 0;
 19853  0183  0022               	movlb	2	; select bank2
 19854  0184  120D               	bcf	13,4	;volatile
 19855  0185                     i1l6910:	
 19856                           
 19857                           ;interrupts.c: 122: }
 19858                           ;interrupts.c: 123: }
 19859                           ;interrupts.c: 132: if (presetSaveMode < 1 && mode2_state == 0) {
 19860  0185  0020               	movlb	0	; select bank0
 19861  0186  0851               	movf	_presetSaveMode,w
 19862  0187  1D03               	btfss	3,2
 19863  0188  29D7               	goto	i1l6928
 19864  0189  0850               	movf	_mode2_state,w
 19865  018A  1D03               	btfss	3,2
 19866  018B  29D7               	goto	i1l6928
 19867                           
 19868                           ;interrupts.c: 133: if (sub_timer >= delay_time ) {
 19869  018C  0843               	movf	_sub_timer+3,w	;volatile
 19870  018D  3A80               	xorlw	128
 19871  018E  00BA               	movwf	??_isr
 19872  018F  0855               	movf	_delay_time+3,w	;volatile
 19873  0190  3A80               	xorlw	128
 19874  0191  023A               	subwf	??_isr,w
 19875  0192  1D03               	skipz
 19876  0193  299E               	goto	u685_23
 19877  0194  0854               	movf	_delay_time+2,w	;volatile
 19878  0195  0242               	subwf	_sub_timer+2,w	;volatile
 19879  0196  1D03               	skipz
 19880  0197  299E               	goto	u685_23
 19881  0198  0853               	movf	_delay_time+1,w	;volatile
 19882  0199  0241               	subwf	_sub_timer+1,w	;volatile
 19883  019A  1D03               	skipz
 19884  019B  299E               	goto	u685_23
 19885  019C  0852               	movf	_delay_time,w	;volatile
 19886  019D  0240               	subwf	_sub_timer,w	;volatile
 19887  019E                     u685_23:	
 19888  019E  1C03               	skipc
 19889  019F  29B9               	goto	i1l6922
 19890                           
 19891                           ;interrupts.c: 134: if (suspend_blink == 0) {
 19892  01A0  0022               	movlb	2	; select bank2
 19893  01A1  086D               	movf	_suspend_blink^(0+256),w	;volatile
 19894  01A2  1D03               	btfss	3,2
 19895  01A3  29B0               	goto	i1l6920
 19896                           
 19897                           ;interrupts.c: 135: set_leds_top(top_push_state, 1);
 19898  01A4  0020               	movlb	0	; select bank0
 19899  01A5  085B               	movf	_top_push_state+1,w
 19900  01A6  00F1               	movwf	i1set_leds_top@x+1
 19901  01A7  085A               	movf	_top_push_state,w
 19902  01A8  00F0               	movwf	i1set_leds_top@x
 19903  01A9  3001               	movlw	1
 19904  01AA  00F2               	movwf	i1set_leds_top@ledState
 19905  01AB  3000               	movlw	0
 19906  01AC  00F3               	movwf	i1set_leds_top@ledState+1
 19907  01AD  31A3  23BD  3180   	fcall	i1_set_leds_top
 19908  01B0                     i1l6920:	
 19909                           
 19910                           ;interrupts.c: 136: }
 19911                           ;interrupts.c: 138: sub_timer = 0;
 19912  01B0  3000               	movlw	0
 19913  01B1  0020               	movlb	0	; select bank0
 19914  01B2  00C3               	movwf	_sub_timer+3	;volatile
 19915  01B3  3000               	movlw	0
 19916  01B4  00C2               	movwf	_sub_timer+2	;volatile
 19917  01B5  3000               	movlw	0
 19918  01B6  00C1               	movwf	_sub_timer+1	;volatile
 19919  01B7  3000               	movlw	0
 19920  01B8  00C0               	movwf	_sub_timer	;volatile
 19921  01B9                     i1l6922:	
 19922                           
 19923                           ;interrupts.c: 139: }
 19924                           ;interrupts.c: 141: if (sub_timer >= 20) {
 19925  01B9  1BC3               	btfsc	_sub_timer+3,7	;volatile
 19926  01BA  29D7               	goto	i1l6928
 19927  01BB  0843               	movf	_sub_timer+3,w	;volatile
 19928  01BC  1D03               	btfss	3,2
 19929  01BD  29C8               	goto	i1l6924
 19930  01BE  0842               	movf	_sub_timer+2,w	;volatile
 19931  01BF  1D03               	btfss	3,2
 19932  01C0  29C8               	goto	i1l6924
 19933  01C1  0841               	movf	_sub_timer+1,w	;volatile
 19934  01C2  1D03               	btfss	3,2
 19935  01C3  29C8               	goto	i1l6924
 19936  01C4  3014               	movlw	20
 19937  01C5  0240               	subwf	_sub_timer,w	;volatile
 19938  01C6  1C03               	btfss	3,0
 19939  01C7  29D7               	goto	i1l6928
 19940  01C8                     i1l6924:	
 19941                           
 19942                           ;interrupts.c: 142: if (suspend_blink == 0) {
 19943  01C8  0022               	movlb	2	; select bank2
 19944  01C9  086D               	movf	_suspend_blink^(0+256),w	;volatile
 19945  01CA  1D03               	btfss	3,2
 19946  01CB  29D7               	goto	i1l6928
 19947                           
 19948                           ;interrupts.c: 143: set_leds_top(top_push_state, 0);
 19949  01CC  0020               	movlb	0	; select bank0
 19950  01CD  085B               	movf	_top_push_state+1,w
 19951  01CE  00F1               	movwf	i1set_leds_top@x+1
 19952  01CF  085A               	movf	_top_push_state,w
 19953  01D0  00F0               	movwf	i1set_leds_top@x
 19954  01D1  3000               	movlw	0
 19955  01D2  00F2               	movwf	i1set_leds_top@ledState
 19956  01D3  00F3               	movwf	i1set_leds_top@ledState+1
 19957  01D4  31A3  23BD  3180   	fcall	i1_set_leds_top
 19958  01D7                     i1l6928:	
 19959                           
 19960                           ;interrupts.c: 144: }
 19961                           ;interrupts.c: 145: }
 19962                           ;interrupts.c: 146: }
 19963                           ;interrupts.c: 151: if (presetSaveMode == 1) {
 19964  01D7  0020               	movlb	0	; select bank0
 19965  01D8  0351               	decf	_presetSaveMode,w
 19966  01D9  1D03               	btfss	3,2
 19967  01DA  2A07               	goto	i1l6940
 19968                           
 19969                           ;interrupts.c: 152: if (double_timer >= 250) {
 19970  01DB  0023               	movlb	3	; select bank3
 19971  01DC  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19972  01DD  29F6               	goto	i1l6936
 19973  01DE  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19974  01DF  1D03               	btfss	3,2
 19975  01E0  29EB               	goto	i1l6932
 19976  01E1  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19977  01E2  1D03               	btfss	3,2
 19978  01E3  29EB               	goto	i1l6932
 19979  01E4  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19980  01E5  1D03               	btfss	3,2
 19981  01E6  29EB               	goto	i1l6932
 19982  01E7  30FA               	movlw	250
 19983  01E8  0220               	subwf	_double_timer^(0+384),w	;volatile
 19984  01E9  1C03               	btfss	3,0
 19985  01EA  29F6               	goto	i1l6936
 19986  01EB                     i1l6932:	
 19987                           
 19988                           ;interrupts.c: 153: LATBbits.LATB0 = 1;
 19989  01EB  0022               	movlb	2	; select bank2
 19990  01EC  140D               	bsf	13,0	;volatile
 19991                           
 19992                           ;interrupts.c: 154: double_timer = 0;
 19993  01ED  3000               	movlw	0
 19994  01EE  0023               	movlb	3	; select bank3
 19995  01EF  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19996  01F0  3000               	movlw	0
 19997  01F1  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19998  01F2  3000               	movlw	0
 19999  01F3  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 20000  01F4  3000               	movlw	0
 20001  01F5  00A0               	movwf	_double_timer^(0+384)	;volatile
 20002  01F6                     i1l6936:	
 20003                           
 20004                           ;interrupts.c: 155: }
 20005                           ;interrupts.c: 156: if (double_timer >= 30) {
 20006  01F6  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20007  01F7  2A07               	goto	i1l6940
 20008  01F8  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20009  01F9  1D03               	btfss	3,2
 20010  01FA  2A05               	goto	i1l6938
 20011  01FB  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20012  01FC  1D03               	btfss	3,2
 20013  01FD  2A05               	goto	i1l6938
 20014  01FE  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20015  01FF  1D03               	btfss	3,2
 20016  0200  2A05               	goto	i1l6938
 20017  0201  301E               	movlw	30
 20018  0202  0220               	subwf	_double_timer^(0+384),w	;volatile
 20019  0203  1C03               	btfss	3,0
 20020  0204  2A07               	goto	i1l6940
 20021  0205                     i1l6938:	
 20022                           
 20023                           ;interrupts.c: 157: LATBbits.LATB0 = 0;
 20024  0205  0022               	movlb	2	; select bank2
 20025  0206  100D               	bcf	13,0	;volatile
 20026  0207                     i1l6940:	
 20027                           
 20028                           ;interrupts.c: 158: }
 20029                           ;interrupts.c: 159: }
 20030                           ;interrupts.c: 178: if (mod_timer >= tmpModDelay) {
 20031  0207  0023               	movlb	3	; select bank3
 20032  0208  0838               	movf	_tmpModDelay^(0+384),w
 20033  0209  0020               	movlb	0	; select bank0
 20034  020A  00BA               	movwf	??_isr
 20035  020B  0023               	movlb	3	; select bank3
 20036  020C  0839               	movf	(_tmpModDelay+1)^(0+384),w
 20037  020D  0020               	movlb	0	; select bank0
 20038  020E  00BB               	movwf	??_isr+1
 20039  020F  3000               	movlw	0
 20040  0210  1BBB               	btfsc	??_isr+1,7
 20041  0211  30FF               	movlw	255
 20042  0212  00BC               	movwf	??_isr+2
 20043  0213  00BD               	movwf	??_isr+3
 20044  0214  0023               	movlb	3	; select bank3
 20045  0215  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20046  0216  3A80               	xorlw	128
 20047  0217  0020               	movlb	0	; select bank0
 20048  0218  00BE               	movwf	??_isr+4
 20049  0219  083D               	movf	??_isr+3,w
 20050  021A  3A80               	xorlw	128
 20051  021B  023E               	subwf	??_isr+4,w
 20052  021C  0023               	movlb	3	; select bank3
 20053  021D  1D03               	skipz
 20054  021E  2A2F               	goto	u692_23
 20055  021F  0020               	movlb	0	; select bank0
 20056  0220  083C               	movf	??_isr+2,w
 20057  0221  0023               	movlb	3	; select bank3
 20058  0222  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20059  0223  1D03               	skipz
 20060  0224  2A2F               	goto	u692_23
 20061  0225  0020               	movlb	0	; select bank0
 20062  0226  083B               	movf	??_isr+1,w
 20063  0227  0023               	movlb	3	; select bank3
 20064  0228  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20065  0229  1D03               	skipz
 20066  022A  2A2F               	goto	u692_23
 20067  022B  0020               	movlb	0	; select bank0
 20068  022C  083A               	movf	??_isr,w
 20069  022D  0023               	movlb	3	; select bank3
 20070  022E  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20071  022F                     u692_23:	
 20072  022F  1C03               	skipc
 20073  0230  2A9F               	goto	i1l6956
 20074                           
 20075                           ;interrupts.c: 179: mod_timer = 0;
 20076  0231  3000               	movlw	0
 20077  0232  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20078  0233  3000               	movlw	0
 20079  0234  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20080  0235  3000               	movlw	0
 20081  0236  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20082  0237  3000               	movlw	0
 20083  0238  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20084                           
 20085                           ;interrupts.c: 181: if (mod_counter >= subDiv) {
 20086  0239  0858               	movf	(_mod_counter+1)^(0+384),w
 20087  023A  3A80               	xorlw	128
 20088  023B  0020               	movlb	0	; select bank0
 20089  023C  00BA               	movwf	??_isr
 20090  023D  3080               	movlw	128
 20091  023E  023A               	subwf	??_isr,w
 20092  023F  1D03               	skipz
 20093  0240  2A44               	goto	u693_25
 20094  0241  087D               	movf	isr@subDiv,w
 20095  0242  0023               	movlb	3	; select bank3
 20096  0243  0257               	subwf	_mod_counter^(0+384),w
 20097  0244                     u693_25:	
 20098  0244  1C03               	skipc
 20099  0245  2A4D               	goto	i1l6948
 20100                           
 20101                           ;interrupts.c: 182: mod_counter = 0;
 20102  0246  0023               	movlb	3	; select bank3
 20103  0247  01D7               	clrf	_mod_counter^(0+384)
 20104  0248  01D8               	clrf	(_mod_counter+1)^(0+384)
 20105                           
 20106                           ;interrupts.c: 183: tmpModDelay = mod_delay_time;
 20107  0249  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20108  024A  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 20109  024B  0859               	movf	_mod_delay_time^(0+384),w
 20110  024C  00B8               	movwf	_tmpModDelay^(0+384)
 20111  024D                     i1l6948:	
 20112                           
 20113                           ;interrupts.c: 187: }
 20114                           ;interrupts.c: 191: mod_value = modArray[mod_counter];
 20115  024D  0023               	movlb	3	; select bank3
 20116  024E  0858               	movf	(_mod_counter+1)^(0+384),w
 20117  024F  0020               	movlb	0	; select bank0
 20118  0250  00BB               	movwf	??_isr+1
 20119  0251  0023               	movlb	3	; select bank3
 20120  0252  0857               	movf	_mod_counter^(0+384),w
 20121  0253  0020               	movlb	0	; select bank0
 20122  0254  00BA               	movwf	??_isr
 20123  0255  35BA               	lslf	??_isr,f
 20124  0256  0DBB               	rlf	??_isr+1,f
 20125  0257  308A               	movlw	138
 20126  0258  00BC               	movwf	??_isr+2
 20127  0259  3023               	movlw	35
 20128  025A  00BD               	movwf	??_isr+3
 20129  025B  083A               	movf	??_isr,w
 20130  025C  073C               	addwf	??_isr+2,w
 20131  025D  0086               	movwf	6
 20132  025E  083B               	movf	??_isr+1,w
 20133  025F  3D3D               	addwfc	??_isr+3,w
 20134  0260  0087               	movwf	7
 20135  0261  3F40               	moviw [0]fsr1
 20136  0262  0024               	movlb	4	; select bank4
 20137  0263  00CF               	movwf	_mod_value^(0+512)
 20138  0264  3F41               	moviw [1]fsr1
 20139  0265  00D0               	movwf	(_mod_value+1)^(0+512)
 20140                           
 20141                           ;interrupts.c: 198: mod_value = modulation(mod_value, adjusted_pot_value);
 20142  0266  084F               	movf	_mod_value^(0+512),w
 20143  0267  0020               	movlb	0	; select bank0
 20144  0268  00AE               	movwf	modulation@x
 20145  0269  0024               	movlb	4	; select bank4
 20146  026A  0850               	movf	(_mod_value+1)^(0+512),w
 20147  026B  0020               	movlb	0	; select bank0
 20148  026C  00AF               	movwf	modulation@x+1
 20149  026D  0D89               	rlf	9,f
 20150  026E  3B89               	subwfb	9,f
 20151  026F  0989               	comf	9,f
 20152  0270  00B0               	movwf	modulation@x+2
 20153  0271  00B1               	movwf	modulation@x+3
 20154  0272  0024               	movlb	4	; select bank4
 20155  0273  0841               	movf	_adjusted_pot_value^(0+512),w
 20156  0274  0020               	movlb	0	; select bank0
 20157  0275  00B2               	movwf	modulation@y
 20158  0276  0024               	movlb	4	; select bank4
 20159  0277  0842               	movf	(_adjusted_pot_value+1)^(0+512),w
 20160  0278  0020               	movlb	0	; select bank0
 20161  0279  00B3               	movwf	modulation@y+1
 20162  027A  0D89               	rlf	9,f
 20163  027B  3B89               	subwfb	9,f
 20164  027C  0989               	comf	9,f
 20165  027D  00B4               	movwf	modulation@y+2
 20166  027E  00B5               	movwf	modulation@y+3
 20167  027F  31A3  233B  3180   	fcall	_modulation
 20168  0282  0020               	movlb	0	; select bank0
 20169  0283  082F               	movf	?_modulation+1,w
 20170  0284  0024               	movlb	4	; select bank4
 20171  0285  00D0               	movwf	(_mod_value+1)^(0+512)
 20172  0286  0020               	movlb	0	; select bank0
 20173  0287  082E               	movf	?_modulation,w
 20174  0288  0024               	movlb	4	; select bank4
 20175  0289  00CF               	movwf	_mod_value^(0+512)
 20176                           
 20177                           ;interrupts.c: 199: CCPR3 = mod_value / 2;
 20178  028A  3002               	movlw	2
 20179  028B  00F0               	movwf	i1___awdiv@divisor
 20180  028C  3000               	movlw	0
 20181  028D  00F1               	movwf	i1___awdiv@divisor+1
 20182  028E  0850               	movf	(_mod_value+1)^(0+512),w
 20183  028F  00F3               	movwf	i1___awdiv@dividend+1
 20184  0290  084F               	movf	_mod_value^(0+512),w
 20185  0291  00F2               	movwf	i1___awdiv@dividend
 20186  0292  31A4  24ED  3180   	fcall	i1___awdiv
 20187  0295  0871               	movf	?i1___awdiv+1,w
 20188  0296  0026               	movlb	6	; select bank6
 20189  0297  0092               	movwf	18	;volatile
 20190  0298  0870               	movf	?i1___awdiv,w
 20191  0299  0091               	movwf	17	;volatile
 20192                           
 20193                           ;interrupts.c: 200: mod_counter++;
 20194  029A  3001               	movlw	1
 20195  029B  0023               	movlb	3	; select bank3
 20196  029C  07D7               	addwf	_mod_counter^(0+384),f
 20197  029D  3000               	movlw	0
 20198  029E  3DD8               	addwfc	(_mod_counter+1)^(0+384),f
 20199  029F                     i1l6956:	
 20200                           
 20201                           ;interrupts.c: 202: }
 20202                           ;interrupts.c: 204: if (preset_programmning_on == 1) {
 20203  029F  0343               	decf	_preset_programmning_on^(0+384),w
 20204  02A0  1D03               	btfss	3,2
 20205  02A1  2AD1               	goto	i1l6968
 20206                           
 20207                           ;interrupts.c: 205: preset_blink++;
 20208  02A2  3001               	movlw	1
 20209  02A3  0020               	movlb	0	; select bank0
 20210  02A4  00BA               	movwf	??_isr
 20211  02A5  083A               	movf	??_isr,w
 20212  02A6  0022               	movlb	2	; select bank2
 20213  02A7  07EC               	addwf	_preset_blink^(0+256),f
 20214                           
 20215                           ;interrupts.c: 207: if (preset_blink >= blink_delay) {
 20216  02A8  0023               	movlb	3	; select bank3
 20217  02A9  084C               	movf	(_blink_delay+1)^(0+384),w
 20218  02AA  3A80               	xorlw	128
 20219  02AB  3C80               	sublw	128
 20220  02AC  1D03               	skipz
 20221  02AD  2AB1               	goto	u695_25
 20222  02AE  084B               	movf	_blink_delay^(0+384),w
 20223  02AF  0022               	movlb	2	; select bank2
 20224  02B0  026C               	subwf	_preset_blink^(0+256),w
 20225  02B1                     u695_25:	
 20226  02B1  1C03               	skipc
 20227  02B2  2ACF               	goto	i1l157
 20228                           
 20229                           ;interrupts.c: 208: LATBbits.LATB1 = 1;
 20230  02B3  0022               	movlb	2	; select bank2
 20231  02B4  148D               	bsf	13,1	;volatile
 20232                           
 20233                           ;interrupts.c: 209: if (preset_blink > blink_delay*2) {
 20234  02B5  0023               	movlb	3	; select bank3
 20235  02B6  084C               	movf	(_blink_delay+1)^(0+384),w
 20236  02B7  0020               	movlb	0	; select bank0
 20237  02B8  00BB               	movwf	??_isr+1
 20238  02B9  0023               	movlb	3	; select bank3
 20239  02BA  084B               	movf	_blink_delay^(0+384),w
 20240  02BB  0020               	movlb	0	; select bank0
 20241  02BC  00BA               	movwf	??_isr
 20242  02BD  35BA               	lslf	??_isr,f
 20243  02BE  0DBB               	rlf	??_isr+1,f
 20244  02BF  083B               	movf	??_isr+1,w
 20245  02C0  3A80               	xorlw	128
 20246  02C1  00BC               	movwf	??_isr+2
 20247  02C2  3080               	movlw	128
 20248  02C3  023C               	subwf	??_isr+2,w
 20249  02C4  1D03               	skipz
 20250  02C5  2ACA               	goto	u696_25
 20251  02C6  0022               	movlb	2	; select bank2
 20252  02C7  086C               	movf	_preset_blink^(0+256),w
 20253  02C8  0020               	movlb	0	; select bank0
 20254  02C9  023A               	subwf	??_isr,w
 20255  02CA                     u696_25:	
 20256  02CA  1803               	skipnc
 20257  02CB  2AD7               	goto	i1l6974
 20258                           
 20259                           ;interrupts.c: 210: preset_blink = 0;
 20260  02CC  0022               	movlb	2	; select bank2
 20261  02CD  01EC               	clrf	_preset_blink^(0+256)
 20262                           
 20263                           ;interrupts.c: 211: }
 20264                           ;interrupts.c: 213: } else {
 20265  02CE  2AD7               	goto	i1l6974
 20266  02CF                     i1l157:	
 20267                           
 20268                           ;interrupts.c: 214: LATBbits.LATB1 = 0;
 20269  02CF  0022               	movlb	2	; select bank2
 20270  02D0  2AD6               	goto	i1l6972
 20271  02D1                     i1l6968:	
 20272                           ;interrupts.c: 215: }
 20273                           ;interrupts.c: 217: } else {
 20274                           
 20275                           
 20276                           ;interrupts.c: 218: if (preset_blink > 0) {
 20277  02D1  0022               	movlb	2	; select bank2
 20278  02D2  086C               	movf	_preset_blink^(0+256),w
 20279  02D3  1903               	btfsc	3,2
 20280  02D4  2AD7               	goto	i1l6974
 20281                           
 20282                           ;interrupts.c: 219: preset_blink = 0;
 20283  02D5  01EC               	clrf	_preset_blink^(0+256)
 20284  02D6                     i1l6972:	
 20285                           
 20286                           ;interrupts.c: 220: LATBbits.LATB1 = 0;
 20287  02D6  108D               	bcf	13,1	;volatile
 20288  02D7                     i1l6974:	
 20289                           
 20290                           ;interrupts.c: 221: }
 20291                           ;interrupts.c: 222: }
 20292                           ;interrupts.c: 226: INTCONbits.TMR0IF = 0;
 20293  02D7  110B               	bcf	11,2	;volatile
 20294  02D8                     i1l135:	
 20295  02D8  0020               	movlb	0	; select bank0
 20296  02D9  083F               	movf	??_isr+5,w
 20297  02DA  00FF               	movwf	127
 20298  02DB  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20299  02DC  0009               	retfie
 20300  02DD                     __end_of_isr:	
 20301                           
 20302                           	psect	text75
 20303  23BD                     __ptext75:	
 20304 ;; *************** function i1_set_leds_top *****************
 20305 ;; Defined at:
 20306 ;;		line 16 in file "LEDs.c"
 20307 ;; Parameters:    Size  Location     Type
 20308 ;;  x               2    0[COMMON] int 
 20309 ;;  ledState        2    2[COMMON] int 
 20310 ;; Auto vars:     Size  Location     Type
 20311 ;;		None
 20312 ;; Return value:  Size  Location     Type
 20313 ;;                  1    wreg      void 
 20314 ;; Registers used:
 20315 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20316 ;; Tracked objects:
 20317 ;;		On entry : 0/0
 20318 ;;		On exit  : 0/0
 20319 ;;		Unchanged: 0/0
 20320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20324 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20325 ;;Total ram usage:        4 bytes
 20326 ;; Hardware stack levels used:    1
 20327 ;; This function calls:
 20328 ;;		Nothing
 20329 ;; This function is called by:
 20330 ;;		_isr
 20331 ;; This function uses a non-reentrant model
 20332 ;;
 20333                           
 20334                           
 20335                           ;psect for function i1_set_leds_top
 20336  23BD                     i1_set_leds_top:	
 20337                           
 20338                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20339                           
 20340                           ;incstack = 0
 20341                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20342  23BD  0027               	movlb	7	; select bank7
 20343  23BE  100C               	bcf	12,0	;volatile
 20344                           
 20345                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20346  23BF  108C               	bcf	12,1	;volatile
 20347                           
 20348                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20349  23C0  110C               	bcf	12,2	;volatile
 20350                           
 20351                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20352  23C1  118C               	bcf	12,3	;volatile
 20353                           
 20354                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20355  23C2  120C               	bcf	12,4	;volatile
 20356                           
 20357                           ;LEDs.c: 22: switch (x) {
 20358  23C3  2BE8               	goto	i1l6784
 20359  23C4                     i1l6772:	
 20360                           ;LEDs.c: 23: case 1:
 20361                           
 20362                           
 20363                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20364  23C4  0C72               	rrf	i1set_leds_top@ledState,w
 20365  23C5  1C03               	skipc
 20366  23C6  100C               	bcf	12,0	;volatile
 20367  23C7  1803               	skipnc
 20368  23C8  140C               	bsf	12,0	;volatile
 20369                           
 20370                           ;LEDs.c: 25: break;
 20371  23C9  0008               	return
 20372  23CA                     i1l6774:	
 20373                           ;LEDs.c: 26: case 2:
 20374                           
 20375                           
 20376                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20377  23CA  0C72               	rrf	i1set_leds_top@ledState,w
 20378  23CB  1C03               	skipc
 20379  23CC  108C               	bcf	12,1	;volatile
 20380  23CD  1803               	skipnc
 20381  23CE  148C               	bsf	12,1	;volatile
 20382                           
 20383                           ;LEDs.c: 28: break;
 20384  23CF  0008               	return
 20385  23D0                     i1l6776:	
 20386                           ;LEDs.c: 29: case 3:
 20387                           
 20388                           
 20389                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20390  23D0  0C72               	rrf	i1set_leds_top@ledState,w
 20391  23D1  1C03               	skipc
 20392  23D2  110C               	bcf	12,2	;volatile
 20393  23D3  1803               	skipnc
 20394  23D4  150C               	bsf	12,2	;volatile
 20395                           
 20396                           ;LEDs.c: 31: break;
 20397  23D5  0008               	return
 20398  23D6                     i1l6778:	
 20399                           ;LEDs.c: 32: case 4:
 20400                           
 20401                           
 20402                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20403  23D6  0C72               	rrf	i1set_leds_top@ledState,w
 20404  23D7  1C03               	skipc
 20405  23D8  118C               	bcf	12,3	;volatile
 20406  23D9  1803               	skipnc
 20407  23DA  158C               	bsf	12,3	;volatile
 20408                           
 20409                           ;LEDs.c: 34: break;
 20410  23DB  0008               	return
 20411  23DC                     i1l6780:	
 20412                           ;LEDs.c: 35: case 5:
 20413                           
 20414                           
 20415                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20416  23DC  0C72               	rrf	i1set_leds_top@ledState,w
 20417  23DD  1C03               	skipc
 20418  23DE  120C               	bcf	12,4	;volatile
 20419  23DF  1803               	skipnc
 20420  23E0  160C               	bsf	12,4	;volatile
 20421                           
 20422                           ;LEDs.c: 39: break;
 20423                           
 20424                           ;LEDs.c: 38: case 6:
 20425                           
 20426                           ;LEDs.c: 37: break;
 20427  23E1  0008               	return
 20428  23E2                     i1l792:	
 20429                           ;LEDs.c: 40: case 100:
 20430                           
 20431                           
 20432                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20433  23E2  140C               	bsf	12,0	;volatile
 20434                           
 20435                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20436  23E3  148C               	bsf	12,1	;volatile
 20437                           
 20438                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20439  23E4  150C               	bsf	12,2	;volatile
 20440                           
 20441                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20442  23E5  158C               	bsf	12,3	;volatile
 20443                           
 20444                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20445  23E6  160C               	bsf	12,4	;volatile
 20446                           
 20447                           ;LEDs.c: 47: }
 20448                           
 20449                           ;LEDs.c: 46: break;
 20450  23E7  0008               	return
 20451  23E8                     i1l6784:	
 20452                           
 20453                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20454                           ; Switch size 1, requested type "space"
 20455                           ; Number of cases is 1, Range of values is 0 to 0
 20456                           ; switch strategies available:
 20457                           ; Name         Instructions Cycles
 20458                           ; simple_byte            4     3 (average)
 20459                           ; direct_byte            8     6 (fixed)
 20460                           ; jumptable            260     6 (fixed)
 20461                           ;	Chosen strategy is simple_byte
 20462  23E8  0871               	movf	i1set_leds_top@x+1,w
 20463  23E9  3A00               	xorlw	0	; case 0
 20464  23EA  1903               	skipnz
 20465  23EB  2BED               	goto	i1l9788
 20466  23EC  2C04               	goto	i1l793
 20467  23ED                     i1l9788:	
 20468                           
 20469                           ; Switch size 1, requested type "space"
 20470                           ; Number of cases is 7, Range of values is 1 to 100
 20471                           ; switch strategies available:
 20472                           ; Name         Instructions Cycles
 20473                           ; simple_byte           22    12 (average)
 20474                           ; direct_byte          209     9 (fixed)
 20475                           ; jumptable            263     9 (fixed)
 20476                           ;	Chosen strategy is simple_byte
 20477  23ED  0870               	movf	i1set_leds_top@x,w
 20478  23EE  3A01               	xorlw	1	; case 1
 20479  23EF  1903               	skipnz
 20480  23F0  2BC4               	goto	i1l6772
 20481  23F1  3A03               	xorlw	3	; case 2
 20482  23F2  1903               	skipnz
 20483  23F3  2BCA               	goto	i1l6774
 20484  23F4  3A01               	xorlw	1	; case 3
 20485  23F5  1903               	skipnz
 20486  23F6  2BD0               	goto	i1l6776
 20487  23F7  3A07               	xorlw	7	; case 4
 20488  23F8  1903               	skipnz
 20489  23F9  2BD6               	goto	i1l6778
 20490  23FA  3A01               	xorlw	1	; case 5
 20491  23FB  1903               	skipnz
 20492  23FC  2BDC               	goto	i1l6780
 20493  23FD  3A03               	xorlw	3	; case 6
 20494  23FE  1903               	skipnz
 20495  23FF  2C04               	goto	i1l793
 20496  2400  3A62               	xorlw	98	; case 100
 20497  2401  1903               	skipnz
 20498  2402  2BE2               	goto	i1l792
 20499  2403  2C04               	goto	i1l793
 20500  2404                     i1l793:	
 20501  2404  0008               	return
 20502  2405                     __end_ofi1_set_leds_top:	
 20503                           
 20504                           	psect	text76
 20505  2F77                     __ptext76:	
 20506 ;; *************** function i1_getModulationSubdivision *****************
 20507 ;; Defined at:
 20508 ;;		line 26 in file "modulation.c"
 20509 ;; Parameters:    Size  Location     Type
 20510 ;;		None
 20511 ;; Auto vars:     Size  Location     Type
 20512 ;;		None
 20513 ;; Return value:  Size  Location     Type
 20514 ;;                  2    0[COMMON] int 
 20515 ;; Registers used:
 20516 ;;		wreg, status,2, status,0
 20517 ;; Tracked objects:
 20518 ;;		On entry : 0/0
 20519 ;;		On exit  : 0/0
 20520 ;;		Unchanged: 0/0
 20521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20522 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20525 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20526 ;;Total ram usage:        2 bytes
 20527 ;; Hardware stack levels used:    1
 20528 ;; This function calls:
 20529 ;;		Nothing
 20530 ;; This function is called by:
 20531 ;;		_isr
 20532 ;; This function uses a non-reentrant model
 20533 ;;
 20534                           
 20535                           
 20536                           ;psect for function i1_getModulationSubdivision
 20537  2F77                     i1_getModulationSubdivision:	
 20538                           
 20539                           ;modulation.c: 27: if (delay_time >= 2400) {
 20540                           
 20541                           ;incstack = 0
 20542                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20543  2F77  0020               	movlb	0	; select bank0
 20544  2F78  1BD5               	btfsc	_delay_time+3,7	;volatile
 20545  2F79  2F8B               	goto	i1l6798
 20546  2F7A  0855               	movf	_delay_time+3,w	;volatile
 20547  2F7B  1D03               	btfss	3,2
 20548  2F7C  2F86               	goto	i1l6792
 20549  2F7D  0854               	movf	_delay_time+2,w	;volatile
 20550  2F7E  1D03               	btfss	3,2
 20551  2F7F  2F86               	goto	i1l6792
 20552  2F80  3060               	movlw	96
 20553  2F81  0252               	subwf	_delay_time,w	;volatile
 20554  2F82  3009               	movlw	9
 20555  2F83  3B53               	subwfb	_delay_time+1,w	;volatile
 20556  2F84  1C03               	btfss	3,0
 20557  2F85  2F8B               	goto	i1l6798
 20558  2F86                     i1l6792:	
 20559                           
 20560                           ;modulation.c: 28: return 120;
 20561  2F86  3078               	movlw	120
 20562  2F87  00F0               	movwf	?i1_getModulationSubdivision
 20563  2F88  3000               	movlw	0
 20564  2F89  00F1               	movwf	?i1_getModulationSubdivision+1
 20565                           
 20566                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20567  2F8A  0008               	return
 20568  2F8B                     i1l6798:	
 20569  2F8B  1BD5               	btfsc	_delay_time+3,7	;volatile
 20570  2F8C  2F9E               	goto	i1l6806
 20571  2F8D  0855               	movf	_delay_time+3,w	;volatile
 20572  2F8E  1D03               	btfss	3,2
 20573  2F8F  2F99               	goto	i1l6800
 20574  2F90  0854               	movf	_delay_time+2,w	;volatile
 20575  2F91  1D03               	btfss	3,2
 20576  2F92  2F99               	goto	i1l6800
 20577  2F93  3058               	movlw	88
 20578  2F94  0252               	subwf	_delay_time,w	;volatile
 20579  2F95  3002               	movlw	2
 20580  2F96  3B53               	subwfb	_delay_time+1,w	;volatile
 20581  2F97  1C03               	btfss	3,0
 20582  2F98  2F9E               	goto	i1l6806
 20583  2F99                     i1l6800:	
 20584                           
 20585                           ;modulation.c: 30: return 60;
 20586  2F99  303C               	movlw	60
 20587  2F9A  00F0               	movwf	?i1_getModulationSubdivision
 20588  2F9B  3000               	movlw	0
 20589  2F9C  00F1               	movwf	?i1_getModulationSubdivision+1
 20590                           
 20591                           ;modulation.c: 31: } else {
 20592  2F9D  0008               	return
 20593  2F9E                     i1l6806:	
 20594                           
 20595                           ;modulation.c: 32: return 30;
 20596  2F9E  301E               	movlw	30
 20597  2F9F  00F0               	movwf	?i1_getModulationSubdivision
 20598  2FA0  3000               	movlw	0
 20599  2FA1  00F1               	movwf	?i1_getModulationSubdivision+1
 20600  2FA2  0008               	return
 20601  2FA3                     __end_ofi1_getModulationSubdivision:	
 20602                           
 20603                           	psect	text77
 20604  24ED                     __ptext77:	
 20605 ;; *************** function i1___awdiv *****************
 20606 ;; Defined at:
 20607 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20608 ;; Parameters:    Size  Location     Type
 20609 ;;  divisor         2    0[COMMON] int 
 20610 ;;  dividend        2    2[COMMON] int 
 20611 ;; Auto vars:     Size  Location     Type
 20612 ;;  __awdiv         2    7[COMMON] int 
 20613 ;;  __awdiv         1    6[COMMON] unsigned char 
 20614 ;;  __awdiv         1    5[COMMON] unsigned char 
 20615 ;; Return value:  Size  Location     Type
 20616 ;;                  2    0[COMMON] int 
 20617 ;; Registers used:
 20618 ;;		wreg, status,2, status,0
 20619 ;; Tracked objects:
 20620 ;;		On entry : 0/0
 20621 ;;		On exit  : 0/0
 20622 ;;		Unchanged: 0/0
 20623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20625 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20627 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20628 ;;Total ram usage:        9 bytes
 20629 ;; Hardware stack levels used:    1
 20630 ;; This function calls:
 20631 ;;		Nothing
 20632 ;; This function is called by:
 20633 ;;		_isr
 20634 ;; This function uses a non-reentrant model
 20635 ;;
 20636                           
 20637                           
 20638                           ;psect for function i1___awdiv
 20639  24ED                     i1___awdiv:	
 20640                           
 20641                           ;incstack = 0
 20642                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20643  24ED  01F6               	clrf	i1___awdiv@sign
 20644  24EE  1FF1               	btfss	i1___awdiv@divisor+1,7
 20645  24EF  2CF7               	goto	i1l6818
 20646  24F0  09F0               	comf	i1___awdiv@divisor,f
 20647  24F1  09F1               	comf	i1___awdiv@divisor+1,f
 20648  24F2  0AF0               	incf	i1___awdiv@divisor,f
 20649  24F3  1903               	skipnz
 20650  24F4  0AF1               	incf	i1___awdiv@divisor+1,f
 20651  24F5  01F6               	clrf	i1___awdiv@sign
 20652  24F6  0AF6               	incf	i1___awdiv@sign,f
 20653  24F7                     i1l6818:	
 20654  24F7  1FF3               	btfss	i1___awdiv@dividend+1,7
 20655  24F8  2D02               	goto	i1l6824
 20656  24F9  09F2               	comf	i1___awdiv@dividend,f
 20657  24FA  09F3               	comf	i1___awdiv@dividend+1,f
 20658  24FB  0AF2               	incf	i1___awdiv@dividend,f
 20659  24FC  1903               	skipnz
 20660  24FD  0AF3               	incf	i1___awdiv@dividend+1,f
 20661  24FE  3001               	movlw	1
 20662  24FF  00F4               	movwf	??i1___awdiv
 20663  2500  0874               	movf	??i1___awdiv,w
 20664  2501  06F6               	xorwf	i1___awdiv@sign,f
 20665  2502                     i1l6824:	
 20666  2502  01F7               	clrf	i1___awdiv@quotient
 20667  2503  01F8               	clrf	i1___awdiv@quotient+1
 20668  2504  0870               	movf	i1___awdiv@divisor,w
 20669  2505  0471               	iorwf	i1___awdiv@divisor+1,w
 20670  2506  1903               	btfsc	3,2
 20671  2507  2D31               	goto	i1l6846
 20672  2508  01F5               	clrf	i1___awdiv@counter
 20673  2509  0AF5               	incf	i1___awdiv@counter,f
 20674  250A                     i1l6834:	
 20675  250A  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20676  250B  2D16               	goto	i1l6836
 20677  250C  3001               	movlw	1
 20678  250D                     u660_25:	
 20679  250D  35F0               	lslf	i1___awdiv@divisor,f
 20680  250E  0DF1               	rlf	i1___awdiv@divisor+1,f
 20681  250F  0B89               	decfsz	9,f
 20682  2510  2D0D               	goto	u660_25
 20683  2511  3001               	movlw	1
 20684  2512  00F4               	movwf	??i1___awdiv
 20685  2513  0874               	movf	??i1___awdiv,w
 20686  2514  07F5               	addwf	i1___awdiv@counter,f
 20687  2515  2D0A               	goto	i1l6834
 20688  2516                     i1l6836:	
 20689  2516  3001               	movlw	1
 20690  2517                     u662_25:	
 20691  2517  35F7               	lslf	i1___awdiv@quotient,f
 20692  2518  0DF8               	rlf	i1___awdiv@quotient+1,f
 20693  2519  0B89               	decfsz	9,f
 20694  251A  2D17               	goto	u662_25
 20695  251B  0871               	movf	i1___awdiv@divisor+1,w
 20696  251C  0273               	subwf	i1___awdiv@dividend+1,w
 20697  251D  1D03               	skipz
 20698  251E  2D21               	goto	u663_25
 20699  251F  0870               	movf	i1___awdiv@divisor,w
 20700  2520  0272               	subwf	i1___awdiv@dividend,w
 20701  2521                     u663_25:	
 20702  2521  1C03               	skipc
 20703  2522  2D28               	goto	i1l6842
 20704  2523  0870               	movf	i1___awdiv@divisor,w
 20705  2524  02F2               	subwf	i1___awdiv@dividend,f
 20706  2525  0871               	movf	i1___awdiv@divisor+1,w
 20707  2526  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20708  2527  1477               	bsf	i1___awdiv@quotient,0
 20709  2528                     i1l6842:	
 20710  2528  3001               	movlw	1
 20711  2529                     u664_25:	
 20712  2529  36F1               	lsrf	i1___awdiv@divisor+1,f
 20713  252A  0CF0               	rrf	i1___awdiv@divisor,f
 20714  252B  0B89               	decfsz	9,f
 20715  252C  2D29               	goto	u664_25
 20716  252D  3001               	movlw	1
 20717  252E  02F5               	subwf	i1___awdiv@counter,f
 20718  252F  1D03               	btfss	3,2
 20719  2530  2D16               	goto	i1l6836
 20720  2531                     i1l6846:	
 20721  2531  0876               	movf	i1___awdiv@sign,w
 20722  2532  1903               	btfsc	3,2
 20723  2533  2D39               	goto	i1l6850
 20724  2534  09F7               	comf	i1___awdiv@quotient,f
 20725  2535  09F8               	comf	i1___awdiv@quotient+1,f
 20726  2536  0AF7               	incf	i1___awdiv@quotient,f
 20727  2537  1903               	skipnz
 20728  2538  0AF8               	incf	i1___awdiv@quotient+1,f
 20729  2539                     i1l6850:	
 20730  2539  0878               	movf	i1___awdiv@quotient+1,w
 20731  253A  00F1               	movwf	?i1___awdiv+1
 20732  253B  0877               	movf	i1___awdiv@quotient,w
 20733  253C  00F0               	movwf	?i1___awdiv
 20734  253D  0008               	return
 20735  253E                     __end_ofi1___awdiv:	
 20736                           
 20737                           	psect	text78
 20738  233B                     __ptext78:	
 20739 ;; *************** function _modulation *****************
 20740 ;; Defined at:
 20741 ;;		line 222 in file "user.c"
 20742 ;; Parameters:    Size  Location     Type
 20743 ;;  x               4   14[BANK0 ] long 
 20744 ;;  y               4   18[BANK0 ] long 
 20745 ;; Auto vars:     Size  Location     Type
 20746 ;;		None
 20747 ;; Return value:  Size  Location     Type
 20748 ;;                  4   14[BANK0 ] long 
 20749 ;; Registers used:
 20750 ;;		wreg, status,2, status,0, pclath, cstack
 20751 ;; Tracked objects:
 20752 ;;		On entry : 0/0
 20753 ;;		On exit  : 0/0
 20754 ;;		Unchanged: 0/0
 20755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20756 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20758 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20759 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20760 ;;Total ram usage:       12 bytes
 20761 ;; Hardware stack levels used:    1
 20762 ;; Hardware stack levels required when called:    1
 20763 ;; This function calls:
 20764 ;;		i1___aldiv
 20765 ;;		i1___lmul
 20766 ;; This function is called by:
 20767 ;;		_isr
 20768 ;; This function uses a non-reentrant model
 20769 ;;
 20770                           
 20771                           
 20772                           ;psect for function _modulation
 20773  233B                     _modulation:	
 20774                           
 20775                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 20776                           
 20777                           ;incstack = 0
 20778                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 20779  233B  3000               	movlw	0
 20780  233C  0020               	movlb	0	; select bank0
 20781  233D  00A3               	movwf	i1___aldiv@divisor+3
 20782  233E  3000               	movlw	0
 20783  233F  00A2               	movwf	i1___aldiv@divisor+2
 20784  2340  3003               	movlw	3
 20785  2341  00A1               	movwf	i1___aldiv@divisor+1
 20786  2342  30E8               	movlw	232
 20787  2343  00A0               	movwf	i1___aldiv@divisor
 20788  2344  300C               	movlw	12
 20789  2345  00B6               	movwf	??_modulation
 20790  2346  30F2               	movlw	242
 20791  2347  00B7               	movwf	??_modulation+1
 20792  2348  3001               	movlw	1
 20793  2349  00B8               	movwf	??_modulation+2
 20794  234A  3000               	movlw	0
 20795  234B  00B9               	movwf	??_modulation+3
 20796  234C  0835               	movf	modulation@y+3,w
 20797  234D  00F3               	movwf	i1___lmul@multiplier+3
 20798  234E  0834               	movf	modulation@y+2,w
 20799  234F  00F2               	movwf	i1___lmul@multiplier+2
 20800  2350  0833               	movf	modulation@y+1,w
 20801  2351  00F1               	movwf	i1___lmul@multiplier+1
 20802  2352  0832               	movf	modulation@y,w
 20803  2353  00F0               	movwf	i1___lmul@multiplier
 20804  2354  0831               	movf	modulation@x+3,w
 20805  2355  00F7               	movwf	i1___lmul@multiplicand+3
 20806  2356  0830               	movf	modulation@x+2,w
 20807  2357  00F6               	movwf	i1___lmul@multiplicand+2
 20808  2358  082F               	movf	modulation@x+1,w
 20809  2359  00F5               	movwf	i1___lmul@multiplicand+1
 20810  235A  082E               	movf	modulation@x,w
 20811  235B  00F4               	movwf	i1___lmul@multiplicand
 20812  235C  31AF  27D1  31A3   	fcall	i1___lmul
 20813  235F  0870               	movf	?i1___lmul,w
 20814  2360  0020               	movlb	0	; select bank0
 20815  2361  07B6               	addwf	??_modulation,f
 20816  2362  0871               	movf	?i1___lmul+1,w
 20817  2363  3DB7               	addwfc	??_modulation+1,f
 20818  2364  0872               	movf	?i1___lmul+2,w
 20819  2365  3DB8               	addwfc	??_modulation+2,f
 20820  2366  0873               	movf	?i1___lmul+3,w
 20821  2367  3DB9               	addwfc	??_modulation+3,f
 20822  2368  0839               	movf	??_modulation+3,w
 20823  2369  00A7               	movwf	i1___aldiv@dividend+3
 20824  236A  0838               	movf	??_modulation+2,w
 20825  236B  00A6               	movwf	i1___aldiv@dividend+2
 20826  236C  0837               	movf	??_modulation+1,w
 20827  236D  00A5               	movwf	i1___aldiv@dividend+1
 20828  236E  0836               	movf	??_modulation,w
 20829  236F  00A4               	movwf	i1___aldiv@dividend
 20830  2370  3198  20DA         	fcall	i1___aldiv
 20831  2372  0020               	movlb	0	; select bank0
 20832  2373  0823               	movf	?i1___aldiv+3,w
 20833  2374  00B1               	movwf	?_modulation+3
 20834  2375  0822               	movf	?i1___aldiv+2,w
 20835  2376  00B0               	movwf	?_modulation+2
 20836  2377  0821               	movf	?i1___aldiv+1,w
 20837  2378  00AF               	movwf	?_modulation+1
 20838  2379  0820               	movf	?i1___aldiv,w
 20839  237A  00AE               	movwf	?_modulation
 20840  237B  0008               	return
 20841  237C                     __end_of_modulation:	
 20842                           
 20843                           	psect	text79
 20844  2FD1                     __ptext79:	
 20845 ;; *************** function i1___lmul *****************
 20846 ;; Defined at:
 20847 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 20848 ;; Parameters:    Size  Location     Type
 20849 ;;  multiplier      4    0[COMMON] unsigned long 
 20850 ;;  multiplicand    4    4[COMMON] unsigned long 
 20851 ;; Auto vars:     Size  Location     Type
 20852 ;;  __lmul          4    8[COMMON] unsigned long 
 20853 ;; Return value:  Size  Location     Type
 20854 ;;                  4    0[COMMON] unsigned long 
 20855 ;; Registers used:
 20856 ;;		wreg, status,2, status,0
 20857 ;; Tracked objects:
 20858 ;;		On entry : 0/0
 20859 ;;		On exit  : 0/0
 20860 ;;		Unchanged: 0/0
 20861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20862 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20863 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20865 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20866 ;;Total ram usage:       12 bytes
 20867 ;; Hardware stack levels used:    1
 20868 ;; This function calls:
 20869 ;;		Nothing
 20870 ;; This function is called by:
 20871 ;;		_modulation
 20872 ;; This function uses a non-reentrant model
 20873 ;;
 20874                           
 20875                           
 20876                           ;psect for function i1___lmul
 20877  2FD1                     i1___lmul:	
 20878                           
 20879                           ;incstack = 0
 20880                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 20881  2FD1  3000               	movlw	0
 20882  2FD2  00FB               	movwf	i1___lmul@product+3
 20883  2FD3  3000               	movlw	0
 20884  2FD4  00FA               	movwf	i1___lmul@product+2
 20885  2FD5  3000               	movlw	0
 20886  2FD6  00F9               	movwf	i1___lmul@product+1
 20887  2FD7  3000               	movlw	0
 20888  2FD8  00F8               	movwf	i1___lmul@product
 20889  2FD9                     i1l6084:	
 20890  2FD9  1C70               	btfss	i1___lmul@multiplier,0
 20891  2FDA  2FE3               	goto	i1l6088
 20892  2FDB  0874               	movf	i1___lmul@multiplicand,w
 20893  2FDC  07F8               	addwf	i1___lmul@product,f
 20894  2FDD  0875               	movf	i1___lmul@multiplicand+1,w
 20895  2FDE  3DF9               	addwfc	i1___lmul@product+1,f
 20896  2FDF  0876               	movf	i1___lmul@multiplicand+2,w
 20897  2FE0  3DFA               	addwfc	i1___lmul@product+2,f
 20898  2FE1  0877               	movf	i1___lmul@multiplicand+3,w
 20899  2FE2  3DFB               	addwfc	i1___lmul@product+3,f
 20900  2FE3                     i1l6088:	
 20901  2FE3  3001               	movlw	1
 20902  2FE4                     u538_25:	
 20903  2FE4  35F4               	lslf	i1___lmul@multiplicand,f
 20904  2FE5  0DF5               	rlf	i1___lmul@multiplicand+1,f
 20905  2FE6  0DF6               	rlf	i1___lmul@multiplicand+2,f
 20906  2FE7  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20907  2FE8  0B89               	decfsz	9,f
 20908  2FE9  2FE4               	goto	u538_25
 20909  2FEA  3001               	movlw	1
 20910  2FEB                     u539_25:	
 20911  2FEB  36F3               	lsrf	i1___lmul@multiplier+3,f
 20912  2FEC  0CF2               	rrf	i1___lmul@multiplier+2,f
 20913  2FED  0CF1               	rrf	i1___lmul@multiplier+1,f
 20914  2FEE  0CF0               	rrf	i1___lmul@multiplier,f
 20915  2FEF  0B89               	decfsz	9,f
 20916  2FF0  2FEB               	goto	u539_25
 20917  2FF1  0873               	movf	i1___lmul@multiplier+3,w
 20918  2FF2  0472               	iorwf	i1___lmul@multiplier+2,w
 20919  2FF3  0471               	iorwf	i1___lmul@multiplier+1,w
 20920  2FF4  0470               	iorwf	i1___lmul@multiplier,w
 20921  2FF5  1D03               	skipz
 20922  2FF6  2FD9               	goto	i1l6084
 20923  2FF7  087B               	movf	i1___lmul@product+3,w
 20924  2FF8  00F3               	movwf	?i1___lmul+3
 20925  2FF9  087A               	movf	i1___lmul@product+2,w
 20926  2FFA  00F2               	movwf	?i1___lmul+2
 20927  2FFB  0879               	movf	i1___lmul@product+1,w
 20928  2FFC  00F1               	movwf	?i1___lmul+1
 20929  2FFD  0878               	movf	i1___lmul@product,w
 20930  2FFE  00F0               	movwf	?i1___lmul
 20931  2FFF  0008               	return
 20932  3000                     __end_ofi1___lmul:	
 20933                           
 20934                           	psect	text80
 20935  18DA                     __ptext80:	
 20936 ;; *************** function i1___aldiv *****************
 20937 ;; Defined at:
 20938 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 20939 ;; Parameters:    Size  Location     Type
 20940 ;;  divisor         4    0[BANK0 ] long 
 20941 ;;  dividend        4    4[BANK0 ] long 
 20942 ;; Auto vars:     Size  Location     Type
 20943 ;;  __aldiv         4   10[BANK0 ] long 
 20944 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 20945 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 20946 ;; Return value:  Size  Location     Type
 20947 ;;                  4    0[BANK0 ] long 
 20948 ;; Registers used:
 20949 ;;		wreg, status,2, status,0
 20950 ;; Tracked objects:
 20951 ;;		On entry : 0/0
 20952 ;;		On exit  : 0/0
 20953 ;;		Unchanged: 0/0
 20954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20955 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20956 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20957 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20958 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20959 ;;Total ram usage:       15 bytes
 20960 ;; Hardware stack levels used:    1
 20961 ;; This function calls:
 20962 ;;		Nothing
 20963 ;; This function is called by:
 20964 ;;		_modulation
 20965 ;; This function uses a non-reentrant model
 20966 ;;
 20967                           
 20968                           
 20969                           ;psect for function i1___aldiv
 20970  18DA                     i1___aldiv:	
 20971                           
 20972                           ;incstack = 0
 20973                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 20974  18DA  0020               	movlb	0	; select bank0
 20975  18DB  01A9               	clrf	i1___aldiv@sign
 20976  18DC  1FA3               	btfss	i1___aldiv@divisor+3,7
 20977  18DD  28EB               	goto	i1l2013
 20978  18DE  09A0               	comf	i1___aldiv@divisor,f
 20979  18DF  09A1               	comf	i1___aldiv@divisor+1,f
 20980  18E0  09A2               	comf	i1___aldiv@divisor+2,f
 20981  18E1  09A3               	comf	i1___aldiv@divisor+3,f
 20982  18E2  0AA0               	incf	i1___aldiv@divisor,f
 20983  18E3  1903               	skipnz
 20984  18E4  0AA1               	incf	i1___aldiv@divisor+1,f
 20985  18E5  1903               	skipnz
 20986  18E6  0AA2               	incf	i1___aldiv@divisor+2,f
 20987  18E7  1903               	skipnz
 20988  18E8  0AA3               	incf	i1___aldiv@divisor+3,f
 20989  18E9  01A9               	clrf	i1___aldiv@sign
 20990  18EA  0AA9               	incf	i1___aldiv@sign,f
 20991  18EB                     i1l2013:	
 20992  18EB  1FA7               	btfss	i1___aldiv@dividend+3,7
 20993  18EC  28FC               	goto	i1l6106
 20994  18ED  09A4               	comf	i1___aldiv@dividend,f
 20995  18EE  09A5               	comf	i1___aldiv@dividend+1,f
 20996  18EF  09A6               	comf	i1___aldiv@dividend+2,f
 20997  18F0  09A7               	comf	i1___aldiv@dividend+3,f
 20998  18F1  0AA4               	incf	i1___aldiv@dividend,f
 20999  18F2  1903               	skipnz
 21000  18F3  0AA5               	incf	i1___aldiv@dividend+1,f
 21001  18F4  1903               	skipnz
 21002  18F5  0AA6               	incf	i1___aldiv@dividend+2,f
 21003  18F6  1903               	skipnz
 21004  18F7  0AA7               	incf	i1___aldiv@dividend+3,f
 21005  18F8  3001               	movlw	1
 21006  18F9  00FC               	movwf	??i1___aldiv
 21007  18FA  087C               	movf	??i1___aldiv,w
 21008  18FB  06A9               	xorwf	i1___aldiv@sign,f
 21009  18FC                     i1l6106:	
 21010  18FC  3000               	movlw	0
 21011  18FD  00AD               	movwf	i1___aldiv@quotient+3
 21012  18FE  3000               	movlw	0
 21013  18FF  00AC               	movwf	i1___aldiv@quotient+2
 21014  1900  3000               	movlw	0
 21015  1901  00AB               	movwf	i1___aldiv@quotient+1
 21016  1902  3000               	movlw	0
 21017  1903  00AA               	movwf	i1___aldiv@quotient
 21018  1904  0823               	movf	i1___aldiv@divisor+3,w
 21019  1905  0422               	iorwf	i1___aldiv@divisor+2,w
 21020  1906  0421               	iorwf	i1___aldiv@divisor+1,w
 21021  1907  0420               	iorwf	i1___aldiv@divisor,w
 21022  1908  1903               	skipnz
 21023  1909  2945               	goto	i1l6128
 21024  190A  01A8               	clrf	i1___aldiv@counter
 21025  190B  0AA8               	incf	i1___aldiv@counter,f
 21026  190C                     i1l6114:	
 21027  190C  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21028  190D  291A               	goto	i1l6116
 21029  190E  3001               	movlw	1
 21030  190F                     u544_25:	
 21031  190F  35A0               	lslf	i1___aldiv@divisor,f
 21032  1910  0DA1               	rlf	i1___aldiv@divisor+1,f
 21033  1911  0DA2               	rlf	i1___aldiv@divisor+2,f
 21034  1912  0DA3               	rlf	i1___aldiv@divisor+3,f
 21035  1913  0B89               	decfsz	9,f
 21036  1914  290F               	goto	u544_25
 21037  1915  3001               	movlw	1
 21038  1916  00FC               	movwf	??i1___aldiv
 21039  1917  087C               	movf	??i1___aldiv,w
 21040  1918  07A8               	addwf	i1___aldiv@counter,f
 21041  1919  290C               	goto	i1l6114
 21042  191A                     i1l6116:	
 21043  191A  3001               	movlw	1
 21044  191B                     u546_25:	
 21045  191B  35AA               	lslf	i1___aldiv@quotient,f
 21046  191C  0DAB               	rlf	i1___aldiv@quotient+1,f
 21047  191D  0DAC               	rlf	i1___aldiv@quotient+2,f
 21048  191E  0DAD               	rlf	i1___aldiv@quotient+3,f
 21049  191F  0B89               	decfsz	9,f
 21050  1920  291B               	goto	u546_25
 21051  1921  0823               	movf	i1___aldiv@divisor+3,w
 21052  1922  0227               	subwf	i1___aldiv@dividend+3,w
 21053  1923  1D03               	skipz
 21054  1924  292F               	goto	u547_25
 21055  1925  0822               	movf	i1___aldiv@divisor+2,w
 21056  1926  0226               	subwf	i1___aldiv@dividend+2,w
 21057  1927  1D03               	skipz
 21058  1928  292F               	goto	u547_25
 21059  1929  0821               	movf	i1___aldiv@divisor+1,w
 21060  192A  0225               	subwf	i1___aldiv@dividend+1,w
 21061  192B  1D03               	skipz
 21062  192C  292F               	goto	u547_25
 21063  192D  0820               	movf	i1___aldiv@divisor,w
 21064  192E  0224               	subwf	i1___aldiv@dividend,w
 21065  192F                     u547_25:	
 21066  192F  1C03               	skipc
 21067  1930  293A               	goto	i1l6124
 21068  1931  0820               	movf	i1___aldiv@divisor,w
 21069  1932  02A4               	subwf	i1___aldiv@dividend,f
 21070  1933  0821               	movf	i1___aldiv@divisor+1,w
 21071  1934  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21072  1935  0822               	movf	i1___aldiv@divisor+2,w
 21073  1936  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21074  1937  0823               	movf	i1___aldiv@divisor+3,w
 21075  1938  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21076  1939  142A               	bsf	i1___aldiv@quotient,0
 21077  193A                     i1l6124:	
 21078  193A  3001               	movlw	1
 21079  193B                     u548_25:	
 21080  193B  36A3               	lsrf	i1___aldiv@divisor+3,f
 21081  193C  0CA2               	rrf	i1___aldiv@divisor+2,f
 21082  193D  0CA1               	rrf	i1___aldiv@divisor+1,f
 21083  193E  0CA0               	rrf	i1___aldiv@divisor,f
 21084  193F  0B89               	decfsz	9,f
 21085  1940  293B               	goto	u548_25
 21086  1941  3001               	movlw	1
 21087  1942  02A8               	subwf	i1___aldiv@counter,f
 21088  1943  1D03               	btfss	3,2
 21089  1944  291A               	goto	i1l6116
 21090  1945                     i1l6128:	
 21091  1945  0829               	movf	i1___aldiv@sign,w
 21092  1946  1903               	btfsc	3,2
 21093  1947  2953               	goto	i1l6132
 21094  1948  09AA               	comf	i1___aldiv@quotient,f
 21095  1949  09AB               	comf	i1___aldiv@quotient+1,f
 21096  194A  09AC               	comf	i1___aldiv@quotient+2,f
 21097  194B  09AD               	comf	i1___aldiv@quotient+3,f
 21098  194C  0AAA               	incf	i1___aldiv@quotient,f
 21099  194D  1903               	skipnz
 21100  194E  0AAB               	incf	i1___aldiv@quotient+1,f
 21101  194F  1903               	skipnz
 21102  1950  0AAC               	incf	i1___aldiv@quotient+2,f
 21103  1951  1903               	skipnz
 21104  1952  0AAD               	incf	i1___aldiv@quotient+3,f
 21105  1953                     i1l6132:	
 21106  1953  082D               	movf	i1___aldiv@quotient+3,w
 21107  1954  00A3               	movwf	?i1___aldiv+3
 21108  1955  082C               	movf	i1___aldiv@quotient+2,w
 21109  1956  00A2               	movwf	?i1___aldiv+2
 21110  1957  082B               	movf	i1___aldiv@quotient+1,w
 21111  1958  00A1               	movwf	?i1___aldiv+1
 21112  1959  082A               	movf	i1___aldiv@quotient,w
 21113  195A  00A0               	movwf	?i1___aldiv
 21114  195B  0008               	return
 21115  195C                     __end_ofi1___aldiv:	
 21116  007E                     btemp	set	126	;btemp
 21117  007E                     int$flags	set	126
 21118  007E                     wtemp	set	126
 21119  007E                     wtemp0	set	126
 21120  0080                     wtemp1	set	128
 21121  0082                     wtemp2	set	130
 21122  0084                     wtemp3	set	132
 21123  0086                     wtemp4	set	134
 21124  0088                     wtemp5	set	136
 21125  007F                     wtemp6	set	127
 21126  007E                     ttemp	set	126
 21127  007E                     ttemp0	set	126
 21128  0081                     ttemp1	set	129
 21129  0084                     ttemp2	set	132
 21130  0087                     ttemp3	set	135
 21131  007F                     ttemp4	set	127
 21132  007E                     ltemp	set	126
 21133  007E                     ltemp0	set	126
 21134  0082                     ltemp1	set	130
 21135  0086                     ltemp2	set	134
 21136  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         287
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      80
    BANK3            80      9      80
    BANK4            80     14      69
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  893034
                                              0 BANK4     14    14      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcCosArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               11    11      0  163106
                                             48 BANK2     11    11      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   30070
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   34436
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   31185
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   30375
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   30159
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14064
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  164684
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  153880
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  153929
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  137961
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   43103
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   76516
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   26254
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               2     2      0   15382
                                             14 BANK2      2     2      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0  105098
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   85385
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   73526
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   17250
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18473
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    9141
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8583
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      E      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     22F      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     22F      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Jan 15 17:52:58 2017

                        _update_mode 211B                         ___altoft@exp 00AE  
                        __CFG_CP$OFF 0000                        ___altoft@sign 00AF  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E7  
                       ___awdiv@sign 00A6                   _topTactile_pressed 01C6  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 0BF6  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l364 05DA  
                                l800 219A                                  l384 20D6  
                                l801 219D                                  l633 2740  
                                l802 21A0                 __size_of_adc_convert 0013  
                                l804 21A3                                  l805 21C7  
                                l586 2DE9                                  l792 2612  
                                l793 2636                                  l962 241A  
                                l797 2194                                  l966 2444  
                                l974 2464                                  l799 2197  
                                l978 2492                                  _GIE 005F  
                                l997 2001                                  l989 214B  
                                l999 2007                                  _RB1 0069  
                                _PR2 001B         solidring_tactiles@ring_delay 00B4  
                                _cos 2784                                  _map 1AEA  
                                _exp 1341                                  _log 1F2F  
                                _isr 0004                                  _tap 02A0  
                                _sin 0844                                  _pow 1105  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
                set_subdivision@tmpX 0135              __end_of_set_leds_bottom 21C8  
                       __CFG_LVP$OFF 0000                       i1___aldiv@sign 0029  
                       ___ftdiv@cntr 00D8                         ___ftdiv@sign 00DD  
                               l1000 200E                                 l1001 2022  
                               l1004 1807                                 l1015 1851  
                               l2013 196D                                 l2132 267D  
                               l2133 2685                                 l2125 266A  
                               l2216 1AD0                                 l1432 0CC7  
                               l1418 0C0D                                 l2156 10AE  
                               l1712 0836                                 l2328 1129  
                               l2346 0959                                 ?_cos 014C  
                               l1958 2E59                                 ?_map 00DE  
                               l8004 216F                                 l8016 2F10  
                               l8032 1D55                                 l8104 2707  
                               l8026 1D3F                                 l8114 1C9E  
                               l9010 0CA7                                 l8124 1CC0  
                               l8300 134E                                 ?_exp 0148  
                               ?_log 013E                                 l8054 1DAF  
                               l8046 1D96                                 l8310 1373  
                               l8222 167B                                 l9006 0C90  
                               l8080 1EB2                                 l8144 1D08  
                               l8208 14CF                                 l9040 0D86  
                               l9008 0C98                                 l8066 2FAB  
                               l8322 13D2                                 l9202 1BFA  
                               l9034 0D16                                 l9026 0D0A  
                               l9018 0CBF                                 l8084 1EBA  
                               l8236 0879                                 l8148 1D10  
                               l8316 1397                                 l8420 1197  
                               l8412 113D                                 l9124 1C18  
                               l9140 1DDA                                 l8500 22A8  
                               l9036 0D60                                 l9300 0570  
                               ?_isr 0070                                 l8094 1F27  
                               l8350 2062                                 l8406 1131  
                               l9118 1C0B                                 l7712 21AA  
                               l7800 10C0                                 l7720 2E53  
                               l8248 0915                                 l8192 20FC  
                               l8344 147A                                 l8424 11B7  
                               l9160 19EA                                 l8184 2016  
                               l9048 0DC3                                 l9312 05DC  
                               l7642 2096                                 l9066 240F  
                               l8266 2F52                                 l9146 1DE9  
                               l9330 06F7                                 l9322 066D  
                               l9242 0382                                 l7660 2651  
                               l7804 10D2                                 l8364 207D  
                               l8356 2068                                 l9076 2436  
                               l8268 2F62                                 l8284 1F66  
                               l9180 1B83                                 l8508 22B3  
                               l9316 061C                                 l9252 0392  
                               l7670 2677                                 l7662 2656  
                               l7654 2640                                 l7814 10ED  
                               l7742 2219                                 l7822 21DF  
                               l7902 1A7C                                 l8526 27CE  
                               l8358 2077                                 l7638 208C  
                               l8278 1F53                                 l9190 1B9B  
                               l9182 1B89                                 l8614 2554  
                               l8542 0B8A                                 l9342 0731  
                               l9326 06AD                                 l7744 2229  
                               l7920 1AAC                                 l9088 2459  
                               l9184 1B8D                                 l8640 258B  
                               l8632 257A                                 l8624 255C  
                               l8608 2549                                 l8552 2278  
                               l8800 213E                                 l9272 041C  
                               l7690 2602                                 l7658 2647  
                               l7754 1037                                 l7850 0768  
                               l7826 21F5                                 l7930 1AD3  
                               l7922 1ABA                                 l9098 2480  
                               l9186 1B91                                 l9194 1BA2  
                               l8626 2568                                 l8538 0A48  
                               l8570 197E                                 l9282 047A  
                               l9258 03A1                                 l7692 260A  
                               l7684 25EA                                 l7668 266F  
                               l7764 104D                                 l7844 0752  
                               l9188 1B95                                 l9196 1BBB  
                               l8636 2583                                 l8492 2298  
                               l8900 12B6                                 l8580 199C  
                               ?_sin 013E                                 l7686 25F2  
                               l8726 2753                                 l8662 0809  
                               l7782 107A                                 l7758 103E  
                               l7862 07A3                                 l7934 1AE1  
                               l8806 2148                                 l8830 183B  
                               l8822 182A                                 l9286 04BA  
                               l7688 25FA                                 l7696 2619  
                               l8728 275C                                 l8664 080B  
                               l8672 0813                                 l7784 1084  
                               l7776 1067                                 l7928 1AC7  
                               l8920 12EA                                 l8912 12CB  
                               l8592 19C7                                 l8808 214F  
                               l8840 1855                                 l9296 0530  
                               l8666 080D                                 l7794 10A0  
                               l7786 1089                                 l7874 07BF  
                               l7866 07AB                                 l7946 22CF  
                               l8770 0F6D                                 l8762 0E55  
                               l8930 130A                                 l8914 12CF  
                               l8578 198E                                 l8668 080F  
                               l7796 10AA                                 l7788 108D  
                               l8772 0FB3                                 l8764 0E9B  
                               l8780 0E37                                 l8756 0E20  
                               l8860 1252                                 l8852 1244  
                               l8596 19D5                                 l8588 19BC  
                               l8828 1836                                 ?_pow 0155  
                               l7878 07C7                                 l8782 0FE4  
                               l8766 0EE1                                 l8838 184D  
                               l8768 0F27                                 l8776 0FC7  
                               l7984 24D1                                 l7976 24AD  
                               l8944 132A                                 l8928 1304  
                               l8880 1280                                 l8848 1231  
                               l8778 0FDE                                 l8938 131E  
                               l8970 0C1F                                 l9780 082C  
                               l9772 0FCD                                 l8884 1292  
                               l8964 0C02                                 l9782 0831  
                               l9774 1BA7                                 l8886 129A  
                               l9784 261F                                 l9776 0822  
                               l8992 0C69                                 l8984 0C41  
                               l9786 21B0                                 l9778 0827  
                               l8986 0C5E                                 _PEIE 005E  
                               _RCIE 048D                                 u8025 10A1  
                               u8205 07CE                                 u8125 0774  
                               u8135 0784                                 u8305 1AC8  
                               u9025 1991                                 u8155 07AC  
                               u8165 07B2                                 u8245 1A83  
                               u9125 255F                                 u9045 199D  
                               u9215 2F33                                 u7615 2097  
                               u9055 19B1                                 u9225 2F39  
                               u7705 2672                                 u8425 1D67  
                               u7625 209E                                 u9145 2569  
                               u9305 0E1E                                 u8345 24AB  
                               u9065 19BD                                 u8435 1D77  
                               u8195 07C8                                 u8275 1AAD  
                               u9155 2573                                 u9315 0E3E  
                               u8355 24CF                                 u9260 275A  
                               u9245 2739                                 u8445 1D97  
                               u9165 257B                                 u9405 1819  
                               u9255 274C                                 u8455 1DA6  
                               u9335 212E                                 u8640 0911  
                               u7745 268C                                 u7665 264C  
                               u8465 1DB0                                 u7825 221E  
                               u8650 0912                                 u8580 20FA  
                               u7685 2665                                 u8565 1CC9  
                               u9285 0DFA                                 u9525 125C  
                               u8750 13B0                                 u7935 1068  
                               u9295 0E0E                                 u8760 13B1  
                               u7785 2E5A                                 u8905 2289  
                               u7795 2E5F                                 u9635 12DB  
                               u7965 107B                                 u8685 2F57  
                               u9485 122A                                 u9805 0C73  
                               u9495 123D                                 u8865 1188  
                               u8945 2E41                                 u9905 0D1F  
                               u7995 108E                                 u8795 1471  
                               u9915 0D34                                 u8885 2E77  
                               u9925 0D48                                 u8895 2EEF  
                               u9775 0C4A                                 u9945 0D65  
                               u9885 0CD8                                 u9895 0CEF  
                 scaleA100kPot@input 0167                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                    _scaleA10kPot$2850 01ED  
                  _scaleA10kPot$2849 01EA                                 _iCnt 01BD  
                               _main 035E                         ___ftpack@arg 00A0  
                               cos@f 014C                         ___ftpack@exp 00A3  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               map@x 00DE                                 btemp 007E  
                               exp@x 0148                                 log@x 013E  
                      __CFG_BOREN$ON 0000                                 sin@f 013E  
                               sin@y 0142                                 ltemp 007E  
                               pow@x 0155                                 pow@y 0158  
                               start 02DD                                 ttemp 007E  
                               wtemp 007E         __end_of_getSwitchBypassState 2DA2  
                    _expressModeCnst 01E2         updateSwitchTap@tapCntDivisor 00C2  
       __end_of_setSwitchBypassState 2E88                      ?i1_set_leds_top 0070  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 00BC  
                       ___ftmul@sign 00BD                      __end_of_InitApp 2053  
                       ___fttol@exp1 012D                                ??_cos 00F0  
                              ??_map 00ED                __size_of_calcCosArray 0081  
                              ??_exp 014B                                ??_log 0141  
                       ___fttol@lval 0129                                ??_isr 003A  
                              ??_sin 0141                                ??_pow 015B  
                    _switchBypass_up 0263            __size_of_initSwitchBypass 000F  
                    __end_of___aldiv 19DE                                ?_main 0070  
                     i1___awdiv@sign 0076         getModulationDelayTime@subDiv 012E  
                    __end_of___awdiv 2590                      __end_of___ftadd 1105  
                              _CCPR1 0291                                _CCPR2 0298  
                              _CCPR3 0311                                _CCPR4 0318  
                              _CCPR5 031C                        __CFG_WDTE$OFF 0000  
                    __end_of___ftdiv 1DD1                      __end_of___ftneg 2DBB  
                              u10005 242F                                u10205 0498  
                              u10215 04B8                                u10065 2479  
                              u10145 1BF5                                u10225 054E  
                              u10235 056E                      __end_of___ftmul 07EF  
                              u10245 05C7                                u10255 05D5  
                              u10265 05FA                                u10185 03FA  
                              u10275 061A                                u10195 041A  
                    ___awdiv@divisor 00A0                                u10285 068B  
                              u10295 06AB                      __end_of___ftsub 2FD1  
                    __end_of___fttol 1AEA                                i1l135 02D8  
                              i1l136 001B                                i1l137 00EF  
                              i1l157 02CF                                i1l792 23E2  
                              i1l793 2404                      ___awdiv@counter 00A5  
                              _RCREG 0199                                _SPBRG 019B  
                 __end_ofsin@coeff_a 2848                   __end_ofsin@coeff_b 2854  
                              _TXREG 019A                                _UQEnd 004C  
                _ConfigureOscillator 2D9A          __size_of_setLongBypassState 0021  
                   _setPresetDisplay 2153                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                       ___lltoft@exp 00AD                      _switchTap_state 01E6  
                  ??_setLongTapState 00A2                        ___awtoft@sign 00AD  
                              _floor 1E7C                                _ldexp 1C91  
                              _frexp 22BB                                _myBuf 03A0  
                              _errno 024D             _getModulationSubdivision 2053  
                      ___ftpack@sign 00A4                                _timer 0048  
                   __end_ofi1___lmul 3000                                sin@x2 0148  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    __end_of_wait_ms 20E5                                pow@yi 0163  
                    scaleA10kPot@pwm 01E7                   __size_of_USARTInit 0044  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
        __end_of_read_bottom_tactile 244F                   __size_ofi1___aldiv 0082  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0132       __size_of_setSwitchBypassRelays 0036  
      __end_of_setSwitchBypassRelays 211B                         _calcCosArray 1859  
                        exp@exponent 0152                 ?_ConfigureOscillator 0070  
                 _updateSwitchBypass 121B                          ldexp@newexp 0141  
            __end_of_updateSwitchTap 0DDD                      __initialization 02DF  
                        log@exponent 0142          updateModulationArray@iAngle 015A  
            _updateSwitchBypassState 0002                         __end_of_main 073B  
            __size_of_InitializeTaps 0026                  i1___lmul@multiplier 0070  
             __size_of_scaleA100kPot 0085                          modCos@angle 0134  
                ?_updateSwitchBypass 0070                       __CFG_LPBOR$OFF 0000  
             ring_tactiles@iLed_1532 00B5                          modCos@shift 013F  
                    _set_subdivision 1B75          updateModulationArray@subDiv 0156  
                             ??_main 0255                        ___fttol@sign1 0128  
 __end_ofi1_getModulationSubdivision 2FA3           i1_getModulationSubdivision 2F77  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0           __end_of_solidring_tactiles 233B  
                   ?_set_leds_bottom 00A0                               ?_floor 012E  
                             ?_ldexp 013E                               ?_frexp 00A0  
                   __end_of___altoft 2241                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
                   __end_of___awtoft 2F27                     __end_of___ftpack 269C  
               ??_updateSwitchBypass 00BC                     __end_of___lltoft 2F77  
                             i1l2013 18EB                               i1l6114 190C  
                             i1l6106 18FC                               i1l6132 1953  
                             i1l6124 193A                               i1l6116 191A  
                             i1l6128 1945                               i1l6084 2FD9  
                             i1l6088 2FE3                               i1l6800 2F99  
                             i1l6806 2F9E                               i1l6910 0185  
                             i1l6824 2502                               i1l6920 01B0  
                             i1l6850 2539                               i1l6842 2528  
                             i1l6834 250A                               i1l6818 24F7  
                             i1l6922 01B9                               i1l6906 0173  
                             i1l6836 2516                               i1l6780 23DC  
                             i1l6772 23C4                               i1l6932 01EB  
                             i1l6940 0207                               i1l6924 01C8  
                             i1l6908 0183                               i1l6846 2531  
                             i1l6774 23CA                               i1l6792 2F86  
                             i1l6776 23D0                               i1l6784 23E8  
                             i1l6936 01F6                               i1l6928 01D7  
                             i1l6778 23D6                               i1l6938 0205  
                             i1l6972 02D6                               i1l6948 024D  
                             i1l6956 029F                               i1l6884 0125  
                             i1l6798 2F8B                               i1l6974 02D7  
                             i1l6878 010A                               i1l6968 02D1  
                             i1l9788 23ED                               _PMADRH 0192  
                             _PMADRL 0191                               _PMDATH 0194  
                             _PMDATL 0193                               _PMCON2 0196  
                             u544_25 190F                               u546_25 191B  
                             u538_25 2FE4                               u547_25 192F  
                             u539_25 2FEB                               u548_25 193B  
                             u660_25 250D                               u670_23 00C3  
                             u662_25 2517                               u663_25 2521  
                             u671_25 00D3                               u680_23 0149  
                             u664_25 2529                               u672_25 00DC  
                             u674_25 0101                               u692_23 022F  
                             u676_25 011C                               u685_23 019E  
                             u693_25 0244                               u695_25 02B1  
                             u696_25 02CA                       _debounce_count 0245  
                        modSaw@angle 012E                       _debounce_mode1 0247  
                     _debounce_mode2 0249                          modSaw@shift 013F  
                             _URBuff 0320                            ??_InitApp 00A0  
              ??_ConfigureOscillator 00A0             __end_of_read_top_tactile 249D  
            ?_getModulationDelayTime 0070                       __CFG_PWRTE$OFF 0000  
                             ___ftge 21C8                               ___lmul 2083  
                          ??___aldiv 00A8                               ___wmul 2E50  
                  _update_selectMode 1800                            ??___awdiv 00A4  
                          ??___ftadd 00C7                       __CFG_STVREN$ON 0000  
                          ??___ftdiv 00D4                            ??___ftneg 00C1  
                          ??___ftmul 00B4                            ??___ftsub 00F0  
                          ??___fttol 0124                          modTri@angle 012E  
                             _modCos 149A                     __end_of_init_adc 2DC5  
                             _modSaw 1646                               _modTri 0A13  
                   __end_of_init_pwm 23BD                   ?_update_selectMode 0070  
                        modTri@shift 0137                     ___awdiv@quotient 00A7  
              __end_of_resetRingLEDs 2E36                               _tmpVal 0253  
                  __end_of_USARTInit 0844                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 195C                               floor@i 0132  
                             floor@x 012E                ___ftmul@f3_as_product 00B9  
                  __end_ofi1___awdiv 253E              FLASH_ReadWord@flashAddr 00A0  
                             sin@sgn 014B                     __end_of_showSave 2E04  
                ??_update_selectMode 00A7                 _getSwitchBypassState 2D9E  
                          ??_wait_ms 00AE                 _setSwitchBypassState 2E6C  
                      _scaleA100kPot 19DE         __end_of_setExpressionDisplay 2E1C  
             __size_of_scaleiA10kPot 00AB               setLongTapState@f_state 00A0  
                   __end_ofexp@coeff 281E                     __end_oflog@coeff 2839  
            __end_of__initialization 035A                           ___altoft@c 00A8  
     __end_of_getModulationDelayTime 25E3                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 01BC  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 005A            ??_updateSwitchBypassState 00A2  
                         ___ftneg@f1 00BE                  _switchBypass_toggle 0251  
                         ___awtoft@c 00A8                __end_of_ring_tactiles 24ED  
          __end_of_update_selectMode 1859              __end_of_set_subdivision 1C00  
                         ___ftmul@f1 00AE                           ___ftmul@f2 00B1  
                         ___ftsub@f1 013A                           ___ftsub@f2 0137  
                         ___fttol@f1 0120                     ?_updateSwitchTap 0070  
                       ?_update_mode 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 1001                         __pidataBANK2 0003  
                       __pidataBANK3 2EC4                         __pidataBANK4 07FE  
                         ___lltoft@c 00A8                        __end_of_floor 1F2F  
                      __end_of_ldexp 1D28                        __end_of_frexp 22FB  
                   _initSwitchBypass 07EF                            ?i1___lmul 0070  
              _updateModulationArray 0DDD                      _doubleTap_state 004E  
                     _OPTION_REGbits 0095                         modCos@period 0142  
                       modCos@tmpVal 0145                ?_getSwitchBypassState 00A0  
              ?_setSwitchBypassState 00B6                       ?_scaleA100kPot 0167  
                            ??_floor 0131                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                        ?_setPedalMode 0070  
                         __pbssBANK0 0040                           __pbssBANK2 016A  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pbssBANK5 02A0                           __pbssBANK6 0320  
                         __pbssBANK7 03A0                   __size_of_eval_poly 0072  
                   ??i1_set_leds_top 0074                      __CFG_VCAPEN$OFF 0000  
                 __size_of_modSawRev 001C                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 218D                           _delay_time 0052  
                   _long_press_limit 0058         __size_of_setDoublePressState 003D  
                         _delayfound 024B                           __pmaintext 035E  
                     _InitializeTaps 2F27                              ?___ftge 00A0  
                            ?___lmul 00A0                              ?___wmul 012E  
     updateModulationArray@thisAngle 0158                           __pintentry 0004  
                      _scaleiA10kPot 1DD1                           _blink_rate 005C  
                      ??_adc_convert 00A2                              ?_modCos 0134  
                          ?___altoft 00A8                              ?_modSaw 012E  
                            ?_modTri 012E                       ___lmul@product 00A8  
                    _setLongTapState 2E36                            ?___awtoft 00A8  
                          ?___ftpack 00A0                  modSquare@inflection 014B  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                       _FLASH_ReadWord 2EA4  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 0003  
                        modulation@x 002E                          modulation@y 0032  
                         _ldexp$2649 0145                      _debounce_bypass 0243  
                     ??_setPedalMode 00A7                   USARTWriteInt@F3536 0234  
                      _suspend_blink 016D         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 0142                              _UQFront 004D  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 01BA                              _InitApp 2023  
               __end_of_scaleA10kPot 1C91               __end_of_InitializeTaps 2F4D  
                      ?_set_leds_top 00A0                           _knob1_prev 01CD  
         __size_of_update_selectMode 0059                   i1___awdiv@quotient 0077  
                         _knob2_prev 01CF                           _knob3_prev 01D1  
                         _knob4_prev 01D3                           _knob5_prev 01D5  
                   ?_set_subdivision 012E                            ?_showSave 0070  
                            ___aldiv 195C                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 253E  
                    __size_of___lmul 0030                              ___ftadd 100F  
                            ___ftdiv 1D28                              ___ftneg 2DB2  
                         _knob_1_pos 01A8                           _knob_2_pos 01AA  
                    __size_of___wmul 001C                              ___ftmul 073B  
                         _knob_3_pos 01AC                              ___ftsub 2FA3  
                            ___fttol 1A63                           _knob_4_pos 01AE  
                         _knob_5_pos 01B0                    _switchTap_pressed 016E  
                         ??___altoft 00AC                 _setExpressionDisplay 2E04  
             ?_updateModulationArray 0070                      __size_of_modCos 01AC  
             __end_of_FLASH_ReadWord 2EC4                      __size_of_modSaw 01BA  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01E3                    __end_of_eval_poly 270E  
                 InitializeTaps@itap 00A1                           ??___lltoft 00AC  
                            __ptext1 1800                              __ptext2 211B  
                            __ptext3 0BF6                              __ptext4 2E36  
                            __ptext5 195C                              __ptext6 121B  
                            __ptext7 2EE4                              __ptext8 227E  
                            __ptext9 2DF0           __end_of_setLongBypassState 2F05  
        ?i1_getModulationSubdivision 0070               ??_getSwitchBypassState 00A2  
                  __end_of_modSawRev 2EA4                            _T2CONbits 001C  
                       __size_of_cos 007C                         __size_of_map 008B  
                       __size_of_exp 0159                         __size_of_log 00D1  
                       __size_of_isr 02D9               ??_setSwitchBypassState 00B8  
                       __size_of_sin 01CF                         __size_of_pow 0116  
                __end_of_adc_convert 2DF0                         modTri@period 013A  
                  __end_of_modSquare 227E                      ??_scaleA100kPot 00F0  
                   ___aldiv@dividend 00A4                         modTri@tmpVal 013D  
                            _wait_ms 20B3                              clrloop0 2DD2  
               end_of_initialization 035A                              exp@sign 0154  
                         _modulation 233B                              init_ram 2DC5  
                         ??_init_adc 00A0                              initloop 2DC6  
                         ??_init_pwm 00A0         updateSwitchBypassState@state 00A0  
                 _solidring_tactiles 22FB                        _longTap_timer 01B4  
                      _longTap_state 005D                        _longTap_start 016B  
                     ??_set_leds_top 00A4                    ?_read_top_tactile 0070  
                    ?_InitializeTaps 0070                              pow@sign 0162  
                  scaleA10kPot@input 0167              __end_of_setLongTapState 2E50  
              _setSwitchBypassRelays 20E5               i1set_leds_top@ledState 0072  
                 ??_read_top_tactile 00B2                            _RCSTAbits 019D  
                         ??_showSave 00B7                     _mod_time_changed 01E4  
                   _longBypass_timer 01B2                     ___aldiv@quotient 00AB  
                   _longBypass_state 004F                     _longBypass_start 016A  
       __size_of_read_bottom_tactile 004A                  ?_solidring_tactiles 0070  
                       __pstringtext 2800            FLASH_ReadWord@GIEBitValue 00A2  
              ?_setExpressionDisplay 0070                 __size_of_update_mode 0038  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 01E3  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
                          _USARTInit 0800                            _TRISBbits 008D  
                          _TRISCbits 008E                            _TRISDbits 008F  
                          _TRISEbits 0090                            _TRISFbits 030C  
                          _TRISGbits 030D                            i1___aldiv 18DA  
                          i1___awdiv 24ED                 ??_solidring_tactiles 00B2  
        __end_of_ConfigureOscillator 2D9E                           map@out_max 00EA  
                         map@out_min 00E7          __size_of_updateSwitchBypass 0126  
           __end_of_initSwitchBypass 07FE                          _CCP1CONbits 0293  
                        ___ftdiv@exp 00DC             __size_of_set_leds_bottom 003B  
                        _CCP2CONbits 029A                            _TXSTAbits 019E  
               _switchBypass_pressed 01B6                          _CCP3CONbits 0313  
                        _CCP4CONbits 031A                          _CCP5CONbits 031E  
                        _CCP6CONbits 0613                      ??_scaleiA10kPot 00F0  
                        _CCP7CONbits 0616                          ___ftmul@exp 00B8  
                 adc_convert@channel 00A3                          _CCP8CONbits 0619  
                        _CCP9CONbits 061C                 set_leds_top@ledState 00A2  
                     __end_of___ftge 2204                 __end_of_setPedalMode 2023  
                     __end_of___lmul 20B3                       __end_of___wmul 2E6C  
                       _double_timer 01A0                          _adc_convert 2DDD  
   __end_of_getModulationSubdivision 2083                       _switchTap_down 01C5  
                     __end_of_modCos 1646                       __end_of_modSaw 1800  
                     __end_of_modTri 0BF6                       modSawRev@angle 0145  
                         floor@expon 0135                i1___lmul@multiplicand 0074  
                  __size_ofi1___lmul 002F                  start_initialization 02DF  
                         ?_USARTInit 00A0                           eval_poly@d 0137  
                         eval_poly@n 0139                           eval_poly@x 0134  
              _bottomTactile_pressed 01BB                  _setDoublePressState 227E  
                         ldexp@value 013E                           ?i1___aldiv 0020  
                        __end_of_cos 2800                          __end_of_map 1B75  
                        __end_of_exp 149A                          __end_of_log 2000  
                        __end_of_isr 02DD                           ?i1___awdiv 0070  
                        __end_of_sin 0A13                          __end_of_pow 121B  
              __size_of_scaleA10kPot 0091                   _adjusted_pot_value 0241  
                        ?_modulation 002E                   scaleiA10kPot@input 0167  
                         frexp@value 00A0               __size_of_resetRingLEDs 001A  
             ?_setSwitchBypassRelays 00B2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                             ??___ftge 00A6  
                           ??___lmul 00A8               ??_setExpressionDisplay 00A4  
                           ??___wmul 00F0                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 0052                          __pdataBANK2 016F  
                        __pdataBANK3 01C7                          __pdataBANK4 0263  
                           ??_modCos 013A                             ??_modSaw 00F0  
                 i1___aldiv@dividend 0024                             ??_modTri 00F0  
                      _tap_iteration 01DD             __size_of_updateSwitchTap 01E7  
                  __size_of___altoft 003D                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065                          __pbssBIGRAM 238A  
                       _scaleA10kPot 1C00                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
               __end_of_set_leds_top 2637                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 005F  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01E7  
                      __pcstackBANK4 0255               __size_of_ring_tactiles 0050  
                     _expSwitchState 01E1                     i1___lmul@product 0078  
                   scaleiA10kPot@pwm 01E7             ?_updateSwitchBypassState 00A0  
                         sin@coeff_a 2839                           sin@coeff_b 2848  
                 i1___aldiv@quotient 002A                     modCos@inflection 0137  
                      ?_calcCosArray 0070                             ?_InitApp 0070  
              ??_setDoublePressState 00BA                    __size_of_init_adc 000A  
                  __size_of_init_pwm 0041                            _main$2840 025A  
                          _main$2841 025D                            _main$2842 0260  
            ??_updateModulationArray 0150                             ?___aldiv 00A0  
                  ??_set_leds_bottom 00A2                   _currentBypassState 01E0  
                           ?___awdiv 00A0                             ?___ftadd 00C1  
                           ?___ftdiv 00CE                             ?___ftneg 00BE  
                           ?___ftmul 00AE                             ?___ftsub 0137  
                           ?___fttol 0120                    __size_of_showSave 0014  
                 _modulation_changed 01C2                    i1___awdiv@divisor 0070  
                 _scaleA100kPot$2845 01EA                   _scaleA100kPot$2846 01ED  
                  i1___awdiv@counter 0075                          _blink_delay 01CB  
                __size_of_modulation 0041                        _resetRingLEDs 2E1C  
                        _blink_state 01DF                            _eval_poly 269C  
                        ??_USARTInit 00A2                             _CCPTMRS0 029D  
                           _CCPTMRS1 029E                             _CCPTMRS2 029F  
                        ??i1___aldiv 007C                             ?_wait_ms 00AC  
                        ??i1___awdiv 0074                            _modSawRev 2E88  
           ??_getModulationDelayTime 00F0                  _read_bottom_tactile 2405  
                     __size_of_floor 00B3                       __size_of_ldexp 0097  
                     __size_of_frexp 0040                            _modSquare 2241  
                 calcCosArray@iAngle 0159                       _presetModeCnst 01E5  
                 _setLongBypassState 2EE4                  __end_of_init_timer0 2DA9  
                __end_of_init_timer2 2DB2                            _mod_value 024F  
                          _mod_timer 01A4                     ??_InitializeTaps 00A0  
                    ___aldiv@divisor 00A0    __size_of_getModulationSubdivision 0030  
                    ___aldiv@counter 00A9            ?_getModulationSubdivision 00A0  
                     _presetSaveMode 0051                       ___wmul@product 0132  
                     ??_calcCosArray 0152                             _LATBbits 010D  
                           _LATDbits 010F                             _LATFbits 038C  
                           _LATGbits 038D                       _mod_delay_time 01D9  
                          clear_ram0 2DD1                   calcCosArray@tmpVal 0156  
                          _tap_timer 0044                  ?_setLongBypassState 00A0  
                          _tap_total 023D                __size_of_setPedalMode 0023  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
                      _ring_tactiles 249D                      _longBypass_down 01BF  
                   ??_FLASH_ReadWord 00A2                      _longBypass_save 01C0  
               ?_read_bottom_tactile 0070              __size_ofi1_set_leds_top 0048  
          initSwitchBypass@initState 00BA                            map@in_max 00E4  
                          map@in_min 00E1                       ?_resetRingLEDs 0070  
                          _sub_timer 0040                           _ADCON0bits 009D  
                           i1___lmul 2FD1                           _ADCON1bits 009E  
           __size_of_set_subdivision 008B                    ___wmul@multiplier 012E  
                   set_subdivision@x 012E                     set_subdivision@y 0130  
          __size_of_read_top_tactile 004E                 ??_setLongBypassState 00A2  
                         ?_eval_poly 0134        __size_of_getSwitchBypassState 0004  
                        _modCos$2853 013C        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0145                __end_of_scaleA100kPot 1A63  
                  ??_updateSwitchTap 00BC                    ___lmul@multiplier 00A0  
                         ?_modSquare 0148                      modSquare@tmpVal 014E  
                       _setPedalMode 2000                    _ReadSavedSettings 270E  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                     wait_ms@timeSec 00AC                   ?_ReadSavedSettings 0070  
                        _modSaw$2855 0134                          _modSaw$2856 0137  
                        _modSaw$2857 013A                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                 ??_initSwitchBypass 00BA                     __size_of_InitApp 0030  
                     ?_ring_tactiles 0070                            modSaw@mod 013D  
                        _mode1_state 01C1                        ??_update_mode 00A7  
                        _mode2_state 0050                            isr@subDiv 007D  
              ??_read_bottom_tactile 00B2                          _modTri$2854 0134  
                updateSwitchTap@iCnt 00C4                  ??_ReadSavedSettings 00A4  
                         _APFCONbits 011D                     __size_of___aldiv 0082  
                   __size_of___awdiv 0052                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                         ?_adc_convert 00A0  
                   __size_of___ftneg 0009                             ___altoft 2204  
                   __size_of___ftmul 00B4                     __size_of___ftsub 002E  
                   __size_of___fttol 0087                             _cos$2858 014F  
                           ___awtoft 2F05                __size_of_set_leds_top 0054  
                           ___ftpack 2637                    _baseline_mod_time 01C7  
                           _map$2843 00ED                             ___lltoft 2F4D  
             _preset_programmning_on 01C3                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2612 014F  
                           _exp$2862 014C                          _init_timer0 2DA2  
                        _init_timer2 2DA9                             _cosArray 2482  
         __end_of_updateSwitchBypass 1341                             __ptext10 22FB  
                           __ptext11 249D                             __ptext20 2E88  
                           __ptext12 2000                             __ptext21 1646  
                           __ptext13 2153                             __ptext30 1C91  
                           __ptext22 253E                             __ptext14 2E04  
                           __ptext31 2F4D                             __ptext23 1B75  
                           __ptext15 2E1C                             __ptext40 0002  
                           __ptext32 244F                             __ptext24 1DD1  
                           __ptext16 0DDD                             __ptext41 2D9E  
                           __ptext33 2405                             __ptext25 1C00  
                           __ptext17 0A13                             __ptext50 21C8  
                           __ptext42 2590                             __ptext34 1AEA  
                           __ptext26 19DE                             __ptext18 2241  
                           __ptext51 2204                             __ptext43 2053  
                           __ptext35 07EF                             __ptext27 1105  
                           __ptext19 149A                             __ptext60 2637  
                           __ptext52 269C                             __ptext44 1859  
                           __ptext36 2E6C                             __ptext28 1F2F  
                           __ptext61 2DDD                             __ptext53 2E50  
                           __ptext45 2784                             __ptext37 20E5  
                           __ptext29 1341                             __ptext70 2DA9  
                           __ptext62 0800                             __ptext54 073B  
                           __ptext46 0844                             __ptext38 20B3  
                           __ptext71 2DA2                             __ptext63 270E  
                           __ptext55 2FA3                             __ptext47 1E7C  
                           __ptext39 2083                             __ptext80 18DA  
                           __ptext72 2DBB                             __ptext64 25E3  
                           __ptext56 100F                             __ptext48 22BB  
                           __ptext73 2D9A                             __ptext65 218D  
                           __ptext57 2DB2                             __ptext49 1A63  
                           __ptext66 2EA4                             __ptext58 1D28  
                           __ptext75 23BD                             __ptext67 2F27  
                           __ptext59 2F05                             __ptext76 2F77  
                           __ptext68 2023                             __ptext77 24ED  
                           __ptext69 237C                             __ptext78 233B  
                           __ptext79 2FD1                             _sin$2861 0145  
          __end_of_ReadSavedSettings 2784                     __size_of_wait_ms 0032  
        __size_of_solidring_tactiles 0040      __size_of_getModulationDelayTime 0053  
                           _ledState 0239                             _pow$2860 015F  
                           _pow$2859 015C                        _presetChannel 016F  
                       ??_modulation 0036                          _mod_counter 01D7  
                           _modArray 238A              ??_setSwitchBypassRelays 00B4  
                           _init_adc 2DBB                        __size_of_main 03DD  
                           _init_pwm 237C     updateModulationArray@angleFactor 0154  
       __size_of_ConfigureOscillator 0004                         _set_leds_top 25E3  
                           _showSave 2DF0                             _num_taps 005E  
              __end_of_scaleiA10kPot 1E7C                             int$flags 007E  
                    ??_resetRingLEDs 00A4                      i1set_leds_top@x 0070  
                     modSquare@angle 0148                  __end_of_update_mode 2153  
                           exp@coeff 2800                             _symmetry 01DB  
                modSawRev@inflection 0148                             log@coeff 281E  
                 __end_of_modulation 237C                 __end_of_calcCosArray 18DA  
                         _INTCONbits 000B                          ??_eval_poly 00F0  
          __size_of_setPresetDisplay 003A                          _tap_history 0220  
                        ??_modSawRev 014B                    ??_set_subdivision 00F0  
                        ??_modSquare 00F0                             intlevel1 0000  
                    _set_leds_bottom 218D                           _PMCON1bits 0195  
                    ??_ring_tactiles 00B2                    __CFG_CLKOUTEN$OFF 0000  
                    _reset_sub_delay 01C4                           _OSCCONbits 0099  
                       _preset_blink 016C               _getModulationDelayTime 2590  
                     i1_set_leds_top 23BD       __size_of_updateModulationArray 0223  
   __size_of_updateSwitchBypassState 0001        __end_of_updateModulationArray 1000  
                      _isInitialized 01BE        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$2851 01EA                   _scaleiA10kPot$2852 01ED  
           __size_of_setLongTapState 001A                          _tmpModDelay 01B8  
                   _read_top_tactile 244F         ??i1_getModulationSubdivision 0072  
                       ___aldiv@sign 00AA           __size_of_ReadSavedSettings 0076  
        __end_of_setDoublePressState 22BB                         _CCP10CONbits 061F  
                  _bottom_push_state 0056           setPresetDisplay@ledChannel 00A6  
             __end_ofi1_set_leds_top 2405  
