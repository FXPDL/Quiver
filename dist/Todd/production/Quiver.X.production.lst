

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Mar 21 23:15:07 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    19                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1
    20                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,delta=2
   125                           	psect	text97,local,class=CODE,merge=1,delta=2
   126                           	psect	text98,local,class=CODE,merge=1,delta=2
   127                           	psect	text99,local,class=CODE,merge=1,delta=2
   128                           	psect	text100,local,class=CODE,merge=1,delta=2
   129                           	psect	text101,local,class=CODE,merge=1,delta=2
   130                           	psect	text102,local,class=CODE,merge=1,delta=2
   131                           	psect	text103,local,class=CODE,merge=1,delta=2
   132                           	psect	intentry,global,class=CODE,delta=2
   133                           	psect	text105,local,class=CODE,merge=1,delta=2
   134                           	psect	text106,local,class=CODE,merge=1,delta=2
   135                           	psect	text107,local,class=CODE,merge=1,delta=2
   136                           	psect	text108,local,class=CODE,merge=1,delta=2
   137                           	psect	text109,local,class=CODE,merge=1,delta=2
   138                           	psect	text110,local,class=CODE,merge=1,delta=2
   139                           	psect	text111,local,class=CODE,merge=1,delta=2
   140                           	psect	text112,local,class=CODE,merge=1,delta=2
   141                           	psect	text113,local,class=CODE,merge=1,delta=2
   142                           	psect	text114,local,class=CODE,merge=1,delta=2
   143                           	psect	text115,local,class=CODE,merge=1,delta=2
   144                           	psect	text116,local,class=CODE,merge=1,delta=2
   145                           	psect	text117,local,class=CODE,merge=1,delta=2
   146                           	psect	text118,local,class=CODE,merge=1,delta=2
   147                           	psect	text119,local,class=CODE,merge=1,delta=2
   148                           	psect	text120,local,class=CODE,merge=1,delta=2
   149                           	psect	maintext_split_1,global,class=CODE,merge=1,split=1,delta=2
   150                           	dabs	1,0x920,80
   151                           	dabs	1,0x8A0,80
   152                           	dabs	1,0x820,80
   153                           	dabs	1,0x7A0,80
   154                           	dabs	1,0x742,46
   155                           	dabs	1,0x720,34
   156                           	dabs	1,0x6A0,80
   157                           	dabs	1,0x620,80
   158                           	dabs	1,0x5BA,54
   159                           	dabs	1,0x2482,0,_cosArray
   160                           	dabs	1,0x238A,0,_modArray
   161                           	dabs	1,0x7E,2
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  000F                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  008F                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0110                     	;# 
   216  0116                     	;# 
   217  0117                     	;# 
   218  011D                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  018F                     	;# 
   222  0190                     	;# 
   223  0191                     	;# 
   224  0191                     	;# 
   225  0192                     	;# 
   226  0193                     	;# 
   227  0193                     	;# 
   228  0194                     	;# 
   229  0195                     	;# 
   230  0196                     	;# 
   231  0197                     	;# 
   232  0199                     	;# 
   233  0199                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019A                     	;# 
   237  019A                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019C                     	;# 
   244  019C                     	;# 
   245  019C                     	;# 
   246  019D                     	;# 
   247  019D                     	;# 
   248  019D                     	;# 
   249  019E                     	;# 
   250  019E                     	;# 
   251  019E                     	;# 
   252  019F                     	;# 
   253  019F                     	;# 
   254  019F                     	;# 
   255  020D                     	;# 
   256  020F                     	;# 
   257  0210                     	;# 
   258  0211                     	;# 
   259  0211                     	;# 
   260  0212                     	;# 
   261  0212                     	;# 
   262  0213                     	;# 
   263  0213                     	;# 
   264  0214                     	;# 
   265  0214                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0216                     	;# 
   270  0216                     	;# 
   271  0217                     	;# 
   272  0217                     	;# 
   273  0219                     	;# 
   274  021A                     	;# 
   275  021B                     	;# 
   276  021C                     	;# 
   277  021D                     	;# 
   278  021E                     	;# 
   279  021F                     	;# 
   280  028C                     	;# 
   281  028D                     	;# 
   282  0291                     	;# 
   283  0291                     	;# 
   284  0292                     	;# 
   285  0293                     	;# 
   286  0298                     	;# 
   287  0298                     	;# 
   288  0299                     	;# 
   289  029A                     	;# 
   290  029D                     	;# 
   291  029E                     	;# 
   292  029F                     	;# 
   293  030C                     	;# 
   294  030D                     	;# 
   295  0311                     	;# 
   296  0311                     	;# 
   297  0312                     	;# 
   298  0313                     	;# 
   299  0318                     	;# 
   300  0318                     	;# 
   301  0319                     	;# 
   302  031A                     	;# 
   303  031C                     	;# 
   304  031C                     	;# 
   305  031D                     	;# 
   306  031E                     	;# 
   307  038C                     	;# 
   308  038D                     	;# 
   309  0394                     	;# 
   310  0395                     	;# 
   311  0396                     	;# 
   312  040C                     	;# 
   313  040D                     	;# 
   314  0411                     	;# 
   315  0411                     	;# 
   316  0412                     	;# 
   317  0413                     	;# 
   318  0414                     	;# 
   319  0415                     	;# 
   320  0416                     	;# 
   321  0417                     	;# 
   322  0418                     	;# 
   323  0418                     	;# 
   324  0419                     	;# 
   325  041A                     	;# 
   326  041B                     	;# 
   327  041C                     	;# 
   328  041D                     	;# 
   329  041E                     	;# 
   330  048D                     	;# 
   331  0491                     	;# 
   332  0491                     	;# 
   333  0492                     	;# 
   334  0492                     	;# 
   335  0493                     	;# 
   336  0493                     	;# 
   337  0493                     	;# 
   338  0494                     	;# 
   339  0494                     	;# 
   340  0495                     	;# 
   341  0495                     	;# 
   342  0496                     	;# 
   343  0496                     	;# 
   344  0497                     	;# 
   345  0497                     	;# 
   346  0595                     	;# 
   347  0596                     	;# 
   348  0597                     	;# 
   349  059C                     	;# 
   350  059D                     	;# 
   351  059E                     	;# 
   352  0611                     	;# 
   353  0611                     	;# 
   354  0612                     	;# 
   355  0613                     	;# 
   356  0614                     	;# 
   357  0614                     	;# 
   358  0615                     	;# 
   359  0616                     	;# 
   360  0617                     	;# 
   361  0617                     	;# 
   362  0618                     	;# 
   363  0619                     	;# 
   364  061A                     	;# 
   365  061A                     	;# 
   366  061B                     	;# 
   367  061C                     	;# 
   368  061D                     	;# 
   369  061D                     	;# 
   370  061E                     	;# 
   371  061F                     	;# 
   372  0FE4                     	;# 
   373  0FE5                     	;# 
   374  0FE6                     	;# 
   375  0FE7                     	;# 
   376  0FE8                     	;# 
   377  0FE9                     	;# 
   378  0FEA                     	;# 
   379  0FEB                     	;# 
   380  0FED                     	;# 
   381  0FEE                     	;# 
   382  0FEF                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0008                     	;# 
   392  0009                     	;# 
   393  000A                     	;# 
   394  000B                     	;# 
   395  000C                     	;# 
   396  000D                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  008F                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0093                     	;# 
   421  0094                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  010F                     	;# 
   436  0110                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  011D                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  018F                     	;# 
   443  0190                     	;# 
   444  0191                     	;# 
   445  0191                     	;# 
   446  0192                     	;# 
   447  0193                     	;# 
   448  0193                     	;# 
   449  0194                     	;# 
   450  0195                     	;# 
   451  0196                     	;# 
   452  0197                     	;# 
   453  0199                     	;# 
   454  0199                     	;# 
   455  0199                     	;# 
   456  019A                     	;# 
   457  019A                     	;# 
   458  019A                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019C                     	;# 
   465  019C                     	;# 
   466  019C                     	;# 
   467  019D                     	;# 
   468  019D                     	;# 
   469  019D                     	;# 
   470  019E                     	;# 
   471  019E                     	;# 
   472  019E                     	;# 
   473  019F                     	;# 
   474  019F                     	;# 
   475  019F                     	;# 
   476  020D                     	;# 
   477  020F                     	;# 
   478  0210                     	;# 
   479  0211                     	;# 
   480  0211                     	;# 
   481  0212                     	;# 
   482  0212                     	;# 
   483  0213                     	;# 
   484  0213                     	;# 
   485  0214                     	;# 
   486  0214                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  0219                     	;# 
   495  021A                     	;# 
   496  021B                     	;# 
   497  021C                     	;# 
   498  021D                     	;# 
   499  021E                     	;# 
   500  021F                     	;# 
   501  028C                     	;# 
   502  028D                     	;# 
   503  0291                     	;# 
   504  0291                     	;# 
   505  0292                     	;# 
   506  0293                     	;# 
   507  0298                     	;# 
   508  0298                     	;# 
   509  0299                     	;# 
   510  029A                     	;# 
   511  029D                     	;# 
   512  029E                     	;# 
   513  029F                     	;# 
   514  030C                     	;# 
   515  030D                     	;# 
   516  0311                     	;# 
   517  0311                     	;# 
   518  0312                     	;# 
   519  0313                     	;# 
   520  0318                     	;# 
   521  0318                     	;# 
   522  0319                     	;# 
   523  031A                     	;# 
   524  031C                     	;# 
   525  031C                     	;# 
   526  031D                     	;# 
   527  031E                     	;# 
   528  038C                     	;# 
   529  038D                     	;# 
   530  0394                     	;# 
   531  0395                     	;# 
   532  0396                     	;# 
   533  040C                     	;# 
   534  040D                     	;# 
   535  0411                     	;# 
   536  0411                     	;# 
   537  0412                     	;# 
   538  0413                     	;# 
   539  0414                     	;# 
   540  0415                     	;# 
   541  0416                     	;# 
   542  0417                     	;# 
   543  0418                     	;# 
   544  0418                     	;# 
   545  0419                     	;# 
   546  041A                     	;# 
   547  041B                     	;# 
   548  041C                     	;# 
   549  041D                     	;# 
   550  041E                     	;# 
   551  048D                     	;# 
   552  0491                     	;# 
   553  0491                     	;# 
   554  0492                     	;# 
   555  0492                     	;# 
   556  0493                     	;# 
   557  0493                     	;# 
   558  0493                     	;# 
   559  0494                     	;# 
   560  0494                     	;# 
   561  0495                     	;# 
   562  0495                     	;# 
   563  0496                     	;# 
   564  0496                     	;# 
   565  0497                     	;# 
   566  0497                     	;# 
   567  0595                     	;# 
   568  0596                     	;# 
   569  0597                     	;# 
   570  059C                     	;# 
   571  059D                     	;# 
   572  059E                     	;# 
   573  0611                     	;# 
   574  0611                     	;# 
   575  0612                     	;# 
   576  0613                     	;# 
   577  0614                     	;# 
   578  0614                     	;# 
   579  0615                     	;# 
   580  0616                     	;# 
   581  0617                     	;# 
   582  0617                     	;# 
   583  0618                     	;# 
   584  0619                     	;# 
   585  061A                     	;# 
   586  061A                     	;# 
   587  061B                     	;# 
   588  061C                     	;# 
   589  061D                     	;# 
   590  061D                     	;# 
   591  061E                     	;# 
   592  061F                     	;# 
   593  0FE4                     	;# 
   594  0FE5                     	;# 
   595  0FE6                     	;# 
   596  0FE7                     	;# 
   597  0FE8                     	;# 
   598  0FE9                     	;# 
   599  0FEA                     	;# 
   600  0FEB                     	;# 
   601  0FED                     	;# 
   602  0FEE                     	;# 
   603  0FEF                     	;# 
   604  0000                     	;# 
   605  0001                     	;# 
   606  0002                     	;# 
   607  0003                     	;# 
   608  0004                     	;# 
   609  0005                     	;# 
   610  0006                     	;# 
   611  0007                     	;# 
   612  0008                     	;# 
   613  0009                     	;# 
   614  000A                     	;# 
   615  000B                     	;# 
   616  000C                     	;# 
   617  000D                     	;# 
   618  000E                     	;# 
   619  000F                     	;# 
   620  0010                     	;# 
   621  0011                     	;# 
   622  0012                     	;# 
   623  0013                     	;# 
   624  0014                     	;# 
   625  0015                     	;# 
   626  0016                     	;# 
   627  0016                     	;# 
   628  0017                     	;# 
   629  0018                     	;# 
   630  0019                     	;# 
   631  001A                     	;# 
   632  001B                     	;# 
   633  001C                     	;# 
   634  008C                     	;# 
   635  008D                     	;# 
   636  008E                     	;# 
   637  008F                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0093                     	;# 
   642  0094                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  010F                     	;# 
   657  0110                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018F                     	;# 
   664  0190                     	;# 
   665  0191                     	;# 
   666  0191                     	;# 
   667  0192                     	;# 
   668  0193                     	;# 
   669  0193                     	;# 
   670  0194                     	;# 
   671  0195                     	;# 
   672  0196                     	;# 
   673  0197                     	;# 
   674  0199                     	;# 
   675  0199                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019A                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019C                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019D                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019E                     	;# 
   693  019E                     	;# 
   694  019F                     	;# 
   695  019F                     	;# 
   696  019F                     	;# 
   697  020D                     	;# 
   698  020F                     	;# 
   699  0210                     	;# 
   700  0211                     	;# 
   701  0211                     	;# 
   702  0212                     	;# 
   703  0212                     	;# 
   704  0213                     	;# 
   705  0213                     	;# 
   706  0214                     	;# 
   707  0214                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0215                     	;# 
   711  0216                     	;# 
   712  0216                     	;# 
   713  0217                     	;# 
   714  0217                     	;# 
   715  0219                     	;# 
   716  021A                     	;# 
   717  021B                     	;# 
   718  021C                     	;# 
   719  021D                     	;# 
   720  021E                     	;# 
   721  021F                     	;# 
   722  028C                     	;# 
   723  028D                     	;# 
   724  0291                     	;# 
   725  0291                     	;# 
   726  0292                     	;# 
   727  0293                     	;# 
   728  0298                     	;# 
   729  0298                     	;# 
   730  0299                     	;# 
   731  029A                     	;# 
   732  029D                     	;# 
   733  029E                     	;# 
   734  029F                     	;# 
   735  030C                     	;# 
   736  030D                     	;# 
   737  0311                     	;# 
   738  0311                     	;# 
   739  0312                     	;# 
   740  0313                     	;# 
   741  0318                     	;# 
   742  0318                     	;# 
   743  0319                     	;# 
   744  031A                     	;# 
   745  031C                     	;# 
   746  031C                     	;# 
   747  031D                     	;# 
   748  031E                     	;# 
   749  038C                     	;# 
   750  038D                     	;# 
   751  0394                     	;# 
   752  0395                     	;# 
   753  0396                     	;# 
   754  040C                     	;# 
   755  040D                     	;# 
   756  0411                     	;# 
   757  0411                     	;# 
   758  0412                     	;# 
   759  0413                     	;# 
   760  0414                     	;# 
   761  0415                     	;# 
   762  0416                     	;# 
   763  0417                     	;# 
   764  0418                     	;# 
   765  0418                     	;# 
   766  0419                     	;# 
   767  041A                     	;# 
   768  041B                     	;# 
   769  041C                     	;# 
   770  041D                     	;# 
   771  041E                     	;# 
   772  048D                     	;# 
   773  0491                     	;# 
   774  0491                     	;# 
   775  0492                     	;# 
   776  0492                     	;# 
   777  0493                     	;# 
   778  0493                     	;# 
   779  0493                     	;# 
   780  0494                     	;# 
   781  0494                     	;# 
   782  0495                     	;# 
   783  0495                     	;# 
   784  0496                     	;# 
   785  0496                     	;# 
   786  0497                     	;# 
   787  0497                     	;# 
   788  0595                     	;# 
   789  0596                     	;# 
   790  0597                     	;# 
   791  059C                     	;# 
   792  059D                     	;# 
   793  059E                     	;# 
   794  0611                     	;# 
   795  0611                     	;# 
   796  0612                     	;# 
   797  0613                     	;# 
   798  0614                     	;# 
   799  0614                     	;# 
   800  0615                     	;# 
   801  0616                     	;# 
   802  0617                     	;# 
   803  0617                     	;# 
   804  0618                     	;# 
   805  0619                     	;# 
   806  061A                     	;# 
   807  061A                     	;# 
   808  061B                     	;# 
   809  061C                     	;# 
   810  061D                     	;# 
   811  061D                     	;# 
   812  061E                     	;# 
   813  061F                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  000F                     	;# 
   841  0010                     	;# 
   842  0011                     	;# 
   843  0012                     	;# 
   844  0013                     	;# 
   845  0014                     	;# 
   846  0015                     	;# 
   847  0016                     	;# 
   848  0016                     	;# 
   849  0017                     	;# 
   850  0018                     	;# 
   851  0019                     	;# 
   852  001A                     	;# 
   853  001B                     	;# 
   854  001C                     	;# 
   855  008C                     	;# 
   856  008D                     	;# 
   857  008E                     	;# 
   858  008F                     	;# 
   859  0090                     	;# 
   860  0091                     	;# 
   861  0092                     	;# 
   862  0093                     	;# 
   863  0094                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  010F                     	;# 
   878  0110                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018F                     	;# 
   885  0190                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  0199                     	;# 
   897  0199                     	;# 
   898  019A                     	;# 
   899  019A                     	;# 
   900  019A                     	;# 
   901  019B                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019C                     	;# 
   907  019C                     	;# 
   908  019C                     	;# 
   909  019D                     	;# 
   910  019D                     	;# 
   911  019D                     	;# 
   912  019E                     	;# 
   913  019E                     	;# 
   914  019E                     	;# 
   915  019F                     	;# 
   916  019F                     	;# 
   917  019F                     	;# 
   918  020D                     	;# 
   919  020F                     	;# 
   920  0210                     	;# 
   921  0211                     	;# 
   922  0211                     	;# 
   923  0212                     	;# 
   924  0212                     	;# 
   925  0213                     	;# 
   926  0213                     	;# 
   927  0214                     	;# 
   928  0214                     	;# 
   929  0215                     	;# 
   930  0215                     	;# 
   931  0215                     	;# 
   932  0216                     	;# 
   933  0216                     	;# 
   934  0217                     	;# 
   935  0217                     	;# 
   936  0219                     	;# 
   937  021A                     	;# 
   938  021B                     	;# 
   939  021C                     	;# 
   940  021D                     	;# 
   941  021E                     	;# 
   942  021F                     	;# 
   943  028C                     	;# 
   944  028D                     	;# 
   945  0291                     	;# 
   946  0291                     	;# 
   947  0292                     	;# 
   948  0293                     	;# 
   949  0298                     	;# 
   950  0298                     	;# 
   951  0299                     	;# 
   952  029A                     	;# 
   953  029D                     	;# 
   954  029E                     	;# 
   955  029F                     	;# 
   956  030C                     	;# 
   957  030D                     	;# 
   958  0311                     	;# 
   959  0311                     	;# 
   960  0312                     	;# 
   961  0313                     	;# 
   962  0318                     	;# 
   963  0318                     	;# 
   964  0319                     	;# 
   965  031A                     	;# 
   966  031C                     	;# 
   967  031C                     	;# 
   968  031D                     	;# 
   969  031E                     	;# 
   970  038C                     	;# 
   971  038D                     	;# 
   972  0394                     	;# 
   973  0395                     	;# 
   974  0396                     	;# 
   975  040C                     	;# 
   976  040D                     	;# 
   977  0411                     	;# 
   978  0411                     	;# 
   979  0412                     	;# 
   980  0413                     	;# 
   981  0414                     	;# 
   982  0415                     	;# 
   983  0416                     	;# 
   984  0417                     	;# 
   985  0418                     	;# 
   986  0418                     	;# 
   987  0419                     	;# 
   988  041A                     	;# 
   989  041B                     	;# 
   990  041C                     	;# 
   991  041D                     	;# 
   992  041E                     	;# 
   993  048D                     	;# 
   994  0491                     	;# 
   995  0491                     	;# 
   996  0492                     	;# 
   997  0492                     	;# 
   998  0493                     	;# 
   999  0493                     	;# 
  1000  0493                     	;# 
  1001  0494                     	;# 
  1002  0494                     	;# 
  1003  0495                     	;# 
  1004  0495                     	;# 
  1005  0496                     	;# 
  1006  0496                     	;# 
  1007  0497                     	;# 
  1008  0497                     	;# 
  1009  0595                     	;# 
  1010  0596                     	;# 
  1011  0597                     	;# 
  1012  059C                     	;# 
  1013  059D                     	;# 
  1014  059E                     	;# 
  1015  0611                     	;# 
  1016  0611                     	;# 
  1017  0612                     	;# 
  1018  0613                     	;# 
  1019  0614                     	;# 
  1020  0614                     	;# 
  1021  0615                     	;# 
  1022  0616                     	;# 
  1023  0617                     	;# 
  1024  0617                     	;# 
  1025  0618                     	;# 
  1026  0619                     	;# 
  1027  061A                     	;# 
  1028  061A                     	;# 
  1029  061B                     	;# 
  1030  061C                     	;# 
  1031  061D                     	;# 
  1032  061D                     	;# 
  1033  061E                     	;# 
  1034  061F                     	;# 
  1035  0FE4                     	;# 
  1036  0FE5                     	;# 
  1037  0FE6                     	;# 
  1038  0FE7                     	;# 
  1039  0FE8                     	;# 
  1040  0FE9                     	;# 
  1041  0FEA                     	;# 
  1042  0FEB                     	;# 
  1043  0FED                     	;# 
  1044  0FEE                     	;# 
  1045  0FEF                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0008                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  000F                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  008C                     	;# 
  1077  008D                     	;# 
  1078  008E                     	;# 
  1079  008F                     	;# 
  1080  0090                     	;# 
  1081  0091                     	;# 
  1082  0092                     	;# 
  1083  0093                     	;# 
  1084  0094                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  010F                     	;# 
  1099  0110                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018F                     	;# 
  1106  0190                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  0199                     	;# 
  1118  0199                     	;# 
  1119  019A                     	;# 
  1120  019A                     	;# 
  1121  019A                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019C                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019D                     	;# 
  1131  019D                     	;# 
  1132  019D                     	;# 
  1133  019E                     	;# 
  1134  019E                     	;# 
  1135  019E                     	;# 
  1136  019F                     	;# 
  1137  019F                     	;# 
  1138  019F                     	;# 
  1139  020D                     	;# 
  1140  020F                     	;# 
  1141  0210                     	;# 
  1142  0211                     	;# 
  1143  0211                     	;# 
  1144  0212                     	;# 
  1145  0212                     	;# 
  1146  0213                     	;# 
  1147  0213                     	;# 
  1148  0214                     	;# 
  1149  0214                     	;# 
  1150  0215                     	;# 
  1151  0215                     	;# 
  1152  0215                     	;# 
  1153  0216                     	;# 
  1154  0216                     	;# 
  1155  0217                     	;# 
  1156  0217                     	;# 
  1157  0219                     	;# 
  1158  021A                     	;# 
  1159  021B                     	;# 
  1160  021C                     	;# 
  1161  021D                     	;# 
  1162  021E                     	;# 
  1163  021F                     	;# 
  1164  028C                     	;# 
  1165  028D                     	;# 
  1166  0291                     	;# 
  1167  0291                     	;# 
  1168  0292                     	;# 
  1169  0293                     	;# 
  1170  0298                     	;# 
  1171  0298                     	;# 
  1172  0299                     	;# 
  1173  029A                     	;# 
  1174  029D                     	;# 
  1175  029E                     	;# 
  1176  029F                     	;# 
  1177  030C                     	;# 
  1178  030D                     	;# 
  1179  0311                     	;# 
  1180  0311                     	;# 
  1181  0312                     	;# 
  1182  0313                     	;# 
  1183  0318                     	;# 
  1184  0318                     	;# 
  1185  0319                     	;# 
  1186  031A                     	;# 
  1187  031C                     	;# 
  1188  031C                     	;# 
  1189  031D                     	;# 
  1190  031E                     	;# 
  1191  038C                     	;# 
  1192  038D                     	;# 
  1193  0394                     	;# 
  1194  0395                     	;# 
  1195  0396                     	;# 
  1196  040C                     	;# 
  1197  040D                     	;# 
  1198  0411                     	;# 
  1199  0411                     	;# 
  1200  0412                     	;# 
  1201  0413                     	;# 
  1202  0414                     	;# 
  1203  0415                     	;# 
  1204  0416                     	;# 
  1205  0417                     	;# 
  1206  0418                     	;# 
  1207  0418                     	;# 
  1208  0419                     	;# 
  1209  041A                     	;# 
  1210  041B                     	;# 
  1211  041C                     	;# 
  1212  041D                     	;# 
  1213  041E                     	;# 
  1214  048D                     	;# 
  1215  0491                     	;# 
  1216  0491                     	;# 
  1217  0492                     	;# 
  1218  0492                     	;# 
  1219  0493                     	;# 
  1220  0493                     	;# 
  1221  0493                     	;# 
  1222  0494                     	;# 
  1223  0494                     	;# 
  1224  0495                     	;# 
  1225  0495                     	;# 
  1226  0496                     	;# 
  1227  0496                     	;# 
  1228  0497                     	;# 
  1229  0497                     	;# 
  1230  0595                     	;# 
  1231  0596                     	;# 
  1232  0597                     	;# 
  1233  059C                     	;# 
  1234  059D                     	;# 
  1235  059E                     	;# 
  1236  0611                     	;# 
  1237  0611                     	;# 
  1238  0612                     	;# 
  1239  0613                     	;# 
  1240  0614                     	;# 
  1241  0614                     	;# 
  1242  0615                     	;# 
  1243  0616                     	;# 
  1244  0617                     	;# 
  1245  0617                     	;# 
  1246  0618                     	;# 
  1247  0619                     	;# 
  1248  061A                     	;# 
  1249  061A                     	;# 
  1250  061B                     	;# 
  1251  061C                     	;# 
  1252  061D                     	;# 
  1253  061D                     	;# 
  1254  061E                     	;# 
  1255  061F                     	;# 
  1256  0FE4                     	;# 
  1257  0FE5                     	;# 
  1258  0FE6                     	;# 
  1259  0FE7                     	;# 
  1260  0FE8                     	;# 
  1261  0FE9                     	;# 
  1262  0FEA                     	;# 
  1263  0FEB                     	;# 
  1264  0FED                     	;# 
  1265  0FEE                     	;# 
  1266  0FEF                     	;# 
  1267  0000                     	;# 
  1268  0001                     	;# 
  1269  0002                     	;# 
  1270  0003                     	;# 
  1271  0004                     	;# 
  1272  0005                     	;# 
  1273  0006                     	;# 
  1274  0007                     	;# 
  1275  0008                     	;# 
  1276  0009                     	;# 
  1277  000A                     	;# 
  1278  000B                     	;# 
  1279  000C                     	;# 
  1280  000D                     	;# 
  1281  000E                     	;# 
  1282  000F                     	;# 
  1283  0010                     	;# 
  1284  0011                     	;# 
  1285  0012                     	;# 
  1286  0013                     	;# 
  1287  0014                     	;# 
  1288  0015                     	;# 
  1289  0016                     	;# 
  1290  0016                     	;# 
  1291  0017                     	;# 
  1292  0018                     	;# 
  1293  0019                     	;# 
  1294  001A                     	;# 
  1295  001B                     	;# 
  1296  001C                     	;# 
  1297  008C                     	;# 
  1298  008D                     	;# 
  1299  008E                     	;# 
  1300  008F                     	;# 
  1301  0090                     	;# 
  1302  0091                     	;# 
  1303  0092                     	;# 
  1304  0093                     	;# 
  1305  0094                     	;# 
  1306  0095                     	;# 
  1307  0096                     	;# 
  1308  0097                     	;# 
  1309  0099                     	;# 
  1310  009A                     	;# 
  1311  009B                     	;# 
  1312  009B                     	;# 
  1313  009C                     	;# 
  1314  009D                     	;# 
  1315  009E                     	;# 
  1316  010C                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  010F                     	;# 
  1320  0110                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  011D                     	;# 
  1324  018C                     	;# 
  1325  018D                     	;# 
  1326  018F                     	;# 
  1327  0190                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019C                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019D                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019F                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  020D                     	;# 
  1361  020F                     	;# 
  1362  0210                     	;# 
  1363  0211                     	;# 
  1364  0211                     	;# 
  1365  0212                     	;# 
  1366  0212                     	;# 
  1367  0213                     	;# 
  1368  0213                     	;# 
  1369  0214                     	;# 
  1370  0214                     	;# 
  1371  0215                     	;# 
  1372  0215                     	;# 
  1373  0215                     	;# 
  1374  0216                     	;# 
  1375  0216                     	;# 
  1376  0217                     	;# 
  1377  0217                     	;# 
  1378  0219                     	;# 
  1379  021A                     	;# 
  1380  021B                     	;# 
  1381  021C                     	;# 
  1382  021D                     	;# 
  1383  021E                     	;# 
  1384  021F                     	;# 
  1385  028C                     	;# 
  1386  028D                     	;# 
  1387  0291                     	;# 
  1388  0291                     	;# 
  1389  0292                     	;# 
  1390  0293                     	;# 
  1391  0298                     	;# 
  1392  0298                     	;# 
  1393  0299                     	;# 
  1394  029A                     	;# 
  1395  029D                     	;# 
  1396  029E                     	;# 
  1397  029F                     	;# 
  1398  030C                     	;# 
  1399  030D                     	;# 
  1400  0311                     	;# 
  1401  0311                     	;# 
  1402  0312                     	;# 
  1403  0313                     	;# 
  1404  0318                     	;# 
  1405  0318                     	;# 
  1406  0319                     	;# 
  1407  031A                     	;# 
  1408  031C                     	;# 
  1409  031C                     	;# 
  1410  031D                     	;# 
  1411  031E                     	;# 
  1412  038C                     	;# 
  1413  038D                     	;# 
  1414  0394                     	;# 
  1415  0395                     	;# 
  1416  0396                     	;# 
  1417  040C                     	;# 
  1418  040D                     	;# 
  1419  0411                     	;# 
  1420  0411                     	;# 
  1421  0412                     	;# 
  1422  0413                     	;# 
  1423  0414                     	;# 
  1424  0415                     	;# 
  1425  0416                     	;# 
  1426  0417                     	;# 
  1427  0418                     	;# 
  1428  0418                     	;# 
  1429  0419                     	;# 
  1430  041A                     	;# 
  1431  041B                     	;# 
  1432  041C                     	;# 
  1433  041D                     	;# 
  1434  041E                     	;# 
  1435  048D                     	;# 
  1436  0491                     	;# 
  1437  0491                     	;# 
  1438  0492                     	;# 
  1439  0492                     	;# 
  1440  0493                     	;# 
  1441  0493                     	;# 
  1442  0493                     	;# 
  1443  0494                     	;# 
  1444  0494                     	;# 
  1445  0495                     	;# 
  1446  0495                     	;# 
  1447  0496                     	;# 
  1448  0496                     	;# 
  1449  0497                     	;# 
  1450  0497                     	;# 
  1451  0595                     	;# 
  1452  0596                     	;# 
  1453  0597                     	;# 
  1454  059C                     	;# 
  1455  059D                     	;# 
  1456  059E                     	;# 
  1457  0611                     	;# 
  1458  0611                     	;# 
  1459  0612                     	;# 
  1460  0613                     	;# 
  1461  0614                     	;# 
  1462  0614                     	;# 
  1463  0615                     	;# 
  1464  0616                     	;# 
  1465  0617                     	;# 
  1466  0617                     	;# 
  1467  0618                     	;# 
  1468  0619                     	;# 
  1469  061A                     	;# 
  1470  061A                     	;# 
  1471  061B                     	;# 
  1472  061C                     	;# 
  1473  061D                     	;# 
  1474  061D                     	;# 
  1475  061E                     	;# 
  1476  061F                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  000F                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0013                     	;# 
  1508  0014                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  008F                     	;# 
  1522  0090                     	;# 
  1523  0091                     	;# 
  1524  0092                     	;# 
  1525  0093                     	;# 
  1526  0094                     	;# 
  1527  0095                     	;# 
  1528  0096                     	;# 
  1529  0097                     	;# 
  1530  0099                     	;# 
  1531  009A                     	;# 
  1532  009B                     	;# 
  1533  009B                     	;# 
  1534  009C                     	;# 
  1535  009D                     	;# 
  1536  009E                     	;# 
  1537  010C                     	;# 
  1538  010D                     	;# 
  1539  010E                     	;# 
  1540  010F                     	;# 
  1541  0110                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018F                     	;# 
  1548  0190                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0197                     	;# 
  1558  0199                     	;# 
  1559  0199                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019A                     	;# 
  1563  019A                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019C                     	;# 
  1570  019C                     	;# 
  1571  019C                     	;# 
  1572  019D                     	;# 
  1573  019D                     	;# 
  1574  019D                     	;# 
  1575  019E                     	;# 
  1576  019E                     	;# 
  1577  019E                     	;# 
  1578  019F                     	;# 
  1579  019F                     	;# 
  1580  019F                     	;# 
  1581  020D                     	;# 
  1582  020F                     	;# 
  1583  0210                     	;# 
  1584  0211                     	;# 
  1585  0211                     	;# 
  1586  0212                     	;# 
  1587  0212                     	;# 
  1588  0213                     	;# 
  1589  0213                     	;# 
  1590  0214                     	;# 
  1591  0214                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0215                     	;# 
  1595  0216                     	;# 
  1596  0216                     	;# 
  1597  0217                     	;# 
  1598  0217                     	;# 
  1599  0219                     	;# 
  1600  021A                     	;# 
  1601  021B                     	;# 
  1602  021C                     	;# 
  1603  021D                     	;# 
  1604  021E                     	;# 
  1605  021F                     	;# 
  1606  028C                     	;# 
  1607  028D                     	;# 
  1608  0291                     	;# 
  1609  0291                     	;# 
  1610  0292                     	;# 
  1611  0293                     	;# 
  1612  0298                     	;# 
  1613  0298                     	;# 
  1614  0299                     	;# 
  1615  029A                     	;# 
  1616  029D                     	;# 
  1617  029E                     	;# 
  1618  029F                     	;# 
  1619  030C                     	;# 
  1620  030D                     	;# 
  1621  0311                     	;# 
  1622  0311                     	;# 
  1623  0312                     	;# 
  1624  0313                     	;# 
  1625  0318                     	;# 
  1626  0318                     	;# 
  1627  0319                     	;# 
  1628  031A                     	;# 
  1629  031C                     	;# 
  1630  031C                     	;# 
  1631  031D                     	;# 
  1632  031E                     	;# 
  1633  038C                     	;# 
  1634  038D                     	;# 
  1635  0394                     	;# 
  1636  0395                     	;# 
  1637  0396                     	;# 
  1638  040C                     	;# 
  1639  040D                     	;# 
  1640  0411                     	;# 
  1641  0411                     	;# 
  1642  0412                     	;# 
  1643  0413                     	;# 
  1644  0414                     	;# 
  1645  0415                     	;# 
  1646  0416                     	;# 
  1647  0417                     	;# 
  1648  0418                     	;# 
  1649  0418                     	;# 
  1650  0419                     	;# 
  1651  041A                     	;# 
  1652  041B                     	;# 
  1653  041C                     	;# 
  1654  041D                     	;# 
  1655  041E                     	;# 
  1656  048D                     	;# 
  1657  0491                     	;# 
  1658  0491                     	;# 
  1659  0492                     	;# 
  1660  0492                     	;# 
  1661  0493                     	;# 
  1662  0493                     	;# 
  1663  0493                     	;# 
  1664  0494                     	;# 
  1665  0494                     	;# 
  1666  0495                     	;# 
  1667  0495                     	;# 
  1668  0496                     	;# 
  1669  0496                     	;# 
  1670  0497                     	;# 
  1671  0497                     	;# 
  1672  0595                     	;# 
  1673  0596                     	;# 
  1674  0597                     	;# 
  1675  059C                     	;# 
  1676  059D                     	;# 
  1677  059E                     	;# 
  1678  0611                     	;# 
  1679  0611                     	;# 
  1680  0612                     	;# 
  1681  0613                     	;# 
  1682  0614                     	;# 
  1683  0614                     	;# 
  1684  0615                     	;# 
  1685  0616                     	;# 
  1686  0617                     	;# 
  1687  0617                     	;# 
  1688  0618                     	;# 
  1689  0619                     	;# 
  1690  061A                     	;# 
  1691  061A                     	;# 
  1692  061B                     	;# 
  1693  061C                     	;# 
  1694  061D                     	;# 
  1695  061D                     	;# 
  1696  061E                     	;# 
  1697  061F                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  000F                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0013                     	;# 
  1729  0014                     	;# 
  1730  0015                     	;# 
  1731  0016                     	;# 
  1732  0016                     	;# 
  1733  0017                     	;# 
  1734  0018                     	;# 
  1735  0019                     	;# 
  1736  001A                     	;# 
  1737  001B                     	;# 
  1738  001C                     	;# 
  1739  008C                     	;# 
  1740  008D                     	;# 
  1741  008E                     	;# 
  1742  008F                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0093                     	;# 
  1747  0094                     	;# 
  1748  0095                     	;# 
  1749  0096                     	;# 
  1750  0097                     	;# 
  1751  0099                     	;# 
  1752  009A                     	;# 
  1753  009B                     	;# 
  1754  009B                     	;# 
  1755  009C                     	;# 
  1756  009D                     	;# 
  1757  009E                     	;# 
  1758  010C                     	;# 
  1759  010D                     	;# 
  1760  010E                     	;# 
  1761  010F                     	;# 
  1762  0110                     	;# 
  1763  0116                     	;# 
  1764  0117                     	;# 
  1765  011D                     	;# 
  1766  018C                     	;# 
  1767  018D                     	;# 
  1768  018F                     	;# 
  1769  0190                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  0199                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019A                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019B                     	;# 
  1790  019C                     	;# 
  1791  019C                     	;# 
  1792  019C                     	;# 
  1793  019D                     	;# 
  1794  019D                     	;# 
  1795  019D                     	;# 
  1796  019E                     	;# 
  1797  019E                     	;# 
  1798  019E                     	;# 
  1799  019F                     	;# 
  1800  019F                     	;# 
  1801  019F                     	;# 
  1802  020D                     	;# 
  1803  020F                     	;# 
  1804  0210                     	;# 
  1805  0211                     	;# 
  1806  0211                     	;# 
  1807  0212                     	;# 
  1808  0212                     	;# 
  1809  0213                     	;# 
  1810  0213                     	;# 
  1811  0214                     	;# 
  1812  0214                     	;# 
  1813  0215                     	;# 
  1814  0215                     	;# 
  1815  0215                     	;# 
  1816  0216                     	;# 
  1817  0216                     	;# 
  1818  0217                     	;# 
  1819  0217                     	;# 
  1820  0219                     	;# 
  1821  021A                     	;# 
  1822  021B                     	;# 
  1823  021C                     	;# 
  1824  021D                     	;# 
  1825  021E                     	;# 
  1826  021F                     	;# 
  1827  028C                     	;# 
  1828  028D                     	;# 
  1829  0291                     	;# 
  1830  0291                     	;# 
  1831  0292                     	;# 
  1832  0293                     	;# 
  1833  0298                     	;# 
  1834  0298                     	;# 
  1835  0299                     	;# 
  1836  029A                     	;# 
  1837  029D                     	;# 
  1838  029E                     	;# 
  1839  029F                     	;# 
  1840  030C                     	;# 
  1841  030D                     	;# 
  1842  0311                     	;# 
  1843  0311                     	;# 
  1844  0312                     	;# 
  1845  0313                     	;# 
  1846  0318                     	;# 
  1847  0318                     	;# 
  1848  0319                     	;# 
  1849  031A                     	;# 
  1850  031C                     	;# 
  1851  031C                     	;# 
  1852  031D                     	;# 
  1853  031E                     	;# 
  1854  038C                     	;# 
  1855  038D                     	;# 
  1856  0394                     	;# 
  1857  0395                     	;# 
  1858  0396                     	;# 
  1859  040C                     	;# 
  1860  040D                     	;# 
  1861  0411                     	;# 
  1862  0411                     	;# 
  1863  0412                     	;# 
  1864  0413                     	;# 
  1865  0414                     	;# 
  1866  0415                     	;# 
  1867  0416                     	;# 
  1868  0417                     	;# 
  1869  0418                     	;# 
  1870  0418                     	;# 
  1871  0419                     	;# 
  1872  041A                     	;# 
  1873  041B                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  048D                     	;# 
  1878  0491                     	;# 
  1879  0491                     	;# 
  1880  0492                     	;# 
  1881  0492                     	;# 
  1882  0493                     	;# 
  1883  0493                     	;# 
  1884  0493                     	;# 
  1885  0494                     	;# 
  1886  0494                     	;# 
  1887  0495                     	;# 
  1888  0495                     	;# 
  1889  0496                     	;# 
  1890  0496                     	;# 
  1891  0497                     	;# 
  1892  0497                     	;# 
  1893  0595                     	;# 
  1894  0596                     	;# 
  1895  0597                     	;# 
  1896  059C                     	;# 
  1897  059D                     	;# 
  1898  059E                     	;# 
  1899  0611                     	;# 
  1900  0611                     	;# 
  1901  0612                     	;# 
  1902  0613                     	;# 
  1903  0614                     	;# 
  1904  0614                     	;# 
  1905  0615                     	;# 
  1906  0616                     	;# 
  1907  0617                     	;# 
  1908  0617                     	;# 
  1909  0618                     	;# 
  1910  0619                     	;# 
  1911  061A                     	;# 
  1912  061A                     	;# 
  1913  061B                     	;# 
  1914  061C                     	;# 
  1915  061D                     	;# 
  1916  061D                     	;# 
  1917  061E                     	;# 
  1918  061F                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930  0000                     	;# 
  1931  0001                     	;# 
  1932  0002                     	;# 
  1933  0003                     	;# 
  1934  0004                     	;# 
  1935  0005                     	;# 
  1936  0006                     	;# 
  1937  0007                     	;# 
  1938  0008                     	;# 
  1939  0009                     	;# 
  1940  000A                     	;# 
  1941  000B                     	;# 
  1942  000C                     	;# 
  1943  000D                     	;# 
  1944  000E                     	;# 
  1945  000F                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0013                     	;# 
  1950  0014                     	;# 
  1951  0015                     	;# 
  1952  0016                     	;# 
  1953  0016                     	;# 
  1954  0017                     	;# 
  1955  0018                     	;# 
  1956  0019                     	;# 
  1957  001A                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  008C                     	;# 
  1961  008D                     	;# 
  1962  008E                     	;# 
  1963  008F                     	;# 
  1964  0090                     	;# 
  1965  0091                     	;# 
  1966  0092                     	;# 
  1967  0093                     	;# 
  1968  0094                     	;# 
  1969  0095                     	;# 
  1970  0096                     	;# 
  1971  0097                     	;# 
  1972  0099                     	;# 
  1973  009A                     	;# 
  1974  009B                     	;# 
  1975  009B                     	;# 
  1976  009C                     	;# 
  1977  009D                     	;# 
  1978  009E                     	;# 
  1979  010C                     	;# 
  1980  010D                     	;# 
  1981  010E                     	;# 
  1982  010F                     	;# 
  1983  0110                     	;# 
  1984  0116                     	;# 
  1985  0117                     	;# 
  1986  011D                     	;# 
  1987  018C                     	;# 
  1988  018D                     	;# 
  1989  018F                     	;# 
  1990  0190                     	;# 
  1991  0191                     	;# 
  1992  0191                     	;# 
  1993  0192                     	;# 
  1994  0193                     	;# 
  1995  0193                     	;# 
  1996  0194                     	;# 
  1997  0195                     	;# 
  1998  0196                     	;# 
  1999  0197                     	;# 
  2000  0199                     	;# 
  2001  0199                     	;# 
  2002  0199                     	;# 
  2003  019A                     	;# 
  2004  019A                     	;# 
  2005  019A                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019C                     	;# 
  2014  019D                     	;# 
  2015  019D                     	;# 
  2016  019D                     	;# 
  2017  019E                     	;# 
  2018  019E                     	;# 
  2019  019E                     	;# 
  2020  019F                     	;# 
  2021  019F                     	;# 
  2022  019F                     	;# 
  2023  020D                     	;# 
  2024  020F                     	;# 
  2025  0210                     	;# 
  2026  0211                     	;# 
  2027  0211                     	;# 
  2028  0212                     	;# 
  2029  0212                     	;# 
  2030  0213                     	;# 
  2031  0213                     	;# 
  2032  0214                     	;# 
  2033  0214                     	;# 
  2034  0215                     	;# 
  2035  0215                     	;# 
  2036  0215                     	;# 
  2037  0216                     	;# 
  2038  0216                     	;# 
  2039  0217                     	;# 
  2040  0217                     	;# 
  2041  0219                     	;# 
  2042  021A                     	;# 
  2043  021B                     	;# 
  2044  021C                     	;# 
  2045  021D                     	;# 
  2046  021E                     	;# 
  2047  021F                     	;# 
  2048  028C                     	;# 
  2049  028D                     	;# 
  2050  0291                     	;# 
  2051  0291                     	;# 
  2052  0292                     	;# 
  2053  0293                     	;# 
  2054  0298                     	;# 
  2055  0298                     	;# 
  2056  0299                     	;# 
  2057  029A                     	;# 
  2058  029D                     	;# 
  2059  029E                     	;# 
  2060  029F                     	;# 
  2061  030C                     	;# 
  2062  030D                     	;# 
  2063  0311                     	;# 
  2064  0311                     	;# 
  2065  0312                     	;# 
  2066  0313                     	;# 
  2067  0318                     	;# 
  2068  0318                     	;# 
  2069  0319                     	;# 
  2070  031A                     	;# 
  2071  031C                     	;# 
  2072  031C                     	;# 
  2073  031D                     	;# 
  2074  031E                     	;# 
  2075  038C                     	;# 
  2076  038D                     	;# 
  2077  0394                     	;# 
  2078  0395                     	;# 
  2079  0396                     	;# 
  2080  040C                     	;# 
  2081  040D                     	;# 
  2082  0411                     	;# 
  2083  0411                     	;# 
  2084  0412                     	;# 
  2085  0413                     	;# 
  2086  0414                     	;# 
  2087  0415                     	;# 
  2088  0416                     	;# 
  2089  0417                     	;# 
  2090  0418                     	;# 
  2091  0418                     	;# 
  2092  0419                     	;# 
  2093  041A                     	;# 
  2094  041B                     	;# 
  2095  041C                     	;# 
  2096  041D                     	;# 
  2097  041E                     	;# 
  2098  048D                     	;# 
  2099  0491                     	;# 
  2100  0491                     	;# 
  2101  0492                     	;# 
  2102  0492                     	;# 
  2103  0493                     	;# 
  2104  0493                     	;# 
  2105  0493                     	;# 
  2106  0494                     	;# 
  2107  0494                     	;# 
  2108  0495                     	;# 
  2109  0495                     	;# 
  2110  0496                     	;# 
  2111  0496                     	;# 
  2112  0497                     	;# 
  2113  0497                     	;# 
  2114  0595                     	;# 
  2115  0596                     	;# 
  2116  0597                     	;# 
  2117  059C                     	;# 
  2118  059D                     	;# 
  2119  059E                     	;# 
  2120  0611                     	;# 
  2121  0611                     	;# 
  2122  0612                     	;# 
  2123  0613                     	;# 
  2124  0614                     	;# 
  2125  0614                     	;# 
  2126  0615                     	;# 
  2127  0616                     	;# 
  2128  0617                     	;# 
  2129  0617                     	;# 
  2130  0618                     	;# 
  2131  0619                     	;# 
  2132  061A                     	;# 
  2133  061A                     	;# 
  2134  061B                     	;# 
  2135  061C                     	;# 
  2136  061D                     	;# 
  2137  061D                     	;# 
  2138  061E                     	;# 
  2139  061F                     	;# 
  2140  0FE4                     	;# 
  2141  0FE5                     	;# 
  2142  0FE6                     	;# 
  2143  0FE7                     	;# 
  2144  0FE8                     	;# 
  2145  0FE9                     	;# 
  2146  0FEA                     	;# 
  2147  0FEB                     	;# 
  2148  0FED                     	;# 
  2149  0FEE                     	;# 
  2150  0FEF                     	;# 
  2151  0000                     	;# 
  2152  0001                     	;# 
  2153  0002                     	;# 
  2154  0003                     	;# 
  2155  0004                     	;# 
  2156  0005                     	;# 
  2157  0006                     	;# 
  2158  0007                     	;# 
  2159  0008                     	;# 
  2160  0009                     	;# 
  2161  000A                     	;# 
  2162  000B                     	;# 
  2163  000C                     	;# 
  2164  000D                     	;# 
  2165  000E                     	;# 
  2166  000F                     	;# 
  2167  0010                     	;# 
  2168  0011                     	;# 
  2169  0012                     	;# 
  2170  0013                     	;# 
  2171  0014                     	;# 
  2172  0015                     	;# 
  2173  0016                     	;# 
  2174  0016                     	;# 
  2175  0017                     	;# 
  2176  0018                     	;# 
  2177  0019                     	;# 
  2178  001A                     	;# 
  2179  001B                     	;# 
  2180  001C                     	;# 
  2181  008C                     	;# 
  2182  008D                     	;# 
  2183  008E                     	;# 
  2184  008F                     	;# 
  2185  0090                     	;# 
  2186  0091                     	;# 
  2187  0092                     	;# 
  2188  0093                     	;# 
  2189  0094                     	;# 
  2190  0095                     	;# 
  2191  0096                     	;# 
  2192  0097                     	;# 
  2193  0099                     	;# 
  2194  009A                     	;# 
  2195  009B                     	;# 
  2196  009B                     	;# 
  2197  009C                     	;# 
  2198  009D                     	;# 
  2199  009E                     	;# 
  2200  010C                     	;# 
  2201  010D                     	;# 
  2202  010E                     	;# 
  2203  010F                     	;# 
  2204  0110                     	;# 
  2205  0116                     	;# 
  2206  0117                     	;# 
  2207  011D                     	;# 
  2208  018C                     	;# 
  2209  018D                     	;# 
  2210  018F                     	;# 
  2211  0190                     	;# 
  2212  0191                     	;# 
  2213  0191                     	;# 
  2214  0192                     	;# 
  2215  0193                     	;# 
  2216  0193                     	;# 
  2217  0194                     	;# 
  2218  0195                     	;# 
  2219  0196                     	;# 
  2220  0197                     	;# 
  2221  0199                     	;# 
  2222  0199                     	;# 
  2223  0199                     	;# 
  2224  019A                     	;# 
  2225  019A                     	;# 
  2226  019A                     	;# 
  2227  019B                     	;# 
  2228  019B                     	;# 
  2229  019B                     	;# 
  2230  019B                     	;# 
  2231  019B                     	;# 
  2232  019C                     	;# 
  2233  019C                     	;# 
  2234  019C                     	;# 
  2235  019D                     	;# 
  2236  019D                     	;# 
  2237  019D                     	;# 
  2238  019E                     	;# 
  2239  019E                     	;# 
  2240  019E                     	;# 
  2241  019F                     	;# 
  2242  019F                     	;# 
  2243  019F                     	;# 
  2244  020D                     	;# 
  2245  020F                     	;# 
  2246  0210                     	;# 
  2247  0211                     	;# 
  2248  0211                     	;# 
  2249  0212                     	;# 
  2250  0212                     	;# 
  2251  0213                     	;# 
  2252  0213                     	;# 
  2253  0214                     	;# 
  2254  0214                     	;# 
  2255  0215                     	;# 
  2256  0215                     	;# 
  2257  0215                     	;# 
  2258  0216                     	;# 
  2259  0216                     	;# 
  2260  0217                     	;# 
  2261  0217                     	;# 
  2262  0219                     	;# 
  2263  021A                     	;# 
  2264  021B                     	;# 
  2265  021C                     	;# 
  2266  021D                     	;# 
  2267  021E                     	;# 
  2268  021F                     	;# 
  2269  028C                     	;# 
  2270  028D                     	;# 
  2271  0291                     	;# 
  2272  0291                     	;# 
  2273  0292                     	;# 
  2274  0293                     	;# 
  2275  0298                     	;# 
  2276  0298                     	;# 
  2277  0299                     	;# 
  2278  029A                     	;# 
  2279  029D                     	;# 
  2280  029E                     	;# 
  2281  029F                     	;# 
  2282  030C                     	;# 
  2283  030D                     	;# 
  2284  0311                     	;# 
  2285  0311                     	;# 
  2286  0312                     	;# 
  2287  0313                     	;# 
  2288  0318                     	;# 
  2289  0318                     	;# 
  2290  0319                     	;# 
  2291  031A                     	;# 
  2292  031C                     	;# 
  2293  031C                     	;# 
  2294  031D                     	;# 
  2295  031E                     	;# 
  2296  038C                     	;# 
  2297  038D                     	;# 
  2298  0394                     	;# 
  2299  0395                     	;# 
  2300  0396                     	;# 
  2301  040C                     	;# 
  2302  040D                     	;# 
  2303  0411                     	;# 
  2304  0411                     	;# 
  2305  0412                     	;# 
  2306  0413                     	;# 
  2307  0414                     	;# 
  2308  0415                     	;# 
  2309  0416                     	;# 
  2310  0417                     	;# 
  2311  0418                     	;# 
  2312  0418                     	;# 
  2313  0419                     	;# 
  2314  041A                     	;# 
  2315  041B                     	;# 
  2316  041C                     	;# 
  2317  041D                     	;# 
  2318  041E                     	;# 
  2319  048D                     	;# 
  2320  0491                     	;# 
  2321  0491                     	;# 
  2322  0492                     	;# 
  2323  0492                     	;# 
  2324  0493                     	;# 
  2325  0493                     	;# 
  2326  0493                     	;# 
  2327  0494                     	;# 
  2328  0494                     	;# 
  2329  0495                     	;# 
  2330  0495                     	;# 
  2331  0496                     	;# 
  2332  0496                     	;# 
  2333  0497                     	;# 
  2334  0497                     	;# 
  2335  0595                     	;# 
  2336  0596                     	;# 
  2337  0597                     	;# 
  2338  059C                     	;# 
  2339  059D                     	;# 
  2340  059E                     	;# 
  2341  0611                     	;# 
  2342  0611                     	;# 
  2343  0612                     	;# 
  2344  0613                     	;# 
  2345  0614                     	;# 
  2346  0614                     	;# 
  2347  0615                     	;# 
  2348  0616                     	;# 
  2349  0617                     	;# 
  2350  0617                     	;# 
  2351  0618                     	;# 
  2352  0619                     	;# 
  2353  061A                     	;# 
  2354  061A                     	;# 
  2355  061B                     	;# 
  2356  061C                     	;# 
  2357  061D                     	;# 
  2358  061D                     	;# 
  2359  061E                     	;# 
  2360  061F                     	;# 
  2361  0FE4                     	;# 
  2362  0FE5                     	;# 
  2363  0FE6                     	;# 
  2364  0FE7                     	;# 
  2365  0FE8                     	;# 
  2366  0FE9                     	;# 
  2367  0FEA                     	;# 
  2368  0FEB                     	;# 
  2369  0FED                     	;# 
  2370  0FEE                     	;# 
  2371  0FEF                     	;# 
  2372  0000                     	;# 
  2373  0001                     	;# 
  2374  0002                     	;# 
  2375  0003                     	;# 
  2376  0004                     	;# 
  2377  0005                     	;# 
  2378  0006                     	;# 
  2379  0007                     	;# 
  2380  0008                     	;# 
  2381  0009                     	;# 
  2382  000A                     	;# 
  2383  000B                     	;# 
  2384  000C                     	;# 
  2385  000D                     	;# 
  2386  000E                     	;# 
  2387  000F                     	;# 
  2388  0010                     	;# 
  2389  0011                     	;# 
  2390  0012                     	;# 
  2391  0013                     	;# 
  2392  0014                     	;# 
  2393  0015                     	;# 
  2394  0016                     	;# 
  2395  0016                     	;# 
  2396  0017                     	;# 
  2397  0018                     	;# 
  2398  0019                     	;# 
  2399  001A                     	;# 
  2400  001B                     	;# 
  2401  001C                     	;# 
  2402  008C                     	;# 
  2403  008D                     	;# 
  2404  008E                     	;# 
  2405  008F                     	;# 
  2406  0090                     	;# 
  2407  0091                     	;# 
  2408  0092                     	;# 
  2409  0093                     	;# 
  2410  0094                     	;# 
  2411  0095                     	;# 
  2412  0096                     	;# 
  2413  0097                     	;# 
  2414  0099                     	;# 
  2415  009A                     	;# 
  2416  009B                     	;# 
  2417  009B                     	;# 
  2418  009C                     	;# 
  2419  009D                     	;# 
  2420  009E                     	;# 
  2421  010C                     	;# 
  2422  010D                     	;# 
  2423  010E                     	;# 
  2424  010F                     	;# 
  2425  0110                     	;# 
  2426  0116                     	;# 
  2427  0117                     	;# 
  2428  011D                     	;# 
  2429  018C                     	;# 
  2430  018D                     	;# 
  2431  018F                     	;# 
  2432  0190                     	;# 
  2433  0191                     	;# 
  2434  0191                     	;# 
  2435  0192                     	;# 
  2436  0193                     	;# 
  2437  0193                     	;# 
  2438  0194                     	;# 
  2439  0195                     	;# 
  2440  0196                     	;# 
  2441  0197                     	;# 
  2442  0199                     	;# 
  2443  0199                     	;# 
  2444  0199                     	;# 
  2445  019A                     	;# 
  2446  019A                     	;# 
  2447  019A                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019B                     	;# 
  2452  019B                     	;# 
  2453  019C                     	;# 
  2454  019C                     	;# 
  2455  019C                     	;# 
  2456  019D                     	;# 
  2457  019D                     	;# 
  2458  019D                     	;# 
  2459  019E                     	;# 
  2460  019E                     	;# 
  2461  019E                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  020D                     	;# 
  2466  020F                     	;# 
  2467  0210                     	;# 
  2468  0211                     	;# 
  2469  0211                     	;# 
  2470  0212                     	;# 
  2471  0212                     	;# 
  2472  0213                     	;# 
  2473  0213                     	;# 
  2474  0214                     	;# 
  2475  0214                     	;# 
  2476  0215                     	;# 
  2477  0215                     	;# 
  2478  0215                     	;# 
  2479  0216                     	;# 
  2480  0216                     	;# 
  2481  0217                     	;# 
  2482  0217                     	;# 
  2483  0219                     	;# 
  2484  021A                     	;# 
  2485  021B                     	;# 
  2486  021C                     	;# 
  2487  021D                     	;# 
  2488  021E                     	;# 
  2489  021F                     	;# 
  2490  028C                     	;# 
  2491  028D                     	;# 
  2492  0291                     	;# 
  2493  0291                     	;# 
  2494  0292                     	;# 
  2495  0293                     	;# 
  2496  0298                     	;# 
  2497  0298                     	;# 
  2498  0299                     	;# 
  2499  029A                     	;# 
  2500  029D                     	;# 
  2501  029E                     	;# 
  2502  029F                     	;# 
  2503  030C                     	;# 
  2504  030D                     	;# 
  2505  0311                     	;# 
  2506  0311                     	;# 
  2507  0312                     	;# 
  2508  0313                     	;# 
  2509  0318                     	;# 
  2510  0318                     	;# 
  2511  0319                     	;# 
  2512  031A                     	;# 
  2513  031C                     	;# 
  2514  031C                     	;# 
  2515  031D                     	;# 
  2516  031E                     	;# 
  2517  038C                     	;# 
  2518  038D                     	;# 
  2519  0394                     	;# 
  2520  0395                     	;# 
  2521  0396                     	;# 
  2522  040C                     	;# 
  2523  040D                     	;# 
  2524  0411                     	;# 
  2525  0411                     	;# 
  2526  0412                     	;# 
  2527  0413                     	;# 
  2528  0414                     	;# 
  2529  0415                     	;# 
  2530  0416                     	;# 
  2531  0417                     	;# 
  2532  0418                     	;# 
  2533  0418                     	;# 
  2534  0419                     	;# 
  2535  041A                     	;# 
  2536  041B                     	;# 
  2537  041C                     	;# 
  2538  041D                     	;# 
  2539  041E                     	;# 
  2540  048D                     	;# 
  2541  0491                     	;# 
  2542  0491                     	;# 
  2543  0492                     	;# 
  2544  0492                     	;# 
  2545  0493                     	;# 
  2546  0493                     	;# 
  2547  0493                     	;# 
  2548  0494                     	;# 
  2549  0494                     	;# 
  2550  0495                     	;# 
  2551  0495                     	;# 
  2552  0496                     	;# 
  2553  0496                     	;# 
  2554  0497                     	;# 
  2555  0497                     	;# 
  2556  0595                     	;# 
  2557  0596                     	;# 
  2558  0597                     	;# 
  2559  059C                     	;# 
  2560  059D                     	;# 
  2561  059E                     	;# 
  2562  0611                     	;# 
  2563  0611                     	;# 
  2564  0612                     	;# 
  2565  0613                     	;# 
  2566  0614                     	;# 
  2567  0614                     	;# 
  2568  0615                     	;# 
  2569  0616                     	;# 
  2570  0617                     	;# 
  2571  0617                     	;# 
  2572  0618                     	;# 
  2573  0619                     	;# 
  2574  061A                     	;# 
  2575  061A                     	;# 
  2576  061B                     	;# 
  2577  061C                     	;# 
  2578  061D                     	;# 
  2579  061D                     	;# 
  2580  061E                     	;# 
  2581  061F                     	;# 
  2582  0FE4                     	;# 
  2583  0FE5                     	;# 
  2584  0FE6                     	;# 
  2585  0FE7                     	;# 
  2586  0FE8                     	;# 
  2587  0FE9                     	;# 
  2588  0FEA                     	;# 
  2589  0FEB                     	;# 
  2590  0FED                     	;# 
  2591  0FEE                     	;# 
  2592  0FEF                     	;# 
  2593  0000                     	;# 
  2594  0001                     	;# 
  2595  0002                     	;# 
  2596  0003                     	;# 
  2597  0004                     	;# 
  2598  0005                     	;# 
  2599  0006                     	;# 
  2600  0007                     	;# 
  2601  0008                     	;# 
  2602  0009                     	;# 
  2603  000A                     	;# 
  2604  000B                     	;# 
  2605  000C                     	;# 
  2606  000D                     	;# 
  2607  000E                     	;# 
  2608  000F                     	;# 
  2609  0010                     	;# 
  2610  0011                     	;# 
  2611  0012                     	;# 
  2612  0013                     	;# 
  2613  0014                     	;# 
  2614  0015                     	;# 
  2615  0016                     	;# 
  2616  0016                     	;# 
  2617  0017                     	;# 
  2618  0018                     	;# 
  2619  0019                     	;# 
  2620  001A                     	;# 
  2621  001B                     	;# 
  2622  001C                     	;# 
  2623  008C                     	;# 
  2624  008D                     	;# 
  2625  008E                     	;# 
  2626  008F                     	;# 
  2627  0090                     	;# 
  2628  0091                     	;# 
  2629  0092                     	;# 
  2630  0093                     	;# 
  2631  0094                     	;# 
  2632  0095                     	;# 
  2633  0096                     	;# 
  2634  0097                     	;# 
  2635  0099                     	;# 
  2636  009A                     	;# 
  2637  009B                     	;# 
  2638  009B                     	;# 
  2639  009C                     	;# 
  2640  009D                     	;# 
  2641  009E                     	;# 
  2642  010C                     	;# 
  2643  010D                     	;# 
  2644  010E                     	;# 
  2645  010F                     	;# 
  2646  0110                     	;# 
  2647  0116                     	;# 
  2648  0117                     	;# 
  2649  011D                     	;# 
  2650  018C                     	;# 
  2651  018D                     	;# 
  2652  018F                     	;# 
  2653  0190                     	;# 
  2654  0191                     	;# 
  2655  0191                     	;# 
  2656  0192                     	;# 
  2657  0193                     	;# 
  2658  0193                     	;# 
  2659  0194                     	;# 
  2660  0195                     	;# 
  2661  0196                     	;# 
  2662  0197                     	;# 
  2663  0199                     	;# 
  2664  0199                     	;# 
  2665  0199                     	;# 
  2666  019A                     	;# 
  2667  019A                     	;# 
  2668  019A                     	;# 
  2669  019B                     	;# 
  2670  019B                     	;# 
  2671  019B                     	;# 
  2672  019B                     	;# 
  2673  019B                     	;# 
  2674  019C                     	;# 
  2675  019C                     	;# 
  2676  019C                     	;# 
  2677  019D                     	;# 
  2678  019D                     	;# 
  2679  019D                     	;# 
  2680  019E                     	;# 
  2681  019E                     	;# 
  2682  019E                     	;# 
  2683  019F                     	;# 
  2684  019F                     	;# 
  2685  019F                     	;# 
  2686  020D                     	;# 
  2687  020F                     	;# 
  2688  0210                     	;# 
  2689  0211                     	;# 
  2690  0211                     	;# 
  2691  0212                     	;# 
  2692  0212                     	;# 
  2693  0213                     	;# 
  2694  0213                     	;# 
  2695  0214                     	;# 
  2696  0214                     	;# 
  2697  0215                     	;# 
  2698  0215                     	;# 
  2699  0215                     	;# 
  2700  0216                     	;# 
  2701  0216                     	;# 
  2702  0217                     	;# 
  2703  0217                     	;# 
  2704  0219                     	;# 
  2705  021A                     	;# 
  2706  021B                     	;# 
  2707  021C                     	;# 
  2708  021D                     	;# 
  2709  021E                     	;# 
  2710  021F                     	;# 
  2711  028C                     	;# 
  2712  028D                     	;# 
  2713  0291                     	;# 
  2714  0291                     	;# 
  2715  0292                     	;# 
  2716  0293                     	;# 
  2717  0298                     	;# 
  2718  0298                     	;# 
  2719  0299                     	;# 
  2720  029A                     	;# 
  2721  029D                     	;# 
  2722  029E                     	;# 
  2723  029F                     	;# 
  2724  030C                     	;# 
  2725  030D                     	;# 
  2726  0311                     	;# 
  2727  0311                     	;# 
  2728  0312                     	;# 
  2729  0313                     	;# 
  2730  0318                     	;# 
  2731  0318                     	;# 
  2732  0319                     	;# 
  2733  031A                     	;# 
  2734  031C                     	;# 
  2735  031C                     	;# 
  2736  031D                     	;# 
  2737  031E                     	;# 
  2738  038C                     	;# 
  2739  038D                     	;# 
  2740  0394                     	;# 
  2741  0395                     	;# 
  2742  0396                     	;# 
  2743  040C                     	;# 
  2744  040D                     	;# 
  2745  0411                     	;# 
  2746  0411                     	;# 
  2747  0412                     	;# 
  2748  0413                     	;# 
  2749  0414                     	;# 
  2750  0415                     	;# 
  2751  0416                     	;# 
  2752  0417                     	;# 
  2753  0418                     	;# 
  2754  0418                     	;# 
  2755  0419                     	;# 
  2756  041A                     	;# 
  2757  041B                     	;# 
  2758  041C                     	;# 
  2759  041D                     	;# 
  2760  041E                     	;# 
  2761  048D                     	;# 
  2762  0491                     	;# 
  2763  0491                     	;# 
  2764  0492                     	;# 
  2765  0492                     	;# 
  2766  0493                     	;# 
  2767  0493                     	;# 
  2768  0493                     	;# 
  2769  0494                     	;# 
  2770  0494                     	;# 
  2771  0495                     	;# 
  2772  0495                     	;# 
  2773  0496                     	;# 
  2774  0496                     	;# 
  2775  0497                     	;# 
  2776  0497                     	;# 
  2777  0595                     	;# 
  2778  0596                     	;# 
  2779  0597                     	;# 
  2780  059C                     	;# 
  2781  059D                     	;# 
  2782  059E                     	;# 
  2783  0611                     	;# 
  2784  0611                     	;# 
  2785  0612                     	;# 
  2786  0613                     	;# 
  2787  0614                     	;# 
  2788  0614                     	;# 
  2789  0615                     	;# 
  2790  0616                     	;# 
  2791  0617                     	;# 
  2792  0617                     	;# 
  2793  0618                     	;# 
  2794  0619                     	;# 
  2795  061A                     	;# 
  2796  061A                     	;# 
  2797  061B                     	;# 
  2798  061C                     	;# 
  2799  061D                     	;# 
  2800  061D                     	;# 
  2801  061E                     	;# 
  2802  061F                     	;# 
  2803  0FE4                     	;# 
  2804  0FE5                     	;# 
  2805  0FE6                     	;# 
  2806  0FE7                     	;# 
  2807  0FE8                     	;# 
  2808  0FE9                     	;# 
  2809  0FEA                     	;# 
  2810  0FEB                     	;# 
  2811  0FED                     	;# 
  2812  0FEE                     	;# 
  2813  0FEF                     	;# 
  2814  0000                     	;# 
  2815  0001                     	;# 
  2816  0002                     	;# 
  2817  0003                     	;# 
  2818  0004                     	;# 
  2819  0005                     	;# 
  2820  0006                     	;# 
  2821  0007                     	;# 
  2822  0008                     	;# 
  2823  0009                     	;# 
  2824  000A                     	;# 
  2825  000B                     	;# 
  2826  000C                     	;# 
  2827  000D                     	;# 
  2828  000E                     	;# 
  2829  000F                     	;# 
  2830  0010                     	;# 
  2831  0011                     	;# 
  2832  0012                     	;# 
  2833  0013                     	;# 
  2834  0014                     	;# 
  2835  0015                     	;# 
  2836  0016                     	;# 
  2837  0016                     	;# 
  2838  0017                     	;# 
  2839  0018                     	;# 
  2840  0019                     	;# 
  2841  001A                     	;# 
  2842  001B                     	;# 
  2843  001C                     	;# 
  2844  008C                     	;# 
  2845  008D                     	;# 
  2846  008E                     	;# 
  2847  008F                     	;# 
  2848  0090                     	;# 
  2849  0091                     	;# 
  2850  0092                     	;# 
  2851  0093                     	;# 
  2852  0094                     	;# 
  2853  0095                     	;# 
  2854  0096                     	;# 
  2855  0097                     	;# 
  2856  0099                     	;# 
  2857  009A                     	;# 
  2858  009B                     	;# 
  2859  009B                     	;# 
  2860  009C                     	;# 
  2861  009D                     	;# 
  2862  009E                     	;# 
  2863  010C                     	;# 
  2864  010D                     	;# 
  2865  010E                     	;# 
  2866  010F                     	;# 
  2867  0110                     	;# 
  2868  0116                     	;# 
  2869  0117                     	;# 
  2870  011D                     	;# 
  2871  018C                     	;# 
  2872  018D                     	;# 
  2873  018F                     	;# 
  2874  0190                     	;# 
  2875  0191                     	;# 
  2876  0191                     	;# 
  2877  0192                     	;# 
  2878  0193                     	;# 
  2879  0193                     	;# 
  2880  0194                     	;# 
  2881  0195                     	;# 
  2882  0196                     	;# 
  2883  0197                     	;# 
  2884  0199                     	;# 
  2885  0199                     	;# 
  2886  0199                     	;# 
  2887  019A                     	;# 
  2888  019A                     	;# 
  2889  019A                     	;# 
  2890  019B                     	;# 
  2891  019B                     	;# 
  2892  019B                     	;# 
  2893  019B                     	;# 
  2894  019B                     	;# 
  2895  019C                     	;# 
  2896  019C                     	;# 
  2897  019C                     	;# 
  2898  019D                     	;# 
  2899  019D                     	;# 
  2900  019D                     	;# 
  2901  019E                     	;# 
  2902  019E                     	;# 
  2903  019E                     	;# 
  2904  019F                     	;# 
  2905  019F                     	;# 
  2906  019F                     	;# 
  2907  020D                     	;# 
  2908  020F                     	;# 
  2909  0210                     	;# 
  2910  0211                     	;# 
  2911  0211                     	;# 
  2912  0212                     	;# 
  2913  0212                     	;# 
  2914  0213                     	;# 
  2915  0213                     	;# 
  2916  0214                     	;# 
  2917  0214                     	;# 
  2918  0215                     	;# 
  2919  0215                     	;# 
  2920  0215                     	;# 
  2921  0216                     	;# 
  2922  0216                     	;# 
  2923  0217                     	;# 
  2924  0217                     	;# 
  2925  0219                     	;# 
  2926  021A                     	;# 
  2927  021B                     	;# 
  2928  021C                     	;# 
  2929  021D                     	;# 
  2930  021E                     	;# 
  2931  021F                     	;# 
  2932  028C                     	;# 
  2933  028D                     	;# 
  2934  0291                     	;# 
  2935  0291                     	;# 
  2936  0292                     	;# 
  2937  0293                     	;# 
  2938  0298                     	;# 
  2939  0298                     	;# 
  2940  0299                     	;# 
  2941  029A                     	;# 
  2942  029D                     	;# 
  2943  029E                     	;# 
  2944  029F                     	;# 
  2945  030C                     	;# 
  2946  030D                     	;# 
  2947  0311                     	;# 
  2948  0311                     	;# 
  2949  0312                     	;# 
  2950  0313                     	;# 
  2951  0318                     	;# 
  2952  0318                     	;# 
  2953  0319                     	;# 
  2954  031A                     	;# 
  2955  031C                     	;# 
  2956  031C                     	;# 
  2957  031D                     	;# 
  2958  031E                     	;# 
  2959  038C                     	;# 
  2960  038D                     	;# 
  2961  0394                     	;# 
  2962  0395                     	;# 
  2963  0396                     	;# 
  2964  040C                     	;# 
  2965  040D                     	;# 
  2966  0411                     	;# 
  2967  0411                     	;# 
  2968  0412                     	;# 
  2969  0413                     	;# 
  2970  0414                     	;# 
  2971  0415                     	;# 
  2972  0416                     	;# 
  2973  0417                     	;# 
  2974  0418                     	;# 
  2975  0418                     	;# 
  2976  0419                     	;# 
  2977  041A                     	;# 
  2978  041B                     	;# 
  2979  041C                     	;# 
  2980  041D                     	;# 
  2981  041E                     	;# 
  2982  048D                     	;# 
  2983  0491                     	;# 
  2984  0491                     	;# 
  2985  0492                     	;# 
  2986  0492                     	;# 
  2987  0493                     	;# 
  2988  0493                     	;# 
  2989  0493                     	;# 
  2990  0494                     	;# 
  2991  0494                     	;# 
  2992  0495                     	;# 
  2993  0495                     	;# 
  2994  0496                     	;# 
  2995  0496                     	;# 
  2996  0497                     	;# 
  2997  0497                     	;# 
  2998  0595                     	;# 
  2999  0596                     	;# 
  3000  0597                     	;# 
  3001  059C                     	;# 
  3002  059D                     	;# 
  3003  059E                     	;# 
  3004  0611                     	;# 
  3005  0611                     	;# 
  3006  0612                     	;# 
  3007  0613                     	;# 
  3008  0614                     	;# 
  3009  0614                     	;# 
  3010  0615                     	;# 
  3011  0616                     	;# 
  3012  0617                     	;# 
  3013  0617                     	;# 
  3014  0618                     	;# 
  3015  0619                     	;# 
  3016  061A                     	;# 
  3017  061A                     	;# 
  3018  061B                     	;# 
  3019  061C                     	;# 
  3020  061D                     	;# 
  3021  061D                     	;# 
  3022  061E                     	;# 
  3023  061F                     	;# 
  3024  0FE4                     	;# 
  3025  0FE5                     	;# 
  3026  0FE6                     	;# 
  3027  0FE7                     	;# 
  3028  0FE8                     	;# 
  3029  0FE9                     	;# 
  3030  0FEA                     	;# 
  3031  0FEB                     	;# 
  3032  0FED                     	;# 
  3033  0FEE                     	;# 
  3034  0FEF                     	;# 
  3035  0000                     	;# 
  3036  0001                     	;# 
  3037  0002                     	;# 
  3038  0003                     	;# 
  3039  0004                     	;# 
  3040  0005                     	;# 
  3041  0006                     	;# 
  3042  0007                     	;# 
  3043  0008                     	;# 
  3044  0009                     	;# 
  3045  000A                     	;# 
  3046  000B                     	;# 
  3047  000C                     	;# 
  3048  000D                     	;# 
  3049  000E                     	;# 
  3050  000F                     	;# 
  3051  0010                     	;# 
  3052  0011                     	;# 
  3053  0012                     	;# 
  3054  0013                     	;# 
  3055  0014                     	;# 
  3056  0015                     	;# 
  3057  0016                     	;# 
  3058  0016                     	;# 
  3059  0017                     	;# 
  3060  0018                     	;# 
  3061  0019                     	;# 
  3062  001A                     	;# 
  3063  001B                     	;# 
  3064  001C                     	;# 
  3065  008C                     	;# 
  3066  008D                     	;# 
  3067  008E                     	;# 
  3068  008F                     	;# 
  3069  0090                     	;# 
  3070  0091                     	;# 
  3071  0092                     	;# 
  3072  0093                     	;# 
  3073  0094                     	;# 
  3074  0095                     	;# 
  3075  0096                     	;# 
  3076  0097                     	;# 
  3077  0099                     	;# 
  3078  009A                     	;# 
  3079  009B                     	;# 
  3080  009B                     	;# 
  3081  009C                     	;# 
  3082  009D                     	;# 
  3083  009E                     	;# 
  3084  010C                     	;# 
  3085  010D                     	;# 
  3086  010E                     	;# 
  3087  010F                     	;# 
  3088  0110                     	;# 
  3089  0116                     	;# 
  3090  0117                     	;# 
  3091  011D                     	;# 
  3092  018C                     	;# 
  3093  018D                     	;# 
  3094  018F                     	;# 
  3095  0190                     	;# 
  3096  0191                     	;# 
  3097  0191                     	;# 
  3098  0192                     	;# 
  3099  0193                     	;# 
  3100  0193                     	;# 
  3101  0194                     	;# 
  3102  0195                     	;# 
  3103  0196                     	;# 
  3104  0197                     	;# 
  3105  0199                     	;# 
  3106  0199                     	;# 
  3107  0199                     	;# 
  3108  019A                     	;# 
  3109  019A                     	;# 
  3110  019A                     	;# 
  3111  019B                     	;# 
  3112  019B                     	;# 
  3113  019B                     	;# 
  3114  019B                     	;# 
  3115  019B                     	;# 
  3116  019C                     	;# 
  3117  019C                     	;# 
  3118  019C                     	;# 
  3119  019D                     	;# 
  3120  019D                     	;# 
  3121  019D                     	;# 
  3122  019E                     	;# 
  3123  019E                     	;# 
  3124  019E                     	;# 
  3125  019F                     	;# 
  3126  019F                     	;# 
  3127  019F                     	;# 
  3128  020D                     	;# 
  3129  020F                     	;# 
  3130  0210                     	;# 
  3131  0211                     	;# 
  3132  0211                     	;# 
  3133  0212                     	;# 
  3134  0212                     	;# 
  3135  0213                     	;# 
  3136  0213                     	;# 
  3137  0214                     	;# 
  3138  0214                     	;# 
  3139  0215                     	;# 
  3140  0215                     	;# 
  3141  0215                     	;# 
  3142  0216                     	;# 
  3143  0216                     	;# 
  3144  0217                     	;# 
  3145  0217                     	;# 
  3146  0219                     	;# 
  3147  021A                     	;# 
  3148  021B                     	;# 
  3149  021C                     	;# 
  3150  021D                     	;# 
  3151  021E                     	;# 
  3152  021F                     	;# 
  3153  028C                     	;# 
  3154  028D                     	;# 
  3155  0291                     	;# 
  3156  0291                     	;# 
  3157  0292                     	;# 
  3158  0293                     	;# 
  3159  0298                     	;# 
  3160  0298                     	;# 
  3161  0299                     	;# 
  3162  029A                     	;# 
  3163  029D                     	;# 
  3164  029E                     	;# 
  3165  029F                     	;# 
  3166  030C                     	;# 
  3167  030D                     	;# 
  3168  0311                     	;# 
  3169  0311                     	;# 
  3170  0312                     	;# 
  3171  0313                     	;# 
  3172  0318                     	;# 
  3173  0318                     	;# 
  3174  0319                     	;# 
  3175  031A                     	;# 
  3176  031C                     	;# 
  3177  031C                     	;# 
  3178  031D                     	;# 
  3179  031E                     	;# 
  3180  038C                     	;# 
  3181  038D                     	;# 
  3182  0394                     	;# 
  3183  0395                     	;# 
  3184  0396                     	;# 
  3185  040C                     	;# 
  3186  040D                     	;# 
  3187  0411                     	;# 
  3188  0411                     	;# 
  3189  0412                     	;# 
  3190  0413                     	;# 
  3191  0414                     	;# 
  3192  0415                     	;# 
  3193  0416                     	;# 
  3194  0417                     	;# 
  3195  0418                     	;# 
  3196  0418                     	;# 
  3197  0419                     	;# 
  3198  041A                     	;# 
  3199  041B                     	;# 
  3200  041C                     	;# 
  3201  041D                     	;# 
  3202  041E                     	;# 
  3203  048D                     	;# 
  3204  0491                     	;# 
  3205  0491                     	;# 
  3206  0492                     	;# 
  3207  0492                     	;# 
  3208  0493                     	;# 
  3209  0493                     	;# 
  3210  0493                     	;# 
  3211  0494                     	;# 
  3212  0494                     	;# 
  3213  0495                     	;# 
  3214  0495                     	;# 
  3215  0496                     	;# 
  3216  0496                     	;# 
  3217  0497                     	;# 
  3218  0497                     	;# 
  3219  0595                     	;# 
  3220  0596                     	;# 
  3221  0597                     	;# 
  3222  059C                     	;# 
  3223  059D                     	;# 
  3224  059E                     	;# 
  3225  0611                     	;# 
  3226  0611                     	;# 
  3227  0612                     	;# 
  3228  0613                     	;# 
  3229  0614                     	;# 
  3230  0614                     	;# 
  3231  0615                     	;# 
  3232  0616                     	;# 
  3233  0617                     	;# 
  3234  0617                     	;# 
  3235  0618                     	;# 
  3236  0619                     	;# 
  3237  061A                     	;# 
  3238  061A                     	;# 
  3239  061B                     	;# 
  3240  061C                     	;# 
  3241  061D                     	;# 
  3242  061D                     	;# 
  3243  061E                     	;# 
  3244  061F                     	;# 
  3245  0FE4                     	;# 
  3246  0FE5                     	;# 
  3247  0FE6                     	;# 
  3248  0FE7                     	;# 
  3249  0FE8                     	;# 
  3250  0FE9                     	;# 
  3251  0FEA                     	;# 
  3252  0FEB                     	;# 
  3253  0FED                     	;# 
  3254  0FEE                     	;# 
  3255  0FEF                     	;# 
  3256  0000                     	;# 
  3257  0001                     	;# 
  3258  0002                     	;# 
  3259  0003                     	;# 
  3260  0004                     	;# 
  3261  0005                     	;# 
  3262  0006                     	;# 
  3263  0007                     	;# 
  3264  0008                     	;# 
  3265  0009                     	;# 
  3266  000A                     	;# 
  3267  000B                     	;# 
  3268  000C                     	;# 
  3269  000D                     	;# 
  3270  000E                     	;# 
  3271  000F                     	;# 
  3272  0010                     	;# 
  3273  0011                     	;# 
  3274  0012                     	;# 
  3275  0013                     	;# 
  3276  0014                     	;# 
  3277  0015                     	;# 
  3278  0016                     	;# 
  3279  0016                     	;# 
  3280  0017                     	;# 
  3281  0018                     	;# 
  3282  0019                     	;# 
  3283  001A                     	;# 
  3284  001B                     	;# 
  3285  001C                     	;# 
  3286  008C                     	;# 
  3287  008D                     	;# 
  3288  008E                     	;# 
  3289  008F                     	;# 
  3290  0090                     	;# 
  3291  0091                     	;# 
  3292  0092                     	;# 
  3293  0093                     	;# 
  3294  0094                     	;# 
  3295  0095                     	;# 
  3296  0096                     	;# 
  3297  0097                     	;# 
  3298  0099                     	;# 
  3299  009A                     	;# 
  3300  009B                     	;# 
  3301  009B                     	;# 
  3302  009C                     	;# 
  3303  009D                     	;# 
  3304  009E                     	;# 
  3305  010C                     	;# 
  3306  010D                     	;# 
  3307  010E                     	;# 
  3308  010F                     	;# 
  3309  0110                     	;# 
  3310  0116                     	;# 
  3311  0117                     	;# 
  3312  011D                     	;# 
  3313  018C                     	;# 
  3314  018D                     	;# 
  3315  018F                     	;# 
  3316  0190                     	;# 
  3317  0191                     	;# 
  3318  0191                     	;# 
  3319  0192                     	;# 
  3320  0193                     	;# 
  3321  0193                     	;# 
  3322  0194                     	;# 
  3323  0195                     	;# 
  3324  0196                     	;# 
  3325  0197                     	;# 
  3326  0199                     	;# 
  3327  0199                     	;# 
  3328  0199                     	;# 
  3329  019A                     	;# 
  3330  019A                     	;# 
  3331  019A                     	;# 
  3332  019B                     	;# 
  3333  019B                     	;# 
  3334  019B                     	;# 
  3335  019B                     	;# 
  3336  019B                     	;# 
  3337  019C                     	;# 
  3338  019C                     	;# 
  3339  019C                     	;# 
  3340  019D                     	;# 
  3341  019D                     	;# 
  3342  019D                     	;# 
  3343  019E                     	;# 
  3344  019E                     	;# 
  3345  019E                     	;# 
  3346  019F                     	;# 
  3347  019F                     	;# 
  3348  019F                     	;# 
  3349  020D                     	;# 
  3350  020F                     	;# 
  3351  0210                     	;# 
  3352  0211                     	;# 
  3353  0211                     	;# 
  3354  0212                     	;# 
  3355  0212                     	;# 
  3356  0213                     	;# 
  3357  0213                     	;# 
  3358  0214                     	;# 
  3359  0214                     	;# 
  3360  0215                     	;# 
  3361  0215                     	;# 
  3362  0215                     	;# 
  3363  0216                     	;# 
  3364  0216                     	;# 
  3365  0217                     	;# 
  3366  0217                     	;# 
  3367  0219                     	;# 
  3368  021A                     	;# 
  3369  021B                     	;# 
  3370  021C                     	;# 
  3371  021D                     	;# 
  3372  021E                     	;# 
  3373  021F                     	;# 
  3374  028C                     	;# 
  3375  028D                     	;# 
  3376  0291                     	;# 
  3377  0291                     	;# 
  3378  0292                     	;# 
  3379  0293                     	;# 
  3380  0298                     	;# 
  3381  0298                     	;# 
  3382  0299                     	;# 
  3383  029A                     	;# 
  3384  029D                     	;# 
  3385  029E                     	;# 
  3386  029F                     	;# 
  3387  030C                     	;# 
  3388  030D                     	;# 
  3389  0311                     	;# 
  3390  0311                     	;# 
  3391  0312                     	;# 
  3392  0313                     	;# 
  3393  0318                     	;# 
  3394  0318                     	;# 
  3395  0319                     	;# 
  3396  031A                     	;# 
  3397  031C                     	;# 
  3398  031C                     	;# 
  3399  031D                     	;# 
  3400  031E                     	;# 
  3401  038C                     	;# 
  3402  038D                     	;# 
  3403  0394                     	;# 
  3404  0395                     	;# 
  3405  0396                     	;# 
  3406  040C                     	;# 
  3407  040D                     	;# 
  3408  0411                     	;# 
  3409  0411                     	;# 
  3410  0412                     	;# 
  3411  0413                     	;# 
  3412  0414                     	;# 
  3413  0415                     	;# 
  3414  0416                     	;# 
  3415  0417                     	;# 
  3416  0418                     	;# 
  3417  0418                     	;# 
  3418  0419                     	;# 
  3419  041A                     	;# 
  3420  041B                     	;# 
  3421  041C                     	;# 
  3422  041D                     	;# 
  3423  041E                     	;# 
  3424  048D                     	;# 
  3425  0491                     	;# 
  3426  0491                     	;# 
  3427  0492                     	;# 
  3428  0492                     	;# 
  3429  0493                     	;# 
  3430  0493                     	;# 
  3431  0493                     	;# 
  3432  0494                     	;# 
  3433  0494                     	;# 
  3434  0495                     	;# 
  3435  0495                     	;# 
  3436  0496                     	;# 
  3437  0496                     	;# 
  3438  0497                     	;# 
  3439  0497                     	;# 
  3440  0595                     	;# 
  3441  0596                     	;# 
  3442  0597                     	;# 
  3443  059C                     	;# 
  3444  059D                     	;# 
  3445  059E                     	;# 
  3446  0611                     	;# 
  3447  0611                     	;# 
  3448  0612                     	;# 
  3449  0613                     	;# 
  3450  0614                     	;# 
  3451  0614                     	;# 
  3452  0615                     	;# 
  3453  0616                     	;# 
  3454  0617                     	;# 
  3455  0617                     	;# 
  3456  0618                     	;# 
  3457  0619                     	;# 
  3458  061A                     	;# 
  3459  061A                     	;# 
  3460  061B                     	;# 
  3461  061C                     	;# 
  3462  061D                     	;# 
  3463  061D                     	;# 
  3464  061E                     	;# 
  3465  061F                     	;# 
  3466  0FE4                     	;# 
  3467  0FE5                     	;# 
  3468  0FE6                     	;# 
  3469  0FE7                     	;# 
  3470  0FE8                     	;# 
  3471  0FE9                     	;# 
  3472  0FEA                     	;# 
  3473  0FEB                     	;# 
  3474  0FED                     	;# 
  3475  0FEE                     	;# 
  3476  0FEF                     	;# 
  3477  0000                     	;# 
  3478  0001                     	;# 
  3479  0002                     	;# 
  3480  0003                     	;# 
  3481  0004                     	;# 
  3482  0005                     	;# 
  3483  0006                     	;# 
  3484  0007                     	;# 
  3485  0008                     	;# 
  3486  0009                     	;# 
  3487  000A                     	;# 
  3488  000B                     	;# 
  3489  000C                     	;# 
  3490  000D                     	;# 
  3491  000E                     	;# 
  3492  000F                     	;# 
  3493  0010                     	;# 
  3494  0011                     	;# 
  3495  0012                     	;# 
  3496  0013                     	;# 
  3497  0014                     	;# 
  3498  0015                     	;# 
  3499  0016                     	;# 
  3500  0016                     	;# 
  3501  0017                     	;# 
  3502  0018                     	;# 
  3503  0019                     	;# 
  3504  001A                     	;# 
  3505  001B                     	;# 
  3506  001C                     	;# 
  3507  008C                     	;# 
  3508  008D                     	;# 
  3509  008E                     	;# 
  3510  008F                     	;# 
  3511  0090                     	;# 
  3512  0091                     	;# 
  3513  0092                     	;# 
  3514  0093                     	;# 
  3515  0094                     	;# 
  3516  0095                     	;# 
  3517  0096                     	;# 
  3518  0097                     	;# 
  3519  0099                     	;# 
  3520  009A                     	;# 
  3521  009B                     	;# 
  3522  009B                     	;# 
  3523  009C                     	;# 
  3524  009D                     	;# 
  3525  009E                     	;# 
  3526  010C                     	;# 
  3527  010D                     	;# 
  3528  010E                     	;# 
  3529  010F                     	;# 
  3530  0110                     	;# 
  3531  0116                     	;# 
  3532  0117                     	;# 
  3533  011D                     	;# 
  3534  018C                     	;# 
  3535  018D                     	;# 
  3536  018F                     	;# 
  3537  0190                     	;# 
  3538  0191                     	;# 
  3539  0191                     	;# 
  3540  0192                     	;# 
  3541  0193                     	;# 
  3542  0193                     	;# 
  3543  0194                     	;# 
  3544  0195                     	;# 
  3545  0196                     	;# 
  3546  0197                     	;# 
  3547  0199                     	;# 
  3548  0199                     	;# 
  3549  0199                     	;# 
  3550  019A                     	;# 
  3551  019A                     	;# 
  3552  019A                     	;# 
  3553  019B                     	;# 
  3554  019B                     	;# 
  3555  019B                     	;# 
  3556  019B                     	;# 
  3557  019B                     	;# 
  3558  019C                     	;# 
  3559  019C                     	;# 
  3560  019C                     	;# 
  3561  019D                     	;# 
  3562  019D                     	;# 
  3563  019D                     	;# 
  3564  019E                     	;# 
  3565  019E                     	;# 
  3566  019E                     	;# 
  3567  019F                     	;# 
  3568  019F                     	;# 
  3569  019F                     	;# 
  3570  020D                     	;# 
  3571  020F                     	;# 
  3572  0210                     	;# 
  3573  0211                     	;# 
  3574  0211                     	;# 
  3575  0212                     	;# 
  3576  0212                     	;# 
  3577  0213                     	;# 
  3578  0213                     	;# 
  3579  0214                     	;# 
  3580  0214                     	;# 
  3581  0215                     	;# 
  3582  0215                     	;# 
  3583  0215                     	;# 
  3584  0216                     	;# 
  3585  0216                     	;# 
  3586  0217                     	;# 
  3587  0217                     	;# 
  3588  0219                     	;# 
  3589  021A                     	;# 
  3590  021B                     	;# 
  3591  021C                     	;# 
  3592  021D                     	;# 
  3593  021E                     	;# 
  3594  021F                     	;# 
  3595  028C                     	;# 
  3596  028D                     	;# 
  3597  0291                     	;# 
  3598  0291                     	;# 
  3599  0292                     	;# 
  3600  0293                     	;# 
  3601  0298                     	;# 
  3602  0298                     	;# 
  3603  0299                     	;# 
  3604  029A                     	;# 
  3605  029D                     	;# 
  3606  029E                     	;# 
  3607  029F                     	;# 
  3608  030C                     	;# 
  3609  030D                     	;# 
  3610  0311                     	;# 
  3611  0311                     	;# 
  3612  0312                     	;# 
  3613  0313                     	;# 
  3614  0318                     	;# 
  3615  0318                     	;# 
  3616  0319                     	;# 
  3617  031A                     	;# 
  3618  031C                     	;# 
  3619  031C                     	;# 
  3620  031D                     	;# 
  3621  031E                     	;# 
  3622  038C                     	;# 
  3623  038D                     	;# 
  3624  0394                     	;# 
  3625  0395                     	;# 
  3626  0396                     	;# 
  3627  040C                     	;# 
  3628  040D                     	;# 
  3629  0411                     	;# 
  3630  0411                     	;# 
  3631  0412                     	;# 
  3632  0413                     	;# 
  3633  0414                     	;# 
  3634  0415                     	;# 
  3635  0416                     	;# 
  3636  0417                     	;# 
  3637  0418                     	;# 
  3638  0418                     	;# 
  3639  0419                     	;# 
  3640  041A                     	;# 
  3641  041B                     	;# 
  3642  041C                     	;# 
  3643  041D                     	;# 
  3644  041E                     	;# 
  3645  048D                     	;# 
  3646  0491                     	;# 
  3647  0491                     	;# 
  3648  0492                     	;# 
  3649  0492                     	;# 
  3650  0493                     	;# 
  3651  0493                     	;# 
  3652  0493                     	;# 
  3653  0494                     	;# 
  3654  0494                     	;# 
  3655  0495                     	;# 
  3656  0495                     	;# 
  3657  0496                     	;# 
  3658  0496                     	;# 
  3659  0497                     	;# 
  3660  0497                     	;# 
  3661  0595                     	;# 
  3662  0596                     	;# 
  3663  0597                     	;# 
  3664  059C                     	;# 
  3665  059D                     	;# 
  3666  059E                     	;# 
  3667  0611                     	;# 
  3668  0611                     	;# 
  3669  0612                     	;# 
  3670  0613                     	;# 
  3671  0614                     	;# 
  3672  0614                     	;# 
  3673  0615                     	;# 
  3674  0616                     	;# 
  3675  0617                     	;# 
  3676  0617                     	;# 
  3677  0618                     	;# 
  3678  0619                     	;# 
  3679  061A                     	;# 
  3680  061A                     	;# 
  3681  061B                     	;# 
  3682  061C                     	;# 
  3683  061D                     	;# 
  3684  061D                     	;# 
  3685  061E                     	;# 
  3686  061F                     	;# 
  3687  0FE4                     	;# 
  3688  0FE5                     	;# 
  3689  0FE6                     	;# 
  3690  0FE7                     	;# 
  3691  0FE8                     	;# 
  3692  0FE9                     	;# 
  3693  0FEA                     	;# 
  3694  0FEB                     	;# 
  3695  0FED                     	;# 
  3696  0FEE                     	;# 
  3697  0FEF                     	;# 
  3698  0000                     	;# 
  3699  0001                     	;# 
  3700  0002                     	;# 
  3701  0003                     	;# 
  3702  0004                     	;# 
  3703  0005                     	;# 
  3704  0006                     	;# 
  3705  0007                     	;# 
  3706  0008                     	;# 
  3707  0009                     	;# 
  3708  000A                     	;# 
  3709  000B                     	;# 
  3710  000C                     	;# 
  3711  000D                     	;# 
  3712  000E                     	;# 
  3713  000F                     	;# 
  3714  0010                     	;# 
  3715  0011                     	;# 
  3716  0012                     	;# 
  3717  0013                     	;# 
  3718  0014                     	;# 
  3719  0015                     	;# 
  3720  0016                     	;# 
  3721  0016                     	;# 
  3722  0017                     	;# 
  3723  0018                     	;# 
  3724  0019                     	;# 
  3725  001A                     	;# 
  3726  001B                     	;# 
  3727  001C                     	;# 
  3728  008C                     	;# 
  3729  008D                     	;# 
  3730  008E                     	;# 
  3731  008F                     	;# 
  3732  0090                     	;# 
  3733  0091                     	;# 
  3734  0092                     	;# 
  3735  0093                     	;# 
  3736  0094                     	;# 
  3737  0095                     	;# 
  3738  0096                     	;# 
  3739  0097                     	;# 
  3740  0099                     	;# 
  3741  009A                     	;# 
  3742  009B                     	;# 
  3743  009B                     	;# 
  3744  009C                     	;# 
  3745  009D                     	;# 
  3746  009E                     	;# 
  3747  010C                     	;# 
  3748  010D                     	;# 
  3749  010E                     	;# 
  3750  010F                     	;# 
  3751  0110                     	;# 
  3752  0116                     	;# 
  3753  0117                     	;# 
  3754  011D                     	;# 
  3755  018C                     	;# 
  3756  018D                     	;# 
  3757  018F                     	;# 
  3758  0190                     	;# 
  3759  0191                     	;# 
  3760  0191                     	;# 
  3761  0192                     	;# 
  3762  0193                     	;# 
  3763  0193                     	;# 
  3764  0194                     	;# 
  3765  0195                     	;# 
  3766  0196                     	;# 
  3767  0197                     	;# 
  3768  0199                     	;# 
  3769  0199                     	;# 
  3770  0199                     	;# 
  3771  019A                     	;# 
  3772  019A                     	;# 
  3773  019A                     	;# 
  3774  019B                     	;# 
  3775  019B                     	;# 
  3776  019B                     	;# 
  3777  019B                     	;# 
  3778  019B                     	;# 
  3779  019C                     	;# 
  3780  019C                     	;# 
  3781  019C                     	;# 
  3782  019D                     	;# 
  3783  019D                     	;# 
  3784  019D                     	;# 
  3785  019E                     	;# 
  3786  019E                     	;# 
  3787  019E                     	;# 
  3788  019F                     	;# 
  3789  019F                     	;# 
  3790  019F                     	;# 
  3791  020D                     	;# 
  3792  020F                     	;# 
  3793  0210                     	;# 
  3794  0211                     	;# 
  3795  0211                     	;# 
  3796  0212                     	;# 
  3797  0212                     	;# 
  3798  0213                     	;# 
  3799  0213                     	;# 
  3800  0214                     	;# 
  3801  0214                     	;# 
  3802  0215                     	;# 
  3803  0215                     	;# 
  3804  0215                     	;# 
  3805  0216                     	;# 
  3806  0216                     	;# 
  3807  0217                     	;# 
  3808  0217                     	;# 
  3809  0219                     	;# 
  3810  021A                     	;# 
  3811  021B                     	;# 
  3812  021C                     	;# 
  3813  021D                     	;# 
  3814  021E                     	;# 
  3815  021F                     	;# 
  3816  028C                     	;# 
  3817  028D                     	;# 
  3818  0291                     	;# 
  3819  0291                     	;# 
  3820  0292                     	;# 
  3821  0293                     	;# 
  3822  0298                     	;# 
  3823  0298                     	;# 
  3824  0299                     	;# 
  3825  029A                     	;# 
  3826  029D                     	;# 
  3827  029E                     	;# 
  3828  029F                     	;# 
  3829  030C                     	;# 
  3830  030D                     	;# 
  3831  0311                     	;# 
  3832  0311                     	;# 
  3833  0312                     	;# 
  3834  0313                     	;# 
  3835  0318                     	;# 
  3836  0318                     	;# 
  3837  0319                     	;# 
  3838  031A                     	;# 
  3839  031C                     	;# 
  3840  031C                     	;# 
  3841  031D                     	;# 
  3842  031E                     	;# 
  3843  038C                     	;# 
  3844  038D                     	;# 
  3845  0394                     	;# 
  3846  0395                     	;# 
  3847  0396                     	;# 
  3848  040C                     	;# 
  3849  040D                     	;# 
  3850  0411                     	;# 
  3851  0411                     	;# 
  3852  0412                     	;# 
  3853  0413                     	;# 
  3854  0414                     	;# 
  3855  0415                     	;# 
  3856  0416                     	;# 
  3857  0417                     	;# 
  3858  0418                     	;# 
  3859  0418                     	;# 
  3860  0419                     	;# 
  3861  041A                     	;# 
  3862  041B                     	;# 
  3863  041C                     	;# 
  3864  041D                     	;# 
  3865  041E                     	;# 
  3866  048D                     	;# 
  3867  0491                     	;# 
  3868  0491                     	;# 
  3869  0492                     	;# 
  3870  0492                     	;# 
  3871  0493                     	;# 
  3872  0493                     	;# 
  3873  0493                     	;# 
  3874  0494                     	;# 
  3875  0494                     	;# 
  3876  0495                     	;# 
  3877  0495                     	;# 
  3878  0496                     	;# 
  3879  0496                     	;# 
  3880  0497                     	;# 
  3881  0497                     	;# 
  3882  0595                     	;# 
  3883  0596                     	;# 
  3884  0597                     	;# 
  3885  059C                     	;# 
  3886  059D                     	;# 
  3887  059E                     	;# 
  3888  0611                     	;# 
  3889  0611                     	;# 
  3890  0612                     	;# 
  3891  0613                     	;# 
  3892  0614                     	;# 
  3893  0614                     	;# 
  3894  0615                     	;# 
  3895  0616                     	;# 
  3896  0617                     	;# 
  3897  0617                     	;# 
  3898  0618                     	;# 
  3899  0619                     	;# 
  3900  061A                     	;# 
  3901  061A                     	;# 
  3902  061B                     	;# 
  3903  061C                     	;# 
  3904  061D                     	;# 
  3905  061D                     	;# 
  3906  061E                     	;# 
  3907  061F                     	;# 
  3908  0FE4                     	;# 
  3909  0FE5                     	;# 
  3910  0FE6                     	;# 
  3911  0FE7                     	;# 
  3912  0FE8                     	;# 
  3913  0FE9                     	;# 
  3914  0FEA                     	;# 
  3915  0FEB                     	;# 
  3916  0FED                     	;# 
  3917  0FEE                     	;# 
  3918  0FEF                     	;_modArray
  3919                           
  3920                           	psect	idataBANK0
  3921  305C                     __pidataBANK0:	
  3922                           
  3923                           ;initializer for _delay_time
  3924  305C  34D0               	retlw	208
  3925  305D  3407               	retlw	7
  3926  305E  3400               	retlw	0
  3927  305F  3400               	retlw	0
  3928                           
  3929                           ;initializer for _baseline_mod_time
  3930  3060  34D0               	retlw	208
  3931  3061  3407               	retlw	7
  3932                           
  3933                           ;initializer for _top_push_state
  3934  3062  3406               	retlw	6
  3935  3063  3400               	retlw	0
  3936                           
  3937                           ;initializer for _blink_rate
  3938  3064  3414               	retlw	20
  3939                           
  3940                           ;initializer for _longTap_state
  3941  3065  34FF               	retlw	255
  3942                           
  3943                           	psect	idataBANK3
  3944  30A0                     __pidataBANK3:	
  3945                           
  3946                           ;initializer for _bottom_push_state
  3947  30A0  3401               	retlw	1
  3948  30A1  3400               	retlw	0
  3949                           
  3950                           ;initializer for _knob1_prev
  3951  30A2  34D0               	retlw	208
  3952  30A3  3407               	retlw	7
  3953                           
  3954                           ;initializer for _knob2_prev
  3955  30A4  34D0               	retlw	208
  3956  30A5  3407               	retlw	7
  3957                           
  3958                           ;initializer for _knob3_prev
  3959  30A6  34D0               	retlw	208
  3960  30A7  3407               	retlw	7
  3961                           
  3962                           ;initializer for _symmetry
  3963  30A8  34B4               	retlw	180
  3964  30A9  3400               	retlw	0
  3965                           
  3966                           ;initializer for _num_taps
  3967  30AA  3404               	retlw	4
  3968                           
  3969                           ;initializer for _presetChannel
  3970  30AB  3401               	retlw	1
  3971                           
  3972                           ;initializer for _switchBypass_state
  3973  30AC  34FF               	retlw	255
  3974                           
  3975                           	psect	idataBANK4
  3976  316C                     __pidataBANK4:	
  3977                           
  3978                           ;initializer for _blink_delay
  3979  316C  3464               	retlw	100
  3980  316D  3400               	retlw	0
  3981                           
  3982                           ;initializer for _knob4_prev
  3983  316E  34D0               	retlw	208
  3984  316F  3407               	retlw	7
  3985                           
  3986                           ;initializer for _knob5_prev
  3987  3170  34D0               	retlw	208
  3988  3171  3407               	retlw	7
  3989                           
  3990                           ;initializer for _long_press_limit
  3991  3172  34E8               	retlw	232
  3992  3173  3403               	retlw	3
  3993                           
  3994                           ;initializer for _mod_counter
  3995  3174  3401               	retlw	1
  3996  3175  3400               	retlw	0
  3997                           
  3998                           ;initializer for _mod_delay_time
  3999  3176  34D0               	retlw	208
  4000  3177  3407               	retlw	7
  4001                           
  4002                           ;initializer for _tap_iteration
  4003  3178  3401               	retlw	1
  4004  3179  3400               	retlw	0
  4005                           
  4006                           ;initializer for _blink_state
  4007  317A  3401               	retlw	1
  4008                           
  4009                           ;initializer for _currentBypassState
  4010  317B  34FF               	retlw	-1
  4011                           
  4012                           ;initializer for _expSwitchState
  4013  317C  34FF               	retlw	255
  4014                           
  4015                           ;initializer for _expressModeCnst
  4016  317D  3402               	retlw	2
  4017                           
  4018                           ;initializer for _expressionChannel
  4019  317E  3401               	retlw	1
  4020                           
  4021                           ;initializer for _mod_time_changed
  4022  317F  3401               	retlw	1
  4023                           
  4024                           ;initializer for _presetModeCnst
  4025  3180  3401               	retlw	1
  4026                           
  4027                           ;initializer for _switchBypass_up
  4028  3181  3401               	retlw	1
  4029                           
  4030                           ;initializer for _switchTap_state
  4031  3182  34FF               	retlw	255
  4032                           
  4033                           	psect	stringtext
  4034  3000                     __pstringtext:	
  4035  3000                     exp@coeff:	
  4036  3000  3400               	retlw	0
  4037  3001  3480               	retlw	128
  4038  3002  343F               	retlw	63
  4039  3003  3472               	retlw	114
  4040  3004  3431               	retlw	49
  4041  3005  343F               	retlw	63
  4042  3006  34FE               	retlw	254
  4043  3007  3475               	retlw	117
  4044  3008  343E               	retlw	62
  4045  3009  3458               	retlw	88
  4046  300A  3463               	retlw	99
  4047  300B  343D               	retlw	61
  4048  300C  3495               	retlw	149
  4049  300D  341D               	retlw	29
  4050  300E  343C               	retlw	60
  4051  300F  34C5               	retlw	197
  4052  3010  34AE               	retlw	174
  4053  3011  343A               	retlw	58
  4054  3012  3479               	retlw	121
  4055  3013  3421               	retlw	33
  4056  3014  3439               	retlw	57
  4057  3015  3494               	retlw	148
  4058  3016  3480               	retlw	128
  4059  3017  3437               	retlw	55
  4060  3018  3493               	retlw	147
  4061  3019  34A7               	retlw	167
  4062  301A  3435               	retlw	53
  4063  301B  3456               	retlw	86
  4064  301C  3415               	retlw	21
  4065  301D  3434               	retlw	52
  4066  301E                     __end_ofexp@coeff:	
  4067  301E                     log@coeff:	
  4068  301E  3400               	retlw	0
  4069  301F  3400               	retlw	0
  4070  3020  3400               	retlw	0
  4071  3021  3400               	retlw	0
  4072  3022  3480               	retlw	128
  4073  3023  343F               	retlw	63
  4074  3024  34F0               	retlw	240
  4075  3025  34FF               	retlw	255
  4076  3026  34BE               	retlw	190
  4077  3027  34E2               	retlw	226
  4078  3028  34A9               	retlw	169
  4079  3029  343E               	retlw	62
  4080  302A  3483               	retlw	131
  4081  302B  3476               	retlw	118
  4082  302C  34BE               	retlw	190
  4083  302D  34AE               	retlw	174
  4084  302E  342B               	retlw	43
  4085  302F  343E               	retlw	62
  4086  3030  343C               	retlw	60
  4087  3031  34C3               	retlw	195
  4088  3032  34BD               	retlw	189
  4089  3033  34D2               	retlw	210
  4090  3034  3413               	retlw	19
  4091  3035  343D               	retlw	61
  4092  3036  3478               	retlw	120
  4093  3037  34D3               	retlw	211
  4094  3038  34BB               	retlw	187
  4095  3039                     __end_oflog@coeff:	
  4096  3039                     sin@coeff_a:	
  4097  3039  34F4               	retlw	244
  4098  303A  344A               	retlw	74
  4099  303B  3448               	retlw	72
  4100  303C  3495               	retlw	149
  4101  303D  3495               	retlw	149
  4102  303E  34C7               	retlw	199
  4103  303F  34C1               	retlw	193
  4104  3040  34DC               	retlw	220
  4105  3041  3445               	retlw	69
  4106  3042  34DC               	retlw	220
  4107  3043  346D               	retlw	109
  4108  3044  34C3               	retlw	195
  4109  3045  34B3               	retlw	179
  4110  3046  3433               	retlw	51
  4111  3047  3440               	retlw	64
  4112  3048                     __end_ofsin@coeff_a:	
  4113  3048                     sin@coeff_b:	
  4114  3048  3434               	retlw	52
  4115  3049  3401               	retlw	1
  4116  304A  3448               	retlw	72
  4117  304B  349D               	retlw	157
  4118  304C  34B0               	retlw	176
  4119  304D  3445               	retlw	69
  4120  304E  3400               	retlw	0
  4121  304F  34DA               	retlw	218
  4122  3050  3442               	retlw	66
  4123  3051  3400               	retlw	0
  4124  3052  3480               	retlw	128
  4125  3053  343F               	retlw	63
  4126  3054                     __end_ofsin@coeff_b:	
  4127  000B                     _INTCONbits	set	11
  4128  0011                     _PIR1bits	set	17
  4129  000C                     _PORTAbits	set	12
  4130  000E                     _PORTCbits	set	14
  4131  000F                     _PORTDbits	set	15
  4132  0010                     _PORTEbits	set	16
  4133  001B                     _PR2	set	27
  4134  001C                     _T2CONbits	set	28
  4135  005F                     _GIE	set	95
  4136  005E                     _PEIE	set	94
  4137  008D                     _RCIF	set	141
  4138  009D                     _ADCON0bits	set	157
  4139  009E                     _ADCON1bits	set	158
  4140  009C                     _ADRESH	set	156
  4141  009B                     _ADRESL	set	155
  4142  0095                     _OPTION_REGbits	set	149
  4143  0099                     _OSCCONbits	set	153
  4144  008D                     _TRISBbits	set	141
  4145  008E                     _TRISCbits	set	142
  4146  008F                     _TRISDbits	set	143
  4147  0090                     _TRISEbits	set	144
  4148  048D                     _RCIE	set	1165
  4149  011D                     _APFCONbits	set	285
  4150  010D                     _LATBbits	set	269
  4151  010F                     _LATDbits	set	271
  4152  0191                     _PMADR	set	401
  4153  0190                     _ANSELEbits	set	400
  4154  0192                     _PMADRH	set	402
  4155  0191                     _PMADRL	set	401
  4156  0195                     _PMCON1bits	set	405
  4157  0196                     _PMCON2	set	406
  4158  0194                     _PMDATH	set	404
  4159  0193                     _PMDATL	set	403
  4160  0199                     _RCREG	set	409
  4161  019D                     _RCSTAbits	set	413
  4162  019B                     _SPBRG	set	411
  4163  019A                     _TXREG	set	410
  4164  019E                     _TXSTAbits	set	414
  4165  0291                     _CCPR1	set	657
  4166  0298                     _CCPR2	set	664
  4167  0293                     _CCP1CONbits	set	659
  4168  029A                     _CCP2CONbits	set	666
  4169  029D                     _CCPTMRS0	set	669
  4170  029E                     _CCPTMRS1	set	670
  4171  029F                     _CCPTMRS2	set	671
  4172  0311                     _CCPR3	set	785
  4173  0318                     _CCPR4	set	792
  4174  031C                     _CCPR5	set	796
  4175  0313                     _CCP3CONbits	set	787
  4176  031A                     _CCP4CONbits	set	794
  4177  031E                     _CCP5CONbits	set	798
  4178  030C                     _TRISFbits	set	780
  4179  030D                     _TRISGbits	set	781
  4180  038C                     _LATFbits	set	908
  4181  038D                     _LATGbits	set	909
  4182  040C                     _ANSELFbits	set	1036
  4183  061F                     _CCP10CONbits	set	1567
  4184  0613                     _CCP6CONbits	set	1555
  4185  0616                     _CCP7CONbits	set	1558
  4186  0619                     _CCP8CONbits	set	1561
  4187  061C                     _CCP9CONbits	set	1564
  4188                           
  4189                           ; #config settings
  4190  0000                     
  4191                           	psect	cinit
  4192  0346                     start_initialization:	
  4193  0346                     __initialization:		;BIGRAM
  4194                           
  4195                           ; Clear objects allocated to BIGRAM
  4196  0346  308A               	movlw	low (0+9098)
  4197  0347  0084               	movwf	4
  4198  0348  3023               	movlw	high (0+9098)
  4199  0349  0085               	movwf	5
  4200  034A  3066               	movlw	102
  4201  034B  00FE               	movwf	btemp
  4202  034C  3002               	movlw	2
  4203  034D  00FF               	movwf	btemp+1
  4204  034E  31B0  2094  3183   	fcall	clear_ram0
  4205                           
  4206                           ; Clear objects allocated to BANK0
  4207  0351  3059               	movlw	low __pbssBANK0
  4208  0352  0084               	movwf	4
  4209  0353  3000               	movlw	high __pbssBANK0
  4210  0354  0085               	movwf	5
  4211  0355  300D               	movlw	13
  4212  0356  00FE               	movwf	btemp
  4213  0357  3000               	movlw	0
  4214  0358  00FF               	movwf	btemp+1
  4215  0359  31B0  2094  3183   	fcall	clear_ram0
  4216                           
  4217                           ; Clear objects allocated to BANK2
  4218  035C  0022               	movlb	2	; select bank2
  4219  035D  01EF               	clrf	__pbssBANK2& (0+127)
  4220                           
  4221                           ; Clear objects allocated to BANK3
  4222  035E  0023               	movlb	3	; select bank3
  4223  035F  01EF               	clrf	__pbssBANK3& (0+127)
  4224                           
  4225                           ; Clear objects allocated to BANK4
  4226  0360  3020               	movlw	low __pbssBANK4
  4227  0361  0084               	movwf	4
  4228  0362  3002               	movlw	high __pbssBANK4
  4229  0363  0085               	movwf	5
  4230  0364  3039               	movlw	57
  4231  0365  00FE               	movwf	btemp
  4232  0366  3000               	movlw	0
  4233  0367  00FF               	movwf	btemp+1
  4234  0368  31B0  2094  3183   	fcall	clear_ram0
  4235                           
  4236                           ; Clear objects allocated to BANK5
  4237  036B  30A0               	movlw	low __pbssBANK5
  4238  036C  0084               	movwf	4
  4239  036D  3002               	movlw	high __pbssBANK5
  4240  036E  0085               	movwf	5
  4241  036F  304E               	movlw	78
  4242  0370  00FE               	movwf	btemp
  4243  0371  3000               	movlw	0
  4244  0372  00FF               	movwf	btemp+1
  4245  0373  31B0  2094  3183   	fcall	clear_ram0
  4246                           
  4247                           ; Clear objects allocated to BANK6
  4248  0376  3020               	movlw	low __pbssBANK6
  4249  0377  0084               	movwf	4
  4250  0378  3003               	movlw	high __pbssBANK6
  4251  0379  0085               	movwf	5
  4252  037A  3040               	movlw	64
  4253  037B  00FE               	movwf	btemp
  4254  037C  3000               	movlw	0
  4255  037D  00FF               	movwf	btemp+1
  4256  037E  31B0  2094  3183   	fcall	clear_ram0
  4257                           
  4258                           ; Clear objects allocated to BANK7
  4259  0381  30A0               	movlw	low __pbssBANK7
  4260  0382  0084               	movwf	4
  4261  0383  3003               	movlw	high __pbssBANK7
  4262  0384  0085               	movwf	5
  4263  0385  302C               	movlw	44
  4264  0386  00FE               	movwf	btemp
  4265  0387  3000               	movlw	0
  4266  0388  00FF               	movwf	btemp+1
  4267  0389  31B0  2094  3183   	fcall	clear_ram0
  4268                           
  4269                           ; Clear objects allocated to BANK8
  4270  038C  3020               	movlw	low __pbssBANK8
  4271  038D  0084               	movwf	4
  4272  038E  3004               	movlw	high __pbssBANK8
  4273  038F  0085               	movwf	5
  4274  0390  3040               	movlw	64
  4275  0391  00FE               	movwf	btemp
  4276  0392  3000               	movlw	0
  4277  0393  00FF               	movwf	btemp+1
  4278  0394  31B0  2094  3183   	fcall	clear_ram0
  4279                           
  4280                           ; Clear objects allocated to BANK9
  4281  0397  30A0               	movlw	low __pbssBANK9
  4282  0398  0084               	movwf	4
  4283  0399  3004               	movlw	high __pbssBANK9
  4284  039A  0085               	movwf	5
  4285  039B  3040               	movlw	64
  4286  039C  00FE               	movwf	btemp
  4287  039D  3000               	movlw	0
  4288  039E  00FF               	movwf	btemp+1
  4289  039F  31B0  2094  3183   	fcall	clear_ram0
  4290                           
  4291                           ; Initialize objects allocated to BANK0
  4292  03A2  305C               	movlw	low __pidataBANK0
  4293  03A3  0084               	movwf	4
  4294  03A4  30B0               	movlw	(high __pidataBANK0)| (0+128)
  4295  03A5  0085               	movwf	5
  4296  03A6  3066               	movlw	low __pdataBANK0
  4297  03A7  0086               	movwf	6
  4298  03A8  3000               	movlw	high __pdataBANK0
  4299  03A9  0087               	movwf	7
  4300  03AA  3000               	movlw	0
  4301  03AB  00FF               	movwf	btemp+1
  4302  03AC  300A               	movlw	10
  4303  03AD  31B0  2088  3183   	fcall	init_ram
  4304                           
  4305                           ; Initialize objects allocated to BANK3
  4306  03B0  30A0               	movlw	low __pidataBANK3
  4307  03B1  0084               	movwf	4
  4308  03B2  30B0               	movlw	(high __pidataBANK3)| (0+128)
  4309  03B3  0085               	movwf	5
  4310  03B4  30E2               	movlw	low __pdataBANK3
  4311  03B5  0086               	movwf	6
  4312  03B6  3001               	movlw	high __pdataBANK3
  4313  03B7  0087               	movwf	7
  4314  03B8  3000               	movlw	0
  4315  03B9  00FF               	movwf	btemp+1
  4316  03BA  300D               	movlw	13
  4317  03BB  31B0  2088  3183   	fcall	init_ram
  4318                           
  4319                           ; Initialize objects allocated to BANK4
  4320  03BE  306C               	movlw	low __pidataBANK4
  4321  03BF  0084               	movwf	4
  4322  03C0  30B1               	movlw	(high __pidataBANK4)| (0+128)
  4323  03C1  0085               	movwf	5
  4324  03C2  3059               	movlw	low __pdataBANK4
  4325  03C3  0086               	movwf	6
  4326  03C4  3002               	movlw	high __pdataBANK4
  4327  03C5  0087               	movwf	7
  4328  03C6  3000               	movlw	0
  4329  03C7  00FF               	movwf	btemp+1
  4330  03C8  3017               	movlw	23
  4331  03C9  31B0  2088         	fcall	init_ram
  4332  03CB                     end_of_initialization:	
  4333                           ;End of C runtime variable initialization code
  4334                           
  4335  03CB                     __end_of__initialization:	
  4336  03CB  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4337  03CC  0020               	movlb	0
  4338  03CD  3198  2810         	ljmp	_main	;jump to C main() function
  4339                           
  4340                           	psect	bssBANK0
  4341  0059                     __pbssBANK0:	
  4342  0059                     _tap_timer:	
  4343  0059                     	ds	4
  4344  005D                     _isStateInitialized:	
  4345  005D                     	ds	2
  4346  005F                     _UQEnd:	
  4347  005F                     	ds	1
  4348  0060                     _UQFront:	
  4349  0060                     	ds	1
  4350  0061                     _doubleTap_state:	
  4351  0061                     	ds	1
  4352  0062                     _isInitialized:	
  4353  0062                     	ds	1
  4354  0063                     _longBypass_state:	
  4355  0063                     	ds	1
  4356  0064                     _mode2_state:	
  4357  0064                     	ds	1
  4358  0065                     _presetSaveMode:	
  4359  0065                     	ds	1
  4360                           
  4361                           	psect	dataBANK0
  4362  0066                     __pdataBANK0:	
  4363  0066                     _delay_time:	
  4364  0066                     	ds	4
  4365  006A                     _baseline_mod_time:	
  4366  006A                     	ds	2
  4367  006C                     _top_push_state:	
  4368  006C                     	ds	2
  4369  006E                     _blink_rate:	
  4370  006E                     	ds	1
  4371  006F                     _longTap_state:	
  4372  006F                     	ds	1
  4373                           
  4374                           	psect	bssBANK2
  4375  016F                     __pbssBANK2:	
  4376  016F                     _suspend_blink:	
  4377  016F                     	ds	1
  4378                           
  4379                           	psect	bssBANK3
  4380  01EF                     __pbssBANK3:	
  4381  01EF                     _iCnt:	
  4382  01EF                     	ds	1
  4383                           
  4384                           	psect	dataBANK3
  4385  01E2                     __pdataBANK3:	
  4386  01E2                     _bottom_push_state:	
  4387  01E2                     	ds	2
  4388  01E4                     _knob1_prev:	
  4389  01E4                     	ds	2
  4390  01E6                     _knob2_prev:	
  4391  01E6                     	ds	2
  4392  01E8                     _knob3_prev:	
  4393  01E8                     	ds	2
  4394  01EA                     _symmetry:	
  4395  01EA                     	ds	2
  4396  01EC                     _num_taps:	
  4397  01EC                     	ds	1
  4398  01ED                     _presetChannel:	
  4399  01ED                     	ds	1
  4400  01EE                     _switchBypass_state:	
  4401  01EE                     	ds	1
  4402                           
  4403                           	psect	bssBANK4
  4404  0220                     __pbssBANK4:	
  4405  0220                     _double_timer:	
  4406  0220                     	ds	4
  4407  0224                     _mod_timer:	
  4408  0224                     	ds	4
  4409  0228                     _sub_timer:	
  4410  0228                     	ds	4
  4411  022C                     _timer:	
  4412  022C                     	ds	4
  4413  0230                     _knob_1_pos:	
  4414  0230                     	ds	2
  4415  0232                     _knob_2_pos:	
  4416  0232                     	ds	2
  4417  0234                     _knob_3_pos:	
  4418  0234                     	ds	2
  4419  0236                     _knob_4_pos:	
  4420  0236                     	ds	2
  4421  0238                     _knob_5_pos:	
  4422  0238                     	ds	2
  4423  023A                     _longBypass_timer:	
  4424  023A                     	ds	2
  4425  023C                     _longTap_timer:	
  4426  023C                     	ds	2
  4427  023E                     _midiLevel:	
  4428  023E                     	ds	2
  4429  0240                     _mod_value:	
  4430  0240                     	ds	2
  4431  0242                     _modulationSubdivision:	
  4432  0242                     	ds	2
  4433  0244                     _tmpModDelay:	
  4434  0244                     	ds	2
  4435  0246                     _adjust_mod_delay:	
  4436  0246                     	ds	1
  4437  0247                     _bottomTactile_pressed:	
  4438  0247                     	ds	1
  4439  0248                     _bypass_turning_on:	
  4440  0248                     	ds	1
  4441  0249                     _longBypass_down:	
  4442  0249                     	ds	1
  4443  024A                     _longBypass_save:	
  4444  024A                     	ds	1
  4445  024B                     _longBypass_start:	
  4446  024B                     	ds	1
  4447  024C                     _longTap_start:	
  4448  024C                     	ds	1
  4449  024D                     _mode1_state:	
  4450  024D                     	ds	1
  4451  024E                     _modulation_changed:	
  4452  024E                     	ds	1
  4453  024F                     _n:	
  4454  024F                     	ds	1
  4455  0250                     _preset_blink:	
  4456  0250                     	ds	1
  4457  0251                     _preset_programmning_on:	
  4458  0251                     	ds	1
  4459  0252                     _reset_sub_delay:	
  4460  0252                     	ds	1
  4461  0253                     _switchBypass_pressed:	
  4462  0253                     	ds	1
  4463  0254                     _switchBypass_toggle:	
  4464  0254                     	ds	1
  4465  0255                     _switchTap_down:	
  4466  0255                     	ds	1
  4467  0256                     _switchTap_pressed:	
  4468  0256                     	ds	1
  4469  0257                     _topTactile_pressed:	
  4470  0257                     	ds	1
  4471  0258                     _useInitVals:	
  4472  0258                     	ds	1
  4473                           
  4474                           	psect	dataBANK4
  4475  0259                     __pdataBANK4:	
  4476  0259                     _blink_delay:	
  4477  0259                     	ds	2
  4478  025B                     _knob4_prev:	
  4479  025B                     	ds	2
  4480  025D                     _knob5_prev:	
  4481  025D                     	ds	2
  4482  025F                     _long_press_limit:	
  4483  025F                     	ds	2
  4484  0261                     _mod_counter:	
  4485  0261                     	ds	2
  4486  0263                     _mod_delay_time:	
  4487  0263                     	ds	2
  4488  0265                     _tap_iteration:	
  4489  0265                     	ds	2
  4490  0267                     _blink_state:	
  4491  0267                     	ds	1
  4492  0268                     _currentBypassState:	
  4493  0268                     	ds	1
  4494  0269                     _expSwitchState:	
  4495  0269                     	ds	1
  4496  026A                     _expressModeCnst:	
  4497  026A                     	ds	1
  4498  026B                     _expressionChannel:	
  4499  026B                     	ds	1
  4500  026C                     _mod_time_changed:	
  4501  026C                     	ds	1
  4502  026D                     _presetModeCnst:	
  4503  026D                     	ds	1
  4504  026E                     _switchBypass_up:	
  4505  026E                     	ds	1
  4506  026F                     _switchTap_state:	
  4507  026F                     	ds	1
  4508                           
  4509                           	psect	bssBANK5
  4510  02A0                     __pbssBANK5:	
  4511  02A0                     _tap_history:	
  4512  02A0                     	ds	20
  4513  02B4                     _pedalState:	
  4514  02B4                     	ds	15
  4515  02C3                     _ledState:	
  4516  02C3                     	ds	6
  4517  02C9                     USARTWriteInt@F3536:	
  4518  02C9                     	ds	5
  4519  02CE                     _save_counter:	
  4520  02CE                     	ds	4
  4521  02D2                     _save_timer:	
  4522  02D2                     	ds	4
  4523  02D6                     _tap_total:	
  4524  02D6                     	ds	4
  4525  02DA                     _adjusted_pot_value:	
  4526  02DA                     	ds	2
  4527  02DC                     _debounce_bypass:	
  4528  02DC                     	ds	2
  4529  02DE                     _debounce_count:	
  4530  02DE                     	ds	2
  4531  02E0                     _debounce_mode1:	
  4532  02E0                     	ds	2
  4533  02E2                     _debounce_mode2:	
  4534  02E2                     	ds	2
  4535  02E4                     _delayfound:	
  4536  02E4                     	ds	2
  4537  02E6                     _errno:	
  4538  02E6                     	ds	2
  4539  02E8                     _oldBaseTime:	
  4540  02E8                     	ds	2
  4541  02EA                     _oldSymmetry:	
  4542  02EA                     	ds	2
  4543  02EC                     _tmpVal:	
  4544  02EC                     	ds	2
  4545                           
  4546                           	psect	bssBANK6
  4547  0320                     __pbssBANK6:	
  4548  0320                     _midiBuff:	
  4549  0320                     	ds	64
  4550                           
  4551                           	psect	bssBANK7
  4552  03A0                     __pbssBANK7:	
  4553  03A0                     _tap:	
  4554  03A0                     	ds	44
  4555                           
  4556                           	psect	bssBANK8
  4557  0420                     __pbssBANK8:	
  4558  0420                     _URBuff:	
  4559  0420                     	ds	64
  4560                           
  4561                           	psect	bssBANK9
  4562  04A0                     __pbssBANK9:	
  4563  04A0                     _myBuf:	
  4564  04A0                     	ds	64
  4565                           
  4566                           	psect	clrtext
  4567  3094                     clear_ram0:	
  4568                           ;	Called with FSR0 containing the base address, and
  4569                           ;	btemp/btemp+1 has the size to clear
  4570                           
  4571  3094  0064               	clrwdt	;clear the watchdog before getting into this loop
  4572  3095                     clrloop0:	
  4573  3095  0180               	clrf	0	;clear RAM location pointed to by FSR
  4574  3096  3101               	addfsr 0,1
  4575  3097  3001               	movlw	1
  4576  3098  02FE               	subwf	126,f
  4577  3099  3000               	movlw	0
  4578  309A  3BFF               	subwfb	127,f
  4579  309B  087F               	movf	127,w
  4580  309C  047E               	iorwf	126,w
  4581  309D  1903               	btfsc	3,2
  4582  309E  3400               	retlw	0	;all done for this memory range, return
  4583  309F  2895               	goto	clrloop0	;have we reached the end yet?
  4584                           
  4585                           	psect	inittext
  4586  3088                     init_ram:	
  4587  3088  00FE               	movwf	126
  4588  3089                     initloop:	
  4589  3089  0012               	moviw fsr0++
  4590  308A  001E               	movwi fsr1++
  4591  308B  3001               	movlw	1
  4592  308C  02FE               	subwf	126,f
  4593  308D  3000               	movlw	0
  4594  308E  3BFF               	subwfb	127,f
  4595  308F  087F               	movf	127,w
  4596  3090  047E               	iorwf	126,w
  4597  3091  1903               	btfsc	3,2
  4598  3092  3400               	retlw	0
  4599  3093  2889               	goto	initloop
  4600                           
  4601                           	psect	cstackBANK3
  4602  01A0                     __pcstackBANK3:	
  4603  01A0                     getPreset@r:	
  4604  01A0                     scaleA100kPot@pwm:	
  4605                           ; 1 bytes @ 0x0
  4606                           
  4607  01A0                     scaleA10kPot@pwm:	
  4608                           ; 3 bytes @ 0x0
  4609                           
  4610  01A0                     scaleiA10kPot@pwm:	
  4611                           ; 3 bytes @ 0x0
  4612                           
  4613                           
  4614                           ; 3 bytes @ 0x0
  4615  01A0                     	ds	1
  4616  01A1                     getPreset@presetChannel:	
  4617                           
  4618                           ; 1 bytes @ 0x1
  4619  01A1                     	ds	1
  4620  01A2                     getPreset@bankID:	
  4621                           
  4622                           ; 1 bytes @ 0x2
  4623  01A2                     	ds	1
  4624  01A3                     _scaleA100kPot$3253:	
  4625  01A3                     _scaleA10kPot$3257:	
  4626                           ; 3 bytes @ 0x3
  4627                           
  4628  01A3                     _scaleiA10kPot$3259:	
  4629                           ; 3 bytes @ 0x3
  4630                           
  4631  01A3                     getPreset@presets:	
  4632                           ; 3 bytes @ 0x3
  4633                           
  4634                           
  4635                           ; 30 bytes @ 0x3
  4636  01A3                     	ds	3
  4637  01A6                     _scaleA100kPot$3254:	
  4638  01A6                     _scaleA10kPot$3258:	
  4639                           ; 3 bytes @ 0x6
  4640                           
  4641  01A6                     _scaleiA10kPot$3260:	
  4642                           ; 3 bytes @ 0x6
  4643                           
  4644                           
  4645                           ; 3 bytes @ 0x6
  4646  01A6                     	ds	3
  4647  01A9                     _setVolume$3271:	
  4648                           
  4649                           ; 3 bytes @ 0x9
  4650  01A9                     	ds	3
  4651  01AC                     _setVolume$3272:	
  4652                           
  4653                           ; 3 bytes @ 0xC
  4654  01AC                     	ds	21
  4655  01C1                     getPreset@bankChannel:	
  4656                           
  4657                           ; 1 bytes @ 0x21
  4658  01C1                     	ds	1
  4659  01C2                     getPreset@pedalPreset:	
  4660                           
  4661                           ; 15 bytes @ 0x22
  4662  01C2                     	ds	15
  4663  01D1                     ??_main:	
  4664                           
  4665                           ; 1 bytes @ 0x31
  4666  01D1                     	ds	6
  4667  01D7                     _main$3248:	
  4668                           
  4669                           ; 3 bytes @ 0x37
  4670  01D7                     	ds	3
  4671  01DA                     _main$3249:	
  4672                           
  4673                           ; 3 bytes @ 0x3A
  4674  01DA                     	ds	3
  4675  01DD                     main@tapCntDivisor:	
  4676                           
  4677                           ; 2 bytes @ 0x3D
  4678  01DD                     	ds	2
  4679  01DF                     _main$3250:	
  4680                           
  4681                           ; 3 bytes @ 0x3F
  4682  01DF                     	ds	3
  4683                           
  4684                           	psect	cstackBANK2
  4685  0120                     __pcstackBANK2:	
  4686  0120                     ?___fttol:	
  4687  0120                     ___fttol@f1:	
  4688                           ; 4 bytes @ 0x0
  4689                           
  4690                           
  4691                           ; 3 bytes @ 0x0
  4692  0120                     	ds	4
  4693  0124                     ??___fttol:	
  4694                           
  4695                           ; 1 bytes @ 0x4
  4696  0124                     	ds	4
  4697  0128                     ___fttol@sign1:	
  4698                           
  4699                           ; 1 bytes @ 0x8
  4700  0128                     	ds	1
  4701  0129                     ___fttol@lval:	
  4702                           
  4703                           ; 4 bytes @ 0x9
  4704  0129                     	ds	4
  4705  012D                     ___fttol@exp1:	
  4706                           
  4707                           ; 1 bytes @ 0xD
  4708  012D                     	ds	1
  4709  012E                     ?_setSymmetry:	
  4710  012E                     ?_set_subdivision:	
  4711                           ; 1 bytes @ 0xE
  4712                           
  4713  012E                     ?_modTri:	
  4714                           ; 2 bytes @ 0xE
  4715                           
  4716  012E                     ?_modSaw:	
  4717                           ; 2 bytes @ 0xE
  4718                           
  4719  012E                     ?___wmul:	
  4720                           ; 2 bytes @ 0xE
  4721                           
  4722  012E                     ?_floor:	
  4723                           ; 2 bytes @ 0xE
  4724                           
  4725  012E                     set_subdivision@x:	
  4726                           ; 3 bytes @ 0xE
  4727                           
  4728  012E                     setSymmetry@rawValue:	
  4729                           ; 2 bytes @ 0xE
  4730                           
  4731  012E                     ___wmul@multiplier:	
  4732                           ; 2 bytes @ 0xE
  4733                           
  4734  012E                     modTri@angle:	
  4735                           ; 2 bytes @ 0xE
  4736                           
  4737  012E                     modSaw@angle:	
  4738                           ; 3 bytes @ 0xE
  4739                           
  4740  012E                     floor@x:	
  4741                           ; 3 bytes @ 0xE
  4742                           
  4743                           
  4744                           ; 3 bytes @ 0xE
  4745  012E                     	ds	2
  4746  0130                     set_subdivision@y:	
  4747  0130                     ___wmul@multiplicand:	
  4748                           ; 2 bytes @ 0x10
  4749                           
  4750                           
  4751                           ; 2 bytes @ 0x10
  4752  0130                     	ds	1
  4753  0131                     ??_floor:	
  4754  0131                     modTri@inflection:	
  4755                           ; 1 bytes @ 0x11
  4756                           
  4757  0131                     modSaw@inflection:	
  4758                           ; 3 bytes @ 0x11
  4759                           
  4760                           
  4761                           ; 3 bytes @ 0x11
  4762  0131                     	ds	1
  4763  0132                     ___wmul@product:	
  4764  0132                     set_subdivision@scalar:	
  4765                           ; 2 bytes @ 0x12
  4766                           
  4767  0132                     floor@i:	
  4768                           ; 3 bytes @ 0x12
  4769                           
  4770                           
  4771                           ; 3 bytes @ 0x12
  4772  0132                     	ds	2
  4773  0134                     ?_GetBitMask:	
  4774  0134                     ?_modCos:	
  4775                           ; 2 bytes @ 0x14
  4776                           
  4777  0134                     ?_eval_poly:	
  4778                           ; 2 bytes @ 0x14
  4779                           
  4780  0134                     GetBitMask@storage:	
  4781                           ; 3 bytes @ 0x14
  4782                           
  4783  0134                     modCos@angle:	
  4784                           ; 2 bytes @ 0x14
  4785                           
  4786  0134                     eval_poly@x:	
  4787                           ; 3 bytes @ 0x14
  4788                           
  4789  0134                     _modTri$3268:	
  4790                           ; 3 bytes @ 0x14
  4791                           
  4792  0134                     _modSaw$3269:	
  4793                           ; 3 bytes @ 0x14
  4794                           
  4795                           
  4796                           ; 3 bytes @ 0x14
  4797  0134                     	ds	1
  4798  0135                     set_subdivision@tmpX:	
  4799  0135                     floor@expon:	
  4800                           ; 2 bytes @ 0x15
  4801                           
  4802                           
  4803                           ; 2 bytes @ 0x15
  4804  0135                     	ds	1
  4805  0136                     GetBitMask@index:	
  4806                           
  4807                           ; 1 bytes @ 0x16
  4808  0136                     	ds	1
  4809  0137                     ?___ftsub:	
  4810  0137                     GetBitMask@shift:	
  4811                           ; 3 bytes @ 0x17
  4812                           
  4813  0137                     eval_poly@d:	
  4814                           ; 1 bytes @ 0x17
  4815                           
  4816  0137                     modCos@inflection:	
  4817                           ; 2 bytes @ 0x17
  4818                           
  4819  0137                     modTri@shift:	
  4820                           ; 3 bytes @ 0x17
  4821                           
  4822  0137                     ___ftsub@f2:	
  4823                           ; 3 bytes @ 0x17
  4824                           
  4825  0137                     _modSaw$3270:	
  4826                           ; 3 bytes @ 0x17
  4827                           
  4828                           
  4829                           ; 3 bytes @ 0x17
  4830  0137                     	ds	1
  4831  0138                     ??_GetBitMask:	
  4832                           
  4833                           ; 1 bytes @ 0x18
  4834  0138                     	ds	1
  4835  0139                     eval_poly@n:	
  4836                           
  4837                           ; 2 bytes @ 0x19
  4838  0139                     	ds	1
  4839  013A                     ??_modCos:	
  4840  013A                     modSaw@mod:	
  4841                           ; 1 bytes @ 0x1A
  4842                           
  4843  013A                     modTri@period:	
  4844                           ; 2 bytes @ 0x1A
  4845                           
  4846  013A                     ___ftsub@f1:	
  4847                           ; 3 bytes @ 0x1A
  4848                           
  4849                           
  4850                           ; 3 bytes @ 0x1A
  4851  013A                     	ds	1
  4852  013B                     eval_poly@res:	
  4853                           
  4854                           ; 3 bytes @ 0x1B
  4855  013B                     	ds	1
  4856  013C                     GetBitMask@mask:	
  4857  013C                     modSaw@shift:	
  4858                           ; 2 bytes @ 0x1C
  4859                           
  4860  013C                     _modCos$3267:	
  4861                           ; 3 bytes @ 0x1C
  4862                           
  4863                           
  4864                           ; 3 bytes @ 0x1C
  4865  013C                     	ds	1
  4866  013D                     modTri@tmpVal:	
  4867                           
  4868                           ; 3 bytes @ 0x1D
  4869  013D                     	ds	1
  4870  013E                     ?_sin:	
  4871  013E                     ?_log:	
  4872                           ; 3 bytes @ 0x1E
  4873                           
  4874  013E                     ?_ldexp:	
  4875                           ; 3 bytes @ 0x1E
  4876                           
  4877  013E                     GetBitMask@shiftCount:	
  4878                           ; 3 bytes @ 0x1E
  4879                           
  4880  013E                     sin@f:	
  4881                           ; 2 bytes @ 0x1E
  4882                           
  4883  013E                     ldexp@value:	
  4884                           ; 3 bytes @ 0x1E
  4885                           
  4886  013E                     log@x:	
  4887                           ; 3 bytes @ 0x1E
  4888                           
  4889                           
  4890                           ; 3 bytes @ 0x1E
  4891  013E                     	ds	1
  4892  013F                     modCos@shift:	
  4893  013F                     modSaw@period:	
  4894                           ; 3 bytes @ 0x1F
  4895                           
  4896                           
  4897                           ; 3 bytes @ 0x1F
  4898  013F                     	ds	1
  4899  0140                     ?_getPreset:	
  4900                           
  4901                           ; 15 bytes @ 0x20
  4902  0140                     	ds	1
  4903  0141                     ??_sin:	
  4904  0141                     ??_log:	
  4905                           ; 1 bytes @ 0x21
  4906                           
  4907  0141                     ldexp@newexp:	
  4908                           ; 1 bytes @ 0x21
  4909                           
  4910                           
  4911                           ; 2 bytes @ 0x21
  4912  0141                     	ds	1
  4913  0142                     ?_modSawRev:	
  4914  0142                     log@exponent:	
  4915                           ; 2 bytes @ 0x22
  4916                           
  4917  0142                     modCos@period:	
  4918                           ; 2 bytes @ 0x22
  4919                           
  4920  0142                     modSawRev@angle:	
  4921                           ; 3 bytes @ 0x22
  4922                           
  4923  0142                     sin@y:	
  4924                           ; 3 bytes @ 0x22
  4925                           
  4926                           
  4927                           ; 3 bytes @ 0x22
  4928  0142                     	ds	1
  4929  0143                     ??_ldexp:	
  4930                           
  4931                           ; 1 bytes @ 0x23
  4932  0143                     	ds	2
  4933  0145                     modCos@tmpVal:	
  4934  0145                     modSawRev@inflection:	
  4935                           ; 3 bytes @ 0x25
  4936                           
  4937  0145                     _ldexp$3018:	
  4938                           ; 3 bytes @ 0x25
  4939                           
  4940  0145                     _sin$3277:	
  4941                           ; 3 bytes @ 0x25
  4942                           
  4943                           
  4944                           ; 3 bytes @ 0x25
  4945  0145                     	ds	3
  4946  0148                     ??_modSawRev:	
  4947  0148                     ?_modSquare:	
  4948                           ; 1 bytes @ 0x28
  4949                           
  4950  0148                     ?_exp:	
  4951                           ; 2 bytes @ 0x28
  4952                           
  4953  0148                     modSquare@angle:	
  4954                           ; 3 bytes @ 0x28
  4955                           
  4956  0148                     sin@x2:	
  4957                           ; 3 bytes @ 0x28
  4958                           
  4959  0148                     exp@x:	
  4960                           ; 3 bytes @ 0x28
  4961                           
  4962                           
  4963                           ; 3 bytes @ 0x28
  4964  0148                     	ds	3
  4965  014B                     ??_exp:	
  4966  014B                     sin@sgn:	
  4967                           ; 1 bytes @ 0x2B
  4968                           
  4969  014B                     modSquare@inflection:	
  4970                           ; 1 bytes @ 0x2B
  4971                           
  4972                           
  4973                           ; 3 bytes @ 0x2B
  4974  014B                     	ds	1
  4975  014C                     ?_cos:	
  4976  014C                     cos@f:	
  4977                           ; 3 bytes @ 0x2C
  4978                           
  4979  014C                     _exp$3278:	
  4980                           ; 3 bytes @ 0x2C
  4981                           
  4982                           
  4983                           ; 3 bytes @ 0x2C
  4984  014C                     	ds	2
  4985  014E                     modSquare@tmpVal:	
  4986                           
  4987                           ; 2 bytes @ 0x2E
  4988  014E                     	ds	1
  4989  014F                     ??_getPreset:	
  4990  014F                     _exp$2981:	
  4991                           ; 1 bytes @ 0x2F
  4992                           
  4993  014F                     _cos$3274:	
  4994                           ; 3 bytes @ 0x2F
  4995                           
  4996                           
  4997                           ; 3 bytes @ 0x2F
  4998  014F                     	ds	1
  4999  0150                     ??_updateModulationArray:	
  5000                           
  5001                           ; 1 bytes @ 0x30
  5002  0150                     	ds	2
  5003  0152                     ??_calcCosArray:	
  5004  0152                     exp@exponent:	
  5005                           ; 1 bytes @ 0x32
  5006                           
  5007                           
  5008                           ; 2 bytes @ 0x32
  5009  0152                     	ds	1
  5010  0153                     ??_getCurrentState:	
  5011                           
  5012                           ; 1 bytes @ 0x33
  5013  0153                     	ds	1
  5014  0154                     ?_getVolume:	
  5015  0154                     ?_getFrequency:	
  5016                           ; 2 bytes @ 0x34
  5017                           
  5018  0154                     ?_getSymmetry:	
  5019                           ; 2 bytes @ 0x34
  5020                           
  5021  0154                     ?_getDepth:	
  5022                           ; 2 bytes @ 0x34
  5023                           
  5024  0154                     ?_getWaveFormState:	
  5025                           ; 2 bytes @ 0x34
  5026                           
  5027  0154                     ?_getSubdivisionState:	
  5028                           ; 2 bytes @ 0x34
  5029                           
  5030  0154                     ?_getSwitchBypassState:	
  5031                           ; 2 bytes @ 0x34
  5032                           
  5033  0154                     ?_getTapTime:	
  5034                           ; 2 bytes @ 0x34
  5035                           
  5036  0154                     exp@sign:	
  5037                           ; 4 bytes @ 0x34
  5038                           
  5039  0154                     updateModulationArray@angleFactor:	
  5040                           ; 1 bytes @ 0x34
  5041                           
  5042                           
  5043                           ; 2 bytes @ 0x34
  5044  0154                     	ds	1
  5045  0155                     ?_pow:	
  5046  0155                     pow@x:	
  5047                           ; 3 bytes @ 0x35
  5048                           
  5049                           
  5050                           ; 3 bytes @ 0x35
  5051  0155                     	ds	1
  5052  0156                     ??_getWaveFormState:	
  5053  0156                     ??_getSubdivisionState:	
  5054                           ; 1 bytes @ 0x36
  5055                           
  5056  0156                     ??_getSwitchBypassState:	
  5057                           ; 1 bytes @ 0x36
  5058                           
  5059  0156                     updateModulationArray@iAngle_2595:	
  5060                           ; 1 bytes @ 0x36
  5061                           
  5062  0156                     calcCosArray@tmpVal:	
  5063                           ; 1 bytes @ 0x36
  5064                           
  5065                           
  5066                           ; 3 bytes @ 0x36
  5067  0156                     	ds	1
  5068  0157                     updateModulationArray@subDiv:	
  5069                           
  5070                           ; 2 bytes @ 0x37
  5071  0157                     	ds	1
  5072  0158                     ??_InitWaveform:	
  5073  0158                     ??_InitSubdivision:	
  5074                           ; 1 bytes @ 0x38
  5075                           
  5076  0158                     initSwitchBypass@initState:	
  5077                           ; 1 bytes @ 0x38
  5078                           
  5079  0158                     pow@y:	
  5080                           ; 2 bytes @ 0x38
  5081                           
  5082                           
  5083                           ; 3 bytes @ 0x38
  5084  0158                     	ds	1
  5085  0159                     calcCosArray@iAngle:	
  5086  0159                     updateModulationArray@thisAngle:	
  5087                           ; 1 bytes @ 0x39
  5088                           
  5089                           
  5090                           ; 2 bytes @ 0x39
  5091  0159                     	ds	2
  5092  015B                     ??_pow:	
  5093  015B                     updateModulationArray@iAngle:	
  5094                           ; 1 bytes @ 0x3B
  5095                           
  5096                           
  5097                           ; 1 bytes @ 0x3B
  5098  015B                     	ds	1
  5099  015C                     _pow$3275:	
  5100                           
  5101                           ; 3 bytes @ 0x3C
  5102  015C                     	ds	3
  5103  015F                     _pow$3276:	
  5104                           
  5105                           ; 3 bytes @ 0x3F
  5106  015F                     	ds	3
  5107  0162                     pow@sign:	
  5108                           
  5109                           ; 1 bytes @ 0x42
  5110  0162                     	ds	1
  5111  0163                     pow@yi:	
  5112                           
  5113                           ; 4 bytes @ 0x43
  5114  0163                     	ds	4
  5115  0167                     ?_scaleA10kPot:	
  5116  0167                     ?_scaleiA10kPot:	
  5117                           ; 2 bytes @ 0x47
  5118                           
  5119  0167                     ?_scaleA100kPot:	
  5120                           ; 2 bytes @ 0x47
  5121                           
  5122  0167                     scaleA100kPot@input:	
  5123                           ; 2 bytes @ 0x47
  5124                           
  5125  0167                     scaleA10kPot@input:	
  5126                           ; 3 bytes @ 0x47
  5127                           
  5128  0167                     scaleiA10kPot@input:	
  5129                           ; 3 bytes @ 0x47
  5130                           
  5131                           
  5132                           ; 3 bytes @ 0x47
  5133  0167                     	ds	3
  5134  016A                     ?_setVolume:	
  5135  016A                     ?_setFrequency:	
  5136                           ; 1 bytes @ 0x4A
  5137                           
  5138  016A                     setVolume@rawValue:	
  5139                           ; 1 bytes @ 0x4A
  5140                           
  5141  016A                     setFrequency@rawValue:	
  5142                           ; 2 bytes @ 0x4A
  5143                           
  5144                           
  5145                           ; 2 bytes @ 0x4A
  5146  016A                     	ds	2
  5147  016C                     _setFrequency$3273:	
  5148                           
  5149                           ; 3 bytes @ 0x4C
  5150  016C                     	ds	3
  5151                           
  5152                           	psect	cstackBANK1
  5153  00A0                     __pcstackBANK1:	
  5154  00A0                     ?___ftge:	
  5155  00A0                     ?_set_leds_top:	
  5156                           ; 1 bit 
  5157                           
  5158  00A0                     ?_USARTInit:	
  5159                           ; 1 bytes @ 0x0
  5160                           
  5161  00A0                     ??_ConfigureOscillator:	
  5162                           ; 1 bytes @ 0x0
  5163                           
  5164  00A0                     ??_InitApp:	
  5165                           ; 1 bytes @ 0x0
  5166                           
  5167  00A0                     ??_InitializeTaps:	
  5168                           ; 1 bytes @ 0x0
  5169                           
  5170  00A0                     ??_USARTDataAvailable:	
  5171                           ; 1 bytes @ 0x0
  5172                           
  5173  00A0                     ?_setLongBypassState:	
  5174                           ; 1 bytes @ 0x0
  5175                           
  5176  00A0                     ??_updateTapTime:	
  5177                           ; 1 bytes @ 0x0
  5178                           
  5179  00A0                     ??_updateSubdivisionState:	
  5180                           ; 1 bytes @ 0x0
  5181                           
  5182  00A0                     ?_set_leds_bottom:	
  5183                           ; 1 bytes @ 0x0
  5184                           
  5185  00A0                     ??_updateWaveFormState:	
  5186                           ; 1 bytes @ 0x0
  5187                           
  5188  00A0                     ??_init_adc:	
  5189                           ; 1 bytes @ 0x0
  5190                           
  5191  00A0                     ??_init_pwm:	
  5192                           ; 1 bytes @ 0x0
  5193                           
  5194  00A0                     ??_init_timer2:	
  5195                           ; 1 bytes @ 0x0
  5196                           
  5197  00A0                     ??_init_timer0:	
  5198                           ; 1 bytes @ 0x0
  5199                           
  5200  00A0                     ??_updatePedalMode:	
  5201                           ; 1 bytes @ 0x0
  5202                           
  5203  00A0                     ?_setLongTapState:	
  5204                           ; 1 bytes @ 0x0
  5205                           
  5206  00A0                     ??_updateSwitchBypassState:	
  5207                           ; 1 bytes @ 0x0
  5208                           
  5209  00A0                     ?_updateVolume:	
  5210                           ; 1 bytes @ 0x0
  5211                           
  5212  00A0                     ?_updateFrequency:	
  5213                           ; 1 bytes @ 0x0
  5214                           
  5215  00A0                     ?_updateDepth:	
  5216                           ; 1 bytes @ 0x0
  5217                           
  5218  00A0                     ??_USARTReadData:	
  5219                           ; 1 bytes @ 0x0
  5220                           
  5221  00A0                     ?___bmul:	
  5222                           ; 1 bytes @ 0x0
  5223                           
  5224  00A0                     ?_getModulationSubdivision:	
  5225                           ; 1 bytes @ 0x0
  5226                           
  5227  00A0                     ?_adc_convert:	
  5228                           ; 2 bytes @ 0x0
  5229                           
  5230  00A0                     ?_FLASH_ReadWord:	
  5231                           ; 2 bytes @ 0x0
  5232                           
  5233  00A0                     ?___awdiv:	
  5234                           ; 2 bytes @ 0x0
  5235                           
  5236  00A0                     ?___ftpack:	
  5237                           ; 2 bytes @ 0x0
  5238                           
  5239  00A0                     ?_frexp:	
  5240                           ; 3 bytes @ 0x0
  5241                           
  5242  00A0                     ?___lmul:	
  5243                           ; 3 bytes @ 0x0
  5244                           
  5245  00A0                     ?___aldiv:	
  5246                           ; 4 bytes @ 0x0
  5247                           
  5248  00A0                     ___bmul@multiplicand:	
  5249                           ; 4 bytes @ 0x0
  5250                           
  5251  00A0                     FLASH_ReadWord@flashAddr:	
  5252                           ; 1 bytes @ 0x0
  5253                           
  5254  00A0                     set_leds_top@x:	
  5255                           ; 2 bytes @ 0x0
  5256                           
  5257  00A0                     set_leds_bottom@x:	
  5258                           ; 2 bytes @ 0x0
  5259                           
  5260  00A0                     updateVolume@currentValue:	
  5261                           ; 2 bytes @ 0x0
  5262                           
  5263  00A0                     updateFrequency@currentValue:	
  5264                           ; 2 bytes @ 0x0
  5265                           
  5266  00A0                     updateDepth@currentValue:	
  5267                           ; 2 bytes @ 0x0
  5268                           
  5269  00A0                     setLongBypassState@f_state:	
  5270                           ; 2 bytes @ 0x0
  5271                           
  5272  00A0                     setLongTapState@f_state:	
  5273                           ; 2 bytes @ 0x0
  5274                           
  5275  00A0                     USARTInit@baud_rate:	
  5276                           ; 2 bytes @ 0x0
  5277                           
  5278  00A0                     ___awdiv@divisor:	
  5279                           ; 2 bytes @ 0x0
  5280                           
  5281  00A0                     ___ftpack@arg:	
  5282                           ; 2 bytes @ 0x0
  5283                           
  5284  00A0                     ___ftge@ff1:	
  5285                           ; 3 bytes @ 0x0
  5286                           
  5287  00A0                     frexp@value:	
  5288                           ; 3 bytes @ 0x0
  5289                           
  5290  00A0                     ___lmul@multiplier:	
  5291                           ; 3 bytes @ 0x0
  5292                           
  5293  00A0                     ___aldiv@divisor:	
  5294                           ; 4 bytes @ 0x0
  5295                           
  5296                           
  5297                           ; 4 bytes @ 0x0
  5298  00A0                     	ds	1
  5299  00A1                     ??___bmul:	
  5300  00A1                     updateSwitchBypassState@state:	
  5301                           ; 1 bytes @ 0x1
  5302                           
  5303  00A1                     USARTReadData@data:	
  5304                           ; 1 bytes @ 0x1
  5305                           
  5306  00A1                     InitializeTaps@itap:	
  5307                           ; 1 bytes @ 0x1
  5308                           
  5309                           
  5310                           ; 2 bytes @ 0x1
  5311  00A1                     	ds	1
  5312  00A2                     ??_getModulationSubdivision:	
  5313  00A2                     ??_USARTInit:	
  5314                           ; 1 bytes @ 0x2
  5315                           
  5316  00A2                     ?_USARTReadBuffer:	
  5317                           ; 1 bytes @ 0x2
  5318                           
  5319  00A2                     ??_setLongBypassState:	
  5320                           ; 1 bytes @ 0x2
  5321                           
  5322  00A2                     ??_set_leds_bottom:	
  5323                           ; 1 bytes @ 0x2
  5324                           
  5325  00A2                     ??_adc_convert:	
  5326                           ; 1 bytes @ 0x2
  5327                           
  5328  00A2                     ?_setDepth:	
  5329                           ; 1 bytes @ 0x2
  5330                           
  5331  00A2                     ??_setLongTapState:	
  5332                           ; 1 bytes @ 0x2
  5333                           
  5334  00A2                     ??_FLASH_ReadWord:	
  5335                           ; 1 bytes @ 0x2
  5336                           
  5337  00A2                     ??_updateVolume:	
  5338                           ; 1 bytes @ 0x2
  5339                           
  5340  00A2                     ??_updateFrequency:	
  5341                           ; 1 bytes @ 0x2
  5342                           
  5343  00A2                     ??_updateDepth:	
  5344                           ; 1 bytes @ 0x2
  5345                           
  5346  00A2                     FLASH_ReadWord@GIEBitValue:	
  5347                           ; 1 bytes @ 0x2
  5348                           
  5349  00A2                     ___bmul@product:	
  5350                           ; 1 bytes @ 0x2
  5351                           
  5352  00A2                     set_leds_top@ledState:	
  5353                           ; 1 bytes @ 0x2
  5354                           
  5355  00A2                     USARTReadBuffer@len:	
  5356                           ; 2 bytes @ 0x2
  5357                           
  5358  00A2                     setDepth@rawValue:	
  5359                           ; 2 bytes @ 0x2
  5360                           
  5361  00A2                     ___awdiv@dividend:	
  5362                           ; 2 bytes @ 0x2
  5363                           
  5364                           
  5365                           ; 2 bytes @ 0x2
  5366  00A2                     	ds	1
  5367  00A3                     ?_HEF_ByteArrayRead:	
  5368  00A3                     adc_convert@channel:	
  5369                           ; 1 bytes @ 0x3
  5370                           
  5371  00A3                     ___bmul@multiplier:	
  5372                           ; 1 bytes @ 0x3
  5373                           
  5374  00A3                     ___ftpack@exp:	
  5375                           ; 1 bytes @ 0x3
  5376                           
  5377  00A3                     frexp@eptr:	
  5378                           ; 1 bytes @ 0x3
  5379                           
  5380  00A3                     HEF_ByteArrayRead@bArray:	
  5381                           ; 1 bytes @ 0x3
  5382                           
  5383  00A3                     ___ftge@ff2:	
  5384                           ; 2 bytes @ 0x3
  5385                           
  5386                           
  5387                           ; 3 bytes @ 0x3
  5388  00A3                     	ds	1
  5389  00A4                     ??_set_leds_top:	
  5390  00A4                     ??_USARTReadBuffer:	
  5391                           ; 1 bytes @ 0x4
  5392                           
  5393  00A4                     ??_setDepth:	
  5394                           ; 1 bytes @ 0x4
  5395                           
  5396  00A4                     ??_resetRingLEDs:	
  5397                           ; 1 bytes @ 0x4
  5398                           
  5399  00A4                     ??_setPresetDisplay:	
  5400                           ; 1 bytes @ 0x4
  5401                           
  5402  00A4                     ??_setExpressionDisplay:	
  5403                           ; 1 bytes @ 0x4
  5404                           
  5405  00A4                     ??_frexp:	
  5406                           ; 1 bytes @ 0x4
  5407                           
  5408  00A4                     ??___awdiv:	
  5409                           ; 1 bytes @ 0x4
  5410                           
  5411  00A4                     ___ftpack@sign:	
  5412                           ; 1 bytes @ 0x4
  5413                           
  5414  00A4                     ___lmul@multiplicand:	
  5415                           ; 1 bytes @ 0x4
  5416                           
  5417  00A4                     ___aldiv@dividend:	
  5418                           ; 4 bytes @ 0x4
  5419                           
  5420                           
  5421                           ; 4 bytes @ 0x4
  5422  00A4                     	ds	1
  5423  00A5                     ??___ftpack:	
  5424  00A5                     HEF_ByteArrayRead@block:	
  5425                           ; 1 bytes @ 0x5
  5426                           
  5427  00A5                     ___awdiv@counter:	
  5428                           ; 1 bytes @ 0x5
  5429                           
  5430                           
  5431                           ; 1 bytes @ 0x5
  5432  00A5                     	ds	1
  5433  00A6                     ??___ftge:	
  5434  00A6                     setPresetDisplay@ledChannel:	
  5435                           ; 1 bytes @ 0x6
  5436                           
  5437  00A6                     setExpressionDisplay@ledChannel:	
  5438                           ; 1 bytes @ 0x6
  5439                           
  5440  00A6                     USARTReadBuffer@buff:	
  5441                           ; 1 bytes @ 0x6
  5442                           
  5443  00A6                     HEF_ByteArrayRead@count:	
  5444                           ; 1 bytes @ 0x6
  5445                           
  5446  00A6                     ___awdiv@sign:	
  5447                           ; 1 bytes @ 0x6
  5448                           
  5449                           
  5450                           ; 1 bytes @ 0x6
  5451  00A6                     	ds	1
  5452  00A7                     ??_update_mode:	
  5453  00A7                     ??_update_selectMode:	
  5454                           ; 1 bytes @ 0x7
  5455                           
  5456  00A7                     ??_setPedalMode:	
  5457                           ; 1 bytes @ 0x7
  5458                           
  5459  00A7                     ??_HEF_ByteArrayRead:	
  5460                           ; 1 bytes @ 0x7
  5461                           
  5462  00A7                     USARTReadBuffer@i:	
  5463                           ; 1 bytes @ 0x7
  5464                           
  5465  00A7                     ___awdiv@quotient:	
  5466                           ; 2 bytes @ 0x7
  5467                           
  5468                           
  5469                           ; 2 bytes @ 0x7
  5470  00A7                     	ds	1
  5471  00A8                     ??___lmul:	
  5472  00A8                     ??___aldiv:	
  5473                           ; 1 bytes @ 0x8
  5474                           
  5475  00A8                     ?___altoft:	
  5476                           ; 1 bytes @ 0x8
  5477                           
  5478  00A8                     ?___awtoft:	
  5479                           ; 3 bytes @ 0x8
  5480                           
  5481  00A8                     ?___lbtoft:	
  5482                           ; 3 bytes @ 0x8
  5483                           
  5484  00A8                     ?___lltoft:	
  5485                           ; 3 bytes @ 0x8
  5486                           
  5487  00A8                     ___awtoft@c:	
  5488                           ; 3 bytes @ 0x8
  5489                           
  5490  00A8                     ___lmul@product:	
  5491                           ; 2 bytes @ 0x8
  5492                           
  5493  00A8                     ___altoft@c:	
  5494                           ; 4 bytes @ 0x8
  5495                           
  5496  00A8                     ___lltoft@c:	
  5497                           ; 4 bytes @ 0x8
  5498                           
  5499                           
  5500                           ; 4 bytes @ 0x8
  5501  00A8                     	ds	1
  5502  00A9                     ___aldiv@counter:	
  5503  00A9                     HEF_ByteArrayRead@wordAdd:	
  5504                           ; 1 bytes @ 0x9
  5505                           
  5506                           
  5507                           ; 2 bytes @ 0x9
  5508  00A9                     	ds	1
  5509  00AA                     ___aldiv@sign:	
  5510                           
  5511                           ; 1 bytes @ 0xA
  5512  00AA                     	ds	1
  5513  00AB                     ??___awtoft:	
  5514  00AB                     ??___lbtoft:	
  5515                           ; 1 bytes @ 0xB
  5516                           
  5517  00AB                     ___aldiv@quotient:	
  5518                           ; 1 bytes @ 0xB
  5519                           
  5520                           
  5521                           ; 4 bytes @ 0xB
  5522  00AB                     	ds	1
  5523  00AC                     ?_wait_ms:	
  5524  00AC                     ??___altoft:	
  5525                           ; 1 bytes @ 0xC
  5526                           
  5527  00AC                     ??___lltoft:	
  5528                           ; 1 bytes @ 0xC
  5529                           
  5530  00AC                     wait_ms@timeSec:	
  5531                           ; 1 bytes @ 0xC
  5532                           
  5533                           
  5534                           ; 2 bytes @ 0xC
  5535  00AC                     	ds	1
  5536  00AD                     ___awtoft@sign:	
  5537  00AD                     ___lltoft@exp:	
  5538                           ; 1 bytes @ 0xD
  5539                           
  5540                           
  5541                           ; 1 bytes @ 0xD
  5542  00AD                     	ds	1
  5543  00AE                     ??_wait_ms:	
  5544  00AE                     ?___ftmul:	
  5545                           ; 1 bytes @ 0xE
  5546                           
  5547  00AE                     ___altoft@exp:	
  5548                           ; 3 bytes @ 0xE
  5549                           
  5550  00AE                     ___ftmul@f1:	
  5551                           ; 1 bytes @ 0xE
  5552                           
  5553  00AE                     wait_ms@timemsl:	
  5554                           ; 3 bytes @ 0xE
  5555                           
  5556                           
  5557                           ; 4 bytes @ 0xE
  5558  00AE                     	ds	1
  5559  00AF                     ___altoft@sign:	
  5560  00AF                     ___lbtoft@c:	
  5561                           ; 1 bytes @ 0xF
  5562                           
  5563                           
  5564                           ; 1 bytes @ 0xF
  5565  00AF                     	ds	2
  5566  00B1                     ___ftmul@f2:	
  5567                           
  5568                           ; 3 bytes @ 0x11
  5569  00B1                     	ds	1
  5570  00B2                     ??_read_bottom_tactile:	
  5571  00B2                     ??_read_top_tactile:	
  5572                           ; 1 bytes @ 0x12
  5573                           
  5574  00B2                     ??_solidring_tactiles:	
  5575                           ; 1 bytes @ 0x12
  5576                           
  5577  00B2                     ??_ring_tactiles:	
  5578                           ; 1 bytes @ 0x12
  5579                           
  5580  00B2                     ?_setSwitchBypassRelays:	
  5581                           ; 1 bytes @ 0x12
  5582                           
  5583  00B2                     setSwitchBypassRelays@f_state:	
  5584                           ; 1 bytes @ 0x12
  5585                           
  5586                           
  5587                           ; 2 bytes @ 0x12
  5588  00B2                     	ds	1
  5589  00B3                     ring_tactiles@iLed:	
  5590                           
  5591                           ; 2 bytes @ 0x13
  5592  00B3                     	ds	1
  5593  00B4                     ??_setSwitchBypassRelays:	
  5594  00B4                     ??___ftmul:	
  5595                           ; 1 bytes @ 0x14
  5596                           
  5597  00B4                     solidring_tactiles@ring_delay:	
  5598                           ; 1 bytes @ 0x14
  5599                           
  5600                           
  5601                           ; 1 bytes @ 0x14
  5602  00B4                     	ds	1
  5603  00B5                     ?_setSwitchBypassState:	
  5604  00B5                     ring_tactiles@iLed_1609:	
  5605                           ; 1 bytes @ 0x15
  5606                           
  5607  00B5                     setSwitchBypassState@f_state:	
  5608                           ; 2 bytes @ 0x15
  5609                           
  5610                           
  5611                           ; 2 bytes @ 0x15
  5612  00B5                     	ds	2
  5613  00B7                     ??_setSwitchBypassState:	
  5614  00B7                     ??_showSave:	
  5615                           ; 1 bytes @ 0x17
  5616                           
  5617                           
  5618                           ; 1 bytes @ 0x17
  5619  00B7                     	ds	1
  5620  00B8                     ?_setDoublePressState:	
  5621  00B8                     ___ftmul@exp:	
  5622                           ; 1 bytes @ 0x18
  5623                           
  5624  00B8                     setDoublePressState@f_state:	
  5625                           ; 1 bytes @ 0x18
  5626                           
  5627                           
  5628                           ; 2 bytes @ 0x18
  5629  00B8                     	ds	1
  5630  00B9                     ___ftmul@f3_as_product:	
  5631                           
  5632                           ; 3 bytes @ 0x19
  5633  00B9                     	ds	1
  5634  00BA                     ??_setDoublePressState:	
  5635                           
  5636                           ; 1 bytes @ 0x1A
  5637  00BA                     	ds	2
  5638  00BC                     ??_updateSwitchBypass:	
  5639  00BC                     ??_updateSwitchTap:	
  5640                           ; 1 bytes @ 0x1C
  5641                           
  5642  00BC                     ___ftmul@cntr:	
  5643                           ; 1 bytes @ 0x1C
  5644                           
  5645                           
  5646                           ; 1 bytes @ 0x1C
  5647  00BC                     	ds	1
  5648  00BD                     ___ftmul@sign:	
  5649                           
  5650                           ; 1 bytes @ 0x1D
  5651  00BD                     	ds	1
  5652  00BE                     ?___ftneg:	
  5653  00BE                     ___ftneg@f1:	
  5654                           ; 3 bytes @ 0x1E
  5655                           
  5656                           
  5657                           ; 3 bytes @ 0x1E
  5658  00BE                     	ds	3
  5659  00C1                     ??___ftneg:	
  5660  00C1                     ?___ftadd:	
  5661                           ; 1 bytes @ 0x21
  5662                           
  5663  00C1                     ___ftadd@f1:	
  5664                           ; 3 bytes @ 0x21
  5665                           
  5666                           
  5667                           ; 3 bytes @ 0x21
  5668  00C1                     	ds	1
  5669  00C2                     updateSwitchTap@tapCntDivisor:	
  5670                           
  5671                           ; 2 bytes @ 0x22
  5672  00C2                     	ds	2
  5673  00C4                     updateSwitchTap@iCnt:	
  5674  00C4                     ___ftadd@f2:	
  5675                           ; 1 bytes @ 0x24
  5676                           
  5677                           
  5678                           ; 3 bytes @ 0x24
  5679  00C4                     	ds	3
  5680  00C7                     ??___ftadd:	
  5681                           
  5682                           ; 1 bytes @ 0x27
  5683  00C7                     	ds	4
  5684  00CB                     ___ftadd@sign:	
  5685                           
  5686                           ; 1 bytes @ 0x2B
  5687  00CB                     	ds	1
  5688  00CC                     ___ftadd@exp2:	
  5689                           
  5690                           ; 1 bytes @ 0x2C
  5691  00CC                     	ds	1
  5692  00CD                     ___ftadd@exp1:	
  5693                           
  5694                           ; 1 bytes @ 0x2D
  5695  00CD                     	ds	1
  5696  00CE                     ?___ftdiv:	
  5697  00CE                     ___ftdiv@f2:	
  5698                           ; 3 bytes @ 0x2E
  5699                           
  5700                           
  5701                           ; 3 bytes @ 0x2E
  5702  00CE                     	ds	3
  5703  00D1                     ___ftdiv@f1:	
  5704                           
  5705                           ; 3 bytes @ 0x31
  5706  00D1                     	ds	3
  5707  00D4                     ??___ftdiv:	
  5708                           
  5709                           ; 1 bytes @ 0x34
  5710  00D4                     	ds	4
  5711  00D8                     ___ftdiv@cntr:	
  5712                           
  5713                           ; 1 bytes @ 0x38
  5714  00D8                     	ds	1
  5715  00D9                     ___ftdiv@f3:	
  5716                           
  5717                           ; 3 bytes @ 0x39
  5718  00D9                     	ds	3
  5719  00DC                     ___ftdiv@exp:	
  5720                           
  5721                           ; 1 bytes @ 0x3C
  5722  00DC                     	ds	1
  5723  00DD                     ___ftdiv@sign:	
  5724                           
  5725                           ; 1 bytes @ 0x3D
  5726  00DD                     	ds	1
  5727  00DE                     ?_map:	
  5728  00DE                     map@x:	
  5729                           ; 3 bytes @ 0x3E
  5730                           
  5731                           
  5732                           ; 3 bytes @ 0x3E
  5733  00DE                     	ds	3
  5734  00E1                     map@in_min:	
  5735                           
  5736                           ; 3 bytes @ 0x41
  5737  00E1                     	ds	3
  5738  00E4                     map@in_max:	
  5739                           
  5740                           ; 3 bytes @ 0x44
  5741  00E4                     	ds	3
  5742  00E7                     map@out_min:	
  5743                           
  5744                           ; 3 bytes @ 0x47
  5745  00E7                     	ds	3
  5746  00EA                     map@out_max:	
  5747                           
  5748                           ; 3 bytes @ 0x4A
  5749  00EA                     	ds	3
  5750  00ED                     ??_map:	
  5751  00ED                     _map$3251:	
  5752                           ; 1 bytes @ 0x4D
  5753                           
  5754                           
  5755                           ; 3 bytes @ 0x4D
  5756  00ED                     	ds	3
  5757  00F0                     ??_initSwitchTap:	
  5758  00F0                     ??_initSwitchBypass:	
  5759                           ; 1 bytes @ 0x50
  5760                           
  5761  00F0                     ??_getVolume:	
  5762                           ; 1 bytes @ 0x50
  5763                           
  5764  00F0                     ??_getFrequency:	
  5765                           ; 1 bytes @ 0x50
  5766                           
  5767  00F0                     ??_getSymmetry:	
  5768                           ; 1 bytes @ 0x50
  5769                           
  5770  00F0                     ??_getDepth:	
  5771                           ; 1 bytes @ 0x50
  5772                           
  5773  00F0                     ??_setVolume:	
  5774                           ; 1 bytes @ 0x50
  5775                           
  5776  00F0                     ??_setFrequency:	
  5777                           ; 1 bytes @ 0x50
  5778                           
  5779  00F0                     ??_scaleA10kPot:	
  5780                           ; 1 bytes @ 0x50
  5781                           
  5782  00F0                     ??_scaleiA10kPot:	
  5783                           ; 1 bytes @ 0x50
  5784                           
  5785  00F0                     ??_scaleA100kPot:	
  5786                           ; 1 bytes @ 0x50
  5787                           
  5788  00F0                     ??_setSymmetry:	
  5789                           ; 1 bytes @ 0x50
  5790                           
  5791  00F0                     ??_set_subdivision:	
  5792                           ; 1 bytes @ 0x50
  5793                           
  5794  00F0                     ??_getModulationDelayTime:	
  5795                           ; 1 bytes @ 0x50
  5796                           
  5797  00F0                     ??_cos:	
  5798                           ; 1 bytes @ 0x50
  5799                           
  5800  00F0                     ??_modTri:	
  5801                           ; 1 bytes @ 0x50
  5802                           
  5803  00F0                     ??_modSquare:	
  5804                           ; 1 bytes @ 0x50
  5805                           
  5806  00F0                     ??_modSaw:	
  5807                           ; 1 bytes @ 0x50
  5808                           
  5809  00F0                     ??_eval_poly:	
  5810                           ; 1 bytes @ 0x50
  5811                           
  5812  00F0                     ??_initStateManager:	
  5813                           ; 1 bytes @ 0x50
  5814                           
  5815  00F0                     ??_getTapTime:	
  5816                           ; 1 bytes @ 0x50
  5817                           
  5818  00F0                     ??___wmul:	
  5819                           ; 1 bytes @ 0x50
  5820                           
  5821  00F0                     ??___ftsub:	
  5822                           ; 1 bytes @ 0x50
  5823                           
  5824                           
  5825                           	psect	cstackCOMMON
  5826  0070                     __pcstackCOMMON:	
  5827                           ; 1 bytes @ 0x50
  5828                           
  5829  0070                     ?_USARTHandleRxInt:	
  5830  0070                     ??_USARTHandleRxInt:	
  5831                           ; 1 bytes @ 0x0
  5832                           
  5833  0070                     ?_calcCosArray:	
  5834                           ; 1 bytes @ 0x0
  5835                           
  5836  0070                     ?_ConfigureOscillator:	
  5837                           ; 1 bytes @ 0x0
  5838                           
  5839  0070                     ?_InitApp:	
  5840                           ; 1 bytes @ 0x0
  5841                           
  5842  0070                     ?_initSwitchTap:	
  5843                           ; 1 bytes @ 0x0
  5844                           
  5845  0070                     ?_InitWaveform:	
  5846                           ; 1 bytes @ 0x0
  5847                           
  5848  0070                     ?_InitSubdivision:	
  5849                           ; 1 bytes @ 0x0
  5850                           
  5851  0070                     ?_InitializeTaps:	
  5852                           ; 1 bytes @ 0x0
  5853                           
  5854  0070                     ?_initSwitchBypass:	
  5855                           ; 1 bytes @ 0x0
  5856                           
  5857  0070                     ?_USARTDataAvailable:	
  5858                           ; 1 bytes @ 0x0
  5859                           
  5860  0070                     ?_updateTapTime:	
  5861                           ; 1 bytes @ 0x0
  5862                           
  5863  0070                     ?_updateSubdivisionState:	
  5864                           ; 1 bytes @ 0x0
  5865                           
  5866  0070                     ?_updateWaveFormState:	
  5867                           ; 1 bytes @ 0x0
  5868                           
  5869  0070                     ?_update_mode:	
  5870                           ; 1 bytes @ 0x0
  5871                           
  5872  0070                     ?_update_selectMode:	
  5873                           ; 1 bytes @ 0x0
  5874                           
  5875  0070                     ?_updateSwitchBypass:	
  5876                           ; 1 bytes @ 0x0
  5877                           
  5878  0070                     ?_updateSwitchTap:	
  5879                           ; 1 bytes @ 0x0
  5880                           
  5881  0070                     ?_read_bottom_tactile:	
  5882                           ; 1 bytes @ 0x0
  5883                           
  5884  0070                     ?_read_top_tactile:	
  5885                           ; 1 bytes @ 0x0
  5886                           
  5887  0070                     ?_getModulationDelayTime:	
  5888                           ; 1 bytes @ 0x0
  5889                           
  5890  0070                     ?_updateModulationArray:	
  5891                           ; 1 bytes @ 0x0
  5892                           
  5893  0070                     ?_init_adc:	
  5894                           ; 1 bytes @ 0x0
  5895                           
  5896  0070                     ?_init_pwm:	
  5897                           ; 1 bytes @ 0x0
  5898                           
  5899  0070                     ?_init_timer2:	
  5900                           ; 1 bytes @ 0x0
  5901                           
  5902  0070                     ?_init_timer0:	
  5903                           ; 1 bytes @ 0x0
  5904                           
  5905  0070                     ?_FLASH_EraseBlock:	
  5906                           ; 1 bytes @ 0x0
  5907                           
  5908  0070                     ?_solidring_tactiles:	
  5909                           ; 1 bytes @ 0x0
  5910                           
  5911  0070                     ?_ring_tactiles:	
  5912                           ; 1 bytes @ 0x0
  5913                           
  5914  0070                     ?_resetRingLEDs:	
  5915                           ; 1 bytes @ 0x0
  5916                           
  5917  0070                     ?_setPedalMode:	
  5918                           ; 1 bytes @ 0x0
  5919                           
  5920  0070                     ?_setPresetDisplay:	
  5921                           ; 1 bytes @ 0x0
  5922                           
  5923  0070                     ?_setExpressionDisplay:	
  5924                           ; 1 bytes @ 0x0
  5925                           
  5926  0070                     ?_updatePedalMode:	
  5927                           ; 1 bytes @ 0x0
  5928                           
  5929  0070                     ?_isr:	
  5930                           ; 1 bytes @ 0x0
  5931                           
  5932  0070                     ?_main:	
  5933                           ; 1 bytes @ 0x0
  5934                           
  5935  0070                     ?_showSave:	
  5936                           ; 1 bytes @ 0x0
  5937                           
  5938  0070                     ?_initStateManager:	
  5939                           ; 1 bytes @ 0x0
  5940                           
  5941  0070                     ?_savePreset:	
  5942                           ; 1 bytes @ 0x0
  5943                           
  5944  0070                     ?_updateSwitchBypassState:	
  5945                           ; 1 bytes @ 0x0
  5946                           
  5947  0070                     ?_USARTReadData:	
  5948                           ; 1 bytes @ 0x0
  5949                           
  5950  0070                     ?i1_set_leds_top:	
  5951                           ; 1 bytes @ 0x0
  5952                           
  5953  0070                     ?i1___bmul:	
  5954                           ; 1 bytes @ 0x0
  5955                           
  5956  0070                     ?_saveState:	
  5957                           ; 1 bytes @ 0x0
  5958                           
  5959  0070                     ?i1_FLASH_ReadWord:	
  5960                           ; 2 bytes @ 0x0
  5961                           
  5962  0070                     ?i1_getModulationSubdivision:	
  5963                           ; 2 bytes @ 0x0
  5964                           
  5965  0070                     ?i1___wmul:	
  5966                           ; 2 bytes @ 0x0
  5967                           
  5968  0070                     ?i1___awdiv:	
  5969                           ; 2 bytes @ 0x0
  5970                           
  5971  0070                     ?i1___lmul:	
  5972                           ; 2 bytes @ 0x0
  5973                           
  5974  0070                     ?_getCurrentState:	
  5975                           ; 4 bytes @ 0x0
  5976                           
  5977  0070                     i1___bmul@multiplicand:	
  5978                           ; 15 bytes @ 0x0
  5979                           
  5980  0070                     FLASH_EraseBlock@startAddr:	
  5981                           ; 1 bytes @ 0x0
  5982                           
  5983  0070                     i1FLASH_ReadWord@flashAddr:	
  5984                           ; 2 bytes @ 0x0
  5985                           
  5986  0070                     i1set_leds_top@x:	
  5987                           ; 2 bytes @ 0x0
  5988                           
  5989  0070                     i1___wmul@multiplier:	
  5990                           ; 2 bytes @ 0x0
  5991                           
  5992  0070                     i1___awdiv@divisor:	
  5993                           ; 2 bytes @ 0x0
  5994                           
  5995  0070                     i1___lmul@multiplier:	
  5996                           ; 2 bytes @ 0x0
  5997                           
  5998                           
  5999                           ; 4 bytes @ 0x0
  6000  0070                     	ds	1
  6001  0071                     ??i1___bmul:	
  6002                           
  6003                           ; 1 bytes @ 0x1
  6004  0071                     	ds	1
  6005  0072                     ??_FLASH_EraseBlock:	
  6006  0072                     ??i1_FLASH_ReadWord:	
  6007                           ; 1 bytes @ 0x2
  6008                           
  6009  0072                     ??i1_getModulationSubdivision:	
  6010                           ; 1 bytes @ 0x2
  6011                           
  6012  0072                     FLASH_EraseBlock@GIEBitValue:	
  6013                           ; 1 bytes @ 0x2
  6014                           
  6015  0072                     i1FLASH_ReadWord@GIEBitValue:	
  6016                           ; 1 bytes @ 0x2
  6017                           
  6018  0072                     i1___bmul@product:	
  6019                           ; 1 bytes @ 0x2
  6020                           
  6021  0072                     i1set_leds_top@ledState:	
  6022                           ; 1 bytes @ 0x2
  6023                           
  6024  0072                     i1___wmul@multiplicand:	
  6025                           ; 2 bytes @ 0x2
  6026                           
  6027  0072                     i1___awdiv@dividend:	
  6028                           ; 2 bytes @ 0x2
  6029                           
  6030                           
  6031                           ; 2 bytes @ 0x2
  6032  0072                     	ds	1
  6033  0073                     ?_HEF_ByteArrayWrite:	
  6034  0073                     ?i1_HEF_ByteArrayRead:	
  6035                           ; 1 bytes @ 0x3
  6036                           
  6037  0073                     HEF_ByteArrayWrite@byteArray:	
  6038                           ; 1 bytes @ 0x3
  6039                           
  6040  0073                     i1___bmul@multiplier:	
  6041                           ; 1 bytes @ 0x3
  6042                           
  6043  0073                     i1HEF_ByteArrayRead@bArray:	
  6044                           ; 1 bytes @ 0x3
  6045                           
  6046                           
  6047                           ; 2 bytes @ 0x3
  6048  0073                     	ds	1
  6049  0074                     ??i1_set_leds_top:	
  6050  0074                     ??i1___wmul:	
  6051                           ; 1 bytes @ 0x4
  6052                           
  6053  0074                     ??i1___awdiv:	
  6054                           ; 1 bytes @ 0x4
  6055                           
  6056  0074                     USARTHandleRxInt@data:	
  6057                           ; 1 bytes @ 0x4
  6058                           
  6059  0074                     HEF_ByteArrayWrite@count:	
  6060                           ; 1 bytes @ 0x4
  6061                           
  6062  0074                     i1___wmul@product:	
  6063                           ; 1 bytes @ 0x4
  6064                           
  6065  0074                     i1___lmul@multiplicand:	
  6066                           ; 2 bytes @ 0x4
  6067                           
  6068                           
  6069                           ; 4 bytes @ 0x4
  6070  0074                     	ds	1
  6071  0075                     ??_HEF_ByteArrayWrite:	
  6072  0075                     i1HEF_ByteArrayRead@block:	
  6073                           ; 1 bytes @ 0x5
  6074                           
  6075  0075                     i1___awdiv@counter:	
  6076                           ; 1 bytes @ 0x5
  6077                           
  6078                           
  6079                           ; 1 bytes @ 0x5
  6080  0075                     	ds	1
  6081  0076                     ?_SetBitMask:	
  6082  0076                     i1HEF_ByteArrayRead@count:	
  6083                           ; 2 bytes @ 0x6
  6084                           
  6085  0076                     i1___awdiv@sign:	
  6086                           ; 1 bytes @ 0x6
  6087                           
  6088  0076                     SetBitMask@storage:	
  6089                           ; 1 bytes @ 0x6
  6090                           
  6091                           
  6092                           ; 2 bytes @ 0x6
  6093  0076                     	ds	1
  6094  0077                     ??i1_HEF_ByteArrayRead:	
  6095  0077                     HEF_ByteArrayWrite@GIEBitValue:	
  6096                           ; 1 bytes @ 0x7
  6097                           
  6098  0077                     i1___awdiv@quotient:	
  6099                           ; 1 bytes @ 0x7
  6100                           
  6101                           
  6102                           ; 2 bytes @ 0x7
  6103  0077                     	ds	1
  6104  0078                     ??i1___lmul:	
  6105  0078                     HEF_ByteArrayWrite@block:	
  6106                           ; 1 bytes @ 0x8
  6107                           
  6108  0078                     SetBitMask@value:	
  6109                           ; 1 bytes @ 0x8
  6110                           
  6111  0078                     i1___lmul@product:	
  6112                           ; 2 bytes @ 0x8
  6113                           
  6114                           
  6115                           ; 4 bytes @ 0x8
  6116  0078                     	ds	1
  6117  0079                     HEF_ByteArrayWrite@blockAddr:	
  6118  0079                     i1HEF_ByteArrayRead@wordAdd:	
  6119                           ; 2 bytes @ 0x9
  6120                           
  6121                           
  6122                           ; 2 bytes @ 0x9
  6123  0079                     	ds	1
  6124  007A                     SetBitMask@index:	
  6125                           
  6126                           ; 2 bytes @ 0xA
  6127  007A                     	ds	2
  6128  007C                     ??i1___aldiv:	
  6129  007C                     SetBitMask@shift:	
  6130                           ; 1 bytes @ 0xC
  6131                           
  6132                           
  6133                           ; 2 bytes @ 0xC
  6134  007C                     	ds	2
  6135  007E                     ??_saveState:	
  6136                           
  6137                           	psect	cstackBANK0
  6138  0020                     __pcstackBANK0:	
  6139                           ; 1 bytes @ 0xE
  6140                           
  6141  0020                     ??_SetBitMask:	
  6142  0020                     ?i1___aldiv:	
  6143                           ; 1 bytes @ 0x0
  6144                           
  6145  0020                     i1___aldiv@divisor:	
  6146                           ; 4 bytes @ 0x0
  6147                           
  6148                           
  6149                           ; 4 bytes @ 0x0
  6150  0020                     	ds	4
  6151  0024                     i1___aldiv@dividend:	
  6152                           
  6153                           ; 4 bytes @ 0x4
  6154  0024                     	ds	2
  6155  0026                     SetBitMask@mask:	
  6156                           
  6157                           ; 2 bytes @ 0x6
  6158  0026                     	ds	2
  6159  0028                     i1___aldiv@counter:	
  6160  0028                     SetBitMask@shiftCount:	
  6161                           ; 1 bytes @ 0x8
  6162                           
  6163                           
  6164                           ; 2 bytes @ 0x8
  6165  0028                     	ds	1
  6166  0029                     i1___aldiv@sign:	
  6167                           
  6168                           ; 1 bytes @ 0x9
  6169  0029                     	ds	1
  6170  002A                     ??_savePreset:	
  6171  002A                     i1___aldiv@quotient:	
  6172                           ; 1 bytes @ 0xA
  6173                           
  6174                           
  6175                           ; 4 bytes @ 0xA
  6176  002A                     	ds	4
  6177  002E                     ?_modulation:	
  6178  002E                     savePreset@r:	
  6179                           ; 4 bytes @ 0xE
  6180                           
  6181  002E                     modulation@x:	
  6182                           ; 1 bytes @ 0xE
  6183                           
  6184                           
  6185                           ; 4 bytes @ 0xE
  6186  002E                     	ds	1
  6187  002F                     savePreset@symm:	
  6188                           
  6189                           ; 1 bytes @ 0xF
  6190  002F                     	ds	1
  6191  0030                     savePreset@dep:	
  6192                           
  6193                           ; 1 bytes @ 0x10
  6194  0030                     	ds	1
  6195  0031                     savePreset@presetChannel:	
  6196                           
  6197                           ; 1 bytes @ 0x11
  6198  0031                     	ds	1
  6199  0032                     savePreset@bankID:	
  6200  0032                     modulation@y:	
  6201                           ; 1 bytes @ 0x12
  6202                           
  6203                           
  6204                           ; 4 bytes @ 0x12
  6205  0032                     	ds	1
  6206  0033                     savePreset@presets:	
  6207                           
  6208                           ; 30 bytes @ 0x13
  6209  0033                     	ds	3
  6210  0036                     ??_modulation:	
  6211                           
  6212                           ; 1 bytes @ 0x16
  6213  0036                     	ds	27
  6214  0051                     savePreset@bankChannel:	
  6215                           
  6216                           ; 1 bytes @ 0x31
  6217  0051                     	ds	1
  6218  0052                     ??_isr:	
  6219                           
  6220                           ; 1 bytes @ 0x32
  6221  0052                     	ds	6
  6222  0058                     isr@subDiv:	
  6223                           
  6224                           ; 1 bytes @ 0x38
  6225  0058                     	ds	1
  6226                           
  6227                           	psect	maintext
  6228  1810                     __pmaintext:	
  6229 ;;
  6230 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  6231 ;;
  6232 ;; *************** function _main *****************
  6233 ;; Defined at:
  6234 ;;		line 80 in file "main.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;		None
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;  tapCntDiviso    2   61[BANK3 ] int 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      void 
  6241 ;; Registers used:
  6242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : B1F/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6249 ;;      Locals:         0       0       0       0      11       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6250 ;;      Temps:          0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6251 ;;      Totals:         0       0       0       0      17       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6252 ;;Total ram usage:       17 bytes
  6253 ;; Hardware stack levels required when called:   12
  6254 ;; This function calls:
  6255 ;;		_ConfigureOscillator
  6256 ;;		_InitApp
  6257 ;;		_InitSubdivision
  6258 ;;		_InitWaveform
  6259 ;;		_InitializeTaps
  6260 ;;		_USARTDataAvailable
  6261 ;;		_USARTInit
  6262 ;;		_USARTReadBuffer
  6263 ;;		___aldiv
  6264 ;;		___awtoft
  6265 ;;		___fttol
  6266 ;;		___lbtoft
  6267 ;;		_adc_convert
  6268 ;;		_calcCosArray
  6269 ;;		_getDepth
  6270 ;;		_getFrequency
  6271 ;;		_getModulationDelayTime
  6272 ;;		_getSymmetry
  6273 ;;		_getVolume
  6274 ;;		_initSwitchBypass
  6275 ;;		_initSwitchTap
  6276 ;;		_map
  6277 ;;		_read_bottom_tactile
  6278 ;;		_read_top_tactile
  6279 ;;		_scaleA100kPot
  6280 ;;		_scaleA10kPot
  6281 ;;		_scaleiA10kPot
  6282 ;;		_setDepth
  6283 ;;		_setFrequency
  6284 ;;		_setLongBypassState
  6285 ;;		_setSwitchBypassState
  6286 ;;		_setSymmetry
  6287 ;;		_setVolume
  6288 ;;		_set_leds_bottom
  6289 ;;		_set_leds_top
  6290 ;;		_set_subdivision
  6291 ;;		_updateModulationArray
  6292 ;;		_updateSubdivisionState
  6293 ;;		_updateSwitchBypass
  6294 ;;		_updateSwitchTap
  6295 ;;		_updateTapTime
  6296 ;;		_updateWaveFormState
  6297 ;;		_update_mode
  6298 ;;		_update_selectMode
  6299 ;; This function is called by:
  6300 ;;		Startup code after reset
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           
  6305                           ;psect for function _main
  6306  1810                     _main:	
  6307                           
  6308                           ;main.c: 81: LATBbits.LATB5 = 0;
  6309                           
  6310                           ;incstack = 0
  6311                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6312  1810  0022               	movlb	2	; select bank2
  6313  1811  128D               	bcf	13,5	;volatile
  6314                           
  6315                           ;main.c: 83: calcCosArray();
  6316  1812  31AE  26FD  3198   	fcall	_calcCosArray
  6317                           
  6318                           ;main.c: 85: USARTInit(31250);
  6319  1815  3012               	movlw	18
  6320  1816  0021               	movlb	1	; select bank1
  6321  1817  00A0               	movwf	USARTInit@baud_rate^(0+128)
  6322  1818  307A               	movlw	122
  6323  1819  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  6324  181A  31A9  2141  3198   	fcall	_USARTInit
  6325                           
  6326                           ;main.c: 86: ConfigureOscillator();
  6327  181D  31BF  279F  3198   	fcall	_ConfigureOscillator
  6328                           
  6329                           ;main.c: 87: InitApp();
  6330  1820  31B4  24E5  3198   	fcall	_InitApp
  6331                           
  6332                           ;main.c: 89: LATBbits.LATB0 = 0;
  6333  1823  0022               	movlb	2	; select bank2
  6334  1824  100D               	bcf	13,0	;volatile
  6335                           
  6336                           ;main.c: 90: LATBbits.LATB1 = 0;
  6337  1825  108D               	bcf	13,1	;volatile
  6338                           
  6339                           ;main.c: 91: LATBbits.LATB4 = 0;
  6340  1826  120D               	bcf	13,4	;volatile
  6341                           
  6342                           ;main.c: 92: LATBbits.LATB5 = 0;
  6343  1827  128D               	bcf	13,5	;volatile
  6344                           
  6345                           ;main.c: 94: PORTEbits.RE0 = 1;
  6346  1828  0020               	movlb	0	; select bank0
  6347  1829  1410               	bsf	16,0	;volatile
  6348                           
  6349                           ;main.c: 95: PORTEbits.RE1 = 1;
  6350  182A  1490               	bsf	16,1	;volatile
  6351                           
  6352                           ;main.c: 96: PORTDbits.RD6 = 1;
  6353  182B  170F               	bsf	15,6	;volatile
  6354                           
  6355                           ;main.c: 97: PORTDbits.RD5 = 1;
  6356  182C  168F               	bsf	15,5	;volatile
  6357                           
  6358                           ;main.c: 98: PORTCbits.RC0 = 1;
  6359  182D  140E               	bsf	14,0	;volatile
  6360                           
  6361                           ;main.c: 99: PORTDbits.RD7 = 1;
  6362  182E  178F               	bsf	15,7	;volatile
  6363                           
  6364                           ;main.c: 101: initSwitchTap();
  6365  182F  31B0  2071  3198   	fcall	_initSwitchTap
  6366                           
  6367                           ;main.c: 102: InitWaveform();
  6368  1832  31B6  261D  3198   	fcall	_InitWaveform
  6369                           
  6370                           ;main.c: 103: InitSubdivision();
  6371  1835  31B6  26CB  3198   	fcall	_InitSubdivision
  6372                           
  6373                           ;main.c: 104: InitializeTaps();
  6374  1838  31B3  2330  3198   	fcall	_InitializeTaps
  6375                           
  6376                           ;main.c: 106: initSwitchBypass();
  6377  183B  31B1  2133  3198   	fcall	_initSwitchBypass
  6378                           
  6379                           ;main.c: 109: knob1_prev = getVolume();
  6380  183E  3198  2000  3198   	fcall	_getVolume
  6381  1841  0022               	movlb	2	; select bank2
  6382  1842  0855               	movf	(?_getVolume+1)^(0+256),w
  6383  1843  0023               	movlb	3	; select bank3
  6384  1844  00E5               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  6385  1845  0022               	movlb	2	; select bank2
  6386  1846  0854               	movf	?_getVolume^(0+256),w
  6387  1847  0023               	movlb	3	; select bank3
  6388  1848  00E4               	movwf	_knob1_prev^(0+384)	;volatile
  6389                           
  6390                           ;main.c: 110: knob2_prev = getFrequency();
  6391  1849  31B0  20BD  3198   	fcall	_getFrequency
  6392  184C  0022               	movlb	2	; select bank2
  6393  184D  0855               	movf	(?_getFrequency+1)^(0+256),w
  6394  184E  0023               	movlb	3	; select bank3
  6395  184F  00E7               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  6396  1850  0022               	movlb	2	; select bank2
  6397  1851  0854               	movf	?_getFrequency^(0+256),w
  6398  1852  0023               	movlb	3	; select bank3
  6399  1853  00E6               	movwf	_knob2_prev^(0+384)	;volatile
  6400                           
  6401                           ;main.c: 111: knob3_prev = getSymmetry();
  6402  1854  31B0  20CD  3198   	fcall	_getSymmetry
  6403  1857  0022               	movlb	2	; select bank2
  6404  1858  0855               	movf	(?_getSymmetry+1)^(0+256),w
  6405  1859  0023               	movlb	3	; select bank3
  6406  185A  00E9               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  6407  185B  0022               	movlb	2	; select bank2
  6408  185C  0854               	movf	?_getSymmetry^(0+256),w
  6409  185D  0023               	movlb	3	; select bank3
  6410  185E  00E8               	movwf	_knob3_prev^(0+384)	;volatile
  6411                           
  6412                           ;main.c: 112: knob5_prev = getDepth();
  6413  185F  31B0  20AD  3198   	fcall	_getDepth
  6414  1862  0022               	movlb	2	; select bank2
  6415  1863  0855               	movf	(?_getDepth+1)^(0+256),w
  6416  1864  0024               	movlb	4	; select bank4
  6417  1865  00DE               	movwf	(_knob5_prev+1)^(0+512)	;volatile
  6418  1866  0022               	movlb	2	; select bank2
  6419  1867  0854               	movf	?_getDepth^(0+256),w
  6420  1868  0024               	movlb	4	; select bank4
  6421  1869  00DD               	movwf	_knob5_prev^(0+512)	;volatile
  6422                           
  6423                           ;main.c: 114: if (knob3_prev > 1023) {
  6424  186A  0023               	movlb	3	; select bank3
  6425  186B  0869               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  6426  186C  3A80               	xorlw	128
  6427  186D  00D1               	movwf	??_main^(0+384)
  6428  186E  3084               	movlw	132
  6429  186F  0251               	subwf	??_main^(0+384),w
  6430  1870  1D03               	skipz
  6431  1871  2874               	goto	u8775
  6432  1872  3000               	movlw	0
  6433  1873  0268               	subwf	_knob3_prev^(0+384),w	;volatile
  6434  1874                     u8775:	
  6435  1874  1C03               	skipc
  6436  1875  2878               	goto	l8625
  6437                           
  6438                           ;main.c: 115: LATBbits.LATB1 = 1;
  6439  1876  0022               	movlb	2	; select bank2
  6440  1877  148D               	bsf	13,1	;volatile
  6441  1878                     l8625:	
  6442                           
  6443                           ;main.c: 116: }
  6444                           ;main.c: 118: setVolume(knob1_prev);
  6445  1878  0023               	movlb	3	; select bank3
  6446  1879  0865               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  6447  187A  0022               	movlb	2	; select bank2
  6448  187B  00EB               	movwf	(setVolume@rawValue+1)^(0+256)
  6449  187C  0023               	movlb	3	; select bank3
  6450  187D  0864               	movf	_knob1_prev^(0+384),w	;volatile
  6451  187E  0022               	movlb	2	; select bank2
  6452  187F  00EA               	movwf	setVolume@rawValue^(0+256)
  6453  1880  31AD  25A6  3198   	fcall	_setVolume
  6454                           
  6455                           ;main.c: 119: setFrequency(knob2_prev);
  6456  1883  0023               	movlb	3	; select bank3
  6457  1884  0867               	movf	(_knob2_prev+1)^(0+384),w	;volatile
  6458  1885  0022               	movlb	2	; select bank2
  6459  1886  00EB               	movwf	(setFrequency@rawValue+1)^(0+256)
  6460  1887  0023               	movlb	3	; select bank3
  6461  1888  0866               	movf	_knob2_prev^(0+384),w	;volatile
  6462  1889  0022               	movlb	2	; select bank2
  6463  188A  00EA               	movwf	setFrequency@rawValue^(0+256)
  6464  188B  31A2  226A  3198   	fcall	_setFrequency
  6465  188E                     l8627:	
  6466                           ;main.c: 128: while (1) {
  6467                           
  6468                           
  6469                           ;main.c: 130: oldSymmetry = symmetry;
  6470  188E  0023               	movlb	3	; select bank3
  6471  188F  086B               	movf	(_symmetry+1)^(0+384),w
  6472  1890  0025               	movlb	5	; select bank5
  6473  1891  00EB               	movwf	(_oldSymmetry+1)^(0+640)
  6474  1892  0023               	movlb	3	; select bank3
  6475  1893  086A               	movf	_symmetry^(0+384),w
  6476  1894  0025               	movlb	5	; select bank5
  6477  1895  00EA               	movwf	_oldSymmetry^(0+640)
  6478                           
  6479                           ;main.c: 131: oldBaseTime = baseline_mod_time;
  6480  1896  0020               	movlb	0	; select bank0
  6481  1897  086B               	movf	_baseline_mod_time+1,w	;volatile
  6482  1898  0025               	movlb	5	; select bank5
  6483  1899  00E9               	movwf	(_oldBaseTime+1)^(0+640)
  6484  189A  0020               	movlb	0	; select bank0
  6485  189B  086A               	movf	_baseline_mod_time,w	;volatile
  6486  189C  0025               	movlb	5	; select bank5
  6487  189D  00E8               	movwf	_oldBaseTime^(0+640)
  6488                           
  6489                           ;main.c: 134: n = USARTDataAvailable();
  6490  189E  31B3  23D3  3198   	fcall	_USARTDataAvailable
  6491  18A1  0023               	movlb	3	; select bank3
  6492  18A2  00D1               	movwf	??_main^(0+384)
  6493  18A3  0851               	movf	??_main^(0+384),w
  6494  18A4  0024               	movlb	4	; select bank4
  6495  18A5  00CF               	movwf	_n^(0+512)
  6496                           
  6497                           ;main.c: 137: if (n > 2) {
  6498  18A6  3003               	movlw	3
  6499  18A7  024F               	subwf	_n^(0+512),w
  6500  18A8  1C03               	skipc
  6501  18A9  28D1               	goto	L26
  6502                           
  6503                           ;main.c: 138: LATBbits.LATB1 = 1;
  6504  18AA  0022               	movlb	2	; select bank2
  6505  18AB  148D               	bsf	13,1	;volatile
  6506                           
  6507                           ;main.c: 140: USARTReadBuffer(midiBuff, n);
  6508  18AC  0024               	movlb	4	; select bank4
  6509  18AD  084F               	movf	_n^(0+512),w
  6510  18AE  0023               	movlb	3	; select bank3
  6511  18AF  00D1               	movwf	??_main^(0+384)
  6512  18B0  01D2               	clrf	(??_main^(0+384)+1)
  6513  18B1  0851               	movf	??_main^(0+384),w
  6514  18B2  0021               	movlb	1	; select bank1
  6515  18B3  00A2               	movwf	USARTReadBuffer@len^(0+128)
  6516  18B4  0023               	movlb	3	; select bank3
  6517  18B5  0852               	movf	(??_main+1)^(0+384),w
  6518  18B6  0021               	movlb	1	; select bank1
  6519  18B7  00A3               	movwf	(USARTReadBuffer@len+1)^(0+128)
  6520  18B8  3020               	movlw	(low (_midiBuff| (0+768)))& (0+255)
  6521  18B9  31B2  228C  3198   	fcall	_USARTReadBuffer
  6522                           
  6523                           ;main.c: 141: if (n > 2) {
  6524  18BC  3003               	movlw	3
  6525  18BD  0024               	movlb	4	; select bank4
  6526  18BE  024F               	subwf	_n^(0+512),w
  6527  18BF  1C03               	skipc
  6528  18C0  28D1               	goto	L26
  6529                           
  6530                           ;main.c: 142: if (midiBuff[0] >= 176 && midiBuff[0] < 192) {
  6531  18C1  30B0               	movlw	176
  6532  18C2  0026               	movlb	6	; select bank6
  6533  18C3  0220               	subwf	_midiBuff^(0+768),w
  6534  18C4  1C03               	skipc
  6535  18C5  28D1               	goto	L26
  6536  18C6  30C0               	movlw	192
  6537  18C7  0220               	subwf	_midiBuff^(0+768),w
  6538  18C8  1803               	skipnc
  6539  18C9  28D1               	goto	L26
  6540                           
  6541                           ;main.c: 144: midiBuff[0] -= 175;
  6542  18CA  30AF               	movlw	175
  6543  18CB  02A0               	subwf	_midiBuff^(0+768),f
  6544                           
  6545                           ;main.c: 145: if (midiBuff[0] == 14) {
  6546  18CC  300E               	movlw	14
  6547  18CD  0620               	xorwf	_midiBuff^(0+768),w
  6548  18CE  318C  1903         	btfsc	3,2
  6549  18D0  2C77               	goto	l8757
  6550  18D1                     L26:	
  6551  18D1  318C  2C95         	goto	l8759
  6552  18D3                     l8649:	
  6553                           ;main.c: 147: case 102:
  6554                           
  6555                           ;main.c: 146: switch (midiBuff[1]) {
  6556                           
  6557                           
  6558                           ;main.c: 148: if (midiBuff[2] == 127) {
  6559  18D3  307F               	movlw	127
  6560  18D4  0622               	xorwf	(_midiBuff^(0+768)+2),w
  6561  18D5  1D03               	btfss	3,2
  6562  18D6  28EE               	goto	l8657
  6563                           
  6564                           ;main.c: 149: if (switchBypass_state == 0) {setSwitchBypassState(1);}
  6565  18D7  0023               	movlb	3	; select bank3
  6566  18D8  086E               	movf	_switchBypass_state^(0+384),w
  6567  18D9  1D03               	btfss	3,2
  6568  18DA  28E3               	goto	l8655
  6569  18DB  3001               	movlw	1
  6570  18DC  0021               	movlb	1	; select bank1
  6571  18DD  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  6572  18DE  3000               	movlw	0
  6573  18DF  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  6574  18E0  31B2  2254  3198   	fcall	_setSwitchBypassState
  6575  18E3                     l8655:	
  6576                           
  6577                           ;main.c: 150: LATBbits.LATB2 = 0;
  6578  18E3  0022               	movlb	2	; select bank2
  6579  18E4  110D               	bcf	13,2	;volatile
  6580                           
  6581                           ;main.c: 151: setLongBypassState(1);
  6582  18E5  3001               	movlw	1
  6583  18E6  0021               	movlb	1	; select bank1
  6584  18E7  00A0               	movwf	setLongBypassState@f_state^(0+128)
  6585  18E8  3000               	movlw	0
  6586  18E9  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  6587  18EA  31B2  22CB  3198   	fcall	_setLongBypassState
  6588                           
  6589                           ;main.c: 152: } else if (midiBuff[2] == 126) {
  6590  18ED  28D1               	goto	L26
  6591  18EE                     l8657:	
  6592  18EE  307E               	movlw	126
  6593  18EF  0026               	movlb	6	; select bank6
  6594  18F0  0622               	xorwf	(_midiBuff^(0+768)+2),w
  6595  18F1  3188  1D03         	btfss	3,2
  6596  18F3  288D               	goto	l8661
  6597                           
  6598                           ;main.c: 153: setSwitchBypassState(1);
  6599  18F4  3001               	movlw	1
  6600  18F5  0021               	movlb	1	; select bank1
  6601  18F6  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  6602  18F7  3000               	movlw	0
  6603  18F8  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  6604  18F9  31B2  2254  3198   	fcall	_setSwitchBypassState
  6605                           
  6606                           ;main.c: 154: setLongBypassState(0);
  6607  18FC  3000               	movlw	0
  6608  18FD  0021               	movlb	1	; select bank1
  6609  18FE  00A0               	movwf	setLongBypassState@f_state^(0+128)
  6610  18FF  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  6611  1900  31B2  22CB  3198   	fcall	_setLongBypassState
  6612                           
  6613                           ;main.c: 155: } else if (midiBuff[2] < 64) {
  6614  1903  28D1               	goto	L26
  6615                           
  6616                           	psect	text1
  6617  2CE8                     __ptext1:	
  6618 ;; *************** function _update_selectMode *****************
  6619 ;; Defined at:
  6620 ;;		line 162 in file "tactiles.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;		None
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;		None
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      void 
  6627 ;; Registers used:
  6628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6636 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6637 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6638 ;;Total ram usage:        1 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    7
  6641 ;; This function calls:
  6642 ;;		_setExpressionDisplay
  6643 ;;		_setPresetDisplay
  6644 ;; This function is called by:
  6645 ;;		_main
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           
  6650                           ;psect for function _update_selectMode
  6651  2CE8                     _update_selectMode:	
  6652                           
  6653                           ;tactiles.c: 163: if (mode2_state == 0 && presetSaveMode != 1) {
  6654                           
  6655                           ;incstack = 0
  6656                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6657  2CE8  0020               	movlb	0	; select bank0
  6658  2CE9  0864               	movf	_mode2_state,w
  6659  2CEA  1D03               	btfss	3,2
  6660  2CEB  2CEF               	goto	l1164
  6661  2CEC  0365               	decf	_presetSaveMode,w
  6662  2CED  1D03               	btfss	3,2
  6663  2CEE  0008               	return
  6664  2CEF                     l1164:	
  6665                           ;tactiles.c: 165: return;
  6666                           
  6667                           
  6668                           ;tactiles.c: 166: }
  6669                           ;tactiles.c: 167: if (PORTDbits.RD7 == 0) {
  6670  2CEF  1B8F               	btfsc	15,7	;volatile
  6671  2CF0  2D3D               	goto	l8001
  6672                           
  6673                           ;tactiles.c: 168: debounce_mode1++;
  6674  2CF1  3001               	movlw	1
  6675  2CF2  0025               	movlb	5	; select bank5
  6676  2CF3  07E0               	addwf	_debounce_mode1^(0+640),f
  6677  2CF4  3000               	movlw	0
  6678  2CF5  3DE1               	addwfc	(_debounce_mode1+1)^(0+640),f
  6679                           
  6680                           ;tactiles.c: 169: if (debounce_mode1 > 25) {
  6681  2CF6  0861               	movf	(_debounce_mode1+1)^(0+640),w
  6682  2CF7  3A80               	xorlw	128
  6683  2CF8  0021               	movlb	1	; select bank1
  6684  2CF9  00A7               	movwf	??_update_selectMode^(0+128)
  6685  2CFA  3080               	movlw	128
  6686  2CFB  0227               	subwf	??_update_selectMode^(0+128),w
  6687  2CFC  1D03               	skipz
  6688  2CFD  2D01               	goto	u7595
  6689  2CFE  301A               	movlw	26
  6690  2CFF  0025               	movlb	5	; select bank5
  6691  2D00  0260               	subwf	_debounce_mode1^(0+640),w
  6692  2D01                     u7595:	
  6693  2D01  1C03               	skipc
  6694  2D02  0008               	return
  6695                           
  6696                           ;tactiles.c: 170: debounce_mode1 = 25;
  6697  2D03  3019               	movlw	25
  6698  2D04  0025               	movlb	5	; select bank5
  6699  2D05  00E0               	movwf	_debounce_mode1^(0+640)
  6700  2D06  3000               	movlw	0
  6701  2D07  00E1               	movwf	(_debounce_mode1^(0+640)+1)
  6702                           
  6703                           ;tactiles.c: 171: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6704  2D08  0020               	movlb	0	; select bank0
  6705  2D09  0864               	movf	_mode2_state,w
  6706  2D0A  0024               	movlb	4	; select bank4
  6707  2D0B  066D               	xorwf	_presetModeCnst^(0+512),w
  6708  2D0C  1903               	skipnz
  6709  2D0D  2D12               	goto	l7983
  6710  2D0E  0020               	movlb	0	; select bank0
  6711  2D0F  0365               	decf	_presetSaveMode,w
  6712  2D10  1D03               	btfss	3,2
  6713  2D11  2D23               	goto	l7991
  6714  2D12                     l7983:	
  6715                           
  6716                           ;tactiles.c: 172: presetChannel++;
  6717  2D12  3001               	movlw	1
  6718  2D13  0021               	movlb	1	; select bank1
  6719  2D14  00A7               	movwf	??_update_selectMode^(0+128)
  6720  2D15  0827               	movf	??_update_selectMode^(0+128),w
  6721  2D16  0023               	movlb	3	; select bank3
  6722  2D17  07ED               	addwf	_presetChannel^(0+384),f
  6723                           
  6724                           ;tactiles.c: 173: if (presetChannel > 10) {
  6725  2D18  300B               	movlw	11
  6726  2D19  026D               	subwf	_presetChannel^(0+384),w
  6727  2D1A  1C03               	skipc
  6728  2D1B  2D1E               	goto	l7989
  6729                           
  6730                           ;tactiles.c: 174: presetChannel = 1;
  6731  2D1C  01ED               	clrf	_presetChannel^(0+384)
  6732  2D1D  0AED               	incf	_presetChannel^(0+384),f
  6733  2D1E                     l7989:	
  6734                           
  6735                           ;tactiles.c: 175: }
  6736                           ;tactiles.c: 176: setPresetDisplay(presetChannel);
  6737  2D1E  086D               	movf	_presetChannel^(0+384),w
  6738  2D1F  31B6  2656  31AC   	fcall	_setPresetDisplay
  6739                           
  6740                           ;tactiles.c: 177: } else if (mode2_state == expressModeCnst) {
  6741  2D22  2D39               	goto	l1175
  6742  2D23                     l7991:	
  6743  2D23  0020               	movlb	0	; select bank0
  6744  2D24  0864               	movf	_mode2_state,w
  6745  2D25  0024               	movlb	4	; select bank4
  6746  2D26  066A               	xorwf	_expressModeCnst^(0+512),w
  6747  2D27  1D03               	skipz
  6748  2D28  2D39               	goto	l1175
  6749                           
  6750                           ;tactiles.c: 178: expressionChannel++;
  6751  2D29  3001               	movlw	1
  6752  2D2A  0021               	movlb	1	; select bank1
  6753  2D2B  00A7               	movwf	??_update_selectMode^(0+128)
  6754  2D2C  0827               	movf	??_update_selectMode^(0+128),w
  6755  2D2D  0024               	movlb	4	; select bank4
  6756  2D2E  07EB               	addwf	_expressionChannel^(0+512),f
  6757                           
  6758                           ;tactiles.c: 179: if (expressionChannel > 5) {
  6759  2D2F  3006               	movlw	6
  6760  2D30  026B               	subwf	_expressionChannel^(0+512),w
  6761  2D31  1C03               	skipc
  6762  2D32  2D35               	goto	l7999
  6763                           
  6764                           ;tactiles.c: 180: expressionChannel = 1;
  6765  2D33  01EB               	clrf	_expressionChannel^(0+512)
  6766  2D34  0AEB               	incf	_expressionChannel^(0+512),f
  6767  2D35                     l7999:	
  6768                           
  6769                           ;tactiles.c: 181: }
  6770                           ;tactiles.c: 182: setExpressionDisplay(expressionChannel);
  6771  2D35  086B               	movf	_expressionChannel^(0+512),w
  6772  2D36  31B1  2183  31AC   	fcall	_setExpressionDisplay
  6773  2D39                     l1175:	
  6774                           ;tactiles.c: 183: }
  6775                           ;tactiles.c: 190: while (PORTDbits.RD7 == 0) {
  6776                           
  6777  2D39  0020               	movlb	0	; select bank0
  6778  2D3A  1B8F               	btfsc	15,7	;volatile
  6779  2D3B  0008               	return
  6780  2D3C  2D39               	goto	l1175
  6781  2D3D                     l8001:	
  6782                           ;tactiles.c: 191: }
  6783                           ;tactiles.c: 192: }
  6784                           ;tactiles.c: 193: } else {
  6785                           
  6786                           
  6787                           ;tactiles.c: 194: debounce_mode1 = 0;
  6788  2D3D  0025               	movlb	5	; select bank5
  6789  2D3E  01E0               	clrf	_debounce_mode1^(0+640)
  6790  2D3F  01E1               	clrf	(_debounce_mode1+1)^(0+640)
  6791  2D40  0008               	return
  6792  2D41                     __end_of_update_selectMode:	
  6793                           
  6794                           	psect	text2
  6795  35E5                     __ptext2:	
  6796 ;; *************** function _update_mode *****************
  6797 ;; Defined at:
  6798 ;;		line 109 in file "tactiles.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;		None
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;		None
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      void 
  6805 ;; Registers used:
  6806 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6814 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6815 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6816 ;;Total ram usage:        1 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    8
  6819 ;; This function calls:
  6820 ;;		_resetRingLEDs
  6821 ;;		_setPedalMode
  6822 ;; This function is called by:
  6823 ;;		_main
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           
  6828                           ;psect for function _update_mode
  6829  35E5                     _update_mode:	
  6830                           
  6831                           ;tactiles.c: 114: if (PORTCbits.RC0 == 0) {
  6832                           
  6833                           ;incstack = 0
  6834                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6835  35E5  0020               	movlb	0	; select bank0
  6836  35E6  180E               	btfsc	14,0	;volatile
  6837  35E7  2E19               	goto	l7969
  6838                           
  6839                           ;tactiles.c: 117: debounce_mode2++;
  6840  35E8  3001               	movlw	1
  6841  35E9  0025               	movlb	5	; select bank5
  6842  35EA  07E2               	addwf	_debounce_mode2^(0+640),f
  6843  35EB  3000               	movlw	0
  6844  35EC  3DE3               	addwfc	(_debounce_mode2+1)^(0+640),f
  6845                           
  6846                           ;tactiles.c: 118: if (debounce_mode2 > 25) {
  6847  35ED  0863               	movf	(_debounce_mode2+1)^(0+640),w
  6848  35EE  3A80               	xorlw	128
  6849  35EF  0021               	movlb	1	; select bank1
  6850  35F0  00A7               	movwf	??_update_mode^(0+128)
  6851  35F1  3080               	movlw	128
  6852  35F2  0227               	subwf	??_update_mode^(0+128),w
  6853  35F3  1D03               	skipz
  6854  35F4  2DF8               	goto	u7525
  6855  35F5  301A               	movlw	26
  6856  35F6  0025               	movlb	5	; select bank5
  6857  35F7  0262               	subwf	_debounce_mode2^(0+640),w
  6858  35F8                     u7525:	
  6859  35F8  1C03               	skipc
  6860  35F9  0008               	return
  6861                           
  6862                           ;tactiles.c: 119: debounce_mode2 = 25;
  6863  35FA  3019               	movlw	25
  6864  35FB  0025               	movlb	5	; select bank5
  6865  35FC  00E2               	movwf	_debounce_mode2^(0+640)
  6866  35FD  3000               	movlw	0
  6867  35FE  00E3               	movwf	(_debounce_mode2^(0+640)+1)
  6868                           
  6869                           ;tactiles.c: 121: if (presetSaveMode == 1) {
  6870  35FF  0020               	movlb	0	; select bank0
  6871  3600  0365               	decf	_presetSaveMode,w
  6872  3601  1D03               	btfss	3,2
  6873  3602  2E08               	goto	l7961
  6874                           
  6875                           ;tactiles.c: 122: presetSaveMode = 0;
  6876  3603  01E5               	clrf	_presetSaveMode
  6877                           
  6878                           ;tactiles.c: 123: resetRingLEDs();
  6879  3604  31B1  21CD  31B5   	fcall	_resetRingLEDs
  6880                           
  6881                           ;tactiles.c: 124: } else {
  6882  3607  2E12               	goto	l7967
  6883  3608                     l7961:	
  6884                           
  6885                           ;tactiles.c: 125: mode2_state++;
  6886  3608  3001               	movlw	1
  6887  3609  0021               	movlb	1	; select bank1
  6888  360A  00A7               	movwf	??_update_mode^(0+128)
  6889  360B  0827               	movf	??_update_mode^(0+128),w
  6890  360C  0020               	movlb	0	; select bank0
  6891  360D  07E4               	addwf	_mode2_state,f
  6892                           
  6893                           ;tactiles.c: 126: if (mode2_state > 2) {
  6894  360E  3003               	movlw	3
  6895  360F  0264               	subwf	_mode2_state,w
  6896  3610  1803               	btfsc	3,0
  6897                           
  6898                           ;tactiles.c: 127: mode2_state = 0;
  6899  3611  01E4               	clrf	_mode2_state
  6900  3612                     l7967:	
  6901                           
  6902                           ;tactiles.c: 128: }
  6903                           ;tactiles.c: 129: }
  6904                           ;tactiles.c: 131: setPedalMode();
  6905  3612  31B3  2356  31B5   	fcall	_setPedalMode
  6906  3615                     l1149:	
  6907                           ;tactiles.c: 132: while (PORTCbits.RC0 == 0) {
  6908                           
  6909  3615  0020               	movlb	0	; select bank0
  6910  3616  180E               	btfsc	14,0	;volatile
  6911  3617  0008               	return
  6912  3618  2E15               	goto	l1149
  6913  3619                     l7969:	
  6914                           ;tactiles.c: 133: }
  6915                           ;tactiles.c: 134: }
  6916                           ;tactiles.c: 135: } else {
  6917                           
  6918                           
  6919                           ;tactiles.c: 136: debounce_mode2 = 0;
  6920  3619  0025               	movlb	5	; select bank5
  6921  361A  01E2               	clrf	_debounce_mode2^(0+640)
  6922  361B  01E3               	clrf	(_debounce_mode2+1)^(0+640)
  6923  361C  0008               	return
  6924  361D                     __end_of_update_mode:	
  6925                           
  6926                           	psect	text3
  6927  1623                     __ptext3:	
  6928 ;; *************** function _updateSwitchTap *****************
  6929 ;; Defined at:
  6930 ;;		line 52 in file "SwitchTap.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;		None
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6935 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      void 
  6938 ;; Registers used:
  6939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6946 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6947 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6948 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6949 ;;Total ram usage:        9 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:   10
  6952 ;; This function calls:
  6953 ;;		___aldiv
  6954 ;;		_setDoublePressState
  6955 ;;		_setLongTapState
  6956 ;;		_updateTapTime
  6957 ;; This function is called by:
  6958 ;;		_main
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           
  6963                           ;psect for function _updateSwitchTap
  6964  1623                     _updateSwitchTap:	
  6965                           
  6966                           ;SwitchTap.c: 53: uint8_t iCnt = 0;
  6967                           
  6968                           ;incstack = 0
  6969                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6970  1623  0021               	movlb	1	; select bank1
  6971  1624  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6972                           
  6973                           ;SwitchTap.c: 61: if (PORTEbits.RE0 == 0) {
  6974  1625  0020               	movlb	0	; select bank0
  6975  1626  1810               	btfsc	16,0	;volatile
  6976  1627  2E2F               	goto	l8119
  6977                           
  6978                           ;SwitchTap.c: 62: if (switchTap_pressed > 0) {
  6979  1628  0024               	movlb	4	; select bank4
  6980  1629  0856               	movf	_switchTap_pressed^(0+512),w
  6981  162A  1903               	btfsc	3,2
  6982  162B  2E3A               	goto	l1717
  6983                           
  6984                           ;SwitchTap.c: 63: switchTap_pressed--;
  6985  162C  3001               	movlw	1
  6986  162D  02D6               	subwf	_switchTap_pressed^(0+512),f
  6987                           
  6988                           ;SwitchTap.c: 64: }
  6989                           ;SwitchTap.c: 65: } else if (switchTap_pressed < 25) {
  6990  162E  2E3A               	goto	l1717
  6991  162F                     l8119:	
  6992  162F  3019               	movlw	25
  6993  1630  0024               	movlb	4	; select bank4
  6994  1631  0256               	subwf	_switchTap_pressed^(0+512),w
  6995  1632  1803               	skipnc
  6996  1633  2E3A               	goto	l1717
  6997                           
  6998                           ;SwitchTap.c: 66: switchTap_pressed++;
  6999  1634  3001               	movlw	1
  7000  1635  0021               	movlb	1	; select bank1
  7001  1636  00BC               	movwf	??_updateSwitchTap^(0+128)
  7002  1637  083C               	movf	??_updateSwitchTap^(0+128),w
  7003  1638  0024               	movlb	4	; select bank4
  7004  1639  07D6               	addwf	_switchTap_pressed^(0+512),f
  7005  163A                     l1717:	
  7006                           
  7007                           ;SwitchTap.c: 67: }
  7008                           ;SwitchTap.c: 73: if (switchTap_pressed == 0) {
  7009  163A  0856               	movf	_switchTap_pressed^(0+512),w
  7010  163B  1D03               	btfss	3,2
  7011  163C  2FE8               	goto	l8205
  7012                           
  7013                           ;SwitchTap.c: 77: if (tap_timer >= 1563) {
  7014  163D  0020               	movlb	0	; select bank0
  7015  163E  1BDC               	btfsc	_tap_timer+3,7	;volatile
  7016  163F  2EC0               	goto	l8163
  7017  1640  085C               	movf	_tap_timer+3,w	;volatile
  7018  1641  1D03               	btfss	3,2
  7019  1642  2E4C               	goto	l8125
  7020  1643  085B               	movf	_tap_timer+2,w	;volatile
  7021  1644  1D03               	btfss	3,2
  7022  1645  2E4C               	goto	l8125
  7023  1646  301B               	movlw	27
  7024  1647  0259               	subwf	_tap_timer,w	;volatile
  7025  1648  3006               	movlw	6
  7026  1649  3B5A               	subwfb	_tap_timer+1,w	;volatile
  7027  164A  1C03               	btfss	3,0
  7028  164B  2EC0               	goto	l8163
  7029  164C                     l8125:	
  7030                           
  7031                           ;SwitchTap.c: 80: if (switchTap_down != 1) {
  7032  164C  0024               	movlb	4	; select bank4
  7033  164D  0355               	decf	_switchTap_down^(0+512),w
  7034  164E  1903               	btfsc	3,2
  7035  164F  2E8B               	goto	l8141
  7036                           
  7037                           ;SwitchTap.c: 82: switchTap_down = 1;
  7038  1650  01D5               	clrf	_switchTap_down^(0+512)
  7039  1651  0AD5               	incf	_switchTap_down^(0+512),f
  7040                           
  7041                           ;SwitchTap.c: 83: tap_timer = 0;
  7042  1652  3000               	movlw	0
  7043  1653  0020               	movlb	0	; select bank0
  7044  1654  00DC               	movwf	_tap_timer+3	;volatile
  7045  1655  3000               	movlw	0
  7046  1656  00DB               	movwf	_tap_timer+2	;volatile
  7047  1657  3000               	movlw	0
  7048  1658  00DA               	movwf	_tap_timer+1	;volatile
  7049  1659  3000               	movlw	0
  7050  165A  00D9               	movwf	_tap_timer	;volatile
  7051                           
  7052                           ;SwitchTap.c: 84: tap_iteration = 1;
  7053  165B  3001               	movlw	1
  7054  165C  0024               	movlb	4	; select bank4
  7055  165D  00E5               	movwf	_tap_iteration^(0+512)
  7056  165E  3000               	movlw	0
  7057  165F  00E6               	movwf	(_tap_iteration^(0+512)+1)
  7058                           
  7059                           ;SwitchTap.c: 85: tap_total = 0;
  7060  1660  3000               	movlw	0
  7061  1661  0025               	movlb	5	; select bank5
  7062  1662  00D9               	movwf	(_tap_total+3)^(0+640)
  7063  1663  3000               	movlw	0
  7064  1664  00D8               	movwf	(_tap_total+2)^(0+640)
  7065  1665  3000               	movlw	0
  7066  1666  00D7               	movwf	(_tap_total+1)^(0+640)
  7067  1667  3000               	movlw	0
  7068  1668  00D6               	movwf	_tap_total^(0+640)
  7069                           
  7070                           ;SwitchTap.c: 86: mod_time_changed = 0;
  7071  1669  0024               	movlb	4	; select bank4
  7072  166A  01EC               	clrf	_mod_time_changed^(0+512)
  7073                           
  7074                           ;SwitchTap.c: 88: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7075  166B  0021               	movlb	1	; select bank1
  7076  166C  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7077  166D  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7078  166E                     l8139:	
  7079  166E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7080  166F  0023               	movlb	3	; select bank3
  7081  1670  026C               	subwf	_num_taps^(0+384),w
  7082  1671  1C03               	btfss	3,0
  7083  1672  2E8B               	goto	l8141
  7084                           
  7085                           ;SwitchTap.c: 89: tap_history[iCnt] = 0;
  7086  1673  0021               	movlb	1	; select bank1
  7087  1674  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7088  1675  00BC               	movwf	??_updateSwitchTap^(0+128)
  7089  1676  3001               	movlw	1
  7090  1677                     u7965:	
  7091  1677  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7092  1678  3EFF               	addlw	-1
  7093  1679  1D03               	skipz
  7094  167A  2E77               	goto	u7965
  7095  167B  353C               	lslf	??_updateSwitchTap^(0+128),w
  7096  167C  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7097  167D  0086               	movwf	6
  7098  167E  3002               	movlw	2	; select bank5/6
  7099  167F  0087               	movwf	7
  7100  1680  3000               	movlw	0
  7101  1681  3FC0               	movwi [0]fsr1
  7102  1682  3000               	movlw	0
  7103  1683  3FC1               	movwi [1]fsr1
  7104  1684  3FC2               	movwi [2]fsr1
  7105  1685  3FC3               	movwi [3]fsr1
  7106  1686  3001               	movlw	1
  7107  1687  00BC               	movwf	??_updateSwitchTap^(0+128)
  7108  1688  083C               	movf	??_updateSwitchTap^(0+128),w
  7109  1689  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7110  168A  2E6E               	goto	l8139
  7111  168B                     l8141:	
  7112                           
  7113                           ;SwitchTap.c: 90: }
  7114                           ;SwitchTap.c: 91: }
  7115                           ;SwitchTap.c: 94: if (longTap_start == 0) {
  7116  168B  0024               	movlb	4	; select bank4
  7117  168C  084C               	movf	_longTap_start^(0+512),w
  7118  168D  1D03               	btfss	3,2
  7119  168E  2E96               	goto	l8147
  7120                           
  7121                           ;SwitchTap.c: 95: longTap_start = 1;
  7122  168F  01CC               	clrf	_longTap_start^(0+512)
  7123  1690  0ACC               	incf	_longTap_start^(0+512),f
  7124                           
  7125                           ;SwitchTap.c: 96: longTap_state = 0;
  7126  1691  0020               	movlb	0	; select bank0
  7127  1692  01EF               	clrf	_longTap_state	;volatile
  7128                           
  7129                           ;SwitchTap.c: 97: longTap_timer = 0;
  7130  1693  0024               	movlb	4	; select bank4
  7131  1694  01BC               	clrf	_longTap_timer^(0+512)	;volatile
  7132  1695  01BD               	clrf	(_longTap_timer+1)^(0+512)	;volatile
  7133  1696                     l8147:	
  7134                           
  7135                           ;SwitchTap.c: 98: }
  7136                           ;SwitchTap.c: 102: if (longTap_timer >= long_press_limit && longTap_state == 0 && double
      +                          Tap_state == 0) {
  7137  1696  0860               	movf	(_long_press_limit+1)^(0+512),w
  7138  1697  023D               	subwf	(_longTap_timer+1)^(0+512),w	;volatile
  7139  1698  1D03               	skipz
  7140  1699  2E9C               	goto	u7995
  7141  169A  085F               	movf	_long_press_limit^(0+512),w
  7142  169B  023C               	subwf	_longTap_timer^(0+512),w	;volatile
  7143  169C                     u7995:	
  7144  169C  1C03               	skipc
  7145  169D  0008               	return
  7146  169E  0020               	movlb	0	; select bank0
  7147  169F  086F               	movf	_longTap_state,w	;volatile
  7148  16A0  1D03               	btfss	3,2
  7149  16A1  0008               	return
  7150  16A2  0861               	movf	_doubleTap_state,w	;volatile
  7151  16A3  1D03               	btfss	3,2
  7152  16A4  0008               	return
  7153                           
  7154                           ;SwitchTap.c: 104: longTap_timer = long_press_limit;
  7155  16A5  0024               	movlb	4	; select bank4
  7156  16A6  0860               	movf	(_long_press_limit+1)^(0+512),w
  7157  16A7  00BD               	movwf	(_longTap_timer+1)^(0+512)	;volatile
  7158  16A8  085F               	movf	_long_press_limit^(0+512),w
  7159  16A9  00BC               	movwf	_longTap_timer^(0+512)	;volatile
  7160                           
  7161                           ;SwitchTap.c: 106: LATBbits.LATB4 = 0;
  7162  16AA  0022               	movlb	2	; select bank2
  7163  16AB  120D               	bcf	13,4	;volatile
  7164                           
  7165                           ;SwitchTap.c: 107: if (longBypass_start != 1) {
  7166  16AC  0024               	movlb	4	; select bank4
  7167  16AD  034B               	decf	_longBypass_start^(0+512),w
  7168  16AE  1903               	btfsc	3,2
  7169  16AF  2EB8               	goto	l8161
  7170                           
  7171                           ;SwitchTap.c: 108: setLongTapState(1);
  7172  16B0  3001               	movlw	1
  7173  16B1  0021               	movlb	1	; select bank1
  7174  16B2  00A0               	movwf	setLongTapState@f_state^(0+128)
  7175  16B3  3000               	movlw	0
  7176  16B4  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7177  16B5  31B1  21E7         	fcall	_setLongTapState
  7178                           
  7179                           ;SwitchTap.c: 109: } else {
  7180  16B7  0008               	return
  7181  16B8                     l8161:	
  7182                           
  7183                           ;SwitchTap.c: 110: setDoublePressState(1);
  7184  16B8  3001               	movlw	1
  7185  16B9  0021               	movlb	1	; select bank1
  7186  16BA  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7187  16BB  3000               	movlw	0
  7188  16BC  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7189  16BD  31B7  2782         	fcall	_setDoublePressState
  7190                           
  7191                           ;SwitchTap.c: 111: }
  7192                           ;SwitchTap.c: 112: }
  7193                           ;SwitchTap.c: 114: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7194  16BF  0008               	return
  7195  16C0                     l8163:	
  7196  16C0  0020               	movlb	0	; select bank0
  7197  16C1  1BDC               	btfsc	_tap_timer+3,7	;volatile
  7198  16C2  2ECF               	goto	l8165
  7199  16C3  085C               	movf	_tap_timer+3,w	;volatile
  7200  16C4  1D03               	btfss	3,2
  7201  16C5  0008               	return
  7202  16C6  085B               	movf	_tap_timer+2,w	;volatile
  7203  16C7  1D03               	btfss	3,2
  7204  16C8  0008               	return
  7205  16C9  301B               	movlw	27
  7206  16CA  0259               	subwf	_tap_timer,w	;volatile
  7207  16CB  3006               	movlw	6
  7208  16CC  3B5A               	subwfb	_tap_timer+1,w	;volatile
  7209  16CD  1803               	btfsc	3,0
  7210  16CE  0008               	return
  7211  16CF                     l8165:	
  7212  16CF  086F               	movf	_longTap_state,w	;volatile
  7213  16D0  1D03               	btfss	3,2
  7214  16D1  0008               	return
  7215  16D2  0024               	movlb	4	; select bank4
  7216  16D3  0355               	decf	_switchTap_down^(0+512),w
  7217  16D4  1903               	btfsc	3,2
  7218  16D5  0008               	return
  7219                           
  7220                           ;SwitchTap.c: 116: switchTap_down = 1;
  7221  16D6  01D5               	clrf	_switchTap_down^(0+512)
  7222  16D7  0AD5               	incf	_switchTap_down^(0+512),f
  7223                           
  7224                           ;SwitchTap.c: 117: if (tap_timer >= 1172) {
  7225  16D8  0020               	movlb	0	; select bank0
  7226  16D9  1BDC               	btfsc	_tap_timer+3,7	;volatile
  7227  16DA  2EEF               	goto	l1731
  7228  16DB  085C               	movf	_tap_timer+3,w	;volatile
  7229  16DC  1D03               	btfss	3,2
  7230  16DD  2EE7               	goto	l8173
  7231  16DE  085B               	movf	_tap_timer+2,w	;volatile
  7232  16DF  1D03               	btfss	3,2
  7233  16E0  2EE7               	goto	l8173
  7234  16E1  3094               	movlw	148
  7235  16E2  0259               	subwf	_tap_timer,w	;volatile
  7236  16E3  3004               	movlw	4
  7237  16E4  3B5A               	subwfb	_tap_timer+1,w	;volatile
  7238  16E5  1C03               	btfss	3,0
  7239  16E6  2EEF               	goto	l1731
  7240  16E7                     l8173:	
  7241                           
  7242                           ;SwitchTap.c: 118: tap_timer = 1172;
  7243  16E7  3000               	movlw	0
  7244  16E8  00DC               	movwf	_tap_timer+3	;volatile
  7245  16E9  3000               	movlw	0
  7246  16EA  00DB               	movwf	_tap_timer+2	;volatile
  7247  16EB  3004               	movlw	4
  7248  16EC  00DA               	movwf	_tap_timer+1	;volatile
  7249  16ED  3094               	movlw	148
  7250  16EE  00D9               	movwf	_tap_timer	;volatile
  7251  16EF                     l1731:	
  7252                           
  7253                           ;SwitchTap.c: 119: }
  7254                           ;SwitchTap.c: 121: int tapCntDivisor = num_taps;
  7255  16EF  0023               	movlb	3	; select bank3
  7256  16F0  086C               	movf	_num_taps^(0+384),w
  7257  16F1  0021               	movlb	1	; select bank1
  7258  16F2  00BC               	movwf	??_updateSwitchTap^(0+128)
  7259  16F3  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7260  16F4  083C               	movf	??_updateSwitchTap^(0+128),w
  7261  16F5  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7262  16F6  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7263  16F7  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7264                           
  7265                           ;SwitchTap.c: 122: if (tap_iteration <= num_taps) {
  7266  16F8  0024               	movlb	4	; select bank4
  7267  16F9  0866               	movf	(_tap_iteration+1)^(0+512),w
  7268  16FA  3A80               	xorlw	128
  7269  16FB  3C80               	sublw	128
  7270  16FC  1D03               	skipz
  7271  16FD  2F01               	goto	u8075
  7272  16FE  0865               	movf	_tap_iteration^(0+512),w
  7273  16FF  0023               	movlb	3	; select bank3
  7274  1700  026C               	subwf	_num_taps^(0+384),w
  7275  1701                     u8075:	
  7276  1701  1C03               	skipc
  7277  1702  2F33               	goto	l8181
  7278                           
  7279                           ;SwitchTap.c: 123: tap_total += tap_timer;
  7280  1703  0020               	movlb	0	; select bank0
  7281  1704  0859               	movf	_tap_timer,w	;volatile
  7282  1705  0025               	movlb	5	; select bank5
  7283  1706  07D6               	addwf	_tap_total^(0+640),f
  7284  1707  0020               	movlb	0	; select bank0
  7285  1708  085A               	movf	_tap_timer+1,w	;volatile
  7286  1709  0025               	movlb	5	; select bank5
  7287  170A  3DD7               	addwfc	(_tap_total+1)^(0+640),f
  7288  170B  0020               	movlb	0	; select bank0
  7289  170C  085B               	movf	_tap_timer+2,w	;volatile
  7290  170D  0025               	movlb	5	; select bank5
  7291  170E  3DD8               	addwfc	(_tap_total+2)^(0+640),f
  7292  170F  0020               	movlb	0	; select bank0
  7293  1710  085C               	movf	_tap_timer+3,w	;volatile
  7294  1711  0025               	movlb	5	; select bank5
  7295  1712  3DD9               	addwfc	(_tap_total+3)^(0+640),f
  7296                           
  7297                           ;SwitchTap.c: 124: tap_history[tap_iteration] = tap_timer;
  7298  1713  0024               	movlb	4	; select bank4
  7299  1714  0865               	movf	_tap_iteration^(0+512),w
  7300  1715  0021               	movlb	1	; select bank1
  7301  1716  00BC               	movwf	??_updateSwitchTap^(0+128)
  7302  1717  3001               	movlw	1
  7303  1718                     u8085:	
  7304  1718  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7305  1719  3EFF               	addlw	-1
  7306  171A  1D03               	skipz
  7307  171B  2F18               	goto	u8085
  7308  171C  353C               	lslf	??_updateSwitchTap^(0+128),w
  7309  171D  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7310  171E  0086               	movwf	6
  7311  171F  3002               	movlw	2	; select bank5/6
  7312  1720  0087               	movwf	7
  7313  1721  0020               	movlb	0	; select bank0
  7314  1722  0859               	movf	_tap_timer,w	;volatile
  7315  1723  3FC0               	movwi [0]fsr1
  7316  1724  085A               	movf	_tap_timer+1,w	;volatile
  7317  1725  3FC1               	movwi [1]fsr1
  7318  1726  085B               	movf	_tap_timer+2,w	;volatile
  7319  1727  3FC2               	movwi [2]fsr1
  7320  1728  085C               	movf	_tap_timer+3,w	;volatile
  7321  1729  3FC3               	movwi [3]fsr1
  7322                           
  7323                           ;SwitchTap.c: 125: tapCntDivisor = tap_iteration;
  7324  172A  0024               	movlb	4	; select bank4
  7325  172B  0866               	movf	(_tap_iteration+1)^(0+512),w
  7326  172C  0021               	movlb	1	; select bank1
  7327  172D  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7328  172E  0024               	movlb	4	; select bank4
  7329  172F  0865               	movf	_tap_iteration^(0+512),w
  7330  1730  0021               	movlb	1	; select bank1
  7331  1731  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7332                           
  7333                           ;SwitchTap.c: 126: } else {
  7334  1732  2FAF               	goto	l8195
  7335  1733                     l8181:	
  7336                           
  7337                           ;SwitchTap.c: 127: tap_total = 0;
  7338  1733  3000               	movlw	0
  7339  1734  0025               	movlb	5	; select bank5
  7340  1735  00D9               	movwf	(_tap_total+3)^(0+640)
  7341  1736  3000               	movlw	0
  7342  1737  00D8               	movwf	(_tap_total+2)^(0+640)
  7343  1738  3000               	movlw	0
  7344  1739  00D7               	movwf	(_tap_total+1)^(0+640)
  7345  173A  3000               	movlw	0
  7346  173B  00D6               	movwf	_tap_total^(0+640)
  7347                           
  7348                           ;SwitchTap.c: 128: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7349  173C  0021               	movlb	1	; select bank1
  7350  173D  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7351  173E  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7352  173F                     l8189:	
  7353  173F  0023               	movlb	3	; select bank3
  7354  1740  086C               	movf	_num_taps^(0+384),w
  7355  1741  0021               	movlb	1	; select bank1
  7356  1742  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7357  1743  1803               	btfsc	3,0
  7358  1744  2F89               	goto	l8191
  7359                           
  7360                           ;SwitchTap.c: 129: tap_history[iCnt] = tap_history[iCnt + 1];
  7361  1745  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7362  1746  00BC               	movwf	??_updateSwitchTap^(0+128)
  7363  1747  3001               	movlw	1
  7364  1748                     u8095:	
  7365  1748  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7366  1749  3EFF               	addlw	-1
  7367  174A  1D03               	skipz
  7368  174B  2F48               	goto	u8095
  7369  174C  353C               	lslf	??_updateSwitchTap^(0+128),w
  7370  174D  3E04               	addlw	4
  7371  174E  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7372  174F  0086               	movwf	6
  7373  1750  3002               	movlw	2	; select bank5/6
  7374  1751  0087               	movwf	7
  7375  1752  3F40               	moviw [0]fsr1
  7376  1753  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7377  1754  3F41               	moviw [1]fsr1
  7378  1755  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7379  1756  3F42               	moviw [2]fsr1
  7380  1757  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7381  1758  3F43               	moviw [3]fsr1
  7382  1759  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7383  175A  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7384  175B  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7385  175C  3001               	movlw	1
  7386  175D                     u8105:	
  7387  175D  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7388  175E  3EFF               	addlw	-1
  7389  175F  1D03               	skipz
  7390  1760  2F5D               	goto	u8105
  7391  1761  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7392  1762  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7393  1763  0086               	movwf	6
  7394  1764  3002               	movlw	2	; select bank5/6
  7395  1765  0087               	movwf	7
  7396  1766  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7397  1767  3FC0               	movwi [0]fsr1
  7398  1768  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7399  1769  3FC1               	movwi [1]fsr1
  7400  176A  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7401  176B  3FC2               	movwi [2]fsr1
  7402  176C  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7403  176D  3FC3               	movwi [3]fsr1
  7404                           
  7405                           ;SwitchTap.c: 130: tap_total += tap_history[iCnt];
  7406  176E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7407  176F  00BC               	movwf	??_updateSwitchTap^(0+128)
  7408  1770  3001               	movlw	1
  7409  1771                     u8115:	
  7410  1771  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7411  1772  3EFF               	addlw	-1
  7412  1773  1D03               	skipz
  7413  1774  2F71               	goto	u8115
  7414  1775  353C               	lslf	??_updateSwitchTap^(0+128),w
  7415  1776  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7416  1777  0086               	movwf	6
  7417  1778  3002               	movlw	2	; select bank5/6
  7418  1779  0087               	movwf	7
  7419  177A  3F40               	moviw [0]fsr1
  7420  177B  0025               	movlb	5	; select bank5
  7421  177C  07D6               	addwf	_tap_total^(0+640),f
  7422  177D  3F41               	moviw [1]fsr1
  7423  177E  3DD7               	addwfc	(_tap_total+1)^(0+640),f
  7424  177F  3F42               	moviw [2]fsr1
  7425  1780  3DD8               	addwfc	(_tap_total+2)^(0+640),f
  7426  1781  3F43               	moviw [3]fsr1
  7427  1782  3DD9               	addwfc	(_tap_total+3)^(0+640),f
  7428  1783  3001               	movlw	1
  7429  1784  0021               	movlb	1	; select bank1
  7430  1785  00BC               	movwf	??_updateSwitchTap^(0+128)
  7431  1786  083C               	movf	??_updateSwitchTap^(0+128),w
  7432  1787  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7433  1788  2F3F               	goto	l8189
  7434  1789                     l8191:	
  7435                           
  7436                           ;SwitchTap.c: 131: }
  7437                           ;SwitchTap.c: 132: tap_history[num_taps] = tap_timer;
  7438  1789  0023               	movlb	3	; select bank3
  7439  178A  086C               	movf	_num_taps^(0+384),w
  7440  178B  0021               	movlb	1	; select bank1
  7441  178C  00BC               	movwf	??_updateSwitchTap^(0+128)
  7442  178D  3001               	movlw	1
  7443  178E                     u8135:	
  7444  178E  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7445  178F  3EFF               	addlw	-1
  7446  1790  1D03               	skipz
  7447  1791  2F8E               	goto	u8135
  7448  1792  353C               	lslf	??_updateSwitchTap^(0+128),w
  7449  1793  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7450  1794  0086               	movwf	6
  7451  1795  3002               	movlw	2	; select bank5/6
  7452  1796  0087               	movwf	7
  7453  1797  0020               	movlb	0	; select bank0
  7454  1798  0859               	movf	_tap_timer,w	;volatile
  7455  1799  3FC0               	movwi [0]fsr1
  7456  179A  085A               	movf	_tap_timer+1,w	;volatile
  7457  179B  3FC1               	movwi [1]fsr1
  7458  179C  085B               	movf	_tap_timer+2,w	;volatile
  7459  179D  3FC2               	movwi [2]fsr1
  7460  179E  085C               	movf	_tap_timer+3,w	;volatile
  7461  179F  3FC3               	movwi [3]fsr1
  7462                           
  7463                           ;SwitchTap.c: 133: tap_total += tap_timer;
  7464  17A0  0859               	movf	_tap_timer,w	;volatile
  7465  17A1  0025               	movlb	5	; select bank5
  7466  17A2  07D6               	addwf	_tap_total^(0+640),f
  7467  17A3  0020               	movlb	0	; select bank0
  7468  17A4  085A               	movf	_tap_timer+1,w	;volatile
  7469  17A5  0025               	movlb	5	; select bank5
  7470  17A6  3DD7               	addwfc	(_tap_total+1)^(0+640),f
  7471  17A7  0020               	movlb	0	; select bank0
  7472  17A8  085B               	movf	_tap_timer+2,w	;volatile
  7473  17A9  0025               	movlb	5	; select bank5
  7474  17AA  3DD8               	addwfc	(_tap_total+2)^(0+640),f
  7475  17AB  0020               	movlb	0	; select bank0
  7476  17AC  085C               	movf	_tap_timer+3,w	;volatile
  7477  17AD  0025               	movlb	5	; select bank5
  7478  17AE  3DD9               	addwfc	(_tap_total+3)^(0+640),f
  7479  17AF                     l8195:	
  7480                           
  7481                           ;SwitchTap.c: 134: }
  7482                           ;SwitchTap.c: 136: baseline_mod_time = tap_total / tapCntDivisor;
  7483  17AF  0021               	movlb	1	; select bank1
  7484  17B0  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7485  17B1  00A0               	movwf	___aldiv@divisor^(0+128)
  7486  17B2  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7487  17B3  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7488  17B4  0D89               	rlf	9,f
  7489  17B5  3B89               	subwfb	9,f
  7490  17B6  0989               	comf	9,f
  7491  17B7  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7492  17B8  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7493  17B9  0025               	movlb	5	; select bank5
  7494  17BA  0859               	movf	(_tap_total+3)^(0+640),w
  7495  17BB  0021               	movlb	1	; select bank1
  7496  17BC  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7497  17BD  0025               	movlb	5	; select bank5
  7498  17BE  0858               	movf	(_tap_total+2)^(0+640),w
  7499  17BF  0021               	movlb	1	; select bank1
  7500  17C0  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7501  17C1  0025               	movlb	5	; select bank5
  7502  17C2  0857               	movf	(_tap_total+1)^(0+640),w
  7503  17C3  0021               	movlb	1	; select bank1
  7504  17C4  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7505  17C5  0025               	movlb	5	; select bank5
  7506  17C6  0856               	movf	_tap_total^(0+640),w
  7507  17C7  0021               	movlb	1	; select bank1
  7508  17C8  00A4               	movwf	___aldiv@dividend^(0+128)
  7509  17C9  31A0  2051  3196   	fcall	___aldiv
  7510  17CC  0021               	movlb	1	; select bank1
  7511  17CD  0821               	movf	(?___aldiv^(0+128)+1),w
  7512  17CE  0020               	movlb	0	; select bank0
  7513  17CF  00EB               	movwf	_baseline_mod_time+1	;volatile
  7514  17D0  0021               	movlb	1	; select bank1
  7515  17D1  0820               	movf	?___aldiv^(0+128),w
  7516  17D2  0020               	movlb	0	; select bank0
  7517  17D3  00EA               	movwf	_baseline_mod_time	;volatile
  7518                           
  7519                           ;SwitchTap.c: 137: mod_time_changed = 1;
  7520  17D4  0024               	movlb	4	; select bank4
  7521  17D5  01EC               	clrf	_mod_time_changed^(0+512)
  7522  17D6  0AEC               	incf	_mod_time_changed^(0+512),f
  7523                           
  7524                           ;SwitchTap.c: 138: tap_timer = 0;
  7525  17D7  3000               	movlw	0
  7526  17D8  0020               	movlb	0	; select bank0
  7527  17D9  00DC               	movwf	_tap_timer+3	;volatile
  7528  17DA  3000               	movlw	0
  7529  17DB  00DB               	movwf	_tap_timer+2	;volatile
  7530  17DC  3000               	movlw	0
  7531  17DD  00DA               	movwf	_tap_timer+1	;volatile
  7532  17DE  3000               	movlw	0
  7533  17DF  00D9               	movwf	_tap_timer	;volatile
  7534                           
  7535                           ;SwitchTap.c: 140: tap_iteration++;
  7536  17E0  3001               	movlw	1
  7537  17E1  0024               	movlb	4	; select bank4
  7538  17E2  07E5               	addwf	_tap_iteration^(0+512),f
  7539  17E3  3000               	movlw	0
  7540  17E4  3DE6               	addwfc	(_tap_iteration+1)^(0+512),f
  7541                           
  7542                           ;SwitchTap.c: 141: updateTapTime();
  7543  17E5  3187  27F7         	fcall	_updateTapTime
  7544                           
  7545                           ;SwitchTap.c: 142: }
  7546                           ;SwitchTap.c: 144: } else if (switchTap_pressed >= 25) {
  7547  17E7  0008               	return
  7548  17E8                     l8205:	
  7549  17E8  3019               	movlw	25
  7550  17E9  0024               	movlb	4	; select bank4
  7551  17EA  0256               	subwf	_switchTap_pressed^(0+512),w
  7552  17EB  1C03               	skipc
  7553  17EC  0008               	return
  7554                           
  7555                           ;SwitchTap.c: 145: switchTap_down = 0;
  7556  17ED  01D5               	clrf	_switchTap_down^(0+512)
  7557                           
  7558                           ;SwitchTap.c: 146: switchTap_state = 0;
  7559  17EE  01EF               	clrf	_switchTap_state^(0+512)
  7560                           
  7561                           ;SwitchTap.c: 152: setLongTapState(0);
  7562  17EF  3000               	movlw	0
  7563  17F0  0021               	movlb	1	; select bank1
  7564  17F1  00A0               	movwf	setLongTapState@f_state^(0+128)
  7565  17F2  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7566  17F3  31B1  21E7         	fcall	_setLongTapState
  7567                           
  7568                           ;SwitchTap.c: 154: longTap_timer = 0;
  7569  17F5  0024               	movlb	4	; select bank4
  7570  17F6  01BC               	clrf	_longTap_timer^(0+512)	;volatile
  7571  17F7  01BD               	clrf	(_longTap_timer+1)^(0+512)	;volatile
  7572                           
  7573                           ;SwitchTap.c: 155: longTap_start = 0;
  7574  17F8  01CC               	clrf	_longTap_start^(0+512)
  7575                           
  7576                           ;SwitchTap.c: 157: switchTap_pressed = 25;
  7577  17F9  3019               	movlw	25
  7578  17FA  0021               	movlb	1	; select bank1
  7579  17FB  00BC               	movwf	??_updateSwitchTap^(0+128)
  7580  17FC  083C               	movf	??_updateSwitchTap^(0+128),w
  7581  17FD  0024               	movlb	4	; select bank4
  7582  17FE  00D6               	movwf	_switchTap_pressed^(0+512)
  7583  17FF  0008               	return
  7584  1800                     __end_of_updateSwitchTap:	
  7585                           
  7586                           	psect	text4
  7587  07F7                     __ptext4:	
  7588 ;; *************** function _updateTapTime *****************
  7589 ;; Defined at:
  7590 ;;		line 308 in file "state_manager.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;		None
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;		None
  7595 ;; Return value:  Size  Location     Type
  7596 ;;                  1    wreg      void 
  7597 ;; Registers used:
  7598 ;;		wreg
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7608 ;;Total ram usage:        0 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    5
  7611 ;; This function calls:
  7612 ;;		Nothing
  7613 ;; This function is called by:
  7614 ;;		_main
  7615 ;;		_updateSwitchTap
  7616 ;; This function uses a non-reentrant model
  7617 ;;
  7618                           
  7619                           
  7620                           ;psect for function _updateTapTime
  7621  07F7                     _updateTapTime:	
  7622                           
  7623                           ;state_manager.c: 309: pedalState.baseTapTime = baseline_mod_time;
  7624                           
  7625                           ;incstack = 0
  7626                           ; Regs used in _updateTapTime: [wreg]
  7627  07F7  0020               	movlb	0	; select bank0
  7628  07F8  086B               	movf	_baseline_mod_time+1,w	;volatile
  7629  07F9  0025               	movlb	5	; select bank5
  7630  07FA  00B6               	movwf	((_pedalState+1)^(0+640)+1)
  7631  07FB  0020               	movlb	0	; select bank0
  7632  07FC  086A               	movf	_baseline_mod_time,w	;volatile
  7633  07FD  0025               	movlb	5	; select bank5
  7634  07FE  00B5               	movwf	(_pedalState^(0+640)+1)
  7635  07FF  0008               	return
  7636  0800                     __end_of_updateTapTime:	
  7637                           
  7638                           	psect	text5
  7639  31E7                     __ptext5:	
  7640 ;; *************** function _setLongTapState *****************
  7641 ;; Defined at:
  7642 ;;		line 172 in file "SwitchTap.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;  f_state         2    0[BANK1 ] int 
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;		None
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      void 
  7649 ;; Registers used:
  7650 ;;		wreg, status,0
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7656 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7658 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7659 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7660 ;;Total ram usage:        4 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:    5
  7663 ;; This function calls:
  7664 ;;		Nothing
  7665 ;; This function is called by:
  7666 ;;		_updateSwitchTap
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           
  7671                           ;psect for function _setLongTapState
  7672  31E7                     _setLongTapState:	
  7673                           
  7674                           ;SwitchTap.c: 173: if (longTap_state == f_state) {return;}
  7675                           
  7676                           ;incstack = 0
  7677                           ; Regs used in _setLongTapState: [wreg+status,0]
  7678  31E7  0020               	movlb	0	; select bank0
  7679  31E8  086F               	movf	_longTap_state,w	;volatile
  7680  31E9  0021               	movlb	1	; select bank1
  7681  31EA  00A2               	movwf	??_setLongTapState^(0+128)
  7682  31EB  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7683  31EC  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7684  31ED  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7685  31EE  1D03               	skipz
  7686  31EF  29F2               	goto	u6925
  7687  31F0  0820               	movf	setLongTapState@f_state^(0+128),w
  7688  31F1  0622               	xorwf	??_setLongTapState^(0+128),w
  7689  31F2                     u6925:	
  7690  31F2  1903               	btfsc	3,2
  7691  31F3  0008               	return
  7692                           
  7693                           ;SwitchTap.c: 174: longTap_state = f_state;
  7694  31F4  0820               	movf	setLongTapState@f_state^(0+128),w
  7695  31F5  00A2               	movwf	??_setLongTapState^(0+128)
  7696  31F6  0822               	movf	??_setLongTapState^(0+128),w
  7697  31F7  0020               	movlb	0	; select bank0
  7698  31F8  00EF               	movwf	_longTap_state	;volatile
  7699                           
  7700                           ;SwitchTap.c: 175: LATBbits.LATB5 = f_state;
  7701  31F9  0021               	movlb	1	; select bank1
  7702  31FA  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7703  31FB  0022               	movlb	2	; select bank2
  7704  31FC  1C03               	skipc
  7705  31FD  128D               	bcf	13,5	;volatile
  7706  31FE  1803               	skipnc
  7707  31FF  168D               	bsf	13,5	;volatile
  7708  3200  0008               	return
  7709  3201                     __end_of_setLongTapState:	
  7710                           
  7711                           	psect	text6
  7712  2051                     __ptext6:	
  7713 ;; *************** function ___aldiv *****************
  7714 ;; Defined at:
  7715 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;  divisor         4    0[BANK1 ] long 
  7718 ;;  dividend        4    4[BANK1 ] long 
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;  quotient        4   11[BANK1 ] long 
  7721 ;;  sign            1   10[BANK1 ] unsigned char 
  7722 ;;  counter         1    9[BANK1 ] unsigned char 
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  4    0[BANK1 ] long 
  7725 ;; Registers used:
  7726 ;;		wreg, status,2, status,0
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7732 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7733 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7734 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7735 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7736 ;;Total ram usage:       15 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    5
  7739 ;; This function calls:
  7740 ;;		Nothing
  7741 ;; This function is called by:
  7742 ;;		_main
  7743 ;;		_updateSwitchTap
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           
  7748                           ;psect for function ___aldiv
  7749  2051                     ___aldiv:	
  7750                           
  7751                           ;incstack = 0
  7752                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7753  2051  0021               	movlb	1	; select bank1
  7754  2052  01AA               	clrf	___aldiv@sign^(0+128)
  7755  2053  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7756  2054  2862               	goto	l2502
  7757  2055  09A0               	comf	___aldiv@divisor^(0+128),f
  7758  2056  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7759  2057  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7760  2058  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7761  2059  0AA0               	incf	___aldiv@divisor^(0+128),f
  7762  205A  1903               	skipnz
  7763  205B  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7764  205C  1903               	skipnz
  7765  205D  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7766  205E  1903               	skipnz
  7767  205F  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7768  2060  01AA               	clrf	___aldiv@sign^(0+128)
  7769  2061  0AAA               	incf	___aldiv@sign^(0+128),f
  7770  2062                     l2502:	
  7771  2062  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7772  2063  2873               	goto	l7647
  7773  2064  09A4               	comf	___aldiv@dividend^(0+128),f
  7774  2065  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7775  2066  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7776  2067  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7777  2068  0AA4               	incf	___aldiv@dividend^(0+128),f
  7778  2069  1903               	skipnz
  7779  206A  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7780  206B  1903               	skipnz
  7781  206C  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7782  206D  1903               	skipnz
  7783  206E  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7784  206F  3001               	movlw	1
  7785  2070  00A8               	movwf	??___aldiv^(0+128)
  7786  2071  0828               	movf	??___aldiv^(0+128),w
  7787  2072  06AA               	xorwf	___aldiv@sign^(0+128),f
  7788  2073                     l7647:	
  7789  2073  3000               	movlw	0
  7790  2074  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7791  2075  3000               	movlw	0
  7792  2076  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7793  2077  3000               	movlw	0
  7794  2078  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7795  2079  3000               	movlw	0
  7796  207A  00AB               	movwf	___aldiv@quotient^(0+128)
  7797  207B  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7798  207C  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7799  207D  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7800  207E  0420               	iorwf	___aldiv@divisor^(0+128),w
  7801  207F  1903               	skipnz
  7802  2080  28BC               	goto	l7669
  7803  2081  01A9               	clrf	___aldiv@counter^(0+128)
  7804  2082  0AA9               	incf	___aldiv@counter^(0+128),f
  7805  2083                     l7655:	
  7806  2083  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7807  2084  2891               	goto	l7657
  7808  2085  3001               	movlw	1
  7809  2086                     u7035:	
  7810  2086  35A0               	lslf	___aldiv@divisor^(0+128),f
  7811  2087  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7812  2088  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7813  2089  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7814  208A  0B89               	decfsz	9,f
  7815  208B  2886               	goto	u7035
  7816  208C  3001               	movlw	1
  7817  208D  00A8               	movwf	??___aldiv^(0+128)
  7818  208E  0828               	movf	??___aldiv^(0+128),w
  7819  208F  07A9               	addwf	___aldiv@counter^(0+128),f
  7820  2090  2883               	goto	l7655
  7821  2091                     l7657:	
  7822  2091  3001               	movlw	1
  7823  2092                     u7055:	
  7824  2092  35AB               	lslf	___aldiv@quotient^(0+128),f
  7825  2093  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7826  2094  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7827  2095  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7828  2096  0B89               	decfsz	9,f
  7829  2097  2892               	goto	u7055
  7830  2098  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7831  2099  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7832  209A  1D03               	skipz
  7833  209B  28A6               	goto	u7065
  7834  209C  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7835  209D  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7836  209E  1D03               	skipz
  7837  209F  28A6               	goto	u7065
  7838  20A0  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7839  20A1  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7840  20A2  1D03               	skipz
  7841  20A3  28A6               	goto	u7065
  7842  20A4  0820               	movf	___aldiv@divisor^(0+128),w
  7843  20A5  0224               	subwf	___aldiv@dividend^(0+128),w
  7844  20A6                     u7065:	
  7845  20A6  1C03               	skipc
  7846  20A7  28B1               	goto	l7665
  7847  20A8  0820               	movf	___aldiv@divisor^(0+128),w
  7848  20A9  02A4               	subwf	___aldiv@dividend^(0+128),f
  7849  20AA  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7850  20AB  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7851  20AC  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7852  20AD  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7853  20AE  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7854  20AF  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7855  20B0  142B               	bsf	___aldiv@quotient^(0+128),0
  7856  20B1                     l7665:	
  7857  20B1  3001               	movlw	1
  7858  20B2                     u7075:	
  7859  20B2  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7860  20B3  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7861  20B4  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7862  20B5  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7863  20B6  0B89               	decfsz	9,f
  7864  20B7  28B2               	goto	u7075
  7865  20B8  3001               	movlw	1
  7866  20B9  02A9               	subwf	___aldiv@counter^(0+128),f
  7867  20BA  1D03               	btfss	3,2
  7868  20BB  2891               	goto	l7657
  7869  20BC                     l7669:	
  7870  20BC  082A               	movf	___aldiv@sign^(0+128),w
  7871  20BD  1903               	btfsc	3,2
  7872  20BE  28CA               	goto	l7673
  7873  20BF  09AB               	comf	___aldiv@quotient^(0+128),f
  7874  20C0  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7875  20C1  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7876  20C2  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7877  20C3  0AAB               	incf	___aldiv@quotient^(0+128),f
  7878  20C4  1903               	skipnz
  7879  20C5  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7880  20C6  1903               	skipnz
  7881  20C7  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7882  20C8  1903               	skipnz
  7883  20C9  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7884  20CA                     l7673:	
  7885  20CA  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7886  20CB  00A3               	movwf	(?___aldiv+3)^(0+128)
  7887  20CC  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7888  20CD  00A2               	movwf	(?___aldiv+2)^(0+128)
  7889  20CE  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7890  20CF  00A1               	movwf	(?___aldiv+1)^(0+128)
  7891  20D0  082B               	movf	___aldiv@quotient^(0+128),w
  7892  20D1  00A0               	movwf	?___aldiv^(0+128)
  7893  20D2  0008               	return
  7894  20D3                     __end_of___aldiv:	
  7895                           
  7896                           	psect	text7
  7897  270F                     __ptext7:	
  7898 ;; *************** function _updateSwitchBypass *****************
  7899 ;; Defined at:
  7900 ;;		line 34 in file "SwitchBypass.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;		None
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;		None
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  1    wreg      void 
  7907 ;; Registers used:
  7908 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7916 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7917 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7918 ;;Total ram usage:        1 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:   10
  7921 ;; This function calls:
  7922 ;;		_setDoublePressState
  7923 ;;		_setLongBypassState
  7924 ;;		_setSwitchBypassRelays
  7925 ;;		_setSwitchBypassState
  7926 ;; This function is called by:
  7927 ;;		_main
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           
  7932                           ;psect for function _updateSwitchBypass
  7933  270F                     _updateSwitchBypass:	
  7934                           
  7935                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7936                           
  7937                           ;incstack = 0
  7938                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7939  270F  0020               	movlb	0	; select bank0
  7940  2710  1890               	btfsc	16,1	;volatile
  7941  2711  2F19               	goto	l8009
  7942                           
  7943                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7944  2712  0024               	movlb	4	; select bank4
  7945  2713  0853               	movf	_switchBypass_pressed^(0+512),w
  7946  2714  1903               	btfsc	3,2
  7947  2715  2F24               	goto	l1553
  7948                           
  7949                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7950  2716  3001               	movlw	1
  7951  2717  02D3               	subwf	_switchBypass_pressed^(0+512),f
  7952                           
  7953                           ;SwitchBypass.c: 44: }
  7954                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7955  2718  2F24               	goto	l1553
  7956  2719                     l8009:	
  7957  2719  3019               	movlw	25
  7958  271A  0024               	movlb	4	; select bank4
  7959  271B  0253               	subwf	_switchBypass_pressed^(0+512),w
  7960  271C  1803               	skipnc
  7961  271D  2F24               	goto	l1553
  7962                           
  7963                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7964  271E  3001               	movlw	1
  7965  271F  0021               	movlb	1	; select bank1
  7966  2720  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7967  2721  083C               	movf	??_updateSwitchBypass^(0+128),w
  7968  2722  0024               	movlb	4	; select bank4
  7969  2723  07D3               	addwf	_switchBypass_pressed^(0+512),f
  7970  2724                     l1553:	
  7971                           
  7972                           ;SwitchBypass.c: 47: }
  7973                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7974  2724  0853               	movf	_switchBypass_pressed^(0+512),w
  7975  2725  1D03               	btfss	3,2
  7976  2726  2F9E               	goto	l8069
  7977                           
  7978                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7979  2727  084B               	movf	_longBypass_start^(0+512),w
  7980  2728  1D03               	btfss	3,2
  7981  2729  2F2E               	goto	l8019
  7982                           
  7983                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7984  272A  01CB               	clrf	_longBypass_start^(0+512)
  7985  272B  0ACB               	incf	_longBypass_start^(0+512),f
  7986                           
  7987                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7988  272C  01BA               	clrf	_longBypass_timer^(0+512)	;volatile
  7989  272D  01BB               	clrf	(_longBypass_timer+1)^(0+512)	;volatile
  7990  272E                     l8019:	
  7991                           
  7992                           ;SwitchBypass.c: 59: }
  7993                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7994  272E  0860               	movf	(_long_press_limit+1)^(0+512),w
  7995  272F  023B               	subwf	(_longBypass_timer+1)^(0+512),w	;volatile
  7996  2730  1D03               	skipz
  7997  2731  2F34               	goto	u7715
  7998  2732  085F               	movf	_long_press_limit^(0+512),w
  7999  2733  023A               	subwf	_longBypass_timer^(0+512),w	;volatile
  8000  2734                     u7715:	
  8001  2734  1C03               	skipc
  8002  2735  2F73               	goto	l8045
  8003  2736  0849               	movf	_longBypass_down^(0+512),w
  8004  2737  1D03               	btfss	3,2
  8005  2738  2F73               	goto	l8045
  8006  2739  0020               	movlb	0	; select bank0
  8007  273A  0861               	movf	_doubleTap_state,w	;volatile
  8008  273B  1D03               	btfss	3,2
  8009  273C  2F73               	goto	l8045
  8010                           
  8011                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  8012  273D  0022               	movlb	2	; select bank2
  8013  273E  110D               	bcf	13,2	;volatile
  8014                           
  8015                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  8016  273F  0024               	movlb	4	; select bank4
  8017  2740  034C               	decf	_longTap_start^(0+512),w
  8018  2741  1903               	btfsc	3,2
  8019  2742  2F6B               	goto	l8043
  8020                           
  8021                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  8022  2743  0023               	movlb	3	; select bank3
  8023  2744  036E               	decf	_switchBypass_state^(0+384),w
  8024  2745  1D03               	btfss	3,2
  8025  2746  2F73               	goto	l8045
  8026                           
  8027                           ;SwitchBypass.c: 67: longBypass_down = 1;
  8028  2747  0024               	movlb	4	; select bank4
  8029  2748  01C9               	clrf	_longBypass_down^(0+512)
  8030  2749  0AC9               	incf	_longBypass_down^(0+512),f
  8031                           
  8032                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  8033  274A  0020               	movlb	0	; select bank0
  8034  274B  0863               	movf	_longBypass_state,w	;volatile
  8035  274C  1D03               	btfss	3,2
  8036  274D  2F59               	goto	l8039
  8037                           
  8038                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  8039  274E  0022               	movlb	2	; select bank2
  8040  274F  110D               	bcf	13,2	;volatile
  8041                           
  8042                           ;SwitchBypass.c: 70: setLongBypassState(1);
  8043  2750  3001               	movlw	1
  8044  2751  0021               	movlb	1	; select bank1
  8045  2752  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8046  2753  3000               	movlw	0
  8047  2754  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8048  2755  31B2  22CB  31A7   	fcall	_setLongBypassState
  8049                           
  8050                           ;SwitchBypass.c: 71: } else {
  8051  2758  2F73               	goto	l8045
  8052  2759                     l8039:	
  8053                           
  8054                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  8055  2759  3001               	movlw	1
  8056  275A  0021               	movlb	1	; select bank1
  8057  275B  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  8058  275C  3000               	movlw	0
  8059  275D  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8060  275E  31B2  2254  31A7   	fcall	_setSwitchBypassState
  8061                           
  8062                           ;SwitchBypass.c: 73: setLongBypassState(0);
  8063  2761  3000               	movlw	0
  8064  2762  0021               	movlb	1	; select bank1
  8065  2763  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8066  2764  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  8067  2765  31B2  22CB  31A7   	fcall	_setLongBypassState
  8068                           
  8069                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  8070  2768  0022               	movlb	2	; select bank2
  8071  2769  150D               	bsf	13,2	;volatile
  8072                           
  8073                           ;SwitchBypass.c: 75: }
  8074                           ;SwitchBypass.c: 76: }
  8075                           ;SwitchBypass.c: 77: } else {
  8076  276A  2F73               	goto	l8045
  8077  276B                     l8043:	
  8078                           
  8079                           ;SwitchBypass.c: 78: setDoublePressState(1);
  8080  276B  3001               	movlw	1
  8081  276C  0021               	movlb	1	; select bank1
  8082  276D  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8083  276E  3000               	movlw	0
  8084  276F  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8085  2770  31B7  2782  31A7   	fcall	_setDoublePressState
  8086  2773                     l8045:	
  8087                           
  8088                           ;SwitchBypass.c: 79: }
  8089                           ;SwitchBypass.c: 80: }
  8090                           ;SwitchBypass.c: 83: if (doubleTap_state == 0 && longBypass_down == 0) {
  8091  2773  0020               	movlb	0	; select bank0
  8092  2774  0861               	movf	_doubleTap_state,w	;volatile
  8093  2775  1D03               	btfss	3,2
  8094  2776  2F9B               	goto	l8067
  8095  2777  0024               	movlb	4	; select bank4
  8096  2778  0849               	movf	_longBypass_down^(0+512),w
  8097  2779  1D03               	btfss	3,2
  8098  277A  2F9B               	goto	l8067
  8099                           
  8100                           ;SwitchBypass.c: 84: if (switchBypass_state == 1) {
  8101  277B  0023               	movlb	3	; select bank3
  8102  277C  036E               	decf	_switchBypass_state^(0+384),w
  8103  277D  1D03               	btfss	3,2
  8104  277E  2F88               	goto	l8055
  8105                           
  8106                           ;SwitchBypass.c: 86: if (switchBypass_up == 1) {
  8107  277F  0024               	movlb	4	; select bank4
  8108  2780  036E               	decf	_switchBypass_up^(0+512),w
  8109  2781  1D03               	btfss	3,2
  8110  2782  2F9B               	goto	l8067
  8111                           
  8112                           ;SwitchBypass.c: 87: currentBypassState = 1;
  8113  2783  01E8               	clrf	_currentBypassState^(0+512)
  8114  2784  0AE8               	incf	_currentBypassState^(0+512),f
  8115                           
  8116                           ;SwitchBypass.c: 88: switchBypass_toggle = 1;
  8117  2785  01D4               	clrf	_switchBypass_toggle^(0+512)
  8118  2786  0AD4               	incf	_switchBypass_toggle^(0+512),f
  8119                           
  8120                           ;SwitchBypass.c: 89: }
  8121                           ;SwitchBypass.c: 90: } else {
  8122  2787  2F9B               	goto	l8067
  8123  2788                     l8055:	
  8124                           
  8125                           ;SwitchBypass.c: 91: if (bypass_turning_on != 1) {
  8126  2788  0024               	movlb	4	; select bank4
  8127  2789  0348               	decf	_bypass_turning_on^(0+512),w
  8128  278A  1903               	btfsc	3,2
  8129  278B  2F9B               	goto	l8067
  8130                           
  8131                           ;SwitchBypass.c: 93: currentBypassState = 0;
  8132  278C  01E8               	clrf	_currentBypassState^(0+512)
  8133                           
  8134                           ;SwitchBypass.c: 95: bypass_turning_on = 1;
  8135  278D  01C8               	clrf	_bypass_turning_on^(0+512)
  8136  278E  0AC8               	incf	_bypass_turning_on^(0+512),f
  8137                           
  8138                           ;SwitchBypass.c: 96: switchBypass_toggle = 0;
  8139  278F  01D4               	clrf	_switchBypass_toggle^(0+512)
  8140                           
  8141                           ;SwitchBypass.c: 98: longBypass_save = longBypass_state;
  8142  2790  0020               	movlb	0	; select bank0
  8143  2791  0863               	movf	_longBypass_state,w	;volatile
  8144  2792  0021               	movlb	1	; select bank1
  8145  2793  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8146  2794  083C               	movf	??_updateSwitchBypass^(0+128),w
  8147  2795  0024               	movlb	4	; select bank4
  8148  2796  00CA               	movwf	_longBypass_save^(0+512)
  8149                           
  8150                           ;SwitchBypass.c: 99: longBypass_state = 0;
  8151  2797  0020               	movlb	0	; select bank0
  8152  2798  01E3               	clrf	_longBypass_state	;volatile
  8153                           
  8154                           ;SwitchBypass.c: 100: longBypass_start = 0;
  8155  2799  0024               	movlb	4	; select bank4
  8156  279A  01CB               	clrf	_longBypass_start^(0+512)
  8157  279B                     l8067:	
  8158                           
  8159                           ;SwitchBypass.c: 101: }
  8160                           ;SwitchBypass.c: 102: }
  8161                           ;SwitchBypass.c: 104: }
  8162                           ;SwitchBypass.c: 105: switchBypass_up = 0;
  8163  279B  0024               	movlb	4	; select bank4
  8164  279C  01EE               	clrf	_switchBypass_up^(0+512)
  8165                           
  8166                           ;SwitchBypass.c: 106: } else if (switchBypass_pressed >= 25) {
  8167  279D  0008               	return
  8168  279E                     l8069:	
  8169  279E  3019               	movlw	25
  8170  279F  0253               	subwf	_switchBypass_pressed^(0+512),w
  8171  27A0  1C03               	skipc
  8172  27A1  0008               	return
  8173                           
  8174                           ;SwitchBypass.c: 107: if (doubleTap_state == 1) {
  8175  27A2  0020               	movlb	0	; select bank0
  8176  27A3  0361               	decf	_doubleTap_state,w	;volatile
  8177  27A4  1D03               	btfss	3,2
  8178  27A5  2FAE               	goto	l8075
  8179                           
  8180                           ;SwitchBypass.c: 108: setSwitchBypassState(currentBypassState);
  8181  27A6  0024               	movlb	4	; select bank4
  8182  27A7  0868               	movf	_currentBypassState^(0+512),w
  8183  27A8  0021               	movlb	1	; select bank1
  8184  27A9  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  8185  27AA  01B6               	clrf	(setSwitchBypassState@f_state+1)^(0+128)
  8186  27AB  1BB5               	btfsc	setSwitchBypassState@f_state^(0+128),7
  8187  27AC  03B6               	decf	(setSwitchBypassState@f_state+1)^(0+128),f
  8188  27AD  2FDD               	goto	L1
  8189  27AE                     l8075:	
  8190                           ;SwitchBypass.c: 109: } else if (bypass_turning_on == 1) {
  8191                           
  8192  27AE  0024               	movlb	4	; select bank4
  8193  27AF  0348               	decf	_bypass_turning_on^(0+512),w
  8194  27B0  1D03               	btfss	3,2
  8195  27B1  2FCE               	goto	l8085
  8196                           
  8197                           ;SwitchBypass.c: 111: if (longBypass_save == 1) {
  8198  27B2  034A               	decf	_longBypass_save^(0+512),w
  8199  27B3  1D03               	btfss	3,2
  8200  27B4  2FC8               	goto	l8083
  8201                           
  8202                           ;SwitchBypass.c: 112: LATBbits.LATB2 = 0;
  8203  27B5  0022               	movlb	2	; select bank2
  8204  27B6  110D               	bcf	13,2	;volatile
  8205                           
  8206                           ;SwitchBypass.c: 113: setLongBypassState(1);
  8207  27B7  3001               	movlw	1
  8208  27B8  0021               	movlb	1	; select bank1
  8209  27B9  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8210  27BA  3000               	movlw	0
  8211  27BB  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8212  27BC  31B2  22CB  31A7   	fcall	_setLongBypassState
  8213                           
  8214                           ;SwitchBypass.c: 114: setSwitchBypassRelays(1);
  8215  27BF  3001               	movlw	1
  8216  27C0  0021               	movlb	1	; select bank1
  8217  27C1  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8218  27C2  3000               	movlw	0
  8219  27C3  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8220  27C4  31B4  24B6  31A7   	fcall	_setSwitchBypassRelays
  8221                           
  8222                           ;SwitchBypass.c: 115: } else {
  8223  27C7  2FE0               	goto	l8093
  8224  27C8                     l8083:	
  8225                           
  8226                           ;SwitchBypass.c: 116: setSwitchBypassState(1);
  8227  27C8  3001               	movlw	1
  8228  27C9  0021               	movlb	1	; select bank1
  8229  27CA  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  8230  27CB  3000               	movlw	0
  8231  27CC  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8232  27CD  2FDD               	goto	L1
  8233  27CE                     l8085:	
  8234                           ;SwitchBypass.c: 117: }
  8235                           ;SwitchBypass.c: 119: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8236                           
  8237  27CE  0024               	movlb	4	; select bank4
  8238  27CF  0354               	decf	_switchBypass_toggle^(0+512),w
  8239  27D0  1D03               	btfss	3,2
  8240  27D1  2FE0               	goto	l8093
  8241  27D2  0849               	movf	_longBypass_down^(0+512),w
  8242  27D3  1D03               	btfss	3,2
  8243  27D4  2FE0               	goto	l8093
  8244  27D5  0020               	movlb	0	; select bank0
  8245  27D6  0861               	movf	_doubleTap_state,w	;volatile
  8246  27D7  1D03               	btfss	3,2
  8247  27D8  2FE0               	goto	l8093
  8248                           
  8249                           ;SwitchBypass.c: 120: setSwitchBypassState(0);
  8250  27D9  3000               	movlw	0
  8251  27DA  0021               	movlb	1	; select bank1
  8252  27DB  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  8253  27DC  00B6               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8254  27DD                     L1:	
  8255  27DD  31B2  2254  31A7   	fcall	_setSwitchBypassState
  8256  27E0                     l8093:	
  8257                           
  8258                           ;SwitchBypass.c: 121: }
  8259                           ;SwitchBypass.c: 123: longBypass_down = 0;
  8260  27E0  0024               	movlb	4	; select bank4
  8261  27E1  01C9               	clrf	_longBypass_down^(0+512)
  8262                           
  8263                           ;SwitchBypass.c: 124: if (longBypass_state == 0) {
  8264  27E2  0020               	movlb	0	; select bank0
  8265  27E3  0863               	movf	_longBypass_state,w	;volatile
  8266  27E4  1D03               	btfss	3,2
  8267  27E5  2FED               	goto	l8099
  8268                           
  8269                           ;SwitchBypass.c: 125: LATBbits.LATB2 = switchBypass_state;
  8270  27E6  0023               	movlb	3	; select bank3
  8271  27E7  0C6E               	rrf	_switchBypass_state^(0+384),w
  8272  27E8  0022               	movlb	2	; select bank2
  8273  27E9  1C03               	skipc
  8274  27EA  110D               	bcf	13,2	;volatile
  8275  27EB  1803               	skipnc
  8276  27EC  150D               	bsf	13,2	;volatile
  8277  27ED                     l8099:	
  8278                           
  8279                           ;SwitchBypass.c: 126: }
  8280                           ;SwitchBypass.c: 128: setDoublePressState(0);
  8281  27ED  3000               	movlw	0
  8282  27EE  0021               	movlb	1	; select bank1
  8283  27EF  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8284  27F0  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8285  27F1  31B7  2782         	fcall	_setDoublePressState
  8286                           
  8287                           ;SwitchBypass.c: 129: longBypass_start = 0;
  8288  27F3  0024               	movlb	4	; select bank4
  8289  27F4  01CB               	clrf	_longBypass_start^(0+512)
  8290                           
  8291                           ;SwitchBypass.c: 130: bypass_turning_on = 0;
  8292  27F5  01C8               	clrf	_bypass_turning_on^(0+512)
  8293                           
  8294                           ;SwitchBypass.c: 131: switchBypass_toggle = 0;
  8295  27F6  01D4               	clrf	_switchBypass_toggle^(0+512)
  8296                           
  8297                           ;SwitchBypass.c: 132: switchBypass_up = 1;
  8298  27F7  01EE               	clrf	_switchBypass_up^(0+512)
  8299  27F8  0AEE               	incf	_switchBypass_up^(0+512),f
  8300                           
  8301                           ;SwitchBypass.c: 134: switchBypass_pressed = 25;
  8302  27F9  3019               	movlw	25
  8303  27FA  0021               	movlb	1	; select bank1
  8304  27FB  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8305  27FC  083C               	movf	??_updateSwitchBypass^(0+128),w
  8306  27FD  0024               	movlb	4	; select bank4
  8307  27FE  00D3               	movwf	_switchBypass_pressed^(0+512)
  8308  27FF  0008               	return
  8309  2800                     __end_of_updateSwitchBypass:	
  8310                           
  8311                           	psect	text8
  8312  32CB                     __ptext8:	
  8313 ;; *************** function _setLongBypassState *****************
  8314 ;; Defined at:
  8315 ;;		line 164 in file "SwitchBypass.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  f_state         2    0[BANK1 ] int 
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;		None
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      void 
  8322 ;; Registers used:
  8323 ;;		wreg, status,0
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8329 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8331 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8332 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8333 ;;Total ram usage:        4 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    5
  8336 ;; This function calls:
  8337 ;;		Nothing
  8338 ;; This function is called by:
  8339 ;;		_main
  8340 ;;		_updateSwitchBypass
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           
  8345                           ;psect for function _setLongBypassState
  8346  32CB                     _setLongBypassState:	
  8347                           
  8348                           ;SwitchBypass.c: 165: if (longBypass_state == f_state) {return;}
  8349                           
  8350                           ;incstack = 0
  8351                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8352  32CB  0020               	movlb	0	; select bank0
  8353  32CC  0863               	movf	_longBypass_state,w	;volatile
  8354  32CD  0021               	movlb	1	; select bank1
  8355  32CE  00A2               	movwf	??_setLongBypassState^(0+128)
  8356  32CF  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8357  32D0  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8358  32D1  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8359  32D2  1D03               	skipz
  8360  32D3  2AD6               	goto	u6765
  8361  32D4  0820               	movf	setLongBypassState@f_state^(0+128),w
  8362  32D5  0622               	xorwf	??_setLongBypassState^(0+128),w
  8363  32D6                     u6765:	
  8364  32D6  1903               	btfsc	3,2
  8365  32D7  0008               	return
  8366                           
  8367                           ;SwitchBypass.c: 166: longBypass_state = f_state;
  8368  32D8  0820               	movf	setLongBypassState@f_state^(0+128),w
  8369  32D9  00A2               	movwf	??_setLongBypassState^(0+128)
  8370  32DA  0822               	movf	??_setLongBypassState^(0+128),w
  8371  32DB  0020               	movlb	0	; select bank0
  8372  32DC  00E3               	movwf	_longBypass_state	;volatile
  8373                           
  8374                           ;SwitchBypass.c: 167: LATBbits.LATB3 = f_state;
  8375  32DD  0021               	movlb	1	; select bank1
  8376  32DE  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8377  32DF  0022               	movlb	2	; select bank2
  8378  32E0  1C03               	skipc
  8379  32E1  118D               	bcf	13,3	;volatile
  8380  32E2  1803               	skipnc
  8381  32E3  158D               	bsf	13,3	;volatile
  8382                           
  8383                           ;SwitchBypass.c: 168: PORTCbits.RC4 = f_state;
  8384  32E4  0021               	movlb	1	; select bank1
  8385  32E5  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8386  32E6  0020               	movlb	0	; select bank0
  8387  32E7  1C03               	skipc
  8388  32E8  120E               	bcf	14,4	;volatile
  8389  32E9  1803               	skipnc
  8390  32EA  160E               	bsf	14,4	;volatile
  8391  32EB  0008               	return
  8392  32EC                     __end_of_setLongBypassState:	
  8393                           
  8394                           	psect	text9
  8395  3782                     __ptext9:	
  8396 ;; *************** function _setDoublePressState *****************
  8397 ;; Defined at:
  8398 ;;		line 22 in file "preset_programming.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;  f_state         2   24[BANK1 ] int 
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;		None
  8403 ;; Return value:  Size  Location     Type
  8404 ;;                  1    wreg      void 
  8405 ;; Registers used:
  8406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8407 ;; Tracked objects:
  8408 ;;		On entry : 0/0
  8409 ;;		On exit  : 0/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8412 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8414 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8415 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8416 ;;Total ram usage:        4 bytes
  8417 ;; Hardware stack levels used:    1
  8418 ;; Hardware stack levels required when called:    9
  8419 ;; This function calls:
  8420 ;;		_resetRingLEDs
  8421 ;;		_setPedalMode
  8422 ;;		_setPresetDisplay
  8423 ;;		_showSave
  8424 ;;		_wait_ms
  8425 ;; This function is called by:
  8426 ;;		_updateSwitchBypass
  8427 ;;		_updateSwitchTap
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           
  8432                           ;psect for function _setDoublePressState
  8433  3782                     _setDoublePressState:	
  8434                           
  8435                           ;preset_programming.c: 23: if (doubleTap_state == f_state) {return;}
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8439  3782  0020               	movlb	0	; select bank0
  8440  3783  0861               	movf	_doubleTap_state,w	;volatile
  8441  3784  0021               	movlb	1	; select bank1
  8442  3785  00BA               	movwf	??_setDoublePressState^(0+128)
  8443  3786  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8444  3787  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8445  3788  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8446  3789  1D03               	skipz
  8447  378A  2F8D               	goto	u6885
  8448  378B  0838               	movf	setDoublePressState@f_state^(0+128),w
  8449  378C  063A               	xorwf	??_setDoublePressState^(0+128),w
  8450  378D                     u6885:	
  8451  378D  1903               	btfsc	3,2
  8452  378E  0008               	return
  8453                           
  8454                           ;preset_programming.c: 24: doubleTap_state = f_state;
  8455  378F  0838               	movf	setDoublePressState@f_state^(0+128),w
  8456  3790  00BA               	movwf	??_setDoublePressState^(0+128)
  8457  3791  083A               	movf	??_setDoublePressState^(0+128),w
  8458  3792  0020               	movlb	0	; select bank0
  8459  3793  00E1               	movwf	_doubleTap_state	;volatile
  8460                           
  8461                           ;preset_programming.c: 25: if (f_state == 1) {
  8462  3794  0021               	movlb	1	; select bank1
  8463  3795  0338               	decf	setDoublePressState@f_state^(0+128),w
  8464  3796  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8465  3797  1D03               	btfss	3,2
  8466  3798  2F9C               	goto	l7549
  8467                           
  8468                           ;preset_programming.c: 26: LATBbits.LATB4 = 0;
  8469  3799  0022               	movlb	2	; select bank2
  8470  379A  120D               	bcf	13,4	;volatile
  8471                           
  8472                           ;preset_programming.c: 28: LATBbits.LATB5 = 0;
  8473  379B  128D               	bcf	13,5	;volatile
  8474  379C                     l7549:	
  8475                           
  8476                           ;preset_programming.c: 31: }
  8477                           ;preset_programming.c: 33: if (doubleTap_state == 1) {
  8478  379C  0020               	movlb	0	; select bank0
  8479  379D  0361               	decf	_doubleTap_state,w	;volatile
  8480  379E  1D03               	btfss	3,2
  8481  379F  2FB8               	goto	l7565
  8482                           
  8483                           ;preset_programming.c: 34: if (presetSaveMode == 0) {
  8484  37A0  0865               	movf	_presetSaveMode,w
  8485  37A1  1D03               	btfss	3,2
  8486  37A2  2FAD               	goto	l7557
  8487                           
  8488                           ;preset_programming.c: 35: presetSaveMode = 1;
  8489  37A3  01E5               	clrf	_presetSaveMode
  8490  37A4  0AE5               	incf	_presetSaveMode,f
  8491                           
  8492                           ;preset_programming.c: 36: LATBbits.LATB1 = 0;
  8493  37A5  0022               	movlb	2	; select bank2
  8494  37A6  108D               	bcf	13,1	;volatile
  8495                           
  8496                           ;preset_programming.c: 37: setPresetDisplay(presetChannel);
  8497  37A7  0023               	movlb	3	; select bank3
  8498  37A8  086D               	movf	_presetChannel^(0+384),w
  8499  37A9  31B6  2656  31B7   	fcall	_setPresetDisplay
  8500                           
  8501                           ;preset_programming.c: 38: } else {
  8502  37AC  2FB8               	goto	l7565
  8503  37AD                     l7557:	
  8504                           
  8505                           ;preset_programming.c: 40: presetSaveMode = 0;
  8506  37AD  0020               	movlb	0	; select bank0
  8507  37AE  01E5               	clrf	_presetSaveMode
  8508                           
  8509                           ;preset_programming.c: 41: setPedalMode();
  8510  37AF  31B3  2356  31B7   	fcall	_setPedalMode
  8511                           
  8512                           ;preset_programming.c: 42: resetRingLEDs();
  8513  37B2  31B1  21CD  31B7   	fcall	_resetRingLEDs
  8514                           
  8515                           ;preset_programming.c: 43: showSave();
  8516  37B5  31B1  2158  31B7   	fcall	_showSave
  8517  37B8                     l7565:	
  8518                           
  8519                           ;preset_programming.c: 45: }
  8520                           ;preset_programming.c: 46: }
  8521                           ;preset_programming.c: 48: wait_ms(20);
  8522  37B8  3014               	movlw	20
  8523  37B9  0021               	movlb	1	; select bank1
  8524  37BA  00AC               	movwf	wait_ms@timeSec^(0+128)
  8525  37BB  3000               	movlw	0
  8526  37BC  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8527  37BD  31B5  2545         	fcall	_wait_ms
  8528  37BF  0008               	return
  8529  37C0                     __end_of_setDoublePressState:	
  8530                           
  8531                           	psect	text10
  8532  3158                     __ptext10:	
  8533 ;; *************** function _showSave *****************
  8534 ;; Defined at:
  8535 ;;		line 114 in file "LEDs.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;		None
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;		None
  8540 ;; Return value:  Size  Location     Type
  8541 ;;                  1    wreg      void 
  8542 ;; Registers used:
  8543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8551 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8552 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8553 ;;Total ram usage:        1 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    8
  8556 ;; This function calls:
  8557 ;;		_ring_tactiles
  8558 ;;		_solidring_tactiles
  8559 ;; This function is called by:
  8560 ;;		_setDoublePressState
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           
  8565                           ;psect for function _showSave
  8566  3158                     _showSave:	
  8567                           
  8568                           ;LEDs.c: 115: suspend_blink = 1;
  8569                           
  8570                           ;incstack = 0
  8571                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8572  3158  3001               	movlw	1
  8573  3159  0021               	movlb	1	; select bank1
  8574  315A  00B7               	movwf	??_showSave^(0+128)
  8575  315B  0837               	movf	??_showSave^(0+128),w
  8576  315C  0022               	movlb	2	; select bank2
  8577  315D  00EF               	movwf	_suspend_blink^(0+256)	;volatile
  8578                           
  8579                           ;LEDs.c: 116: ring_tactiles();
  8580  315E  31AA  22FB  31B1   	fcall	_ring_tactiles
  8581                           
  8582                           ;LEDs.c: 117: ring_tactiles();
  8583  3161  31AA  22FB  31B1   	fcall	_ring_tactiles
  8584                           
  8585                           ;LEDs.c: 118: solidring_tactiles();
  8586  3164  31A8  203C  31B1   	fcall	_solidring_tactiles
  8587                           
  8588                           ;LEDs.c: 119: solidring_tactiles();
  8589  3167  31A8  203C         	fcall	_solidring_tactiles
  8590                           
  8591                           ;LEDs.c: 120: suspend_blink = 0;
  8592  3169  0022               	movlb	2	; select bank2
  8593  316A  01EF               	clrf	_suspend_blink^(0+256)	;volatile
  8594  316B  0008               	return
  8595  316C                     __end_of_showSave:	
  8596                           
  8597                           	psect	text11
  8598  283C                     __ptext11:	
  8599 ;; *************** function _solidring_tactiles *****************
  8600 ;; Defined at:
  8601 ;;		line 210 in file "LEDs.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;		None
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  1    wreg      void 
  8608 ;; Registers used:
  8609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8616 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8617 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8618 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8619 ;;Total ram usage:        3 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    7
  8622 ;; This function calls:
  8623 ;;		_set_leds_bottom
  8624 ;;		_set_leds_top
  8625 ;;		_wait_ms
  8626 ;; This function is called by:
  8627 ;;		_showSave
  8628 ;;		_showBootSequence
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           
  8633                           ;psect for function _solidring_tactiles
  8634  283C                     _solidring_tactiles:	
  8635                           
  8636                           ;LEDs.c: 211: uint8_t ring_delay = 30;
  8637                           
  8638                           ;incstack = 0
  8639                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8640  283C  301E               	movlw	30
  8641  283D  0021               	movlb	1	; select bank1
  8642  283E  00B2               	movwf	??_solidring_tactiles^(0+128)
  8643  283F  0832               	movf	??_solidring_tactiles^(0+128),w
  8644  2840  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8645                           
  8646                           ;LEDs.c: 212: set_leds_top(100, 1);
  8647  2841  3064               	movlw	100
  8648  2842  00A0               	movwf	set_leds_top@x^(0+128)
  8649  2843  3000               	movlw	0
  8650  2844  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8651  2845  3001               	movlw	1
  8652  2846  00A2               	movwf	set_leds_top@ledState^(0+128)
  8653  2847  3000               	movlw	0
  8654  2848  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8655  2849  31AC  2440  31A8   	fcall	_set_leds_top
  8656                           
  8657                           ;LEDs.c: 213: set_leds_bottom(100);
  8658  284C  3064               	movlw	100
  8659  284D  0021               	movlb	1	; select bank1
  8660  284E  00A0               	movwf	set_leds_bottom@x^(0+128)
  8661  284F  3000               	movlw	0
  8662  2850  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8663  2851  31B6  2690  31A8   	fcall	_set_leds_bottom
  8664                           
  8665                           ;LEDs.c: 214: wait_ms(ring_delay);
  8666  2854  0021               	movlb	1	; select bank1
  8667  2855  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8668  2856  00B2               	movwf	??_solidring_tactiles^(0+128)
  8669  2857  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8670  2858  0832               	movf	??_solidring_tactiles^(0+128),w
  8671  2859  00AC               	movwf	wait_ms@timeSec^(0+128)
  8672  285A  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8673  285B  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8674  285C  31B5  2545  31A8   	fcall	_wait_ms
  8675                           
  8676                           ;LEDs.c: 216: set_leds_top(0, 1);
  8677  285F  3000               	movlw	0
  8678  2860  0021               	movlb	1	; select bank1
  8679  2861  00A0               	movwf	set_leds_top@x^(0+128)
  8680  2862  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8681  2863  3001               	movlw	1
  8682  2864  00A2               	movwf	set_leds_top@ledState^(0+128)
  8683  2865  3000               	movlw	0
  8684  2866  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8685  2867  31AC  2440  31A8   	fcall	_set_leds_top
  8686                           
  8687                           ;LEDs.c: 217: set_leds_bottom(0);
  8688  286A  3000               	movlw	0
  8689  286B  0021               	movlb	1	; select bank1
  8690  286C  00A0               	movwf	set_leds_bottom@x^(0+128)
  8691  286D  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8692  286E  31B6  2690  31A8   	fcall	_set_leds_bottom
  8693                           
  8694                           ;LEDs.c: 218: wait_ms(ring_delay);
  8695  2871  0021               	movlb	1	; select bank1
  8696  2872  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8697  2873  00B2               	movwf	??_solidring_tactiles^(0+128)
  8698  2874  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8699  2875  0832               	movf	??_solidring_tactiles^(0+128),w
  8700  2876  00AC               	movwf	wait_ms@timeSec^(0+128)
  8701  2877  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8702  2878  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8703  2879  31B5  2545         	fcall	_wait_ms
  8704  287B  0008               	return
  8705  287C                     __end_of_solidring_tactiles:	
  8706                           
  8707                           	psect	text12
  8708  2AFB                     __ptext12:	
  8709 ;; *************** function _ring_tactiles *****************
  8710 ;; Defined at:
  8711 ;;		line 198 in file "LEDs.c"
  8712 ;; Parameters:    Size  Location     Type
  8713 ;;		None
  8714 ;; Auto vars:     Size  Location     Type
  8715 ;;  iLed            2   21[BANK1 ] int 
  8716 ;;  iLed            2   19[BANK1 ] int 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      void 
  8719 ;; Registers used:
  8720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8727 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8728 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8729 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8730 ;;Total ram usage:        5 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    7
  8733 ;; This function calls:
  8734 ;;		_set_leds_bottom
  8735 ;;		_set_leds_top
  8736 ;;		_wait_ms
  8737 ;; This function is called by:
  8738 ;;		_showSave
  8739 ;; This function uses a non-reentrant model
  8740 ;;
  8741                           
  8742                           
  8743                           ;psect for function _ring_tactiles
  8744  2AFB                     _ring_tactiles:	
  8745                           
  8746                           ;LEDs.c: 199: for (int iLed = 1; iLed < 7; iLed++) {
  8747                           
  8748                           ;incstack = 0
  8749                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8750  2AFB  3001               	movlw	1
  8751  2AFC  0021               	movlb	1	; select bank1
  8752  2AFD  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8753  2AFE  3000               	movlw	0
  8754  2AFF  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8755  2B00  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8756  2B01  3A80               	xorlw	128
  8757  2B02  00B2               	movwf	??_ring_tactiles^(0+128)
  8758  2B03  3080               	movlw	128
  8759  2B04  0232               	subwf	??_ring_tactiles^(0+128),w
  8760  2B05  1D03               	skipz
  8761  2B06  2B09               	goto	u6095
  8762  2B07  3007               	movlw	7
  8763  2B08  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8764  2B09                     u6095:	
  8765  2B09  1803               	btfsc	3,0
  8766  2B0A  2B2F               	goto	l6889
  8767  2B0B                     l6881:	
  8768                           
  8769                           ;LEDs.c: 200: set_leds_top(iLed, 1);
  8770  2B0B  0021               	movlb	1	; select bank1
  8771  2B0C  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8772  2B0D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8773  2B0E  0833               	movf	ring_tactiles@iLed^(0+128),w
  8774  2B0F  00A0               	movwf	set_leds_top@x^(0+128)
  8775  2B10  3001               	movlw	1
  8776  2B11  00A2               	movwf	set_leds_top@ledState^(0+128)
  8777  2B12  3000               	movlw	0
  8778  2B13  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8779  2B14  31AC  2440  31AA   	fcall	_set_leds_top
  8780                           
  8781                           ;LEDs.c: 201: wait_ms(5);
  8782  2B17  3005               	movlw	5
  8783  2B18  0021               	movlb	1	; select bank1
  8784  2B19  00AC               	movwf	wait_ms@timeSec^(0+128)
  8785  2B1A  3000               	movlw	0
  8786  2B1B  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8787  2B1C  31B5  2545  31AA   	fcall	_wait_ms
  8788  2B1F  3001               	movlw	1
  8789  2B20  0021               	movlb	1	; select bank1
  8790  2B21  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8791  2B22  3000               	movlw	0
  8792  2B23  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8793  2B24  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8794  2B25  3A80               	xorlw	128
  8795  2B26  00B2               	movwf	??_ring_tactiles^(0+128)
  8796  2B27  3080               	movlw	128
  8797  2B28  0232               	subwf	??_ring_tactiles^(0+128),w
  8798  2B29  1D03               	skipz
  8799  2B2A  2B2D               	goto	u6105
  8800  2B2B  3007               	movlw	7
  8801  2B2C  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8802  2B2D                     u6105:	
  8803  2B2D  1C03               	skipc
  8804  2B2E  2B0B               	goto	l6881
  8805  2B2F                     l6889:	
  8806                           
  8807                           ;LEDs.c: 202: }
  8808                           ;LEDs.c: 203: for (int iLed = 5; iLed > -1; iLed--) {
  8809  2B2F  3005               	movlw	5
  8810  2B30  0021               	movlb	1	; select bank1
  8811  2B31  00B5               	movwf	ring_tactiles@iLed_1609^(0+128)
  8812  2B32  3000               	movlw	0
  8813  2B33  00B6               	movwf	(ring_tactiles@iLed_1609^(0+128)+1)
  8814  2B34                     L2:	
  8815  2B34  1BB6               	btfsc	(ring_tactiles@iLed_1609+1)^(0+128),7
  8816  2B35  0008               	return
  8817                           
  8818                           ;LEDs.c: 204: set_leds_bottom(iLed);
  8819  2B36  0836               	movf	(ring_tactiles@iLed_1609+1)^(0+128),w
  8820  2B37  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8821  2B38  0835               	movf	ring_tactiles@iLed_1609^(0+128),w
  8822  2B39  00A0               	movwf	set_leds_bottom@x^(0+128)
  8823  2B3A  31B6  2690  31AA   	fcall	_set_leds_bottom
  8824                           
  8825                           ;LEDs.c: 205: wait_ms(5);
  8826  2B3D  3005               	movlw	5
  8827  2B3E  0021               	movlb	1	; select bank1
  8828  2B3F  00AC               	movwf	wait_ms@timeSec^(0+128)
  8829  2B40  3000               	movlw	0
  8830  2B41  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8831  2B42  31B5  2545  31AA   	fcall	_wait_ms
  8832  2B45  30FF               	movlw	255
  8833  2B46  0021               	movlb	1	; select bank1
  8834  2B47  07B5               	addwf	ring_tactiles@iLed_1609^(0+128),f
  8835  2B48  30FF               	movlw	255
  8836  2B49  3DB6               	addwfc	(ring_tactiles@iLed_1609+1)^(0+128),f
  8837  2B4A  2B34               	goto	L2
  8838  2B4B                     __end_of_ring_tactiles:	
  8839                           
  8840                           	psect	text13
  8841  3356                     __ptext13:	
  8842 ;; *************** function _setPedalMode *****************
  8843 ;; Defined at:
  8844 ;;		line 141 in file "tactiles.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;		None
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;		None
  8849 ;; Return value:  Size  Location     Type
  8850 ;;                  1    wreg      void 
  8851 ;; Registers used:
  8852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8853 ;; Tracked objects:
  8854 ;;		On entry : 0/0
  8855 ;;		On exit  : 0/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8862 ;;Total ram usage:        0 bytes
  8863 ;; Hardware stack levels used:    1
  8864 ;; Hardware stack levels required when called:    7
  8865 ;; This function calls:
  8866 ;;		_resetRingLEDs
  8867 ;;		_setExpressionDisplay
  8868 ;;		_setPresetDisplay
  8869 ;;		_updatePedalMode
  8870 ;; This function is called by:
  8871 ;;		_update_mode
  8872 ;;		_setDoublePressState
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           
  8877                           ;psect for function _setPedalMode
  8878  3356                     _setPedalMode:	
  8879                           
  8880                           ;tactiles.c: 142: switch (mode2_state) {
  8881                           
  8882                           ;incstack = 0
  8883                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8884  3356  2B70               	goto	l7119
  8885  3357                     l1157:	
  8886                           ;tactiles.c: 143: case 0:
  8887                           
  8888                           
  8889                           ;tactiles.c: 144: LATBbits.LATB1 = 0;
  8890  3357  0022               	movlb	2	; select bank2
  8891  3358  108D               	bcf	13,1	;volatile
  8892                           
  8893                           ;tactiles.c: 145: LATBbits.LATB0 = 0;
  8894  3359  100D               	bcf	13,0	;volatile
  8895                           
  8896                           ;tactiles.c: 146: resetRingLEDs();
  8897  335A  31B1  21CD  31B3   	fcall	_resetRingLEDs
  8898                           
  8899                           ;tactiles.c: 147: break;
  8900  335D  2B7C               	goto	l7121
  8901  335E                     l1159:	
  8902                           ;tactiles.c: 148: case 1:
  8903                           
  8904                           
  8905                           ;tactiles.c: 149: LATBbits.LATB1 = 0;
  8906  335E  0022               	movlb	2	; select bank2
  8907  335F  108D               	bcf	13,1	;volatile
  8908                           
  8909                           ;tactiles.c: 150: LATBbits.LATB0 = 1;
  8910  3360  140D               	bsf	13,0	;volatile
  8911                           
  8912                           ;tactiles.c: 151: setPresetDisplay(presetChannel);
  8913  3361  0023               	movlb	3	; select bank3
  8914  3362  086D               	movf	_presetChannel^(0+384),w
  8915  3363  31B6  2656  31B3   	fcall	_setPresetDisplay
  8916                           
  8917                           ;tactiles.c: 152: break;
  8918  3366  2B7C               	goto	l7121
  8919  3367                     l1160:	
  8920                           ;tactiles.c: 153: case 2:
  8921                           
  8922                           
  8923                           ;tactiles.c: 154: LATBbits.LATB1 = 1;
  8924  3367  0022               	movlb	2	; select bank2
  8925  3368  148D               	bsf	13,1	;volatile
  8926                           
  8927                           ;tactiles.c: 155: LATBbits.LATB0 = 0;
  8928  3369  100D               	bcf	13,0	;volatile
  8929                           
  8930                           ;tactiles.c: 156: setExpressionDisplay(expressionChannel);
  8931  336A  0024               	movlb	4	; select bank4
  8932  336B  086B               	movf	_expressionChannel^(0+512),w
  8933  336C  31B1  2183  31B3   	fcall	_setExpressionDisplay
  8934                           
  8935                           ;tactiles.c: 158: }
  8936                           
  8937                           ;tactiles.c: 157: break;
  8938  336F  2B7C               	goto	l7121
  8939  3370                     l7119:	
  8940  3370  0020               	movlb	0	; select bank0
  8941  3371  0864               	movf	_mode2_state,w
  8942                           
  8943                           ; Switch size 1, requested type "space"
  8944                           ; Number of cases is 3, Range of values is 0 to 2
  8945                           ; switch strategies available:
  8946                           ; Name         Instructions Cycles
  8947                           ; simple_byte           10     6 (average)
  8948                           ; direct_byte           12     6 (fixed)
  8949                           ; jumptable            260     6 (fixed)
  8950                           ;	Chosen strategy is simple_byte
  8951  3372  3A00               	xorlw	0	; case 0
  8952  3373  1903               	skipnz
  8953  3374  2B57               	goto	l1157
  8954  3375  3A01               	xorlw	1	; case 1
  8955  3376  1903               	skipnz
  8956  3377  2B5E               	goto	l1159
  8957  3378  3A03               	xorlw	3	; case 2
  8958  3379  1903               	skipnz
  8959  337A  2B67               	goto	l1160
  8960  337B  2B7C               	goto	l7121
  8961  337C                     l7121:	
  8962                           
  8963                           ;tactiles.c: 159: updatePedalMode();
  8964  337C  31B0  2054         	fcall	_updatePedalMode
  8965  337E  0008               	return
  8966  337F                     __end_of_setPedalMode:	
  8967                           
  8968                           	psect	text14
  8969  3054                     __ptext14:	
  8970 ;; *************** function _updatePedalMode *****************
  8971 ;; Defined at:
  8972 ;;		line 240 in file "state_manager.c"
  8973 ;; Parameters:    Size  Location     Type
  8974 ;;		None
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;		None
  8977 ;; Return value:  Size  Location     Type
  8978 ;;                  1    wreg      void 
  8979 ;; Registers used:
  8980 ;;		wreg
  8981 ;; Tracked objects:
  8982 ;;		On entry : 0/0
  8983 ;;		On exit  : 0/0
  8984 ;;		Unchanged: 0/0
  8985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8988 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8989 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8990 ;;Total ram usage:        1 bytes
  8991 ;; Hardware stack levels used:    1
  8992 ;; Hardware stack levels required when called:    5
  8993 ;; This function calls:
  8994 ;;		Nothing
  8995 ;; This function is called by:
  8996 ;;		_setPedalMode
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           
  9001                           ;psect for function _updatePedalMode
  9002  3054                     _updatePedalMode:	
  9003                           
  9004                           ;state_manager.c: 241: pedalState.pedalMode = mode2_state;
  9005                           
  9006                           ;incstack = 0
  9007                           ; Regs used in _updatePedalMode: [wreg]
  9008  3054  0020               	movlb	0	; select bank0
  9009  3055  0864               	movf	_mode2_state,w
  9010  3056  0021               	movlb	1	; select bank1
  9011  3057  00A0               	movwf	??_updatePedalMode^(0+128)
  9012  3058  0820               	movf	??_updatePedalMode^(0+128),w
  9013  3059  0025               	movlb	5	; select bank5
  9014  305A  00C2               	movwf	(_pedalState^(0+640)+14)
  9015  305B  0008               	return
  9016  305C                     __end_of_updatePedalMode:	
  9017                           
  9018                           	psect	text15
  9019  3656                     __ptext15:	
  9020 ;; *************** function _setPresetDisplay *****************
  9021 ;; Defined at:
  9022 ;;		line 52 in file "preset_programming.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;  ledChannel      1    wreg     unsigned char 
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  1    wreg      void 
  9029 ;; Registers used:
  9030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9037 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9038 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9039 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9040 ;;Total ram usage:        3 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    6
  9043 ;; This function calls:
  9044 ;;		_set_leds_bottom
  9045 ;;		_set_leds_top
  9046 ;; This function is called by:
  9047 ;;		_setPedalMode
  9048 ;;		_update_selectMode
  9049 ;;		_setDoublePressState
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _setPresetDisplay
  9055  3656                     _setPresetDisplay:	
  9056                           
  9057                           ;incstack = 0
  9058                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9059                           ;setPresetDisplay@ledChannel stored from wreg
  9060  3656  0021               	movlb	1	; select bank1
  9061  3657  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  9062                           
  9063                           ;preset_programming.c: 53: if (ledChannel < 6) {
  9064  3658  3006               	movlw	6
  9065  3659  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  9066  365A  1803               	skipnc
  9067  365B  2E72               	goto	l6909
  9068                           
  9069                           ;preset_programming.c: 54: set_leds_top(ledChannel, 1);
  9070  365C  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9071  365D  00A4               	movwf	??_setPresetDisplay^(0+128)
  9072  365E  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9073  365F  0824               	movf	??_setPresetDisplay^(0+128),w
  9074  3660  00A0               	movwf	set_leds_top@x^(0+128)
  9075  3661  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  9076  3662  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9077  3663  3001               	movlw	1
  9078  3664  00A2               	movwf	set_leds_top@ledState^(0+128)
  9079  3665  3000               	movlw	0
  9080  3666  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9081  3667  31AC  2440  31B6   	fcall	_set_leds_top
  9082                           
  9083                           ;preset_programming.c: 55: set_leds_bottom(6);
  9084  366A  3006               	movlw	6
  9085  366B  0021               	movlb	1	; select bank1
  9086  366C  00A0               	movwf	set_leds_bottom@x^(0+128)
  9087  366D  3000               	movlw	0
  9088  366E  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9089  366F  31B6  2690         	fcall	_set_leds_bottom
  9090                           
  9091                           ;preset_programming.c: 56: } else {
  9092  3671  0008               	return
  9093  3672                     l6909:	
  9094                           
  9095                           ;preset_programming.c: 57: set_leds_top(6, 1);
  9096  3672  3006               	movlw	6
  9097  3673  0021               	movlb	1	; select bank1
  9098  3674  00A0               	movwf	set_leds_top@x^(0+128)
  9099  3675  3000               	movlw	0
  9100  3676  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  9101  3677  3001               	movlw	1
  9102  3678  00A2               	movwf	set_leds_top@ledState^(0+128)
  9103  3679  3000               	movlw	0
  9104  367A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9105  367B  31AC  2440  31B6   	fcall	_set_leds_top
  9106                           
  9107                           ;preset_programming.c: 58: set_leds_bottom(10 - ledChannel + 1);
  9108  367E  0021               	movlb	1	; select bank1
  9109  367F  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9110  3680  00A4               	movwf	??_setPresetDisplay^(0+128)
  9111  3681  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9112  3682  09A4               	comf	??_setPresetDisplay^(0+128),f
  9113  3683  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9114  3684  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9115  3685  1903               	skipnz
  9116  3686  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9117  3687  0824               	movf	??_setPresetDisplay^(0+128),w
  9118  3688  3E0B               	addlw	11
  9119  3689  00A0               	movwf	set_leds_bottom@x^(0+128)
  9120  368A  3000               	movlw	0
  9121  368B  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9122  368C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9123  368D  31B6  2690         	fcall	_set_leds_bottom
  9124  368F  0008               	return
  9125  3690                     __end_of_setPresetDisplay:	
  9126                           
  9127                           	psect	text16
  9128  3183                     __ptext16:	
  9129 ;; *************** function _setExpressionDisplay *****************
  9130 ;; Defined at:
  9131 ;;		line 67 in file "preset_programming.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  ledChannel      1    wreg     unsigned char 
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9136 ;; Return value:  Size  Location     Type
  9137 ;;                  1    wreg      void 
  9138 ;; Registers used:
  9139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9146 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9147 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9148 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9149 ;;Total ram usage:        3 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    6
  9152 ;; This function calls:
  9153 ;;		_set_leds_bottom
  9154 ;;		_set_leds_top
  9155 ;; This function is called by:
  9156 ;;		_setPedalMode
  9157 ;;		_update_selectMode
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           
  9162                           ;psect for function _setExpressionDisplay
  9163  3183                     _setExpressionDisplay:	
  9164                           
  9165                           ;incstack = 0
  9166                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9167                           ;setExpressionDisplay@ledChannel stored from wreg
  9168  3183  0021               	movlb	1	; select bank1
  9169  3184  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9170                           
  9171                           ;preset_programming.c: 68: set_leds_top(ledChannel, 1);
  9172  3185  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9173  3186  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9174  3187  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9175  3188  0824               	movf	??_setExpressionDisplay^(0+128),w
  9176  3189  00A0               	movwf	set_leds_top@x^(0+128)
  9177  318A  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9178  318B  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9179  318C  3001               	movlw	1
  9180  318D  00A2               	movwf	set_leds_top@ledState^(0+128)
  9181  318E  3000               	movlw	0
  9182  318F  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9183  3190  31AC  2440  31B1   	fcall	_set_leds_top
  9184                           
  9185                           ;preset_programming.c: 69: set_leds_bottom(6);
  9186  3193  3006               	movlw	6
  9187  3194  0021               	movlb	1	; select bank1
  9188  3195  00A0               	movwf	set_leds_bottom@x^(0+128)
  9189  3196  3000               	movlw	0
  9190  3197  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9191  3198  31B6  2690         	fcall	_set_leds_bottom
  9192  319A  0008               	return
  9193  319B                     __end_of_setExpressionDisplay:	
  9194                           
  9195                           	psect	text17
  9196  31CD                     __ptext17:	
  9197 ;; *************** function _resetRingLEDs *****************
  9198 ;; Defined at:
  9199 ;;		line 62 in file "preset_programming.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;		None
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;		None
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  1    wreg      void 
  9206 ;; Registers used:
  9207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9217 ;;Total ram usage:        0 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    6
  9220 ;; This function calls:
  9221 ;;		_set_leds_bottom
  9222 ;;		_set_leds_top
  9223 ;; This function is called by:
  9224 ;;		_update_mode
  9225 ;;		_setPedalMode
  9226 ;;		_setDoublePressState
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           
  9231                           ;psect for function _resetRingLEDs
  9232  31CD                     _resetRingLEDs:	
  9233                           
  9234                           ;preset_programming.c: 63: set_leds_top(top_push_state, 1);
  9235                           
  9236                           ;incstack = 0
  9237                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9238  31CD  0020               	movlb	0	; select bank0
  9239  31CE  086D               	movf	_top_push_state+1,w
  9240  31CF  0021               	movlb	1	; select bank1
  9241  31D0  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9242  31D1  0020               	movlb	0	; select bank0
  9243  31D2  086C               	movf	_top_push_state,w
  9244  31D3  0021               	movlb	1	; select bank1
  9245  31D4  00A0               	movwf	set_leds_top@x^(0+128)
  9246  31D5  3001               	movlw	1
  9247  31D6  00A2               	movwf	set_leds_top@ledState^(0+128)
  9248  31D7  3000               	movlw	0
  9249  31D8  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9250  31D9  31AC  2440  31B1   	fcall	_set_leds_top
  9251                           
  9252                           ;preset_programming.c: 64: set_leds_bottom(bottom_push_state);
  9253  31DC  0023               	movlb	3	; select bank3
  9254  31DD  0863               	movf	(_bottom_push_state+1)^(0+384),w
  9255  31DE  0021               	movlb	1	; select bank1
  9256  31DF  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9257  31E0  0023               	movlb	3	; select bank3
  9258  31E1  0862               	movf	_bottom_push_state^(0+384),w
  9259  31E2  0021               	movlb	1	; select bank1
  9260  31E3  00A0               	movwf	set_leds_bottom@x^(0+128)
  9261  31E4  31B6  2690         	fcall	_set_leds_bottom
  9262  31E6  0008               	return
  9263  31E7                     __end_of_resetRingLEDs:	
  9264                           
  9265                           	psect	text18
  9266  03CF                     __ptext18:	
  9267 ;; *************** function _updateModulationArray *****************
  9268 ;; Defined at:
  9269 ;;		line 46 in file "modulation.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;		None
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;  thisAngle       2   57[BANK2 ] int 
  9274 ;;  iAngle          1   54[BANK2 ] unsigned char 
  9275 ;;  iAngle          1   59[BANK2 ] unsigned char 
  9276 ;;  subDiv          2   55[BANK2 ] int 
  9277 ;;  angleFactor     2   52[BANK2 ] int 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  1    wreg      void 
  9280 ;; Registers used:
  9281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9288 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9289 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9290 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9291 ;;Total ram usage:       12 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    9
  9294 ;; This function calls:
  9295 ;;		___awdiv
  9296 ;;		___awtoft
  9297 ;;		___wmul
  9298 ;;		_getModulationSubdivision
  9299 ;;		_modCos
  9300 ;;		_modSaw
  9301 ;;		_modSawRev
  9302 ;;		_modSquare
  9303 ;;		_modTri
  9304 ;; This function is called by:
  9305 ;;		_main
  9306 ;; This function uses a non-reentrant model
  9307 ;;
  9308                           
  9309                           
  9310                           ;psect for function _updateModulationArray
  9311  03CF                     _updateModulationArray:	
  9312                           
  9313                           ;modulation.c: 47: int subDiv = getModulationSubdivision();
  9314                           
  9315                           ;incstack = 0
  9316                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9317  03CF  31B4  2487  3183   	fcall	_getModulationSubdivision
  9318  03D2  0021               	movlb	1	; select bank1
  9319  03D3  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9320  03D4  0022               	movlb	2	; select bank2
  9321  03D5  00D8               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9322  03D6  0021               	movlb	1	; select bank1
  9323  03D7  0820               	movf	?_getModulationSubdivision^(0+128),w
  9324  03D8  0022               	movlb	2	; select bank2
  9325  03D9  00D7               	movwf	updateModulationArray@subDiv^(0+256)
  9326                           
  9327                           ;modulation.c: 48: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9328  03DA  307A               	movlw	122
  9329  03DB  0086               	movwf	6
  9330  03DC  3024               	movlw	36
  9331  03DD  0087               	movwf	7
  9332  03DE  3F40               	moviw [0]fsr1
  9333  03DF  00D0               	movwf	??_updateModulationArray^(0+256)
  9334  03E0  3F41               	moviw [1]fsr1
  9335  03E1  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9336  03E2  0023               	movlb	3	; select bank3
  9337  03E3  0863               	movf	(_bottom_push_state+1)^(0+384),w
  9338  03E4  0022               	movlb	2	; select bank2
  9339  03E5  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9340  03E6  1D03               	skipz
  9341  03E7  2BEC               	goto	u8315
  9342  03E8  0023               	movlb	3	; select bank3
  9343  03E9  0862               	movf	_bottom_push_state^(0+384),w
  9344  03EA  0022               	movlb	2	; select bank2
  9345  03EB  0650               	xorwf	??_updateModulationArray^(0+256),w
  9346  03EC                     u8315:	
  9347  03EC  1D03               	skipz
  9348  03ED  2C12               	goto	l8335
  9349  03EE  307C               	movlw	124
  9350  03EF  0086               	movwf	6
  9351  03F0  3024               	movlw	36
  9352  03F1  0087               	movwf	7
  9353  03F2  3F40               	moviw [0]fsr1
  9354  03F3  00D0               	movwf	??_updateModulationArray^(0+256)
  9355  03F4  3F41               	moviw [1]fsr1
  9356  03F5  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9357  03F6  0023               	movlb	3	; select bank3
  9358  03F7  086B               	movf	(_symmetry+1)^(0+384),w
  9359  03F8  0022               	movlb	2	; select bank2
  9360  03F9  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9361  03FA  1D03               	skipz
  9362  03FB  2C00               	goto	u8325
  9363  03FC  0023               	movlb	3	; select bank3
  9364  03FD  086A               	movf	_symmetry^(0+384),w
  9365  03FE  0022               	movlb	2	; select bank2
  9366  03FF  0650               	xorwf	??_updateModulationArray^(0+256),w
  9367  0400                     u8325:	
  9368  0400  1D03               	skipz
  9369  0401  2C12               	goto	l8335
  9370  0402  307E               	movlw	126
  9371  0403  0086               	movwf	6
  9372  0404  3024               	movlw	36
  9373  0405  0087               	movwf	7
  9374  0406  3F40               	moviw [0]fsr1
  9375  0407  00D0               	movwf	??_updateModulationArray^(0+256)
  9376  0408  3F41               	moviw [1]fsr1
  9377  0409  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9378  040A  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9379  040B  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9380  040C  1D03               	skipz
  9381  040D  2C10               	goto	u8335
  9382  040E  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9383  040F  0650               	xorwf	??_updateModulationArray^(0+256),w
  9384  0410                     u8335:	
  9385  0410  1903               	btfsc	3,2
  9386  0411  0008               	return
  9387  0412                     l8335:	
  9388                           ;modulation.c: 50: return;
  9389                           
  9390                           
  9391                           ;modulation.c: 51: }
  9392                           ;modulation.c: 53: int angleFactor = 360/subDiv;
  9393  0412  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9394  0413  0021               	movlb	1	; select bank1
  9395  0414  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9396  0415  0022               	movlb	2	; select bank2
  9397  0416  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9398  0417  0021               	movlb	1	; select bank1
  9399  0418  00A0               	movwf	___awdiv@divisor^(0+128)
  9400  0419  3068               	movlw	104
  9401  041A  00A2               	movwf	___awdiv@dividend^(0+128)
  9402  041B  3001               	movlw	1
  9403  041C  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9404  041D  31AB  23EE  3183   	fcall	___awdiv
  9405  0420  0021               	movlb	1	; select bank1
  9406  0421  0821               	movf	(?___awdiv+1)^(0+128),w
  9407  0422  0022               	movlb	2	; select bank2
  9408  0423  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9409  0424  0021               	movlb	1	; select bank1
  9410  0425  0820               	movf	?___awdiv^(0+128),w
  9411  0426  0022               	movlb	2	; select bank2
  9412  0427  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9413                           
  9414                           ;modulation.c: 54: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9415  0428  01DB               	clrf	updateModulationArray@iAngle^(0+256)
  9416  0429                     l8359:	
  9417  0429  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9418  042A  3A80               	xorlw	128
  9419  042B  3C80               	sublw	128
  9420  042C  1D03               	skipz
  9421  042D  2C30               	goto	u8345
  9422  042E  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9423  042F  025B               	subwf	updateModulationArray@iAngle^(0+256),w
  9424  0430                     u8345:	
  9425  0430  1803               	btfsc	3,0
  9426  0431  2DD6               	goto	l8361
  9427                           
  9428                           ;modulation.c: 55: int thisAngle = angleFactor * iAngle;
  9429  0432  0022               	movlb	2	; select bank2
  9430  0433  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9431  0434  00D0               	movwf	??_updateModulationArray^(0+256)
  9432  0435  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9433  0436  0850               	movf	??_updateModulationArray^(0+256),w
  9434  0437  00AE               	movwf	___wmul@multiplier^(0+256)
  9435  0438  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9436  0439  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9437  043A  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9438  043B  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9439  043C  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9440  043D  00B0               	movwf	___wmul@multiplicand^(0+256)
  9441  043E  31B2  2238  3183   	fcall	___wmul
  9442  0441  0022               	movlb	2	; select bank2
  9443  0442  082F               	movf	(?___wmul+1)^(0+256),w
  9444  0443  00DA               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9445  0444  082E               	movf	?___wmul^(0+256),w
  9446  0445  00D9               	movwf	updateModulationArray@thisAngle^(0+256)
  9447                           
  9448                           ;modulation.c: 56: switch (bottom_push_state) {
  9449  0446  2DB9               	goto	l8355
  9450  0447                     l8341:	
  9451                           ;modulation.c: 57: case 1:
  9452                           
  9453                           
  9454                           ;modulation.c: 58: modArray[iAngle] = modCos(thisAngle, symmetry);
  9455  0447  0022               	movlb	2	; select bank2
  9456  0448  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9457  0449  0021               	movlb	1	; select bank1
  9458  044A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9459  044B  0022               	movlb	2	; select bank2
  9460  044C  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9461  044D  0021               	movlb	1	; select bank1
  9462  044E  00A8               	movwf	___awtoft@c^(0+128)
  9463  044F  31B2  22EC  3183   	fcall	___awtoft
  9464  0452  0021               	movlb	1	; select bank1
  9465  0453  0828               	movf	?___awtoft^(0+128),w
  9466  0454  0022               	movlb	2	; select bank2
  9467  0455  00B4               	movwf	modCos@angle^(0+256)
  9468  0456  0021               	movlb	1	; select bank1
  9469  0457  0829               	movf	(?___awtoft+1)^(0+128),w
  9470  0458  0022               	movlb	2	; select bank2
  9471  0459  00B5               	movwf	(modCos@angle+1)^(0+256)
  9472  045A  0021               	movlb	1	; select bank1
  9473  045B  082A               	movf	(?___awtoft+2)^(0+128),w
  9474  045C  0022               	movlb	2	; select bank2
  9475  045D  00B6               	movwf	(modCos@angle+2)^(0+256)
  9476  045E  0023               	movlb	3	; select bank3
  9477  045F  086B               	movf	(_symmetry+1)^(0+384),w
  9478  0460  0021               	movlb	1	; select bank1
  9479  0461  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9480  0462  0023               	movlb	3	; select bank3
  9481  0463  086A               	movf	_symmetry^(0+384),w
  9482  0464  0021               	movlb	1	; select bank1
  9483  0465  00A8               	movwf	___awtoft@c^(0+128)
  9484  0466  31B2  22EC  3183   	fcall	___awtoft
  9485  0469  0021               	movlb	1	; select bank1
  9486  046A  0828               	movf	?___awtoft^(0+128),w
  9487  046B  0022               	movlb	2	; select bank2
  9488  046C  00B7               	movwf	modCos@inflection^(0+256)
  9489  046D  0021               	movlb	1	; select bank1
  9490  046E  0829               	movf	(?___awtoft+1)^(0+128),w
  9491  046F  0022               	movlb	2	; select bank2
  9492  0470  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9493  0471  0021               	movlb	1	; select bank1
  9494  0472  082A               	movf	(?___awtoft+2)^(0+128),w
  9495  0473  0022               	movlb	2	; select bank2
  9496  0474  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9497  0475  3190  20EC  3183   	fcall	_modCos
  9498  0478  0022               	movlb	2	; select bank2
  9499  0479  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9500  047A  00D0               	movwf	??_updateModulationArray^(0+256)
  9501  047B  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9502  047C  35D0               	lslf	??_updateModulationArray^(0+256),f
  9503  047D  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9504  047E  308A               	movlw	138
  9505  047F  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9506  0480  3023               	movlw	35
  9507  0481  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9508  0482  0850               	movf	??_updateModulationArray^(0+256),w
  9509  0483  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9510  0484  0086               	movwf	6
  9511  0485  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9512  0486  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9513  0487  0087               	movwf	7
  9514  0488  0834               	movf	?_modCos^(0+256),w
  9515  0489  3FC0               	movwi [0]fsr1
  9516  048A  0835               	movf	(?_modCos+1)^(0+256),w
  9517  048B  3FC1               	movwi [1]fsr1
  9518                           
  9519                           ;modulation.c: 59: break;
  9520  048C  2DD0               	goto	l8357
  9521  048D                     l8343:	
  9522                           ;modulation.c: 60: case 2:
  9523                           
  9524                           
  9525                           ;modulation.c: 61: modArray[iAngle] = modTri(thisAngle, symmetry);
  9526  048D  0022               	movlb	2	; select bank2
  9527  048E  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9528  048F  0021               	movlb	1	; select bank1
  9529  0490  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9530  0491  0022               	movlb	2	; select bank2
  9531  0492  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9532  0493  0021               	movlb	1	; select bank1
  9533  0494  00A8               	movwf	___awtoft@c^(0+128)
  9534  0495  31B2  22EC  3183   	fcall	___awtoft
  9535  0498  0021               	movlb	1	; select bank1
  9536  0499  0828               	movf	?___awtoft^(0+128),w
  9537  049A  0022               	movlb	2	; select bank2
  9538  049B  00AE               	movwf	modTri@angle^(0+256)
  9539  049C  0021               	movlb	1	; select bank1
  9540  049D  0829               	movf	(?___awtoft+1)^(0+128),w
  9541  049E  0022               	movlb	2	; select bank2
  9542  049F  00AF               	movwf	(modTri@angle+1)^(0+256)
  9543  04A0  0021               	movlb	1	; select bank1
  9544  04A1  082A               	movf	(?___awtoft+2)^(0+128),w
  9545  04A2  0022               	movlb	2	; select bank2
  9546  04A3  00B0               	movwf	(modTri@angle+2)^(0+256)
  9547  04A4  0023               	movlb	3	; select bank3
  9548  04A5  086B               	movf	(_symmetry+1)^(0+384),w
  9549  04A6  0021               	movlb	1	; select bank1
  9550  04A7  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9551  04A8  0023               	movlb	3	; select bank3
  9552  04A9  086A               	movf	_symmetry^(0+384),w
  9553  04AA  0021               	movlb	1	; select bank1
  9554  04AB  00A8               	movwf	___awtoft@c^(0+128)
  9555  04AC  31B2  22EC  3183   	fcall	___awtoft
  9556  04AF  0021               	movlb	1	; select bank1
  9557  04B0  0828               	movf	?___awtoft^(0+128),w
  9558  04B1  0022               	movlb	2	; select bank2
  9559  04B2  00B1               	movwf	modTri@inflection^(0+256)
  9560  04B3  0021               	movlb	1	; select bank1
  9561  04B4  0829               	movf	(?___awtoft+1)^(0+128),w
  9562  04B5  0022               	movlb	2	; select bank2
  9563  04B6  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9564  04B7  0021               	movlb	1	; select bank1
  9565  04B8  082A               	movf	(?___awtoft+2)^(0+128),w
  9566  04B9  0022               	movlb	2	; select bank2
  9567  04BA  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9568  04BB  3186  2614  3183   	fcall	_modTri
  9569  04BE  0022               	movlb	2	; select bank2
  9570  04BF  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9571  04C0  00D0               	movwf	??_updateModulationArray^(0+256)
  9572  04C1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9573  04C2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9574  04C3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9575  04C4  308A               	movlw	138
  9576  04C5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9577  04C6  3023               	movlw	35
  9578  04C7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9579  04C8  0850               	movf	??_updateModulationArray^(0+256),w
  9580  04C9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9581  04CA  0086               	movwf	6
  9582  04CB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9583  04CC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9584  04CD  0087               	movwf	7
  9585  04CE  082E               	movf	?_modTri^(0+256),w
  9586  04CF  3FC0               	movwi [0]fsr1
  9587  04D0  082F               	movf	(?_modTri+1)^(0+256),w
  9588  04D1  3FC1               	movwi [1]fsr1
  9589                           
  9590                           ;modulation.c: 62: break;
  9591  04D2  2DD0               	goto	l8357
  9592  04D3                     l8345:	
  9593                           ;modulation.c: 63: case 3:
  9594                           
  9595                           
  9596                           ;modulation.c: 64: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9597  04D3  0022               	movlb	2	; select bank2
  9598  04D4  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9599  04D5  0021               	movlb	1	; select bank1
  9600  04D6  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9601  04D7  0022               	movlb	2	; select bank2
  9602  04D8  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9603  04D9  0021               	movlb	1	; select bank1
  9604  04DA  00A8               	movwf	___awtoft@c^(0+128)
  9605  04DB  31B2  22EC  3183   	fcall	___awtoft
  9606  04DE  0021               	movlb	1	; select bank1
  9607  04DF  0828               	movf	?___awtoft^(0+128),w
  9608  04E0  0022               	movlb	2	; select bank2
  9609  04E1  00C8               	movwf	modSquare@angle^(0+256)
  9610  04E2  0021               	movlb	1	; select bank1
  9611  04E3  0829               	movf	(?___awtoft+1)^(0+128),w
  9612  04E4  0022               	movlb	2	; select bank2
  9613  04E5  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9614  04E6  0021               	movlb	1	; select bank1
  9615  04E7  082A               	movf	(?___awtoft+2)^(0+128),w
  9616  04E8  0022               	movlb	2	; select bank2
  9617  04E9  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9618  04EA  0023               	movlb	3	; select bank3
  9619  04EB  086B               	movf	(_symmetry+1)^(0+384),w
  9620  04EC  0021               	movlb	1	; select bank1
  9621  04ED  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9622  04EE  0023               	movlb	3	; select bank3
  9623  04EF  086A               	movf	_symmetry^(0+384),w
  9624  04F0  0021               	movlb	1	; select bank1
  9625  04F1  00A8               	movwf	___awtoft@c^(0+128)
  9626  04F2  31B2  22EC  3183   	fcall	___awtoft
  9627  04F5  0021               	movlb	1	; select bank1
  9628  04F6  0828               	movf	?___awtoft^(0+128),w
  9629  04F7  0022               	movlb	2	; select bank2
  9630  04F8  00CB               	movwf	modSquare@inflection^(0+256)
  9631  04F9  0021               	movlb	1	; select bank1
  9632  04FA  0829               	movf	(?___awtoft+1)^(0+128),w
  9633  04FB  0022               	movlb	2	; select bank2
  9634  04FC  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9635  04FD  0021               	movlb	1	; select bank1
  9636  04FE  082A               	movf	(?___awtoft+2)^(0+128),w
  9637  04FF  0022               	movlb	2	; select bank2
  9638  0500  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9639  0501  31B7  2745  3183   	fcall	_modSquare
  9640  0504  0022               	movlb	2	; select bank2
  9641  0505  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9642  0506  00D0               	movwf	??_updateModulationArray^(0+256)
  9643  0507  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9644  0508  35D0               	lslf	??_updateModulationArray^(0+256),f
  9645  0509  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9646  050A  308A               	movlw	138
  9647  050B  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9648  050C  3023               	movlw	35
  9649  050D  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9650  050E  0850               	movf	??_updateModulationArray^(0+256),w
  9651  050F  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9652  0510  0086               	movwf	6
  9653  0511  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9654  0512  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9655  0513  0087               	movwf	7
  9656  0514  0848               	movf	?_modSquare^(0+256),w
  9657  0515  3FC0               	movwi [0]fsr1
  9658  0516  0849               	movf	(?_modSquare+1)^(0+256),w
  9659  0517  3FC1               	movwi [1]fsr1
  9660                           
  9661                           ;modulation.c: 65: break;
  9662  0518  2DD0               	goto	l8357
  9663  0519                     l8347:	
  9664                           ;modulation.c: 66: case 4:
  9665                           
  9666                           
  9667                           ;modulation.c: 67: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9668  0519  0022               	movlb	2	; select bank2
  9669  051A  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9670  051B  0021               	movlb	1	; select bank1
  9671  051C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9672  051D  0022               	movlb	2	; select bank2
  9673  051E  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9674  051F  0021               	movlb	1	; select bank1
  9675  0520  00A8               	movwf	___awtoft@c^(0+128)
  9676  0521  31B2  22EC  3183   	fcall	___awtoft
  9677  0524  0021               	movlb	1	; select bank1
  9678  0525  0828               	movf	?___awtoft^(0+128),w
  9679  0526  0022               	movlb	2	; select bank2
  9680  0527  00C2               	movwf	modSawRev@angle^(0+256)
  9681  0528  0021               	movlb	1	; select bank1
  9682  0529  0829               	movf	(?___awtoft+1)^(0+128),w
  9683  052A  0022               	movlb	2	; select bank2
  9684  052B  00C3               	movwf	(modSawRev@angle+1)^(0+256)
  9685  052C  0021               	movlb	1	; select bank1
  9686  052D  082A               	movf	(?___awtoft+2)^(0+128),w
  9687  052E  0022               	movlb	2	; select bank2
  9688  052F  00C4               	movwf	(modSawRev@angle+2)^(0+256)
  9689  0530  0023               	movlb	3	; select bank3
  9690  0531  086B               	movf	(_symmetry+1)^(0+384),w
  9691  0532  0021               	movlb	1	; select bank1
  9692  0533  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9693  0534  0023               	movlb	3	; select bank3
  9694  0535  086A               	movf	_symmetry^(0+384),w
  9695  0536  0021               	movlb	1	; select bank1
  9696  0537  00A8               	movwf	___awtoft@c^(0+128)
  9697  0538  31B2  22EC  3183   	fcall	___awtoft
  9698  053B  0021               	movlb	1	; select bank1
  9699  053C  0828               	movf	?___awtoft^(0+128),w
  9700  053D  0022               	movlb	2	; select bank2
  9701  053E  00C5               	movwf	modSawRev@inflection^(0+256)
  9702  053F  0021               	movlb	1	; select bank1
  9703  0540  0829               	movf	(?___awtoft+1)^(0+128),w
  9704  0541  0022               	movlb	2	; select bank2
  9705  0542  00C6               	movwf	(modSawRev@inflection+1)^(0+256)
  9706  0543  0021               	movlb	1	; select bank1
  9707  0544  082A               	movf	(?___awtoft+2)^(0+128),w
  9708  0545  0022               	movlb	2	; select bank2
  9709  0546  00C7               	movwf	(modSawRev@inflection+2)^(0+256)
  9710  0547  31B2  2270  3183   	fcall	_modSawRev
  9711  054A  0022               	movlb	2	; select bank2
  9712  054B  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9713  054C  00D0               	movwf	??_updateModulationArray^(0+256)
  9714  054D  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9715  054E  35D0               	lslf	??_updateModulationArray^(0+256),f
  9716  054F  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9717  0550  308A               	movlw	138
  9718  0551  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9719  0552  3023               	movlw	35
  9720  0553  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9721  0554  0850               	movf	??_updateModulationArray^(0+256),w
  9722  0555  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9723  0556  0086               	movwf	6
  9724  0557  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9725  0558  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9726  0559  0087               	movwf	7
  9727  055A  0842               	movf	?_modSawRev^(0+256),w
  9728  055B  3FC0               	movwi [0]fsr1
  9729  055C  0843               	movf	(?_modSawRev+1)^(0+256),w
  9730  055D  3FC1               	movwi [1]fsr1
  9731                           
  9732                           ;modulation.c: 68: break;
  9733  055E  2DD0               	goto	l8357
  9734  055F                     l8349:	
  9735                           ;modulation.c: 69: case 5:
  9736                           
  9737                           
  9738                           ;modulation.c: 70: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9739  055F  0022               	movlb	2	; select bank2
  9740  0560  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9741  0561  0021               	movlb	1	; select bank1
  9742  0562  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9743  0563  0022               	movlb	2	; select bank2
  9744  0564  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9745  0565  0021               	movlb	1	; select bank1
  9746  0566  00A8               	movwf	___awtoft@c^(0+128)
  9747  0567  31B2  22EC  3183   	fcall	___awtoft
  9748  056A  0021               	movlb	1	; select bank1
  9749  056B  0828               	movf	?___awtoft^(0+128),w
  9750  056C  0022               	movlb	2	; select bank2
  9751  056D  00AE               	movwf	modSaw@angle^(0+256)
  9752  056E  0021               	movlb	1	; select bank1
  9753  056F  0829               	movf	(?___awtoft+1)^(0+128),w
  9754  0570  0022               	movlb	2	; select bank2
  9755  0571  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9756  0572  0021               	movlb	1	; select bank1
  9757  0573  082A               	movf	(?___awtoft+2)^(0+128),w
  9758  0574  0022               	movlb	2	; select bank2
  9759  0575  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9760  0576  0023               	movlb	3	; select bank3
  9761  0577  086B               	movf	(_symmetry+1)^(0+384),w
  9762  0578  0021               	movlb	1	; select bank1
  9763  0579  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9764  057A  0023               	movlb	3	; select bank3
  9765  057B  086A               	movf	_symmetry^(0+384),w
  9766  057C  0021               	movlb	1	; select bank1
  9767  057D  00A8               	movwf	___awtoft@c^(0+128)
  9768  057E  31B2  22EC  3183   	fcall	___awtoft
  9769  0581  0021               	movlb	1	; select bank1
  9770  0582  0828               	movf	?___awtoft^(0+128),w
  9771  0583  0022               	movlb	2	; select bank2
  9772  0584  00B1               	movwf	modSaw@inflection^(0+256)
  9773  0585  0021               	movlb	1	; select bank1
  9774  0586  0829               	movf	(?___awtoft+1)^(0+128),w
  9775  0587  0022               	movlb	2	; select bank2
  9776  0588  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9777  0589  0021               	movlb	1	; select bank1
  9778  058A  082A               	movf	(?___awtoft+2)^(0+128),w
  9779  058B  0022               	movlb	2	; select bank2
  9780  058C  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9781  058D  319D  25E8  3183   	fcall	_modSaw
  9782  0590  0022               	movlb	2	; select bank2
  9783  0591  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9784  0592  00D0               	movwf	??_updateModulationArray^(0+256)
  9785  0593  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9786  0594  35D0               	lslf	??_updateModulationArray^(0+256),f
  9787  0595  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9788  0596  308A               	movlw	138
  9789  0597  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9790  0598  3023               	movlw	35
  9791  0599  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9792  059A  0850               	movf	??_updateModulationArray^(0+256),w
  9793  059B  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9794  059C  0086               	movwf	6
  9795  059D  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9796  059E  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9797  059F  0087               	movwf	7
  9798  05A0  082E               	movf	?_modSaw^(0+256),w
  9799  05A1  3FC0               	movwi [0]fsr1
  9800  05A2  082F               	movf	(?_modSaw+1)^(0+256),w
  9801  05A3  3FC1               	movwi [1]fsr1
  9802                           
  9803                           ;modulation.c: 71: break;
  9804  05A4  2DD0               	goto	l8357
  9805  05A5                     l8351:	
  9806                           ;modulation.c: 72: default:
  9807                           
  9808                           
  9809                           ;modulation.c: 73: modArray[iAngle] = 0;
  9810  05A5  0022               	movlb	2	; select bank2
  9811  05A6  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9812  05A7  00D0               	movwf	??_updateModulationArray^(0+256)
  9813  05A8  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9814  05A9  35D0               	lslf	??_updateModulationArray^(0+256),f
  9815  05AA  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9816  05AB  308A               	movlw	138
  9817  05AC  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9818  05AD  3023               	movlw	35
  9819  05AE  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9820  05AF  0850               	movf	??_updateModulationArray^(0+256),w
  9821  05B0  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9822  05B1  0086               	movwf	6
  9823  05B2  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9824  05B3  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9825  05B4  0087               	movwf	7
  9826  05B5  3000               	movlw	0
  9827  05B6  3FC0               	movwi [0]fsr1
  9828  05B7  3FC1               	movwi [1]fsr1
  9829                           
  9830                           ;modulation.c: 75: }
  9831                           
  9832                           ;modulation.c: 74: break;
  9833  05B8  2DD0               	goto	l8357
  9834  05B9                     l8355:	
  9835                           
  9836                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9837                           ; Switch size 1, requested type "space"
  9838                           ; Number of cases is 1, Range of values is 0 to 0
  9839                           ; switch strategies available:
  9840                           ; Name         Instructions Cycles
  9841                           ; simple_byte            4     3 (average)
  9842                           ; direct_byte            8     6 (fixed)
  9843                           ; jumptable            260     6 (fixed)
  9844                           ;	Chosen strategy is simple_byte
  9845  05B9  0023               	movlb	3	; select bank3
  9846  05BA  0863               	movf	(_bottom_push_state+1)^(0+384),w
  9847  05BB  3A00               	xorlw	0	; case 0
  9848  05BC  1903               	skipnz
  9849  05BD  2DBF               	goto	l9457
  9850  05BE  2DA5               	goto	l8351
  9851  05BF                     l9457:	
  9852                           
  9853                           ; Switch size 1, requested type "space"
  9854                           ; Number of cases is 5, Range of values is 1 to 5
  9855                           ; switch strategies available:
  9856                           ; Name         Instructions Cycles
  9857                           ; simple_byte           16     9 (average)
  9858                           ; direct_byte           19     9 (fixed)
  9859                           ; jumptable            263     9 (fixed)
  9860                           ;	Chosen strategy is simple_byte
  9861  05BF  0862               	movf	_bottom_push_state^(0+384),w
  9862  05C0  3A01               	xorlw	1	; case 1
  9863  05C1  1903               	skipnz
  9864  05C2  2C47               	goto	l8341
  9865  05C3  3A03               	xorlw	3	; case 2
  9866  05C4  1903               	skipnz
  9867  05C5  2C8D               	goto	l8343
  9868  05C6  3A01               	xorlw	1	; case 3
  9869  05C7  1903               	skipnz
  9870  05C8  2CD3               	goto	l8345
  9871  05C9  3A07               	xorlw	7	; case 4
  9872  05CA  1903               	skipnz
  9873  05CB  2D19               	goto	l8347
  9874  05CC  3A01               	xorlw	1	; case 5
  9875  05CD  1903               	skipnz
  9876  05CE  2D5F               	goto	l8349
  9877  05CF  2DA5               	goto	l8351
  9878  05D0                     l8357:	
  9879  05D0  3001               	movlw	1
  9880  05D1  0022               	movlb	2	; select bank2
  9881  05D2  00D0               	movwf	??_updateModulationArray^(0+256)
  9882  05D3  0850               	movf	??_updateModulationArray^(0+256),w
  9883  05D4  07DB               	addwf	updateModulationArray@iAngle^(0+256),f
  9884  05D5  2C29               	goto	l8359
  9885  05D6                     l8361:	
  9886                           
  9887                           ;modulation.c: 76: }
  9888                           ;modulation.c: 77: for (char iAngle = subDiv; iAngle < 120; iAngle++) {
  9889  05D6  0022               	movlb	2	; select bank2
  9890  05D7  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9891  05D8  00D0               	movwf	??_updateModulationArray^(0+256)
  9892  05D9  0850               	movf	??_updateModulationArray^(0+256),w
  9893  05DA  00D6               	movwf	updateModulationArray@iAngle_2595^(0+256)
  9894  05DB  3078               	movlw	120
  9895  05DC  0256               	subwf	updateModulationArray@iAngle_2595^(0+256),w
  9896  05DD  1803               	btfsc	3,0
  9897  05DE  2DF9               	goto	l8371
  9898  05DF                     l8365:	
  9899                           
  9900                           ;modulation.c: 78: modArray[iAngle] = 0 ;
  9901  05DF  0856               	movf	updateModulationArray@iAngle_2595^(0+256),w
  9902  05E0  00D0               	movwf	??_updateModulationArray^(0+256)
  9903  05E1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9904  05E2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9905  05E3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9906  05E4  308A               	movlw	138
  9907  05E5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9908  05E6  3023               	movlw	35
  9909  05E7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9910  05E8  0850               	movf	??_updateModulationArray^(0+256),w
  9911  05E9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9912  05EA  0086               	movwf	6
  9913  05EB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9914  05EC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9915  05ED  0087               	movwf	7
  9916  05EE  3000               	movlw	0
  9917  05EF  3FC0               	movwi [0]fsr1
  9918  05F0  3FC1               	movwi [1]fsr1
  9919  05F1  3001               	movlw	1
  9920  05F2  00D0               	movwf	??_updateModulationArray^(0+256)
  9921  05F3  0850               	movf	??_updateModulationArray^(0+256),w
  9922  05F4  07D6               	addwf	updateModulationArray@iAngle_2595^(0+256),f
  9923  05F5  3078               	movlw	120
  9924  05F6  0256               	subwf	updateModulationArray@iAngle_2595^(0+256),w
  9925  05F7  1C03               	skipc
  9926  05F8  2DDF               	goto	l8365
  9927  05F9                     l8371:	
  9928                           
  9929                           ;modulation.c: 79: }
  9930                           ;modulation.c: 80: modArray[120] = bottom_push_state;
  9931  05F9  307A               	movlw	122
  9932  05FA  0086               	movwf	6
  9933  05FB  3024               	movlw	36
  9934  05FC  0087               	movwf	7
  9935  05FD  0023               	movlb	3	; select bank3
  9936  05FE  0862               	movf	_bottom_push_state^(0+384),w
  9937  05FF  3FC0               	movwi [0]fsr1
  9938  0600  0863               	movf	(_bottom_push_state+1)^(0+384),w
  9939  0601  3FC1               	movwi [1]fsr1
  9940                           
  9941                           ;modulation.c: 81: modArray[121] = symmetry;
  9942  0602  307C               	movlw	124
  9943  0603  0086               	movwf	6
  9944  0604  3024               	movlw	36
  9945  0605  0087               	movwf	7
  9946  0606  086A               	movf	_symmetry^(0+384),w
  9947  0607  3FC0               	movwi [0]fsr1
  9948  0608  086B               	movf	(_symmetry+1)^(0+384),w
  9949  0609  3FC1               	movwi [1]fsr1
  9950                           
  9951                           ;modulation.c: 82: modArray[122] = subDiv;
  9952  060A  307E               	movlw	126
  9953  060B  0086               	movwf	6
  9954  060C  3024               	movlw	36
  9955  060D  0087               	movwf	7
  9956  060E  0022               	movlb	2	; select bank2
  9957  060F  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9958  0610  3FC0               	movwi [0]fsr1
  9959  0611  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9960  0612  3FC1               	movwi [1]fsr1
  9961  0613  0008               	return
  9962  0614                     __end_of_updateModulationArray:	
  9963                           
  9964                           	psect	text19
  9965  0614                     __ptext19:	
  9966 ;; *************** function _modTri *****************
  9967 ;; Defined at:
  9968 ;;		line 102 in file "modulation.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;  angle           3   14[BANK2 ] void 
  9971 ;;  inflection      3   17[BANK2 ] void 
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;  tmpVal          3   29[BANK2 ] void 
  9974 ;;  period          3   26[BANK2 ] void 
  9975 ;;  shift           3   23[BANK2 ] void 
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  2   14[BANK2 ] int 
  9978 ;; Registers used:
  9979 ;;		wreg, status,2, status,0, pclath, cstack
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9985 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9986 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9988 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9989 ;;Total ram usage:       18 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    7
  9992 ;; This function calls:
  9993 ;;		___ftadd
  9994 ;;		___ftdiv
  9995 ;;		___ftge
  9996 ;;		___ftmul
  9997 ;;		___ftneg
  9998 ;;		___fttol
  9999 ;; This function is called by:
 10000 ;;		_updateModulationArray
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           
 10005                           ;psect for function _modTri
 10006  0614                     _modTri:	
 10007                           
 10008                           ;modulation.c: 103: double period = 1.0;
 10009                           
 10010                           ;incstack = 0
 10011                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
 10012  0614  3000               	movlw	0
 10013  0615  0022               	movlb	2	; select bank2
 10014  0616  00BA               	movwf	modTri@period^(0+256)
 10015  0617  3080               	movlw	128
 10016  0618  00BB               	movwf	(modTri@period+1)^(0+256)
 10017  0619  303F               	movlw	63
 10018  061A  00BC               	movwf	(modTri@period+2)^(0+256)
 10019                           
 10020                           ;modulation.c: 104: double shift = 0;
 10021  061B  3000               	movlw	0
 10022  061C  00B7               	movwf	modTri@shift^(0+256)
 10023  061D  3000               	movlw	0
 10024  061E  00B8               	movwf	(modTri@shift+1)^(0+256)
 10025  061F  3000               	movlw	0
 10026  0620  00B9               	movwf	(modTri@shift+2)^(0+256)
 10027                           
 10028                           ;modulation.c: 106: if(angle<=inflection) {
 10029  0621  0831               	movf	modTri@inflection^(0+256),w
 10030  0622  0021               	movlb	1	; select bank1
 10031  0623  00A0               	movwf	___ftge@ff1^(0+128)
 10032  0624  0022               	movlb	2	; select bank2
 10033  0625  0832               	movf	(modTri@inflection+1)^(0+256),w
 10034  0626  0021               	movlb	1	; select bank1
 10035  0627  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10036  0628  0022               	movlb	2	; select bank2
 10037  0629  0833               	movf	(modTri@inflection+2)^(0+256),w
 10038  062A  0021               	movlb	1	; select bank1
 10039  062B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10040  062C  0022               	movlb	2	; select bank2
 10041  062D  082E               	movf	modTri@angle^(0+256),w
 10042  062E  0021               	movlb	1	; select bank1
 10043  062F  00A3               	movwf	___ftge@ff2^(0+128)
 10044  0630  0022               	movlb	2	; select bank2
 10045  0631  082F               	movf	(modTri@angle+1)^(0+256),w
 10046  0632  0021               	movlb	1	; select bank1
 10047  0633  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10048  0634  0022               	movlb	2	; select bank2
 10049  0635  0830               	movf	(modTri@angle+2)^(0+256),w
 10050  0636  0021               	movlb	1	; select bank1
 10051  0637  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10052  0638  31A8  2000  3186   	fcall	___ftge
 10053  063B  1C03               	btfss	3,0
 10054  063C  2E49               	goto	l7615
 10055                           
 10056                           ;modulation.c: 107: period = 180.0/inflection;
 10057  063D  0022               	movlb	2	; select bank2
 10058  063E  0831               	movf	modTri@inflection^(0+256),w
 10059  063F  0021               	movlb	1	; select bank1
 10060  0640  00CE               	movwf	___ftdiv@f2^(0+128)
 10061  0641  0022               	movlb	2	; select bank2
 10062  0642  0832               	movf	(modTri@inflection+1)^(0+256),w
 10063  0643  0021               	movlb	1	; select bank1
 10064  0644  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10065  0645  0022               	movlb	2	; select bank2
 10066  0646  0833               	movf	(modTri@inflection+2)^(0+256),w
 10067  0647  0021               	movlb	1	; select bank1
 10068  0648  2F04               	goto	L3
 10069  0649                     l7615:	
 10070                           ;modulation.c: 108: } else {
 10071                           
 10072                           
 10073                           ;modulation.c: 109: shift = -(360-inflection*2)*(180/(360-inflection));
 10074  0649  0022               	movlb	2	; select bank2
 10075  064A  0831               	movf	modTri@inflection^(0+256),w
 10076  064B  0021               	movlb	1	; select bank1
 10077  064C  00B1               	movwf	___ftmul@f2^(0+128)
 10078  064D  0022               	movlb	2	; select bank2
 10079  064E  0832               	movf	(modTri@inflection+1)^(0+256),w
 10080  064F  0021               	movlb	1	; select bank1
 10081  0650  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10082  0651  0022               	movlb	2	; select bank2
 10083  0652  0833               	movf	(modTri@inflection+2)^(0+256),w
 10084  0653  0021               	movlb	1	; select bank1
 10085  0654  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10086  0655  3000               	movlw	0
 10087  0656  00AE               	movwf	___ftmul@f1^(0+128)
 10088  0657  3000               	movlw	0
 10089  0658  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10090  0659  3040               	movlw	64
 10091  065A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10092  065B  31A5  2590  3186   	fcall	___ftmul
 10093  065E  0021               	movlb	1	; select bank1
 10094  065F  082E               	movf	?___ftmul^(0+128),w
 10095  0660  00BE               	movwf	___ftneg@f1^(0+128)
 10096  0661  082F               	movf	(?___ftmul+1)^(0+128),w
 10097  0662  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10098  0663  0830               	movf	(?___ftmul+2)^(0+128),w
 10099  0664  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10100  0665  31BF  27D2  3186   	fcall	___ftneg
 10101  0668  0021               	movlb	1	; select bank1
 10102  0669  083E               	movf	?___ftneg^(0+128),w
 10103  066A  00C4               	movwf	___ftadd@f2^(0+128)
 10104  066B  083F               	movf	(?___ftneg+1)^(0+128),w
 10105  066C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10106  066D  0840               	movf	(?___ftneg+2)^(0+128),w
 10107  066E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10108  066F  3000               	movlw	0
 10109  0670  00C1               	movwf	___ftadd@f1^(0+128)
 10110  0671  30B4               	movlw	180
 10111  0672  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10112  0673  3043               	movlw	67
 10113  0674  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10114  0675  3199  2104  3186   	fcall	___ftadd
 10115  0678  0021               	movlb	1	; select bank1
 10116  0679  0841               	movf	?___ftadd^(0+128),w
 10117  067A  0022               	movlb	2	; select bank2
 10118  067B  00B4               	movwf	_modTri$3268^(0+256)
 10119  067C  0021               	movlb	1	; select bank1
 10120  067D  0842               	movf	(?___ftadd+1)^(0+128),w
 10121  067E  0022               	movlb	2	; select bank2
 10122  067F  00B5               	movwf	(_modTri$3268+1)^(0+256)
 10123  0680  0021               	movlb	1	; select bank1
 10124  0681  0843               	movf	(?___ftadd+2)^(0+128),w
 10125  0682  0022               	movlb	2	; select bank2
 10126  0683  00B6               	movwf	(_modTri$3268+2)^(0+256)
 10127                           
 10128                           ;modulation.c: 109: shift = -(360-inflection*2)*(180/(360-inflection));
 10129  0684  0834               	movf	_modTri$3268^(0+256),w
 10130  0685  0021               	movlb	1	; select bank1
 10131  0686  00BE               	movwf	___ftneg@f1^(0+128)
 10132  0687  0022               	movlb	2	; select bank2
 10133  0688  0835               	movf	(_modTri$3268+1)^(0+256),w
 10134  0689  0021               	movlb	1	; select bank1
 10135  068A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10136  068B  0022               	movlb	2	; select bank2
 10137  068C  0836               	movf	(_modTri$3268+2)^(0+256),w
 10138  068D  0021               	movlb	1	; select bank1
 10139  068E  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10140  068F  31BF  27D2  3186   	fcall	___ftneg
 10141  0692  0021               	movlb	1	; select bank1
 10142  0693  083E               	movf	?___ftneg^(0+128),w
 10143  0694  00AE               	movwf	___ftmul@f1^(0+128)
 10144  0695  083F               	movf	(?___ftneg+1)^(0+128),w
 10145  0696  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10146  0697  0840               	movf	(?___ftneg+2)^(0+128),w
 10147  0698  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10148  0699  3000               	movlw	0
 10149  069A  00C1               	movwf	___ftadd@f1^(0+128)
 10150  069B  30B4               	movlw	180
 10151  069C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10152  069D  3043               	movlw	67
 10153  069E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10154  069F  0022               	movlb	2	; select bank2
 10155  06A0  0831               	movf	modTri@inflection^(0+256),w
 10156  06A1  0021               	movlb	1	; select bank1
 10157  06A2  00BE               	movwf	___ftneg@f1^(0+128)
 10158  06A3  0022               	movlb	2	; select bank2
 10159  06A4  0832               	movf	(modTri@inflection+1)^(0+256),w
 10160  06A5  0021               	movlb	1	; select bank1
 10161  06A6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10162  06A7  0022               	movlb	2	; select bank2
 10163  06A8  0833               	movf	(modTri@inflection+2)^(0+256),w
 10164  06A9  0021               	movlb	1	; select bank1
 10165  06AA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10166  06AB  31BF  27D2  3186   	fcall	___ftneg
 10167  06AE  0021               	movlb	1	; select bank1
 10168  06AF  083E               	movf	?___ftneg^(0+128),w
 10169  06B0  00C4               	movwf	___ftadd@f2^(0+128)
 10170  06B1  083F               	movf	(?___ftneg+1)^(0+128),w
 10171  06B2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10172  06B3  0840               	movf	(?___ftneg+2)^(0+128),w
 10173  06B4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10174  06B5  3199  2104  3186   	fcall	___ftadd
 10175  06B8  0021               	movlb	1	; select bank1
 10176  06B9  0841               	movf	?___ftadd^(0+128),w
 10177  06BA  00CE               	movwf	___ftdiv@f2^(0+128)
 10178  06BB  0842               	movf	(?___ftadd+1)^(0+128),w
 10179  06BC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10180  06BD  0843               	movf	(?___ftadd+2)^(0+128),w
 10181  06BE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10182  06BF  3000               	movlw	0
 10183  06C0  00D1               	movwf	___ftdiv@f1^(0+128)
 10184  06C1  3034               	movlw	52
 10185  06C2  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10186  06C3  3043               	movlw	67
 10187  06C4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10188  06C5  31A4  2434  3186   	fcall	___ftdiv
 10189  06C8  0021               	movlb	1	; select bank1
 10190  06C9  084E               	movf	?___ftdiv^(0+128),w
 10191  06CA  00B1               	movwf	___ftmul@f2^(0+128)
 10192  06CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10193  06CC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10194  06CD  0850               	movf	(?___ftdiv+2)^(0+128),w
 10195  06CE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10196  06CF  31A5  2590  3186   	fcall	___ftmul
 10197  06D2  0021               	movlb	1	; select bank1
 10198  06D3  082E               	movf	?___ftmul^(0+128),w
 10199  06D4  0022               	movlb	2	; select bank2
 10200  06D5  00B7               	movwf	modTri@shift^(0+256)
 10201  06D6  0021               	movlb	1	; select bank1
 10202  06D7  082F               	movf	(?___ftmul+1)^(0+128),w
 10203  06D8  0022               	movlb	2	; select bank2
 10204  06D9  00B8               	movwf	(modTri@shift+1)^(0+256)
 10205  06DA  0021               	movlb	1	; select bank1
 10206  06DB  0830               	movf	(?___ftmul+2)^(0+128),w
 10207  06DC  0022               	movlb	2	; select bank2
 10208  06DD  00B9               	movwf	(modTri@shift+2)^(0+256)
 10209                           
 10210                           ;modulation.c: 110: period = 180/(360-inflection);
 10211  06DE  3000               	movlw	0
 10212  06DF  0021               	movlb	1	; select bank1
 10213  06E0  00C1               	movwf	___ftadd@f1^(0+128)
 10214  06E1  30B4               	movlw	180
 10215  06E2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10216  06E3  3043               	movlw	67
 10217  06E4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10218  06E5  0022               	movlb	2	; select bank2
 10219  06E6  0831               	movf	modTri@inflection^(0+256),w
 10220  06E7  0021               	movlb	1	; select bank1
 10221  06E8  00BE               	movwf	___ftneg@f1^(0+128)
 10222  06E9  0022               	movlb	2	; select bank2
 10223  06EA  0832               	movf	(modTri@inflection+1)^(0+256),w
 10224  06EB  0021               	movlb	1	; select bank1
 10225  06EC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10226  06ED  0022               	movlb	2	; select bank2
 10227  06EE  0833               	movf	(modTri@inflection+2)^(0+256),w
 10228  06EF  0021               	movlb	1	; select bank1
 10229  06F0  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10230  06F1  31BF  27D2  3186   	fcall	___ftneg
 10231  06F4  0021               	movlb	1	; select bank1
 10232  06F5  083E               	movf	?___ftneg^(0+128),w
 10233  06F6  00C4               	movwf	___ftadd@f2^(0+128)
 10234  06F7  083F               	movf	(?___ftneg+1)^(0+128),w
 10235  06F8  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10236  06F9  0840               	movf	(?___ftneg+2)^(0+128),w
 10237  06FA  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10238  06FB  3199  2104  3186   	fcall	___ftadd
 10239  06FE  0021               	movlb	1	; select bank1
 10240  06FF  0841               	movf	?___ftadd^(0+128),w
 10241  0700  00CE               	movwf	___ftdiv@f2^(0+128)
 10242  0701  0842               	movf	(?___ftadd+1)^(0+128),w
 10243  0702  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10244  0703  0843               	movf	(?___ftadd+2)^(0+128),w
 10245  0704                     L3:	
 10246  0704  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10247  0705  3000               	movlw	0
 10248  0706  00D1               	movwf	___ftdiv@f1^(0+128)
 10249  0707  3034               	movlw	52
 10250  0708  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10251  0709  3043               	movlw	67
 10252  070A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10253  070B  31A4  2434  3186   	fcall	___ftdiv
 10254  070E  0021               	movlb	1	; select bank1
 10255  070F  084E               	movf	?___ftdiv^(0+128),w
 10256  0710  0022               	movlb	2	; select bank2
 10257  0711  00BA               	movwf	modTri@period^(0+256)
 10258  0712  0021               	movlb	1	; select bank1
 10259  0713  084F               	movf	(?___ftdiv+1)^(0+128),w
 10260  0714  0022               	movlb	2	; select bank2
 10261  0715  00BB               	movwf	(modTri@period+1)^(0+256)
 10262  0716  0021               	movlb	1	; select bank1
 10263  0717  0850               	movf	(?___ftdiv+2)^(0+128),w
 10264  0718  0022               	movlb	2	; select bank2
 10265  0719  00BC               	movwf	(modTri@period+2)^(0+256)
 10266                           
 10267                           ;modulation.c: 112: }
 10268                           ;modulation.c: 113: double tmpVal = (period*angle-shift) ;
 10269  071A  0837               	movf	modTri@shift^(0+256),w
 10270  071B  0021               	movlb	1	; select bank1
 10271  071C  00BE               	movwf	___ftneg@f1^(0+128)
 10272  071D  0022               	movlb	2	; select bank2
 10273  071E  0838               	movf	(modTri@shift+1)^(0+256),w
 10274  071F  0021               	movlb	1	; select bank1
 10275  0720  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10276  0721  0022               	movlb	2	; select bank2
 10277  0722  0839               	movf	(modTri@shift+2)^(0+256),w
 10278  0723  0021               	movlb	1	; select bank1
 10279  0724  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10280  0725  31BF  27D2  3186   	fcall	___ftneg
 10281  0728  0021               	movlb	1	; select bank1
 10282  0729  083E               	movf	?___ftneg^(0+128),w
 10283  072A  00C1               	movwf	___ftadd@f1^(0+128)
 10284  072B  083F               	movf	(?___ftneg+1)^(0+128),w
 10285  072C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10286  072D  0840               	movf	(?___ftneg+2)^(0+128),w
 10287  072E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10288  072F  0022               	movlb	2	; select bank2
 10289  0730  082E               	movf	modTri@angle^(0+256),w
 10290  0731  0021               	movlb	1	; select bank1
 10291  0732  00AE               	movwf	___ftmul@f1^(0+128)
 10292  0733  0022               	movlb	2	; select bank2
 10293  0734  082F               	movf	(modTri@angle+1)^(0+256),w
 10294  0735  0021               	movlb	1	; select bank1
 10295  0736  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10296  0737  0022               	movlb	2	; select bank2
 10297  0738  0830               	movf	(modTri@angle+2)^(0+256),w
 10298  0739  0021               	movlb	1	; select bank1
 10299  073A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10300  073B  0022               	movlb	2	; select bank2
 10301  073C  083A               	movf	modTri@period^(0+256),w
 10302  073D  0021               	movlb	1	; select bank1
 10303  073E  00B1               	movwf	___ftmul@f2^(0+128)
 10304  073F  0022               	movlb	2	; select bank2
 10305  0740  083B               	movf	(modTri@period+1)^(0+256),w
 10306  0741  0021               	movlb	1	; select bank1
 10307  0742  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10308  0743  0022               	movlb	2	; select bank2
 10309  0744  083C               	movf	(modTri@period+2)^(0+256),w
 10310  0745  0021               	movlb	1	; select bank1
 10311  0746  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10312  0747  31A5  2590  3186   	fcall	___ftmul
 10313  074A  0021               	movlb	1	; select bank1
 10314  074B  082E               	movf	?___ftmul^(0+128),w
 10315  074C  00C4               	movwf	___ftadd@f2^(0+128)
 10316  074D  082F               	movf	(?___ftmul+1)^(0+128),w
 10317  074E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10318  074F  0830               	movf	(?___ftmul+2)^(0+128),w
 10319  0750  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10320  0751  3199  2104  3186   	fcall	___ftadd
 10321  0754  0021               	movlb	1	; select bank1
 10322  0755  0841               	movf	?___ftadd^(0+128),w
 10323  0756  0022               	movlb	2	; select bank2
 10324  0757  00BD               	movwf	modTri@tmpVal^(0+256)
 10325  0758  0021               	movlb	1	; select bank1
 10326  0759  0842               	movf	(?___ftadd+1)^(0+128),w
 10327  075A  0022               	movlb	2	; select bank2
 10328  075B  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10329  075C  0021               	movlb	1	; select bank1
 10330  075D  0843               	movf	(?___ftadd+2)^(0+128),w
 10331  075E  0022               	movlb	2	; select bank2
 10332  075F  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10333                           
 10334                           ;modulation.c: 114: if (tmpVal > 180) {
 10335  0760  3000               	movlw	0
 10336  0761  0021               	movlb	1	; select bank1
 10337  0762  00A0               	movwf	___ftge@ff1^(0+128)
 10338  0763  3034               	movlw	52
 10339  0764  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10340  0765  3043               	movlw	67
 10341  0766  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10342  0767  0022               	movlb	2	; select bank2
 10343  0768  083D               	movf	modTri@tmpVal^(0+256),w
 10344  0769  0021               	movlb	1	; select bank1
 10345  076A  00A3               	movwf	___ftge@ff2^(0+128)
 10346  076B  0022               	movlb	2	; select bank2
 10347  076C  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10348  076D  0021               	movlb	1	; select bank1
 10349  076E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10350  076F  0022               	movlb	2	; select bank2
 10351  0770  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10352  0771  0021               	movlb	1	; select bank1
 10353  0772  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10354  0773  31A8  2000  3186   	fcall	___ftge
 10355  0776  1803               	btfsc	3,0
 10356  0777  2F8B               	goto	l7619
 10357                           
 10358                           ;modulation.c: 115: tmpVal = tmpVal - 270.0;
 10359  0778  3000               	movlw	0
 10360  0779  0021               	movlb	1	; select bank1
 10361  077A  00C1               	movwf	___ftadd@f1^(0+128)
 10362  077B  3087               	movlw	135
 10363  077C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10364  077D  30C3               	movlw	195
 10365  077E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10366  077F  0022               	movlb	2	; select bank2
 10367  0780  083D               	movf	modTri@tmpVal^(0+256),w
 10368  0781  0021               	movlb	1	; select bank1
 10369  0782  00C4               	movwf	___ftadd@f2^(0+128)
 10370  0783  0022               	movlb	2	; select bank2
 10371  0784  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10372  0785  0021               	movlb	1	; select bank1
 10373  0786  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10374  0787  0022               	movlb	2	; select bank2
 10375  0788  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10376  0789  0021               	movlb	1	; select bank1
 10377  078A  2FA7               	goto	L4
 10378  078B                     l7619:	
 10379                           ;modulation.c: 116: } else {
 10380                           
 10381                           
 10382                           ;modulation.c: 117: tmpVal = 90 - tmpVal;
 10383  078B  3000               	movlw	0
 10384  078C  0021               	movlb	1	; select bank1
 10385  078D  00C1               	movwf	___ftadd@f1^(0+128)
 10386  078E  30B4               	movlw	180
 10387  078F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10388  0790  3042               	movlw	66
 10389  0791  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10390  0792  0022               	movlb	2	; select bank2
 10391  0793  083D               	movf	modTri@tmpVal^(0+256),w
 10392  0794  0021               	movlb	1	; select bank1
 10393  0795  00BE               	movwf	___ftneg@f1^(0+128)
 10394  0796  0022               	movlb	2	; select bank2
 10395  0797  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10396  0798  0021               	movlb	1	; select bank1
 10397  0799  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10398  079A  0022               	movlb	2	; select bank2
 10399  079B  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10400  079C  0021               	movlb	1	; select bank1
 10401  079D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10402  079E  31BF  27D2  3186   	fcall	___ftneg
 10403  07A1  0021               	movlb	1	; select bank1
 10404  07A2  083E               	movf	?___ftneg^(0+128),w
 10405  07A3  00C4               	movwf	___ftadd@f2^(0+128)
 10406  07A4  083F               	movf	(?___ftneg+1)^(0+128),w
 10407  07A5  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10408  07A6  0840               	movf	(?___ftneg+2)^(0+128),w
 10409  07A7                     L4:	
 10410  07A7  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10411  07A8  3199  2104  3186   	fcall	___ftadd
 10412  07AB  0021               	movlb	1	; select bank1
 10413  07AC  0841               	movf	?___ftadd^(0+128),w
 10414  07AD  0022               	movlb	2	; select bank2
 10415  07AE  00BD               	movwf	modTri@tmpVal^(0+256)
 10416  07AF  0021               	movlb	1	; select bank1
 10417  07B0  0842               	movf	(?___ftadd+1)^(0+128),w
 10418  07B1  0022               	movlb	2	; select bank2
 10419  07B2  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10420  07B3  0021               	movlb	1	; select bank1
 10421  07B4  0843               	movf	(?___ftadd+2)^(0+128),w
 10422  07B5  0022               	movlb	2	; select bank2
 10423  07B6  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10424                           
 10425                           ;modulation.c: 118: }
 10426                           ;modulation.c: 119: tmpVal = tmpVal * -10/9;
 10427  07B7  3000               	movlw	0
 10428  07B8  0021               	movlb	1	; select bank1
 10429  07B9  00CE               	movwf	___ftdiv@f2^(0+128)
 10430  07BA  3010               	movlw	16
 10431  07BB  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10432  07BC  3041               	movlw	65
 10433  07BD  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10434  07BE  3000               	movlw	0
 10435  07BF  00AE               	movwf	___ftmul@f1^(0+128)
 10436  07C0  3020               	movlw	32
 10437  07C1  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10438  07C2  30C1               	movlw	193
 10439  07C3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10440  07C4  0022               	movlb	2	; select bank2
 10441  07C5  083D               	movf	modTri@tmpVal^(0+256),w
 10442  07C6  0021               	movlb	1	; select bank1
 10443  07C7  00B1               	movwf	___ftmul@f2^(0+128)
 10444  07C8  0022               	movlb	2	; select bank2
 10445  07C9  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10446  07CA  0021               	movlb	1	; select bank1
 10447  07CB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10448  07CC  0022               	movlb	2	; select bank2
 10449  07CD  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10450  07CE  0021               	movlb	1	; select bank1
 10451  07CF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10452  07D0  31A5  2590  3186   	fcall	___ftmul
 10453  07D3  0021               	movlb	1	; select bank1
 10454  07D4  082E               	movf	?___ftmul^(0+128),w
 10455  07D5  00D1               	movwf	___ftdiv@f1^(0+128)
 10456  07D6  082F               	movf	(?___ftmul+1)^(0+128),w
 10457  07D7  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10458  07D8  0830               	movf	(?___ftmul+2)^(0+128),w
 10459  07D9  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10460  07DA  31A4  2434  3186   	fcall	___ftdiv
 10461  07DD  0021               	movlb	1	; select bank1
 10462  07DE  084E               	movf	?___ftdiv^(0+128),w
 10463  07DF  0022               	movlb	2	; select bank2
 10464  07E0  00BD               	movwf	modTri@tmpVal^(0+256)
 10465  07E1  0021               	movlb	1	; select bank1
 10466  07E2  084F               	movf	(?___ftdiv+1)^(0+128),w
 10467  07E3  0022               	movlb	2	; select bank2
 10468  07E4  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10469  07E5  0021               	movlb	1	; select bank1
 10470  07E6  0850               	movf	(?___ftdiv+2)^(0+128),w
 10471  07E7  0022               	movlb	2	; select bank2
 10472  07E8  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10473                           
 10474                           ;modulation.c: 121: return (int)(tmpVal);
 10475  07E9  083D               	movf	modTri@tmpVal^(0+256),w
 10476  07EA  00A0               	movwf	___fttol@f1^(0+256)
 10477  07EB  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10478  07EC  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10479  07ED  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10480  07EE  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10481  07EF  31A1  2158         	fcall	___fttol
 10482  07F1  0022               	movlb	2	; select bank2
 10483  07F2  0821               	movf	(?___fttol^(0+256)+1),w
 10484  07F3  00AF               	movwf	(?_modTri+1)^(0+256)
 10485  07F4  0820               	movf	?___fttol^(0+256),w
 10486  07F5  00AE               	movwf	?_modTri^(0+256)
 10487  07F6  0008               	return
 10488  07F7                     __end_of_modTri:	
 10489                           
 10490                           	psect	text20
 10491  3745                     __ptext20:	
 10492 ;; *************** function _modSquare *****************
 10493 ;; Defined at:
 10494 ;;		line 145 in file "modulation.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;  angle           3   40[BANK2 ] int 
 10497 ;;  inflection      3   43[BANK2 ] int 
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;  tmpVal          2   46[BANK2 ] int 
 10500 ;; Return value:  Size  Location     Type
 10501 ;;                  2   40[BANK2 ] int 
 10502 ;; Registers used:
 10503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10504 ;; Tracked objects:
 10505 ;;		On entry : 0/0
 10506 ;;		On exit  : 0/0
 10507 ;;		Unchanged: 0/0
 10508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10509 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10510 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10512 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10513 ;;Total ram usage:        8 bytes
 10514 ;; Hardware stack levels used:    1
 10515 ;; Hardware stack levels required when called:    8
 10516 ;; This function calls:
 10517 ;;		___ftge
 10518 ;;		_modCos
 10519 ;; This function is called by:
 10520 ;;		_updateModulationArray
 10521 ;; This function uses a non-reentrant model
 10522 ;;
 10523                           
 10524                           
 10525                           ;psect for function _modSquare
 10526  3745                     _modSquare:	
 10527                           
 10528                           ;modulation.c: 146: int tmpVal = modCos(angle, inflection);
 10529                           
 10530                           ;incstack = 0
 10531                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10532  3745  0022               	movlb	2	; select bank2
 10533  3746  0848               	movf	modSquare@angle^(0+256),w
 10534  3747  00B4               	movwf	modCos@angle^(0+256)
 10535  3748  0849               	movf	(modSquare@angle+1)^(0+256),w
 10536  3749  00B5               	movwf	(modCos@angle+1)^(0+256)
 10537  374A  084A               	movf	(modSquare@angle+2)^(0+256),w
 10538  374B  00B6               	movwf	(modCos@angle+2)^(0+256)
 10539  374C  084B               	movf	modSquare@inflection^(0+256),w
 10540  374D  00B7               	movwf	modCos@inflection^(0+256)
 10541  374E  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10542  374F  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10543  3750  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10544  3751  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10545  3752  3190  20EC  31B7   	fcall	_modCos
 10546  3755  0022               	movlb	2	; select bank2
 10547  3756  0835               	movf	(?_modCos+1)^(0+256),w
 10548  3757  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10549  3758  0834               	movf	?_modCos^(0+256),w
 10550  3759  00CE               	movwf	modSquare@tmpVal^(0+256)
 10551                           
 10552                           ;modulation.c: 147: return (angle <= inflection) ? -100 : 100;
 10553  375A  084B               	movf	modSquare@inflection^(0+256),w
 10554  375B  0021               	movlb	1	; select bank1
 10555  375C  00A0               	movwf	___ftge@ff1^(0+128)
 10556  375D  0022               	movlb	2	; select bank2
 10557  375E  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10558  375F  0021               	movlb	1	; select bank1
 10559  3760  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10560  3761  0022               	movlb	2	; select bank2
 10561  3762  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10562  3763  0021               	movlb	1	; select bank1
 10563  3764  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10564  3765  0022               	movlb	2	; select bank2
 10565  3766  0848               	movf	modSquare@angle^(0+256),w
 10566  3767  0021               	movlb	1	; select bank1
 10567  3768  00A3               	movwf	___ftge@ff2^(0+128)
 10568  3769  0022               	movlb	2	; select bank2
 10569  376A  0849               	movf	(modSquare@angle+1)^(0+256),w
 10570  376B  0021               	movlb	1	; select bank1
 10571  376C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10572  376D  0022               	movlb	2	; select bank2
 10573  376E  084A               	movf	(modSquare@angle+2)^(0+256),w
 10574  376F  0021               	movlb	1	; select bank1
 10575  3770  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10576  3771  31A8  2000  31B7   	fcall	___ftge
 10577  3774  1803               	btfsc	3,0
 10578  3775  2F7C               	goto	l7629
 10579  3776  3064               	movlw	100
 10580  3777  0022               	movlb	2	; select bank2
 10581  3778  00C8               	movwf	?_modSquare^(0+256)
 10582  3779  3000               	movlw	0
 10583  377A  00C9               	movwf	(?_modSquare^(0+256)+1)
 10584  377B  0008               	return
 10585  377C                     l7629:	
 10586  377C  309C               	movlw	156
 10587  377D  0022               	movlb	2	; select bank2
 10588  377E  00C8               	movwf	?_modSquare^(0+256)
 10589  377F  30FF               	movlw	255
 10590  3780  00C9               	movwf	(?_modSquare^(0+256)+1)
 10591  3781  0008               	return
 10592  3782                     __end_of_modSquare:	
 10593                           
 10594                           	psect	text21
 10595  10EC                     __ptext21:	
 10596 ;; *************** function _modCos *****************
 10597 ;; Defined at:
 10598 ;;		line 86 in file "modulation.c"
 10599 ;; Parameters:    Size  Location     Type
 10600 ;;  angle           3   20[BANK2 ] int 
 10601 ;;  inflection      3   23[BANK2 ] int 
 10602 ;; Auto vars:     Size  Location     Type
 10603 ;;  tmpVal          3   37[BANK2 ] int 
 10604 ;;  period          3   34[BANK2 ] int 
 10605 ;;  shift           3   31[BANK2 ] int 
 10606 ;; Return value:  Size  Location     Type
 10607 ;;                  2   20[BANK2 ] int 
 10608 ;; Registers used:
 10609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10610 ;; Tracked objects:
 10611 ;;		On entry : 0/0
 10612 ;;		On exit  : 0/0
 10613 ;;		Unchanged: 0/0
 10614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10615 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10616 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10617 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10618 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10619 ;;Total ram usage:       20 bytes
 10620 ;; Hardware stack levels used:    1
 10621 ;; Hardware stack levels required when called:    7
 10622 ;; This function calls:
 10623 ;;		___ftadd
 10624 ;;		___ftdiv
 10625 ;;		___ftge
 10626 ;;		___ftmul
 10627 ;;		___ftneg
 10628 ;;		___fttol
 10629 ;;		___wmul
 10630 ;; This function is called by:
 10631 ;;		_updateModulationArray
 10632 ;;		_modSquare
 10633 ;; This function uses a non-reentrant model
 10634 ;;
 10635                           
 10636                           
 10637                           ;psect for function _modCos
 10638  10EC                     _modCos:	
 10639                           
 10640                           ;modulation.c: 87: double period = 1.0;
 10641                           
 10642                           ;incstack = 0
 10643                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10644  10EC  3000               	movlw	0
 10645  10ED  0022               	movlb	2	; select bank2
 10646  10EE  00C2               	movwf	modCos@period^(0+256)
 10647  10EF  3080               	movlw	128
 10648  10F0  00C3               	movwf	(modCos@period+1)^(0+256)
 10649  10F1  303F               	movlw	63
 10650  10F2  00C4               	movwf	(modCos@period+2)^(0+256)
 10651                           
 10652                           ;modulation.c: 88: double shift = 0.0;
 10653  10F3  3000               	movlw	0
 10654  10F4  00BF               	movwf	modCos@shift^(0+256)
 10655  10F5  3000               	movlw	0
 10656  10F6  00C0               	movwf	(modCos@shift+1)^(0+256)
 10657  10F7  3000               	movlw	0
 10658  10F8  00C1               	movwf	(modCos@shift+2)^(0+256)
 10659                           
 10660                           ;modulation.c: 90: if(angle<=inflection) {
 10661  10F9  0837               	movf	modCos@inflection^(0+256),w
 10662  10FA  0021               	movlb	1	; select bank1
 10663  10FB  00A0               	movwf	___ftge@ff1^(0+128)
 10664  10FC  0022               	movlb	2	; select bank2
 10665  10FD  0838               	movf	(modCos@inflection+1)^(0+256),w
 10666  10FE  0021               	movlb	1	; select bank1
 10667  10FF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10668  1100  0022               	movlb	2	; select bank2
 10669  1101  0839               	movf	(modCos@inflection+2)^(0+256),w
 10670  1102  0021               	movlb	1	; select bank1
 10671  1103  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10672  1104  0022               	movlb	2	; select bank2
 10673  1105  0834               	movf	modCos@angle^(0+256),w
 10674  1106  0021               	movlb	1	; select bank1
 10675  1107  00A3               	movwf	___ftge@ff2^(0+128)
 10676  1108  0022               	movlb	2	; select bank2
 10677  1109  0835               	movf	(modCos@angle+1)^(0+256),w
 10678  110A  0021               	movlb	1	; select bank1
 10679  110B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10680  110C  0022               	movlb	2	; select bank2
 10681  110D  0836               	movf	(modCos@angle+2)^(0+256),w
 10682  110E  0021               	movlb	1	; select bank1
 10683  110F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10684  1110  31A8  2000  3190   	fcall	___ftge
 10685  1113  1C03               	btfss	3,0
 10686  1114  2921               	goto	l7205
 10687                           
 10688                           ;modulation.c: 91: period = 180.0/inflection;
 10689  1115  0022               	movlb	2	; select bank2
 10690  1116  0837               	movf	modCos@inflection^(0+256),w
 10691  1117  0021               	movlb	1	; select bank1
 10692  1118  00CE               	movwf	___ftdiv@f2^(0+128)
 10693  1119  0022               	movlb	2	; select bank2
 10694  111A  0838               	movf	(modCos@inflection+1)^(0+256),w
 10695  111B  0021               	movlb	1	; select bank1
 10696  111C  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10697  111D  0022               	movlb	2	; select bank2
 10698  111E  0839               	movf	(modCos@inflection+2)^(0+256),w
 10699  111F  0021               	movlb	1	; select bank1
 10700  1120  29DC               	goto	L5
 10701  1121                     l7205:	
 10702                           ;modulation.c: 92: } else {
 10703                           
 10704                           
 10705                           ;modulation.c: 93: shift = -(360-inflection*2)*(180/(360-inflection));
 10706  1121  0022               	movlb	2	; select bank2
 10707  1122  0837               	movf	modCos@inflection^(0+256),w
 10708  1123  0021               	movlb	1	; select bank1
 10709  1124  00B1               	movwf	___ftmul@f2^(0+128)
 10710  1125  0022               	movlb	2	; select bank2
 10711  1126  0838               	movf	(modCos@inflection+1)^(0+256),w
 10712  1127  0021               	movlb	1	; select bank1
 10713  1128  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10714  1129  0022               	movlb	2	; select bank2
 10715  112A  0839               	movf	(modCos@inflection+2)^(0+256),w
 10716  112B  0021               	movlb	1	; select bank1
 10717  112C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10718  112D  3000               	movlw	0
 10719  112E  00AE               	movwf	___ftmul@f1^(0+128)
 10720  112F  3000               	movlw	0
 10721  1130  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10722  1131  3040               	movlw	64
 10723  1132  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10724  1133  31A5  2590  3190   	fcall	___ftmul
 10725  1136  0021               	movlb	1	; select bank1
 10726  1137  082E               	movf	?___ftmul^(0+128),w
 10727  1138  00BE               	movwf	___ftneg@f1^(0+128)
 10728  1139  082F               	movf	(?___ftmul+1)^(0+128),w
 10729  113A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10730  113B  0830               	movf	(?___ftmul+2)^(0+128),w
 10731  113C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10732  113D  31BF  27D2  3190   	fcall	___ftneg
 10733  1140  0021               	movlb	1	; select bank1
 10734  1141  083E               	movf	?___ftneg^(0+128),w
 10735  1142  00C4               	movwf	___ftadd@f2^(0+128)
 10736  1143  083F               	movf	(?___ftneg+1)^(0+128),w
 10737  1144  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10738  1145  0840               	movf	(?___ftneg+2)^(0+128),w
 10739  1146  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10740  1147  3000               	movlw	0
 10741  1148  00C1               	movwf	___ftadd@f1^(0+128)
 10742  1149  30B4               	movlw	180
 10743  114A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10744  114B  3043               	movlw	67
 10745  114C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10746  114D  3199  2104  3190   	fcall	___ftadd
 10747  1150  0021               	movlb	1	; select bank1
 10748  1151  0841               	movf	?___ftadd^(0+128),w
 10749  1152  0022               	movlb	2	; select bank2
 10750  1153  00BC               	movwf	_modCos$3267^(0+256)
 10751  1154  0021               	movlb	1	; select bank1
 10752  1155  0842               	movf	(?___ftadd+1)^(0+128),w
 10753  1156  0022               	movlb	2	; select bank2
 10754  1157  00BD               	movwf	(_modCos$3267+1)^(0+256)
 10755  1158  0021               	movlb	1	; select bank1
 10756  1159  0843               	movf	(?___ftadd+2)^(0+128),w
 10757  115A  0022               	movlb	2	; select bank2
 10758  115B  00BE               	movwf	(_modCos$3267+2)^(0+256)
 10759                           
 10760                           ;modulation.c: 93: shift = -(360-inflection*2)*(180/(360-inflection));
 10761  115C  083C               	movf	_modCos$3267^(0+256),w
 10762  115D  0021               	movlb	1	; select bank1
 10763  115E  00BE               	movwf	___ftneg@f1^(0+128)
 10764  115F  0022               	movlb	2	; select bank2
 10765  1160  083D               	movf	(_modCos$3267+1)^(0+256),w
 10766  1161  0021               	movlb	1	; select bank1
 10767  1162  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10768  1163  0022               	movlb	2	; select bank2
 10769  1164  083E               	movf	(_modCos$3267+2)^(0+256),w
 10770  1165  0021               	movlb	1	; select bank1
 10771  1166  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10772  1167  31BF  27D2  3190   	fcall	___ftneg
 10773  116A  0021               	movlb	1	; select bank1
 10774  116B  083E               	movf	?___ftneg^(0+128),w
 10775  116C  00AE               	movwf	___ftmul@f1^(0+128)
 10776  116D  083F               	movf	(?___ftneg+1)^(0+128),w
 10777  116E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10778  116F  0840               	movf	(?___ftneg+2)^(0+128),w
 10779  1170  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10780  1171  3000               	movlw	0
 10781  1172  00C1               	movwf	___ftadd@f1^(0+128)
 10782  1173  30B4               	movlw	180
 10783  1174  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10784  1175  3043               	movlw	67
 10785  1176  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10786  1177  0022               	movlb	2	; select bank2
 10787  1178  0837               	movf	modCos@inflection^(0+256),w
 10788  1179  0021               	movlb	1	; select bank1
 10789  117A  00BE               	movwf	___ftneg@f1^(0+128)
 10790  117B  0022               	movlb	2	; select bank2
 10791  117C  0838               	movf	(modCos@inflection+1)^(0+256),w
 10792  117D  0021               	movlb	1	; select bank1
 10793  117E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10794  117F  0022               	movlb	2	; select bank2
 10795  1180  0839               	movf	(modCos@inflection+2)^(0+256),w
 10796  1181  0021               	movlb	1	; select bank1
 10797  1182  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10798  1183  31BF  27D2  3190   	fcall	___ftneg
 10799  1186  0021               	movlb	1	; select bank1
 10800  1187  083E               	movf	?___ftneg^(0+128),w
 10801  1188  00C4               	movwf	___ftadd@f2^(0+128)
 10802  1189  083F               	movf	(?___ftneg+1)^(0+128),w
 10803  118A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10804  118B  0840               	movf	(?___ftneg+2)^(0+128),w
 10805  118C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10806  118D  3199  2104  3190   	fcall	___ftadd
 10807  1190  0021               	movlb	1	; select bank1
 10808  1191  0841               	movf	?___ftadd^(0+128),w
 10809  1192  00CE               	movwf	___ftdiv@f2^(0+128)
 10810  1193  0842               	movf	(?___ftadd+1)^(0+128),w
 10811  1194  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10812  1195  0843               	movf	(?___ftadd+2)^(0+128),w
 10813  1196  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10814  1197  3000               	movlw	0
 10815  1198  00D1               	movwf	___ftdiv@f1^(0+128)
 10816  1199  3034               	movlw	52
 10817  119A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10818  119B  3043               	movlw	67
 10819  119C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10820  119D  31A4  2434  3190   	fcall	___ftdiv
 10821  11A0  0021               	movlb	1	; select bank1
 10822  11A1  084E               	movf	?___ftdiv^(0+128),w
 10823  11A2  00B1               	movwf	___ftmul@f2^(0+128)
 10824  11A3  084F               	movf	(?___ftdiv+1)^(0+128),w
 10825  11A4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10826  11A5  0850               	movf	(?___ftdiv+2)^(0+128),w
 10827  11A6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10828  11A7  31A5  2590  3190   	fcall	___ftmul
 10829  11AA  0021               	movlb	1	; select bank1
 10830  11AB  082E               	movf	?___ftmul^(0+128),w
 10831  11AC  0022               	movlb	2	; select bank2
 10832  11AD  00BF               	movwf	modCos@shift^(0+256)
 10833  11AE  0021               	movlb	1	; select bank1
 10834  11AF  082F               	movf	(?___ftmul+1)^(0+128),w
 10835  11B0  0022               	movlb	2	; select bank2
 10836  11B1  00C0               	movwf	(modCos@shift+1)^(0+256)
 10837  11B2  0021               	movlb	1	; select bank1
 10838  11B3  0830               	movf	(?___ftmul+2)^(0+128),w
 10839  11B4  0022               	movlb	2	; select bank2
 10840  11B5  00C1               	movwf	(modCos@shift+2)^(0+256)
 10841                           
 10842                           ;modulation.c: 94: period = 180/(360-inflection);
 10843  11B6  3000               	movlw	0
 10844  11B7  0021               	movlb	1	; select bank1
 10845  11B8  00C1               	movwf	___ftadd@f1^(0+128)
 10846  11B9  30B4               	movlw	180
 10847  11BA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10848  11BB  3043               	movlw	67
 10849  11BC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10850  11BD  0022               	movlb	2	; select bank2
 10851  11BE  0837               	movf	modCos@inflection^(0+256),w
 10852  11BF  0021               	movlb	1	; select bank1
 10853  11C0  00BE               	movwf	___ftneg@f1^(0+128)
 10854  11C1  0022               	movlb	2	; select bank2
 10855  11C2  0838               	movf	(modCos@inflection+1)^(0+256),w
 10856  11C3  0021               	movlb	1	; select bank1
 10857  11C4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10858  11C5  0022               	movlb	2	; select bank2
 10859  11C6  0839               	movf	(modCos@inflection+2)^(0+256),w
 10860  11C7  0021               	movlb	1	; select bank1
 10861  11C8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10862  11C9  31BF  27D2  3190   	fcall	___ftneg
 10863  11CC  0021               	movlb	1	; select bank1
 10864  11CD  083E               	movf	?___ftneg^(0+128),w
 10865  11CE  00C4               	movwf	___ftadd@f2^(0+128)
 10866  11CF  083F               	movf	(?___ftneg+1)^(0+128),w
 10867  11D0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10868  11D1  0840               	movf	(?___ftneg+2)^(0+128),w
 10869  11D2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10870  11D3  3199  2104  3190   	fcall	___ftadd
 10871  11D6  0021               	movlb	1	; select bank1
 10872  11D7  0841               	movf	?___ftadd^(0+128),w
 10873  11D8  00CE               	movwf	___ftdiv@f2^(0+128)
 10874  11D9  0842               	movf	(?___ftadd+1)^(0+128),w
 10875  11DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10876  11DB  0843               	movf	(?___ftadd+2)^(0+128),w
 10877  11DC                     L5:	
 10878  11DC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10879  11DD  3000               	movlw	0
 10880  11DE  00D1               	movwf	___ftdiv@f1^(0+128)
 10881  11DF  3034               	movlw	52
 10882  11E0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10883  11E1  3043               	movlw	67
 10884  11E2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10885  11E3  31A4  2434  3190   	fcall	___ftdiv
 10886  11E6  0021               	movlb	1	; select bank1
 10887  11E7  084E               	movf	?___ftdiv^(0+128),w
 10888  11E8  0022               	movlb	2	; select bank2
 10889  11E9  00C2               	movwf	modCos@period^(0+256)
 10890  11EA  0021               	movlb	1	; select bank1
 10891  11EB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10892  11EC  0022               	movlb	2	; select bank2
 10893  11ED  00C3               	movwf	(modCos@period+1)^(0+256)
 10894  11EE  0021               	movlb	1	; select bank1
 10895  11EF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10896  11F0  0022               	movlb	2	; select bank2
 10897  11F1  00C4               	movwf	(modCos@period+2)^(0+256)
 10898                           
 10899                           ;modulation.c: 96: }
 10900                           ;modulation.c: 97: double tmpVal = (period*angle-shift) /3;
 10901  11F2  3000               	movlw	0
 10902  11F3  0021               	movlb	1	; select bank1
 10903  11F4  00CE               	movwf	___ftdiv@f2^(0+128)
 10904  11F5  3040               	movlw	64
 10905  11F6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10906  11F7  3040               	movlw	64
 10907  11F8  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10908  11F9  0022               	movlb	2	; select bank2
 10909  11FA  083F               	movf	modCos@shift^(0+256),w
 10910  11FB  0021               	movlb	1	; select bank1
 10911  11FC  00BE               	movwf	___ftneg@f1^(0+128)
 10912  11FD  0022               	movlb	2	; select bank2
 10913  11FE  0840               	movf	(modCos@shift+1)^(0+256),w
 10914  11FF  0021               	movlb	1	; select bank1
 10915  1200  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10916  1201  0022               	movlb	2	; select bank2
 10917  1202  0841               	movf	(modCos@shift+2)^(0+256),w
 10918  1203  0021               	movlb	1	; select bank1
 10919  1204  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10920  1205  31BF  27D2  3190   	fcall	___ftneg
 10921  1208  0021               	movlb	1	; select bank1
 10922  1209  083E               	movf	?___ftneg^(0+128),w
 10923  120A  00C1               	movwf	___ftadd@f1^(0+128)
 10924  120B  083F               	movf	(?___ftneg+1)^(0+128),w
 10925  120C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10926  120D  0840               	movf	(?___ftneg+2)^(0+128),w
 10927  120E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10928  120F  0022               	movlb	2	; select bank2
 10929  1210  0834               	movf	modCos@angle^(0+256),w
 10930  1211  0021               	movlb	1	; select bank1
 10931  1212  00AE               	movwf	___ftmul@f1^(0+128)
 10932  1213  0022               	movlb	2	; select bank2
 10933  1214  0835               	movf	(modCos@angle+1)^(0+256),w
 10934  1215  0021               	movlb	1	; select bank1
 10935  1216  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10936  1217  0022               	movlb	2	; select bank2
 10937  1218  0836               	movf	(modCos@angle+2)^(0+256),w
 10938  1219  0021               	movlb	1	; select bank1
 10939  121A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10940  121B  0022               	movlb	2	; select bank2
 10941  121C  0842               	movf	modCos@period^(0+256),w
 10942  121D  0021               	movlb	1	; select bank1
 10943  121E  00B1               	movwf	___ftmul@f2^(0+128)
 10944  121F  0022               	movlb	2	; select bank2
 10945  1220  0843               	movf	(modCos@period+1)^(0+256),w
 10946  1221  0021               	movlb	1	; select bank1
 10947  1222  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10948  1223  0022               	movlb	2	; select bank2
 10949  1224  0844               	movf	(modCos@period+2)^(0+256),w
 10950  1225  0021               	movlb	1	; select bank1
 10951  1226  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10952  1227  31A5  2590  3190   	fcall	___ftmul
 10953  122A  0021               	movlb	1	; select bank1
 10954  122B  082E               	movf	?___ftmul^(0+128),w
 10955  122C  00C4               	movwf	___ftadd@f2^(0+128)
 10956  122D  082F               	movf	(?___ftmul+1)^(0+128),w
 10957  122E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10958  122F  0830               	movf	(?___ftmul+2)^(0+128),w
 10959  1230  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10960  1231  3199  2104  3190   	fcall	___ftadd
 10961  1234  0021               	movlb	1	; select bank1
 10962  1235  0841               	movf	?___ftadd^(0+128),w
 10963  1236  00D1               	movwf	___ftdiv@f1^(0+128)
 10964  1237  0842               	movf	(?___ftadd+1)^(0+128),w
 10965  1238  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10966  1239  0843               	movf	(?___ftadd+2)^(0+128),w
 10967  123A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10968  123B  31A4  2434  3190   	fcall	___ftdiv
 10969  123E  0021               	movlb	1	; select bank1
 10970  123F  084E               	movf	?___ftdiv^(0+128),w
 10971  1240  0022               	movlb	2	; select bank2
 10972  1241  00C5               	movwf	modCos@tmpVal^(0+256)
 10973  1242  0021               	movlb	1	; select bank1
 10974  1243  084F               	movf	(?___ftdiv+1)^(0+128),w
 10975  1244  0022               	movlb	2	; select bank2
 10976  1245  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10977  1246  0021               	movlb	1	; select bank1
 10978  1247  0850               	movf	(?___ftdiv+2)^(0+128),w
 10979  1248  0022               	movlb	2	; select bank2
 10980  1249  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10981                           
 10982                           ;modulation.c: 98: tmpVal = cosArray[(int)(tmpVal)];
 10983  124A  0845               	movf	modCos@tmpVal^(0+256),w
 10984  124B  00A0               	movwf	___fttol@f1^(0+256)
 10985  124C  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10986  124D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10987  124E  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10988  124F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10989  1250  31A1  2158  3190   	fcall	___fttol
 10990  1253  0022               	movlb	2	; select bank2
 10991  1254  0821               	movf	(?___fttol^(0+256)+1),w
 10992  1255  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10993  1256  0820               	movf	?___fttol^(0+256),w
 10994  1257  00AE               	movwf	___wmul@multiplier^(0+256)
 10995  1258  3003               	movlw	3
 10996  1259  00B0               	movwf	___wmul@multiplicand^(0+256)
 10997  125A  3000               	movlw	0
 10998  125B  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10999  125C  31B2  2238  3190   	fcall	___wmul
 11000  125F  3082               	movlw	130
 11001  1260  0022               	movlb	2	; select bank2
 11002  1261  00BA               	movwf	??_modCos^(0+256)
 11003  1262  3024               	movlw	36
 11004  1263  00BB               	movwf	(??_modCos^(0+256)+1)
 11005  1264  082E               	movf	?___wmul^(0+256),w
 11006  1265  073A               	addwf	??_modCos^(0+256),w
 11007  1266  0086               	movwf	6
 11008  1267  082F               	movf	(?___wmul+1)^(0+256),w
 11009  1268  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 11010  1269  0087               	movwf	7
 11011  126A  3F40               	moviw [0]fsr1
 11012  126B  00C5               	movwf	modCos@tmpVal^(0+256)
 11013  126C  3F41               	moviw [1]fsr1
 11014  126D  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 11015  126E  3F42               	moviw [2]fsr1
 11016  126F  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 11017                           
 11018                           ;modulation.c: 99: return (int)(-100.0 * tmpVal);
 11019  1270  0845               	movf	modCos@tmpVal^(0+256),w
 11020  1271  0021               	movlb	1	; select bank1
 11021  1272  00B1               	movwf	___ftmul@f2^(0+128)
 11022  1273  0022               	movlb	2	; select bank2
 11023  1274  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 11024  1275  0021               	movlb	1	; select bank1
 11025  1276  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11026  1277  0022               	movlb	2	; select bank2
 11027  1278  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 11028  1279  0021               	movlb	1	; select bank1
 11029  127A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11030  127B  3000               	movlw	0
 11031  127C  00AE               	movwf	___ftmul@f1^(0+128)
 11032  127D  30C8               	movlw	200
 11033  127E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11034  127F  30C2               	movlw	194
 11035  1280  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11036  1281  31A5  2590  3190   	fcall	___ftmul
 11037  1284  0021               	movlb	1	; select bank1
 11038  1285  082E               	movf	?___ftmul^(0+128),w
 11039  1286  0022               	movlb	2	; select bank2
 11040  1287  00A0               	movwf	___fttol@f1^(0+256)
 11041  1288  0021               	movlb	1	; select bank1
 11042  1289  082F               	movf	(?___ftmul+1)^(0+128),w
 11043  128A  0022               	movlb	2	; select bank2
 11044  128B  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11045  128C  0021               	movlb	1	; select bank1
 11046  128D  0830               	movf	(?___ftmul+2)^(0+128),w
 11047  128E  0022               	movlb	2	; select bank2
 11048  128F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11049  1290  31A1  2158         	fcall	___fttol
 11050  1292  0022               	movlb	2	; select bank2
 11051  1293  0821               	movf	(?___fttol^(0+256)+1),w
 11052  1294  00B5               	movwf	(?_modCos+1)^(0+256)
 11053  1295  0820               	movf	?___fttol^(0+256),w
 11054  1296  00B4               	movwf	?_modCos^(0+256)
 11055  1297  0008               	return
 11056  1298                     __end_of_modCos:	
 11057                           
 11058                           	psect	text22
 11059  3270                     __ptext22:	
 11060 ;; *************** function _modSawRev *****************
 11061 ;; Defined at:
 11062 ;;		line 140 in file "modulation.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;  angle           3   34[BANK2 ] int 
 11065 ;;  inflection      3   37[BANK2 ] int 
 11066 ;; Auto vars:     Size  Location     Type
 11067 ;;		None
 11068 ;; Return value:  Size  Location     Type
 11069 ;;                  2   34[BANK2 ] int 
 11070 ;; Registers used:
 11071 ;;		wreg, status,2, status,0, pclath, cstack
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11077 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11079 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11080 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11081 ;;Total ram usage:        8 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:    8
 11084 ;; This function calls:
 11085 ;;		_modSaw
 11086 ;; This function is called by:
 11087 ;;		_updateModulationArray
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           
 11092                           ;psect for function _modSawRev
 11093  3270                     _modSawRev:	
 11094                           
 11095                           ;modulation.c: 141: return -1 * modSaw(angle, inflection);
 11096                           
 11097                           ;incstack = 0
 11098                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 11099  3270  0022               	movlb	2	; select bank2
 11100  3271  0842               	movf	modSawRev@angle^(0+256),w
 11101  3272  00AE               	movwf	modSaw@angle^(0+256)
 11102  3273  0843               	movf	(modSawRev@angle+1)^(0+256),w
 11103  3274  00AF               	movwf	(modSaw@angle+1)^(0+256)
 11104  3275  0844               	movf	(modSawRev@angle+2)^(0+256),w
 11105  3276  00B0               	movwf	(modSaw@angle+2)^(0+256)
 11106  3277  0845               	movf	modSawRev@inflection^(0+256),w
 11107  3278  00B1               	movwf	modSaw@inflection^(0+256)
 11108  3279  0846               	movf	(modSawRev@inflection+1)^(0+256),w
 11109  327A  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 11110  327B  0847               	movf	(modSawRev@inflection+2)^(0+256),w
 11111  327C  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 11112  327D  319D  25E8         	fcall	_modSaw
 11113  327F  0022               	movlb	2	; select bank2
 11114  3280  092E               	comf	?_modSaw^(0+256),w
 11115  3281  00C8               	movwf	??_modSawRev^(0+256)
 11116  3282  092F               	comf	(?_modSaw+1)^(0+256),w
 11117  3283  00C9               	movwf	(??_modSawRev^(0+256)+1)
 11118  3284  0AC8               	incf	??_modSawRev^(0+256),f
 11119  3285  1903               	skipnz
 11120  3286  0AC9               	incf	(??_modSawRev^(0+256)+1),f
 11121  3287  0848               	movf	??_modSawRev^(0+256),w
 11122  3288  00C2               	movwf	?_modSawRev^(0+256)
 11123  3289  0849               	movf	(??_modSawRev+1)^(0+256),w
 11124  328A  00C3               	movwf	(?_modSawRev+1)^(0+256)
 11125  328B  0008               	return
 11126  328C                     __end_of_modSawRev:	
 11127                           
 11128                           	psect	text23
 11129  1DE8                     __ptext23:	
 11130 ;; *************** function _modSaw *****************
 11131 ;; Defined at:
 11132 ;;		line 125 in file "modulation.c"
 11133 ;; Parameters:    Size  Location     Type
 11134 ;;  angle           3   14[BANK2 ] int 
 11135 ;;  inflection      3   17[BANK2 ] int 
 11136 ;; Auto vars:     Size  Location     Type
 11137 ;;  period          3   31[BANK2 ] int 
 11138 ;;  shift           3   28[BANK2 ] int 
 11139 ;;  mod             2   26[BANK2 ] int 
 11140 ;; Return value:  Size  Location     Type
 11141 ;;                  2   14[BANK2 ] int 
 11142 ;; Registers used:
 11143 ;;		wreg, status,2, status,0, pclath, cstack
 11144 ;; Tracked objects:
 11145 ;;		On entry : 0/0
 11146 ;;		On exit  : 0/0
 11147 ;;		Unchanged: 0/0
 11148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11149 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11150 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11152 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11153 ;;Total ram usage:       20 bytes
 11154 ;; Hardware stack levels used:    1
 11155 ;; Hardware stack levels required when called:    7
 11156 ;; This function calls:
 11157 ;;		___ftadd
 11158 ;;		___ftdiv
 11159 ;;		___ftge
 11160 ;;		___ftmul
 11161 ;;		___ftneg
 11162 ;;		___fttol
 11163 ;; This function is called by:
 11164 ;;		_updateModulationArray
 11165 ;;		_modSawRev
 11166 ;; This function uses a non-reentrant model
 11167 ;;
 11168                           
 11169                           
 11170                           ;psect for function _modSaw
 11171  1DE8                     _modSaw:	
 11172                           
 11173                           ;modulation.c: 126: double period = 1.0;
 11174                           
 11175                           ;incstack = 0
 11176                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 11177  1DE8  3000               	movlw	0
 11178  1DE9  0022               	movlb	2	; select bank2
 11179  1DEA  00BF               	movwf	modSaw@period^(0+256)
 11180  1DEB  3080               	movlw	128
 11181  1DEC  00C0               	movwf	(modSaw@period+1)^(0+256)
 11182  1DED  303F               	movlw	63
 11183  1DEE  00C1               	movwf	(modSaw@period+2)^(0+256)
 11184                           
 11185                           ;modulation.c: 127: double shift = 0;
 11186  1DEF  3000               	movlw	0
 11187  1DF0  00BC               	movwf	modSaw@shift^(0+256)
 11188  1DF1  3000               	movlw	0
 11189  1DF2  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11190  1DF3  3000               	movlw	0
 11191  1DF4  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11192                           
 11193                           ;modulation.c: 129: if(angle<=inflection) {
 11194  1DF5  0831               	movf	modSaw@inflection^(0+256),w
 11195  1DF6  0021               	movlb	1	; select bank1
 11196  1DF7  00A0               	movwf	___ftge@ff1^(0+128)
 11197  1DF8  0022               	movlb	2	; select bank2
 11198  1DF9  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11199  1DFA  0021               	movlb	1	; select bank1
 11200  1DFB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11201  1DFC  0022               	movlb	2	; select bank2
 11202  1DFD  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11203  1DFE  0021               	movlb	1	; select bank1
 11204  1DFF  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11205  1E00  0022               	movlb	2	; select bank2
 11206  1E01  082E               	movf	modSaw@angle^(0+256),w
 11207  1E02  0021               	movlb	1	; select bank1
 11208  1E03  00A3               	movwf	___ftge@ff2^(0+128)
 11209  1E04  0022               	movlb	2	; select bank2
 11210  1E05  082F               	movf	(modSaw@angle+1)^(0+256),w
 11211  1E06  0021               	movlb	1	; select bank1
 11212  1E07  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11213  1E08  0022               	movlb	2	; select bank2
 11214  1E09  0830               	movf	(modSaw@angle+2)^(0+256),w
 11215  1E0A  0021               	movlb	1	; select bank1
 11216  1E0B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11217  1E0C  31A8  2000  319D   	fcall	___ftge
 11218  1E0F  1C03               	btfss	3,0
 11219  1E10  2E1D               	goto	l7219
 11220                           
 11221                           ;modulation.c: 130: period = 180.0/inflection;
 11222  1E11  0022               	movlb	2	; select bank2
 11223  1E12  0831               	movf	modSaw@inflection^(0+256),w
 11224  1E13  0021               	movlb	1	; select bank1
 11225  1E14  00CE               	movwf	___ftdiv@f2^(0+128)
 11226  1E15  0022               	movlb	2	; select bank2
 11227  1E16  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11228  1E17  0021               	movlb	1	; select bank1
 11229  1E18  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11230  1E19  0022               	movlb	2	; select bank2
 11231  1E1A  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11232  1E1B  0021               	movlb	1	; select bank1
 11233  1E1C  2ED8               	goto	L6
 11234  1E1D                     l7219:	
 11235                           ;modulation.c: 131: } else {
 11236                           
 11237                           
 11238                           ;modulation.c: 132: shift = -(360-inflection*2)*(180/(360-inflection));
 11239  1E1D  0022               	movlb	2	; select bank2
 11240  1E1E  0831               	movf	modSaw@inflection^(0+256),w
 11241  1E1F  0021               	movlb	1	; select bank1
 11242  1E20  00B1               	movwf	___ftmul@f2^(0+128)
 11243  1E21  0022               	movlb	2	; select bank2
 11244  1E22  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11245  1E23  0021               	movlb	1	; select bank1
 11246  1E24  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11247  1E25  0022               	movlb	2	; select bank2
 11248  1E26  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11249  1E27  0021               	movlb	1	; select bank1
 11250  1E28  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11251  1E29  3000               	movlw	0
 11252  1E2A  00AE               	movwf	___ftmul@f1^(0+128)
 11253  1E2B  3000               	movlw	0
 11254  1E2C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11255  1E2D  3040               	movlw	64
 11256  1E2E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11257  1E2F  31A5  2590  319D   	fcall	___ftmul
 11258  1E32  0021               	movlb	1	; select bank1
 11259  1E33  082E               	movf	?___ftmul^(0+128),w
 11260  1E34  00BE               	movwf	___ftneg@f1^(0+128)
 11261  1E35  082F               	movf	(?___ftmul+1)^(0+128),w
 11262  1E36  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11263  1E37  0830               	movf	(?___ftmul+2)^(0+128),w
 11264  1E38  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11265  1E39  31BF  27D2  319D   	fcall	___ftneg
 11266  1E3C  0021               	movlb	1	; select bank1
 11267  1E3D  083E               	movf	?___ftneg^(0+128),w
 11268  1E3E  00C4               	movwf	___ftadd@f2^(0+128)
 11269  1E3F  083F               	movf	(?___ftneg+1)^(0+128),w
 11270  1E40  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11271  1E41  0840               	movf	(?___ftneg+2)^(0+128),w
 11272  1E42  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11273  1E43  3000               	movlw	0
 11274  1E44  00C1               	movwf	___ftadd@f1^(0+128)
 11275  1E45  30B4               	movlw	180
 11276  1E46  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11277  1E47  3043               	movlw	67
 11278  1E48  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11279  1E49  3199  2104  319D   	fcall	___ftadd
 11280  1E4C  0021               	movlb	1	; select bank1
 11281  1E4D  0841               	movf	?___ftadd^(0+128),w
 11282  1E4E  0022               	movlb	2	; select bank2
 11283  1E4F  00B4               	movwf	_modSaw$3269^(0+256)
 11284  1E50  0021               	movlb	1	; select bank1
 11285  1E51  0842               	movf	(?___ftadd+1)^(0+128),w
 11286  1E52  0022               	movlb	2	; select bank2
 11287  1E53  00B5               	movwf	(_modSaw$3269+1)^(0+256)
 11288  1E54  0021               	movlb	1	; select bank1
 11289  1E55  0843               	movf	(?___ftadd+2)^(0+128),w
 11290  1E56  0022               	movlb	2	; select bank2
 11291  1E57  00B6               	movwf	(_modSaw$3269+2)^(0+256)
 11292                           
 11293                           ;modulation.c: 132: shift = -(360-inflection*2)*(180/(360-inflection));
 11294  1E58  0834               	movf	_modSaw$3269^(0+256),w
 11295  1E59  0021               	movlb	1	; select bank1
 11296  1E5A  00BE               	movwf	___ftneg@f1^(0+128)
 11297  1E5B  0022               	movlb	2	; select bank2
 11298  1E5C  0835               	movf	(_modSaw$3269+1)^(0+256),w
 11299  1E5D  0021               	movlb	1	; select bank1
 11300  1E5E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11301  1E5F  0022               	movlb	2	; select bank2
 11302  1E60  0836               	movf	(_modSaw$3269+2)^(0+256),w
 11303  1E61  0021               	movlb	1	; select bank1
 11304  1E62  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11305  1E63  31BF  27D2  319D   	fcall	___ftneg
 11306  1E66  0021               	movlb	1	; select bank1
 11307  1E67  083E               	movf	?___ftneg^(0+128),w
 11308  1E68  00AE               	movwf	___ftmul@f1^(0+128)
 11309  1E69  083F               	movf	(?___ftneg+1)^(0+128),w
 11310  1E6A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11311  1E6B  0840               	movf	(?___ftneg+2)^(0+128),w
 11312  1E6C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11313  1E6D  3000               	movlw	0
 11314  1E6E  00C1               	movwf	___ftadd@f1^(0+128)
 11315  1E6F  30B4               	movlw	180
 11316  1E70  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11317  1E71  3043               	movlw	67
 11318  1E72  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11319  1E73  0022               	movlb	2	; select bank2
 11320  1E74  0831               	movf	modSaw@inflection^(0+256),w
 11321  1E75  0021               	movlb	1	; select bank1
 11322  1E76  00BE               	movwf	___ftneg@f1^(0+128)
 11323  1E77  0022               	movlb	2	; select bank2
 11324  1E78  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11325  1E79  0021               	movlb	1	; select bank1
 11326  1E7A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11327  1E7B  0022               	movlb	2	; select bank2
 11328  1E7C  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11329  1E7D  0021               	movlb	1	; select bank1
 11330  1E7E  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11331  1E7F  31BF  27D2  319D   	fcall	___ftneg
 11332  1E82  0021               	movlb	1	; select bank1
 11333  1E83  083E               	movf	?___ftneg^(0+128),w
 11334  1E84  00C4               	movwf	___ftadd@f2^(0+128)
 11335  1E85  083F               	movf	(?___ftneg+1)^(0+128),w
 11336  1E86  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11337  1E87  0840               	movf	(?___ftneg+2)^(0+128),w
 11338  1E88  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11339  1E89  3199  2104  319D   	fcall	___ftadd
 11340  1E8C  0021               	movlb	1	; select bank1
 11341  1E8D  0841               	movf	?___ftadd^(0+128),w
 11342  1E8E  00CE               	movwf	___ftdiv@f2^(0+128)
 11343  1E8F  0842               	movf	(?___ftadd+1)^(0+128),w
 11344  1E90  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11345  1E91  0843               	movf	(?___ftadd+2)^(0+128),w
 11346  1E92  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11347  1E93  3000               	movlw	0
 11348  1E94  00D1               	movwf	___ftdiv@f1^(0+128)
 11349  1E95  3034               	movlw	52
 11350  1E96  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11351  1E97  3043               	movlw	67
 11352  1E98  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11353  1E99  31A4  2434  319D   	fcall	___ftdiv
 11354  1E9C  0021               	movlb	1	; select bank1
 11355  1E9D  084E               	movf	?___ftdiv^(0+128),w
 11356  1E9E  00B1               	movwf	___ftmul@f2^(0+128)
 11357  1E9F  084F               	movf	(?___ftdiv+1)^(0+128),w
 11358  1EA0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11359  1EA1  0850               	movf	(?___ftdiv+2)^(0+128),w
 11360  1EA2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11361  1EA3  31A5  2590  319D   	fcall	___ftmul
 11362  1EA6  0021               	movlb	1	; select bank1
 11363  1EA7  082E               	movf	?___ftmul^(0+128),w
 11364  1EA8  0022               	movlb	2	; select bank2
 11365  1EA9  00BC               	movwf	modSaw@shift^(0+256)
 11366  1EAA  0021               	movlb	1	; select bank1
 11367  1EAB  082F               	movf	(?___ftmul+1)^(0+128),w
 11368  1EAC  0022               	movlb	2	; select bank2
 11369  1EAD  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11370  1EAE  0021               	movlb	1	; select bank1
 11371  1EAF  0830               	movf	(?___ftmul+2)^(0+128),w
 11372  1EB0  0022               	movlb	2	; select bank2
 11373  1EB1  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11374                           
 11375                           ;modulation.c: 133: period = 180/(360-inflection);
 11376  1EB2  3000               	movlw	0
 11377  1EB3  0021               	movlb	1	; select bank1
 11378  1EB4  00C1               	movwf	___ftadd@f1^(0+128)
 11379  1EB5  30B4               	movlw	180
 11380  1EB6  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11381  1EB7  3043               	movlw	67
 11382  1EB8  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11383  1EB9  0022               	movlb	2	; select bank2
 11384  1EBA  0831               	movf	modSaw@inflection^(0+256),w
 11385  1EBB  0021               	movlb	1	; select bank1
 11386  1EBC  00BE               	movwf	___ftneg@f1^(0+128)
 11387  1EBD  0022               	movlb	2	; select bank2
 11388  1EBE  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11389  1EBF  0021               	movlb	1	; select bank1
 11390  1EC0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11391  1EC1  0022               	movlb	2	; select bank2
 11392  1EC2  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11393  1EC3  0021               	movlb	1	; select bank1
 11394  1EC4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11395  1EC5  31BF  27D2  319D   	fcall	___ftneg
 11396  1EC8  0021               	movlb	1	; select bank1
 11397  1EC9  083E               	movf	?___ftneg^(0+128),w
 11398  1ECA  00C4               	movwf	___ftadd@f2^(0+128)
 11399  1ECB  083F               	movf	(?___ftneg+1)^(0+128),w
 11400  1ECC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11401  1ECD  0840               	movf	(?___ftneg+2)^(0+128),w
 11402  1ECE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11403  1ECF  3199  2104  319D   	fcall	___ftadd
 11404  1ED2  0021               	movlb	1	; select bank1
 11405  1ED3  0841               	movf	?___ftadd^(0+128),w
 11406  1ED4  00CE               	movwf	___ftdiv@f2^(0+128)
 11407  1ED5  0842               	movf	(?___ftadd+1)^(0+128),w
 11408  1ED6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11409  1ED7  0843               	movf	(?___ftadd+2)^(0+128),w
 11410  1ED8                     L6:	
 11411  1ED8  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11412  1ED9  3000               	movlw	0
 11413  1EDA  00D1               	movwf	___ftdiv@f1^(0+128)
 11414  1EDB  3034               	movlw	52
 11415  1EDC  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11416  1EDD  3043               	movlw	67
 11417  1EDE  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11418  1EDF  31A4  2434  319D   	fcall	___ftdiv
 11419  1EE2  0021               	movlb	1	; select bank1
 11420  1EE3  084E               	movf	?___ftdiv^(0+128),w
 11421  1EE4  0022               	movlb	2	; select bank2
 11422  1EE5  00BF               	movwf	modSaw@period^(0+256)
 11423  1EE6  0021               	movlb	1	; select bank1
 11424  1EE7  084F               	movf	(?___ftdiv+1)^(0+128),w
 11425  1EE8  0022               	movlb	2	; select bank2
 11426  1EE9  00C0               	movwf	(modSaw@period+1)^(0+256)
 11427  1EEA  0021               	movlb	1	; select bank1
 11428  1EEB  0850               	movf	(?___ftdiv+2)^(0+128),w
 11429  1EEC  0022               	movlb	2	; select bank2
 11430  1EED  00C1               	movwf	(modSaw@period+2)^(0+256)
 11431                           
 11432                           ;modulation.c: 134: }
 11433                           ;modulation.c: 136: int mod = (int)((period*angle-shift-180)*5/9);
 11434  1EEE  083F               	movf	modSaw@period^(0+256),w
 11435  1EEF  0021               	movlb	1	; select bank1
 11436  1EF0  00B1               	movwf	___ftmul@f2^(0+128)
 11437  1EF1  0022               	movlb	2	; select bank2
 11438  1EF2  0840               	movf	(modSaw@period+1)^(0+256),w
 11439  1EF3  0021               	movlb	1	; select bank1
 11440  1EF4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11441  1EF5  0022               	movlb	2	; select bank2
 11442  1EF6  0841               	movf	(modSaw@period+2)^(0+256),w
 11443  1EF7  0021               	movlb	1	; select bank1
 11444  1EF8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11445  1EF9  0022               	movlb	2	; select bank2
 11446  1EFA  082E               	movf	modSaw@angle^(0+256),w
 11447  1EFB  0021               	movlb	1	; select bank1
 11448  1EFC  00AE               	movwf	___ftmul@f1^(0+128)
 11449  1EFD  0022               	movlb	2	; select bank2
 11450  1EFE  082F               	movf	(modSaw@angle+1)^(0+256),w
 11451  1EFF  0021               	movlb	1	; select bank1
 11452  1F00  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11453  1F01  0022               	movlb	2	; select bank2
 11454  1F02  0830               	movf	(modSaw@angle+2)^(0+256),w
 11455  1F03  0021               	movlb	1	; select bank1
 11456  1F04  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11457  1F05  31A5  2590  319D   	fcall	___ftmul
 11458  1F08  0021               	movlb	1	; select bank1
 11459  1F09  082E               	movf	?___ftmul^(0+128),w
 11460  1F0A  00C4               	movwf	___ftadd@f2^(0+128)
 11461  1F0B  082F               	movf	(?___ftmul+1)^(0+128),w
 11462  1F0C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11463  1F0D  0830               	movf	(?___ftmul+2)^(0+128),w
 11464  1F0E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11465  1F0F  0022               	movlb	2	; select bank2
 11466  1F10  083C               	movf	modSaw@shift^(0+256),w
 11467  1F11  0021               	movlb	1	; select bank1
 11468  1F12  00BE               	movwf	___ftneg@f1^(0+128)
 11469  1F13  0022               	movlb	2	; select bank2
 11470  1F14  083D               	movf	(modSaw@shift+1)^(0+256),w
 11471  1F15  0021               	movlb	1	; select bank1
 11472  1F16  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11473  1F17  0022               	movlb	2	; select bank2
 11474  1F18  083E               	movf	(modSaw@shift+2)^(0+256),w
 11475  1F19  0021               	movlb	1	; select bank1
 11476  1F1A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11477  1F1B  31BF  27D2  319D   	fcall	___ftneg
 11478  1F1E  0021               	movlb	1	; select bank1
 11479  1F1F  083E               	movf	?___ftneg^(0+128),w
 11480  1F20  00C1               	movwf	___ftadd@f1^(0+128)
 11481  1F21  083F               	movf	(?___ftneg+1)^(0+128),w
 11482  1F22  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11483  1F23  0840               	movf	(?___ftneg+2)^(0+128),w
 11484  1F24  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11485  1F25  3199  2104  319D   	fcall	___ftadd
 11486  1F28  0021               	movlb	1	; select bank1
 11487  1F29  0841               	movf	?___ftadd^(0+128),w
 11488  1F2A  0022               	movlb	2	; select bank2
 11489  1F2B  00B7               	movwf	_modSaw$3270^(0+256)
 11490  1F2C  0021               	movlb	1	; select bank1
 11491  1F2D  0842               	movf	(?___ftadd+1)^(0+128),w
 11492  1F2E  0022               	movlb	2	; select bank2
 11493  1F2F  00B8               	movwf	(_modSaw$3270+1)^(0+256)
 11494  1F30  0021               	movlb	1	; select bank1
 11495  1F31  0843               	movf	(?___ftadd+2)^(0+128),w
 11496  1F32  0022               	movlb	2	; select bank2
 11497  1F33  00B9               	movwf	(_modSaw$3270+2)^(0+256)
 11498                           
 11499                           ;modulation.c: 134: }
 11500                           ;modulation.c: 136: int mod = (int)((period*angle-shift-180)*5/9);
 11501  1F34  0837               	movf	_modSaw$3270^(0+256),w
 11502  1F35  0021               	movlb	1	; select bank1
 11503  1F36  00C4               	movwf	___ftadd@f2^(0+128)
 11504  1F37  0022               	movlb	2	; select bank2
 11505  1F38  0838               	movf	(_modSaw$3270+1)^(0+256),w
 11506  1F39  0021               	movlb	1	; select bank1
 11507  1F3A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11508  1F3B  0022               	movlb	2	; select bank2
 11509  1F3C  0839               	movf	(_modSaw$3270+2)^(0+256),w
 11510  1F3D  0021               	movlb	1	; select bank1
 11511  1F3E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11512  1F3F  3000               	movlw	0
 11513  1F40  00C1               	movwf	___ftadd@f1^(0+128)
 11514  1F41  3034               	movlw	52
 11515  1F42  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11516  1F43  30C3               	movlw	195
 11517  1F44  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11518  1F45  3199  2104  319D   	fcall	___ftadd
 11519  1F48  0021               	movlb	1	; select bank1
 11520  1F49  0841               	movf	?___ftadd^(0+128),w
 11521  1F4A  00B1               	movwf	___ftmul@f2^(0+128)
 11522  1F4B  0842               	movf	(?___ftadd+1)^(0+128),w
 11523  1F4C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11524  1F4D  0843               	movf	(?___ftadd+2)^(0+128),w
 11525  1F4E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11526  1F4F  3000               	movlw	0
 11527  1F50  00AE               	movwf	___ftmul@f1^(0+128)
 11528  1F51  30A0               	movlw	160
 11529  1F52  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11530  1F53  3040               	movlw	64
 11531  1F54  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11532  1F55  31A5  2590  319D   	fcall	___ftmul
 11533  1F58  0021               	movlb	1	; select bank1
 11534  1F59  082E               	movf	?___ftmul^(0+128),w
 11535  1F5A  00D1               	movwf	___ftdiv@f1^(0+128)
 11536  1F5B  082F               	movf	(?___ftmul+1)^(0+128),w
 11537  1F5C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11538  1F5D  0830               	movf	(?___ftmul+2)^(0+128),w
 11539  1F5E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11540  1F5F  3000               	movlw	0
 11541  1F60  00CE               	movwf	___ftdiv@f2^(0+128)
 11542  1F61  3010               	movlw	16
 11543  1F62  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11544  1F63  3041               	movlw	65
 11545  1F64  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11546  1F65  31A4  2434  319D   	fcall	___ftdiv
 11547  1F68  0021               	movlb	1	; select bank1
 11548  1F69  084E               	movf	?___ftdiv^(0+128),w
 11549  1F6A  0022               	movlb	2	; select bank2
 11550  1F6B  00A0               	movwf	___fttol@f1^(0+256)
 11551  1F6C  0021               	movlb	1	; select bank1
 11552  1F6D  084F               	movf	(?___ftdiv+1)^(0+128),w
 11553  1F6E  0022               	movlb	2	; select bank2
 11554  1F6F  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11555  1F70  0021               	movlb	1	; select bank1
 11556  1F71  0850               	movf	(?___ftdiv+2)^(0+128),w
 11557  1F72  0022               	movlb	2	; select bank2
 11558  1F73  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11559  1F74  31A1  2158         	fcall	___fttol
 11560  1F76  0022               	movlb	2	; select bank2
 11561  1F77  0821               	movf	(?___fttol^(0+256)+1),w
 11562  1F78  00BB               	movwf	(modSaw@mod+1)^(0+256)
 11563  1F79  0820               	movf	?___fttol^(0+256),w
 11564  1F7A  00BA               	movwf	modSaw@mod^(0+256)
 11565                           
 11566                           ;modulation.c: 137: return mod;
 11567  1F7B  083B               	movf	(modSaw@mod+1)^(0+256),w
 11568  1F7C  00AF               	movwf	(?_modSaw+1)^(0+256)
 11569  1F7D  083A               	movf	modSaw@mod^(0+256),w
 11570  1F7E  00AE               	movwf	?_modSaw^(0+256)
 11571  1F7F  0008               	return
 11572  1F80                     __end_of_modSaw:	
 11573                           
 11574                           	psect	text24
 11575  0802                     __ptext24:	
 11576 ;; *************** function _set_subdivision *****************
 11577 ;; Defined at:
 11578 ;;		line 77 in file "user.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;  x               2   14[BANK2 ] int 
 11581 ;;  y               2   16[BANK2 ] int 
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;  scalar          3   18[BANK2 ] float 
 11584 ;;  tmpX            2   21[BANK2 ] int 
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  2   14[BANK2 ] int 
 11587 ;; Registers used:
 11588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11594 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11595 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11597 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11598 ;;Total ram usage:        9 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    7
 11601 ;; This function calls:
 11602 ;;		___awtoft
 11603 ;;		___ftmul
 11604 ;;		___fttol
 11605 ;; This function is called by:
 11606 ;;		_main
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           
 11611                           ;psect for function _set_subdivision
 11612  0802                     _set_subdivision:	
 11613                           
 11614                           ;user.c: 81: adjust_mod_delay = 0;
 11615                           
 11616                           ;incstack = 0
 11617                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11618  0802  0024               	movlb	4	; select bank4
 11619  0803  01C6               	clrf	_adjust_mod_delay^(0+512)
 11620                           
 11621                           ;user.c: 82: int tmpX = x;
 11622  0804  0022               	movlb	2	; select bank2
 11623  0805  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11624  0806  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11625  0807  082E               	movf	set_subdivision@x^(0+256),w
 11626  0808  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11627                           
 11628                           ;user.c: 83: float scalar = 1.0;
 11629  0809  3000               	movlw	0
 11630  080A  00B2               	movwf	set_subdivision@scalar^(0+256)
 11631  080B  3080               	movlw	128
 11632  080C  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11633  080D  303F               	movlw	63
 11634  080E  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11635                           
 11636                           ;user.c: 85: switch (y) {
 11637  080F  282F               	goto	l8303
 11638  0810                     l8289:	
 11639                           ;user.c: 86: case 1:
 11640                           
 11641                           
 11642                           ;user.c: 87: scalar = 2.0;
 11643  0810  3000               	movlw	0
 11644  0811  00B2               	movwf	set_subdivision@scalar^(0+256)
 11645  0812  3000               	movlw	0
 11646  0813  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11647  0814  3040               	movlw	64
 11648  0815  282D               	goto	L11
 11649  0816                     l8291:	
 11650                           ;user.c: 89: case 2:
 11651                           
 11652                           ;user.c: 88: break;
 11653                           
 11654                           
 11655                           ;user.c: 90: scalar = 0.6666;
 11656  0816  30A6               	movlw	166
 11657  0817  00B2               	movwf	set_subdivision@scalar^(0+256)
 11658  0818  302A               	movlw	42
 11659  0819  282B               	goto	L12
 11660  081A                     l8293:	
 11661                           ;user.c: 92: case 3:
 11662                           
 11663                           ;user.c: 91: break;
 11664                           
 11665                           
 11666                           ;user.c: 93: scalar = .5;
 11667  081A  3000               	movlw	0
 11668  081B  00B2               	movwf	set_subdivision@scalar^(0+256)
 11669  081C  3000               	movlw	0
 11670  081D  282B               	goto	L12
 11671  081E                     l8295:	
 11672                           ;user.c: 95: case 4:
 11673                           
 11674                           ;user.c: 94: break;
 11675                           
 11676                           
 11677                           ;user.c: 96: scalar = 0.3333;
 11678  081E  30A6               	movlw	166
 11679  081F  00B2               	movwf	set_subdivision@scalar^(0+256)
 11680  0820  30AA               	movlw	170
 11681  0821  2825               	goto	L13
 11682  0822                     l8297:	
 11683                           ;user.c: 98: case 5:
 11684                           
 11685                           ;user.c: 97: break;
 11686                           
 11687                           
 11688                           ;user.c: 99: scalar = 0.25;
 11689  0822  3000               	movlw	0
 11690  0823  00B2               	movwf	set_subdivision@scalar^(0+256)
 11691  0824  3080               	movlw	128
 11692  0825                     L13:	
 11693  0825  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11694  0826  303E               	movlw	62
 11695  0827  282D               	goto	L11
 11696  0828                     l8299:	
 11697                           ;user.c: 101: case 6:
 11698                           
 11699                           ;user.c: 100: break;
 11700                           
 11701                           
 11702                           ;user.c: 102: scalar = 1.0;
 11703  0828  3000               	movlw	0
 11704  0829  00B2               	movwf	set_subdivision@scalar^(0+256)
 11705  082A  3080               	movlw	128
 11706  082B                     L12:	
 11707  082B  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11708  082C  303F               	movlw	63
 11709  082D                     L11:	
 11710  082D  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11711                           
 11712                           ;user.c: 104: }
 11713                           
 11714                           ;user.c: 103: break;
 11715  082E  2848               	goto	l8305
 11716  082F                     l8303:	
 11717                           
 11718                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11719                           ; Switch size 1, requested type "space"
 11720                           ; Number of cases is 1, Range of values is 0 to 0
 11721                           ; switch strategies available:
 11722                           ; Name         Instructions Cycles
 11723                           ; simple_byte            4     3 (average)
 11724                           ; direct_byte            8     6 (fixed)
 11725                           ; jumptable            260     6 (fixed)
 11726                           ;	Chosen strategy is simple_byte
 11727  082F  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11728  0830  3A00               	xorlw	0	; case 0
 11729  0831  1903               	skipnz
 11730  0832  2834               	goto	l9459
 11731  0833  2848               	goto	l8305
 11732  0834                     l9459:	
 11733                           
 11734                           ; Switch size 1, requested type "space"
 11735                           ; Number of cases is 6, Range of values is 1 to 6
 11736                           ; switch strategies available:
 11737                           ; Name         Instructions Cycles
 11738                           ; simple_byte           19    10 (average)
 11739                           ; direct_byte           21     9 (fixed)
 11740                           ; jumptable            263     9 (fixed)
 11741                           ;	Chosen strategy is simple_byte
 11742  0834  0830               	movf	set_subdivision@y^(0+256),w
 11743  0835  3A01               	xorlw	1	; case 1
 11744  0836  1903               	skipnz
 11745  0837  2810               	goto	l8289
 11746  0838  3A03               	xorlw	3	; case 2
 11747  0839  1903               	skipnz
 11748  083A  2816               	goto	l8291
 11749  083B  3A01               	xorlw	1	; case 3
 11750  083C  1903               	skipnz
 11751  083D  281A               	goto	l8293
 11752  083E  3A07               	xorlw	7	; case 4
 11753  083F  1903               	skipnz
 11754  0840  281E               	goto	l8295
 11755  0841  3A01               	xorlw	1	; case 5
 11756  0842  1903               	skipnz
 11757  0843  2822               	goto	l8297
 11758  0844  3A03               	xorlw	3	; case 6
 11759  0845  1903               	skipnz
 11760  0846  2828               	goto	l8299
 11761  0847  2848               	goto	l8305
 11762  0848                     l8305:	
 11763                           
 11764                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11765  0848  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11766  0849  0021               	movlb	1	; select bank1
 11767  084A  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11768  084B  0022               	movlb	2	; select bank2
 11769  084C  0835               	movf	set_subdivision@tmpX^(0+256),w
 11770  084D  0021               	movlb	1	; select bank1
 11771  084E  00A8               	movwf	___awtoft@c^(0+128)
 11772  084F  31B2  22EC  3188   	fcall	___awtoft
 11773  0852  0021               	movlb	1	; select bank1
 11774  0853  0828               	movf	?___awtoft^(0+128),w
 11775  0854  00B1               	movwf	___ftmul@f2^(0+128)
 11776  0855  0829               	movf	(?___awtoft+1)^(0+128),w
 11777  0856  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11778  0857  082A               	movf	(?___awtoft+2)^(0+128),w
 11779  0858  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11780  0859  0022               	movlb	2	; select bank2
 11781  085A  0832               	movf	set_subdivision@scalar^(0+256),w
 11782  085B  0021               	movlb	1	; select bank1
 11783  085C  00AE               	movwf	___ftmul@f1^(0+128)
 11784  085D  0022               	movlb	2	; select bank2
 11785  085E  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11786  085F  0021               	movlb	1	; select bank1
 11787  0860  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11788  0861  0022               	movlb	2	; select bank2
 11789  0862  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11790  0863  0021               	movlb	1	; select bank1
 11791  0864  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11792  0865  31A5  2590  3188   	fcall	___ftmul
 11793  0868  0021               	movlb	1	; select bank1
 11794  0869  082E               	movf	?___ftmul^(0+128),w
 11795  086A  0022               	movlb	2	; select bank2
 11796  086B  00A0               	movwf	___fttol@f1^(0+256)
 11797  086C  0021               	movlb	1	; select bank1
 11798  086D  082F               	movf	(?___ftmul+1)^(0+128),w
 11799  086E  0022               	movlb	2	; select bank2
 11800  086F  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11801  0870  0021               	movlb	1	; select bank1
 11802  0871  0830               	movf	(?___ftmul+2)^(0+128),w
 11803  0872  0022               	movlb	2	; select bank2
 11804  0873  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11805  0874  31A1  2158  3188   	fcall	___fttol
 11806  0877  0022               	movlb	2	; select bank2
 11807  0878  0821               	movf	(?___fttol^(0+256)+1),w
 11808  0879  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11809  087A  0820               	movf	?___fttol^(0+256),w
 11810  087B  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11811                           
 11812                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11813  087C  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11814  087D  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11815  087E  1D03               	skipz
 11816  087F  2882               	goto	u8305
 11817  0880  0835               	movf	set_subdivision@tmpX^(0+256),w
 11818  0881  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11819  0882                     u8305:	
 11820  0882  1903               	skipnz
 11821  0883  2887               	goto	l8311
 11822                           
 11823                           ;user.c: 109: adjust_mod_delay = 1;
 11824  0884  0024               	movlb	4	; select bank4
 11825  0885  01C6               	clrf	_adjust_mod_delay^(0+512)
 11826  0886  0AC6               	incf	_adjust_mod_delay^(0+512),f
 11827  0887                     l8311:	
 11828                           
 11829                           ;user.c: 110: }
 11830                           ;user.c: 112: return tmpX;
 11831  0887  0022               	movlb	2	; select bank2
 11832  0888  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11833  0889  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11834  088A  0835               	movf	set_subdivision@tmpX^(0+256),w
 11835  088B  00AE               	movwf	?_set_subdivision^(0+256)
 11836  088C  0008               	return
 11837  088D                     __end_of_set_subdivision:	
 11838                           
 11839                           	psect	text25
 11840  2DA6                     __ptext25:	
 11841 ;; *************** function _setVolume *****************
 11842 ;; Defined at:
 11843 ;;		line 25 in file "knobs.c"
 11844 ;; Parameters:    Size  Location     Type
 11845 ;;  rawValue        2   74[BANK2 ] int 
 11846 ;; Auto vars:     Size  Location     Type
 11847 ;;		None
 11848 ;; Return value:  Size  Location     Type
 11849 ;;                  1    wreg      void 
 11850 ;; Registers used:
 11851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11852 ;; Tracked objects:
 11853 ;;		On entry : 0/0
 11854 ;;		On exit  : 0/0
 11855 ;;		Unchanged: 0/0
 11856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11857 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11858 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11860 ;;      Totals:         0       0       0       2       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11861 ;;Total ram usage:        8 bytes
 11862 ;; Hardware stack levels used:    1
 11863 ;; Hardware stack levels required when called:   11
 11864 ;; This function calls:
 11865 ;;		___awtoft
 11866 ;;		_scaleA10kPot
 11867 ;;		_scaleiA10kPot
 11868 ;;		_updateVolume
 11869 ;; This function is called by:
 11870 ;;		_main
 11871 ;; This function uses a non-reentrant model
 11872 ;;
 11873                           
 11874                           
 11875                           ;psect for function _setVolume
 11876  2DA6                     _setVolume:	
 11877                           
 11878                           ;knobs.c: 26: CCPR4 = scaleA10kPot(rawValue);
 11879                           
 11880                           ;incstack = 0
 11881                           ; Regs used in _setVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11882  2DA6  0022               	movlb	2	; select bank2
 11883  2DA7  086B               	movf	(setVolume@rawValue+1)^(0+256),w
 11884  2DA8  0021               	movlb	1	; select bank1
 11885  2DA9  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11886  2DAA  0022               	movlb	2	; select bank2
 11887  2DAB  086A               	movf	setVolume@rawValue^(0+256),w
 11888  2DAC  0021               	movlb	1	; select bank1
 11889  2DAD  00A8               	movwf	___awtoft@c^(0+128)
 11890  2DAE  31B2  22EC  31AD   	fcall	___awtoft
 11891  2DB1  0021               	movlb	1	; select bank1
 11892  2DB2  0828               	movf	?___awtoft^(0+128),w
 11893  2DB3  0023               	movlb	3	; select bank3
 11894  2DB4  00A9               	movwf	_setVolume$3271^(0+384)
 11895  2DB5  0021               	movlb	1	; select bank1
 11896  2DB6  0829               	movf	(?___awtoft+1)^(0+128),w
 11897  2DB7  0023               	movlb	3	; select bank3
 11898  2DB8  00AA               	movwf	(_setVolume$3271+1)^(0+384)
 11899  2DB9  0021               	movlb	1	; select bank1
 11900  2DBA  082A               	movf	(?___awtoft+2)^(0+128),w
 11901  2DBB  0023               	movlb	3	; select bank3
 11902  2DBC  00AB               	movwf	(_setVolume$3271+2)^(0+384)
 11903                           
 11904                           ;knobs.c: 26: CCPR4 = scaleA10kPot(rawValue);
 11905  2DBD  0829               	movf	_setVolume$3271^(0+384),w
 11906  2DBE  0022               	movlb	2	; select bank2
 11907  2DBF  00E7               	movwf	scaleA10kPot@input^(0+256)
 11908  2DC0  0023               	movlb	3	; select bank3
 11909  2DC1  082A               	movf	(_setVolume$3271+1)^(0+384),w
 11910  2DC2  0022               	movlb	2	; select bank2
 11911  2DC3  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
 11912  2DC4  0023               	movlb	3	; select bank3
 11913  2DC5  082B               	movf	(_setVolume$3271+2)^(0+384),w
 11914  2DC6  0022               	movlb	2	; select bank2
 11915  2DC7  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
 11916  2DC8  31A3  2396  31AD   	fcall	_scaleA10kPot
 11917  2DCB  0022               	movlb	2	; select bank2
 11918  2DCC  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
 11919  2DCD  0026               	movlb	6	; select bank6
 11920  2DCE  0099               	movwf	25	;volatile
 11921  2DCF  0022               	movlb	2	; select bank2
 11922  2DD0  0867               	movf	?_scaleA10kPot^(0+256),w
 11923  2DD1  0026               	movlb	6	; select bank6
 11924  2DD2  0098               	movwf	24	;volatile
 11925                           
 11926                           ;knobs.c: 27: CCPR5 = scaleiA10kPot(rawValue);
 11927  2DD3  0022               	movlb	2	; select bank2
 11928  2DD4  086B               	movf	(setVolume@rawValue+1)^(0+256),w
 11929  2DD5  0021               	movlb	1	; select bank1
 11930  2DD6  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11931  2DD7  0022               	movlb	2	; select bank2
 11932  2DD8  086A               	movf	setVolume@rawValue^(0+256),w
 11933  2DD9  0021               	movlb	1	; select bank1
 11934  2DDA  00A8               	movwf	___awtoft@c^(0+128)
 11935  2DDB  31B2  22EC  31AD   	fcall	___awtoft
 11936  2DDE  0021               	movlb	1	; select bank1
 11937  2DDF  0828               	movf	?___awtoft^(0+128),w
 11938  2DE0  0023               	movlb	3	; select bank3
 11939  2DE1  00AC               	movwf	_setVolume$3272^(0+384)
 11940  2DE2  0021               	movlb	1	; select bank1
 11941  2DE3  0829               	movf	(?___awtoft+1)^(0+128),w
 11942  2DE4  0023               	movlb	3	; select bank3
 11943  2DE5  00AD               	movwf	(_setVolume$3272+1)^(0+384)
 11944  2DE6  0021               	movlb	1	; select bank1
 11945  2DE7  082A               	movf	(?___awtoft+2)^(0+128),w
 11946  2DE8  0023               	movlb	3	; select bank3
 11947  2DE9  00AE               	movwf	(_setVolume$3272+2)^(0+384)
 11948                           
 11949                           ;knobs.c: 27: CCPR5 = scaleiA10kPot(rawValue);
 11950  2DEA  082C               	movf	_setVolume$3272^(0+384),w
 11951  2DEB  0022               	movlb	2	; select bank2
 11952  2DEC  00E7               	movwf	scaleiA10kPot@input^(0+256)
 11953  2DED  0023               	movlb	3	; select bank3
 11954  2DEE  082D               	movf	(_setVolume$3272+1)^(0+384),w
 11955  2DEF  0022               	movlb	2	; select bank2
 11956  2DF0  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
 11957  2DF1  0023               	movlb	3	; select bank3
 11958  2DF2  082E               	movf	(_setVolume$3272+2)^(0+384),w
 11959  2DF3  0022               	movlb	2	; select bank2
 11960  2DF4  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
 11961  2DF5  31A6  2644  31AD   	fcall	_scaleiA10kPot
 11962  2DF8  0022               	movlb	2	; select bank2
 11963  2DF9  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
 11964  2DFA  0026               	movlb	6	; select bank6
 11965  2DFB  009D               	movwf	29	;volatile
 11966  2DFC  0022               	movlb	2	; select bank2
 11967  2DFD  0867               	movf	?_scaleiA10kPot^(0+256),w
 11968  2DFE  0026               	movlb	6	; select bank6
 11969  2DFF  009C               	movwf	28	;volatile
 11970                           
 11971                           ;knobs.c: 28: if (isInitialized == 1) {updateVolume(rawValue);}
 11972  2E00  0020               	movlb	0	; select bank0
 11973  2E01  0362               	decf	_isInitialized,w
 11974  2E02  1D03               	btfss	3,2
 11975  2E03  0008               	return
 11976  2E04  0022               	movlb	2	; select bank2
 11977  2E05  086B               	movf	(setVolume@rawValue+1)^(0+256),w
 11978  2E06  0021               	movlb	1	; select bank1
 11979  2E07  00A1               	movwf	(updateVolume@currentValue+1)^(0+128)
 11980  2E08  0022               	movlb	2	; select bank2
 11981  2E09  086A               	movf	setVolume@rawValue^(0+256),w
 11982  2E0A  0021               	movlb	1	; select bank1
 11983  2E0B  00A0               	movwf	updateVolume@currentValue^(0+128)
 11984  2E0C  31BF  27ED         	fcall	_updateVolume
 11985  2E0E  0008               	return
 11986  2E0F                     __end_of_setVolume:	
 11987                           
 11988                           	psect	text26
 11989  3FED                     __ptext26:	
 11990 ;; *************** function _updateVolume *****************
 11991 ;; Defined at:
 11992 ;;		line 253 in file "state_manager.c"
 11993 ;; Parameters:    Size  Location     Type
 11994 ;;  currentValue    2    0[BANK1 ] int 
 11995 ;; Auto vars:     Size  Location     Type
 11996 ;;		None
 11997 ;; Return value:  Size  Location     Type
 11998 ;;                  1    wreg      void 
 11999 ;; Registers used:
 12000 ;;		wreg
 12001 ;; Tracked objects:
 12002 ;;		On entry : 0/0
 12003 ;;		On exit  : 0/0
 12004 ;;		Unchanged: 0/0
 12005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12006 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12009 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12010 ;;Total ram usage:        2 bytes
 12011 ;; Hardware stack levels used:    1
 12012 ;; Hardware stack levels required when called:    5
 12013 ;; This function calls:
 12014 ;;		Nothing
 12015 ;; This function is called by:
 12016 ;;		_setVolume
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           
 12021                           ;psect for function _updateVolume
 12022  3FED                     _updateVolume:	
 12023                           
 12024                           ;state_manager.c: 254: pedalState.volume = currentValue;
 12025                           
 12026                           ;incstack = 0
 12027                           ; Regs used in _updateVolume: [wreg]
 12028  3FED  0021               	movlb	1	; select bank1
 12029  3FEE  0821               	movf	(updateVolume@currentValue+1)^(0+128),w
 12030  3FEF  0025               	movlb	5	; select bank5
 12031  3FF0  00BB               	movwf	((_pedalState+1)^(0+640)+6)
 12032  3FF1  0021               	movlb	1	; select bank1
 12033  3FF2  0820               	movf	updateVolume@currentValue^(0+128),w
 12034  3FF3  0025               	movlb	5	; select bank5
 12035  3FF4  00BA               	movwf	(_pedalState^(0+640)+6)
 12036  3FF5  0008               	return
 12037  3FF6                     __end_of_updateVolume:	
 12038                           
 12039                           	psect	text27
 12040  2644                     __ptext27:	
 12041 ;; *************** function _scaleiA10kPot *****************
 12042 ;; Defined at:
 12043 ;;		line 211 in file "user.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  input           3   71[BANK2 ] void 
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  pwm             3    0[BANK3 ] float 
 12048 ;; Return value:  Size  Location     Type
 12049 ;;                  2   71[BANK2 ] int 
 12050 ;; Registers used:
 12051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12057 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12058 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12060 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12061 ;;Total ram usage:       12 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:   10
 12064 ;; This function calls:
 12065 ;;		___ftadd
 12066 ;;		___ftdiv
 12067 ;;		___ftge
 12068 ;;		___ftmul
 12069 ;;		___ftneg
 12070 ;;		___fttol
 12071 ;;		_pow
 12072 ;; This function is called by:
 12073 ;;		_main
 12074 ;;		_setVolume
 12075 ;; This function uses a non-reentrant model
 12076 ;;
 12077                           
 12078                           
 12079                           ;psect for function _scaleiA10kPot
 12080  2644                     _scaleiA10kPot:	
 12081                           
 12082                           ;user.c: 214: if (input < 1.0) {return 0;}
 12083                           
 12084                           ;incstack = 0
 12085                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12086  2644  0022               	movlb	2	; select bank2
 12087  2645  0867               	movf	scaleiA10kPot@input^(0+256),w
 12088  2646  0021               	movlb	1	; select bank1
 12089  2647  00A0               	movwf	___ftge@ff1^(0+128)
 12090  2648  0022               	movlb	2	; select bank2
 12091  2649  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 12092  264A  0021               	movlb	1	; select bank1
 12093  264B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12094  264C  0022               	movlb	2	; select bank2
 12095  264D  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12096  264E  0021               	movlb	1	; select bank1
 12097  264F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12098  2650  3000               	movlw	0
 12099  2651  00A3               	movwf	___ftge@ff2^(0+128)
 12100  2652  3080               	movlw	128
 12101  2653  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12102  2654  303F               	movlw	63
 12103  2655  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12104  2656  31A8  2000  31A6   	fcall	___ftge
 12105  2659  1803               	btfsc	3,0
 12106  265A  2E5F               	goto	l7407
 12107  265B  0022               	movlb	2	; select bank2
 12108  265C  01E7               	clrf	?_scaleiA10kPot^(0+256)
 12109  265D  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 12110  265E  0008               	return
 12111  265F                     l7407:	
 12112                           
 12113                           ;user.c: 216: if (input >= 1022.0) {return 255;}
 12114  265F  0022               	movlb	2	; select bank2
 12115  2660  0867               	movf	scaleiA10kPot@input^(0+256),w
 12116  2661  0021               	movlb	1	; select bank1
 12117  2662  00A0               	movwf	___ftge@ff1^(0+128)
 12118  2663  0022               	movlb	2	; select bank2
 12119  2664  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 12120  2665  0021               	movlb	1	; select bank1
 12121  2666  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12122  2667  0022               	movlb	2	; select bank2
 12123  2668  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12124  2669  0021               	movlb	1	; select bank1
 12125  266A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12126  266B  3080               	movlw	128
 12127  266C  00A3               	movwf	___ftge@ff2^(0+128)
 12128  266D  307F               	movlw	127
 12129  266E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12130  266F  3044               	movlw	68
 12131  2670  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12132  2671  31A8  2000  31A6   	fcall	___ftge
 12133  2674  1C03               	btfss	3,0
 12134  2675  2E7C               	goto	l7413
 12135  2676  30FF               	movlw	255
 12136  2677  0022               	movlb	2	; select bank2
 12137  2678  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12138  2679  3000               	movlw	0
 12139  267A  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 12140  267B  0008               	return
 12141  267C                     l7413:	
 12142                           
 12143                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12144  267C  3000               	movlw	0
 12145  267D  0021               	movlb	1	; select bank1
 12146  267E  00C1               	movwf	___ftadd@f1^(0+128)
 12147  267F  3080               	movlw	128
 12148  2680  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12149  2681  303F               	movlw	63
 12150  2682  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12151  2683  0022               	movlb	2	; select bank2
 12152  2684  0867               	movf	scaleiA10kPot@input^(0+256),w
 12153  2685  0021               	movlb	1	; select bank1
 12154  2686  00D1               	movwf	___ftdiv@f1^(0+128)
 12155  2687  0022               	movlb	2	; select bank2
 12156  2688  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 12157  2689  0021               	movlb	1	; select bank1
 12158  268A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12159  268B  0022               	movlb	2	; select bank2
 12160  268C  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12161  268D  0021               	movlb	1	; select bank1
 12162  268E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12163  268F  30C0               	movlw	192
 12164  2690  00CE               	movwf	___ftdiv@f2^(0+128)
 12165  2691  307F               	movlw	127
 12166  2692  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12167  2693  3044               	movlw	68
 12168  2694  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12169  2695  31A4  2434  31A6   	fcall	___ftdiv
 12170  2698  0021               	movlb	1	; select bank1
 12171  2699  084E               	movf	?___ftdiv^(0+128),w
 12172  269A  00BE               	movwf	___ftneg@f1^(0+128)
 12173  269B  084F               	movf	(?___ftdiv+1)^(0+128),w
 12174  269C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12175  269D  0850               	movf	(?___ftdiv+2)^(0+128),w
 12176  269E  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12177  269F  31BF  27D2  31A6   	fcall	___ftneg
 12178  26A2  0021               	movlb	1	; select bank1
 12179  26A3  083E               	movf	?___ftneg^(0+128),w
 12180  26A4  00C4               	movwf	___ftadd@f2^(0+128)
 12181  26A5  083F               	movf	(?___ftneg+1)^(0+128),w
 12182  26A6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12183  26A7  0840               	movf	(?___ftneg+2)^(0+128),w
 12184  26A8  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12185  26A9  3199  2104  31A6   	fcall	___ftadd
 12186  26AC  0021               	movlb	1	; select bank1
 12187  26AD  0841               	movf	?___ftadd^(0+128),w
 12188  26AE  0023               	movlb	3	; select bank3
 12189  26AF  00A3               	movwf	_scaleiA10kPot$3259^(0+384)
 12190  26B0  0021               	movlb	1	; select bank1
 12191  26B1  0842               	movf	(?___ftadd+1)^(0+128),w
 12192  26B2  0023               	movlb	3	; select bank3
 12193  26B3  00A4               	movwf	(_scaleiA10kPot$3259+1)^(0+384)
 12194  26B4  0021               	movlb	1	; select bank1
 12195  26B5  0843               	movf	(?___ftadd+2)^(0+128),w
 12196  26B6  0023               	movlb	3	; select bank3
 12197  26B7  00A5               	movwf	(_scaleiA10kPot$3259+2)^(0+384)
 12198                           
 12199                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12200  26B8  306A               	movlw	106
 12201  26B9  0022               	movlb	2	; select bank2
 12202  26BA  00D8               	movwf	pow@y^(0+256)
 12203  26BB  309C               	movlw	156
 12204  26BC  00D9               	movwf	(pow@y+1)^(0+256)
 12205  26BD  30BF               	movlw	191
 12206  26BE  00DA               	movwf	(pow@y+2)^(0+256)
 12207  26BF  0023               	movlb	3	; select bank3
 12208  26C0  0823               	movf	_scaleiA10kPot$3259^(0+384),w
 12209  26C1  0022               	movlb	2	; select bank2
 12210  26C2  00D5               	movwf	pow@x^(0+256)
 12211  26C3  0023               	movlb	3	; select bank3
 12212  26C4  0824               	movf	(_scaleiA10kPot$3259+1)^(0+384),w
 12213  26C5  0022               	movlb	2	; select bank2
 12214  26C6  00D6               	movwf	(pow@x+1)^(0+256)
 12215  26C7  0023               	movlb	3	; select bank3
 12216  26C8  0825               	movf	(_scaleiA10kPot$3259+2)^(0+384),w
 12217  26C9  0022               	movlb	2	; select bank2
 12218  26CA  00D7               	movwf	(pow@x+2)^(0+256)
 12219  26CB  3199  21FA  31A6   	fcall	_pow
 12220  26CE  0022               	movlb	2	; select bank2
 12221  26CF  0855               	movf	?_pow^(0+256),w
 12222  26D0  0023               	movlb	3	; select bank3
 12223  26D1  00A6               	movwf	_scaleiA10kPot$3260^(0+384)
 12224  26D2  0022               	movlb	2	; select bank2
 12225  26D3  0856               	movf	(?_pow+1)^(0+256),w
 12226  26D4  0023               	movlb	3	; select bank3
 12227  26D5  00A7               	movwf	(_scaleiA10kPot$3260+1)^(0+384)
 12228  26D6  0022               	movlb	2	; select bank2
 12229  26D7  0857               	movf	(?_pow+2)^(0+256),w
 12230  26D8  0023               	movlb	3	; select bank3
 12231  26D9  00A8               	movwf	(_scaleiA10kPot$3260+2)^(0+384)
 12232                           
 12233                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12234  26DA  30E3               	movlw	227
 12235  26DB  0021               	movlb	1	; select bank1
 12236  26DC  00AE               	movwf	___ftmul@f1^(0+128)
 12237  26DD  300B               	movlw	11
 12238  26DE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12239  26DF  3041               	movlw	65
 12240  26E0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12241  26E1  0023               	movlb	3	; select bank3
 12242  26E2  0826               	movf	_scaleiA10kPot$3260^(0+384),w
 12243  26E3  0021               	movlb	1	; select bank1
 12244  26E4  00B1               	movwf	___ftmul@f2^(0+128)
 12245  26E5  0023               	movlb	3	; select bank3
 12246  26E6  0827               	movf	(_scaleiA10kPot$3260+1)^(0+384),w
 12247  26E7  0021               	movlb	1	; select bank1
 12248  26E8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12249  26E9  0023               	movlb	3	; select bank3
 12250  26EA  0828               	movf	(_scaleiA10kPot$3260+2)^(0+384),w
 12251  26EB  0021               	movlb	1	; select bank1
 12252  26EC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12253  26ED  31A5  2590  31A6   	fcall	___ftmul
 12254  26F0  0021               	movlb	1	; select bank1
 12255  26F1  082E               	movf	?___ftmul^(0+128),w
 12256  26F2  0023               	movlb	3	; select bank3
 12257  26F3  00A0               	movwf	scaleiA10kPot@pwm^(0+384)
 12258  26F4  0021               	movlb	1	; select bank1
 12259  26F5  082F               	movf	(?___ftmul+1)^(0+128),w
 12260  26F6  0023               	movlb	3	; select bank3
 12261  26F7  00A1               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12262  26F8  0021               	movlb	1	; select bank1
 12263  26F9  0830               	movf	(?___ftmul+2)^(0+128),w
 12264  26FA  0023               	movlb	3	; select bank3
 12265  26FB  00A2               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12266                           
 12267                           ;user.c: 219: return (int)(pwm);
 12268  26FC  0820               	movf	scaleiA10kPot@pwm^(0+384),w
 12269  26FD  0022               	movlb	2	; select bank2
 12270  26FE  00A0               	movwf	___fttol@f1^(0+256)
 12271  26FF  0023               	movlb	3	; select bank3
 12272  2700  0821               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12273  2701  0022               	movlb	2	; select bank2
 12274  2702  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12275  2703  0023               	movlb	3	; select bank3
 12276  2704  0822               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12277  2705  0022               	movlb	2	; select bank2
 12278  2706  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12279  2707  31A1  2158         	fcall	___fttol
 12280  2709  0022               	movlb	2	; select bank2
 12281  270A  0821               	movf	(?___fttol^(0+256)+1),w
 12282  270B  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12283  270C  0820               	movf	?___fttol^(0+256),w
 12284  270D  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12285  270E  0008               	return
 12286  270F                     __end_of_scaleiA10kPot:	
 12287                           
 12288                           	psect	text28
 12289  2396                     __ptext28:	
 12290 ;; *************** function _scaleA10kPot *****************
 12291 ;; Defined at:
 12292 ;;		line 202 in file "user.c"
 12293 ;; Parameters:    Size  Location     Type
 12294 ;;  input           3   71[BANK2 ] int 
 12295 ;; Auto vars:     Size  Location     Type
 12296 ;;  pwm             3    0[BANK3 ] float 
 12297 ;; Return value:  Size  Location     Type
 12298 ;;                  2   71[BANK2 ] int 
 12299 ;; Registers used:
 12300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12301 ;; Tracked objects:
 12302 ;;		On entry : 0/0
 12303 ;;		On exit  : 0/0
 12304 ;;		Unchanged: 0/0
 12305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12306 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12307 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12309 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12310 ;;Total ram usage:       12 bytes
 12311 ;; Hardware stack levels used:    1
 12312 ;; Hardware stack levels required when called:   10
 12313 ;; This function calls:
 12314 ;;		___ftdiv
 12315 ;;		___ftge
 12316 ;;		___ftmul
 12317 ;;		___fttol
 12318 ;;		_pow
 12319 ;; This function is called by:
 12320 ;;		_main
 12321 ;;		_setVolume
 12322 ;; This function uses a non-reentrant model
 12323 ;;
 12324                           
 12325                           
 12326                           ;psect for function _scaleA10kPot
 12327  2396                     _scaleA10kPot:	
 12328                           
 12329                           ;user.c: 204: if (input == 0.0) {return 255;}
 12330                           
 12331                           ;incstack = 0
 12332                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12333  2396  0022               	movlb	2	; select bank2
 12334  2397  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12335  2398  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12336  2399  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12337  239A  1D03               	skipz
 12338  239B  2BA1               	goto	l7385
 12339  239C  30FF               	movlw	255
 12340  239D  00E7               	movwf	?_scaleA10kPot^(0+256)
 12341  239E  3000               	movlw	0
 12342  239F  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12343  23A0  0008               	return
 12344  23A1                     l7385:	
 12345                           
 12346                           ;user.c: 205: if (input >= 1022.0) {return 0;}
 12347  23A1  0867               	movf	scaleA10kPot@input^(0+256),w
 12348  23A2  0021               	movlb	1	; select bank1
 12349  23A3  00A0               	movwf	___ftge@ff1^(0+128)
 12350  23A4  0022               	movlb	2	; select bank2
 12351  23A5  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12352  23A6  0021               	movlb	1	; select bank1
 12353  23A7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12354  23A8  0022               	movlb	2	; select bank2
 12355  23A9  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12356  23AA  0021               	movlb	1	; select bank1
 12357  23AB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12358  23AC  3080               	movlw	128
 12359  23AD  00A3               	movwf	___ftge@ff2^(0+128)
 12360  23AE  307F               	movlw	127
 12361  23AF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12362  23B0  3044               	movlw	68
 12363  23B1  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12364  23B2  31A8  2000  31A3   	fcall	___ftge
 12365  23B5  1C03               	btfss	3,0
 12366  23B6  2BBB               	goto	l7391
 12367  23B7  0022               	movlb	2	; select bank2
 12368  23B8  01E7               	clrf	?_scaleA10kPot^(0+256)
 12369  23B9  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12370  23BA  0008               	return
 12371  23BB                     l7391:	
 12372                           
 12373                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12374  23BB  30C0               	movlw	192
 12375  23BC  0021               	movlb	1	; select bank1
 12376  23BD  00CE               	movwf	___ftdiv@f2^(0+128)
 12377  23BE  307F               	movlw	127
 12378  23BF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12379  23C0  3044               	movlw	68
 12380  23C1  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12381  23C2  0022               	movlb	2	; select bank2
 12382  23C3  0867               	movf	scaleA10kPot@input^(0+256),w
 12383  23C4  0021               	movlb	1	; select bank1
 12384  23C5  00D1               	movwf	___ftdiv@f1^(0+128)
 12385  23C6  0022               	movlb	2	; select bank2
 12386  23C7  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12387  23C8  0021               	movlb	1	; select bank1
 12388  23C9  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12389  23CA  0022               	movlb	2	; select bank2
 12390  23CB  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12391  23CC  0021               	movlb	1	; select bank1
 12392  23CD  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12393  23CE  31A4  2434  31A3   	fcall	___ftdiv
 12394  23D1  0021               	movlb	1	; select bank1
 12395  23D2  084E               	movf	?___ftdiv^(0+128),w
 12396  23D3  0023               	movlb	3	; select bank3
 12397  23D4  00A3               	movwf	_scaleA10kPot$3257^(0+384)
 12398  23D5  0021               	movlb	1	; select bank1
 12399  23D6  084F               	movf	(?___ftdiv+1)^(0+128),w
 12400  23D7  0023               	movlb	3	; select bank3
 12401  23D8  00A4               	movwf	(_scaleA10kPot$3257+1)^(0+384)
 12402  23D9  0021               	movlb	1	; select bank1
 12403  23DA  0850               	movf	(?___ftdiv+2)^(0+128),w
 12404  23DB  0023               	movlb	3	; select bank3
 12405  23DC  00A5               	movwf	(_scaleA10kPot$3257+2)^(0+384)
 12406                           
 12407                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12408  23DD  306A               	movlw	106
 12409  23DE  0022               	movlb	2	; select bank2
 12410  23DF  00D8               	movwf	pow@y^(0+256)
 12411  23E0  309C               	movlw	156
 12412  23E1  00D9               	movwf	(pow@y+1)^(0+256)
 12413  23E2  30BF               	movlw	191
 12414  23E3  00DA               	movwf	(pow@y+2)^(0+256)
 12415  23E4  0023               	movlb	3	; select bank3
 12416  23E5  0823               	movf	_scaleA10kPot$3257^(0+384),w
 12417  23E6  0022               	movlb	2	; select bank2
 12418  23E7  00D5               	movwf	pow@x^(0+256)
 12419  23E8  0023               	movlb	3	; select bank3
 12420  23E9  0824               	movf	(_scaleA10kPot$3257+1)^(0+384),w
 12421  23EA  0022               	movlb	2	; select bank2
 12422  23EB  00D6               	movwf	(pow@x+1)^(0+256)
 12423  23EC  0023               	movlb	3	; select bank3
 12424  23ED  0825               	movf	(_scaleA10kPot$3257+2)^(0+384),w
 12425  23EE  0022               	movlb	2	; select bank2
 12426  23EF  00D7               	movwf	(pow@x+2)^(0+256)
 12427  23F0  3199  21FA  31A3   	fcall	_pow
 12428  23F3  0022               	movlb	2	; select bank2
 12429  23F4  0855               	movf	?_pow^(0+256),w
 12430  23F5  0023               	movlb	3	; select bank3
 12431  23F6  00A6               	movwf	_scaleA10kPot$3258^(0+384)
 12432  23F7  0022               	movlb	2	; select bank2
 12433  23F8  0856               	movf	(?_pow+1)^(0+256),w
 12434  23F9  0023               	movlb	3	; select bank3
 12435  23FA  00A7               	movwf	(_scaleA10kPot$3258+1)^(0+384)
 12436  23FB  0022               	movlb	2	; select bank2
 12437  23FC  0857               	movf	(?_pow+2)^(0+256),w
 12438  23FD  0023               	movlb	3	; select bank3
 12439  23FE  00A8               	movwf	(_scaleA10kPot$3258+2)^(0+384)
 12440                           
 12441                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12442  23FF  30E3               	movlw	227
 12443  2400  0021               	movlb	1	; select bank1
 12444  2401  00AE               	movwf	___ftmul@f1^(0+128)
 12445  2402  300B               	movlw	11
 12446  2403  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12447  2404  3041               	movlw	65
 12448  2405  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12449  2406  0023               	movlb	3	; select bank3
 12450  2407  0826               	movf	_scaleA10kPot$3258^(0+384),w
 12451  2408  0021               	movlb	1	; select bank1
 12452  2409  00B1               	movwf	___ftmul@f2^(0+128)
 12453  240A  0023               	movlb	3	; select bank3
 12454  240B  0827               	movf	(_scaleA10kPot$3258+1)^(0+384),w
 12455  240C  0021               	movlb	1	; select bank1
 12456  240D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12457  240E  0023               	movlb	3	; select bank3
 12458  240F  0828               	movf	(_scaleA10kPot$3258+2)^(0+384),w
 12459  2410  0021               	movlb	1	; select bank1
 12460  2411  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12461  2412  31A5  2590  31A3   	fcall	___ftmul
 12462  2415  0021               	movlb	1	; select bank1
 12463  2416  082E               	movf	?___ftmul^(0+128),w
 12464  2417  0023               	movlb	3	; select bank3
 12465  2418  00A0               	movwf	scaleA10kPot@pwm^(0+384)
 12466  2419  0021               	movlb	1	; select bank1
 12467  241A  082F               	movf	(?___ftmul+1)^(0+128),w
 12468  241B  0023               	movlb	3	; select bank3
 12469  241C  00A1               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12470  241D  0021               	movlb	1	; select bank1
 12471  241E  0830               	movf	(?___ftmul+2)^(0+128),w
 12472  241F  0023               	movlb	3	; select bank3
 12473  2420  00A2               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12474                           
 12475                           ;user.c: 207: return (int)(pwm);
 12476  2421  0820               	movf	scaleA10kPot@pwm^(0+384),w
 12477  2422  0022               	movlb	2	; select bank2
 12478  2423  00A0               	movwf	___fttol@f1^(0+256)
 12479  2424  0023               	movlb	3	; select bank3
 12480  2425  0821               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12481  2426  0022               	movlb	2	; select bank2
 12482  2427  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12483  2428  0023               	movlb	3	; select bank3
 12484  2429  0822               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12485  242A  0022               	movlb	2	; select bank2
 12486  242B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12487  242C  31A1  2158         	fcall	___fttol
 12488  242E  0022               	movlb	2	; select bank2
 12489  242F  0821               	movf	(?___fttol^(0+256)+1),w
 12490  2430  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12491  2431  0820               	movf	?___fttol^(0+256),w
 12492  2432  00E7               	movwf	?_scaleA10kPot^(0+256)
 12493  2433  0008               	return
 12494  2434                     __end_of_scaleA10kPot:	
 12495                           
 12496                           	psect	text29
 12497  2C94                     __ptext29:	
 12498 ;; *************** function _setSymmetry *****************
 12499 ;; Defined at:
 12500 ;;		line 38 in file "knobs.c"
 12501 ;; Parameters:    Size  Location     Type
 12502 ;;  rawValue        2   14[BANK2 ] int 
 12503 ;; Auto vars:     Size  Location     Type
 12504 ;;		None
 12505 ;; Return value:  Size  Location     Type
 12506 ;;                  1    wreg      void 
 12507 ;; Registers used:
 12508 ;;		wreg, status,2, status,0, pclath, cstack
 12509 ;; Tracked objects:
 12510 ;;		On entry : 0/0
 12511 ;;		On exit  : 0/0
 12512 ;;		Unchanged: 0/0
 12513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12514 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12517 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12518 ;;Total ram usage:        2 bytes
 12519 ;; Hardware stack levels used:    1
 12520 ;; Hardware stack levels required when called:    8
 12521 ;; This function calls:
 12522 ;;		___awtoft
 12523 ;;		___fttol
 12524 ;;		_map
 12525 ;;		_updateFrequency
 12526 ;; This function is called by:
 12527 ;;		_main
 12528 ;; This function uses a non-reentrant model
 12529 ;;
 12530                           
 12531                           
 12532                           ;psect for function _setSymmetry
 12533  2C94                     _setSymmetry:	
 12534                           
 12535                           ;knobs.c: 39: symmetry = (int) map(rawValue, 0, 1023, 45, 315);
 12536                           
 12537                           ;incstack = 0
 12538                           ; Regs used in _setSymmetry: [wreg+status,2+status,0+pclath+cstack]
 12539  2C94  3080               	movlw	128
 12540  2C95  0021               	movlb	1	; select bank1
 12541  2C96  00EA               	movwf	map@out_max^(0+128)
 12542  2C97  309D               	movlw	157
 12543  2C98  00EB               	movwf	(map@out_max+1)^(0+128)
 12544  2C99  3043               	movlw	67
 12545  2C9A  00EC               	movwf	(map@out_max+2)^(0+128)
 12546  2C9B  3000               	movlw	0
 12547  2C9C  00E7               	movwf	map@out_min^(0+128)
 12548  2C9D  3034               	movlw	52
 12549  2C9E  00E8               	movwf	(map@out_min+1)^(0+128)
 12550  2C9F  3042               	movlw	66
 12551  2CA0  00E9               	movwf	(map@out_min+2)^(0+128)
 12552  2CA1  30C0               	movlw	192
 12553  2CA2  00E4               	movwf	map@in_max^(0+128)
 12554  2CA3  307F               	movlw	127
 12555  2CA4  00E5               	movwf	(map@in_max+1)^(0+128)
 12556  2CA5  3044               	movlw	68
 12557  2CA6  00E6               	movwf	(map@in_max+2)^(0+128)
 12558  2CA7  3000               	movlw	0
 12559  2CA8  00E1               	movwf	map@in_min^(0+128)
 12560  2CA9  3000               	movlw	0
 12561  2CAA  00E2               	movwf	(map@in_min+1)^(0+128)
 12562  2CAB  3000               	movlw	0
 12563  2CAC  00E3               	movwf	(map@in_min+2)^(0+128)
 12564  2CAD  0022               	movlb	2	; select bank2
 12565  2CAE  082F               	movf	(setSymmetry@rawValue+1)^(0+256),w
 12566  2CAF  0021               	movlb	1	; select bank1
 12567  2CB0  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12568  2CB1  0022               	movlb	2	; select bank2
 12569  2CB2  082E               	movf	setSymmetry@rawValue^(0+256),w
 12570  2CB3  0021               	movlb	1	; select bank1
 12571  2CB4  00A8               	movwf	___awtoft@c^(0+128)
 12572  2CB5  31B2  22EC  31AC   	fcall	___awtoft
 12573  2CB8  0021               	movlb	1	; select bank1
 12574  2CB9  0828               	movf	?___awtoft^(0+128),w
 12575  2CBA  00DE               	movwf	map@x^(0+128)
 12576  2CBB  0829               	movf	(?___awtoft+1)^(0+128),w
 12577  2CBC  00DF               	movwf	(map@x+1)^(0+128)
 12578  2CBD  082A               	movf	(?___awtoft+2)^(0+128),w
 12579  2CBE  00E0               	movwf	(map@x+2)^(0+128)
 12580  2CBF  31A1  21DF  31AC   	fcall	_map
 12581  2CC2  0021               	movlb	1	; select bank1
 12582  2CC3  085E               	movf	?_map^(0+128),w
 12583  2CC4  0022               	movlb	2	; select bank2
 12584  2CC5  00A0               	movwf	___fttol@f1^(0+256)
 12585  2CC6  0021               	movlb	1	; select bank1
 12586  2CC7  085F               	movf	(?_map+1)^(0+128),w
 12587  2CC8  0022               	movlb	2	; select bank2
 12588  2CC9  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12589  2CCA  0021               	movlb	1	; select bank1
 12590  2CCB  0860               	movf	(?_map+2)^(0+128),w
 12591  2CCC  0022               	movlb	2	; select bank2
 12592  2CCD  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12593  2CCE  31A1  2158  31AC   	fcall	___fttol
 12594  2CD1  0022               	movlb	2	; select bank2
 12595  2CD2  0821               	movf	(?___fttol^(0+256)+1),w
 12596  2CD3  0023               	movlb	3	; select bank3
 12597  2CD4  00EB               	movwf	(_symmetry+1)^(0+384)
 12598  2CD5  0022               	movlb	2	; select bank2
 12599  2CD6  0820               	movf	?___fttol^(0+256),w
 12600  2CD7  0023               	movlb	3	; select bank3
 12601  2CD8  00EA               	movwf	_symmetry^(0+384)
 12602                           
 12603                           ;knobs.c: 40: if (isInitialized == 1) {updateFrequency(rawValue);}
 12604  2CD9  0020               	movlb	0	; select bank0
 12605  2CDA  0362               	decf	_isInitialized,w
 12606  2CDB  1D03               	btfss	3,2
 12607  2CDC  0008               	return
 12608  2CDD  0022               	movlb	2	; select bank2
 12609  2CDE  082F               	movf	(setSymmetry@rawValue+1)^(0+256),w
 12610  2CDF  0021               	movlb	1	; select bank1
 12611  2CE0  00A1               	movwf	(updateFrequency@currentValue+1)^(0+128)
 12612  2CE1  0022               	movlb	2	; select bank2
 12613  2CE2  082E               	movf	setSymmetry@rawValue^(0+256),w
 12614  2CE3  0021               	movlb	1	; select bank1
 12615  2CE4  00A0               	movwf	updateFrequency@currentValue^(0+128)
 12616  2CE5  31BF  27E4         	fcall	_updateFrequency
 12617  2CE7  0008               	return
 12618  2CE8                     __end_of_setSymmetry:	
 12619                           
 12620                           	psect	text30
 12621  21DF                     __ptext30:	
 12622 ;; *************** function _map *****************
 12623 ;; Defined at:
 12624 ;;		line 177 in file "user.c"
 12625 ;; Parameters:    Size  Location     Type
 12626 ;;  x               3   62[BANK1 ] float 
 12627 ;;  in_min          3   65[BANK1 ] float 
 12628 ;;  in_max          3   68[BANK1 ] float 
 12629 ;;  out_min         3   71[BANK1 ] float 
 12630 ;;  out_max         3   74[BANK1 ] float 
 12631 ;; Auto vars:     Size  Location     Type
 12632 ;;		None
 12633 ;; Return value:  Size  Location     Type
 12634 ;;                  3   62[BANK1 ] float 
 12635 ;; Registers used:
 12636 ;;		wreg, status,2, status,0, pclath, cstack
 12637 ;; Tracked objects:
 12638 ;;		On entry : 0/0
 12639 ;;		On exit  : 0/0
 12640 ;;		Unchanged: 0/0
 12641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12642 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12643 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12645 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12646 ;;Total ram usage:       18 bytes
 12647 ;; Hardware stack levels used:    1
 12648 ;; Hardware stack levels required when called:    7
 12649 ;; This function calls:
 12650 ;;		___ftadd
 12651 ;;		___ftdiv
 12652 ;;		___ftmul
 12653 ;;		___ftneg
 12654 ;; This function is called by:
 12655 ;;		_main
 12656 ;;		_setSymmetry
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _map
 12662  21DF                     _map:	
 12663                           
 12664                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 12665                           
 12666                           ;incstack = 0
 12667                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 12668  21DF  0021               	movlb	1	; select bank1
 12669  21E0  0864               	movf	map@in_max^(0+128),w
 12670  21E1  00C1               	movwf	___ftadd@f1^(0+128)
 12671  21E2  0865               	movf	(map@in_max+1)^(0+128),w
 12672  21E3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12673  21E4  0866               	movf	(map@in_max+2)^(0+128),w
 12674  21E5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12675  21E6  0861               	movf	map@in_min^(0+128),w
 12676  21E7  00BE               	movwf	___ftneg@f1^(0+128)
 12677  21E8  0862               	movf	(map@in_min+1)^(0+128),w
 12678  21E9  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12679  21EA  0863               	movf	(map@in_min+2)^(0+128),w
 12680  21EB  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12681  21EC  31BF  27D2  31A1   	fcall	___ftneg
 12682  21EF  0021               	movlb	1	; select bank1
 12683  21F0  083E               	movf	?___ftneg^(0+128),w
 12684  21F1  00C4               	movwf	___ftadd@f2^(0+128)
 12685  21F2  083F               	movf	(?___ftneg+1)^(0+128),w
 12686  21F3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12687  21F4  0840               	movf	(?___ftneg+2)^(0+128),w
 12688  21F5  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12689  21F6  3199  2104  31A1   	fcall	___ftadd
 12690  21F9  0021               	movlb	1	; select bank1
 12691  21FA  0841               	movf	?___ftadd^(0+128),w
 12692  21FB  00CE               	movwf	___ftdiv@f2^(0+128)
 12693  21FC  0842               	movf	(?___ftadd+1)^(0+128),w
 12694  21FD  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12695  21FE  0843               	movf	(?___ftadd+2)^(0+128),w
 12696  21FF  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12697  2200  086A               	movf	map@out_max^(0+128),w
 12698  2201  00C1               	movwf	___ftadd@f1^(0+128)
 12699  2202  086B               	movf	(map@out_max+1)^(0+128),w
 12700  2203  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12701  2204  086C               	movf	(map@out_max+2)^(0+128),w
 12702  2205  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12703  2206  0867               	movf	map@out_min^(0+128),w
 12704  2207  00BE               	movwf	___ftneg@f1^(0+128)
 12705  2208  0868               	movf	(map@out_min+1)^(0+128),w
 12706  2209  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12707  220A  0869               	movf	(map@out_min+2)^(0+128),w
 12708  220B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12709  220C  31BF  27D2  31A1   	fcall	___ftneg
 12710  220F  0021               	movlb	1	; select bank1
 12711  2210  083E               	movf	?___ftneg^(0+128),w
 12712  2211  00C4               	movwf	___ftadd@f2^(0+128)
 12713  2212  083F               	movf	(?___ftneg+1)^(0+128),w
 12714  2213  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12715  2214  0840               	movf	(?___ftneg+2)^(0+128),w
 12716  2215  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12717  2216  3199  2104  31A1   	fcall	___ftadd
 12718  2219  0021               	movlb	1	; select bank1
 12719  221A  0841               	movf	?___ftadd^(0+128),w
 12720  221B  00AE               	movwf	___ftmul@f1^(0+128)
 12721  221C  0842               	movf	(?___ftadd+1)^(0+128),w
 12722  221D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12723  221E  0843               	movf	(?___ftadd+2)^(0+128),w
 12724  221F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12725  2220  085E               	movf	map@x^(0+128),w
 12726  2221  00C1               	movwf	___ftadd@f1^(0+128)
 12727  2222  085F               	movf	(map@x+1)^(0+128),w
 12728  2223  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12729  2224  0860               	movf	(map@x+2)^(0+128),w
 12730  2225  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12731  2226  0861               	movf	map@in_min^(0+128),w
 12732  2227  00BE               	movwf	___ftneg@f1^(0+128)
 12733  2228  0862               	movf	(map@in_min+1)^(0+128),w
 12734  2229  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12735  222A  0863               	movf	(map@in_min+2)^(0+128),w
 12736  222B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12737  222C  31BF  27D2  31A1   	fcall	___ftneg
 12738  222F  0021               	movlb	1	; select bank1
 12739  2230  083E               	movf	?___ftneg^(0+128),w
 12740  2231  00C4               	movwf	___ftadd@f2^(0+128)
 12741  2232  083F               	movf	(?___ftneg+1)^(0+128),w
 12742  2233  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12743  2234  0840               	movf	(?___ftneg+2)^(0+128),w
 12744  2235  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12745  2236  3199  2104  31A1   	fcall	___ftadd
 12746  2239  0021               	movlb	1	; select bank1
 12747  223A  0841               	movf	?___ftadd^(0+128),w
 12748  223B  00B1               	movwf	___ftmul@f2^(0+128)
 12749  223C  0842               	movf	(?___ftadd+1)^(0+128),w
 12750  223D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12751  223E  0843               	movf	(?___ftadd+2)^(0+128),w
 12752  223F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12753  2240  31A5  2590  31A1   	fcall	___ftmul
 12754  2243  0021               	movlb	1	; select bank1
 12755  2244  082E               	movf	?___ftmul^(0+128),w
 12756  2245  00D1               	movwf	___ftdiv@f1^(0+128)
 12757  2246  082F               	movf	(?___ftmul+1)^(0+128),w
 12758  2247  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12759  2248  0830               	movf	(?___ftmul+2)^(0+128),w
 12760  2249  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12761  224A  31A4  2434  31A1   	fcall	___ftdiv
 12762  224D  0021               	movlb	1	; select bank1
 12763  224E  084E               	movf	?___ftdiv^(0+128),w
 12764  224F  00ED               	movwf	_map$3251^(0+128)
 12765  2250  084F               	movf	(?___ftdiv+1)^(0+128),w
 12766  2251  00EE               	movwf	(_map$3251+1)^(0+128)
 12767  2252  0850               	movf	(?___ftdiv+2)^(0+128),w
 12768  2253  00EF               	movwf	(_map$3251+2)^(0+128)
 12769                           
 12770                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 12771  2254  0867               	movf	map@out_min^(0+128),w
 12772  2255  00C1               	movwf	___ftadd@f1^(0+128)
 12773  2256  0868               	movf	(map@out_min+1)^(0+128),w
 12774  2257  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12775  2258  0869               	movf	(map@out_min+2)^(0+128),w
 12776  2259  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12777  225A  086D               	movf	_map$3251^(0+128),w
 12778  225B  00C4               	movwf	___ftadd@f2^(0+128)
 12779  225C  086E               	movf	(_map$3251+1)^(0+128),w
 12780  225D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12781  225E  086F               	movf	(_map$3251+2)^(0+128),w
 12782  225F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12783  2260  3199  2104         	fcall	___ftadd
 12784  2262  0021               	movlb	1	; select bank1
 12785  2263  0841               	movf	?___ftadd^(0+128),w
 12786  2264  00DE               	movwf	?_map^(0+128)
 12787  2265  0842               	movf	(?___ftadd+1)^(0+128),w
 12788  2266  00DF               	movwf	(?_map+1)^(0+128)
 12789  2267  0843               	movf	(?___ftadd+2)^(0+128),w
 12790  2268  00E0               	movwf	(?_map+2)^(0+128)
 12791  2269  0008               	return
 12792  226A                     __end_of_map:	
 12793                           
 12794                           	psect	text31
 12795  226A                     __ptext31:	
 12796 ;; *************** function _setFrequency *****************
 12797 ;; Defined at:
 12798 ;;		line 31 in file "knobs.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;  rawValue        2   74[BANK2 ] int 
 12801 ;; Auto vars:     Size  Location     Type
 12802 ;;		None
 12803 ;; Return value:  Size  Location     Type
 12804 ;;                  1    wreg      void 
 12805 ;; Registers used:
 12806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12807 ;; Tracked objects:
 12808 ;;		On entry : 0/0
 12809 ;;		On exit  : 0/0
 12810 ;;		Unchanged: 0/0
 12811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12812 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12813 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12815 ;;      Totals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12816 ;;Total ram usage:        5 bytes
 12817 ;; Hardware stack levels used:    1
 12818 ;; Hardware stack levels required when called:   11
 12819 ;; This function calls:
 12820 ;;		___awtoft
 12821 ;;		___ftadd
 12822 ;;		___ftneg
 12823 ;;		_scaleA100kPot
 12824 ;;		_updateFrequency
 12825 ;; This function is called by:
 12826 ;;		_main
 12827 ;; This function uses a non-reentrant model
 12828 ;;
 12829                           
 12830                           
 12831                           ;psect for function _setFrequency
 12832  226A                     _setFrequency:	
 12833                           
 12834                           ;knobs.c: 32: CCPR1 = scaleA100kPot(1023.0 - rawValue);
 12835                           
 12836                           ;incstack = 0
 12837                           ; Regs used in _setFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12838  226A  30C0               	movlw	192
 12839  226B  0021               	movlb	1	; select bank1
 12840  226C  00C1               	movwf	___ftadd@f1^(0+128)
 12841  226D  307F               	movlw	127
 12842  226E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12843  226F  3044               	movlw	68
 12844  2270  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12845  2271  0022               	movlb	2	; select bank2
 12846  2272  086B               	movf	(setFrequency@rawValue+1)^(0+256),w
 12847  2273  0021               	movlb	1	; select bank1
 12848  2274  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12849  2275  0022               	movlb	2	; select bank2
 12850  2276  086A               	movf	setFrequency@rawValue^(0+256),w
 12851  2277  0021               	movlb	1	; select bank1
 12852  2278  00A8               	movwf	___awtoft@c^(0+128)
 12853  2279  31B2  22EC  31A2   	fcall	___awtoft
 12854  227C  0021               	movlb	1	; select bank1
 12855  227D  0828               	movf	?___awtoft^(0+128),w
 12856  227E  00BE               	movwf	___ftneg@f1^(0+128)
 12857  227F  0829               	movf	(?___awtoft+1)^(0+128),w
 12858  2280  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12859  2281  082A               	movf	(?___awtoft+2)^(0+128),w
 12860  2282  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12861  2283  31BF  27D2  31A2   	fcall	___ftneg
 12862  2286  0021               	movlb	1	; select bank1
 12863  2287  083E               	movf	?___ftneg^(0+128),w
 12864  2288  00C4               	movwf	___ftadd@f2^(0+128)
 12865  2289  083F               	movf	(?___ftneg+1)^(0+128),w
 12866  228A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12867  228B  0840               	movf	(?___ftneg+2)^(0+128),w
 12868  228C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12869  228D  3199  2104  31A2   	fcall	___ftadd
 12870  2290  0021               	movlb	1	; select bank1
 12871  2291  0841               	movf	?___ftadd^(0+128),w
 12872  2292  0022               	movlb	2	; select bank2
 12873  2293  00EC               	movwf	_setFrequency$3273^(0+256)
 12874  2294  0021               	movlb	1	; select bank1
 12875  2295  0842               	movf	(?___ftadd+1)^(0+128),w
 12876  2296  0022               	movlb	2	; select bank2
 12877  2297  00ED               	movwf	(_setFrequency$3273+1)^(0+256)
 12878  2298  0021               	movlb	1	; select bank1
 12879  2299  0843               	movf	(?___ftadd+2)^(0+128),w
 12880  229A  0022               	movlb	2	; select bank2
 12881  229B  00EE               	movwf	(_setFrequency$3273+2)^(0+256)
 12882                           
 12883                           ;knobs.c: 32: CCPR1 = scaleA100kPot(1023.0 - rawValue);
 12884  229C  086C               	movf	_setFrequency$3273^(0+256),w
 12885  229D  00E7               	movwf	scaleA100kPot@input^(0+256)
 12886  229E  086D               	movf	(_setFrequency$3273+1)^(0+256),w
 12887  229F  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12888  22A0  086E               	movf	(_setFrequency$3273+2)^(0+256),w
 12889  22A1  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12890  22A2  31A0  20D3  31A2   	fcall	_scaleA100kPot
 12891  22A5  0022               	movlb	2	; select bank2
 12892  22A6  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
 12893  22A7  0025               	movlb	5	; select bank5
 12894  22A8  0092               	movwf	18	;volatile
 12895  22A9  0022               	movlb	2	; select bank2
 12896  22AA  0867               	movf	?_scaleA100kPot^(0+256),w
 12897  22AB  0025               	movlb	5	; select bank5
 12898  22AC  0091               	movwf	17	;volatile
 12899                           
 12900                           ;knobs.c: 33: CCPR2 = scaleA100kPot(1023.0 - rawValue);
 12901  22AD  30C0               	movlw	192
 12902  22AE  0021               	movlb	1	; select bank1
 12903  22AF  00C1               	movwf	___ftadd@f1^(0+128)
 12904  22B0  307F               	movlw	127
 12905  22B1  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12906  22B2  3044               	movlw	68
 12907  22B3  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12908  22B4  0022               	movlb	2	; select bank2
 12909  22B5  086B               	movf	(setFrequency@rawValue+1)^(0+256),w
 12910  22B6  0021               	movlb	1	; select bank1
 12911  22B7  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12912  22B8  0022               	movlb	2	; select bank2
 12913  22B9  086A               	movf	setFrequency@rawValue^(0+256),w
 12914  22BA  0021               	movlb	1	; select bank1
 12915  22BB  00A8               	movwf	___awtoft@c^(0+128)
 12916  22BC  31B2  22EC  31A2   	fcall	___awtoft
 12917  22BF  0021               	movlb	1	; select bank1
 12918  22C0  0828               	movf	?___awtoft^(0+128),w
 12919  22C1  00BE               	movwf	___ftneg@f1^(0+128)
 12920  22C2  0829               	movf	(?___awtoft+1)^(0+128),w
 12921  22C3  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12922  22C4  082A               	movf	(?___awtoft+2)^(0+128),w
 12923  22C5  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12924  22C6  31BF  27D2  31A2   	fcall	___ftneg
 12925  22C9  0021               	movlb	1	; select bank1
 12926  22CA  083E               	movf	?___ftneg^(0+128),w
 12927  22CB  00C4               	movwf	___ftadd@f2^(0+128)
 12928  22CC  083F               	movf	(?___ftneg+1)^(0+128),w
 12929  22CD  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12930  22CE  0840               	movf	(?___ftneg+2)^(0+128),w
 12931  22CF  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12932  22D0  3199  2104  31A2   	fcall	___ftadd
 12933  22D3  0021               	movlb	1	; select bank1
 12934  22D4  0841               	movf	?___ftadd^(0+128),w
 12935  22D5  0022               	movlb	2	; select bank2
 12936  22D6  00EC               	movwf	_setFrequency$3273^(0+256)
 12937  22D7  0021               	movlb	1	; select bank1
 12938  22D8  0842               	movf	(?___ftadd+1)^(0+128),w
 12939  22D9  0022               	movlb	2	; select bank2
 12940  22DA  00ED               	movwf	(_setFrequency$3273+1)^(0+256)
 12941  22DB  0021               	movlb	1	; select bank1
 12942  22DC  0843               	movf	(?___ftadd+2)^(0+128),w
 12943  22DD  0022               	movlb	2	; select bank2
 12944  22DE  00EE               	movwf	(_setFrequency$3273+2)^(0+256)
 12945                           
 12946                           ;knobs.c: 33: CCPR2 = scaleA100kPot(1023.0 - rawValue);
 12947  22DF  086C               	movf	_setFrequency$3273^(0+256),w
 12948  22E0  00E7               	movwf	scaleA100kPot@input^(0+256)
 12949  22E1  086D               	movf	(_setFrequency$3273+1)^(0+256),w
 12950  22E2  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12951  22E3  086E               	movf	(_setFrequency$3273+2)^(0+256),w
 12952  22E4  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12953  22E5  31A0  20D3  31A2   	fcall	_scaleA100kPot
 12954  22E8  0022               	movlb	2	; select bank2
 12955  22E9  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
 12956  22EA  0025               	movlb	5	; select bank5
 12957  22EB  0099               	movwf	25	;volatile
 12958  22EC  0022               	movlb	2	; select bank2
 12959  22ED  0867               	movf	?_scaleA100kPot^(0+256),w
 12960  22EE  0025               	movlb	5	; select bank5
 12961  22EF  0098               	movwf	24	;volatile
 12962                           
 12963                           ;knobs.c: 34: if (isInitialized == 1) {updateFrequency(rawValue);}
 12964  22F0  0020               	movlb	0	; select bank0
 12965  22F1  0362               	decf	_isInitialized,w
 12966  22F2  1D03               	btfss	3,2
 12967  22F3  0008               	return
 12968  22F4  0022               	movlb	2	; select bank2
 12969  22F5  086B               	movf	(setFrequency@rawValue+1)^(0+256),w
 12970  22F6  0021               	movlb	1	; select bank1
 12971  22F7  00A1               	movwf	(updateFrequency@currentValue+1)^(0+128)
 12972  22F8  0022               	movlb	2	; select bank2
 12973  22F9  086A               	movf	setFrequency@rawValue^(0+256),w
 12974  22FA  0021               	movlb	1	; select bank1
 12975  22FB  00A0               	movwf	updateFrequency@currentValue^(0+128)
 12976  22FC  31BF  27E4         	fcall	_updateFrequency
 12977  22FE  0008               	return
 12978  22FF                     __end_of_setFrequency:	
 12979                           
 12980                           	psect	text32
 12981  3FE4                     __ptext32:	
 12982 ;; *************** function _updateFrequency *****************
 12983 ;; Defined at:
 12984 ;;		line 266 in file "state_manager.c"
 12985 ;; Parameters:    Size  Location     Type
 12986 ;;  currentValue    2    0[BANK1 ] int 
 12987 ;; Auto vars:     Size  Location     Type
 12988 ;;		None
 12989 ;; Return value:  Size  Location     Type
 12990 ;;                  1    wreg      void 
 12991 ;; Registers used:
 12992 ;;		wreg
 12993 ;; Tracked objects:
 12994 ;;		On entry : 0/0
 12995 ;;		On exit  : 0/0
 12996 ;;		Unchanged: 0/0
 12997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12998 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13001 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13002 ;;Total ram usage:        2 bytes
 13003 ;; Hardware stack levels used:    1
 13004 ;; Hardware stack levels required when called:    5
 13005 ;; This function calls:
 13006 ;;		Nothing
 13007 ;; This function is called by:
 13008 ;;		_setFrequency
 13009 ;;		_setSymmetry
 13010 ;; This function uses a non-reentrant model
 13011 ;;
 13012                           
 13013                           
 13014                           ;psect for function _updateFrequency
 13015  3FE4                     _updateFrequency:	
 13016                           
 13017                           ;state_manager.c: 267: pedalState.frequency = currentValue;
 13018                           
 13019                           ;incstack = 0
 13020                           ; Regs used in _updateFrequency: [wreg]
 13021  3FE4  0021               	movlb	1	; select bank1
 13022  3FE5  0821               	movf	(updateFrequency@currentValue+1)^(0+128),w
 13023  3FE6  0025               	movlb	5	; select bank5
 13024  3FE7  00BD               	movwf	((_pedalState+1)^(0+640)+8)
 13025  3FE8  0021               	movlb	1	; select bank1
 13026  3FE9  0820               	movf	updateFrequency@currentValue^(0+128),w
 13027  3FEA  0025               	movlb	5	; select bank5
 13028  3FEB  00BC               	movwf	(_pedalState^(0+640)+8)
 13029  3FEC  0008               	return
 13030  3FED                     __end_of_updateFrequency:	
 13031                           
 13032                           	psect	text33
 13033  20D3                     __ptext33:	
 13034 ;; *************** function _scaleA100kPot *****************
 13035 ;; Defined at:
 13036 ;;		line 188 in file "user.c"
 13037 ;; Parameters:    Size  Location     Type
 13038 ;;  input           3   71[BANK2 ] void 
 13039 ;; Auto vars:     Size  Location     Type
 13040 ;;  pwm             3    0[BANK3 ] float 
 13041 ;; Return value:  Size  Location     Type
 13042 ;;                  2   71[BANK2 ] int 
 13043 ;; Registers used:
 13044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13045 ;; Tracked objects:
 13046 ;;		On entry : 0/0
 13047 ;;		On exit  : 0/0
 13048 ;;		Unchanged: 0/0
 13049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13050 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13051 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13053 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13054 ;;Total ram usage:       12 bytes
 13055 ;; Hardware stack levels used:    1
 13056 ;; Hardware stack levels required when called:   10
 13057 ;; This function calls:
 13058 ;;		___ftdiv
 13059 ;;		___ftmul
 13060 ;;		___fttol
 13061 ;;		_pow
 13062 ;; This function is called by:
 13063 ;;		_main
 13064 ;;		_setFrequency
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           
 13069                           ;psect for function _scaleA100kPot
 13070  20D3                     _scaleA100kPot:	
 13071                           
 13072                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 13073                           
 13074                           ;incstack = 0
 13075                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13076  20D3  0022               	movlb	2	; select bank2
 13077  20D4  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 13078  20D5  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 13079  20D6  0467               	iorwf	scaleA100kPot@input^(0+256),w
 13080  20D7  1D03               	skipz
 13081  20D8  28DF               	goto	l7427
 13082  20D9  3000               	movlw	0
 13083  20DA  00E7               	movwf	scaleA100kPot@input^(0+256)
 13084  20DB  3080               	movlw	128
 13085  20DC  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 13086  20DD  303F               	movlw	63
 13087  20DE  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 13088  20DF                     l7427:	
 13089                           
 13090                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 13091  20DF  30C0               	movlw	192
 13092  20E0  0021               	movlb	1	; select bank1
 13093  20E1  00CE               	movwf	___ftdiv@f2^(0+128)
 13094  20E2  307F               	movlw	127
 13095  20E3  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13096  20E4  3044               	movlw	68
 13097  20E5  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13098  20E6  0022               	movlb	2	; select bank2
 13099  20E7  0867               	movf	scaleA100kPot@input^(0+256),w
 13100  20E8  0021               	movlb	1	; select bank1
 13101  20E9  00D1               	movwf	___ftdiv@f1^(0+128)
 13102  20EA  0022               	movlb	2	; select bank2
 13103  20EB  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 13104  20EC  0021               	movlb	1	; select bank1
 13105  20ED  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13106  20EE  0022               	movlb	2	; select bank2
 13107  20EF  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 13108  20F0  0021               	movlb	1	; select bank1
 13109  20F1  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13110  20F2  31A4  2434  31A0   	fcall	___ftdiv
 13111  20F5  0021               	movlb	1	; select bank1
 13112  20F6  084E               	movf	?___ftdiv^(0+128),w
 13113  20F7  0023               	movlb	3	; select bank3
 13114  20F8  00A3               	movwf	_scaleA100kPot$3253^(0+384)
 13115  20F9  0021               	movlb	1	; select bank1
 13116  20FA  084F               	movf	(?___ftdiv+1)^(0+128),w
 13117  20FB  0023               	movlb	3	; select bank3
 13118  20FC  00A4               	movwf	(_scaleA100kPot$3253+1)^(0+384)
 13119  20FD  0021               	movlb	1	; select bank1
 13120  20FE  0850               	movf	(?___ftdiv+2)^(0+128),w
 13121  20FF  0023               	movlb	3	; select bank3
 13122  2100  00A5               	movwf	(_scaleA100kPot$3253+2)^(0+384)
 13123                           
 13124                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 13125  2101  3056               	movlw	86
 13126  2102  0022               	movlb	2	; select bank2
 13127  2103  00D8               	movwf	pow@y^(0+256)
 13128  2104  308E               	movlw	142
 13129  2105  00D9               	movwf	(pow@y+1)^(0+256)
 13130  2106  30BF               	movlw	191
 13131  2107  00DA               	movwf	(pow@y+2)^(0+256)
 13132  2108  0023               	movlb	3	; select bank3
 13133  2109  0823               	movf	_scaleA100kPot$3253^(0+384),w
 13134  210A  0022               	movlb	2	; select bank2
 13135  210B  00D5               	movwf	pow@x^(0+256)
 13136  210C  0023               	movlb	3	; select bank3
 13137  210D  0824               	movf	(_scaleA100kPot$3253+1)^(0+384),w
 13138  210E  0022               	movlb	2	; select bank2
 13139  210F  00D6               	movwf	(pow@x+1)^(0+256)
 13140  2110  0023               	movlb	3	; select bank3
 13141  2111  0825               	movf	(_scaleA100kPot$3253+2)^(0+384),w
 13142  2112  0022               	movlb	2	; select bank2
 13143  2113  00D7               	movwf	(pow@x+2)^(0+256)
 13144  2114  3199  21FA  31A0   	fcall	_pow
 13145  2117  0022               	movlb	2	; select bank2
 13146  2118  0855               	movf	?_pow^(0+256),w
 13147  2119  0023               	movlb	3	; select bank3
 13148  211A  00A6               	movwf	_scaleA100kPot$3254^(0+384)
 13149  211B  0022               	movlb	2	; select bank2
 13150  211C  0856               	movf	(?_pow+1)^(0+256),w
 13151  211D  0023               	movlb	3	; select bank3
 13152  211E  00A7               	movwf	(_scaleA100kPot$3254+1)^(0+384)
 13153  211F  0022               	movlb	2	; select bank2
 13154  2120  0857               	movf	(?_pow+2)^(0+256),w
 13155  2121  0023               	movlb	3	; select bank3
 13156  2122  00A8               	movwf	(_scaleA100kPot$3254+2)^(0+384)
 13157                           
 13158                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 13159  2123  309F               	movlw	159
 13160  2124  0021               	movlb	1	; select bank1
 13161  2125  00AE               	movwf	___ftmul@f1^(0+128)
 13162  2126  3068               	movlw	104
 13163  2127  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13164  2128  3040               	movlw	64
 13165  2129  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13166  212A  0023               	movlb	3	; select bank3
 13167  212B  0826               	movf	_scaleA100kPot$3254^(0+384),w
 13168  212C  0021               	movlb	1	; select bank1
 13169  212D  00B1               	movwf	___ftmul@f2^(0+128)
 13170  212E  0023               	movlb	3	; select bank3
 13171  212F  0827               	movf	(_scaleA100kPot$3254+1)^(0+384),w
 13172  2130  0021               	movlb	1	; select bank1
 13173  2131  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13174  2132  0023               	movlb	3	; select bank3
 13175  2133  0828               	movf	(_scaleA100kPot$3254+2)^(0+384),w
 13176  2134  0021               	movlb	1	; select bank1
 13177  2135  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13178  2136  31A5  2590  31A0   	fcall	___ftmul
 13179  2139  0021               	movlb	1	; select bank1
 13180  213A  082E               	movf	?___ftmul^(0+128),w
 13181  213B  0023               	movlb	3	; select bank3
 13182  213C  00A0               	movwf	scaleA100kPot@pwm^(0+384)
 13183  213D  0021               	movlb	1	; select bank1
 13184  213E  082F               	movf	(?___ftmul+1)^(0+128),w
 13185  213F  0023               	movlb	3	; select bank3
 13186  2140  00A1               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 13187  2141  0021               	movlb	1	; select bank1
 13188  2142  0830               	movf	(?___ftmul+2)^(0+128),w
 13189  2143  0023               	movlb	3	; select bank3
 13190  2144  00A2               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 13191                           
 13192                           ;user.c: 192: return (int)(pwm);
 13193  2145  0820               	movf	scaleA100kPot@pwm^(0+384),w
 13194  2146  0022               	movlb	2	; select bank2
 13195  2147  00A0               	movwf	___fttol@f1^(0+256)
 13196  2148  0023               	movlb	3	; select bank3
 13197  2149  0821               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 13198  214A  0022               	movlb	2	; select bank2
 13199  214B  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13200  214C  0023               	movlb	3	; select bank3
 13201  214D  0822               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 13202  214E  0022               	movlb	2	; select bank2
 13203  214F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13204  2150  31A1  2158         	fcall	___fttol
 13205  2152  0022               	movlb	2	; select bank2
 13206  2153  0821               	movf	(?___fttol^(0+256)+1),w
 13207  2154  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 13208  2155  0820               	movf	?___fttol^(0+256),w
 13209  2156  00E7               	movwf	?_scaleA100kPot^(0+256)
 13210  2157  0008               	return
 13211  2158                     __end_of_scaleA100kPot:	
 13212                           
 13213                           	psect	text34
 13214  19FA                     __ptext34:	
 13215 ;; *************** function _pow *****************
 13216 ;; Defined at:
 13217 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;  x               3   53[BANK2 ] int 
 13220 ;;  y               3   56[BANK2 ] int 
 13221 ;; Auto vars:     Size  Location     Type
 13222 ;;  yi              4   67[BANK2 ] unsigned long 
 13223 ;;  sign            1   66[BANK2 ] unsigned char 
 13224 ;; Return value:  Size  Location     Type
 13225 ;;                  3   53[BANK2 ] unsigned char 
 13226 ;; Registers used:
 13227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13228 ;; Tracked objects:
 13229 ;;		On entry : 0/0
 13230 ;;		On exit  : 0/0
 13231 ;;		Unchanged: 0/0
 13232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13233 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13234 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13235 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13236 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13237 ;;Total ram usage:       18 bytes
 13238 ;; Hardware stack levels used:    1
 13239 ;; Hardware stack levels required when called:    9
 13240 ;; This function calls:
 13241 ;;		___ftge
 13242 ;;		___ftmul
 13243 ;;		___ftneg
 13244 ;;		___fttol
 13245 ;;		___lltoft
 13246 ;;		_exp
 13247 ;;		_log
 13248 ;; This function is called by:
 13249 ;;		_scaleA100kPot
 13250 ;;		_scaleA10kPot
 13251 ;;		_scaleiA10kPot
 13252 ;;		_scaleiA100kPot
 13253 ;;		_scaleA25kPot
 13254 ;;		_scaleiA25kPot
 13255 ;; This function uses a non-reentrant model
 13256 ;;
 13257                           
 13258                           
 13259                           ;psect for function _pow
 13260  19FA                     _pow:	
 13261                           
 13262                           ;incstack = 0
 13263                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13264  19FA  0022               	movlb	2	; select bank2
 13265  19FB  01E2               	clrf	pow@sign^(0+256)
 13266  19FC  0857               	movf	(pow@x+2)^(0+256),w
 13267  19FD  0456               	iorwf	(pow@x+1)^(0+256),w
 13268  19FE  0455               	iorwf	pow@x^(0+256),w
 13269  19FF  1D03               	skipz
 13270  1A00  2A26               	goto	l7067
 13271  1A01  3000               	movlw	0
 13272  1A02  0021               	movlb	1	; select bank1
 13273  1A03  00A0               	movwf	___ftge@ff1^(0+128)
 13274  1A04  3000               	movlw	0
 13275  1A05  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13276  1A06  3000               	movlw	0
 13277  1A07  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13278  1A08  0022               	movlb	2	; select bank2
 13279  1A09  0858               	movf	pow@y^(0+256),w
 13280  1A0A  0021               	movlb	1	; select bank1
 13281  1A0B  00A3               	movwf	___ftge@ff2^(0+128)
 13282  1A0C  0022               	movlb	2	; select bank2
 13283  1A0D  0859               	movf	(pow@y+1)^(0+256),w
 13284  1A0E  0021               	movlb	1	; select bank1
 13285  1A0F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13286  1A10  0022               	movlb	2	; select bank2
 13287  1A11  085A               	movf	(pow@y+2)^(0+256),w
 13288  1A12  0021               	movlb	1	; select bank1
 13289  1A13  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13290  1A14  31A8  2000  3199   	fcall	___ftge
 13291  1A17  1C03               	btfss	3,0
 13292  1A18  2A1E               	goto	l2817
 13293  1A19  3021               	movlw	33
 13294  1A1A  0025               	movlb	5	; select bank5
 13295  1A1B  00E6               	movwf	_errno^(0+640)
 13296  1A1C  3000               	movlw	0
 13297  1A1D  00E7               	movwf	(_errno^(0+640)+1)
 13298  1A1E                     l2817:	
 13299  1A1E  3000               	movlw	0
 13300  1A1F  0022               	movlb	2	; select bank2
 13301  1A20  00D5               	movwf	?_pow^(0+256)
 13302  1A21  3000               	movlw	0
 13303  1A22  00D6               	movwf	(?_pow+1)^(0+256)
 13304  1A23  3000               	movlw	0
 13305  1A24  00D7               	movwf	(?_pow+2)^(0+256)
 13306  1A25  0008               	return
 13307  1A26                     l7067:	
 13308  1A26  085A               	movf	(pow@y+2)^(0+256),w
 13309  1A27  0459               	iorwf	(pow@y+1)^(0+256),w
 13310  1A28  0458               	iorwf	pow@y^(0+256),w
 13311  1A29  1D03               	skipz
 13312  1A2A  2A32               	goto	l7073
 13313  1A2B  3000               	movlw	0
 13314  1A2C  00D5               	movwf	?_pow^(0+256)
 13315  1A2D  3080               	movlw	128
 13316  1A2E  00D6               	movwf	(?_pow+1)^(0+256)
 13317  1A2F  303F               	movlw	63
 13318  1A30  00D7               	movwf	(?_pow+2)^(0+256)
 13319  1A31  0008               	return
 13320  1A32                     l7073:	
 13321  1A32  0855               	movf	pow@x^(0+256),w
 13322  1A33  0021               	movlb	1	; select bank1
 13323  1A34  00A0               	movwf	___ftge@ff1^(0+128)
 13324  1A35  0022               	movlb	2	; select bank2
 13325  1A36  0856               	movf	(pow@x+1)^(0+256),w
 13326  1A37  0021               	movlb	1	; select bank1
 13327  1A38  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13328  1A39  0022               	movlb	2	; select bank2
 13329  1A3A  0857               	movf	(pow@x+2)^(0+256),w
 13330  1A3B  0021               	movlb	1	; select bank1
 13331  1A3C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13332  1A3D  3000               	movlw	0
 13333  1A3E  00A3               	movwf	___ftge@ff2^(0+128)
 13334  1A3F  3000               	movlw	0
 13335  1A40  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13336  1A41  3000               	movlw	0
 13337  1A42  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13338  1A43  31A8  2000  3199   	fcall	___ftge
 13339  1A46  1803               	btfsc	3,0
 13340  1A47  2AAC               	goto	l7085
 13341  1A48  0022               	movlb	2	; select bank2
 13342  1A49  0858               	movf	pow@y^(0+256),w
 13343  1A4A  00A0               	movwf	___fttol@f1^(0+256)
 13344  1A4B  0859               	movf	(pow@y+1)^(0+256),w
 13345  1A4C  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13346  1A4D  085A               	movf	(pow@y+2)^(0+256),w
 13347  1A4E  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13348  1A4F  31A1  2158  3199   	fcall	___fttol
 13349  1A52  0022               	movlb	2	; select bank2
 13350  1A53  0823               	movf	(?___fttol+3)^(0+256),w
 13351  1A54  00E6               	movwf	(pow@yi+3)^(0+256)
 13352  1A55  0822               	movf	(?___fttol+2)^(0+256),w
 13353  1A56  00E5               	movwf	(pow@yi+2)^(0+256)
 13354  1A57  0821               	movf	(?___fttol+1)^(0+256),w
 13355  1A58  00E4               	movwf	(pow@yi+1)^(0+256)
 13356  1A59  0820               	movf	?___fttol^(0+256),w
 13357  1A5A  00E3               	movwf	pow@yi^(0+256)
 13358  1A5B  0866               	movf	(pow@yi+3)^(0+256),w
 13359  1A5C  0021               	movlb	1	; select bank1
 13360  1A5D  00AB               	movwf	(___lltoft@c+3)^(0+128)
 13361  1A5E  0022               	movlb	2	; select bank2
 13362  1A5F  0865               	movf	(pow@yi+2)^(0+256),w
 13363  1A60  0021               	movlb	1	; select bank1
 13364  1A61  00AA               	movwf	(___lltoft@c+2)^(0+128)
 13365  1A62  0022               	movlb	2	; select bank2
 13366  1A63  0864               	movf	(pow@yi+1)^(0+256),w
 13367  1A64  0021               	movlb	1	; select bank1
 13368  1A65  00A9               	movwf	(___lltoft@c+1)^(0+128)
 13369  1A66  0022               	movlb	2	; select bank2
 13370  1A67  0863               	movf	pow@yi^(0+256),w
 13371  1A68  0021               	movlb	1	; select bank1
 13372  1A69  00A8               	movwf	___lltoft@c^(0+128)
 13373  1A6A  31B3  23A9  3199   	fcall	___lltoft
 13374  1A6D  0022               	movlb	2	; select bank2
 13375  1A6E  085A               	movf	(pow@y+2)^(0+256),w
 13376  1A6F  0021               	movlb	1	; select bank1
 13377  1A70  062A               	xorwf	(?___lltoft+2)^(0+128),w
 13378  1A71  1D03               	skipz
 13379  1A72  2A7D               	goto	u6365
 13380  1A73  0022               	movlb	2	; select bank2
 13381  1A74  0859               	movf	(pow@y+1)^(0+256),w
 13382  1A75  0021               	movlb	1	; select bank1
 13383  1A76  0629               	xorwf	(?___lltoft+1)^(0+128),w
 13384  1A77  1D03               	skipz
 13385  1A78  2A7D               	goto	u6365
 13386  1A79  0022               	movlb	2	; select bank2
 13387  1A7A  0858               	movf	pow@y^(0+256),w
 13388  1A7B  0021               	movlb	1	; select bank1
 13389  1A7C  0628               	xorwf	?___lltoft^(0+128),w
 13390  1A7D                     u6365:	
 13391  1A7D  1903               	skipnz
 13392  1A7E  2A8C               	goto	l7081
 13393  1A7F  3021               	movlw	33
 13394  1A80  0025               	movlb	5	; select bank5
 13395  1A81  00E6               	movwf	_errno^(0+640)
 13396  1A82  3000               	movlw	0
 13397  1A83  00E7               	movwf	(_errno^(0+640)+1)
 13398  1A84  3000               	movlw	0
 13399  1A85  0022               	movlb	2	; select bank2
 13400  1A86  00D5               	movwf	?_pow^(0+256)
 13401  1A87  3000               	movlw	0
 13402  1A88  00D6               	movwf	(?_pow+1)^(0+256)
 13403  1A89  3000               	movlw	0
 13404  1A8A  00D7               	movwf	(?_pow+2)^(0+256)
 13405  1A8B  0008               	return
 13406  1A8C                     l7081:	
 13407  1A8C  0022               	movlb	2	; select bank2
 13408  1A8D  0863               	movf	pow@yi^(0+256),w
 13409  1A8E  3901               	andlw	1
 13410  1A8F  00DB               	movwf	??_pow^(0+256)
 13411  1A90  085B               	movf	??_pow^(0+256),w
 13412  1A91  00E2               	movwf	pow@sign^(0+256)
 13413  1A92  0855               	movf	pow@x^(0+256),w
 13414  1A93  0021               	movlb	1	; select bank1
 13415  1A94  00BE               	movwf	___ftneg@f1^(0+128)
 13416  1A95  0022               	movlb	2	; select bank2
 13417  1A96  0856               	movf	(pow@x+1)^(0+256),w
 13418  1A97  0021               	movlb	1	; select bank1
 13419  1A98  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13420  1A99  0022               	movlb	2	; select bank2
 13421  1A9A  0857               	movf	(pow@x+2)^(0+256),w
 13422  1A9B  0021               	movlb	1	; select bank1
 13423  1A9C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13424  1A9D  31BF  27D2  3199   	fcall	___ftneg
 13425  1AA0  0021               	movlb	1	; select bank1
 13426  1AA1  083E               	movf	?___ftneg^(0+128),w
 13427  1AA2  0022               	movlb	2	; select bank2
 13428  1AA3  00D5               	movwf	pow@x^(0+256)
 13429  1AA4  0021               	movlb	1	; select bank1
 13430  1AA5  083F               	movf	(?___ftneg+1)^(0+128),w
 13431  1AA6  0022               	movlb	2	; select bank2
 13432  1AA7  00D6               	movwf	(pow@x+1)^(0+256)
 13433  1AA8  0021               	movlb	1	; select bank1
 13434  1AA9  0840               	movf	(?___ftneg+2)^(0+128),w
 13435  1AAA  0022               	movlb	2	; select bank2
 13436  1AAB  00D7               	movwf	(pow@x+2)^(0+256)
 13437  1AAC                     l7085:	
 13438  1AAC  0022               	movlb	2	; select bank2
 13439  1AAD  0855               	movf	pow@x^(0+256),w
 13440  1AAE  00BE               	movwf	log@x^(0+256)
 13441  1AAF  0856               	movf	(pow@x+1)^(0+256),w
 13442  1AB0  00BF               	movwf	(log@x+1)^(0+256)
 13443  1AB1  0857               	movf	(pow@x+2)^(0+256),w
 13444  1AB2  00C0               	movwf	(log@x+2)^(0+256)
 13445  1AB3  3190  201B  3199   	fcall	_log
 13446  1AB6  0022               	movlb	2	; select bank2
 13447  1AB7  083E               	movf	?_log^(0+256),w
 13448  1AB8  00DC               	movwf	_pow$3275^(0+256)
 13449  1AB9  083F               	movf	(?_log+1)^(0+256),w
 13450  1ABA  00DD               	movwf	(_pow$3275+1)^(0+256)
 13451  1ABB  0840               	movf	(?_log+2)^(0+256),w
 13452  1ABC  00DE               	movwf	(_pow$3275+2)^(0+256)
 13453  1ABD  0858               	movf	pow@y^(0+256),w
 13454  1ABE  0021               	movlb	1	; select bank1
 13455  1ABF  00AE               	movwf	___ftmul@f1^(0+128)
 13456  1AC0  0022               	movlb	2	; select bank2
 13457  1AC1  0859               	movf	(pow@y+1)^(0+256),w
 13458  1AC2  0021               	movlb	1	; select bank1
 13459  1AC3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13460  1AC4  0022               	movlb	2	; select bank2
 13461  1AC5  085A               	movf	(pow@y+2)^(0+256),w
 13462  1AC6  0021               	movlb	1	; select bank1
 13463  1AC7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13464  1AC8  0022               	movlb	2	; select bank2
 13465  1AC9  085C               	movf	_pow$3275^(0+256),w
 13466  1ACA  0021               	movlb	1	; select bank1
 13467  1ACB  00B1               	movwf	___ftmul@f2^(0+128)
 13468  1ACC  0022               	movlb	2	; select bank2
 13469  1ACD  085D               	movf	(_pow$3275+1)^(0+256),w
 13470  1ACE  0021               	movlb	1	; select bank1
 13471  1ACF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13472  1AD0  0022               	movlb	2	; select bank2
 13473  1AD1  085E               	movf	(_pow$3275+2)^(0+256),w
 13474  1AD2  0021               	movlb	1	; select bank1
 13475  1AD3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13476  1AD4  31A5  2590  3199   	fcall	___ftmul
 13477  1AD7  0021               	movlb	1	; select bank1
 13478  1AD8  082E               	movf	?___ftmul^(0+128),w
 13479  1AD9  0022               	movlb	2	; select bank2
 13480  1ADA  00DF               	movwf	_pow$3276^(0+256)
 13481  1ADB  0021               	movlb	1	; select bank1
 13482  1ADC  082F               	movf	(?___ftmul+1)^(0+128),w
 13483  1ADD  0022               	movlb	2	; select bank2
 13484  1ADE  00E0               	movwf	(_pow$3276+1)^(0+256)
 13485  1ADF  0021               	movlb	1	; select bank1
 13486  1AE0  0830               	movf	(?___ftmul+2)^(0+128),w
 13487  1AE1  0022               	movlb	2	; select bank2
 13488  1AE2  00E1               	movwf	(_pow$3276+2)^(0+256)
 13489  1AE3  085F               	movf	_pow$3276^(0+256),w
 13490  1AE4  00C8               	movwf	exp@x^(0+256)
 13491  1AE5  0860               	movf	(_pow$3276+1)^(0+256),w
 13492  1AE6  00C9               	movwf	(exp@x+1)^(0+256)
 13493  1AE7  0861               	movf	(_pow$3276+2)^(0+256),w
 13494  1AE8  00CA               	movwf	(exp@x+2)^(0+256)
 13495  1AE9  319B  2310  3199   	fcall	_exp
 13496  1AEC  0022               	movlb	2	; select bank2
 13497  1AED  0848               	movf	?_exp^(0+256),w
 13498  1AEE  00D5               	movwf	pow@x^(0+256)
 13499  1AEF  0849               	movf	(?_exp+1)^(0+256),w
 13500  1AF0  00D6               	movwf	(pow@x+1)^(0+256)
 13501  1AF1  084A               	movf	(?_exp+2)^(0+256),w
 13502  1AF2  00D7               	movwf	(pow@x+2)^(0+256)
 13503  1AF3  0862               	movf	pow@sign^(0+256),w
 13504  1AF4  1903               	btfsc	3,2
 13505  1AF5  0008               	return
 13506  1AF6  0855               	movf	pow@x^(0+256),w
 13507  1AF7  0021               	movlb	1	; select bank1
 13508  1AF8  00BE               	movwf	___ftneg@f1^(0+128)
 13509  1AF9  0022               	movlb	2	; select bank2
 13510  1AFA  0856               	movf	(pow@x+1)^(0+256),w
 13511  1AFB  0021               	movlb	1	; select bank1
 13512  1AFC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13513  1AFD  0022               	movlb	2	; select bank2
 13514  1AFE  0857               	movf	(pow@x+2)^(0+256),w
 13515  1AFF  0021               	movlb	1	; select bank1
 13516  1B00  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13517  1B01  31BF  27D2         	fcall	___ftneg
 13518  1B03  0021               	movlb	1	; select bank1
 13519  1B04  083E               	movf	?___ftneg^(0+128),w
 13520  1B05  0022               	movlb	2	; select bank2
 13521  1B06  00D5               	movwf	?_pow^(0+256)
 13522  1B07  0021               	movlb	1	; select bank1
 13523  1B08  083F               	movf	(?___ftneg+1)^(0+128),w
 13524  1B09  0022               	movlb	2	; select bank2
 13525  1B0A  00D6               	movwf	(?_pow+1)^(0+256)
 13526  1B0B  0021               	movlb	1	; select bank1
 13527  1B0C  0840               	movf	(?___ftneg+2)^(0+128),w
 13528  1B0D  0022               	movlb	2	; select bank2
 13529  1B0E  00D7               	movwf	(?_pow+2)^(0+256)
 13530  1B0F  0008               	return
 13531  1B10                     __end_of_pow:	
 13532                           
 13533                           	psect	text35
 13534  101B                     __ptext35:	
 13535 ;; *************** function _log *****************
 13536 ;; Defined at:
 13537 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 13538 ;; Parameters:    Size  Location     Type
 13539 ;;  x               3   30[BANK2 ] unsigned char 
 13540 ;; Auto vars:     Size  Location     Type
 13541 ;;  exponent        2   34[BANK2 ] int 
 13542 ;; Return value:  Size  Location     Type
 13543 ;;                  3   30[BANK2 ] int 
 13544 ;; Registers used:
 13545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13546 ;; Tracked objects:
 13547 ;;		On entry : 0/0
 13548 ;;		On exit  : 0/0
 13549 ;;		Unchanged: 0/0
 13550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13551 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13552 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13553 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13554 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13555 ;;Total ram usage:        6 bytes
 13556 ;; Hardware stack levels used:    1
 13557 ;; Hardware stack levels required when called:    8
 13558 ;; This function calls:
 13559 ;;		___awtoft
 13560 ;;		___ftadd
 13561 ;;		___ftge
 13562 ;;		___ftmul
 13563 ;;		_eval_poly
 13564 ;;		_frexp
 13565 ;; This function is called by:
 13566 ;;		_pow
 13567 ;; This function uses a non-reentrant model
 13568 ;;
 13569                           
 13570                           
 13571                           ;psect for function _log
 13572  101B                     _log:	
 13573                           
 13574                           ;incstack = 0
 13575                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13576  101B  0022               	movlb	2	; select bank2
 13577  101C  083E               	movf	log@x^(0+256),w
 13578  101D  0021               	movlb	1	; select bank1
 13579  101E  00A0               	movwf	___ftge@ff1^(0+128)
 13580  101F  0022               	movlb	2	; select bank2
 13581  1020  083F               	movf	(log@x+1)^(0+256),w
 13582  1021  0021               	movlb	1	; select bank1
 13583  1022  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13584  1023  0022               	movlb	2	; select bank2
 13585  1024  0840               	movf	(log@x+2)^(0+256),w
 13586  1025  0021               	movlb	1	; select bank1
 13587  1026  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13588  1027  3000               	movlw	0
 13589  1028  00A3               	movwf	___ftge@ff2^(0+128)
 13590  1029  3000               	movlw	0
 13591  102A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13592  102B  3000               	movlw	0
 13593  102C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13594  102D  31A8  2000  3190   	fcall	___ftge
 13595  1030  1803               	btfsc	3,0
 13596  1031  283F               	goto	l6943
 13597  1032  3021               	movlw	33
 13598  1033  0025               	movlb	5	; select bank5
 13599  1034  00E6               	movwf	_errno^(0+640)
 13600  1035  3000               	movlw	0
 13601  1036  00E7               	movwf	(_errno^(0+640)+1)
 13602  1037  3000               	movlw	0
 13603  1038  0022               	movlb	2	; select bank2
 13604  1039  00BE               	movwf	?_log^(0+256)
 13605  103A  3000               	movlw	0
 13606  103B  00BF               	movwf	(?_log+1)^(0+256)
 13607  103C  3000               	movlw	0
 13608  103D  00C0               	movwf	(?_log+2)^(0+256)
 13609  103E  0008               	return
 13610  103F                     l6943:	
 13611  103F  0022               	movlb	2	; select bank2
 13612  1040  0840               	movf	(log@x+2)^(0+256),w
 13613  1041  043F               	iorwf	(log@x+1)^(0+256),w
 13614  1042  043E               	iorwf	log@x^(0+256),w
 13615  1043  1D03               	skipz
 13616  1044  2852               	goto	l6949
 13617  1045  3022               	movlw	34
 13618  1046  0025               	movlb	5	; select bank5
 13619  1047  00E6               	movwf	_errno^(0+640)
 13620  1048  3000               	movlw	0
 13621  1049  00E7               	movwf	(_errno^(0+640)+1)
 13622  104A  3000               	movlw	0
 13623  104B  0022               	movlb	2	; select bank2
 13624  104C  00BE               	movwf	?_log^(0+256)
 13625  104D  3000               	movlw	0
 13626  104E  00BF               	movwf	(?_log+1)^(0+256)
 13627  104F  3000               	movlw	0
 13628  1050  00C0               	movwf	(?_log+2)^(0+256)
 13629  1051  0008               	return
 13630  1052                     l6949:	
 13631  1052  3000               	movlw	0
 13632  1053  0021               	movlb	1	; select bank1
 13633  1054  00C1               	movwf	___ftadd@f1^(0+128)
 13634  1055  3080               	movlw	128
 13635  1056  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13636  1057  30BF               	movlw	191
 13637  1058  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13638  1059  3000               	movlw	0
 13639  105A  00AE               	movwf	___ftmul@f1^(0+128)
 13640  105B  3000               	movlw	0
 13641  105C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13642  105D  3040               	movlw	64
 13643  105E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13644  105F  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 13645  1060  0022               	movlb	2	; select bank2
 13646  1061  00C1               	movwf	??_log^(0+256)
 13647  1062  0841               	movf	??_log^(0+256),w
 13648  1063  0021               	movlb	1	; select bank1
 13649  1064  00A3               	movwf	frexp@eptr^(0+128)
 13650  1065  0022               	movlb	2	; select bank2
 13651  1066  083E               	movf	log@x^(0+256),w
 13652  1067  0021               	movlb	1	; select bank1
 13653  1068  00A0               	movwf	frexp@value^(0+128)
 13654  1069  0022               	movlb	2	; select bank2
 13655  106A  083F               	movf	(log@x+1)^(0+256),w
 13656  106B  0021               	movlb	1	; select bank1
 13657  106C  00A1               	movwf	(frexp@value+1)^(0+128)
 13658  106D  0022               	movlb	2	; select bank2
 13659  106E  0840               	movf	(log@x+2)^(0+256),w
 13660  106F  0021               	movlb	1	; select bank1
 13661  1070  00A2               	movwf	(frexp@value+2)^(0+128)
 13662  1071  31B7  27C0  3190   	fcall	_frexp
 13663  1074  0021               	movlb	1	; select bank1
 13664  1075  0820               	movf	?_frexp^(0+128),w
 13665  1076  00B1               	movwf	___ftmul@f2^(0+128)
 13666  1077  0821               	movf	(?_frexp+1)^(0+128),w
 13667  1078  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13668  1079  0822               	movf	(?_frexp+2)^(0+128),w
 13669  107A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13670  107B  31A5  2590  3190   	fcall	___ftmul
 13671  107E  0021               	movlb	1	; select bank1
 13672  107F  082E               	movf	?___ftmul^(0+128),w
 13673  1080  00C4               	movwf	___ftadd@f2^(0+128)
 13674  1081  082F               	movf	(?___ftmul+1)^(0+128),w
 13675  1082  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13676  1083  0830               	movf	(?___ftmul+2)^(0+128),w
 13677  1084  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13678  1085  3199  2104  3190   	fcall	___ftadd
 13679  1088  0021               	movlb	1	; select bank1
 13680  1089  0841               	movf	?___ftadd^(0+128),w
 13681  108A  0022               	movlb	2	; select bank2
 13682  108B  00BE               	movwf	log@x^(0+256)
 13683  108C  0021               	movlb	1	; select bank1
 13684  108D  0842               	movf	(?___ftadd+1)^(0+128),w
 13685  108E  0022               	movlb	2	; select bank2
 13686  108F  00BF               	movwf	(log@x+1)^(0+256)
 13687  1090  0021               	movlb	1	; select bank1
 13688  1091  0843               	movf	(?___ftadd+2)^(0+128),w
 13689  1092  0022               	movlb	2	; select bank2
 13690  1093  00C0               	movwf	(log@x+2)^(0+256)
 13691  1094  30FF               	movlw	255
 13692  1095  07C2               	addwf	log@exponent^(0+256),f
 13693  1096  30FF               	movlw	255
 13694  1097  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 13695  1098  083E               	movf	log@x^(0+256),w
 13696  1099  00B4               	movwf	eval_poly@x^(0+256)
 13697  109A  083F               	movf	(log@x+1)^(0+256),w
 13698  109B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13699  109C  0840               	movf	(log@x+2)^(0+256),w
 13700  109D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13701  109E  301E               	movlw	low (log@coeff| (0+32768))
 13702  109F  00B7               	movwf	eval_poly@d^(0+256)
 13703  10A0  30B0               	movlw	high (log@coeff| (0+32768))
 13704  10A1  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13705  10A2  3008               	movlw	8
 13706  10A3  00B9               	movwf	eval_poly@n^(0+256)
 13707  10A4  3000               	movlw	0
 13708  10A5  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13709  10A6  31AE  260F  3190   	fcall	_eval_poly
 13710  10A9  0022               	movlb	2	; select bank2
 13711  10AA  0834               	movf	?_eval_poly^(0+256),w
 13712  10AB  00BE               	movwf	log@x^(0+256)
 13713  10AC  0835               	movf	(?_eval_poly+1)^(0+256),w
 13714  10AD  00BF               	movwf	(log@x+1)^(0+256)
 13715  10AE  0836               	movf	(?_eval_poly+2)^(0+256),w
 13716  10AF  00C0               	movwf	(log@x+2)^(0+256)
 13717  10B0  083E               	movf	log@x^(0+256),w
 13718  10B1  0021               	movlb	1	; select bank1
 13719  10B2  00C1               	movwf	___ftadd@f1^(0+128)
 13720  10B3  0022               	movlb	2	; select bank2
 13721  10B4  083F               	movf	(log@x+1)^(0+256),w
 13722  10B5  0021               	movlb	1	; select bank1
 13723  10B6  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13724  10B7  0022               	movlb	2	; select bank2
 13725  10B8  0840               	movf	(log@x+2)^(0+256),w
 13726  10B9  0021               	movlb	1	; select bank1
 13727  10BA  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13728  10BB  3072               	movlw	114
 13729  10BC  00AE               	movwf	___ftmul@f1^(0+128)
 13730  10BD  3031               	movlw	49
 13731  10BE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13732  10BF  303F               	movlw	63
 13733  10C0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13734  10C1  0022               	movlb	2	; select bank2
 13735  10C2  0843               	movf	(log@exponent+1)^(0+256),w
 13736  10C3  0021               	movlb	1	; select bank1
 13737  10C4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13738  10C5  0022               	movlb	2	; select bank2
 13739  10C6  0842               	movf	log@exponent^(0+256),w
 13740  10C7  0021               	movlb	1	; select bank1
 13741  10C8  00A8               	movwf	___awtoft@c^(0+128)
 13742  10C9  31B2  22EC  3190   	fcall	___awtoft
 13743  10CC  0021               	movlb	1	; select bank1
 13744  10CD  0828               	movf	?___awtoft^(0+128),w
 13745  10CE  00B1               	movwf	___ftmul@f2^(0+128)
 13746  10CF  0829               	movf	(?___awtoft+1)^(0+128),w
 13747  10D0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13748  10D1  082A               	movf	(?___awtoft+2)^(0+128),w
 13749  10D2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13750  10D3  31A5  2590  3190   	fcall	___ftmul
 13751  10D6  0021               	movlb	1	; select bank1
 13752  10D7  082E               	movf	?___ftmul^(0+128),w
 13753  10D8  00C4               	movwf	___ftadd@f2^(0+128)
 13754  10D9  082F               	movf	(?___ftmul+1)^(0+128),w
 13755  10DA  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13756  10DB  0830               	movf	(?___ftmul+2)^(0+128),w
 13757  10DC  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13758  10DD  3199  2104         	fcall	___ftadd
 13759  10DF  0021               	movlb	1	; select bank1
 13760  10E0  0841               	movf	?___ftadd^(0+128),w
 13761  10E1  0022               	movlb	2	; select bank2
 13762  10E2  00BE               	movwf	?_log^(0+256)
 13763  10E3  0021               	movlb	1	; select bank1
 13764  10E4  0842               	movf	(?___ftadd+1)^(0+128),w
 13765  10E5  0022               	movlb	2	; select bank2
 13766  10E6  00BF               	movwf	(?_log+1)^(0+256)
 13767  10E7  0021               	movlb	1	; select bank1
 13768  10E8  0843               	movf	(?___ftadd+2)^(0+128),w
 13769  10E9  0022               	movlb	2	; select bank2
 13770  10EA  00C0               	movwf	(?_log+2)^(0+256)
 13771  10EB  0008               	return
 13772  10EC                     __end_of_log:	
 13773                           
 13774                           	psect	text36
 13775  1B10                     __ptext36:	
 13776 ;; *************** function _exp *****************
 13777 ;; Defined at:
 13778 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13779 ;; Parameters:    Size  Location     Type
 13780 ;;  x               3   40[BANK2 ] int 
 13781 ;; Auto vars:     Size  Location     Type
 13782 ;;  exponent        2   50[BANK2 ] int 
 13783 ;;  sign            1   52[BANK2 ] unsigned char 
 13784 ;; Return value:  Size  Location     Type
 13785 ;;                  3   40[BANK2 ] unsigned char 
 13786 ;; Registers used:
 13787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13788 ;; Tracked objects:
 13789 ;;		On entry : 0/0
 13790 ;;		On exit  : 0/0
 13791 ;;		Unchanged: 0/0
 13792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13793 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13794 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13795 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13796 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13797 ;;Total ram usage:       13 bytes
 13798 ;; Hardware stack levels used:    1
 13799 ;; Hardware stack levels required when called:    8
 13800 ;; This function calls:
 13801 ;;		___awtoft
 13802 ;;		___ftdiv
 13803 ;;		___ftge
 13804 ;;		___ftmul
 13805 ;;		___ftneg
 13806 ;;		___ftsub
 13807 ;;		___fttol
 13808 ;;		_eval_poly
 13809 ;;		_floor
 13810 ;;		_ldexp
 13811 ;; This function is called by:
 13812 ;;		_pow
 13813 ;; This function uses a non-reentrant model
 13814 ;;
 13815                           
 13816                           
 13817                           ;psect for function _exp
 13818  1B10                     _exp:	
 13819                           
 13820                           ;incstack = 0
 13821                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13822  1B10  0022               	movlb	2	; select bank2
 13823  1B11  084A               	movf	(exp@x+2)^(0+256),w
 13824  1B12  0449               	iorwf	(exp@x+1)^(0+256),w
 13825  1B13  0448               	iorwf	exp@x^(0+256),w
 13826  1B14  1D03               	skipz
 13827  1B15  2B1D               	goto	l6965
 13828  1B16  3000               	movlw	0
 13829  1B17  00C8               	movwf	?_exp^(0+256)
 13830  1B18  3080               	movlw	128
 13831  1B19  00C9               	movwf	(?_exp+1)^(0+256)
 13832  1B1A  303F               	movlw	63
 13833  1B1B  00CA               	movwf	(?_exp+2)^(0+256)
 13834  1B1C  0008               	return
 13835  1B1D                     l6965:	
 13836  1B1D  3072               	movlw	114
 13837  1B1E  0021               	movlb	1	; select bank1
 13838  1B1F  00A0               	movwf	___ftge@ff1^(0+128)
 13839  1B20  3031               	movlw	49
 13840  1B21  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13841  1B22  3044               	movlw	68
 13842  1B23  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13843  1B24  0022               	movlb	2	; select bank2
 13844  1B25  0848               	movf	exp@x^(0+256),w
 13845  1B26  0021               	movlb	1	; select bank1
 13846  1B27  00A3               	movwf	___ftge@ff2^(0+128)
 13847  1B28  0022               	movlb	2	; select bank2
 13848  1B29  0849               	movf	(exp@x+1)^(0+256),w
 13849  1B2A  0021               	movlb	1	; select bank1
 13850  1B2B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13851  1B2C  0022               	movlb	2	; select bank2
 13852  1B2D  084A               	movf	(exp@x+2)^(0+256),w
 13853  1B2E  0021               	movlb	1	; select bank1
 13854  1B2F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13855  1B30  31A8  2000  319B   	fcall	___ftge
 13856  1B33  1803               	btfsc	3,0
 13857  1B34  2B42               	goto	l6975
 13858  1B35  3022               	movlw	34
 13859  1B36  0025               	movlb	5	; select bank5
 13860  1B37  00E6               	movwf	_errno^(0+640)
 13861  1B38  3000               	movlw	0
 13862  1B39  00E7               	movwf	(_errno^(0+640)+1)
 13863  1B3A  30FF               	movlw	255
 13864  1B3B  0022               	movlb	2	; select bank2
 13865  1B3C  00C8               	movwf	?_exp^(0+256)
 13866  1B3D  307F               	movlw	127
 13867  1B3E  00C9               	movwf	(?_exp+1)^(0+256)
 13868  1B3F  307F               	movlw	127
 13869  1B40  00CA               	movwf	(?_exp+2)^(0+256)
 13870  1B41  0008               	return
 13871  1B42                     l6975:	
 13872  1B42  0022               	movlb	2	; select bank2
 13873  1B43  0848               	movf	exp@x^(0+256),w
 13874  1B44  0021               	movlb	1	; select bank1
 13875  1B45  00A0               	movwf	___ftge@ff1^(0+128)
 13876  1B46  0022               	movlb	2	; select bank2
 13877  1B47  0849               	movf	(exp@x+1)^(0+256),w
 13878  1B48  0021               	movlb	1	; select bank1
 13879  1B49  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13880  1B4A  0022               	movlb	2	; select bank2
 13881  1B4B  084A               	movf	(exp@x+2)^(0+256),w
 13882  1B4C  0021               	movlb	1	; select bank1
 13883  1B4D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13884  1B4E  3049               	movlw	73
 13885  1B4F  00A3               	movwf	___ftge@ff2^(0+128)
 13886  1B50  303A               	movlw	58
 13887  1B51  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13888  1B52  30C4               	movlw	196
 13889  1B53  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13890  1B54  31A8  2000  319B   	fcall	___ftge
 13891  1B57  1803               	btfsc	3,0
 13892  1B58  2B66               	goto	l6981
 13893  1B59  3022               	movlw	34
 13894  1B5A  0025               	movlb	5	; select bank5
 13895  1B5B  00E6               	movwf	_errno^(0+640)
 13896  1B5C  3000               	movlw	0
 13897  1B5D  00E7               	movwf	(_errno^(0+640)+1)
 13898  1B5E  3000               	movlw	0
 13899  1B5F  0022               	movlb	2	; select bank2
 13900  1B60  00C8               	movwf	?_exp^(0+256)
 13901  1B61  3000               	movlw	0
 13902  1B62  00C9               	movwf	(?_exp+1)^(0+256)
 13903  1B63  3000               	movlw	0
 13904  1B64  00CA               	movwf	(?_exp+2)^(0+256)
 13905  1B65  0008               	return
 13906  1B66                     l6981:	
 13907  1B66  0022               	movlb	2	; select bank2
 13908  1B67  0848               	movf	exp@x^(0+256),w
 13909  1B68  0021               	movlb	1	; select bank1
 13910  1B69  00A0               	movwf	___ftge@ff1^(0+128)
 13911  1B6A  0022               	movlb	2	; select bank2
 13912  1B6B  0849               	movf	(exp@x+1)^(0+256),w
 13913  1B6C  0021               	movlb	1	; select bank1
 13914  1B6D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13915  1B6E  0022               	movlb	2	; select bank2
 13916  1B6F  084A               	movf	(exp@x+2)^(0+256),w
 13917  1B70  0021               	movlb	1	; select bank1
 13918  1B71  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13919  1B72  3000               	movlw	0
 13920  1B73  00A3               	movwf	___ftge@ff2^(0+128)
 13921  1B74  3000               	movlw	0
 13922  1B75  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13923  1B76  3000               	movlw	0
 13924  1B77  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13925  1B78  31A8  2000  319B   	fcall	___ftge
 13926  1B7B  1803               	btfsc	3,0
 13927  1B7C  2B7F               	goto	u6230
 13928  1B7D  3001               	movlw	1
 13929  1B7E  2B80               	goto	u6240
 13930  1B7F                     u6230:	
 13931  1B7F  3000               	movlw	0
 13932  1B80                     u6240:	
 13933  1B80  0022               	movlb	2	; select bank2
 13934  1B81  00CB               	movwf	??_exp^(0+256)
 13935  1B82  084B               	movf	??_exp^(0+256),w
 13936  1B83  00D4               	movwf	exp@sign^(0+256)
 13937  1B84  0854               	movf	exp@sign^(0+256),w
 13938  1B85  1903               	btfsc	3,2
 13939  1B86  2BA1               	goto	l6987
 13940  1B87  0848               	movf	exp@x^(0+256),w
 13941  1B88  0021               	movlb	1	; select bank1
 13942  1B89  00BE               	movwf	___ftneg@f1^(0+128)
 13943  1B8A  0022               	movlb	2	; select bank2
 13944  1B8B  0849               	movf	(exp@x+1)^(0+256),w
 13945  1B8C  0021               	movlb	1	; select bank1
 13946  1B8D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13947  1B8E  0022               	movlb	2	; select bank2
 13948  1B8F  084A               	movf	(exp@x+2)^(0+256),w
 13949  1B90  0021               	movlb	1	; select bank1
 13950  1B91  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13951  1B92  31BF  27D2  319B   	fcall	___ftneg
 13952  1B95  0021               	movlb	1	; select bank1
 13953  1B96  083E               	movf	?___ftneg^(0+128),w
 13954  1B97  0022               	movlb	2	; select bank2
 13955  1B98  00C8               	movwf	exp@x^(0+256)
 13956  1B99  0021               	movlb	1	; select bank1
 13957  1B9A  083F               	movf	(?___ftneg+1)^(0+128),w
 13958  1B9B  0022               	movlb	2	; select bank2
 13959  1B9C  00C9               	movwf	(exp@x+1)^(0+256)
 13960  1B9D  0021               	movlb	1	; select bank1
 13961  1B9E  0840               	movf	(?___ftneg+2)^(0+128),w
 13962  1B9F  0022               	movlb	2	; select bank2
 13963  1BA0  00CA               	movwf	(exp@x+2)^(0+256)
 13964  1BA1                     l6987:	
 13965  1BA1  30AA               	movlw	170
 13966  1BA2  0021               	movlb	1	; select bank1
 13967  1BA3  00AE               	movwf	___ftmul@f1^(0+128)
 13968  1BA4  30B8               	movlw	184
 13969  1BA5  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13970  1BA6  303F               	movlw	63
 13971  1BA7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13972  1BA8  0022               	movlb	2	; select bank2
 13973  1BA9  0848               	movf	exp@x^(0+256),w
 13974  1BAA  0021               	movlb	1	; select bank1
 13975  1BAB  00B1               	movwf	___ftmul@f2^(0+128)
 13976  1BAC  0022               	movlb	2	; select bank2
 13977  1BAD  0849               	movf	(exp@x+1)^(0+256),w
 13978  1BAE  0021               	movlb	1	; select bank1
 13979  1BAF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13980  1BB0  0022               	movlb	2	; select bank2
 13981  1BB1  084A               	movf	(exp@x+2)^(0+256),w
 13982  1BB2  0021               	movlb	1	; select bank1
 13983  1BB3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13984  1BB4  31A5  2590  319B   	fcall	___ftmul
 13985  1BB7  0021               	movlb	1	; select bank1
 13986  1BB8  082E               	movf	?___ftmul^(0+128),w
 13987  1BB9  0022               	movlb	2	; select bank2
 13988  1BBA  00C8               	movwf	exp@x^(0+256)
 13989  1BBB  0021               	movlb	1	; select bank1
 13990  1BBC  082F               	movf	(?___ftmul+1)^(0+128),w
 13991  1BBD  0022               	movlb	2	; select bank2
 13992  1BBE  00C9               	movwf	(exp@x+1)^(0+256)
 13993  1BBF  0021               	movlb	1	; select bank1
 13994  1BC0  0830               	movf	(?___ftmul+2)^(0+128),w
 13995  1BC1  0022               	movlb	2	; select bank2
 13996  1BC2  00CA               	movwf	(exp@x+2)^(0+256)
 13997  1BC3  0848               	movf	exp@x^(0+256),w
 13998  1BC4  00AE               	movwf	floor@x^(0+256)
 13999  1BC5  0849               	movf	(exp@x+1)^(0+256),w
 14000  1BC6  00AF               	movwf	(floor@x+1)^(0+256)
 14001  1BC7  084A               	movf	(exp@x+2)^(0+256),w
 14002  1BC8  00B0               	movwf	(floor@x+2)^(0+256)
 14003  1BC9  31A4  24DD  319B   	fcall	_floor
 14004  1BCC  0022               	movlb	2	; select bank2
 14005  1BCD  082E               	movf	?_floor^(0+256),w
 14006  1BCE  00CC               	movwf	_exp$3278^(0+256)
 14007  1BCF  082F               	movf	(?_floor+1)^(0+256),w
 14008  1BD0  00CD               	movwf	(_exp$3278+1)^(0+256)
 14009  1BD1  0830               	movf	(?_floor+2)^(0+256),w
 14010  1BD2  00CE               	movwf	(_exp$3278+2)^(0+256)
 14011  1BD3  084C               	movf	_exp$3278^(0+256),w
 14012  1BD4  00A0               	movwf	___fttol@f1^(0+256)
 14013  1BD5  084D               	movf	(_exp$3278+1)^(0+256),w
 14014  1BD6  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14015  1BD7  084E               	movf	(_exp$3278+2)^(0+256),w
 14016  1BD8  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14017  1BD9  31A1  2158  319B   	fcall	___fttol
 14018  1BDC  0022               	movlb	2	; select bank2
 14019  1BDD  0821               	movf	(?___fttol^(0+256)+1),w
 14020  1BDE  00D3               	movwf	(exp@exponent+1)^(0+256)
 14021  1BDF  0820               	movf	?___fttol^(0+256),w
 14022  1BE0  00D2               	movwf	exp@exponent^(0+256)
 14023  1BE1  0853               	movf	(exp@exponent+1)^(0+256),w
 14024  1BE2  0021               	movlb	1	; select bank1
 14025  1BE3  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14026  1BE4  0022               	movlb	2	; select bank2
 14027  1BE5  0852               	movf	exp@exponent^(0+256),w
 14028  1BE6  0021               	movlb	1	; select bank1
 14029  1BE7  00A8               	movwf	___awtoft@c^(0+128)
 14030  1BE8  31B2  22EC  319B   	fcall	___awtoft
 14031  1BEB  0021               	movlb	1	; select bank1
 14032  1BEC  0828               	movf	?___awtoft^(0+128),w
 14033  1BED  0022               	movlb	2	; select bank2
 14034  1BEE  00B7               	movwf	___ftsub@f2^(0+256)
 14035  1BEF  0021               	movlb	1	; select bank1
 14036  1BF0  0829               	movf	(?___awtoft+1)^(0+128),w
 14037  1BF1  0022               	movlb	2	; select bank2
 14038  1BF2  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 14039  1BF3  0021               	movlb	1	; select bank1
 14040  1BF4  082A               	movf	(?___awtoft+2)^(0+128),w
 14041  1BF5  0022               	movlb	2	; select bank2
 14042  1BF6  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 14043  1BF7  0848               	movf	exp@x^(0+256),w
 14044  1BF8  00BA               	movwf	___ftsub@f1^(0+256)
 14045  1BF9  0849               	movf	(exp@x+1)^(0+256),w
 14046  1BFA  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 14047  1BFB  084A               	movf	(exp@x+2)^(0+256),w
 14048  1BFC  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 14049  1BFD  31B4  242A  319B   	fcall	___ftsub
 14050  1C00  0022               	movlb	2	; select bank2
 14051  1C01  0837               	movf	?___ftsub^(0+256),w
 14052  1C02  00C8               	movwf	exp@x^(0+256)
 14053  1C03  0838               	movf	(?___ftsub+1)^(0+256),w
 14054  1C04  00C9               	movwf	(exp@x+1)^(0+256)
 14055  1C05  0839               	movf	(?___ftsub+2)^(0+256),w
 14056  1C06  00CA               	movwf	(exp@x+2)^(0+256)
 14057  1C07  0848               	movf	exp@x^(0+256),w
 14058  1C08  00B4               	movwf	eval_poly@x^(0+256)
 14059  1C09  0849               	movf	(exp@x+1)^(0+256),w
 14060  1C0A  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14061  1C0B  084A               	movf	(exp@x+2)^(0+256),w
 14062  1C0C  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14063  1C0D  3000               	movlw	low (exp@coeff| (0+32768))
 14064  1C0E  00B7               	movwf	eval_poly@d^(0+256)
 14065  1C0F  30B0               	movlw	high (exp@coeff| (0+32768))
 14066  1C10  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14067  1C11  3009               	movlw	9
 14068  1C12  00B9               	movwf	eval_poly@n^(0+256)
 14069  1C13  3000               	movlw	0
 14070  1C14  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14071  1C15  31AE  260F  319B   	fcall	_eval_poly
 14072  1C18  0022               	movlb	2	; select bank2
 14073  1C19  0834               	movf	?_eval_poly^(0+256),w
 14074  1C1A  00BE               	movwf	ldexp@value^(0+256)
 14075  1C1B  0835               	movf	(?_eval_poly+1)^(0+256),w
 14076  1C1C  00BF               	movwf	(ldexp@value+1)^(0+256)
 14077  1C1D  0836               	movf	(?_eval_poly+2)^(0+256),w
 14078  1C1E  00C0               	movwf	(ldexp@value+2)^(0+256)
 14079  1C1F  0853               	movf	(exp@exponent+1)^(0+256),w
 14080  1C20  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 14081  1C21  0852               	movf	exp@exponent^(0+256),w
 14082  1C22  00C1               	movwf	ldexp@newexp^(0+256)
 14083  1C23  31A2  22FF  319B   	fcall	_ldexp
 14084  1C26  0022               	movlb	2	; select bank2
 14085  1C27  083E               	movf	?_ldexp^(0+256),w
 14086  1C28  00C8               	movwf	exp@x^(0+256)
 14087  1C29  083F               	movf	(?_ldexp+1)^(0+256),w
 14088  1C2A  00C9               	movwf	(exp@x+1)^(0+256)
 14089  1C2B  0840               	movf	(?_ldexp+2)^(0+256),w
 14090  1C2C  00CA               	movwf	(exp@x+2)^(0+256)
 14091  1C2D  0854               	movf	exp@sign^(0+256),w
 14092  1C2E  1903               	btfsc	3,2
 14093  1C2F  0008               	return
 14094  1C30  30FF               	movlw	255
 14095  1C31  00CF               	movwf	_exp$2981^(0+256)
 14096  1C32  307F               	movlw	127
 14097  1C33  00D0               	movwf	(_exp$2981+1)^(0+256)
 14098  1C34  307F               	movlw	127
 14099  1C35  00D1               	movwf	(_exp$2981+2)^(0+256)
 14100  1C36  084A               	movf	(exp@x+2)^(0+256),w
 14101  1C37  0651               	xorwf	(_exp$2981+2)^(0+256),w
 14102  1C38  1D03               	skipz
 14103  1C39  2C40               	goto	u6275
 14104  1C3A  0849               	movf	(exp@x+1)^(0+256),w
 14105  1C3B  0650               	xorwf	(_exp$2981+1)^(0+256),w
 14106  1C3C  1D03               	skipz
 14107  1C3D  2C40               	goto	u6275
 14108  1C3E  0848               	movf	exp@x^(0+256),w
 14109  1C3F  064F               	xorwf	_exp$2981^(0+256),w
 14110  1C40                     u6275:	
 14111  1C40  1D03               	skipz
 14112  1C41  2C49               	goto	l7009
 14113  1C42  3000               	movlw	0
 14114  1C43  00C8               	movwf	?_exp^(0+256)
 14115  1C44  3000               	movlw	0
 14116  1C45  00C9               	movwf	(?_exp+1)^(0+256)
 14117  1C46  3000               	movlw	0
 14118  1C47  00CA               	movwf	(?_exp+2)^(0+256)
 14119  1C48  0008               	return
 14120  1C49                     l7009:	
 14121  1C49  0848               	movf	exp@x^(0+256),w
 14122  1C4A  0021               	movlb	1	; select bank1
 14123  1C4B  00CE               	movwf	___ftdiv@f2^(0+128)
 14124  1C4C  0022               	movlb	2	; select bank2
 14125  1C4D  0849               	movf	(exp@x+1)^(0+256),w
 14126  1C4E  0021               	movlb	1	; select bank1
 14127  1C4F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14128  1C50  0022               	movlb	2	; select bank2
 14129  1C51  084A               	movf	(exp@x+2)^(0+256),w
 14130  1C52  0021               	movlb	1	; select bank1
 14131  1C53  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14132  1C54  3000               	movlw	0
 14133  1C55  00D1               	movwf	___ftdiv@f1^(0+128)
 14134  1C56  3080               	movlw	128
 14135  1C57  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14136  1C58  303F               	movlw	63
 14137  1C59  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14138  1C5A  31A4  2434         	fcall	___ftdiv
 14139  1C5C  0021               	movlb	1	; select bank1
 14140  1C5D  084E               	movf	?___ftdiv^(0+128),w
 14141  1C5E  0022               	movlb	2	; select bank2
 14142  1C5F  00C8               	movwf	?_exp^(0+256)
 14143  1C60  0021               	movlb	1	; select bank1
 14144  1C61  084F               	movf	(?___ftdiv+1)^(0+128),w
 14145  1C62  0022               	movlb	2	; select bank2
 14146  1C63  00C9               	movwf	(?_exp+1)^(0+256)
 14147  1C64  0021               	movlb	1	; select bank1
 14148  1C65  0850               	movf	(?___ftdiv+2)^(0+128),w
 14149  1C66  0022               	movlb	2	; select bank2
 14150  1C67  00CA               	movwf	(?_exp+2)^(0+256)
 14151  1C68  0008               	return
 14152  1C69                     __end_of_exp:	
 14153                           
 14154                           	psect	text37
 14155  22FF                     __ptext37:	
 14156 ;; *************** function _ldexp *****************
 14157 ;; Defined at:
 14158 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 14159 ;; Parameters:    Size  Location     Type
 14160 ;;  value           3   30[BANK2 ] unsigned char 
 14161 ;;  newexp          2   33[BANK2 ] int 
 14162 ;; Auto vars:     Size  Location     Type
 14163 ;;		None
 14164 ;; Return value:  Size  Location     Type
 14165 ;;                  3   30[BANK2 ] int 
 14166 ;; Registers used:
 14167 ;;		wreg, status,2, status,0, pclath, cstack
 14168 ;; Tracked objects:
 14169 ;;		On entry : 0/0
 14170 ;;		On exit  : 0/0
 14171 ;;		Unchanged: 0/0
 14172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14173 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14174 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14175 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14176 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14177 ;;Total ram usage:       10 bytes
 14178 ;; Hardware stack levels used:    1
 14179 ;; Hardware stack levels required when called:    6
 14180 ;; This function calls:
 14181 ;;		___ftge
 14182 ;;		___ftneg
 14183 ;; This function is called by:
 14184 ;;		_exp
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188                           
 14189                           ;psect for function _ldexp
 14190  22FF                     _ldexp:	
 14191                           
 14192                           ;incstack = 0
 14193                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 14194  22FF  0022               	movlb	2	; select bank2
 14195  2300  0840               	movf	(ldexp@value+2)^(0+256),w
 14196  2301  043F               	iorwf	(ldexp@value+1)^(0+256),w
 14197  2302  043E               	iorwf	ldexp@value^(0+256),w
 14198  2303  1D03               	skipz
 14199  2304  2B0C               	goto	l6799
 14200  2305  3000               	movlw	0
 14201  2306  00BE               	movwf	?_ldexp^(0+256)
 14202  2307  3000               	movlw	0
 14203  2308  00BF               	movwf	(?_ldexp+1)^(0+256)
 14204  2309  3000               	movlw	0
 14205  230A  00C0               	movwf	(?_ldexp+2)^(0+256)
 14206  230B  0008               	return
 14207  230C                     l6799:	
 14208  230C  0840               	movf	(ldexp@value^(0+256)+2),w
 14209  230D  397F               	andlw	127
 14210  230E  00C3               	movwf	??_ldexp^(0+256)
 14211  230F  01C4               	clrf	(??_ldexp^(0+256)+1)
 14212  2310  35C3               	lslf	??_ldexp^(0+256),f
 14213  2311  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 14214  2312  0843               	movf	??_ldexp^(0+256),w
 14215  2313  07C1               	addwf	ldexp@newexp^(0+256),f
 14216  2314  0844               	movf	(??_ldexp+1)^(0+256),w
 14217  2315  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 14218  2316  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 14219  2317  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 14220  2318  3901               	andlw	1
 14221  2319  00C3               	movwf	??_ldexp^(0+256)
 14222  231A  01C4               	clrf	(??_ldexp^(0+256)+1)
 14223  231B  0843               	movf	??_ldexp^(0+256),w
 14224  231C  07C1               	addwf	ldexp@newexp^(0+256),f
 14225  231D  0844               	movf	(??_ldexp+1)^(0+256),w
 14226  231E  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 14227  231F  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 14228  2320  2B2E               	goto	l6809
 14229  2321  3022               	movlw	34
 14230  2322  0025               	movlb	5	; select bank5
 14231  2323  00E6               	movwf	_errno^(0+640)
 14232  2324  3000               	movlw	0
 14233  2325  00E7               	movwf	(_errno^(0+640)+1)
 14234  2326  3000               	movlw	0
 14235  2327  0022               	movlb	2	; select bank2
 14236  2328  00BE               	movwf	?_ldexp^(0+256)
 14237  2329  3000               	movlw	0
 14238  232A  00BF               	movwf	(?_ldexp+1)^(0+256)
 14239  232B  3000               	movlw	0
 14240  232C  00C0               	movwf	(?_ldexp+2)^(0+256)
 14241  232D  0008               	return
 14242  232E                     l6809:	
 14243  232E  0842               	movf	(ldexp@newexp+1)^(0+256),w
 14244  232F  3A80               	xorlw	128
 14245  2330  00C3               	movwf	??_ldexp^(0+256)
 14246  2331  3081               	movlw	129
 14247  2332  0243               	subwf	??_ldexp^(0+256),w
 14248  2333  1D03               	skipz
 14249  2334  2B37               	goto	u6075
 14250  2335  3000               	movlw	0
 14251  2336  0241               	subwf	ldexp@newexp^(0+256),w
 14252  2337                     u6075:	
 14253  2337  1C03               	skipc
 14254  2338  2B7E               	goto	l6833
 14255  2339  3022               	movlw	34
 14256  233A  0025               	movlb	5	; select bank5
 14257  233B  00E6               	movwf	_errno^(0+640)
 14258  233C  3000               	movlw	0
 14259  233D  00E7               	movwf	(_errno^(0+640)+1)
 14260  233E  0022               	movlb	2	; select bank2
 14261  233F  083E               	movf	ldexp@value^(0+256),w
 14262  2340  0021               	movlb	1	; select bank1
 14263  2341  00A0               	movwf	___ftge@ff1^(0+128)
 14264  2342  0022               	movlb	2	; select bank2
 14265  2343  083F               	movf	(ldexp@value+1)^(0+256),w
 14266  2344  0021               	movlb	1	; select bank1
 14267  2345  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14268  2346  0022               	movlb	2	; select bank2
 14269  2347  0840               	movf	(ldexp@value+2)^(0+256),w
 14270  2348  0021               	movlb	1	; select bank1
 14271  2349  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14272  234A  3000               	movlw	0
 14273  234B  00A3               	movwf	___ftge@ff2^(0+128)
 14274  234C  3000               	movlw	0
 14275  234D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14276  234E  3000               	movlw	0
 14277  234F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14278  2350  31A8  2000  31A2   	fcall	___ftge
 14279  2353  1803               	btfsc	3,0
 14280  2354  2B76               	goto	l6829
 14281  2355  30FF               	movlw	255
 14282  2356  0022               	movlb	2	; select bank2
 14283  2357  00C5               	movwf	_ldexp$3018^(0+256)
 14284  2358  307F               	movlw	127
 14285  2359  00C6               	movwf	(_ldexp$3018+1)^(0+256)
 14286  235A  307F               	movlw	127
 14287  235B  00C7               	movwf	(_ldexp$3018+2)^(0+256)
 14288  235C  0845               	movf	_ldexp$3018^(0+256),w
 14289  235D  0021               	movlb	1	; select bank1
 14290  235E  00BE               	movwf	___ftneg@f1^(0+128)
 14291  235F  0022               	movlb	2	; select bank2
 14292  2360  0846               	movf	(_ldexp$3018+1)^(0+256),w
 14293  2361  0021               	movlb	1	; select bank1
 14294  2362  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14295  2363  0022               	movlb	2	; select bank2
 14296  2364  0847               	movf	(_ldexp$3018+2)^(0+256),w
 14297  2365  0021               	movlb	1	; select bank1
 14298  2366  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14299  2367  31BF  27D2         	fcall	___ftneg
 14300  2369  0021               	movlb	1	; select bank1
 14301  236A  083E               	movf	?___ftneg^(0+128),w
 14302  236B  0022               	movlb	2	; select bank2
 14303  236C  00BE               	movwf	?_ldexp^(0+256)
 14304  236D  0021               	movlb	1	; select bank1
 14305  236E  083F               	movf	(?___ftneg+1)^(0+128),w
 14306  236F  0022               	movlb	2	; select bank2
 14307  2370  00BF               	movwf	(?_ldexp+1)^(0+256)
 14308  2371  0021               	movlb	1	; select bank1
 14309  2372  0840               	movf	(?___ftneg+2)^(0+128),w
 14310  2373  0022               	movlb	2	; select bank2
 14311  2374  00C0               	movwf	(?_ldexp+2)^(0+256)
 14312  2375  0008               	return
 14313  2376                     l6829:	
 14314  2376  30FF               	movlw	255
 14315  2377  0022               	movlb	2	; select bank2
 14316  2378  00BE               	movwf	?_ldexp^(0+256)
 14317  2379  307F               	movlw	127
 14318  237A  00BF               	movwf	(?_ldexp+1)^(0+256)
 14319  237B  307F               	movlw	127
 14320  237C  00C0               	movwf	(?_ldexp+2)^(0+256)
 14321  237D  0008               	return
 14322  237E                     l6833:	
 14323  237E  0022               	movlb	2	; select bank2
 14324  237F  0842               	movf	(ldexp@newexp+1)^(0+256),w
 14325  2380  00C4               	movwf	(??_ldexp^(0+256)+1)
 14326  2381  0841               	movf	ldexp@newexp^(0+256),w
 14327  2382  00C3               	movwf	??_ldexp^(0+256)
 14328  2383  0D44               	rlf	(??_ldexp^(0+256)+1),w
 14329  2384  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 14330  2385  0CC3               	rrf	??_ldexp^(0+256),f
 14331  2386  0840               	movf	(ldexp@value^(0+256)+2),w
 14332  2387  0643               	xorwf	??_ldexp^(0+256),w
 14333  2388  3980               	andlw	-128
 14334  2389  0643               	xorwf	??_ldexp^(0+256),w
 14335  238A  00C0               	movwf	(ldexp@value^(0+256)+2)
 14336  238B  0841               	movf	ldexp@newexp^(0+256),w
 14337  238C  3901               	andlw	1
 14338  238D  00C3               	movwf	??_ldexp^(0+256)
 14339  238E  0CC3               	rrf	??_ldexp^(0+256),f
 14340  238F  0CC3               	rrf	??_ldexp^(0+256),f
 14341  2390  083F               	movf	(ldexp@value^(0+256)+1),w
 14342  2391  0643               	xorwf	??_ldexp^(0+256),w
 14343  2392  397F               	andlw	-129
 14344  2393  0643               	xorwf	??_ldexp^(0+256),w
 14345  2394  00BF               	movwf	(ldexp@value^(0+256)+1)
 14346  2395  0008               	return
 14347  2396                     __end_of_ldexp:	
 14348                           
 14349                           	psect	text38
 14350  33A9                     __ptext38:	
 14351 ;; *************** function ___lltoft *****************
 14352 ;; Defined at:
 14353 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 14354 ;; Parameters:    Size  Location     Type
 14355 ;;  c               4    8[BANK1 ] unsigned long 
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;  exp             1   13[BANK1 ] unsigned char 
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  3    8[BANK1 ] float 
 14360 ;; Registers used:
 14361 ;;		wreg, status,2, status,0, pclath, cstack
 14362 ;; Tracked objects:
 14363 ;;		On entry : 0/0
 14364 ;;		On exit  : 0/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14367 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14368 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14369 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14370 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14371 ;;Total ram usage:        6 bytes
 14372 ;; Hardware stack levels used:    1
 14373 ;; Hardware stack levels required when called:    6
 14374 ;; This function calls:
 14375 ;;		___ftpack
 14376 ;; This function is called by:
 14377 ;;		_pow
 14378 ;; This function uses a non-reentrant model
 14379 ;;
 14380                           
 14381                           
 14382                           ;psect for function ___lltoft
 14383  33A9                     ___lltoft:	
 14384                           
 14385                           ;incstack = 0
 14386                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 14387  33A9  308E               	movlw	142
 14388  33AA  0021               	movlb	1	; select bank1
 14389  33AB  00AC               	movwf	??___lltoft^(0+128)
 14390  33AC  082C               	movf	??___lltoft^(0+128),w
 14391  33AD  00AD               	movwf	___lltoft@exp^(0+128)
 14392  33AE                     l6931:	
 14393  33AE  30FF               	movlw	255
 14394  33AF  052B               	andwf	(___lltoft@c+3)^(0+128),w
 14395  33B0  1903               	btfsc	3,2
 14396  33B1  2BBE               	goto	l6933
 14397  33B2  3001               	movlw	1
 14398  33B3                     u6165:	
 14399  33B3  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 14400  33B4  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 14401  33B5  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 14402  33B6  0CA8               	rrf	___lltoft@c^(0+128),f
 14403  33B7  0B89               	decfsz	9,f
 14404  33B8  2BB3               	goto	u6165
 14405  33B9  3001               	movlw	1
 14406  33BA  00AC               	movwf	??___lltoft^(0+128)
 14407  33BB  082C               	movf	??___lltoft^(0+128),w
 14408  33BC  07AD               	addwf	___lltoft@exp^(0+128),f
 14409  33BD  2BAE               	goto	l6931
 14410  33BE                     l6933:	
 14411  33BE  0828               	movf	___lltoft@c^(0+128),w
 14412  33BF  00A0               	movwf	___ftpack@arg^(0+128)
 14413  33C0  0829               	movf	(___lltoft@c+1)^(0+128),w
 14414  33C1  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 14415  33C2  082A               	movf	(___lltoft@c+2)^(0+128),w
 14416  33C3  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 14417  33C4  082D               	movf	___lltoft@exp^(0+128),w
 14418  33C5  00AC               	movwf	??___lltoft^(0+128)
 14419  33C6  082C               	movf	??___lltoft^(0+128),w
 14420  33C7  00A3               	movwf	___ftpack@exp^(0+128)
 14421  33C8  01A4               	clrf	___ftpack@sign^(0+128)
 14422  33C9  31AD  2541         	fcall	___ftpack
 14423  33CB  0021               	movlb	1	; select bank1
 14424  33CC  0820               	movf	?___ftpack^(0+128),w
 14425  33CD  00A8               	movwf	?___lltoft^(0+128)
 14426  33CE  0821               	movf	(?___ftpack+1)^(0+128),w
 14427  33CF  00A9               	movwf	(?___lltoft+1)^(0+128)
 14428  33D0  0822               	movf	(?___ftpack+2)^(0+128),w
 14429  33D1  00AA               	movwf	(?___lltoft+2)^(0+128)
 14430  33D2  0008               	return
 14431  33D3                     __end_of___lltoft:	
 14432                           
 14433                           	psect	text39
 14434  307C                     __ptext39:	
 14435 ;; *************** function _setDepth *****************
 14436 ;; Defined at:
 14437 ;;		line 43 in file "knobs.c"
 14438 ;; Parameters:    Size  Location     Type
 14439 ;;  rawValue        2    2[BANK1 ] int 
 14440 ;; Auto vars:     Size  Location     Type
 14441 ;;		None
 14442 ;; Return value:  Size  Location     Type
 14443 ;;                  1    wreg      void 
 14444 ;; Registers used:
 14445 ;;		wreg, status,2, status,0, pclath, cstack
 14446 ;; Tracked objects:
 14447 ;;		On entry : 0/0
 14448 ;;		On exit  : 0/0
 14449 ;;		Unchanged: 0/0
 14450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14451 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14454 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14455 ;;Total ram usage:        2 bytes
 14456 ;; Hardware stack levels used:    1
 14457 ;; Hardware stack levels required when called:    6
 14458 ;; This function calls:
 14459 ;;		_updateDepth
 14460 ;; This function is called by:
 14461 ;;		_main
 14462 ;; This function uses a non-reentrant model
 14463 ;;
 14464                           
 14465                           
 14466                           ;psect for function _setDepth
 14467  307C                     _setDepth:	
 14468                           
 14469                           ;knobs.c: 46: if (isInitialized == 1) {updateDepth(rawValue);}
 14470                           
 14471                           ;incstack = 0
 14472                           ; Regs used in _setDepth: [wreg+status,2+status,0+pclath+cstack]
 14473  307C  0020               	movlb	0	; select bank0
 14474  307D  0362               	decf	_isInitialized,w
 14475  307E  1D03               	btfss	3,2
 14476  307F  0008               	return
 14477  3080  0021               	movlb	1	; select bank1
 14478  3081  0823               	movf	(setDepth@rawValue+1)^(0+128),w
 14479  3082  00A1               	movwf	(updateDepth@currentValue+1)^(0+128)
 14480  3083  0822               	movf	setDepth@rawValue^(0+128),w
 14481  3084  00A0               	movwf	updateDepth@currentValue^(0+128)
 14482  3085  31BF  27DB         	fcall	_updateDepth
 14483  3087  0008               	return
 14484  3088                     __end_of_setDepth:	
 14485                           
 14486                           	psect	text40
 14487  3FDB                     __ptext40:	
 14488 ;; *************** function _updateDepth *****************
 14489 ;; Defined at:
 14490 ;;		line 294 in file "state_manager.c"
 14491 ;; Parameters:    Size  Location     Type
 14492 ;;  currentValue    2    0[BANK1 ] int 
 14493 ;; Auto vars:     Size  Location     Type
 14494 ;;		None
 14495 ;; Return value:  Size  Location     Type
 14496 ;;                  1    wreg      void 
 14497 ;; Registers used:
 14498 ;;		wreg
 14499 ;; Tracked objects:
 14500 ;;		On entry : 0/0
 14501 ;;		On exit  : 0/0
 14502 ;;		Unchanged: 0/0
 14503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14504 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14507 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14508 ;;Total ram usage:        2 bytes
 14509 ;; Hardware stack levels used:    1
 14510 ;; Hardware stack levels required when called:    5
 14511 ;; This function calls:
 14512 ;;		Nothing
 14513 ;; This function is called by:
 14514 ;;		_setDepth
 14515 ;; This function uses a non-reentrant model
 14516 ;;
 14517                           
 14518                           
 14519                           ;psect for function _updateDepth
 14520  3FDB                     _updateDepth:	
 14521                           
 14522                           ;state_manager.c: 295: pedalState.depth = currentValue;
 14523                           
 14524                           ;incstack = 0
 14525                           ; Regs used in _updateDepth: [wreg]
 14526  3FDB  0021               	movlb	1	; select bank1
 14527  3FDC  0821               	movf	(updateDepth@currentValue+1)^(0+128),w
 14528  3FDD  0025               	movlb	5	; select bank5
 14529  3FDE  00C1               	movwf	((_pedalState+1)^(0+640)+12)
 14530  3FDF  0021               	movlb	1	; select bank1
 14531  3FE0  0820               	movf	updateDepth@currentValue^(0+128),w
 14532  3FE1  0025               	movlb	5	; select bank5
 14533  3FE2  00C0               	movwf	(_pedalState^(0+640)+12)
 14534  3FE3  0008               	return
 14535  3FE4                     __end_of_updateDepth:	
 14536                           
 14537                           	psect	text41
 14538  2000                     __ptext41:	
 14539 ;; *************** function _read_top_tactile *****************
 14540 ;; Defined at:
 14541 ;;		line 71 in file "tactiles.c"
 14542 ;; Parameters:    Size  Location     Type
 14543 ;;		None
 14544 ;; Auto vars:     Size  Location     Type
 14545 ;;		None
 14546 ;; Return value:  Size  Location     Type
 14547 ;;                  1    wreg      void 
 14548 ;; Registers used:
 14549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14550 ;; Tracked objects:
 14551 ;;		On entry : 0/0
 14552 ;;		On exit  : 0/0
 14553 ;;		Unchanged: 0/0
 14554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14557 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14558 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14559 ;;Total ram usage:        1 bytes
 14560 ;; Hardware stack levels used:    1
 14561 ;; Hardware stack levels required when called:    7
 14562 ;; This function calls:
 14563 ;;		_set_leds_top
 14564 ;;		_updateSubdivisionState
 14565 ;;		_wait_ms
 14566 ;; This function is called by:
 14567 ;;		_main
 14568 ;; This function uses a non-reentrant model
 14569 ;;
 14570                           
 14571                           
 14572                           ;psect for function _read_top_tactile
 14573  2000                     _read_top_tactile:	
 14574                           
 14575                           ;tactiles.c: 81: if (PORTDbits.RD5 == 0) {
 14576                           
 14577                           ;incstack = 0
 14578                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14579  2000  0020               	movlb	0	; select bank0
 14580  2001  1A8F               	btfsc	15,5	;volatile
 14581  2002  280A               	goto	l8247
 14582                           
 14583                           ;tactiles.c: 82: if (topTactile_pressed > 0) {
 14584  2003  0024               	movlb	4	; select bank4
 14585  2004  0857               	movf	_topTactile_pressed^(0+512),w
 14586  2005  1903               	btfsc	3,2
 14587  2006  2815               	goto	l1134
 14588                           
 14589                           ;tactiles.c: 83: topTactile_pressed--;
 14590  2007  3001               	movlw	1
 14591  2008  02D7               	subwf	_topTactile_pressed^(0+512),f
 14592                           
 14593                           ;tactiles.c: 84: }
 14594                           ;tactiles.c: 85: } else if (topTactile_pressed < 25*3) {
 14595  2009  2815               	goto	l1134
 14596  200A                     l8247:	
 14597  200A  304B               	movlw	75
 14598  200B  0024               	movlb	4	; select bank4
 14599  200C  0257               	subwf	_topTactile_pressed^(0+512),w
 14600  200D  1803               	skipnc
 14601  200E  2815               	goto	l1134
 14602                           
 14603                           ;tactiles.c: 86: topTactile_pressed++;
 14604  200F  3001               	movlw	1
 14605  2010  0021               	movlb	1	; select bank1
 14606  2011  00B2               	movwf	??_read_top_tactile^(0+128)
 14607  2012  0832               	movf	??_read_top_tactile^(0+128),w
 14608  2013  0024               	movlb	4	; select bank4
 14609  2014  07D7               	addwf	_topTactile_pressed^(0+512),f
 14610  2015                     l1134:	
 14611                           
 14612                           ;tactiles.c: 87: }
 14613                           ;tactiles.c: 92: if (topTactile_pressed == 0) {
 14614  2015  0857               	movf	_topTactile_pressed^(0+512),w
 14615  2016  1D03               	btfss	3,2
 14616  2017  0008               	return
 14617                           
 14618                           ;tactiles.c: 94: top_push_state = top_push_state + 1;
 14619  2018  0020               	movlb	0	; select bank0
 14620  2019  086C               	movf	_top_push_state,w
 14621  201A  3E01               	addlw	1
 14622  201B  00EC               	movwf	_top_push_state
 14623  201C  3000               	movlw	0
 14624  201D  3D6D               	addwfc	_top_push_state+1,w
 14625  201E  00ED               	movwf	_top_push_state+1
 14626                           
 14627                           ;tactiles.c: 95: if (top_push_state >= 7) {
 14628  201F  086D               	movf	_top_push_state+1,w
 14629  2020  3A80               	xorlw	128
 14630  2021  0021               	movlb	1	; select bank1
 14631  2022  00B2               	movwf	??_read_top_tactile^(0+128)
 14632  2023  3080               	movlw	128
 14633  2024  0232               	subwf	??_read_top_tactile^(0+128),w
 14634  2025  1D03               	skipz
 14635  2026  282A               	goto	u8255
 14636  2027  3007               	movlw	7
 14637  2028  0020               	movlb	0	; select bank0
 14638  2029  026C               	subwf	_top_push_state,w
 14639  202A                     u8255:	
 14640  202A  1C03               	skipc
 14641  202B  2831               	goto	l8257
 14642                           
 14643                           ;tactiles.c: 96: top_push_state = 1;
 14644  202C  3001               	movlw	1
 14645  202D  0020               	movlb	0	; select bank0
 14646  202E  00EC               	movwf	_top_push_state
 14647  202F  3000               	movlw	0
 14648  2030  00ED               	movwf	_top_push_state+1
 14649  2031                     l8257:	
 14650                           
 14651                           ;tactiles.c: 97: }
 14652                           ;tactiles.c: 98: updateSubdivisionState();
 14653  2031  31BF  27B8  31A0   	fcall	_updateSubdivisionState
 14654                           
 14655                           ;tactiles.c: 99: set_leds_top(top_push_state, 1);
 14656  2034  0020               	movlb	0	; select bank0
 14657  2035  086D               	movf	_top_push_state+1,w
 14658  2036  0021               	movlb	1	; select bank1
 14659  2037  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 14660  2038  0020               	movlb	0	; select bank0
 14661  2039  086C               	movf	_top_push_state,w
 14662  203A  0021               	movlb	1	; select bank1
 14663  203B  00A0               	movwf	set_leds_top@x^(0+128)
 14664  203C  3001               	movlw	1
 14665  203D  00A2               	movwf	set_leds_top@ledState^(0+128)
 14666  203E  3000               	movlw	0
 14667  203F  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 14668  2040  31AC  2440  31A0   	fcall	_set_leds_top
 14669                           
 14670                           ;tactiles.c: 100: mod_time_changed = 1;
 14671  2043  0024               	movlb	4	; select bank4
 14672  2044  01EC               	clrf	_mod_time_changed^(0+512)
 14673  2045  0AEC               	incf	_mod_time_changed^(0+512),f
 14674  2046                     l1138:	
 14675                           ;tactiles.c: 103: while (PORTDbits.RD5 == 0) {
 14676                           
 14677  2046  0020               	movlb	0	; select bank0
 14678  2047  1E8F               	btfss	15,5	;volatile
 14679  2048  2846               	goto	l1138
 14680                           
 14681                           ;tactiles.c: 104: }
 14682                           ;tactiles.c: 105: wait_ms(20);
 14683  2049  3014               	movlw	20
 14684  204A  0021               	movlb	1	; select bank1
 14685  204B  00AC               	movwf	wait_ms@timeSec^(0+128)
 14686  204C  3000               	movlw	0
 14687  204D  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14688  204E  31B5  2545         	fcall	_wait_ms
 14689  2050  0008               	return
 14690  2051                     __end_of_read_top_tactile:	
 14691                           
 14692                           	psect	text42
 14693  3FB8                     __ptext42:	
 14694 ;; *************** function _updateSubdivisionState *****************
 14695 ;; Defined at:
 14696 ;;		line 327 in file "state_manager.c"
 14697 ;; Parameters:    Size  Location     Type
 14698 ;;		None
 14699 ;; Auto vars:     Size  Location     Type
 14700 ;;		None
 14701 ;; Return value:  Size  Location     Type
 14702 ;;                  1    wreg      void 
 14703 ;; Registers used:
 14704 ;;		wreg
 14705 ;; Tracked objects:
 14706 ;;		On entry : 0/0
 14707 ;;		On exit  : 0/0
 14708 ;;		Unchanged: 0/0
 14709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14712 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14713 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14714 ;;Total ram usage:        1 bytes
 14715 ;; Hardware stack levels used:    1
 14716 ;; Hardware stack levels required when called:    5
 14717 ;; This function calls:
 14718 ;;		Nothing
 14719 ;; This function is called by:
 14720 ;;		_main
 14721 ;;		_read_top_tactile
 14722 ;; This function uses a non-reentrant model
 14723 ;;
 14724                           
 14725                           
 14726                           ;psect for function _updateSubdivisionState
 14727  3FB8                     _updateSubdivisionState:	
 14728                           
 14729                           ;state_manager.c: 328: pedalState.subdivision = top_push_state;
 14730                           
 14731                           ;incstack = 0
 14732                           ; Regs used in _updateSubdivisionState: [wreg]
 14733  3FB8  0020               	movlb	0	; select bank0
 14734  3FB9  086C               	movf	_top_push_state,w
 14735  3FBA  0021               	movlb	1	; select bank1
 14736  3FBB  00A0               	movwf	??_updateSubdivisionState^(0+128)
 14737  3FBC  0820               	movf	??_updateSubdivisionState^(0+128),w
 14738  3FBD  0025               	movlb	5	; select bank5
 14739  3FBE  00B8               	movwf	(_pedalState^(0+640)+4)
 14740  3FBF  0008               	return
 14741  3FC0                     __end_of_updateSubdivisionState:	
 14742                           
 14743                           	psect	text43
 14744  2A60                     __ptext43:	
 14745 ;; *************** function _read_bottom_tactile *****************
 14746 ;; Defined at:
 14747 ;;		line 29 in file "tactiles.c"
 14748 ;; Parameters:    Size  Location     Type
 14749 ;;		None
 14750 ;; Auto vars:     Size  Location     Type
 14751 ;;		None
 14752 ;; Return value:  Size  Location     Type
 14753 ;;                  1    wreg      void 
 14754 ;; Registers used:
 14755 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14756 ;; Tracked objects:
 14757 ;;		On entry : 0/0
 14758 ;;		On exit  : 0/0
 14759 ;;		Unchanged: 0/0
 14760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14763 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14764 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14765 ;;Total ram usage:        1 bytes
 14766 ;; Hardware stack levels used:    1
 14767 ;; Hardware stack levels required when called:    7
 14768 ;; This function calls:
 14769 ;;		_set_leds_bottom
 14770 ;;		_updateWaveFormState
 14771 ;;		_wait_ms
 14772 ;; This function is called by:
 14773 ;;		_main
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           
 14778                           ;psect for function _read_bottom_tactile
 14779  2A60                     _read_bottom_tactile:	
 14780                           
 14781                           ;tactiles.c: 38: if (PORTDbits.RD6 == 0) {
 14782                           
 14783                           ;incstack = 0
 14784                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14785  2A60  0020               	movlb	0	; select bank0
 14786  2A61  1B0F               	btfsc	15,6	;volatile
 14787  2A62  2A6A               	goto	l8223
 14788                           
 14789                           ;tactiles.c: 39: if (bottomTactile_pressed > 0) {
 14790  2A63  0024               	movlb	4	; select bank4
 14791  2A64  0847               	movf	_bottomTactile_pressed^(0+512),w
 14792  2A65  1903               	btfsc	3,2
 14793  2A66  2A75               	goto	l1116
 14794                           
 14795                           ;tactiles.c: 40: bottomTactile_pressed--;
 14796  2A67  3001               	movlw	1
 14797  2A68  02C7               	subwf	_bottomTactile_pressed^(0+512),f
 14798                           
 14799                           ;tactiles.c: 41: }
 14800                           ;tactiles.c: 42: } else if (bottomTactile_pressed < 25*3) {
 14801  2A69  2A75               	goto	l1116
 14802  2A6A                     l8223:	
 14803  2A6A  304B               	movlw	75
 14804  2A6B  0024               	movlb	4	; select bank4
 14805  2A6C  0247               	subwf	_bottomTactile_pressed^(0+512),w
 14806  2A6D  1803               	skipnc
 14807  2A6E  2A75               	goto	l1116
 14808                           
 14809                           ;tactiles.c: 43: bottomTactile_pressed++;
 14810  2A6F  3001               	movlw	1
 14811  2A70  0021               	movlb	1	; select bank1
 14812  2A71  00B2               	movwf	??_read_bottom_tactile^(0+128)
 14813  2A72  0832               	movf	??_read_bottom_tactile^(0+128),w
 14814  2A73  0024               	movlb	4	; select bank4
 14815  2A74  07C7               	addwf	_bottomTactile_pressed^(0+512),f
 14816  2A75                     l1116:	
 14817                           
 14818                           ;tactiles.c: 44: }
 14819                           ;tactiles.c: 47: if (bottomTactile_pressed == 0) {
 14820  2A75  0847               	movf	_bottomTactile_pressed^(0+512),w
 14821  2A76  1D03               	btfss	3,2
 14822  2A77  0008               	return
 14823                           
 14824                           ;tactiles.c: 48: bottom_push_state = bottom_push_state + 1;
 14825  2A78  0023               	movlb	3	; select bank3
 14826  2A79  0862               	movf	_bottom_push_state^(0+384),w
 14827  2A7A  3E01               	addlw	1
 14828  2A7B  00E2               	movwf	_bottom_push_state^(0+384)
 14829  2A7C  3000               	movlw	0
 14830  2A7D  3D63               	addwfc	(_bottom_push_state+1)^(0+384),w
 14831  2A7E  00E3               	movwf	(_bottom_push_state+1)^(0+384)
 14832                           
 14833                           ;tactiles.c: 49: if (bottom_push_state > 5) {
 14834  2A7F  0863               	movf	(_bottom_push_state+1)^(0+384),w
 14835  2A80  3A80               	xorlw	128
 14836  2A81  0021               	movlb	1	; select bank1
 14837  2A82  00B2               	movwf	??_read_bottom_tactile^(0+128)
 14838  2A83  3080               	movlw	128
 14839  2A84  0232               	subwf	??_read_bottom_tactile^(0+128),w
 14840  2A85  1D03               	skipz
 14841  2A86  2A8A               	goto	u8195
 14842  2A87  3006               	movlw	6
 14843  2A88  0023               	movlb	3	; select bank3
 14844  2A89  0262               	subwf	_bottom_push_state^(0+384),w
 14845  2A8A                     u8195:	
 14846  2A8A  1C03               	skipc
 14847  2A8B  2A91               	goto	l8233
 14848                           
 14849                           ;tactiles.c: 50: bottom_push_state = 1;
 14850  2A8C  3001               	movlw	1
 14851  2A8D  0023               	movlb	3	; select bank3
 14852  2A8E  00E2               	movwf	_bottom_push_state^(0+384)
 14853  2A8F  3000               	movlw	0
 14854  2A90  00E3               	movwf	(_bottom_push_state^(0+384)+1)
 14855  2A91                     l8233:	
 14856                           
 14857                           ;tactiles.c: 51: }
 14858                           ;tactiles.c: 52: modulation_changed = 1;
 14859  2A91  0024               	movlb	4	; select bank4
 14860  2A92  01CE               	clrf	_modulation_changed^(0+512)
 14861  2A93  0ACE               	incf	_modulation_changed^(0+512),f
 14862                           
 14863                           ;tactiles.c: 53: set_leds_bottom(bottom_push_state);
 14864  2A94  0023               	movlb	3	; select bank3
 14865  2A95  0863               	movf	(_bottom_push_state+1)^(0+384),w
 14866  2A96  0021               	movlb	1	; select bank1
 14867  2A97  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 14868  2A98  0023               	movlb	3	; select bank3
 14869  2A99  0862               	movf	_bottom_push_state^(0+384),w
 14870  2A9A  0021               	movlb	1	; select bank1
 14871  2A9B  00A0               	movwf	set_leds_bottom@x^(0+128)
 14872  2A9C  31B6  2690  31AA   	fcall	_set_leds_bottom
 14873                           
 14874                           ;tactiles.c: 54: updateWaveFormState();
 14875  2A9F  31BF  27B0  31AA   	fcall	_updateWaveFormState
 14876  2AA2                     l1120:	
 14877                           ;tactiles.c: 56: while (PORTDbits.RD6 == 0) {
 14878                           
 14879  2AA2  0020               	movlb	0	; select bank0
 14880  2AA3  1F0F               	btfss	15,6	;volatile
 14881  2AA4  2AA2               	goto	l1120
 14882                           
 14883                           ;tactiles.c: 57: }
 14884                           ;tactiles.c: 58: wait_ms(20);
 14885  2AA5  3014               	movlw	20
 14886  2AA6  0021               	movlb	1	; select bank1
 14887  2AA7  00AC               	movwf	wait_ms@timeSec^(0+128)
 14888  2AA8  3000               	movlw	0
 14889  2AA9  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14890  2AAA  31B5  2545         	fcall	_wait_ms
 14891  2AAC  0008               	return
 14892  2AAD                     __end_of_read_bottom_tactile:	
 14893                           
 14894                           	psect	text44
 14895  3FB0                     __ptext44:	
 14896 ;; *************** function _updateWaveFormState *****************
 14897 ;; Defined at:
 14898 ;;		line 340 in file "state_manager.c"
 14899 ;; Parameters:    Size  Location     Type
 14900 ;;		None
 14901 ;; Auto vars:     Size  Location     Type
 14902 ;;		None
 14903 ;; Return value:  Size  Location     Type
 14904 ;;                  1    wreg      void 
 14905 ;; Registers used:
 14906 ;;		wreg
 14907 ;; Tracked objects:
 14908 ;;		On entry : 0/0
 14909 ;;		On exit  : 0/0
 14910 ;;		Unchanged: 0/0
 14911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14914 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14915 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14916 ;;Total ram usage:        1 bytes
 14917 ;; Hardware stack levels used:    1
 14918 ;; Hardware stack levels required when called:    5
 14919 ;; This function calls:
 14920 ;;		Nothing
 14921 ;; This function is called by:
 14922 ;;		_main
 14923 ;;		_read_bottom_tactile
 14924 ;; This function uses a non-reentrant model
 14925 ;;
 14926                           
 14927                           
 14928                           ;psect for function _updateWaveFormState
 14929  3FB0                     _updateWaveFormState:	
 14930                           
 14931                           ;state_manager.c: 341: pedalState.waveForm = bottom_push_state;
 14932                           
 14933                           ;incstack = 0
 14934                           ; Regs used in _updateWaveFormState: [wreg]
 14935  3FB0  0023               	movlb	3	; select bank3
 14936  3FB1  0862               	movf	_bottom_push_state^(0+384),w
 14937  3FB2  0021               	movlb	1	; select bank1
 14938  3FB3  00A0               	movwf	??_updateWaveFormState^(0+128)
 14939  3FB4  0820               	movf	??_updateWaveFormState^(0+128),w
 14940  3FB5  0025               	movlb	5	; select bank5
 14941  3FB6  00B9               	movwf	(_pedalState^(0+640)+5)
 14942  3FB7  0008               	return
 14943  3FB8                     __end_of_updateWaveFormState:	
 14944                           
 14945                           	psect	text45
 14946  3071                     __ptext45:	
 14947 ;; *************** function _initSwitchTap *****************
 14948 ;; Defined at:
 14949 ;;		line 29 in file "SwitchTap.c"
 14950 ;; Parameters:    Size  Location     Type
 14951 ;;		None
 14952 ;; Auto vars:     Size  Location     Type
 14953 ;;		None
 14954 ;; Return value:  Size  Location     Type
 14955 ;;                  1    wreg      void 
 14956 ;; Registers used:
 14957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14958 ;; Tracked objects:
 14959 ;;		On entry : 0/0
 14960 ;;		On exit  : 0/0
 14961 ;;		Unchanged: 0/0
 14962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14967 ;;Total ram usage:        0 bytes
 14968 ;; Hardware stack levels used:    1
 14969 ;; Hardware stack levels required when called:   11
 14970 ;; This function calls:
 14971 ;;		_getTapTime
 14972 ;; This function is called by:
 14973 ;;		_main
 14974 ;; This function uses a non-reentrant model
 14975 ;;
 14976                           
 14977                           
 14978                           ;psect for function _initSwitchTap
 14979  3071                     _initSwitchTap:	
 14980                           
 14981                           ;SwitchTap.c: 30: baseline_mod_time = getTapTime();
 14982                           
 14983                           ;incstack = 0
 14984                           ; Regs used in _initSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14985  3071  31B3  230E         	fcall	_getTapTime
 14986  3073  0022               	movlb	2	; select bank2
 14987  3074  0855               	movf	(?_getTapTime^(0+256)+1),w
 14988  3075  0020               	movlb	0	; select bank0
 14989  3076  00EB               	movwf	_baseline_mod_time+1	;volatile
 14990  3077  0022               	movlb	2	; select bank2
 14991  3078  0854               	movf	?_getTapTime^(0+256),w
 14992  3079  0020               	movlb	0	; select bank0
 14993  307A  00EA               	movwf	_baseline_mod_time	;volatile
 14994  307B  0008               	return
 14995  307C                     __end_of_initSwitchTap:	
 14996                           
 14997                           	psect	text46
 14998  330E                     __ptext46:	
 14999 ;; *************** function _getTapTime *****************
 15000 ;; Defined at:
 15001 ;;		line 313 in file "state_manager.c"
 15002 ;; Parameters:    Size  Location     Type
 15003 ;;		None
 15004 ;; Auto vars:     Size  Location     Type
 15005 ;;		None
 15006 ;; Return value:  Size  Location     Type
 15007 ;;                  4   52[BANK2 ] long 
 15008 ;; Registers used:
 15009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15010 ;; Tracked objects:
 15011 ;;		On entry : 0/0
 15012 ;;		On exit  : 0/0
 15013 ;;		Unchanged: 0/0
 15014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15015 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15018 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15019 ;;Total ram usage:        4 bytes
 15020 ;; Hardware stack levels used:    1
 15021 ;; Hardware stack levels required when called:   10
 15022 ;; This function calls:
 15023 ;;		_initStateManager
 15024 ;; This function is called by:
 15025 ;;		_initSwitchTap
 15026 ;; This function uses a non-reentrant model
 15027 ;;
 15028                           
 15029                           
 15030                           ;psect for function _getTapTime
 15031  330E                     _getTapTime:	
 15032                           
 15033                           ;state_manager.c: 314: if (isStateInitialized != 1) {
 15034                           
 15035                           ;incstack = 0
 15036                           ; Regs used in _getTapTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15037  330E  0020               	movlb	0	; select bank0
 15038  330F  035D               	decf	_isStateInitialized,w
 15039  3310  045E               	iorwf	_isStateInitialized+1,w
 15040  3311  1903               	btfsc	3,2
 15041  3312  2B16               	goto	l7531
 15042                           
 15043                           ;state_manager.c: 315: initStateManager();
 15044  3313  31BF  27A3  31B3   	fcall	_initStateManager
 15045  3316                     l7531:	
 15046                           
 15047                           ;state_manager.c: 316: }
 15048                           ;state_manager.c: 318: if (pedalState.baseTapTime < 1 || pedalState.baseTapTime > 3000) 
      +                          {
 15049  3316  0025               	movlb	5	; select bank5
 15050  3317  0835               	movf	(_pedalState^(0+640)+1),w
 15051  3318  0436               	iorwf	((_pedalState+1)^(0+640)+1),w
 15052  3319  1903               	btfsc	3,2
 15053  331A  2B22               	goto	l7535
 15054  331B  300B               	movlw	11
 15055  331C  0236               	subwf	((_pedalState+1)^(0+640)+1),w
 15056  331D  30B9               	movlw	185
 15057  331E  1903               	skipnz
 15058  331F  0235               	subwf	(_pedalState^(0+640)+1),w
 15059  3320  1C03               	skipc
 15060  3321  2B26               	goto	l1382
 15061  3322                     l7535:	
 15062                           
 15063                           ;state_manager.c: 319: pedalState.baseTapTime = 3000;
 15064  3322  30B8               	movlw	184
 15065  3323  00B5               	movwf	(_pedalState^(0+640)+1)
 15066  3324  300B               	movlw	11
 15067  3325  00B6               	movwf	(_pedalState^(0+640)+2)
 15068  3326                     l1382:	
 15069                           
 15070                           ;state_manager.c: 321: }
 15071                           ;state_manager.c: 323: return pedalState.baseTapTime;
 15072  3326  0835               	movf	(_pedalState^(0+640)+1),w
 15073  3327  0022               	movlb	2	; select bank2
 15074  3328  00D4               	movwf	?_getTapTime^(0+256)
 15075  3329  0025               	movlb	5	; select bank5
 15076  332A  0836               	movf	((_pedalState+1)^(0+640)+1),w
 15077  332B  0022               	movlb	2	; select bank2
 15078  332C  00D5               	movwf	(?_getTapTime^(0+256)+1)
 15079  332D  01D6               	clrf	(?_getTapTime^(0+256)+2)
 15080  332E  01D7               	clrf	(?_getTapTime^(0+256)+3)
 15081  332F  0008               	return
 15082  3330                     __end_of_getTapTime:	
 15083                           
 15084                           	psect	text47
 15085  3133                     __ptext47:	
 15086 ;; *************** function _initSwitchBypass *****************
 15087 ;; Defined at:
 15088 ;;		line 29 in file "SwitchBypass.c"
 15089 ;; Parameters:    Size  Location     Type
 15090 ;;		None
 15091 ;; Auto vars:     Size  Location     Type
 15092 ;;  initState       2   56[BANK2 ] int 
 15093 ;; Return value:  Size  Location     Type
 15094 ;;                  1    wreg      void 
 15095 ;; Registers used:
 15096 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15097 ;; Tracked objects:
 15098 ;;		On entry : 0/0
 15099 ;;		On exit  : 0/0
 15100 ;;		Unchanged: 0/0
 15101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15103 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15105 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15106 ;;Total ram usage:        2 bytes
 15107 ;; Hardware stack levels used:    1
 15108 ;; Hardware stack levels required when called:   11
 15109 ;; This function calls:
 15110 ;;		_getSwitchBypassState
 15111 ;;		_setSwitchBypassState
 15112 ;; This function is called by:
 15113 ;;		_main
 15114 ;; This function uses a non-reentrant model
 15115 ;;
 15116                           
 15117                           
 15118                           ;psect for function _initSwitchBypass
 15119  3133                     _initSwitchBypass:	
 15120                           
 15121                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 15122                           
 15123                           ;incstack = 0
 15124                           ; Regs used in _initSwitchBypass: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15125  3133  31B1  2110  31B1   	fcall	_getSwitchBypassState
 15126  3136  0022               	movlb	2	; select bank2
 15127  3137  0855               	movf	(?_getSwitchBypassState+1)^(0+256),w
 15128  3138  00D9               	movwf	(initSwitchBypass@initState+1)^(0+256)
 15129  3139  0854               	movf	?_getSwitchBypassState^(0+256),w
 15130  313A  00D8               	movwf	initSwitchBypass@initState^(0+256)
 15131                           
 15132                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 15133  313B  0859               	movf	(initSwitchBypass@initState+1)^(0+256),w
 15134  313C  0021               	movlb	1	; select bank1
 15135  313D  00B6               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 15136  313E  0022               	movlb	2	; select bank2
 15137  313F  0858               	movf	initSwitchBypass@initState^(0+256),w
 15138  3140  0021               	movlb	1	; select bank1
 15139  3141  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
 15140  3142  31B2  2254         	fcall	_setSwitchBypassState
 15141  3144  0008               	return
 15142  3145                     __end_of_initSwitchBypass:	
 15143                           
 15144                           	psect	text48
 15145  3254                     __ptext48:	
 15146 ;; *************** function _setSwitchBypassState *****************
 15147 ;; Defined at:
 15148 ;;		line 141 in file "SwitchBypass.c"
 15149 ;; Parameters:    Size  Location     Type
 15150 ;;  f_state         2   21[BANK1 ] int 
 15151 ;; Auto vars:     Size  Location     Type
 15152 ;;		None
 15153 ;; Return value:  Size  Location     Type
 15154 ;;                  1    wreg      void 
 15155 ;; Registers used:
 15156 ;;		wreg, status,2, status,0, pclath, cstack
 15157 ;; Tracked objects:
 15158 ;;		On entry : 0/0
 15159 ;;		On exit  : 0/0
 15160 ;;		Unchanged: 0/0
 15161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15162 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15164 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15165 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15166 ;;Total ram usage:        4 bytes
 15167 ;; Hardware stack levels used:    1
 15168 ;; Hardware stack levels required when called:    8
 15169 ;; This function calls:
 15170 ;;		_setSwitchBypassRelays
 15171 ;; This function is called by:
 15172 ;;		_main
 15173 ;;		_initSwitchBypass
 15174 ;;		_updateSwitchBypass
 15175 ;; This function uses a non-reentrant model
 15176 ;;
 15177                           
 15178                           
 15179                           ;psect for function _setSwitchBypassState
 15180  3254                     _setSwitchBypassState:	
 15181                           
 15182                           ;SwitchBypass.c: 142: if (switchBypass_state == f_state) {return;}
 15183                           
 15184                           ;incstack = 0
 15185                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 15186  3254  0023               	movlb	3	; select bank3
 15187  3255  086E               	movf	_switchBypass_state^(0+384),w
 15188  3256  0021               	movlb	1	; select bank1
 15189  3257  00B7               	movwf	??_setSwitchBypassState^(0+128)
 15190  3258  01B8               	clrf	(??_setSwitchBypassState^(0+128)+1)
 15191  3259  0836               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 15192  325A  0638               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 15193  325B  1D03               	skipz
 15194  325C  2A5F               	goto	u6755
 15195  325D  0835               	movf	setSwitchBypassState@f_state^(0+128),w
 15196  325E  0637               	xorwf	??_setSwitchBypassState^(0+128),w
 15197  325F                     u6755:	
 15198  325F  1903               	btfsc	3,2
 15199  3260  0008               	return
 15200                           
 15201                           ;SwitchBypass.c: 144: LATBbits.LATB2 = f_state;
 15202  3261  0C35               	rrf	setSwitchBypassState@f_state^(0+128),w
 15203  3262  0022               	movlb	2	; select bank2
 15204  3263  1C03               	skipc
 15205  3264  110D               	bcf	13,2	;volatile
 15206  3265  1803               	skipnc
 15207  3266  150D               	bsf	13,2	;volatile
 15208                           
 15209                           ;SwitchBypass.c: 145: LATBbits.LATB3 = 0;
 15210  3267  118D               	bcf	13,3	;volatile
 15211                           
 15212                           ;SwitchBypass.c: 146: setSwitchBypassRelays(f_state);
 15213  3268  0021               	movlb	1	; select bank1
 15214  3269  0836               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 15215  326A  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 15216  326B  0835               	movf	setSwitchBypassState@f_state^(0+128),w
 15217  326C  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 15218  326D  31B4  24B6         	fcall	_setSwitchBypassRelays
 15219  326F  0008               	return
 15220  3270                     __end_of_setSwitchBypassState:	
 15221                           
 15222                           	psect	text49
 15223  34B6                     __ptext49:	
 15224 ;; *************** function _setSwitchBypassRelays *****************
 15225 ;; Defined at:
 15226 ;;		line 149 in file "SwitchBypass.c"
 15227 ;; Parameters:    Size  Location     Type
 15228 ;;  f_state         2   18[BANK1 ] int 
 15229 ;; Auto vars:     Size  Location     Type
 15230 ;;		None
 15231 ;; Return value:  Size  Location     Type
 15232 ;;                  1    wreg      void 
 15233 ;; Registers used:
 15234 ;;		wreg, status,2, status,0, pclath, cstack
 15235 ;; Tracked objects:
 15236 ;;		On entry : 0/0
 15237 ;;		On exit  : 0/0
 15238 ;;		Unchanged: 0/0
 15239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15240 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15242 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15243 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15244 ;;Total ram usage:        3 bytes
 15245 ;; Hardware stack levels used:    1
 15246 ;; Hardware stack levels required when called:    7
 15247 ;; This function calls:
 15248 ;;		_updateSwitchBypassState
 15249 ;;		_wait_ms
 15250 ;; This function is called by:
 15251 ;;		_updateSwitchBypass
 15252 ;;		_setSwitchBypassState
 15253 ;; This function uses a non-reentrant model
 15254 ;;
 15255                           
 15256                           
 15257                           ;psect for function _setSwitchBypassRelays
 15258  34B6                     _setSwitchBypassRelays:	
 15259                           
 15260                           ;SwitchBypass.c: 150: switchBypass_state = f_state;
 15261                           
 15262                           ;incstack = 0
 15263                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 15264  34B6  0021               	movlb	1	; select bank1
 15265  34B7  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 15266  34B8  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 15267  34B9  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 15268  34BA  0023               	movlb	3	; select bank3
 15269  34BB  00EE               	movwf	_switchBypass_state^(0+384)
 15270                           
 15271                           ;SwitchBypass.c: 151: LATGbits.LATG2 = f_state;
 15272  34BC  0021               	movlb	1	; select bank1
 15273  34BD  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 15274  34BE  0027               	movlb	7	; select bank7
 15275  34BF  1C03               	skipc
 15276  34C0  110D               	bcf	13,2	;volatile
 15277  34C1  1803               	skipnc
 15278  34C2  150D               	bsf	13,2	;volatile
 15279                           
 15280                           ;SwitchBypass.c: 152: LATGbits.LATG1 = !f_state;
 15281  34C3  0021               	movlb	1	; select bank1
 15282  34C4  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 15283  34C5  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 15284  34C6  1D03               	btfss	3,2
 15285  34C7  2CCB               	goto	u6470
 15286  34C8  0027               	movlb	7	; select bank7
 15287  34C9  148D               	bsf	13,1	;volatile
 15288  34CA  2CCD               	goto	l7189
 15289  34CB                     u6470:	
 15290  34CB  0027               	movlb	7	; select bank7
 15291  34CC  108D               	bcf	13,1	;volatile
 15292  34CD                     l7189:	
 15293                           
 15294                           ;SwitchBypass.c: 154: wait_ms(20);
 15295  34CD  3014               	movlw	20
 15296  34CE  0021               	movlb	1	; select bank1
 15297  34CF  00AC               	movwf	wait_ms@timeSec^(0+128)
 15298  34D0  3000               	movlw	0
 15299  34D1  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 15300  34D2  31B5  2545  31B4   	fcall	_wait_ms
 15301                           
 15302                           ;SwitchBypass.c: 156: LATGbits.LATG2 = 0;
 15303  34D5  0027               	movlb	7	; select bank7
 15304  34D6  110D               	bcf	13,2	;volatile
 15305                           
 15306                           ;SwitchBypass.c: 157: LATGbits.LATG1 = 0;
 15307  34D7  108D               	bcf	13,1	;volatile
 15308                           
 15309                           ;SwitchBypass.c: 159: updateSwitchBypassState((char) switchBypass_state);
 15310  34D8  0023               	movlb	3	; select bank3
 15311  34D9  086E               	movf	_switchBypass_state^(0+384),w
 15312  34DA  31B0  2066  31B4   	fcall	_updateSwitchBypassState
 15313                           
 15314                           ;SwitchBypass.c: 160: wait_ms(20);
 15315  34DD  3014               	movlw	20
 15316  34DE  0021               	movlb	1	; select bank1
 15317  34DF  00AC               	movwf	wait_ms@timeSec^(0+128)
 15318  34E0  3000               	movlw	0
 15319  34E1  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 15320  34E2  31B5  2545         	fcall	_wait_ms
 15321  34E4  0008               	return
 15322  34E5                     __end_of_setSwitchBypassRelays:	
 15323                           
 15324                           	psect	text50
 15325  3545                     __ptext50:	
 15326 ;; *************** function _wait_ms *****************
 15327 ;; Defined at:
 15328 ;;		line 23 in file "system.c"
 15329 ;; Parameters:    Size  Location     Type
 15330 ;;  timeSec         2   12[BANK1 ] unsigned int 
 15331 ;; Auto vars:     Size  Location     Type
 15332 ;;  timemsl         4   14[BANK1 ] long 
 15333 ;; Return value:  Size  Location     Type
 15334 ;;                  1    wreg      void 
 15335 ;; Registers used:
 15336 ;;		wreg, status,2, status,0, pclath, cstack
 15337 ;; Tracked objects:
 15338 ;;		On entry : 0/0
 15339 ;;		On exit  : 0/0
 15340 ;;		Unchanged: 0/0
 15341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15342 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15343 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15345 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15346 ;;Total ram usage:        6 bytes
 15347 ;; Hardware stack levels used:    1
 15348 ;; Hardware stack levels required when called:    6
 15349 ;; This function calls:
 15350 ;;		___lmul
 15351 ;; This function is called by:
 15352 ;;		_ring_tactiles
 15353 ;;		_solidring_tactiles
 15354 ;;		_read_bottom_tactile
 15355 ;;		_read_top_tactile
 15356 ;;		_setSwitchBypassRelays
 15357 ;;		_setDoublePressState
 15358 ;;		_showError_Alternating
 15359 ;;		_show_error
 15360 ;;		_show_cancel
 15361 ;;		_star_tactiles
 15362 ;;		_initExpModeState
 15363 ;; This function uses a non-reentrant model
 15364 ;;
 15365                           
 15366                           
 15367                           ;psect for function _wait_ms
 15368  3545                     _wait_ms:	
 15369                           
 15370                           ;system.c: 25: long timemsl = 0;
 15371                           
 15372                           ;incstack = 0
 15373                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 15374  3545  3000               	movlw	0
 15375  3546  0021               	movlb	1	; select bank1
 15376  3547  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 15377  3548  3000               	movlw	0
 15378  3549  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 15379  354A  3000               	movlw	0
 15380  354B  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 15381  354C  3000               	movlw	0
 15382  354D  00AE               	movwf	wait_ms@timemsl^(0+128)
 15383                           
 15384                           ;system.c: 26: timemsl = timeSec * 1000l;
 15385  354E  082C               	movf	wait_ms@timeSec^(0+128),w
 15386  354F  00A0               	movwf	___lmul@multiplier^(0+128)
 15387  3550  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 15388  3551  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 15389  3552  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 15390  3553  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 15391  3554  3000               	movlw	0
 15392  3555  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 15393  3556  3000               	movlw	0
 15394  3557  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 15395  3558  3003               	movlw	3
 15396  3559  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 15397  355A  30E8               	movlw	232
 15398  355B  00A4               	movwf	___lmul@multiplicand^(0+128)
 15399  355C  31B5  2515  31B5   	fcall	___lmul
 15400  355F  0021               	movlb	1	; select bank1
 15401  3560  0823               	movf	(?___lmul+3)^(0+128),w
 15402  3561  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 15403  3562  0822               	movf	(?___lmul+2)^(0+128),w
 15404  3563  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 15405  3564  0821               	movf	(?___lmul+1)^(0+128),w
 15406  3565  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 15407  3566  0820               	movf	?___lmul^(0+128),w
 15408  3567  00AE               	movwf	wait_ms@timemsl^(0+128)
 15409  3568                     l509:	
 15410                           ;system.c: 27: for( ; timemsl; timemsl--);
 15411                           
 15412  3568  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 15413  3569  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 15414  356A  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 15415  356B  042E               	iorwf	wait_ms@timemsl^(0+128),w
 15416  356C  1903               	btfsc	3,2
 15417  356D  0008               	return
 15418  356E  30FF               	movlw	255
 15419  356F  07AE               	addwf	wait_ms@timemsl^(0+128),f
 15420  3570  30FF               	movlw	255
 15421  3571  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 15422  3572  30FF               	movlw	255
 15423  3573  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 15424  3574  30FF               	movlw	255
 15425  3575  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 15426  3576  2D68               	goto	l509
 15427  3577                     __end_of_wait_ms:	
 15428                           
 15429                           	psect	text51
 15430  3515                     __ptext51:	
 15431 ;; *************** function ___lmul *****************
 15432 ;; Defined at:
 15433 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 15434 ;; Parameters:    Size  Location     Type
 15435 ;;  multiplier      4    0[BANK1 ] unsigned long 
 15436 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 15437 ;; Auto vars:     Size  Location     Type
 15438 ;;  product         4    8[BANK1 ] unsigned long 
 15439 ;; Return value:  Size  Location     Type
 15440 ;;                  4    0[BANK1 ] unsigned long 
 15441 ;; Registers used:
 15442 ;;		wreg, status,2, status,0
 15443 ;; Tracked objects:
 15444 ;;		On entry : 0/0
 15445 ;;		On exit  : 0/0
 15446 ;;		Unchanged: 0/0
 15447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15448 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15449 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15451 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15452 ;;Total ram usage:       12 bytes
 15453 ;; Hardware stack levels used:    1
 15454 ;; Hardware stack levels required when called:    5
 15455 ;; This function calls:
 15456 ;;		Nothing
 15457 ;; This function is called by:
 15458 ;;		_wait_ms
 15459 ;; This function uses a non-reentrant model
 15460 ;;
 15461                           
 15462                           
 15463                           ;psect for function ___lmul
 15464  3515                     ___lmul:	
 15465                           
 15466                           ;incstack = 0
 15467                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 15468  3515  3000               	movlw	0
 15469  3516  0021               	movlb	1	; select bank1
 15470  3517  00AB               	movwf	(___lmul@product+3)^(0+128)
 15471  3518  3000               	movlw	0
 15472  3519  00AA               	movwf	(___lmul@product+2)^(0+128)
 15473  351A  3000               	movlw	0
 15474  351B  00A9               	movwf	(___lmul@product+1)^(0+128)
 15475  351C  3000               	movlw	0
 15476  351D  00A8               	movwf	___lmul@product^(0+128)
 15477  351E                     l6295:	
 15478  351E  1C20               	btfss	___lmul@multiplier^(0+128),0
 15479  351F  2D28               	goto	l6299
 15480  3520  0824               	movf	___lmul@multiplicand^(0+128),w
 15481  3521  07A8               	addwf	___lmul@product^(0+128),f
 15482  3522  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 15483  3523  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 15484  3524  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 15485  3525  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 15486  3526  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 15487  3527  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 15488  3528                     l6299:	
 15489  3528  3001               	movlw	1
 15490  3529                     u5075:	
 15491  3529  35A4               	lslf	___lmul@multiplicand^(0+128),f
 15492  352A  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 15493  352B  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 15494  352C  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 15495  352D  0B89               	decfsz	9,f
 15496  352E  2D29               	goto	u5075
 15497  352F  3001               	movlw	1
 15498  3530                     u5085:	
 15499  3530  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 15500  3531  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 15501  3532  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 15502  3533  0CA0               	rrf	___lmul@multiplier^(0+128),f
 15503  3534  0B89               	decfsz	9,f
 15504  3535  2D30               	goto	u5085
 15505  3536  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 15506  3537  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 15507  3538  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 15508  3539  0420               	iorwf	___lmul@multiplier^(0+128),w
 15509  353A  1D03               	skipz
 15510  353B  2D1E               	goto	l6295
 15511  353C  082B               	movf	(___lmul@product+3)^(0+128),w
 15512  353D  00A3               	movwf	(?___lmul+3)^(0+128)
 15513  353E  082A               	movf	(___lmul@product+2)^(0+128),w
 15514  353F  00A2               	movwf	(?___lmul+2)^(0+128)
 15515  3540  0829               	movf	(___lmul@product+1)^(0+128),w
 15516  3541  00A1               	movwf	(?___lmul+1)^(0+128)
 15517  3542  0828               	movf	___lmul@product^(0+128),w
 15518  3543  00A0               	movwf	?___lmul^(0+128)
 15519  3544  0008               	return
 15520  3545                     __end_of___lmul:	
 15521                           
 15522                           	psect	text52
 15523  3066                     __ptext52:	
 15524 ;; *************** function _updateSwitchBypassState *****************
 15525 ;; Defined at:
 15526 ;;		line 225 in file "state_manager.c"
 15527 ;; Parameters:    Size  Location     Type
 15528 ;;  state           1    wreg     unsigned char 
 15529 ;; Auto vars:     Size  Location     Type
 15530 ;;  state           1    1[BANK1 ] unsigned char 
 15531 ;; Return value:  Size  Location     Type
 15532 ;;                  1    wreg      void 
 15533 ;; Registers used:
 15534 ;;		wreg, status,2, status,0
 15535 ;; Tracked objects:
 15536 ;;		On entry : 0/0
 15537 ;;		On exit  : 0/0
 15538 ;;		Unchanged: 0/0
 15539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15541 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15542 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15543 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15544 ;;Total ram usage:        2 bytes
 15545 ;; Hardware stack levels used:    1
 15546 ;; Hardware stack levels required when called:    5
 15547 ;; This function calls:
 15548 ;;		Nothing
 15549 ;; This function is called by:
 15550 ;;		_setSwitchBypassRelays
 15551 ;; This function uses a non-reentrant model
 15552 ;;
 15553                           
 15554                           
 15555                           ;psect for function _updateSwitchBypassState
 15556  3066                     _updateSwitchBypassState:	
 15557                           
 15558                           ;incstack = 0
 15559                           ; Regs used in _updateSwitchBypassState: [wreg+status,2+status,0]
 15560                           ;updateSwitchBypassState@state stored from wreg
 15561  3066  0021               	movlb	1	; select bank1
 15562  3067  00A1               	movwf	updateSwitchBypassState@state^(0+128)
 15563                           
 15564                           ;state_manager.c: 226: if (state != 1) {state = 0;}
 15565  3068  0321               	decf	updateSwitchBypassState@state^(0+128),w
 15566  3069  1D03               	btfss	3,2
 15567  306A  01A1               	clrf	updateSwitchBypassState@state^(0+128)
 15568                           
 15569                           ;state_manager.c: 228: pedalState.bypass = state;
 15570  306B  0821               	movf	updateSwitchBypassState@state^(0+128),w
 15571  306C  00A0               	movwf	??_updateSwitchBypassState^(0+128)
 15572  306D  0820               	movf	??_updateSwitchBypassState^(0+128),w
 15573  306E  0025               	movlb	5	; select bank5
 15574  306F  00B7               	movwf	(_pedalState^(0+640)+3)
 15575  3070  0008               	return
 15576  3071                     __end_of_updateSwitchBypassState:	
 15577                           
 15578                           	psect	text53
 15579  3110                     __ptext53:	
 15580 ;; *************** function _getSwitchBypassState *****************
 15581 ;; Defined at:
 15582 ;;		line 232 in file "state_manager.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;		None
 15585 ;; Auto vars:     Size  Location     Type
 15586 ;;		None
 15587 ;; Return value:  Size  Location     Type
 15588 ;;                  2   52[BANK2 ] int 
 15589 ;; Registers used:
 15590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15591 ;; Tracked objects:
 15592 ;;		On entry : 0/0
 15593 ;;		On exit  : 0/0
 15594 ;;		Unchanged: 0/0
 15595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15596 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15598 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15599 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15600 ;;Total ram usage:        4 bytes
 15601 ;; Hardware stack levels used:    1
 15602 ;; Hardware stack levels required when called:   10
 15603 ;; This function calls:
 15604 ;;		_initStateManager
 15605 ;; This function is called by:
 15606 ;;		_initSwitchBypass
 15607 ;; This function uses a non-reentrant model
 15608 ;;
 15609                           
 15610                           
 15611                           ;psect for function _getSwitchBypassState
 15612  3110                     _getSwitchBypassState:	
 15613                           
 15614                           ;state_manager.c: 233: if (isStateInitialized != 1) {
 15615                           
 15616                           ;incstack = 0
 15617                           ; Regs used in _getSwitchBypassState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15618  3110  0020               	movlb	0	; select bank0
 15619  3111  035D               	decf	_isStateInitialized,w
 15620  3112  045E               	iorwf	_isStateInitialized+1,w
 15621  3113  1903               	btfsc	3,2
 15622  3114  2917               	goto	l7517
 15623                           
 15624                           ;state_manager.c: 234: initStateManager();
 15625  3115  31BF  27A3         	fcall	_initStateManager
 15626  3117                     l7517:	
 15627                           
 15628                           ;state_manager.c: 235: }
 15629                           ;state_manager.c: 236: return pedalState.bypass;
 15630  3117  0025               	movlb	5	; select bank5
 15631  3118  0837               	movf	(_pedalState^(0+640)+3),w
 15632  3119  0022               	movlb	2	; select bank2
 15633  311A  00D6               	movwf	??_getSwitchBypassState^(0+256)
 15634  311B  01D7               	clrf	(??_getSwitchBypassState^(0+256)+1)
 15635  311C  0856               	movf	??_getSwitchBypassState^(0+256),w
 15636  311D  00D4               	movwf	?_getSwitchBypassState^(0+256)
 15637  311E  0857               	movf	(??_getSwitchBypassState+1)^(0+256),w
 15638  311F  00D5               	movwf	(?_getSwitchBypassState+1)^(0+256)
 15639  3120  0008               	return
 15640  3121                     __end_of_getSwitchBypassState:	
 15641                           
 15642                           	psect	text54
 15643  1800                     __ptext54:	
 15644 ;; *************** function _getVolume *****************
 15645 ;; Defined at:
 15646 ;;		line 259 in file "state_manager.c"
 15647 ;; Parameters:    Size  Location     Type
 15648 ;;		None
 15649 ;; Auto vars:     Size  Location     Type
 15650 ;;		None
 15651 ;; Return value:  Size  Location     Type
 15652 ;;                  2   52[BANK2 ] int 
 15653 ;; Registers used:
 15654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15655 ;; Tracked objects:
 15656 ;;		On entry : 0/0
 15657 ;;		On exit  : 0/0
 15658 ;;		Unchanged: 0/0
 15659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15660 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15663 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15664 ;;Total ram usage:        2 bytes
 15665 ;; Hardware stack levels used:    1
 15666 ;; Hardware stack levels required when called:   10
 15667 ;; This function calls:
 15668 ;;		_initStateManager
 15669 ;; This function is called by:
 15670 ;;		_main
 15671 ;; This function uses a non-reentrant model
 15672 ;;
 15673                           
 15674                           
 15675                           ;psect for function _getVolume
 15676  1800                     _getVolume:	
 15677                           
 15678                           ;state_manager.c: 260: if (isStateInitialized != 1) {
 15679                           
 15680                           ;incstack = 0
 15681                           ; Regs used in _getVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15682  1800  0020               	movlb	0	; select bank0
 15683  1801  035D               	decf	_isStateInitialized,w
 15684  1802  045E               	iorwf	_isStateInitialized+1,w
 15685  1803  1903               	btfsc	3,2
 15686  1804  2807               	goto	l7867
 15687                           
 15688                           ;state_manager.c: 261: initStateManager();
 15689  1805  31BF  27A3         	fcall	_initStateManager
 15690  1807                     l7867:	
 15691                           
 15692                           ;state_manager.c: 262: }
 15693                           ;state_manager.c: 263: return pedalState.volume;
 15694  1807  0025               	movlb	5	; select bank5
 15695  1808  083B               	movf	((_pedalState+1)^(0+640)+6),w
 15696  1809  0022               	movlb	2	; select bank2
 15697  180A  00D5               	movwf	(?_getVolume+1)^(0+256)
 15698  180B  0025               	movlb	5	; select bank5
 15699  180C  083A               	movf	(_pedalState^(0+640)+6),w
 15700  180D  0022               	movlb	2	; select bank2
 15701  180E  00D4               	movwf	?_getVolume^(0+256)
 15702  180F  0008               	return
 15703  1810                     __end_of_getVolume:	
 15704                           
 15705                           	psect	text55
 15706  30CD                     __ptext55:	
 15707 ;; *************** function _getSymmetry *****************
 15708 ;; Defined at:
 15709 ;;		line 285 in file "state_manager.c"
 15710 ;; Parameters:    Size  Location     Type
 15711 ;;		None
 15712 ;; Auto vars:     Size  Location     Type
 15713 ;;		None
 15714 ;; Return value:  Size  Location     Type
 15715 ;;                  2   52[BANK2 ] int 
 15716 ;; Registers used:
 15717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15718 ;; Tracked objects:
 15719 ;;		On entry : 0/0
 15720 ;;		On exit  : 0/0
 15721 ;;		Unchanged: 0/0
 15722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15723 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15726 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15727 ;;Total ram usage:        2 bytes
 15728 ;; Hardware stack levels used:    1
 15729 ;; Hardware stack levels required when called:   10
 15730 ;; This function calls:
 15731 ;;		_initStateManager
 15732 ;; This function is called by:
 15733 ;;		_main
 15734 ;; This function uses a non-reentrant model
 15735 ;;
 15736                           
 15737                           
 15738                           ;psect for function _getSymmetry
 15739  30CD                     _getSymmetry:	
 15740                           
 15741                           ;state_manager.c: 286: if (isStateInitialized != 1) {
 15742                           
 15743                           ;incstack = 0
 15744                           ; Regs used in _getSymmetry: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15745  30CD  0020               	movlb	0	; select bank0
 15746  30CE  035D               	decf	_isStateInitialized,w
 15747  30CF  045E               	iorwf	_isStateInitialized+1,w
 15748  30D0  1903               	btfsc	3,2
 15749  30D1  28D4               	goto	l7883
 15750                           
 15751                           ;state_manager.c: 287: initStateManager();
 15752  30D2  31BF  27A3         	fcall	_initStateManager
 15753  30D4                     l7883:	
 15754                           
 15755                           ;state_manager.c: 288: }
 15756                           ;state_manager.c: 290: return pedalState.symmetry;
 15757  30D4  0025               	movlb	5	; select bank5
 15758  30D5  083F               	movf	((_pedalState+1)^(0+640)+10),w
 15759  30D6  0022               	movlb	2	; select bank2
 15760  30D7  00D5               	movwf	(?_getSymmetry+1)^(0+256)
 15761  30D8  0025               	movlb	5	; select bank5
 15762  30D9  083E               	movf	(_pedalState^(0+640)+10),w
 15763  30DA  0022               	movlb	2	; select bank2
 15764  30DB  00D4               	movwf	?_getSymmetry^(0+256)
 15765  30DC  0008               	return
 15766  30DD                     __end_of_getSymmetry:	
 15767                           
 15768                           	psect	text56
 15769  2A15                     __ptext56:	
 15770 ;; *************** function _getModulationDelayTime *****************
 15771 ;; Defined at:
 15772 ;;		line 37 in file "modulation.c"
 15773 ;; Parameters:    Size  Location     Type
 15774 ;;		None
 15775 ;; Auto vars:     Size  Location     Type
 15776 ;;		None
 15777 ;; Return value:  Size  Location     Type
 15778 ;;                  1    wreg      void 
 15779 ;; Registers used:
 15780 ;;		wreg, status,2, status,0, pclath, cstack
 15781 ;; Tracked objects:
 15782 ;;		On entry : 0/0
 15783 ;;		On exit  : 0/0
 15784 ;;		Unchanged: 0/0
 15785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15790 ;;Total ram usage:        0 bytes
 15791 ;; Hardware stack levels used:    1
 15792 ;; Hardware stack levels required when called:    7
 15793 ;; This function calls:
 15794 ;;		___altoft
 15795 ;;		___awtoft
 15796 ;;		___ftdiv
 15797 ;;		___fttol
 15798 ;;		_getModulationSubdivision
 15799 ;; This function is called by:
 15800 ;;		_main
 15801 ;; This function uses a non-reentrant model
 15802 ;;
 15803                           
 15804                           
 15805                           ;psect for function _getModulationDelayTime
 15806  2A15                     _getModulationDelayTime:	
 15807                           
 15808                           ;modulation.c: 38: adjust_mod_delay = 0;
 15809                           
 15810                           ;incstack = 0
 15811                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 15812  2A15  0024               	movlb	4	; select bank4
 15813  2A16  01C6               	clrf	_adjust_mod_delay^(0+512)
 15814                           
 15815                           ;modulation.c: 39: getModulationSubdivision();
 15816  2A17  31B4  2487  31AA   	fcall	_getModulationSubdivision
 15817                           
 15818                           ;modulation.c: 40: mod_delay_time = (int)((float)delay_time/(float)modulationSubdivision
      +                          );
 15819  2A1A  0020               	movlb	0	; select bank0
 15820  2A1B  0869               	movf	_delay_time+3,w	;volatile
 15821  2A1C  0021               	movlb	1	; select bank1
 15822  2A1D  00AB               	movwf	(___altoft@c+3)^(0+128)
 15823  2A1E  0020               	movlb	0	; select bank0
 15824  2A1F  0868               	movf	_delay_time+2,w	;volatile
 15825  2A20  0021               	movlb	1	; select bank1
 15826  2A21  00AA               	movwf	(___altoft@c+2)^(0+128)
 15827  2A22  0020               	movlb	0	; select bank0
 15828  2A23  0867               	movf	_delay_time+1,w	;volatile
 15829  2A24  0021               	movlb	1	; select bank1
 15830  2A25  00A9               	movwf	(___altoft@c+1)^(0+128)
 15831  2A26  0020               	movlb	0	; select bank0
 15832  2A27  0866               	movf	_delay_time,w	;volatile
 15833  2A28  0021               	movlb	1	; select bank1
 15834  2A29  00A8               	movwf	___altoft@c^(0+128)
 15835  2A2A  31B7  2708  31AA   	fcall	___altoft
 15836  2A2D  0021               	movlb	1	; select bank1
 15837  2A2E  0828               	movf	?___altoft^(0+128),w
 15838  2A2F  00D1               	movwf	___ftdiv@f1^(0+128)
 15839  2A30  0829               	movf	(?___altoft+1)^(0+128),w
 15840  2A31  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15841  2A32  082A               	movf	(?___altoft+2)^(0+128),w
 15842  2A33  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15843  2A34  0024               	movlb	4	; select bank4
 15844  2A35  0843               	movf	(_modulationSubdivision+1)^(0+512),w
 15845  2A36  0021               	movlb	1	; select bank1
 15846  2A37  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15847  2A38  0024               	movlb	4	; select bank4
 15848  2A39  0842               	movf	_modulationSubdivision^(0+512),w
 15849  2A3A  0021               	movlb	1	; select bank1
 15850  2A3B  00A8               	movwf	___awtoft@c^(0+128)
 15851  2A3C  31B2  22EC  31AA   	fcall	___awtoft
 15852  2A3F  0021               	movlb	1	; select bank1
 15853  2A40  0828               	movf	?___awtoft^(0+128),w
 15854  2A41  00CE               	movwf	___ftdiv@f2^(0+128)
 15855  2A42  0829               	movf	(?___awtoft+1)^(0+128),w
 15856  2A43  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15857  2A44  082A               	movf	(?___awtoft+2)^(0+128),w
 15858  2A45  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15859  2A46  31A4  2434  31AA   	fcall	___ftdiv
 15860  2A49  0021               	movlb	1	; select bank1
 15861  2A4A  084E               	movf	?___ftdiv^(0+128),w
 15862  2A4B  0022               	movlb	2	; select bank2
 15863  2A4C  00A0               	movwf	___fttol@f1^(0+256)
 15864  2A4D  0021               	movlb	1	; select bank1
 15865  2A4E  084F               	movf	(?___ftdiv+1)^(0+128),w
 15866  2A4F  0022               	movlb	2	; select bank2
 15867  2A50  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15868  2A51  0021               	movlb	1	; select bank1
 15869  2A52  0850               	movf	(?___ftdiv+2)^(0+128),w
 15870  2A53  0022               	movlb	2	; select bank2
 15871  2A54  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15872  2A55  31A1  2158         	fcall	___fttol
 15873  2A57  0022               	movlb	2	; select bank2
 15874  2A58  0821               	movf	(?___fttol^(0+256)+1),w
 15875  2A59  0024               	movlb	4	; select bank4
 15876  2A5A  00E4               	movwf	(_mod_delay_time+1)^(0+512)
 15877  2A5B  0022               	movlb	2	; select bank2
 15878  2A5C  0820               	movf	?___fttol^(0+256),w
 15879  2A5D  0024               	movlb	4	; select bank4
 15880  2A5E  00E3               	movwf	_mod_delay_time^(0+512)
 15881  2A5F  0008               	return
 15882  2A60                     __end_of_getModulationDelayTime:	
 15883                           
 15884                           	psect	text57
 15885  3487                     __ptext57:	
 15886 ;; *************** function _getModulationSubdivision *****************
 15887 ;; Defined at:
 15888 ;;		line 27 in file "modulation.c"
 15889 ;; Parameters:    Size  Location     Type
 15890 ;;		None
 15891 ;; Auto vars:     Size  Location     Type
 15892 ;;		None
 15893 ;; Return value:  Size  Location     Type
 15894 ;;                  2    0[BANK1 ] int 
 15895 ;; Registers used:
 15896 ;;		wreg, status,2, status,0
 15897 ;; Tracked objects:
 15898 ;;		On entry : 0/0
 15899 ;;		On exit  : 0/0
 15900 ;;		Unchanged: 0/0
 15901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15902 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15905 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15906 ;;Total ram usage:        2 bytes
 15907 ;; Hardware stack levels used:    1
 15908 ;; Hardware stack levels required when called:    5
 15909 ;; This function calls:
 15910 ;;		Nothing
 15911 ;; This function is called by:
 15912 ;;		_getModulationDelayTime
 15913 ;;		_updateModulationArray
 15914 ;; This function uses a non-reentrant model
 15915 ;;
 15916                           
 15917                           
 15918                           ;psect for function _getModulationSubdivision
 15919  3487                     _getModulationSubdivision:	
 15920                           
 15921                           ;modulation.c: 28: if (delay_time >= 2400) {
 15922                           
 15923                           ;incstack = 0
 15924                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 15925  3487  0020               	movlb	0	; select bank0
 15926  3488  1BE9               	btfsc	_delay_time+3,7	;volatile
 15927  3489  2C98               	goto	l7345
 15928  348A  0869               	movf	_delay_time+3,w	;volatile
 15929  348B  1D03               	btfss	3,2
 15930  348C  2C96               	goto	l7343
 15931  348D  0868               	movf	_delay_time+2,w	;volatile
 15932  348E  1D03               	btfss	3,2
 15933  348F  2C96               	goto	l7343
 15934  3490  3060               	movlw	96
 15935  3491  0266               	subwf	_delay_time,w	;volatile
 15936  3492  3009               	movlw	9
 15937  3493  3B67               	subwfb	_delay_time+1,w	;volatile
 15938  3494  1C03               	btfss	3,0
 15939  3495  2C98               	goto	l7345
 15940  3496                     l7343:	
 15941                           
 15942                           ;modulation.c: 29: modulationSubdivision = 120;
 15943  3496  3078               	movlw	120
 15944  3497  2CAA               	goto	L16
 15945  3498                     l7345:	
 15946                           ;modulation.c: 30: } else if (delay_time >= 600) {
 15947                           
 15948  3498  0020               	movlb	0	; select bank0
 15949  3499  1BE9               	btfsc	_delay_time+3,7	;volatile
 15950  349A  2CA9               	goto	l7349
 15951  349B  0869               	movf	_delay_time+3,w	;volatile
 15952  349C  1D03               	btfss	3,2
 15953  349D  2CA7               	goto	l7347
 15954  349E  0868               	movf	_delay_time+2,w	;volatile
 15955  349F  1D03               	btfss	3,2
 15956  34A0  2CA7               	goto	l7347
 15957  34A1  3058               	movlw	88
 15958  34A2  0266               	subwf	_delay_time,w	;volatile
 15959  34A3  3002               	movlw	2
 15960  34A4  3B67               	subwfb	_delay_time+1,w	;volatile
 15961  34A5  1C03               	btfss	3,0
 15962  34A6  2CA9               	goto	l7349
 15963  34A7                     l7347:	
 15964                           
 15965                           ;modulation.c: 31: modulationSubdivision = 60;
 15966  34A7  303C               	movlw	60
 15967  34A8  2CAA               	goto	L16
 15968  34A9                     l7349:	
 15969                           ;modulation.c: 32: } else {
 15970                           
 15971                           
 15972                           ;modulation.c: 33: modulationSubdivision = 30;
 15973  34A9  301E               	movlw	30
 15974  34AA                     L16:	
 15975  34AA  0024               	movlb	4	; select bank4
 15976  34AB  00C2               	movwf	_modulationSubdivision^(0+512)
 15977  34AC  3000               	movlw	0
 15978  34AD  00C3               	movwf	(_modulationSubdivision^(0+512)+1)
 15979                           
 15980                           ;modulation.c: 34: }
 15981                           ;modulation.c: 35: return modulationSubdivision;
 15982  34AE  0843               	movf	(_modulationSubdivision+1)^(0+512),w
 15983  34AF  0021               	movlb	1	; select bank1
 15984  34B0  00A1               	movwf	(?_getModulationSubdivision+1)^(0+128)
 15985  34B1  0024               	movlb	4	; select bank4
 15986  34B2  0842               	movf	_modulationSubdivision^(0+512),w
 15987  34B3  0021               	movlb	1	; select bank1
 15988  34B4  00A0               	movwf	?_getModulationSubdivision^(0+128)
 15989  34B5  0008               	return
 15990  34B6                     __end_of_getModulationSubdivision:	
 15991                           
 15992                           	psect	text58
 15993  30BD                     __ptext58:	
 15994 ;; *************** function _getFrequency *****************
 15995 ;; Defined at:
 15996 ;;		line 273 in file "state_manager.c"
 15997 ;; Parameters:    Size  Location     Type
 15998 ;;		None
 15999 ;; Auto vars:     Size  Location     Type
 16000 ;;		None
 16001 ;; Return value:  Size  Location     Type
 16002 ;;                  2   52[BANK2 ] int 
 16003 ;; Registers used:
 16004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16005 ;; Tracked objects:
 16006 ;;		On entry : 0/0
 16007 ;;		On exit  : 0/0
 16008 ;;		Unchanged: 0/0
 16009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16010 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16013 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16014 ;;Total ram usage:        2 bytes
 16015 ;; Hardware stack levels used:    1
 16016 ;; Hardware stack levels required when called:   10
 16017 ;; This function calls:
 16018 ;;		_initStateManager
 16019 ;; This function is called by:
 16020 ;;		_main
 16021 ;; This function uses a non-reentrant model
 16022 ;;
 16023                           
 16024                           
 16025                           ;psect for function _getFrequency
 16026  30BD                     _getFrequency:	
 16027                           
 16028                           ;state_manager.c: 274: if (isStateInitialized != 1) {
 16029                           
 16030                           ;incstack = 0
 16031                           ; Regs used in _getFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16032  30BD  0020               	movlb	0	; select bank0
 16033  30BE  035D               	decf	_isStateInitialized,w
 16034  30BF  045E               	iorwf	_isStateInitialized+1,w
 16035  30C0  1903               	btfsc	3,2
 16036  30C1  28C4               	goto	l7875
 16037                           
 16038                           ;state_manager.c: 275: initStateManager();
 16039  30C2  31BF  27A3         	fcall	_initStateManager
 16040  30C4                     l7875:	
 16041                           
 16042                           ;state_manager.c: 276: }
 16043                           ;state_manager.c: 277: return pedalState.frequency;
 16044  30C4  0025               	movlb	5	; select bank5
 16045  30C5  083D               	movf	((_pedalState+1)^(0+640)+8),w
 16046  30C6  0022               	movlb	2	; select bank2
 16047  30C7  00D5               	movwf	(?_getFrequency+1)^(0+256)
 16048  30C8  0025               	movlb	5	; select bank5
 16049  30C9  083C               	movf	(_pedalState^(0+640)+8),w
 16050  30CA  0022               	movlb	2	; select bank2
 16051  30CB  00D4               	movwf	?_getFrequency^(0+256)
 16052  30CC  0008               	return
 16053  30CD                     __end_of_getFrequency:	
 16054                           
 16055                           	psect	text59
 16056  30AD                     __ptext59:	
 16057 ;; *************** function _getDepth *****************
 16058 ;; Defined at:
 16059 ;;		line 301 in file "state_manager.c"
 16060 ;; Parameters:    Size  Location     Type
 16061 ;;		None
 16062 ;; Auto vars:     Size  Location     Type
 16063 ;;		None
 16064 ;; Return value:  Size  Location     Type
 16065 ;;                  2   52[BANK2 ] int 
 16066 ;; Registers used:
 16067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16068 ;; Tracked objects:
 16069 ;;		On entry : 0/0
 16070 ;;		On exit  : 0/0
 16071 ;;		Unchanged: 0/0
 16072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16073 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16076 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16077 ;;Total ram usage:        2 bytes
 16078 ;; Hardware stack levels used:    1
 16079 ;; Hardware stack levels required when called:   10
 16080 ;; This function calls:
 16081 ;;		_initStateManager
 16082 ;; This function is called by:
 16083 ;;		_main
 16084 ;; This function uses a non-reentrant model
 16085 ;;
 16086                           
 16087                           
 16088                           ;psect for function _getDepth
 16089  30AD                     _getDepth:	
 16090                           
 16091                           ;state_manager.c: 302: if (isStateInitialized != 1) {
 16092                           
 16093                           ;incstack = 0
 16094                           ; Regs used in _getDepth: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16095  30AD  0020               	movlb	0	; select bank0
 16096  30AE  035D               	decf	_isStateInitialized,w
 16097  30AF  045E               	iorwf	_isStateInitialized+1,w
 16098  30B0  1903               	btfsc	3,2
 16099  30B1  28B4               	goto	l7891
 16100                           
 16101                           ;state_manager.c: 303: initStateManager();
 16102  30B2  31BF  27A3         	fcall	_initStateManager
 16103  30B4                     l7891:	
 16104                           
 16105                           ;state_manager.c: 304: }
 16106                           ;state_manager.c: 305: return pedalState.depth;
 16107  30B4  0025               	movlb	5	; select bank5
 16108  30B5  0841               	movf	((_pedalState+1)^(0+640)+12),w
 16109  30B6  0022               	movlb	2	; select bank2
 16110  30B7  00D5               	movwf	(?_getDepth+1)^(0+256)
 16111  30B8  0025               	movlb	5	; select bank5
 16112  30B9  0840               	movf	(_pedalState^(0+640)+12),w
 16113  30BA  0022               	movlb	2	; select bank2
 16114  30BB  00D4               	movwf	?_getDepth^(0+256)
 16115  30BC  0008               	return
 16116  30BD                     __end_of_getDepth:	
 16117                           
 16118                           	psect	text60
 16119  2EFD                     __ptext60:	
 16120 ;; *************** function _calcCosArray *****************
 16121 ;; Defined at:
 16122 ;;		line 18 in file "modulation.c"
 16123 ;; Parameters:    Size  Location     Type
 16124 ;;		None
 16125 ;; Auto vars:     Size  Location     Type
 16126 ;;  iAngle          1   57[BANK2 ] unsigned char 
 16127 ;;  tmpVal          3   54[BANK2 ] unsigned char 
 16128 ;; Return value:  Size  Location     Type
 16129 ;;                  1    wreg      void 
 16130 ;; Registers used:
 16131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16132 ;; Tracked objects:
 16133 ;;		On entry : 0/0
 16134 ;;		On exit  : 0/0
 16135 ;;		Unchanged: 0/0
 16136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16138 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16139 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16140 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16141 ;;Total ram usage:        8 bytes
 16142 ;; Hardware stack levels used:    1
 16143 ;; Hardware stack levels required when called:   10
 16144 ;; This function calls:
 16145 ;;		___awtoft
 16146 ;;		___ftdiv
 16147 ;;		___ftmul
 16148 ;;		___wmul
 16149 ;;		_cos
 16150 ;; This function is called by:
 16151 ;;		_main
 16152 ;; This function uses a non-reentrant model
 16153 ;;
 16154                           
 16155                           
 16156                           ;psect for function _calcCosArray
 16157  2EFD                     _calcCosArray:	
 16158                           
 16159                           ;modulation.c: 19: double tmpVal;
 16160                           ;modulation.c: 20: for (char iAngle = 0; iAngle < 120; iAngle++) {
 16161                           
 16162                           ;incstack = 0
 16163                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16164  2EFD  0022               	movlb	2	; select bank2
 16165  2EFE  01D9               	clrf	calcCosArray@iAngle^(0+256)
 16166  2EFF                     L17:	
 16167  2EFF  3078               	movlw	120
 16168  2F00  0259               	subwf	calcCosArray@iAngle^(0+256),w
 16169  2F01  1803               	btfsc	3,0
 16170  2F02  0008               	return
 16171                           
 16172                           ;modulation.c: 21: tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 16173  2F03  3000               	movlw	0
 16174  2F04  0021               	movlb	1	; select bank1
 16175  2F05  00CE               	movwf	___ftdiv@f2^(0+128)
 16176  2F06  3034               	movlw	52
 16177  2F07  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 16178  2F08  3043               	movlw	67
 16179  2F09  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 16180  2F0A  3010               	movlw	16
 16181  2F0B  00AE               	movwf	___ftmul@f1^(0+128)
 16182  2F0C  3049               	movlw	73
 16183  2F0D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16184  2F0E  3040               	movlw	64
 16185  2F0F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16186  2F10  0022               	movlb	2	; select bank2
 16187  2F11  0859               	movf	calcCosArray@iAngle^(0+256),w
 16188  2F12  00D2               	movwf	??_calcCosArray^(0+256)
 16189  2F13  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 16190  2F14  0852               	movf	??_calcCosArray^(0+256),w
 16191  2F15  00AE               	movwf	___wmul@multiplier^(0+256)
 16192  2F16  0853               	movf	(??_calcCosArray+1)^(0+256),w
 16193  2F17  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16194  2F18  3003               	movlw	3
 16195  2F19  00B0               	movwf	___wmul@multiplicand^(0+256)
 16196  2F1A  3000               	movlw	0
 16197  2F1B  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16198  2F1C  31B2  2238  31AE   	fcall	___wmul
 16199  2F1F  0022               	movlb	2	; select bank2
 16200  2F20  082F               	movf	(?___wmul+1)^(0+256),w
 16201  2F21  0021               	movlb	1	; select bank1
 16202  2F22  00A9               	movwf	(___awtoft@c+1)^(0+128)
 16203  2F23  0022               	movlb	2	; select bank2
 16204  2F24  082E               	movf	?___wmul^(0+256),w
 16205  2F25  0021               	movlb	1	; select bank1
 16206  2F26  00A8               	movwf	___awtoft@c^(0+128)
 16207  2F27  31B2  22EC  31AE   	fcall	___awtoft
 16208  2F2A  0021               	movlb	1	; select bank1
 16209  2F2B  0828               	movf	?___awtoft^(0+128),w
 16210  2F2C  00B1               	movwf	___ftmul@f2^(0+128)
 16211  2F2D  0829               	movf	(?___awtoft+1)^(0+128),w
 16212  2F2E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16213  2F2F  082A               	movf	(?___awtoft+2)^(0+128),w
 16214  2F30  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16215  2F31  31A5  2590  31AE   	fcall	___ftmul
 16216  2F34  0021               	movlb	1	; select bank1
 16217  2F35  082E               	movf	?___ftmul^(0+128),w
 16218  2F36  00D1               	movwf	___ftdiv@f1^(0+128)
 16219  2F37  082F               	movf	(?___ftmul+1)^(0+128),w
 16220  2F38  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 16221  2F39  0830               	movf	(?___ftmul+2)^(0+128),w
 16222  2F3A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 16223  2F3B  31A4  2434  31AE   	fcall	___ftdiv
 16224  2F3E  0021               	movlb	1	; select bank1
 16225  2F3F  084E               	movf	?___ftdiv^(0+128),w
 16226  2F40  0022               	movlb	2	; select bank2
 16227  2F41  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 16228  2F42  0021               	movlb	1	; select bank1
 16229  2F43  084F               	movf	(?___ftdiv+1)^(0+128),w
 16230  2F44  0022               	movlb	2	; select bank2
 16231  2F45  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 16232  2F46  0021               	movlb	1	; select bank1
 16233  2F47  0850               	movf	(?___ftdiv+2)^(0+128),w
 16234  2F48  0022               	movlb	2	; select bank2
 16235  2F49  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 16236                           
 16237                           ;modulation.c: 22: tmpVal = cos(tmpVal);
 16238  2F4A  0856               	movf	calcCosArray@tmpVal^(0+256),w
 16239  2F4B  00CC               	movwf	cos@f^(0+256)
 16240  2F4C  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 16241  2F4D  00CD               	movwf	(cos@f+1)^(0+256)
 16242  2F4E  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 16243  2F4F  00CE               	movwf	(cos@f+2)^(0+256)
 16244  2F50  31AE  2681  31AE   	fcall	_cos
 16245  2F53  0022               	movlb	2	; select bank2
 16246  2F54  084C               	movf	?_cos^(0+256),w
 16247  2F55  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 16248  2F56  084D               	movf	(?_cos+1)^(0+256),w
 16249  2F57  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 16250  2F58  084E               	movf	(?_cos+2)^(0+256),w
 16251  2F59  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 16252                           
 16253                           ;modulation.c: 23: cosArray[iAngle] = tmpVal;
 16254  2F5A  0859               	movf	calcCosArray@iAngle^(0+256),w
 16255  2F5B  00D2               	movwf	??_calcCosArray^(0+256)
 16256  2F5C  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 16257  2F5D  0852               	movf	??_calcCosArray^(0+256),w
 16258  2F5E  00AE               	movwf	___wmul@multiplier^(0+256)
 16259  2F5F  0853               	movf	(??_calcCosArray+1)^(0+256),w
 16260  2F60  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16261  2F61  3003               	movlw	3
 16262  2F62  00B0               	movwf	___wmul@multiplicand^(0+256)
 16263  2F63  3000               	movlw	0
 16264  2F64  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16265  2F65  31B2  2238  31AE   	fcall	___wmul
 16266  2F68  3082               	movlw	130
 16267  2F69  0022               	movlb	2	; select bank2
 16268  2F6A  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 16269  2F6B  3024               	movlw	36
 16270  2F6C  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 16271  2F6D  082E               	movf	?___wmul^(0+256),w
 16272  2F6E  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 16273  2F6F  0086               	movwf	6
 16274  2F70  082F               	movf	(?___wmul+1)^(0+256),w
 16275  2F71  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 16276  2F72  0087               	movwf	7
 16277  2F73  0856               	movf	calcCosArray@tmpVal^(0+256),w
 16278  2F74  3FC0               	movwi [0]fsr1
 16279  2F75  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 16280  2F76  3FC1               	movwi [1]fsr1
 16281  2F77  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 16282  2F78  3FC2               	movwi [2]fsr1
 16283  2F79  3001               	movlw	1
 16284  2F7A  00D2               	movwf	??_calcCosArray^(0+256)
 16285  2F7B  0852               	movf	??_calcCosArray^(0+256),w
 16286  2F7C  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 16287  2F7D  2EFF               	goto	L17
 16288  2F7E                     __end_of_calcCosArray:	
 16289                           
 16290                           	psect	text61
 16291  2E81                     __ptext61:	
 16292 ;; *************** function _cos *****************
 16293 ;; Defined at:
 16294 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 16295 ;; Parameters:    Size  Location     Type
 16296 ;;  f               3   44[BANK2 ] void 
 16297 ;; Auto vars:     Size  Location     Type
 16298 ;;		None
 16299 ;; Return value:  Size  Location     Type
 16300 ;;                  3   44[BANK2 ] void 
 16301 ;; Registers used:
 16302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16303 ;; Tracked objects:
 16304 ;;		On entry : 0/0
 16305 ;;		On exit  : 0/0
 16306 ;;		Unchanged: 0/0
 16307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16308 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16309 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16311 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16312 ;;Total ram usage:        6 bytes
 16313 ;; Hardware stack levels used:    1
 16314 ;; Hardware stack levels required when called:    9
 16315 ;; This function calls:
 16316 ;;		___ftadd
 16317 ;;		___ftge
 16318 ;;		_sin
 16319 ;; This function is called by:
 16320 ;;		_calcCosArray
 16321 ;; This function uses a non-reentrant model
 16322 ;;
 16323                           
 16324                           
 16325                           ;psect for function _cos
 16326  2E81                     _cos:	
 16327                           
 16328                           ;incstack = 0
 16329                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16330  2E81  3010               	movlw	16
 16331  2E82  0021               	movlb	1	; select bank1
 16332  2E83  00A0               	movwf	___ftge@ff1^(0+128)
 16333  2E84  3049               	movlw	73
 16334  2E85  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16335  2E86  3040               	movlw	64
 16336  2E87  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16337  2E88  0022               	movlb	2	; select bank2
 16338  2E89  084C               	movf	cos@f^(0+256),w
 16339  2E8A  0021               	movlb	1	; select bank1
 16340  2E8B  00A3               	movwf	___ftge@ff2^(0+128)
 16341  2E8C  0022               	movlb	2	; select bank2
 16342  2E8D  084D               	movf	(cos@f+1)^(0+256),w
 16343  2E8E  0021               	movlb	1	; select bank1
 16344  2E8F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16345  2E90  0022               	movlb	2	; select bank2
 16346  2E91  084E               	movf	(cos@f+2)^(0+256),w
 16347  2E92  0021               	movlb	1	; select bank1
 16348  2E93  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16349  2E94  31A8  2000  31AE   	fcall	___ftge
 16350  2E97  1803               	btfsc	3,0
 16351  2E98  2ECB               	goto	l7603
 16352  2E99  30CC               	movlw	204
 16353  2E9A  0021               	movlb	1	; select bank1
 16354  2E9B  00C1               	movwf	___ftadd@f1^(0+128)
 16355  2E9C  3096               	movlw	150
 16356  2E9D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16357  2E9E  30C0               	movlw	192
 16358  2E9F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16359  2EA0  0022               	movlb	2	; select bank2
 16360  2EA1  084C               	movf	cos@f^(0+256),w
 16361  2EA2  0021               	movlb	1	; select bank1
 16362  2EA3  00C4               	movwf	___ftadd@f2^(0+128)
 16363  2EA4  0022               	movlb	2	; select bank2
 16364  2EA5  084D               	movf	(cos@f+1)^(0+256),w
 16365  2EA6  0021               	movlb	1	; select bank1
 16366  2EA7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16367  2EA8  0022               	movlb	2	; select bank2
 16368  2EA9  084E               	movf	(cos@f+2)^(0+256),w
 16369  2EAA  0021               	movlb	1	; select bank1
 16370  2EAB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16371  2EAC  3199  2104  31AE   	fcall	___ftadd
 16372  2EAF  0021               	movlb	1	; select bank1
 16373  2EB0  0841               	movf	?___ftadd^(0+128),w
 16374  2EB1  0022               	movlb	2	; select bank2
 16375  2EB2  00CF               	movwf	_cos$3274^(0+256)
 16376  2EB3  0021               	movlb	1	; select bank1
 16377  2EB4  0842               	movf	(?___ftadd+1)^(0+128),w
 16378  2EB5  0022               	movlb	2	; select bank2
 16379  2EB6  00D0               	movwf	(_cos$3274+1)^(0+256)
 16380  2EB7  0021               	movlb	1	; select bank1
 16381  2EB8  0843               	movf	(?___ftadd+2)^(0+128),w
 16382  2EB9  0022               	movlb	2	; select bank2
 16383  2EBA  00D1               	movwf	(_cos$3274+2)^(0+256)
 16384  2EBB  084F               	movf	_cos$3274^(0+256),w
 16385  2EBC  00BE               	movwf	sin@f^(0+256)
 16386  2EBD  0850               	movf	(_cos$3274+1)^(0+256),w
 16387  2EBE  00BF               	movwf	(sin@f+1)^(0+256)
 16388  2EBF  0851               	movf	(_cos$3274+2)^(0+256),w
 16389  2EC0  00C0               	movwf	(sin@f+2)^(0+256)
 16390  2EC1  3194  2454         	fcall	_sin
 16391  2EC3  0022               	movlb	2	; select bank2
 16392  2EC4  083E               	movf	?_sin^(0+256),w
 16393  2EC5  00CC               	movwf	?_cos^(0+256)
 16394  2EC6  083F               	movf	(?_sin+1)^(0+256),w
 16395  2EC7  00CD               	movwf	(?_cos+1)^(0+256)
 16396  2EC8  0840               	movf	(?_sin+2)^(0+256),w
 16397  2EC9  00CE               	movwf	(?_cos+2)^(0+256)
 16398  2ECA  0008               	return
 16399  2ECB                     l7603:	
 16400  2ECB  3010               	movlw	16
 16401  2ECC  0021               	movlb	1	; select bank1
 16402  2ECD  00C1               	movwf	___ftadd@f1^(0+128)
 16403  2ECE  30C9               	movlw	201
 16404  2ECF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16405  2ED0  303F               	movlw	63
 16406  2ED1  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16407  2ED2  0022               	movlb	2	; select bank2
 16408  2ED3  084C               	movf	cos@f^(0+256),w
 16409  2ED4  0021               	movlb	1	; select bank1
 16410  2ED5  00C4               	movwf	___ftadd@f2^(0+128)
 16411  2ED6  0022               	movlb	2	; select bank2
 16412  2ED7  084D               	movf	(cos@f+1)^(0+256),w
 16413  2ED8  0021               	movlb	1	; select bank1
 16414  2ED9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16415  2EDA  0022               	movlb	2	; select bank2
 16416  2EDB  084E               	movf	(cos@f+2)^(0+256),w
 16417  2EDC  0021               	movlb	1	; select bank1
 16418  2EDD  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16419  2EDE  3199  2104  31AE   	fcall	___ftadd
 16420  2EE1  0021               	movlb	1	; select bank1
 16421  2EE2  0841               	movf	?___ftadd^(0+128),w
 16422  2EE3  0022               	movlb	2	; select bank2
 16423  2EE4  00CF               	movwf	_cos$3274^(0+256)
 16424  2EE5  0021               	movlb	1	; select bank1
 16425  2EE6  0842               	movf	(?___ftadd+1)^(0+128),w
 16426  2EE7  0022               	movlb	2	; select bank2
 16427  2EE8  00D0               	movwf	(_cos$3274+1)^(0+256)
 16428  2EE9  0021               	movlb	1	; select bank1
 16429  2EEA  0843               	movf	(?___ftadd+2)^(0+128),w
 16430  2EEB  0022               	movlb	2	; select bank2
 16431  2EEC  00D1               	movwf	(_cos$3274+2)^(0+256)
 16432  2EED  084F               	movf	_cos$3274^(0+256),w
 16433  2EEE  00BE               	movwf	sin@f^(0+256)
 16434  2EEF  0850               	movf	(_cos$3274+1)^(0+256),w
 16435  2EF0  00BF               	movwf	(sin@f+1)^(0+256)
 16436  2EF1  0851               	movf	(_cos$3274+2)^(0+256),w
 16437  2EF2  00C0               	movwf	(sin@f+2)^(0+256)
 16438  2EF3  3194  2454         	fcall	_sin
 16439  2EF5  0022               	movlb	2	; select bank2
 16440  2EF6  083E               	movf	?_sin^(0+256),w
 16441  2EF7  00CC               	movwf	?_cos^(0+256)
 16442  2EF8  083F               	movf	(?_sin+1)^(0+256),w
 16443  2EF9  00CD               	movwf	(?_cos+1)^(0+256)
 16444  2EFA  0840               	movf	(?_sin+2)^(0+256),w
 16445  2EFB  00CE               	movwf	(?_cos+2)^(0+256)
 16446  2EFC  0008               	return
 16447  2EFD                     __end_of_cos:	
 16448                           
 16449                           	psect	text62
 16450  1454                     __ptext62:	
 16451 ;; *************** function _sin *****************
 16452 ;; Defined at:
 16453 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 16454 ;; Parameters:    Size  Location     Type
 16455 ;;  f               3   30[BANK2 ] void 
 16456 ;; Auto vars:     Size  Location     Type
 16457 ;;  x2              3   40[BANK2 ] void 
 16458 ;;  y               3   34[BANK2 ] void 
 16459 ;;  sgn             1   43[BANK2 ] unsigned char 
 16460 ;; Return value:  Size  Location     Type
 16461 ;;                  3   30[BANK2 ] unsigned char 
 16462 ;; Registers used:
 16463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16464 ;; Tracked objects:
 16465 ;;		On entry : 0/0
 16466 ;;		On exit  : 0/0
 16467 ;;		Unchanged: 0/0
 16468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16469 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16470 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16471 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16472 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16473 ;;Total ram usage:       14 bytes
 16474 ;; Hardware stack levels used:    1
 16475 ;; Hardware stack levels required when called:    8
 16476 ;; This function calls:
 16477 ;;		___ftadd
 16478 ;;		___ftdiv
 16479 ;;		___ftge
 16480 ;;		___ftmul
 16481 ;;		___ftneg
 16482 ;;		___ftsub
 16483 ;;		_eval_poly
 16484 ;;		_floor
 16485 ;; This function is called by:
 16486 ;;		_cos
 16487 ;; This function uses a non-reentrant model
 16488 ;;
 16489                           
 16490                           
 16491                           ;psect for function _sin
 16492  1454                     _sin:	
 16493                           
 16494                           ;incstack = 0
 16495                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16496  1454  0022               	movlb	2	; select bank2
 16497  1455  01CB               	clrf	sin@sgn^(0+256)
 16498  1456  083E               	movf	sin@f^(0+256),w
 16499  1457  0021               	movlb	1	; select bank1
 16500  1458  00A0               	movwf	___ftge@ff1^(0+128)
 16501  1459  0022               	movlb	2	; select bank2
 16502  145A  083F               	movf	(sin@f+1)^(0+256),w
 16503  145B  0021               	movlb	1	; select bank1
 16504  145C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16505  145D  0022               	movlb	2	; select bank2
 16506  145E  0840               	movf	(sin@f+2)^(0+256),w
 16507  145F  0021               	movlb	1	; select bank1
 16508  1460  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16509  1461  3000               	movlw	0
 16510  1462  00A3               	movwf	___ftge@ff2^(0+128)
 16511  1463  3000               	movlw	0
 16512  1464  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16513  1465  3000               	movlw	0
 16514  1466  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16515  1467  31A8  2000  3194   	fcall	___ftge
 16516  146A  1803               	btfsc	3,0
 16517  146B  2C89               	goto	l7233
 16518  146C  0022               	movlb	2	; select bank2
 16519  146D  083E               	movf	sin@f^(0+256),w
 16520  146E  0021               	movlb	1	; select bank1
 16521  146F  00BE               	movwf	___ftneg@f1^(0+128)
 16522  1470  0022               	movlb	2	; select bank2
 16523  1471  083F               	movf	(sin@f+1)^(0+256),w
 16524  1472  0021               	movlb	1	; select bank1
 16525  1473  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 16526  1474  0022               	movlb	2	; select bank2
 16527  1475  0840               	movf	(sin@f+2)^(0+256),w
 16528  1476  0021               	movlb	1	; select bank1
 16529  1477  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 16530  1478  31BF  27D2  3194   	fcall	___ftneg
 16531  147B  0021               	movlb	1	; select bank1
 16532  147C  083E               	movf	?___ftneg^(0+128),w
 16533  147D  0022               	movlb	2	; select bank2
 16534  147E  00BE               	movwf	sin@f^(0+256)
 16535  147F  0021               	movlb	1	; select bank1
 16536  1480  083F               	movf	(?___ftneg+1)^(0+128),w
 16537  1481  0022               	movlb	2	; select bank2
 16538  1482  00BF               	movwf	(sin@f+1)^(0+256)
 16539  1483  0021               	movlb	1	; select bank1
 16540  1484  0840               	movf	(?___ftneg+2)^(0+128),w
 16541  1485  0022               	movlb	2	; select bank2
 16542  1486  00C0               	movwf	(sin@f+2)^(0+256)
 16543  1487  01CB               	clrf	sin@sgn^(0+256)
 16544  1488  0ACB               	incf	sin@sgn^(0+256),f
 16545  1489                     l7233:	
 16546  1489  30FA               	movlw	250
 16547  148A  0021               	movlb	1	; select bank1
 16548  148B  00AE               	movwf	___ftmul@f1^(0+128)
 16549  148C  3022               	movlw	34
 16550  148D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16551  148E  303E               	movlw	62
 16552  148F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16553  1490  0022               	movlb	2	; select bank2
 16554  1491  083E               	movf	sin@f^(0+256),w
 16555  1492  0021               	movlb	1	; select bank1
 16556  1493  00B1               	movwf	___ftmul@f2^(0+128)
 16557  1494  0022               	movlb	2	; select bank2
 16558  1495  083F               	movf	(sin@f+1)^(0+256),w
 16559  1496  0021               	movlb	1	; select bank1
 16560  1497  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16561  1498  0022               	movlb	2	; select bank2
 16562  1499  0840               	movf	(sin@f+2)^(0+256),w
 16563  149A  0021               	movlb	1	; select bank1
 16564  149B  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16565  149C  31A5  2590  3194   	fcall	___ftmul
 16566  149F  0021               	movlb	1	; select bank1
 16567  14A0  082E               	movf	?___ftmul^(0+128),w
 16568  14A1  0022               	movlb	2	; select bank2
 16569  14A2  00BE               	movwf	sin@f^(0+256)
 16570  14A3  0021               	movlb	1	; select bank1
 16571  14A4  082F               	movf	(?___ftmul+1)^(0+128),w
 16572  14A5  0022               	movlb	2	; select bank2
 16573  14A6  00BF               	movwf	(sin@f+1)^(0+256)
 16574  14A7  0021               	movlb	1	; select bank1
 16575  14A8  0830               	movf	(?___ftmul+2)^(0+128),w
 16576  14A9  0022               	movlb	2	; select bank2
 16577  14AA  00C0               	movwf	(sin@f+2)^(0+256)
 16578  14AB  083E               	movf	sin@f^(0+256),w
 16579  14AC  00AE               	movwf	floor@x^(0+256)
 16580  14AD  083F               	movf	(sin@f+1)^(0+256),w
 16581  14AE  00AF               	movwf	(floor@x+1)^(0+256)
 16582  14AF  0840               	movf	(sin@f+2)^(0+256),w
 16583  14B0  00B0               	movwf	(floor@x+2)^(0+256)
 16584  14B1  31A4  24DD  3194   	fcall	_floor
 16585  14B4  0022               	movlb	2	; select bank2
 16586  14B5  082E               	movf	?_floor^(0+256),w
 16587  14B6  00B7               	movwf	___ftsub@f2^(0+256)
 16588  14B7  082F               	movf	(?_floor+1)^(0+256),w
 16589  14B8  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 16590  14B9  0830               	movf	(?_floor+2)^(0+256),w
 16591  14BA  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 16592  14BB  083E               	movf	sin@f^(0+256),w
 16593  14BC  00BA               	movwf	___ftsub@f1^(0+256)
 16594  14BD  083F               	movf	(sin@f+1)^(0+256),w
 16595  14BE  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 16596  14BF  0840               	movf	(sin@f+2)^(0+256),w
 16597  14C0  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 16598  14C1  31B4  242A  3194   	fcall	___ftsub
 16599  14C4  0022               	movlb	2	; select bank2
 16600  14C5  0837               	movf	?___ftsub^(0+256),w
 16601  14C6  00BE               	movwf	sin@f^(0+256)
 16602  14C7  0838               	movf	(?___ftsub+1)^(0+256),w
 16603  14C8  00BF               	movwf	(sin@f+1)^(0+256)
 16604  14C9  0839               	movf	(?___ftsub+2)^(0+256),w
 16605  14CA  00C0               	movwf	(sin@f+2)^(0+256)
 16606  14CB  3000               	movlw	0
 16607  14CC  0021               	movlb	1	; select bank1
 16608  14CD  00AE               	movwf	___ftmul@f1^(0+128)
 16609  14CE  3080               	movlw	128
 16610  14CF  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16611  14D0  3040               	movlw	64
 16612  14D1  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16613  14D2  0022               	movlb	2	; select bank2
 16614  14D3  083E               	movf	sin@f^(0+256),w
 16615  14D4  0021               	movlb	1	; select bank1
 16616  14D5  00B1               	movwf	___ftmul@f2^(0+128)
 16617  14D6  0022               	movlb	2	; select bank2
 16618  14D7  083F               	movf	(sin@f+1)^(0+256),w
 16619  14D8  0021               	movlb	1	; select bank1
 16620  14D9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16621  14DA  0022               	movlb	2	; select bank2
 16622  14DB  0840               	movf	(sin@f+2)^(0+256),w
 16623  14DC  0021               	movlb	1	; select bank1
 16624  14DD  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16625  14DE  31A5  2590  3194   	fcall	___ftmul
 16626  14E1  0021               	movlb	1	; select bank1
 16627  14E2  082E               	movf	?___ftmul^(0+128),w
 16628  14E3  0022               	movlb	2	; select bank2
 16629  14E4  00BE               	movwf	sin@f^(0+256)
 16630  14E5  0021               	movlb	1	; select bank1
 16631  14E6  082F               	movf	(?___ftmul+1)^(0+128),w
 16632  14E7  0022               	movlb	2	; select bank2
 16633  14E8  00BF               	movwf	(sin@f+1)^(0+256)
 16634  14E9  0021               	movlb	1	; select bank1
 16635  14EA  0830               	movf	(?___ftmul+2)^(0+128),w
 16636  14EB  0022               	movlb	2	; select bank2
 16637  14EC  00C0               	movwf	(sin@f+2)^(0+256)
 16638  14ED  3000               	movlw	0
 16639  14EE  0021               	movlb	1	; select bank1
 16640  14EF  00A0               	movwf	___ftge@ff1^(0+128)
 16641  14F0  3000               	movlw	0
 16642  14F1  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16643  14F2  3040               	movlw	64
 16644  14F3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16645  14F4  0022               	movlb	2	; select bank2
 16646  14F5  083E               	movf	sin@f^(0+256),w
 16647  14F6  0021               	movlb	1	; select bank1
 16648  14F7  00A3               	movwf	___ftge@ff2^(0+128)
 16649  14F8  0022               	movlb	2	; select bank2
 16650  14F9  083F               	movf	(sin@f+1)^(0+256),w
 16651  14FA  0021               	movlb	1	; select bank1
 16652  14FB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16653  14FC  0022               	movlb	2	; select bank2
 16654  14FD  0840               	movf	(sin@f+2)^(0+256),w
 16655  14FE  0021               	movlb	1	; select bank1
 16656  14FF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16657  1500  31A8  2000  3194   	fcall	___ftge
 16658  1503  1803               	btfsc	3,0
 16659  1504  2D25               	goto	l7245
 16660  1505  3000               	movlw	0
 16661  1506  0022               	movlb	2	; select bank2
 16662  1507  00B7               	movwf	___ftsub@f2^(0+256)
 16663  1508  3000               	movlw	0
 16664  1509  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 16665  150A  3040               	movlw	64
 16666  150B  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 16667  150C  083E               	movf	sin@f^(0+256),w
 16668  150D  00BA               	movwf	___ftsub@f1^(0+256)
 16669  150E  083F               	movf	(sin@f+1)^(0+256),w
 16670  150F  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 16671  1510  0840               	movf	(sin@f+2)^(0+256),w
 16672  1511  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 16673  1512  31B4  242A  3194   	fcall	___ftsub
 16674  1515  0022               	movlb	2	; select bank2
 16675  1516  0837               	movf	?___ftsub^(0+256),w
 16676  1517  00BE               	movwf	sin@f^(0+256)
 16677  1518  0838               	movf	(?___ftsub+1)^(0+256),w
 16678  1519  00BF               	movwf	(sin@f+1)^(0+256)
 16679  151A  0839               	movf	(?___ftsub+2)^(0+256),w
 16680  151B  00C0               	movwf	(sin@f+2)^(0+256)
 16681  151C  084B               	movf	sin@sgn^(0+256),w
 16682  151D  1D03               	btfss	3,2
 16683  151E  2D21               	goto	u6530
 16684  151F  3001               	movlw	1
 16685  1520  2D22               	goto	u6540
 16686  1521                     u6530:	
 16687  1521  3000               	movlw	0
 16688  1522                     u6540:	
 16689  1522  00C1               	movwf	??_sin^(0+256)
 16690  1523  0841               	movf	??_sin^(0+256),w
 16691  1524  00CB               	movwf	sin@sgn^(0+256)
 16692  1525                     l7245:	
 16693  1525  3000               	movlw	0
 16694  1526  0021               	movlb	1	; select bank1
 16695  1527  00A0               	movwf	___ftge@ff1^(0+128)
 16696  1528  3080               	movlw	128
 16697  1529  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16698  152A  303F               	movlw	63
 16699  152B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16700  152C  0022               	movlb	2	; select bank2
 16701  152D  083E               	movf	sin@f^(0+256),w
 16702  152E  0021               	movlb	1	; select bank1
 16703  152F  00A3               	movwf	___ftge@ff2^(0+128)
 16704  1530  0022               	movlb	2	; select bank2
 16705  1531  083F               	movf	(sin@f+1)^(0+256),w
 16706  1532  0021               	movlb	1	; select bank1
 16707  1533  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16708  1534  0022               	movlb	2	; select bank2
 16709  1535  0840               	movf	(sin@f+2)^(0+256),w
 16710  1536  0021               	movlb	1	; select bank1
 16711  1537  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16712  1538  31A8  2000  3194   	fcall	___ftge
 16713  153B  1803               	btfsc	3,0
 16714  153C  2D69               	goto	l2835
 16715  153D  3000               	movlw	0
 16716  153E  0021               	movlb	1	; select bank1
 16717  153F  00C1               	movwf	___ftadd@f1^(0+128)
 16718  1540  3000               	movlw	0
 16719  1541  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16720  1542  3040               	movlw	64
 16721  1543  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16722  1544  0022               	movlb	2	; select bank2
 16723  1545  083E               	movf	sin@f^(0+256),w
 16724  1546  0021               	movlb	1	; select bank1
 16725  1547  00BE               	movwf	___ftneg@f1^(0+128)
 16726  1548  0022               	movlb	2	; select bank2
 16727  1549  083F               	movf	(sin@f+1)^(0+256),w
 16728  154A  0021               	movlb	1	; select bank1
 16729  154B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 16730  154C  0022               	movlb	2	; select bank2
 16731  154D  0840               	movf	(sin@f+2)^(0+256),w
 16732  154E  0021               	movlb	1	; select bank1
 16733  154F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 16734  1550  31BF  27D2  3194   	fcall	___ftneg
 16735  1553  0021               	movlb	1	; select bank1
 16736  1554  083E               	movf	?___ftneg^(0+128),w
 16737  1555  00C4               	movwf	___ftadd@f2^(0+128)
 16738  1556  083F               	movf	(?___ftneg+1)^(0+128),w
 16739  1557  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16740  1558  0840               	movf	(?___ftneg+2)^(0+128),w
 16741  1559  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16742  155A  3199  2104  3194   	fcall	___ftadd
 16743  155D  0021               	movlb	1	; select bank1
 16744  155E  0841               	movf	?___ftadd^(0+128),w
 16745  155F  0022               	movlb	2	; select bank2
 16746  1560  00BE               	movwf	sin@f^(0+256)
 16747  1561  0021               	movlb	1	; select bank1
 16748  1562  0842               	movf	(?___ftadd+1)^(0+128),w
 16749  1563  0022               	movlb	2	; select bank2
 16750  1564  00BF               	movwf	(sin@f+1)^(0+256)
 16751  1565  0021               	movlb	1	; select bank1
 16752  1566  0843               	movf	(?___ftadd+2)^(0+128),w
 16753  1567  0022               	movlb	2	; select bank2
 16754  1568  00C0               	movwf	(sin@f+2)^(0+256)
 16755  1569                     l2835:	
 16756  1569  0022               	movlb	2	; select bank2
 16757  156A  083E               	movf	sin@f^(0+256),w
 16758  156B  0021               	movlb	1	; select bank1
 16759  156C  00AE               	movwf	___ftmul@f1^(0+128)
 16760  156D  0022               	movlb	2	; select bank2
 16761  156E  083F               	movf	(sin@f+1)^(0+256),w
 16762  156F  0021               	movlb	1	; select bank1
 16763  1570  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16764  1571  0022               	movlb	2	; select bank2
 16765  1572  0840               	movf	(sin@f+2)^(0+256),w
 16766  1573  0021               	movlb	1	; select bank1
 16767  1574  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16768  1575  0022               	movlb	2	; select bank2
 16769  1576  083E               	movf	sin@f^(0+256),w
 16770  1577  0021               	movlb	1	; select bank1
 16771  1578  00B1               	movwf	___ftmul@f2^(0+128)
 16772  1579  0022               	movlb	2	; select bank2
 16773  157A  083F               	movf	(sin@f+1)^(0+256),w
 16774  157B  0021               	movlb	1	; select bank1
 16775  157C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16776  157D  0022               	movlb	2	; select bank2
 16777  157E  0840               	movf	(sin@f+2)^(0+256),w
 16778  157F  0021               	movlb	1	; select bank1
 16779  1580  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16780  1581  31A5  2590  3194   	fcall	___ftmul
 16781  1584  0021               	movlb	1	; select bank1
 16782  1585  082E               	movf	?___ftmul^(0+128),w
 16783  1586  0022               	movlb	2	; select bank2
 16784  1587  00C8               	movwf	sin@x2^(0+256)
 16785  1588  0021               	movlb	1	; select bank1
 16786  1589  082F               	movf	(?___ftmul+1)^(0+128),w
 16787  158A  0022               	movlb	2	; select bank2
 16788  158B  00C9               	movwf	(sin@x2+1)^(0+256)
 16789  158C  0021               	movlb	1	; select bank1
 16790  158D  0830               	movf	(?___ftmul+2)^(0+128),w
 16791  158E  0022               	movlb	2	; select bank2
 16792  158F  00CA               	movwf	(sin@x2+2)^(0+256)
 16793  1590  0848               	movf	sin@x2^(0+256),w
 16794  1591  00B4               	movwf	eval_poly@x^(0+256)
 16795  1592  0849               	movf	(sin@x2+1)^(0+256),w
 16796  1593  00B5               	movwf	(eval_poly@x+1)^(0+256)
 16797  1594  084A               	movf	(sin@x2+2)^(0+256),w
 16798  1595  00B6               	movwf	(eval_poly@x+2)^(0+256)
 16799  1596  3048               	movlw	low (sin@coeff_b| (0+32768))
 16800  1597  00B7               	movwf	eval_poly@d^(0+256)
 16801  1598  30B0               	movlw	high (sin@coeff_b| (0+32768))
 16802  1599  00B8               	movwf	(eval_poly@d^(0+256)+1)
 16803  159A  3003               	movlw	3
 16804  159B  00B9               	movwf	eval_poly@n^(0+256)
 16805  159C  3000               	movlw	0
 16806  159D  00BA               	movwf	(eval_poly@n^(0+256)+1)
 16807  159E  31AE  260F  3194   	fcall	_eval_poly
 16808  15A1  0022               	movlb	2	; select bank2
 16809  15A2  0834               	movf	?_eval_poly^(0+256),w
 16810  15A3  00C2               	movwf	sin@y^(0+256)
 16811  15A4  0835               	movf	(?_eval_poly+1)^(0+256),w
 16812  15A5  00C3               	movwf	(sin@y+1)^(0+256)
 16813  15A6  0836               	movf	(?_eval_poly+2)^(0+256),w
 16814  15A7  00C4               	movwf	(sin@y+2)^(0+256)
 16815  15A8  3004               	movlw	4
 16816  15A9  00B9               	movwf	eval_poly@n^(0+256)
 16817  15AA  3000               	movlw	0
 16818  15AB  00BA               	movwf	(eval_poly@n^(0+256)+1)
 16819  15AC  3039               	movlw	low (sin@coeff_a| (0+32768))
 16820  15AD  00B7               	movwf	eval_poly@d^(0+256)
 16821  15AE  30B0               	movlw	high (sin@coeff_a| (0+32768))
 16822  15AF  00B8               	movwf	(eval_poly@d^(0+256)+1)
 16823  15B0  0848               	movf	sin@x2^(0+256),w
 16824  15B1  00B4               	movwf	eval_poly@x^(0+256)
 16825  15B2  0849               	movf	(sin@x2+1)^(0+256),w
 16826  15B3  00B5               	movwf	(eval_poly@x+1)^(0+256)
 16827  15B4  084A               	movf	(sin@x2+2)^(0+256),w
 16828  15B5  00B6               	movwf	(eval_poly@x+2)^(0+256)
 16829  15B6  31AE  260F  3194   	fcall	_eval_poly
 16830  15B9  0022               	movlb	2	; select bank2
 16831  15BA  0834               	movf	?_eval_poly^(0+256),w
 16832  15BB  0021               	movlb	1	; select bank1
 16833  15BC  00D1               	movwf	___ftdiv@f1^(0+128)
 16834  15BD  0022               	movlb	2	; select bank2
 16835  15BE  0835               	movf	(?_eval_poly+1)^(0+256),w
 16836  15BF  0021               	movlb	1	; select bank1
 16837  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 16838  15C1  0022               	movlb	2	; select bank2
 16839  15C2  0836               	movf	(?_eval_poly+2)^(0+256),w
 16840  15C3  0021               	movlb	1	; select bank1
 16841  15C4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 16842  15C5  0022               	movlb	2	; select bank2
 16843  15C6  0842               	movf	sin@y^(0+256),w
 16844  15C7  0021               	movlb	1	; select bank1
 16845  15C8  00CE               	movwf	___ftdiv@f2^(0+128)
 16846  15C9  0022               	movlb	2	; select bank2
 16847  15CA  0843               	movf	(sin@y+1)^(0+256),w
 16848  15CB  0021               	movlb	1	; select bank1
 16849  15CC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 16850  15CD  0022               	movlb	2	; select bank2
 16851  15CE  0844               	movf	(sin@y+2)^(0+256),w
 16852  15CF  0021               	movlb	1	; select bank1
 16853  15D0  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 16854  15D1  31A4  2434  3194   	fcall	___ftdiv
 16855  15D4  0021               	movlb	1	; select bank1
 16856  15D5  084E               	movf	?___ftdiv^(0+128),w
 16857  15D6  0022               	movlb	2	; select bank2
 16858  15D7  00C5               	movwf	_sin$3277^(0+256)
 16859  15D8  0021               	movlb	1	; select bank1
 16860  15D9  084F               	movf	(?___ftdiv+1)^(0+128),w
 16861  15DA  0022               	movlb	2	; select bank2
 16862  15DB  00C6               	movwf	(_sin$3277+1)^(0+256)
 16863  15DC  0021               	movlb	1	; select bank1
 16864  15DD  0850               	movf	(?___ftdiv+2)^(0+128),w
 16865  15DE  0022               	movlb	2	; select bank2
 16866  15DF  00C7               	movwf	(_sin$3277+2)^(0+256)
 16867  15E0  0845               	movf	_sin$3277^(0+256),w
 16868  15E1  0021               	movlb	1	; select bank1
 16869  15E2  00AE               	movwf	___ftmul@f1^(0+128)
 16870  15E3  0022               	movlb	2	; select bank2
 16871  15E4  0846               	movf	(_sin$3277+1)^(0+256),w
 16872  15E5  0021               	movlb	1	; select bank1
 16873  15E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16874  15E7  0022               	movlb	2	; select bank2
 16875  15E8  0847               	movf	(_sin$3277+2)^(0+256),w
 16876  15E9  0021               	movlb	1	; select bank1
 16877  15EA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16878  15EB  0022               	movlb	2	; select bank2
 16879  15EC  083E               	movf	sin@f^(0+256),w
 16880  15ED  0021               	movlb	1	; select bank1
 16881  15EE  00B1               	movwf	___ftmul@f2^(0+128)
 16882  15EF  0022               	movlb	2	; select bank2
 16883  15F0  083F               	movf	(sin@f+1)^(0+256),w
 16884  15F1  0021               	movlb	1	; select bank1
 16885  15F2  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16886  15F3  0022               	movlb	2	; select bank2
 16887  15F4  0840               	movf	(sin@f+2)^(0+256),w
 16888  15F5  0021               	movlb	1	; select bank1
 16889  15F6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16890  15F7  31A5  2590  3194   	fcall	___ftmul
 16891  15FA  0021               	movlb	1	; select bank1
 16892  15FB  082E               	movf	?___ftmul^(0+128),w
 16893  15FC  0022               	movlb	2	; select bank2
 16894  15FD  00BE               	movwf	sin@f^(0+256)
 16895  15FE  0021               	movlb	1	; select bank1
 16896  15FF  082F               	movf	(?___ftmul+1)^(0+128),w
 16897  1600  0022               	movlb	2	; select bank2
 16898  1601  00BF               	movwf	(sin@f+1)^(0+256)
 16899  1602  0021               	movlb	1	; select bank1
 16900  1603  0830               	movf	(?___ftmul+2)^(0+128),w
 16901  1604  0022               	movlb	2	; select bank2
 16902  1605  00C0               	movwf	(sin@f+2)^(0+256)
 16903  1606  084B               	movf	sin@sgn^(0+256),w
 16904  1607  1903               	btfsc	3,2
 16905  1608  0008               	return
 16906  1609  083E               	movf	sin@f^(0+256),w
 16907  160A  0021               	movlb	1	; select bank1
 16908  160B  00BE               	movwf	___ftneg@f1^(0+128)
 16909  160C  0022               	movlb	2	; select bank2
 16910  160D  083F               	movf	(sin@f+1)^(0+256),w
 16911  160E  0021               	movlb	1	; select bank1
 16912  160F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 16913  1610  0022               	movlb	2	; select bank2
 16914  1611  0840               	movf	(sin@f+2)^(0+256),w
 16915  1612  0021               	movlb	1	; select bank1
 16916  1613  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 16917  1614  31BF  27D2         	fcall	___ftneg
 16918  1616  0021               	movlb	1	; select bank1
 16919  1617  083E               	movf	?___ftneg^(0+128),w
 16920  1618  0022               	movlb	2	; select bank2
 16921  1619  00BE               	movwf	?_sin^(0+256)
 16922  161A  0021               	movlb	1	; select bank1
 16923  161B  083F               	movf	(?___ftneg+1)^(0+128),w
 16924  161C  0022               	movlb	2	; select bank2
 16925  161D  00BF               	movwf	(?_sin+1)^(0+256)
 16926  161E  0021               	movlb	1	; select bank1
 16927  161F  0840               	movf	(?___ftneg+2)^(0+128),w
 16928  1620  0022               	movlb	2	; select bank2
 16929  1621  00C0               	movwf	(?_sin+2)^(0+256)
 16930  1622  0008               	return
 16931  1623                     __end_of_sin:	
 16932                           
 16933                           	psect	text63
 16934  24DD                     __ptext63:	
 16935 ;; *************** function _floor *****************
 16936 ;; Defined at:
 16937 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 16938 ;; Parameters:    Size  Location     Type
 16939 ;;  x               3   14[BANK2 ] unsigned char 
 16940 ;; Auto vars:     Size  Location     Type
 16941 ;;  i               3   18[BANK2 ] unsigned char 
 16942 ;;  expon           2   21[BANK2 ] int 
 16943 ;; Return value:  Size  Location     Type
 16944 ;;                  3   14[BANK2 ] int 
 16945 ;; Registers used:
 16946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16947 ;; Tracked objects:
 16948 ;;		On entry : 0/0
 16949 ;;		On exit  : 0/0
 16950 ;;		Unchanged: 0/0
 16951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16952 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16953 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16954 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16955 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16956 ;;Total ram usage:        9 bytes
 16957 ;; Hardware stack levels used:    1
 16958 ;; Hardware stack levels required when called:    7
 16959 ;; This function calls:
 16960 ;;		___altoft
 16961 ;;		___ftadd
 16962 ;;		___ftge
 16963 ;;		___fttol
 16964 ;;		_frexp
 16965 ;; This function is called by:
 16966 ;;		_sin
 16967 ;;		_exp
 16968 ;; This function uses a non-reentrant model
 16969 ;;
 16970                           
 16971                           
 16972                           ;psect for function _floor
 16973  24DD                     _floor:	
 16974                           
 16975                           ;incstack = 0
 16976                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16977  24DD  0022               	movlb	2	; select bank2
 16978  24DE  082E               	movf	floor@x^(0+256),w
 16979  24DF  0021               	movlb	1	; select bank1
 16980  24E0  00A0               	movwf	frexp@value^(0+128)
 16981  24E1  0022               	movlb	2	; select bank2
 16982  24E2  082F               	movf	(floor@x+1)^(0+256),w
 16983  24E3  0021               	movlb	1	; select bank1
 16984  24E4  00A1               	movwf	(frexp@value+1)^(0+128)
 16985  24E5  0022               	movlb	2	; select bank2
 16986  24E6  0830               	movf	(floor@x+2)^(0+256),w
 16987  24E7  0021               	movlb	1	; select bank1
 16988  24E8  00A2               	movwf	(frexp@value+2)^(0+128)
 16989  24E9  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 16990  24EA  0022               	movlb	2	; select bank2
 16991  24EB  00B1               	movwf	??_floor^(0+256)
 16992  24EC  0831               	movf	??_floor^(0+256),w
 16993  24ED  0021               	movlb	1	; select bank1
 16994  24EE  00A3               	movwf	frexp@eptr^(0+128)
 16995  24EF  31B7  27C0  31A4   	fcall	_frexp
 16996  24F2  0022               	movlb	2	; select bank2
 16997  24F3  1FB6               	btfss	(floor@expon+1)^(0+256),7
 16998  24F4  2D1B               	goto	l6769
 16999  24F5  082E               	movf	floor@x^(0+256),w
 17000  24F6  0021               	movlb	1	; select bank1
 17001  24F7  00A0               	movwf	___ftge@ff1^(0+128)
 17002  24F8  0022               	movlb	2	; select bank2
 17003  24F9  082F               	movf	(floor@x+1)^(0+256),w
 17004  24FA  0021               	movlb	1	; select bank1
 17005  24FB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 17006  24FC  0022               	movlb	2	; select bank2
 17007  24FD  0830               	movf	(floor@x+2)^(0+256),w
 17008  24FE  0021               	movlb	1	; select bank1
 17009  24FF  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 17010  2500  3000               	movlw	0
 17011  2501  00A3               	movwf	___ftge@ff2^(0+128)
 17012  2502  3000               	movlw	0
 17013  2503  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 17014  2504  3000               	movlw	0
 17015  2505  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 17016  2506  31A8  2000  31A4   	fcall	___ftge
 17017  2509  1803               	btfsc	3,0
 17018  250A  2D13               	goto	l6765
 17019  250B  3000               	movlw	0
 17020  250C  0022               	movlb	2	; select bank2
 17021  250D  00AE               	movwf	?_floor^(0+256)
 17022  250E  3080               	movlw	128
 17023  250F  00AF               	movwf	(?_floor+1)^(0+256)
 17024  2510  30BF               	movlw	191
 17025  2511  00B0               	movwf	(?_floor+2)^(0+256)
 17026  2512  0008               	return
 17027  2513                     l6765:	
 17028  2513  3000               	movlw	0
 17029  2514  0022               	movlb	2	; select bank2
 17030  2515  00AE               	movwf	?_floor^(0+256)
 17031  2516  3000               	movlw	0
 17032  2517  00AF               	movwf	(?_floor+1)^(0+256)
 17033  2518  3000               	movlw	0
 17034  2519  00B0               	movwf	(?_floor+2)^(0+256)
 17035  251A  0008               	return
 17036  251B                     l6769:	
 17037  251B  3000               	movlw	0
 17038  251C  0236               	subwf	(floor@expon+1)^(0+256),w
 17039  251D  3015               	movlw	21
 17040  251E  1903               	skipnz
 17041  251F  0235               	subwf	floor@expon^(0+256),w
 17042  2520  1803               	btfsc	3,0
 17043  2521  0008               	return
 17044  2522  082E               	movf	floor@x^(0+256),w
 17045  2523  00A0               	movwf	___fttol@f1^(0+256)
 17046  2524  082F               	movf	(floor@x+1)^(0+256),w
 17047  2525  00A1               	movwf	(___fttol@f1+1)^(0+256)
 17048  2526  0830               	movf	(floor@x+2)^(0+256),w
 17049  2527  00A2               	movwf	(___fttol@f1+2)^(0+256)
 17050  2528  31A1  2158  31A4   	fcall	___fttol
 17051  252B  0022               	movlb	2	; select bank2
 17052  252C  0823               	movf	(?___fttol+3)^(0+256),w
 17053  252D  0021               	movlb	1	; select bank1
 17054  252E  00AB               	movwf	(___altoft@c+3)^(0+128)
 17055  252F  0022               	movlb	2	; select bank2
 17056  2530  0822               	movf	(?___fttol+2)^(0+256),w
 17057  2531  0021               	movlb	1	; select bank1
 17058  2532  00AA               	movwf	(___altoft@c+2)^(0+128)
 17059  2533  0022               	movlb	2	; select bank2
 17060  2534  0821               	movf	(?___fttol+1)^(0+256),w
 17061  2535  0021               	movlb	1	; select bank1
 17062  2536  00A9               	movwf	(___altoft@c+1)^(0+128)
 17063  2537  0022               	movlb	2	; select bank2
 17064  2538  0820               	movf	?___fttol^(0+256),w
 17065  2539  0021               	movlb	1	; select bank1
 17066  253A  00A8               	movwf	___altoft@c^(0+128)
 17067  253B  31B7  2708  31A4   	fcall	___altoft
 17068  253E  0021               	movlb	1	; select bank1
 17069  253F  0828               	movf	?___altoft^(0+128),w
 17070  2540  0022               	movlb	2	; select bank2
 17071  2541  00B2               	movwf	floor@i^(0+256)
 17072  2542  0021               	movlb	1	; select bank1
 17073  2543  0829               	movf	(?___altoft+1)^(0+128),w
 17074  2544  0022               	movlb	2	; select bank2
 17075  2545  00B3               	movwf	(floor@i+1)^(0+256)
 17076  2546  0021               	movlb	1	; select bank1
 17077  2547  082A               	movf	(?___altoft+2)^(0+128),w
 17078  2548  0022               	movlb	2	; select bank2
 17079  2549  00B4               	movwf	(floor@i+2)^(0+256)
 17080  254A  082E               	movf	floor@x^(0+256),w
 17081  254B  0021               	movlb	1	; select bank1
 17082  254C  00A0               	movwf	___ftge@ff1^(0+128)
 17083  254D  0022               	movlb	2	; select bank2
 17084  254E  082F               	movf	(floor@x+1)^(0+256),w
 17085  254F  0021               	movlb	1	; select bank1
 17086  2550  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 17087  2551  0022               	movlb	2	; select bank2
 17088  2552  0830               	movf	(floor@x+2)^(0+256),w
 17089  2553  0021               	movlb	1	; select bank1
 17090  2554  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 17091  2555  0022               	movlb	2	; select bank2
 17092  2556  0832               	movf	floor@i^(0+256),w
 17093  2557  0021               	movlb	1	; select bank1
 17094  2558  00A3               	movwf	___ftge@ff2^(0+128)
 17095  2559  0022               	movlb	2	; select bank2
 17096  255A  0833               	movf	(floor@i+1)^(0+256),w
 17097  255B  0021               	movlb	1	; select bank1
 17098  255C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 17099  255D  0022               	movlb	2	; select bank2
 17100  255E  0834               	movf	(floor@i+2)^(0+256),w
 17101  255F  0021               	movlb	1	; select bank1
 17102  2560  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 17103  2561  31A8  2000  31A4   	fcall	___ftge
 17104  2564  1803               	btfsc	3,0
 17105  2565  2D88               	goto	l6779
 17106  2566  3000               	movlw	0
 17107  2567  0021               	movlb	1	; select bank1
 17108  2568  00C1               	movwf	___ftadd@f1^(0+128)
 17109  2569  3080               	movlw	128
 17110  256A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 17111  256B  30BF               	movlw	191
 17112  256C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 17113  256D  0022               	movlb	2	; select bank2
 17114  256E  0832               	movf	floor@i^(0+256),w
 17115  256F  0021               	movlb	1	; select bank1
 17116  2570  00C4               	movwf	___ftadd@f2^(0+128)
 17117  2571  0022               	movlb	2	; select bank2
 17118  2572  0833               	movf	(floor@i+1)^(0+256),w
 17119  2573  0021               	movlb	1	; select bank1
 17120  2574  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 17121  2575  0022               	movlb	2	; select bank2
 17122  2576  0834               	movf	(floor@i+2)^(0+256),w
 17123  2577  0021               	movlb	1	; select bank1
 17124  2578  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 17125  2579  3199  2104         	fcall	___ftadd
 17126  257B  0021               	movlb	1	; select bank1
 17127  257C  0841               	movf	?___ftadd^(0+128),w
 17128  257D  0022               	movlb	2	; select bank2
 17129  257E  00AE               	movwf	?_floor^(0+256)
 17130  257F  0021               	movlb	1	; select bank1
 17131  2580  0842               	movf	(?___ftadd+1)^(0+128),w
 17132  2581  0022               	movlb	2	; select bank2
 17133  2582  00AF               	movwf	(?_floor+1)^(0+256)
 17134  2583  0021               	movlb	1	; select bank1
 17135  2584  0843               	movf	(?___ftadd+2)^(0+128),w
 17136  2585  0022               	movlb	2	; select bank2
 17137  2586  00B0               	movwf	(?_floor+2)^(0+256)
 17138  2587  0008               	return
 17139  2588                     l6779:	
 17140  2588  0022               	movlb	2	; select bank2
 17141  2589  0832               	movf	floor@i^(0+256),w
 17142  258A  00AE               	movwf	?_floor^(0+256)
 17143  258B  0833               	movf	(floor@i+1)^(0+256),w
 17144  258C  00AF               	movwf	(?_floor+1)^(0+256)
 17145  258D  0834               	movf	(floor@i+2)^(0+256),w
 17146  258E  00B0               	movwf	(?_floor+2)^(0+256)
 17147  258F  0008               	return
 17148  2590                     __end_of_floor:	
 17149                           
 17150                           	psect	text64
 17151  37C0                     __ptext64:	
 17152 ;; *************** function _frexp *****************
 17153 ;; Defined at:
 17154 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 17155 ;; Parameters:    Size  Location     Type
 17156 ;;  value           3    0[BANK1 ] int 
 17157 ;;  eptr            1    3[BANK1 ] PTR int 
 17158 ;;		 -> log@exponent(2), floor@expon(2), 
 17159 ;; Auto vars:     Size  Location     Type
 17160 ;;		None
 17161 ;; Return value:  Size  Location     Type
 17162 ;;                  3    0[BANK1 ] PTR int 
 17163 ;; Registers used:
 17164 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17165 ;; Tracked objects:
 17166 ;;		On entry : 0/0
 17167 ;;		On exit  : 0/0
 17168 ;;		Unchanged: 0/0
 17169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17170 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17172 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17173 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17174 ;;Total ram usage:        6 bytes
 17175 ;; Hardware stack levels used:    1
 17176 ;; Hardware stack levels required when called:    5
 17177 ;; This function calls:
 17178 ;;		Nothing
 17179 ;; This function is called by:
 17180 ;;		_floor
 17181 ;;		_log
 17182 ;; This function uses a non-reentrant model
 17183 ;;
 17184                           
 17185                           
 17186                           ;psect for function _frexp
 17187  37C0                     _frexp:	
 17188                           
 17189                           ;incstack = 0
 17190                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 17191  37C0  0021               	movlb	1	; select bank1
 17192  37C1  0822               	movf	(frexp@value+2)^(0+128),w
 17193  37C2  0421               	iorwf	(frexp@value+1)^(0+128),w
 17194  37C3  0420               	iorwf	frexp@value^(0+128),w
 17195  37C4  1D03               	skipz
 17196  37C5  2FD4               	goto	l6579
 17197  37C6  0823               	movf	frexp@eptr^(0+128),w
 17198  37C7  0086               	movwf	6
 17199  37C8  3001               	movlw	1	; select bank2/3
 17200  37C9  0087               	movwf	7
 17201  37CA  3000               	movlw	0
 17202  37CB  3FC0               	movwi [0]fsr1
 17203  37CC  3FC1               	movwi [1]fsr1
 17204  37CD  3000               	movlw	0
 17205  37CE  00A0               	movwf	?_frexp^(0+128)
 17206  37CF  3000               	movlw	0
 17207  37D0  00A1               	movwf	(?_frexp+1)^(0+128)
 17208  37D1  3000               	movlw	0
 17209  37D2  00A2               	movwf	(?_frexp+2)^(0+128)
 17210  37D3  0008               	return
 17211  37D4                     l6579:	
 17212  37D4  0822               	movf	(frexp@value^(0+128)+2),w
 17213  37D5  397F               	andlw	127
 17214  37D6  00A4               	movwf	??_frexp^(0+128)
 17215  37D7  01A5               	clrf	(??_frexp^(0+128)+1)
 17216  37D8  35A4               	lslf	??_frexp^(0+128),f
 17217  37D9  0DA5               	rlf	(??_frexp^(0+128)+1),f
 17218  37DA  0823               	movf	frexp@eptr^(0+128),w
 17219  37DB  0086               	movwf	6
 17220  37DC  3001               	movlw	1	; select bank2/3
 17221  37DD  0087               	movwf	7
 17222  37DE  0824               	movf	??_frexp^(0+128),w
 17223  37DF  3FC0               	movwi [0]fsr1
 17224  37E0  0825               	movf	(??_frexp+1)^(0+128),w
 17225  37E1  3FC1               	movwi [1]fsr1
 17226  37E2  0D21               	rlf	(frexp@value^(0+128)+1),w
 17227  37E3  0D21               	rlf	(frexp@value^(0+128)+1),w
 17228  37E4  3901               	andlw	1
 17229  37E5  00A4               	movwf	??_frexp^(0+128)
 17230  37E6  01A5               	clrf	(??_frexp^(0+128)+1)
 17231  37E7  0823               	movf	frexp@eptr^(0+128),w
 17232  37E8  0086               	movwf	6
 17233  37E9  3001               	movlw	1	; select bank2/3
 17234  37EA  0087               	movwf	7
 17235  37EB  0824               	movf	??_frexp^(0+128),w
 17236  37EC  0481               	iorwf	1,f
 17237  37ED  3141               	addfsr 1,1
 17238  37EE  0825               	movf	(??_frexp+1)^(0+128),w
 17239  37EF  0481               	iorwf	1,f
 17240  37F0  0823               	movf	frexp@eptr^(0+128),w
 17241  37F1  0086               	movwf	6
 17242  37F2  3001               	movlw	1	; select bank2/3
 17243  37F3  0087               	movwf	7
 17244  37F4  3082               	movlw	130
 17245  37F5  0781               	addwf	1,f
 17246  37F6  3141               	addfsr 1,1
 17247  37F7  30FF               	movlw	255
 17248  37F8  3D81               	addwfc	1,f
 17249  37F9  317F               	addfsr 1,-1
 17250  37FA  0822               	movf	(frexp@value^(0+128)+2),w
 17251  37FB  3980               	andlw	-128
 17252  37FC  383F               	iorlw	63
 17253  37FD  00A2               	movwf	(frexp@value^(0+128)+2)
 17254  37FE  13A1               	bcf	(frexp@value^(0+128)+1),7
 17255  37FF  0008               	return
 17256  3800                     __end_of_frexp:	
 17257                           
 17258                           	psect	text65
 17259  2158                     __ptext65:	
 17260 ;; *************** function ___fttol *****************
 17261 ;; Defined at:
 17262 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;  f1              3    0[BANK2 ] float 
 17265 ;; Auto vars:     Size  Location     Type
 17266 ;;  lval            4    9[BANK2 ] unsigned long 
 17267 ;;  exp1            1   13[BANK2 ] unsigned char 
 17268 ;;  sign1           1    8[BANK2 ] unsigned char 
 17269 ;; Return value:  Size  Location     Type
 17270 ;;                  4    0[BANK2 ] long 
 17271 ;; Registers used:
 17272 ;;		wreg, status,2, status,0
 17273 ;; Tracked objects:
 17274 ;;		On entry : 0/0
 17275 ;;		On exit  : 0/0
 17276 ;;		Unchanged: 0/0
 17277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17278 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17279 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17280 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17281 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17282 ;;Total ram usage:       14 bytes
 17283 ;; Hardware stack levels used:    1
 17284 ;; Hardware stack levels required when called:    5
 17285 ;; This function calls:
 17286 ;;		Nothing
 17287 ;; This function is called by:
 17288 ;;		_main
 17289 ;;		_set_subdivision
 17290 ;;		_scaleA100kPot
 17291 ;;		_scaleA10kPot
 17292 ;;		_scaleiA10kPot
 17293 ;;		_getModulationDelayTime
 17294 ;;		_modCos
 17295 ;;		_modTri
 17296 ;;		_modSaw
 17297 ;;		_setSymmetry
 17298 ;;		_pow
 17299 ;;		_exp
 17300 ;;		_floor
 17301 ;;		_scaleiA100kPot
 17302 ;;		_scaleA25kPot
 17303 ;;		_scaleiA25kPot
 17304 ;; This function uses a non-reentrant model
 17305 ;;
 17306                           
 17307                           
 17308                           ;psect for function ___fttol
 17309  2158                     ___fttol:	
 17310                           
 17311                           ;incstack = 0
 17312                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17313  2158  0022               	movlb	2	; select bank2
 17314  2159  0820               	movf	___fttol@f1^(0+256),w
 17315  215A  00A4               	movwf	??___fttol^(0+256)
 17316  215B  0821               	movf	(___fttol@f1+1)^(0+256),w
 17317  215C  00A5               	movwf	(??___fttol^(0+256)+1)
 17318  215D  0822               	movf	(___fttol@f1+2)^(0+256),w
 17319  215E  00A6               	movwf	(??___fttol^(0+256)+2)
 17320  215F  1003               	clrc
 17321  2160  0D25               	rlf	(??___fttol^(0+256)+1),w
 17322  2161  0D26               	rlf	(??___fttol^(0+256)+2),w
 17323  2162  00A7               	movwf	(??___fttol+3)^(0+256)
 17324  2163  0827               	movf	(??___fttol+3)^(0+256),w
 17325  2164  00AD               	movwf	___fttol@exp1^(0+256)
 17326  2165  082D               	movf	___fttol@exp1^(0+256),w
 17327  2166  1D03               	btfss	3,2
 17328  2167  2971               	goto	l6535
 17329  2168  3000               	movlw	0
 17330  2169  00A3               	movwf	(?___fttol+3)^(0+256)
 17331  216A  3000               	movlw	0
 17332  216B  00A2               	movwf	(?___fttol+2)^(0+256)
 17333  216C  3000               	movlw	0
 17334  216D  00A1               	movwf	(?___fttol+1)^(0+256)
 17335  216E  3000               	movlw	0
 17336  216F  00A0               	movwf	?___fttol^(0+256)
 17337  2170  0008               	return
 17338  2171                     l6535:	
 17339  2171  0820               	movf	___fttol@f1^(0+256),w
 17340  2172  00A4               	movwf	??___fttol^(0+256)
 17341  2173  0821               	movf	(___fttol@f1+1)^(0+256),w
 17342  2174  00A5               	movwf	(??___fttol^(0+256)+1)
 17343  2175  0822               	movf	(___fttol@f1+2)^(0+256),w
 17344  2176  00A6               	movwf	(??___fttol^(0+256)+2)
 17345  2177  3017               	movlw	23
 17346  2178                     u5655:	
 17347  2178  36A6               	lsrf	(??___fttol^(0+256)+2),f
 17348  2179  0CA5               	rrf	(??___fttol^(0+256)+1),f
 17349  217A  0CA4               	rrf	??___fttol^(0+256),f
 17350  217B  0B89               	decfsz	9,f
 17351  217C  2978               	goto	u5655
 17352  217D  0824               	movf	??___fttol^(0+256),w
 17353  217E  00A7               	movwf	(??___fttol+3)^(0+256)
 17354  217F  0827               	movf	(??___fttol+3)^(0+256),w
 17355  2180  00A8               	movwf	___fttol@sign1^(0+256)
 17356  2181  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 17357  2182  30FF               	movlw	255
 17358  2183  05A0               	andwf	___fttol@f1^(0+256),f
 17359  2184  30FF               	movlw	255
 17360  2185  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 17361  2186  3000               	movlw	0
 17362  2187  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 17363  2188  0820               	movf	___fttol@f1^(0+256),w
 17364  2189  00A9               	movwf	___fttol@lval^(0+256)
 17365  218A  0821               	movf	(___fttol@f1+1)^(0+256),w
 17366  218B  00AA               	movwf	(___fttol@lval^(0+256)+1)
 17367  218C  0822               	movf	(___fttol@f1+2)^(0+256),w
 17368  218D  00AB               	movwf	(___fttol@lval^(0+256)+2)
 17369  218E  01AC               	clrf	(___fttol@lval^(0+256)+3)
 17370  218F  308E               	movlw	142
 17371  2190  02AD               	subwf	___fttol@exp1^(0+256),f
 17372  2191  1FAD               	btfss	___fttol@exp1^(0+256),7
 17373  2192  29AF               	goto	l6555
 17374  2193  082D               	movf	___fttol@exp1^(0+256),w
 17375  2194  3A80               	xorlw	128
 17376  2195  3E8F               	addlw	143
 17377  2196  1803               	skipnc
 17378  2197  29A1               	goto	l6553
 17379  2198  3000               	movlw	0
 17380  2199  00A3               	movwf	(?___fttol+3)^(0+256)
 17381  219A  3000               	movlw	0
 17382  219B  00A2               	movwf	(?___fttol+2)^(0+256)
 17383  219C  3000               	movlw	0
 17384  219D  00A1               	movwf	(?___fttol+1)^(0+256)
 17385  219E  3000               	movlw	0
 17386  219F  00A0               	movwf	?___fttol^(0+256)
 17387  21A0  0008               	return
 17388  21A1                     l6553:	
 17389  21A1  3001               	movlw	1
 17390  21A2                     u5685:	
 17391  21A2  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 17392  21A3  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 17393  21A4  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 17394  21A5  0CA9               	rrf	___fttol@lval^(0+256),f
 17395  21A6  0B89               	decfsz	9,f
 17396  21A7  29A2               	goto	u5685
 17397  21A8  3001               	movlw	1
 17398  21A9  00A4               	movwf	??___fttol^(0+256)
 17399  21AA  0824               	movf	??___fttol^(0+256),w
 17400  21AB  07AD               	addwf	___fttol@exp1^(0+256),f
 17401  21AC  1903               	btfsc	3,2
 17402  21AD  29C8               	goto	l6563
 17403  21AE  29A1               	goto	l6553
 17404  21AF                     l6555:	
 17405  21AF  3018               	movlw	24
 17406  21B0  022D               	subwf	___fttol@exp1^(0+256),w
 17407  21B1  1C03               	skipc
 17408  21B2  29C5               	goto	l2705
 17409  21B3  3000               	movlw	0
 17410  21B4  00A3               	movwf	(?___fttol+3)^(0+256)
 17411  21B5  3000               	movlw	0
 17412  21B6  00A2               	movwf	(?___fttol+2)^(0+256)
 17413  21B7  3000               	movlw	0
 17414  21B8  00A1               	movwf	(?___fttol+1)^(0+256)
 17415  21B9  3000               	movlw	0
 17416  21BA  00A0               	movwf	?___fttol^(0+256)
 17417  21BB  0008               	return
 17418  21BC                     l6561:	
 17419  21BC  3001               	movlw	1
 17420  21BD                     u5715:	
 17421  21BD  35A9               	lslf	___fttol@lval^(0+256),f
 17422  21BE  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 17423  21BF  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 17424  21C0  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 17425  21C1  0B89               	decfsz	9,f
 17426  21C2  29BD               	goto	u5715
 17427  21C3  3001               	movlw	1
 17428  21C4  02AD               	subwf	___fttol@exp1^(0+256),f
 17429  21C5                     l2705:	
 17430  21C5  082D               	movf	___fttol@exp1^(0+256),w
 17431  21C6  1D03               	btfss	3,2
 17432  21C7  29BC               	goto	l6561
 17433  21C8                     l6563:	
 17434  21C8  0828               	movf	___fttol@sign1^(0+256),w
 17435  21C9  1903               	btfsc	3,2
 17436  21CA  29D6               	goto	l6567
 17437  21CB  09A9               	comf	___fttol@lval^(0+256),f
 17438  21CC  09AA               	comf	(___fttol@lval+1)^(0+256),f
 17439  21CD  09AB               	comf	(___fttol@lval+2)^(0+256),f
 17440  21CE  09AC               	comf	(___fttol@lval+3)^(0+256),f
 17441  21CF  0AA9               	incf	___fttol@lval^(0+256),f
 17442  21D0  1903               	skipnz
 17443  21D1  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 17444  21D2  1903               	skipnz
 17445  21D3  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 17446  21D4  1903               	skipnz
 17447  21D5  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 17448  21D6                     l6567:	
 17449  21D6  082C               	movf	(___fttol@lval+3)^(0+256),w
 17450  21D7  00A3               	movwf	(?___fttol+3)^(0+256)
 17451  21D8  082B               	movf	(___fttol@lval+2)^(0+256),w
 17452  21D9  00A2               	movwf	(?___fttol+2)^(0+256)
 17453  21DA  082A               	movf	(___fttol@lval+1)^(0+256),w
 17454  21DB  00A1               	movwf	(?___fttol+1)^(0+256)
 17455  21DC  0829               	movf	___fttol@lval^(0+256),w
 17456  21DD  00A0               	movwf	?___fttol^(0+256)
 17457  21DE  0008               	return
 17458  21DF                     __end_of___fttol:	
 17459                           
 17460                           	psect	text66
 17461  2800                     __ptext66:	
 17462 ;; *************** function ___ftge *****************
 17463 ;; Defined at:
 17464 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 17465 ;; Parameters:    Size  Location     Type
 17466 ;;  ff1             3    0[BANK1 ] float 
 17467 ;;  ff2             3    3[BANK1 ] float 
 17468 ;; Auto vars:     Size  Location     Type
 17469 ;;		None
 17470 ;; Return value:  Size  Location     Type
 17471 ;;		None               void
 17472 ;; Registers used:
 17473 ;;		wreg, status,2, status,0
 17474 ;; Tracked objects:
 17475 ;;		On entry : 0/0
 17476 ;;		On exit  : 0/0
 17477 ;;		Unchanged: 0/0
 17478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17479 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17481 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17482 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17483 ;;Total ram usage:        9 bytes
 17484 ;; Hardware stack levels used:    1
 17485 ;; Hardware stack levels required when called:    5
 17486 ;; This function calls:
 17487 ;;		Nothing
 17488 ;; This function is called by:
 17489 ;;		_scaleA10kPot
 17490 ;;		_scaleiA10kPot
 17491 ;;		_modCos
 17492 ;;		_modTri
 17493 ;;		_modSaw
 17494 ;;		_modSquare
 17495 ;;		_cos
 17496 ;;		_pow
 17497 ;;		_sin
 17498 ;;		_exp
 17499 ;;		_floor
 17500 ;;		_ldexp
 17501 ;;		_log
 17502 ;;		_scaleiA100kPot
 17503 ;;		_scaleA25kPot
 17504 ;;		_scaleiA25kPot
 17505 ;; This function uses a non-reentrant model
 17506 ;;
 17507                           
 17508                           
 17509                           ;psect for function ___ftge
 17510  2800                     ___ftge:	
 17511                           
 17512                           ;incstack = 0
 17513                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 17514  2800  0021               	movlb	1	; select bank1
 17515  2801  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 17516  2802  2817               	goto	l6455
 17517  2803  0920               	comf	___ftge@ff1^(0+128),w
 17518  2804  00A6               	movwf	??___ftge^(0+128)
 17519  2805  0921               	comf	(___ftge@ff1+1)^(0+128),w
 17520  2806  00A7               	movwf	(??___ftge^(0+128)+1)
 17521  2807  0922               	comf	(___ftge@ff1+2)^(0+128),w
 17522  2808  00A8               	movwf	(??___ftge^(0+128)+2)
 17523  2809  0AA6               	incf	??___ftge^(0+128),f
 17524  280A  1903               	skipnz
 17525  280B  0AA7               	incf	(??___ftge^(0+128)+1),f
 17526  280C  1903               	skipnz
 17527  280D  0AA8               	incf	(??___ftge^(0+128)+2),f
 17528  280E  3000               	movlw	0
 17529  280F  0726               	addwf	??___ftge^(0+128),w
 17530  2810  00A0               	movwf	___ftge@ff1^(0+128)
 17531  2811  3000               	movlw	0
 17532  2812  3D27               	addwfc	(??___ftge+1)^(0+128),w
 17533  2813  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 17534  2814  3080               	movlw	128
 17535  2815  3D28               	addwfc	(??___ftge+2)^(0+128),w
 17536  2816  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 17537  2817                     l6455:	
 17538  2817  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 17539  2818  282D               	goto	l6459
 17540  2819  0923               	comf	___ftge@ff2^(0+128),w
 17541  281A  00A6               	movwf	??___ftge^(0+128)
 17542  281B  0924               	comf	(___ftge@ff2+1)^(0+128),w
 17543  281C  00A7               	movwf	(??___ftge^(0+128)+1)
 17544  281D  0925               	comf	(___ftge@ff2+2)^(0+128),w
 17545  281E  00A8               	movwf	(??___ftge^(0+128)+2)
 17546  281F  0AA6               	incf	??___ftge^(0+128),f
 17547  2820  1903               	skipnz
 17548  2821  0AA7               	incf	(??___ftge^(0+128)+1),f
 17549  2822  1903               	skipnz
 17550  2823  0AA8               	incf	(??___ftge^(0+128)+2),f
 17551  2824  3000               	movlw	0
 17552  2825  0726               	addwf	??___ftge^(0+128),w
 17553  2826  00A3               	movwf	___ftge@ff2^(0+128)
 17554  2827  3000               	movlw	0
 17555  2828  3D27               	addwfc	(??___ftge+1)^(0+128),w
 17556  2829  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 17557  282A  3080               	movlw	128
 17558  282B  3D28               	addwfc	(??___ftge+2)^(0+128),w
 17559  282C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 17560  282D                     l6459:	
 17561  282D  3080               	movlw	128
 17562  282E  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 17563  282F  3080               	movlw	128
 17564  2830  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 17565  2831  0825               	movf	(___ftge@ff2+2)^(0+128),w
 17566  2832  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 17567  2833  1D03               	skipz
 17568  2834  0008               	return
 17569  2835  0824               	movf	(___ftge@ff2+1)^(0+128),w
 17570  2836  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 17571  2837  1D03               	skipz
 17572  2838  0008               	return
 17573  2839  0823               	movf	___ftge@ff2^(0+128),w
 17574  283A  0220               	subwf	___ftge@ff1^(0+128),w
 17575  283B  0008               	return
 17576  283C                     __end_of___ftge:	
 17577                           
 17578                           	psect	text67
 17579  3708                     __ptext67:	
 17580 ;; *************** function ___altoft *****************
 17581 ;; Defined at:
 17582 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 17583 ;; Parameters:    Size  Location     Type
 17584 ;;  c               4    8[BANK1 ] long 
 17585 ;; Auto vars:     Size  Location     Type
 17586 ;;  sign            1   15[BANK1 ] unsigned char 
 17587 ;;  exp             1   14[BANK1 ] unsigned char 
 17588 ;; Return value:  Size  Location     Type
 17589 ;;                  3    8[BANK1 ] float 
 17590 ;; Registers used:
 17591 ;;		wreg, status,2, status,0, pclath, cstack
 17592 ;; Tracked objects:
 17593 ;;		On entry : 0/0
 17594 ;;		On exit  : 0/0
 17595 ;;		Unchanged: 0/0
 17596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17597 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17598 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17599 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17600 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17601 ;;Total ram usage:        8 bytes
 17602 ;; Hardware stack levels used:    1
 17603 ;; Hardware stack levels required when called:    6
 17604 ;; This function calls:
 17605 ;;		___ftpack
 17606 ;; This function is called by:
 17607 ;;		_getModulationDelayTime
 17608 ;;		_floor
 17609 ;; This function uses a non-reentrant model
 17610 ;;
 17611                           
 17612                           
 17613                           ;psect for function ___altoft
 17614  3708                     ___altoft:	
 17615                           
 17616                           ;incstack = 0
 17617                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 17618  3708  0021               	movlb	1	; select bank1
 17619  3709  01AF               	clrf	___altoft@sign^(0+128)
 17620  370A  308E               	movlw	142
 17621  370B  00AC               	movwf	??___altoft^(0+128)
 17622  370C  082C               	movf	??___altoft^(0+128),w
 17623  370D  00AE               	movwf	___altoft@exp^(0+128)
 17624  370E  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 17625  370F  2F1D               	goto	l6331
 17626  3710  09A8               	comf	___altoft@c^(0+128),f
 17627  3711  09A9               	comf	(___altoft@c+1)^(0+128),f
 17628  3712  09AA               	comf	(___altoft@c+2)^(0+128),f
 17629  3713  09AB               	comf	(___altoft@c+3)^(0+128),f
 17630  3714  0AA8               	incf	___altoft@c^(0+128),f
 17631  3715  1903               	skipnz
 17632  3716  0AA9               	incf	(___altoft@c+1)^(0+128),f
 17633  3717  1903               	skipnz
 17634  3718  0AAA               	incf	(___altoft@c+2)^(0+128),f
 17635  3719  1903               	skipnz
 17636  371A  0AAB               	incf	(___altoft@c+3)^(0+128),f
 17637  371B  01AF               	clrf	___altoft@sign^(0+128)
 17638  371C  0AAF               	incf	___altoft@sign^(0+128),f
 17639  371D                     l6331:	
 17640  371D  30FF               	movlw	255
 17641  371E  052B               	andwf	(___altoft@c+3)^(0+128),w
 17642  371F  1903               	btfsc	3,2
 17643  3720  2F2D               	goto	l6333
 17644  3721  3001               	movlw	1
 17645  3722                     u5135:	
 17646  3722  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 17647  3723  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 17648  3724  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 17649  3725  0CA8               	rrf	___altoft@c^(0+128),f
 17650  3726  0B89               	decfsz	9,f
 17651  3727  2F22               	goto	u5135
 17652  3728  3001               	movlw	1
 17653  3729  00AC               	movwf	??___altoft^(0+128)
 17654  372A  082C               	movf	??___altoft^(0+128),w
 17655  372B  07AE               	addwf	___altoft@exp^(0+128),f
 17656  372C  2F1D               	goto	l6331
 17657  372D                     l6333:	
 17658  372D  0828               	movf	___altoft@c^(0+128),w
 17659  372E  00A0               	movwf	___ftpack@arg^(0+128)
 17660  372F  0829               	movf	(___altoft@c+1)^(0+128),w
 17661  3730  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17662  3731  082A               	movf	(___altoft@c+2)^(0+128),w
 17663  3732  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17664  3733  082E               	movf	___altoft@exp^(0+128),w
 17665  3734  00AC               	movwf	??___altoft^(0+128)
 17666  3735  082C               	movf	??___altoft^(0+128),w
 17667  3736  00A3               	movwf	___ftpack@exp^(0+128)
 17668  3737  082F               	movf	___altoft@sign^(0+128),w
 17669  3738  00AD               	movwf	(??___altoft+1)^(0+128)
 17670  3739  082D               	movf	(??___altoft+1)^(0+128),w
 17671  373A  00A4               	movwf	___ftpack@sign^(0+128)
 17672  373B  31AD  2541         	fcall	___ftpack
 17673  373D  0021               	movlb	1	; select bank1
 17674  373E  0820               	movf	?___ftpack^(0+128),w
 17675  373F  00A8               	movwf	?___altoft^(0+128)
 17676  3740  0821               	movf	(?___ftpack+1)^(0+128),w
 17677  3741  00A9               	movwf	(?___altoft+1)^(0+128)
 17678  3742  0822               	movf	(?___ftpack+2)^(0+128),w
 17679  3743  00AA               	movwf	(?___altoft+2)^(0+128)
 17680  3744  0008               	return
 17681  3745                     __end_of___altoft:	
 17682                           
 17683                           	psect	text68
 17684  2E0F                     __ptext68:	
 17685 ;; *************** function _eval_poly *****************
 17686 ;; Defined at:
 17687 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 17688 ;; Parameters:    Size  Location     Type
 17689 ;;  x               3   20[BANK2 ] float 
 17690 ;;  d               2   23[BANK2 ] PTR const 
 17691 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 17692 ;;  n               2   25[BANK2 ] int 
 17693 ;; Auto vars:     Size  Location     Type
 17694 ;;  res             3   27[BANK2 ] int 
 17695 ;; Return value:  Size  Location     Type
 17696 ;;                  3   20[BANK2 ] int 
 17697 ;; Registers used:
 17698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17699 ;; Tracked objects:
 17700 ;;		On entry : 0/0
 17701 ;;		On exit  : 0/0
 17702 ;;		Unchanged: 0/0
 17703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17704 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17705 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17707 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17708 ;;Total ram usage:       10 bytes
 17709 ;; Hardware stack levels used:    1
 17710 ;; Hardware stack levels required when called:    7
 17711 ;; This function calls:
 17712 ;;		___ftadd
 17713 ;;		___ftmul
 17714 ;;		___wmul
 17715 ;; This function is called by:
 17716 ;;		_sin
 17717 ;;		_exp
 17718 ;;		_log
 17719 ;; This function uses a non-reentrant model
 17720 ;;
 17721                           
 17722                           
 17723                           ;psect for function _eval_poly
 17724  2E0F                     _eval_poly:	
 17725                           
 17726                           ;incstack = 0
 17727                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17728  2E0F  0022               	movlb	2	; select bank2
 17729  2E10  083A               	movf	(eval_poly@n+1)^(0+256),w
 17730  2E11  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 17731  2E12  0839               	movf	eval_poly@n^(0+256),w
 17732  2E13  00AE               	movwf	___wmul@multiplier^(0+256)
 17733  2E14  3003               	movlw	3
 17734  2E15  00B0               	movwf	___wmul@multiplicand^(0+256)
 17735  2E16  3000               	movlw	0
 17736  2E17  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 17737  2E18  31B2  2238  31AE   	fcall	___wmul
 17738  2E1B  0022               	movlb	2	; select bank2
 17739  2E1C  0837               	movf	eval_poly@d^(0+256),w
 17740  2E1D  072E               	addwf	?___wmul^(0+256),w
 17741  2E1E  0084               	movwf	4
 17742  2E1F  0838               	movf	(eval_poly@d+1)^(0+256),w
 17743  2E20  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 17744  2E21  0085               	movwf	5
 17745  2E22  3F00               	moviw [0]fsr0
 17746  2E23  00BB               	movwf	eval_poly@res^(0+256)
 17747  2E24  3F01               	moviw [1]fsr0
 17748  2E25  00BC               	movwf	(eval_poly@res+1)^(0+256)
 17749  2E26  3F02               	moviw [2]fsr0
 17750  2E27                     L19:	
 17751  2E27  00BD               	movwf	(eval_poly@res+2)^(0+256)
 17752  2E28  0839               	movf	eval_poly@n^(0+256),w
 17753  2E29  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 17754  2E2A  1903               	btfsc	3,2
 17755  2E2B  2E7A               	goto	l6789
 17756  2E2C  30FF               	movlw	255
 17757  2E2D  07B9               	addwf	eval_poly@n^(0+256),f
 17758  2E2E  30FF               	movlw	255
 17759  2E2F  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 17760  2E30  083A               	movf	(eval_poly@n+1)^(0+256),w
 17761  2E31  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 17762  2E32  0839               	movf	eval_poly@n^(0+256),w
 17763  2E33  00AE               	movwf	___wmul@multiplier^(0+256)
 17764  2E34  3003               	movlw	3
 17765  2E35  00B0               	movwf	___wmul@multiplicand^(0+256)
 17766  2E36  3000               	movlw	0
 17767  2E37  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 17768  2E38  31B2  2238  31AE   	fcall	___wmul
 17769  2E3B  0022               	movlb	2	; select bank2
 17770  2E3C  0837               	movf	eval_poly@d^(0+256),w
 17771  2E3D  072E               	addwf	?___wmul^(0+256),w
 17772  2E3E  0084               	movwf	4
 17773  2E3F  0838               	movf	(eval_poly@d+1)^(0+256),w
 17774  2E40  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 17775  2E41  0085               	movwf	5
 17776  2E42  3F00               	moviw [0]fsr0
 17777  2E43  0021               	movlb	1	; select bank1
 17778  2E44  00C1               	movwf	___ftadd@f1^(0+128)
 17779  2E45  3F01               	moviw [1]fsr0
 17780  2E46  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 17781  2E47  3F02               	moviw [2]fsr0
 17782  2E48  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 17783  2E49  0022               	movlb	2	; select bank2
 17784  2E4A  083B               	movf	eval_poly@res^(0+256),w
 17785  2E4B  0021               	movlb	1	; select bank1
 17786  2E4C  00AE               	movwf	___ftmul@f1^(0+128)
 17787  2E4D  0022               	movlb	2	; select bank2
 17788  2E4E  083C               	movf	(eval_poly@res+1)^(0+256),w
 17789  2E4F  0021               	movlb	1	; select bank1
 17790  2E50  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 17791  2E51  0022               	movlb	2	; select bank2
 17792  2E52  083D               	movf	(eval_poly@res+2)^(0+256),w
 17793  2E53  0021               	movlb	1	; select bank1
 17794  2E54  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 17795  2E55  0022               	movlb	2	; select bank2
 17796  2E56  0834               	movf	eval_poly@x^(0+256),w
 17797  2E57  0021               	movlb	1	; select bank1
 17798  2E58  00B1               	movwf	___ftmul@f2^(0+128)
 17799  2E59  0022               	movlb	2	; select bank2
 17800  2E5A  0835               	movf	(eval_poly@x+1)^(0+256),w
 17801  2E5B  0021               	movlb	1	; select bank1
 17802  2E5C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 17803  2E5D  0022               	movlb	2	; select bank2
 17804  2E5E  0836               	movf	(eval_poly@x+2)^(0+256),w
 17805  2E5F  0021               	movlb	1	; select bank1
 17806  2E60  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 17807  2E61  31A5  2590  31AE   	fcall	___ftmul
 17808  2E64  0021               	movlb	1	; select bank1
 17809  2E65  082E               	movf	?___ftmul^(0+128),w
 17810  2E66  00C4               	movwf	___ftadd@f2^(0+128)
 17811  2E67  082F               	movf	(?___ftmul+1)^(0+128),w
 17812  2E68  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 17813  2E69  0830               	movf	(?___ftmul+2)^(0+128),w
 17814  2E6A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 17815  2E6B  3199  2104  31AE   	fcall	___ftadd
 17816  2E6E  0021               	movlb	1	; select bank1
 17817  2E6F  0841               	movf	?___ftadd^(0+128),w
 17818  2E70  0022               	movlb	2	; select bank2
 17819  2E71  00BB               	movwf	eval_poly@res^(0+256)
 17820  2E72  0021               	movlb	1	; select bank1
 17821  2E73  0842               	movf	(?___ftadd+1)^(0+128),w
 17822  2E74  0022               	movlb	2	; select bank2
 17823  2E75  00BC               	movwf	(eval_poly@res+1)^(0+256)
 17824  2E76  0021               	movlb	1	; select bank1
 17825  2E77  0843               	movf	(?___ftadd+2)^(0+128),w
 17826  2E78  0022               	movlb	2	; select bank2
 17827  2E79  2E27               	goto	L19
 17828  2E7A                     l6789:	
 17829  2E7A  083B               	movf	eval_poly@res^(0+256),w
 17830  2E7B  00B4               	movwf	?_eval_poly^(0+256)
 17831  2E7C  083C               	movf	(eval_poly@res+1)^(0+256),w
 17832  2E7D  00B5               	movwf	(?_eval_poly+1)^(0+256)
 17833  2E7E  083D               	movf	(eval_poly@res+2)^(0+256),w
 17834  2E7F  00B6               	movwf	(?_eval_poly+2)^(0+256)
 17835  2E80  0008               	return
 17836  2E81                     __end_of_eval_poly:	
 17837                           
 17838                           	psect	text69
 17839  2590                     __ptext69:	
 17840 ;; *************** function ___ftmul *****************
 17841 ;; Defined at:
 17842 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 17843 ;; Parameters:    Size  Location     Type
 17844 ;;  f1              3   14[BANK1 ] float 
 17845 ;;  f2              3   17[BANK1 ] float 
 17846 ;; Auto vars:     Size  Location     Type
 17847 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 17848 ;;  sign            1   29[BANK1 ] unsigned char 
 17849 ;;  cntr            1   28[BANK1 ] unsigned char 
 17850 ;;  exp             1   24[BANK1 ] unsigned char 
 17851 ;; Return value:  Size  Location     Type
 17852 ;;                  3   14[BANK1 ] float 
 17853 ;; Registers used:
 17854 ;;		wreg, status,2, status,0, pclath, cstack
 17855 ;; Tracked objects:
 17856 ;;		On entry : 0/0
 17857 ;;		On exit  : 0/0
 17858 ;;		Unchanged: 0/0
 17859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17860 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17861 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17862 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17863 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17864 ;;Total ram usage:       16 bytes
 17865 ;; Hardware stack levels used:    1
 17866 ;; Hardware stack levels required when called:    6
 17867 ;; This function calls:
 17868 ;;		___ftpack
 17869 ;; This function is called by:
 17870 ;;		_set_subdivision
 17871 ;;		_map
 17872 ;;		_scaleA100kPot
 17873 ;;		_scaleA10kPot
 17874 ;;		_scaleiA10kPot
 17875 ;;		_calcCosArray
 17876 ;;		_modCos
 17877 ;;		_modTri
 17878 ;;		_modSaw
 17879 ;;		_pow
 17880 ;;		_sin
 17881 ;;		_eval_poly
 17882 ;;		_exp
 17883 ;;		_log
 17884 ;;		_scalePotValue
 17885 ;;		_scaleiA100kPot
 17886 ;;		_scaleA25kPot
 17887 ;;		_scaleiA25kPot
 17888 ;; This function uses a non-reentrant model
 17889 ;;
 17890                           
 17891                           
 17892                           ;psect for function ___ftmul
 17893  2590                     ___ftmul:	
 17894                           
 17895                           ;incstack = 0
 17896                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17897  2590  0021               	movlb	1	; select bank1
 17898  2591  082E               	movf	___ftmul@f1^(0+128),w
 17899  2592  00B4               	movwf	??___ftmul^(0+128)
 17900  2593  082F               	movf	(___ftmul@f1+1)^(0+128),w
 17901  2594  00B5               	movwf	(??___ftmul^(0+128)+1)
 17902  2595  0830               	movf	(___ftmul@f1+2)^(0+128),w
 17903  2596  00B6               	movwf	(??___ftmul^(0+128)+2)
 17904  2597  1003               	clrc
 17905  2598  0D35               	rlf	(??___ftmul^(0+128)+1),w
 17906  2599  0D36               	rlf	(??___ftmul^(0+128)+2),w
 17907  259A  00B7               	movwf	(??___ftmul+3)^(0+128)
 17908  259B  0837               	movf	(??___ftmul+3)^(0+128),w
 17909  259C  00B8               	movwf	___ftmul@exp^(0+128)
 17910  259D  0838               	movf	___ftmul@exp^(0+128),w
 17911  259E  1D03               	btfss	3,2
 17912  259F  2DA7               	goto	l6477
 17913  25A0  3000               	movlw	0
 17914  25A1  00AE               	movwf	?___ftmul^(0+128)
 17915  25A2  3000               	movlw	0
 17916  25A3  00AF               	movwf	(?___ftmul+1)^(0+128)
 17917  25A4  3000               	movlw	0
 17918  25A5  00B0               	movwf	(?___ftmul+2)^(0+128)
 17919  25A6  0008               	return
 17920  25A7                     l6477:	
 17921  25A7  0831               	movf	___ftmul@f2^(0+128),w
 17922  25A8  00B4               	movwf	??___ftmul^(0+128)
 17923  25A9  0832               	movf	(___ftmul@f2+1)^(0+128),w
 17924  25AA  00B5               	movwf	(??___ftmul^(0+128)+1)
 17925  25AB  0833               	movf	(___ftmul@f2+2)^(0+128),w
 17926  25AC  00B6               	movwf	(??___ftmul^(0+128)+2)
 17927  25AD  1003               	clrc
 17928  25AE  0D35               	rlf	(??___ftmul^(0+128)+1),w
 17929  25AF  0D36               	rlf	(??___ftmul^(0+128)+2),w
 17930  25B0  00B7               	movwf	(??___ftmul+3)^(0+128)
 17931  25B1  0837               	movf	(??___ftmul+3)^(0+128),w
 17932  25B2  00BD               	movwf	___ftmul@sign^(0+128)
 17933  25B3  083D               	movf	___ftmul@sign^(0+128),w
 17934  25B4  1D03               	btfss	3,2
 17935  25B5  2DBD               	goto	l6483
 17936  25B6  3000               	movlw	0
 17937  25B7  00AE               	movwf	?___ftmul^(0+128)
 17938  25B8  3000               	movlw	0
 17939  25B9  00AF               	movwf	(?___ftmul+1)^(0+128)
 17940  25BA  3000               	movlw	0
 17941  25BB  00B0               	movwf	(?___ftmul+2)^(0+128)
 17942  25BC  0008               	return
 17943  25BD                     l6483:	
 17944  25BD  083D               	movf	___ftmul@sign^(0+128),w
 17945  25BE  3E7B               	addlw	123
 17946  25BF  00B4               	movwf	??___ftmul^(0+128)
 17947  25C0  0834               	movf	??___ftmul^(0+128),w
 17948  25C1  07B8               	addwf	___ftmul@exp^(0+128),f
 17949  25C2  082E               	movf	___ftmul@f1^(0+128),w
 17950  25C3  00B4               	movwf	??___ftmul^(0+128)
 17951  25C4  082F               	movf	(___ftmul@f1+1)^(0+128),w
 17952  25C5  00B5               	movwf	(??___ftmul^(0+128)+1)
 17953  25C6  0830               	movf	(___ftmul@f1+2)^(0+128),w
 17954  25C7  00B6               	movwf	(??___ftmul^(0+128)+2)
 17955  25C8  3010               	movlw	16
 17956  25C9                     u5535:	
 17957  25C9  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 17958  25CA  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 17959  25CB  0CB4               	rrf	??___ftmul^(0+128),f
 17960  25CC  0B89               	decfsz	9,f
 17961  25CD  2DC9               	goto	u5535
 17962  25CE  0834               	movf	??___ftmul^(0+128),w
 17963  25CF  00B7               	movwf	(??___ftmul+3)^(0+128)
 17964  25D0  0837               	movf	(??___ftmul+3)^(0+128),w
 17965  25D1  00BD               	movwf	___ftmul@sign^(0+128)
 17966  25D2  0831               	movf	___ftmul@f2^(0+128),w
 17967  25D3  00B4               	movwf	??___ftmul^(0+128)
 17968  25D4  0832               	movf	(___ftmul@f2+1)^(0+128),w
 17969  25D5  00B5               	movwf	(??___ftmul^(0+128)+1)
 17970  25D6  0833               	movf	(___ftmul@f2+2)^(0+128),w
 17971  25D7  00B6               	movwf	(??___ftmul^(0+128)+2)
 17972  25D8  3010               	movlw	16
 17973  25D9                     u5545:	
 17974  25D9  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 17975  25DA  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 17976  25DB  0CB4               	rrf	??___ftmul^(0+128),f
 17977  25DC  0B89               	decfsz	9,f
 17978  25DD  2DD9               	goto	u5545
 17979  25DE  0834               	movf	??___ftmul^(0+128),w
 17980  25DF  00B7               	movwf	(??___ftmul+3)^(0+128)
 17981  25E0  0837               	movf	(??___ftmul+3)^(0+128),w
 17982  25E1  06BD               	xorwf	___ftmul@sign^(0+128),f
 17983  25E2  3080               	movlw	128
 17984  25E3  00B4               	movwf	??___ftmul^(0+128)
 17985  25E4  0834               	movf	??___ftmul^(0+128),w
 17986  25E5  05BD               	andwf	___ftmul@sign^(0+128),f
 17987  25E6  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 17988  25E7  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 17989  25E8  30FF               	movlw	255
 17990  25E9  05B1               	andwf	___ftmul@f2^(0+128),f
 17991  25EA  30FF               	movlw	255
 17992  25EB  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 17993  25EC  3000               	movlw	0
 17994  25ED  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 17995  25EE  3000               	movlw	0
 17996  25EF  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 17997  25F0  3000               	movlw	0
 17998  25F1  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 17999  25F2  3000               	movlw	0
 18000  25F3  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 18001  25F4  3007               	movlw	7
 18002  25F5  00B4               	movwf	??___ftmul^(0+128)
 18003  25F6  0834               	movf	??___ftmul^(0+128),w
 18004  25F7  00BC               	movwf	___ftmul@cntr^(0+128)
 18005  25F8                     l6495:	
 18006  25F8  1C2E               	btfss	___ftmul@f1^(0+128),0
 18007  25F9  2E00               	goto	l6499
 18008  25FA  0831               	movf	___ftmul@f2^(0+128),w
 18009  25FB  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 18010  25FC  0832               	movf	(___ftmul@f2+1)^(0+128),w
 18011  25FD  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 18012  25FE  0833               	movf	(___ftmul@f2+2)^(0+128),w
 18013  25FF  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 18014  2600                     l6499:	
 18015  2600  3001               	movlw	1
 18016  2601                     u5565:	
 18017  2601  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 18018  2602  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 18019  2603  0CAE               	rrf	___ftmul@f1^(0+128),f
 18020  2604  0B89               	decfsz	9,f
 18021  2605  2E01               	goto	u5565
 18022  2606  3001               	movlw	1
 18023  2607                     u5575:	
 18024  2607  35B1               	lslf	___ftmul@f2^(0+128),f
 18025  2608  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 18026  2609  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 18027  260A  0B89               	decfsz	9,f
 18028  260B  2E07               	goto	u5575
 18029  260C  3001               	movlw	1
 18030  260D  02BC               	subwf	___ftmul@cntr^(0+128),f
 18031  260E  1D03               	btfss	3,2
 18032  260F  2DF8               	goto	l6495
 18033  2610  3009               	movlw	9
 18034  2611  00B4               	movwf	??___ftmul^(0+128)
 18035  2612  0834               	movf	??___ftmul^(0+128),w
 18036  2613  00BC               	movwf	___ftmul@cntr^(0+128)
 18037  2614                     l6507:	
 18038  2614  1C2E               	btfss	___ftmul@f1^(0+128),0
 18039  2615  2E1C               	goto	l6511
 18040  2616  0831               	movf	___ftmul@f2^(0+128),w
 18041  2617  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 18042  2618  0832               	movf	(___ftmul@f2+1)^(0+128),w
 18043  2619  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 18044  261A  0833               	movf	(___ftmul@f2+2)^(0+128),w
 18045  261B  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 18046  261C                     l6511:	
 18047  261C  3001               	movlw	1
 18048  261D                     u5605:	
 18049  261D  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 18050  261E  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 18051  261F  0CAE               	rrf	___ftmul@f1^(0+128),f
 18052  2620  0B89               	decfsz	9,f
 18053  2621  2E1D               	goto	u5605
 18054  2622  3001               	movlw	1
 18055  2623                     u5615:	
 18056  2623  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 18057  2624  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 18058  2625  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 18059  2626  0B89               	decfsz	9,f
 18060  2627  2E23               	goto	u5615
 18061  2628  3001               	movlw	1
 18062  2629  02BC               	subwf	___ftmul@cntr^(0+128),f
 18063  262A  1D03               	btfss	3,2
 18064  262B  2E14               	goto	l6507
 18065  262C  0839               	movf	___ftmul@f3_as_product^(0+128),w
 18066  262D  00A0               	movwf	___ftpack@arg^(0+128)
 18067  262E  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 18068  262F  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 18069  2630  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 18070  2631  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 18071  2632  0838               	movf	___ftmul@exp^(0+128),w
 18072  2633  00B4               	movwf	??___ftmul^(0+128)
 18073  2634  0834               	movf	??___ftmul^(0+128),w
 18074  2635  00A3               	movwf	___ftpack@exp^(0+128)
 18075  2636  083D               	movf	___ftmul@sign^(0+128),w
 18076  2637  00B5               	movwf	(??___ftmul+1)^(0+128)
 18077  2638  0835               	movf	(??___ftmul+1)^(0+128),w
 18078  2639  00A4               	movwf	___ftpack@sign^(0+128)
 18079  263A  31AD  2541         	fcall	___ftpack
 18080  263C  0021               	movlb	1	; select bank1
 18081  263D  0820               	movf	?___ftpack^(0+128),w
 18082  263E  00AE               	movwf	?___ftmul^(0+128)
 18083  263F  0821               	movf	(?___ftpack+1)^(0+128),w
 18084  2640  00AF               	movwf	(?___ftmul+1)^(0+128)
 18085  2641  0822               	movf	(?___ftpack+2)^(0+128),w
 18086  2642  00B0               	movwf	(?___ftmul+2)^(0+128)
 18087  2643  0008               	return
 18088  2644                     __end_of___ftmul:	
 18089                           
 18090                           	psect	text70
 18091  342A                     __ptext70:	
 18092 ;; *************** function ___ftsub *****************
 18093 ;; Defined at:
 18094 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 18095 ;; Parameters:    Size  Location     Type
 18096 ;;  f2              3   23[BANK2 ] float 
 18097 ;;  f1              3   26[BANK2 ] float 
 18098 ;; Auto vars:     Size  Location     Type
 18099 ;;		None
 18100 ;; Return value:  Size  Location     Type
 18101 ;;                  3   23[BANK2 ] float 
 18102 ;; Registers used:
 18103 ;;		wreg, status,2, status,0, pclath, cstack
 18104 ;; Tracked objects:
 18105 ;;		On entry : 0/0
 18106 ;;		On exit  : 0/0
 18107 ;;		Unchanged: 0/0
 18108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18109 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18112 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18113 ;;Total ram usage:        6 bytes
 18114 ;; Hardware stack levels used:    1
 18115 ;; Hardware stack levels required when called:    7
 18116 ;; This function calls:
 18117 ;;		___ftadd
 18118 ;; This function is called by:
 18119 ;;		_sin
 18120 ;;		_exp
 18121 ;; This function uses a non-reentrant model
 18122 ;;
 18123                           
 18124                           
 18125                           ;psect for function ___ftsub
 18126  342A                     ___ftsub:	
 18127                           
 18128                           ;incstack = 0
 18129                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 18130  342A  0022               	movlb	2	; select bank2
 18131  342B  0839               	movf	(___ftsub@f2+2)^(0+256),w
 18132  342C  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 18133  342D  0437               	iorwf	___ftsub@f2^(0+256),w
 18134  342E  1903               	skipnz
 18135  342F  2C32               	goto	l6751
 18136  3430  3080               	movlw	128
 18137  3431  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 18138  3432                     l6751:	
 18139  3432  083A               	movf	___ftsub@f1^(0+256),w
 18140  3433  0021               	movlb	1	; select bank1
 18141  3434  00C1               	movwf	___ftadd@f1^(0+128)
 18142  3435  0022               	movlb	2	; select bank2
 18143  3436  083B               	movf	(___ftsub@f1+1)^(0+256),w
 18144  3437  0021               	movlb	1	; select bank1
 18145  3438  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 18146  3439  0022               	movlb	2	; select bank2
 18147  343A  083C               	movf	(___ftsub@f1+2)^(0+256),w
 18148  343B  0021               	movlb	1	; select bank1
 18149  343C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 18150  343D  0022               	movlb	2	; select bank2
 18151  343E  0837               	movf	___ftsub@f2^(0+256),w
 18152  343F  0021               	movlb	1	; select bank1
 18153  3440  00C4               	movwf	___ftadd@f2^(0+128)
 18154  3441  0022               	movlb	2	; select bank2
 18155  3442  0838               	movf	(___ftsub@f2+1)^(0+256),w
 18156  3443  0021               	movlb	1	; select bank1
 18157  3444  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 18158  3445  0022               	movlb	2	; select bank2
 18159  3446  0839               	movf	(___ftsub@f2+2)^(0+256),w
 18160  3447  0021               	movlb	1	; select bank1
 18161  3448  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 18162  3449  3199  2104         	fcall	___ftadd
 18163  344B  0021               	movlb	1	; select bank1
 18164  344C  0841               	movf	?___ftadd^(0+128),w
 18165  344D  0022               	movlb	2	; select bank2
 18166  344E  00B7               	movwf	?___ftsub^(0+256)
 18167  344F  0021               	movlb	1	; select bank1
 18168  3450  0842               	movf	(?___ftadd+1)^(0+128),w
 18169  3451  0022               	movlb	2	; select bank2
 18170  3452  00B8               	movwf	(?___ftsub+1)^(0+256)
 18171  3453  0021               	movlb	1	; select bank1
 18172  3454  0843               	movf	(?___ftadd+2)^(0+128),w
 18173  3455  0022               	movlb	2	; select bank2
 18174  3456  00B9               	movwf	(?___ftsub+2)^(0+256)
 18175  3457  0008               	return
 18176  3458                     __end_of___ftsub:	
 18177                           
 18178                           	psect	text71
 18179  1904                     __ptext71:	
 18180 ;; *************** function ___ftadd *****************
 18181 ;; Defined at:
 18182 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 18183 ;; Parameters:    Size  Location     Type
 18184 ;;  f1              3   33[BANK1 ] float 
 18185 ;;  f2              3   36[BANK1 ] float 
 18186 ;; Auto vars:     Size  Location     Type
 18187 ;;  exp1            1   45[BANK1 ] unsigned char 
 18188 ;;  exp2            1   44[BANK1 ] unsigned char 
 18189 ;;  sign            1   43[BANK1 ] unsigned char 
 18190 ;; Return value:  Size  Location     Type
 18191 ;;                  3   33[BANK1 ] float 
 18192 ;; Registers used:
 18193 ;;		wreg, status,2, status,0, pclath, cstack
 18194 ;; Tracked objects:
 18195 ;;		On entry : 0/0
 18196 ;;		On exit  : 0/0
 18197 ;;		Unchanged: 0/0
 18198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18199 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18200 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18201 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18202 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18203 ;;Total ram usage:       13 bytes
 18204 ;; Hardware stack levels used:    1
 18205 ;; Hardware stack levels required when called:    6
 18206 ;; This function calls:
 18207 ;;		___ftpack
 18208 ;; This function is called by:
 18209 ;;		_map
 18210 ;;		_scaleiA10kPot
 18211 ;;		_modCos
 18212 ;;		_modTri
 18213 ;;		_modSaw
 18214 ;;		_setFrequency
 18215 ;;		_cos
 18216 ;;		___ftsub
 18217 ;;		_sin
 18218 ;;		_eval_poly
 18219 ;;		_floor
 18220 ;;		_log
 18221 ;;		_scalePotValue
 18222 ;; This function uses a non-reentrant model
 18223 ;;
 18224                           
 18225                           
 18226                           ;psect for function ___ftadd
 18227  1904                     ___ftadd:	
 18228                           
 18229                           ;incstack = 0
 18230                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18231  1904  0021               	movlb	1	; select bank1
 18232  1905  0841               	movf	___ftadd@f1^(0+128),w
 18233  1906  00C7               	movwf	??___ftadd^(0+128)
 18234  1907  0842               	movf	(___ftadd@f1+1)^(0+128),w
 18235  1908  00C8               	movwf	(??___ftadd^(0+128)+1)
 18236  1909  0843               	movf	(___ftadd@f1+2)^(0+128),w
 18237  190A  00C9               	movwf	(??___ftadd^(0+128)+2)
 18238  190B  1003               	clrc
 18239  190C  0D48               	rlf	(??___ftadd^(0+128)+1),w
 18240  190D  0D49               	rlf	(??___ftadd^(0+128)+2),w
 18241  190E  00CA               	movwf	(??___ftadd+3)^(0+128)
 18242  190F  084A               	movf	(??___ftadd+3)^(0+128),w
 18243  1910  00CD               	movwf	___ftadd@exp1^(0+128)
 18244  1911  0844               	movf	___ftadd@f2^(0+128),w
 18245  1912  00C7               	movwf	??___ftadd^(0+128)
 18246  1913  0845               	movf	(___ftadd@f2+1)^(0+128),w
 18247  1914  00C8               	movwf	(??___ftadd^(0+128)+1)
 18248  1915  0846               	movf	(___ftadd@f2+2)^(0+128),w
 18249  1916  00C9               	movwf	(??___ftadd^(0+128)+2)
 18250  1917  1003               	clrc
 18251  1918  0D48               	rlf	(??___ftadd^(0+128)+1),w
 18252  1919  0D49               	rlf	(??___ftadd^(0+128)+2),w
 18253  191A  00CA               	movwf	(??___ftadd+3)^(0+128)
 18254  191B  084A               	movf	(??___ftadd+3)^(0+128),w
 18255  191C  00CC               	movwf	___ftadd@exp2^(0+128)
 18256  191D  084D               	movf	___ftadd@exp1^(0+128),w
 18257  191E  1903               	btfsc	3,2
 18258  191F  292C               	goto	l6387
 18259  1920  084C               	movf	___ftadd@exp2^(0+128),w
 18260  1921  024D               	subwf	___ftadd@exp1^(0+128),w
 18261  1922  1803               	skipnc
 18262  1923  2933               	goto	l6391
 18263  1924  034D               	decf	___ftadd@exp1^(0+128),w
 18264  1925  3AFF               	xorlw	255
 18265  1926  074C               	addwf	___ftadd@exp2^(0+128),w
 18266  1927  00C7               	movwf	??___ftadd^(0+128)
 18267  1928  3019               	movlw	25
 18268  1929  0247               	subwf	??___ftadd^(0+128),w
 18269  192A  1C03               	skipc
 18270  192B  2933               	goto	l6391
 18271  192C                     l6387:	
 18272  192C  0844               	movf	___ftadd@f2^(0+128),w
 18273  192D  00C1               	movwf	?___ftadd^(0+128)
 18274  192E  0845               	movf	(___ftadd@f2+1)^(0+128),w
 18275  192F  00C2               	movwf	(?___ftadd+1)^(0+128)
 18276  1930  0846               	movf	(___ftadd@f2+2)^(0+128),w
 18277  1931  00C3               	movwf	(?___ftadd+2)^(0+128)
 18278  1932  0008               	return
 18279  1933                     l6391:	
 18280  1933  084C               	movf	___ftadd@exp2^(0+128),w
 18281  1934  1903               	btfsc	3,2
 18282  1935  0008               	return
 18283  1936  084D               	movf	___ftadd@exp1^(0+128),w
 18284  1937  024C               	subwf	___ftadd@exp2^(0+128),w
 18285  1938  1803               	skipnc
 18286  1939  2942               	goto	l6397
 18287  193A  034C               	decf	___ftadd@exp2^(0+128),w
 18288  193B  3AFF               	xorlw	255
 18289  193C  074D               	addwf	___ftadd@exp1^(0+128),w
 18290  193D  00C7               	movwf	??___ftadd^(0+128)
 18291  193E  3019               	movlw	25
 18292  193F  0247               	subwf	??___ftadd^(0+128),w
 18293  1940  1803               	btfsc	3,0
 18294  1941  0008               	return
 18295  1942                     l6397:	
 18296  1942  3006               	movlw	6
 18297  1943  00C7               	movwf	??___ftadd^(0+128)
 18298  1944  0847               	movf	??___ftadd^(0+128),w
 18299  1945  00CB               	movwf	___ftadd@sign^(0+128)
 18300  1946  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 18301  1947  17CB               	bsf	___ftadd@sign^(0+128),7
 18302  1948  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 18303  1949  174B               	bsf	___ftadd@sign^(0+128),6
 18304  194A  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 18305  194B  30FF               	movlw	255
 18306  194C  05C1               	andwf	___ftadd@f1^(0+128),f
 18307  194D  30FF               	movlw	255
 18308  194E  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 18309  194F  3000               	movlw	0
 18310  1950  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 18311  1951  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 18312  1952  30FF               	movlw	255
 18313  1953  05C4               	andwf	___ftadd@f2^(0+128),f
 18314  1954  30FF               	movlw	255
 18315  1955  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 18316  1956  3000               	movlw	0
 18317  1957  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 18318  1958  084C               	movf	___ftadd@exp2^(0+128),w
 18319  1959  024D               	subwf	___ftadd@exp1^(0+128),w
 18320  195A  1803               	skipnc
 18321  195B  297E               	goto	l6419
 18322  195C                     l6409:	
 18323  195C  3001               	movlw	1
 18324  195D                     u5345:	
 18325  195D  35C4               	lslf	___ftadd@f2^(0+128),f
 18326  195E  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 18327  195F  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 18328  1960  0B89               	decfsz	9,f
 18329  1961  295D               	goto	u5345
 18330  1962  3001               	movlw	1
 18331  1963  02CC               	subwf	___ftadd@exp2^(0+128),f
 18332  1964  084C               	movf	___ftadd@exp2^(0+128),w
 18333  1965  064D               	xorwf	___ftadd@exp1^(0+128),w
 18334  1966  1903               	skipnz
 18335  1967  2979               	goto	l6417
 18336  1968  3001               	movlw	1
 18337  1969  02CB               	subwf	___ftadd@sign^(0+128),f
 18338  196A  084B               	movf	___ftadd@sign^(0+128),w
 18339  196B  3907               	andlw	7
 18340  196C  1903               	btfsc	3,2
 18341  196D  2979               	goto	l6417
 18342  196E  295C               	goto	l6409
 18343  196F                     l6415:	
 18344  196F  3001               	movlw	1
 18345  1970                     u5375:	
 18346  1970  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 18347  1971  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 18348  1972  0CC1               	rrf	___ftadd@f1^(0+128),f
 18349  1973  0B89               	decfsz	9,f
 18350  1974  2970               	goto	u5375
 18351  1975  3001               	movlw	1
 18352  1976  00C7               	movwf	??___ftadd^(0+128)
 18353  1977  0847               	movf	??___ftadd^(0+128),w
 18354  1978  07CD               	addwf	___ftadd@exp1^(0+128),f
 18355  1979                     l6417:	
 18356  1979  084D               	movf	___ftadd@exp1^(0+128),w
 18357  197A  064C               	xorwf	___ftadd@exp2^(0+128),w
 18358  197B  1903               	btfsc	3,2
 18359  197C  29A3               	goto	l2645
 18360  197D  296F               	goto	l6415
 18361  197E                     l6419:	
 18362  197E  084D               	movf	___ftadd@exp1^(0+128),w
 18363  197F  024C               	subwf	___ftadd@exp2^(0+128),w
 18364  1980  1803               	skipnc
 18365  1981  29A3               	goto	l2645
 18366  1982                     l6421:	
 18367  1982  3001               	movlw	1
 18368  1983                     u5405:	
 18369  1983  35C1               	lslf	___ftadd@f1^(0+128),f
 18370  1984  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 18371  1985  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 18372  1986  0B89               	decfsz	9,f
 18373  1987  2983               	goto	u5405
 18374  1988  3001               	movlw	1
 18375  1989  02CD               	subwf	___ftadd@exp1^(0+128),f
 18376  198A  084C               	movf	___ftadd@exp2^(0+128),w
 18377  198B  064D               	xorwf	___ftadd@exp1^(0+128),w
 18378  198C  1903               	skipnz
 18379  198D  299F               	goto	l6429
 18380  198E  3001               	movlw	1
 18381  198F  02CB               	subwf	___ftadd@sign^(0+128),f
 18382  1990  084B               	movf	___ftadd@sign^(0+128),w
 18383  1991  3907               	andlw	7
 18384  1992  1903               	btfsc	3,2
 18385  1993  299F               	goto	l6429
 18386  1994  2982               	goto	l6421
 18387  1995                     l6427:	
 18388  1995  3001               	movlw	1
 18389  1996                     u5435:	
 18390  1996  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 18391  1997  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 18392  1998  0CC4               	rrf	___ftadd@f2^(0+128),f
 18393  1999  0B89               	decfsz	9,f
 18394  199A  2996               	goto	u5435
 18395  199B  3001               	movlw	1
 18396  199C  00C7               	movwf	??___ftadd^(0+128)
 18397  199D  0847               	movf	??___ftadd^(0+128),w
 18398  199E  07CC               	addwf	___ftadd@exp2^(0+128),f
 18399  199F                     l6429:	
 18400  199F  084D               	movf	___ftadd@exp1^(0+128),w
 18401  19A0  064C               	xorwf	___ftadd@exp2^(0+128),w
 18402  19A1  1D03               	skipz
 18403  19A2  2995               	goto	l6427
 18404  19A3                     l2645:	
 18405  19A3  1FCB               	btfss	___ftadd@sign^(0+128),7
 18406  19A4  29B5               	goto	l6433
 18407  19A5  30FF               	movlw	255
 18408  19A6  06C1               	xorwf	___ftadd@f1^(0+128),f
 18409  19A7  30FF               	movlw	255
 18410  19A8  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 18411  19A9  30FF               	movlw	255
 18412  19AA  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 18413  19AB  3001               	movlw	1
 18414  19AC  07C1               	addwf	___ftadd@f1^(0+128),f
 18415  19AD  3000               	movlw	0
 18416  19AE  1803               	skipnc
 18417  19AF  3001               	movlw	1
 18418  19B0  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 18419  19B1  3000               	movlw	0
 18420  19B2  1803               	skipnc
 18421  19B3  3001               	movlw	1
 18422  19B4  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 18423  19B5                     l6433:	
 18424  19B5  1F4B               	btfss	___ftadd@sign^(0+128),6
 18425  19B6  29C7               	goto	l6437
 18426  19B7  30FF               	movlw	255
 18427  19B8  06C4               	xorwf	___ftadd@f2^(0+128),f
 18428  19B9  30FF               	movlw	255
 18429  19BA  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 18430  19BB  30FF               	movlw	255
 18431  19BC  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 18432  19BD  3001               	movlw	1
 18433  19BE  07C4               	addwf	___ftadd@f2^(0+128),f
 18434  19BF  3000               	movlw	0
 18435  19C0  1803               	skipnc
 18436  19C1  3001               	movlw	1
 18437  19C2  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 18438  19C3  3000               	movlw	0
 18439  19C4  1803               	skipnc
 18440  19C5  3001               	movlw	1
 18441  19C6  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 18442  19C7                     l6437:	
 18443  19C7  01CB               	clrf	___ftadd@sign^(0+128)
 18444  19C8  0841               	movf	___ftadd@f1^(0+128),w
 18445  19C9  07C4               	addwf	___ftadd@f2^(0+128),f
 18446  19CA  0842               	movf	(___ftadd@f1+1)^(0+128),w
 18447  19CB  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 18448  19CC  0843               	movf	(___ftadd@f1+2)^(0+128),w
 18449  19CD  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 18450  19CE  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 18451  19CF  29E2               	goto	l6447
 18452  19D0  30FF               	movlw	255
 18453  19D1  06C4               	xorwf	___ftadd@f2^(0+128),f
 18454  19D2  30FF               	movlw	255
 18455  19D3  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 18456  19D4  30FF               	movlw	255
 18457  19D5  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 18458  19D6  3001               	movlw	1
 18459  19D7  07C4               	addwf	___ftadd@f2^(0+128),f
 18460  19D8  3000               	movlw	0
 18461  19D9  1803               	skipnc
 18462  19DA  3001               	movlw	1
 18463  19DB  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 18464  19DC  3000               	movlw	0
 18465  19DD  1803               	skipnc
 18466  19DE  3001               	movlw	1
 18467  19DF  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 18468  19E0  01CB               	clrf	___ftadd@sign^(0+128)
 18469  19E1  0ACB               	incf	___ftadd@sign^(0+128),f
 18470  19E2                     l6447:	
 18471  19E2  0844               	movf	___ftadd@f2^(0+128),w
 18472  19E3  00A0               	movwf	___ftpack@arg^(0+128)
 18473  19E4  0845               	movf	(___ftadd@f2+1)^(0+128),w
 18474  19E5  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 18475  19E6  0846               	movf	(___ftadd@f2+2)^(0+128),w
 18476  19E7  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 18477  19E8  084D               	movf	___ftadd@exp1^(0+128),w
 18478  19E9  00C7               	movwf	??___ftadd^(0+128)
 18479  19EA  0847               	movf	??___ftadd^(0+128),w
 18480  19EB  00A3               	movwf	___ftpack@exp^(0+128)
 18481  19EC  084B               	movf	___ftadd@sign^(0+128),w
 18482  19ED  00C8               	movwf	(??___ftadd+1)^(0+128)
 18483  19EE  0848               	movf	(??___ftadd+1)^(0+128),w
 18484  19EF  00A4               	movwf	___ftpack@sign^(0+128)
 18485  19F0  31AD  2541         	fcall	___ftpack
 18486  19F2  0021               	movlb	1	; select bank1
 18487  19F3  0820               	movf	?___ftpack^(0+128),w
 18488  19F4  00C1               	movwf	?___ftadd^(0+128)
 18489  19F5  0821               	movf	(?___ftpack+1)^(0+128),w
 18490  19F6  00C2               	movwf	(?___ftadd+1)^(0+128)
 18491  19F7  0822               	movf	(?___ftpack+2)^(0+128),w
 18492  19F8  00C3               	movwf	(?___ftadd+2)^(0+128)
 18493  19F9  0008               	return
 18494  19FA                     __end_of___ftadd:	
 18495                           
 18496                           	psect	text72
 18497  3FD2                     __ptext72:	
 18498 ;; *************** function ___ftneg *****************
 18499 ;; Defined at:
 18500 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 18501 ;; Parameters:    Size  Location     Type
 18502 ;;  f1              3   30[BANK1 ] float 
 18503 ;; Auto vars:     Size  Location     Type
 18504 ;;		None
 18505 ;; Return value:  Size  Location     Type
 18506 ;;                  3   30[BANK1 ] float 
 18507 ;; Registers used:
 18508 ;;		wreg
 18509 ;; Tracked objects:
 18510 ;;		On entry : 0/0
 18511 ;;		On exit  : 0/0
 18512 ;;		Unchanged: 0/0
 18513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18514 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18517 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18518 ;;Total ram usage:        3 bytes
 18519 ;; Hardware stack levels used:    1
 18520 ;; Hardware stack levels required when called:    5
 18521 ;; This function calls:
 18522 ;;		Nothing
 18523 ;; This function is called by:
 18524 ;;		_map
 18525 ;;		_scaleiA10kPot
 18526 ;;		_modCos
 18527 ;;		_modTri
 18528 ;;		_modSaw
 18529 ;;		_setFrequency
 18530 ;;		_pow
 18531 ;;		_sin
 18532 ;;		_exp
 18533 ;;		_ldexp
 18534 ;;		_scalePotValue
 18535 ;; This function uses a non-reentrant model
 18536 ;;
 18537                           
 18538                           
 18539                           ;psect for function ___ftneg
 18540  3FD2                     ___ftneg:	
 18541                           
 18542                           ;incstack = 0
 18543                           ; Regs used in ___ftneg: [wreg]
 18544  3FD2  0021               	movlb	1	; select bank1
 18545  3FD3  0840               	movf	(___ftneg@f1+2)^(0+128),w
 18546  3FD4  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 18547  3FD5  043E               	iorwf	___ftneg@f1^(0+128),w
 18548  3FD6  1903               	skipnz
 18549  3FD7  0008               	return
 18550  3FD8  3080               	movlw	128
 18551  3FD9  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 18552  3FDA  0008               	return
 18553  3FDB                     __end_of___ftneg:	
 18554                           
 18555                           	psect	text73
 18556  2434                     __ptext73:	
 18557 ;; *************** function ___ftdiv *****************
 18558 ;; Defined at:
 18559 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 18560 ;; Parameters:    Size  Location     Type
 18561 ;;  f2              3   46[BANK1 ] float 
 18562 ;;  f1              3   49[BANK1 ] float 
 18563 ;; Auto vars:     Size  Location     Type
 18564 ;;  f3              3   57[BANK1 ] float 
 18565 ;;  sign            1   61[BANK1 ] unsigned char 
 18566 ;;  exp             1   60[BANK1 ] unsigned char 
 18567 ;;  cntr            1   56[BANK1 ] unsigned char 
 18568 ;; Return value:  Size  Location     Type
 18569 ;;                  3   46[BANK1 ] float 
 18570 ;; Registers used:
 18571 ;;		wreg, status,2, status,0, pclath, cstack
 18572 ;; Tracked objects:
 18573 ;;		On entry : 0/0
 18574 ;;		On exit  : 0/0
 18575 ;;		Unchanged: 0/0
 18576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18577 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18578 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18579 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18580 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18581 ;;Total ram usage:       16 bytes
 18582 ;; Hardware stack levels used:    1
 18583 ;; Hardware stack levels required when called:    6
 18584 ;; This function calls:
 18585 ;;		___ftpack
 18586 ;; This function is called by:
 18587 ;;		_map
 18588 ;;		_scaleA100kPot
 18589 ;;		_scaleA10kPot
 18590 ;;		_scaleiA10kPot
 18591 ;;		_calcCosArray
 18592 ;;		_getModulationDelayTime
 18593 ;;		_modCos
 18594 ;;		_modTri
 18595 ;;		_modSaw
 18596 ;;		_sin
 18597 ;;		_exp
 18598 ;;		_scalePotValue
 18599 ;;		_scaleiA100kPot
 18600 ;;		_scaleA25kPot
 18601 ;;		_scaleiA25kPot
 18602 ;; This function uses a non-reentrant model
 18603 ;;
 18604                           
 18605                           
 18606                           ;psect for function ___ftdiv
 18607  2434                     ___ftdiv:	
 18608                           
 18609                           ;incstack = 0
 18610                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18611  2434  0021               	movlb	1	; select bank1
 18612  2435  0851               	movf	___ftdiv@f1^(0+128),w
 18613  2436  00D4               	movwf	??___ftdiv^(0+128)
 18614  2437  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 18615  2438  00D5               	movwf	(??___ftdiv^(0+128)+1)
 18616  2439  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 18617  243A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 18618  243B  1003               	clrc
 18619  243C  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 18620  243D  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 18621  243E  00D7               	movwf	(??___ftdiv+3)^(0+128)
 18622  243F  0857               	movf	(??___ftdiv+3)^(0+128),w
 18623  2440  00DC               	movwf	___ftdiv@exp^(0+128)
 18624  2441  085C               	movf	___ftdiv@exp^(0+128),w
 18625  2442  1D03               	btfss	3,2
 18626  2443  2C4B               	goto	l6711
 18627  2444  3000               	movlw	0
 18628  2445  00CE               	movwf	?___ftdiv^(0+128)
 18629  2446  3000               	movlw	0
 18630  2447  00CF               	movwf	(?___ftdiv+1)^(0+128)
 18631  2448  3000               	movlw	0
 18632  2449  00D0               	movwf	(?___ftdiv+2)^(0+128)
 18633  244A  0008               	return
 18634  244B                     l6711:	
 18635  244B  084E               	movf	___ftdiv@f2^(0+128),w
 18636  244C  00D4               	movwf	??___ftdiv^(0+128)
 18637  244D  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 18638  244E  00D5               	movwf	(??___ftdiv^(0+128)+1)
 18639  244F  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 18640  2450  00D6               	movwf	(??___ftdiv^(0+128)+2)
 18641  2451  1003               	clrc
 18642  2452  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 18643  2453  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 18644  2454  00D7               	movwf	(??___ftdiv+3)^(0+128)
 18645  2455  0857               	movf	(??___ftdiv+3)^(0+128),w
 18646  2456  00DD               	movwf	___ftdiv@sign^(0+128)
 18647  2457  085D               	movf	___ftdiv@sign^(0+128),w
 18648  2458  1D03               	btfss	3,2
 18649  2459  2C61               	goto	l6717
 18650  245A  3000               	movlw	0
 18651  245B  00CE               	movwf	?___ftdiv^(0+128)
 18652  245C  3000               	movlw	0
 18653  245D  00CF               	movwf	(?___ftdiv+1)^(0+128)
 18654  245E  3000               	movlw	0
 18655  245F  00D0               	movwf	(?___ftdiv+2)^(0+128)
 18656  2460  0008               	return
 18657  2461                     l6717:	
 18658  2461  3000               	movlw	0
 18659  2462  00D9               	movwf	___ftdiv@f3^(0+128)
 18660  2463  3000               	movlw	0
 18661  2464  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 18662  2465  3000               	movlw	0
 18663  2466  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 18664  2467  3089               	movlw	137
 18665  2468  075D               	addwf	___ftdiv@sign^(0+128),w
 18666  2469  00D4               	movwf	??___ftdiv^(0+128)
 18667  246A  0854               	movf	??___ftdiv^(0+128),w
 18668  246B  02DC               	subwf	___ftdiv@exp^(0+128),f
 18669  246C  0851               	movf	___ftdiv@f1^(0+128),w
 18670  246D  00D4               	movwf	??___ftdiv^(0+128)
 18671  246E  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 18672  246F  00D5               	movwf	(??___ftdiv^(0+128)+1)
 18673  2470  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 18674  2471  00D6               	movwf	(??___ftdiv^(0+128)+2)
 18675  2472  3010               	movlw	16
 18676  2473                     u5935:	
 18677  2473  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 18678  2474  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 18679  2475  0CD4               	rrf	??___ftdiv^(0+128),f
 18680  2476  0B89               	decfsz	9,f
 18681  2477  2C73               	goto	u5935
 18682  2478  0854               	movf	??___ftdiv^(0+128),w
 18683  2479  00D7               	movwf	(??___ftdiv+3)^(0+128)
 18684  247A  0857               	movf	(??___ftdiv+3)^(0+128),w
 18685  247B  00DD               	movwf	___ftdiv@sign^(0+128)
 18686  247C  084E               	movf	___ftdiv@f2^(0+128),w
 18687  247D  00D4               	movwf	??___ftdiv^(0+128)
 18688  247E  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 18689  247F  00D5               	movwf	(??___ftdiv^(0+128)+1)
 18690  2480  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 18691  2481  00D6               	movwf	(??___ftdiv^(0+128)+2)
 18692  2482  3010               	movlw	16
 18693  2483                     u5945:	
 18694  2483  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 18695  2484  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 18696  2485  0CD4               	rrf	??___ftdiv^(0+128),f
 18697  2486  0B89               	decfsz	9,f
 18698  2487  2C83               	goto	u5945
 18699  2488  0854               	movf	??___ftdiv^(0+128),w
 18700  2489  00D7               	movwf	(??___ftdiv+3)^(0+128)
 18701  248A  0857               	movf	(??___ftdiv+3)^(0+128),w
 18702  248B  06DD               	xorwf	___ftdiv@sign^(0+128),f
 18703  248C  3080               	movlw	128
 18704  248D  00D4               	movwf	??___ftdiv^(0+128)
 18705  248E  0854               	movf	??___ftdiv^(0+128),w
 18706  248F  05DD               	andwf	___ftdiv@sign^(0+128),f
 18707  2490  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 18708  2491  30FF               	movlw	255
 18709  2492  05D1               	andwf	___ftdiv@f1^(0+128),f
 18710  2493  30FF               	movlw	255
 18711  2494  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 18712  2495  3000               	movlw	0
 18713  2496  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 18714  2497  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 18715  2498  30FF               	movlw	255
 18716  2499  05CE               	andwf	___ftdiv@f2^(0+128),f
 18717  249A  30FF               	movlw	255
 18718  249B  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 18719  249C  3000               	movlw	0
 18720  249D  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 18721  249E  3018               	movlw	24
 18722  249F  00D4               	movwf	??___ftdiv^(0+128)
 18723  24A0  0854               	movf	??___ftdiv^(0+128),w
 18724  24A1  00D8               	movwf	___ftdiv@cntr^(0+128)
 18725  24A2                     l6731:	
 18726  24A2  3001               	movlw	1
 18727  24A3                     u5955:	
 18728  24A3  35D9               	lslf	___ftdiv@f3^(0+128),f
 18729  24A4  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 18730  24A5  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 18731  24A6  0B89               	decfsz	9,f
 18732  24A7  2CA3               	goto	u5955
 18733  24A8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 18734  24A9  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 18735  24AA  1D03               	skipz
 18736  24AB  2CB2               	goto	u5965
 18737  24AC  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 18738  24AD  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 18739  24AE  1D03               	skipz
 18740  24AF  2CB2               	goto	u5965
 18741  24B0  084E               	movf	___ftdiv@f2^(0+128),w
 18742  24B1  0251               	subwf	___ftdiv@f1^(0+128),w
 18743  24B2                     u5965:	
 18744  24B2  1C03               	skipc
 18745  24B3  2CBB               	goto	l6739
 18746  24B4  084E               	movf	___ftdiv@f2^(0+128),w
 18747  24B5  02D1               	subwf	___ftdiv@f1^(0+128),f
 18748  24B6  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 18749  24B7  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 18750  24B8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 18751  24B9  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 18752  24BA  1459               	bsf	___ftdiv@f3^(0+128),0
 18753  24BB                     l6739:	
 18754  24BB  3001               	movlw	1
 18755  24BC                     u5975:	
 18756  24BC  35D1               	lslf	___ftdiv@f1^(0+128),f
 18757  24BD  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 18758  24BE  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 18759  24BF  0B89               	decfsz	9,f
 18760  24C0  2CBC               	goto	u5975
 18761  24C1  3001               	movlw	1
 18762  24C2  02D8               	subwf	___ftdiv@cntr^(0+128),f
 18763  24C3  1D03               	btfss	3,2
 18764  24C4  2CA2               	goto	l6731
 18765  24C5  0859               	movf	___ftdiv@f3^(0+128),w
 18766  24C6  00A0               	movwf	___ftpack@arg^(0+128)
 18767  24C7  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 18768  24C8  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 18769  24C9  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 18770  24CA  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 18771  24CB  085C               	movf	___ftdiv@exp^(0+128),w
 18772  24CC  00D4               	movwf	??___ftdiv^(0+128)
 18773  24CD  0854               	movf	??___ftdiv^(0+128),w
 18774  24CE  00A3               	movwf	___ftpack@exp^(0+128)
 18775  24CF  085D               	movf	___ftdiv@sign^(0+128),w
 18776  24D0  00D5               	movwf	(??___ftdiv+1)^(0+128)
 18777  24D1  0855               	movf	(??___ftdiv+1)^(0+128),w
 18778  24D2  00A4               	movwf	___ftpack@sign^(0+128)
 18779  24D3  31AD  2541         	fcall	___ftpack
 18780  24D5  0021               	movlb	1	; select bank1
 18781  24D6  0820               	movf	?___ftpack^(0+128),w
 18782  24D7  00CE               	movwf	?___ftdiv^(0+128)
 18783  24D8  0821               	movf	(?___ftpack+1)^(0+128),w
 18784  24D9  00CF               	movwf	(?___ftdiv+1)^(0+128)
 18785  24DA  0822               	movf	(?___ftpack+2)^(0+128),w
 18786  24DB  00D0               	movwf	(?___ftdiv+2)^(0+128)
 18787  24DC  0008               	return
 18788  24DD                     __end_of___ftdiv:	
 18789                           
 18790                           	psect	text74
 18791  32EC                     __ptext74:	
 18792 ;; *************** function ___awtoft *****************
 18793 ;; Defined at:
 18794 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 18795 ;; Parameters:    Size  Location     Type
 18796 ;;  c               2    8[BANK1 ] int 
 18797 ;; Auto vars:     Size  Location     Type
 18798 ;;  sign            1   13[BANK1 ] unsigned char 
 18799 ;; Return value:  Size  Location     Type
 18800 ;;                  3    8[BANK1 ] float 
 18801 ;; Registers used:
 18802 ;;		wreg, status,2, status,0, pclath, cstack
 18803 ;; Tracked objects:
 18804 ;;		On entry : 0/0
 18805 ;;		On exit  : 0/0
 18806 ;;		Unchanged: 0/0
 18807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18808 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18809 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18810 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18811 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18812 ;;Total ram usage:        6 bytes
 18813 ;; Hardware stack levels used:    1
 18814 ;; Hardware stack levels required when called:    6
 18815 ;; This function calls:
 18816 ;;		___ftpack
 18817 ;; This function is called by:
 18818 ;;		_main
 18819 ;;		_set_subdivision
 18820 ;;		_calcCosArray
 18821 ;;		_getModulationDelayTime
 18822 ;;		_updateModulationArray
 18823 ;;		_setVolume
 18824 ;;		_setFrequency
 18825 ;;		_setSymmetry
 18826 ;;		_exp
 18827 ;;		_log
 18828 ;; This function uses a non-reentrant model
 18829 ;;
 18830                           
 18831                           
 18832                           ;psect for function ___awtoft
 18833  32EC                     ___awtoft:	
 18834                           
 18835                           ;incstack = 0
 18836                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18837  32EC  0021               	movlb	1	; select bank1
 18838  32ED  01AD               	clrf	___awtoft@sign^(0+128)
 18839  32EE  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 18840  32EF  2AF7               	goto	l6701
 18841  32F0  09A8               	comf	___awtoft@c^(0+128),f
 18842  32F1  09A9               	comf	(___awtoft@c+1)^(0+128),f
 18843  32F2  0AA8               	incf	___awtoft@c^(0+128),f
 18844  32F3  1903               	skipnz
 18845  32F4  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 18846  32F5  01AD               	clrf	___awtoft@sign^(0+128)
 18847  32F6  0AAD               	incf	___awtoft@sign^(0+128),f
 18848  32F7                     l6701:	
 18849  32F7  0828               	movf	___awtoft@c^(0+128),w
 18850  32F8  00A0               	movwf	___ftpack@arg^(0+128)
 18851  32F9  0829               	movf	(___awtoft@c+1)^(0+128),w
 18852  32FA  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 18853  32FB  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 18854  32FC  308E               	movlw	142
 18855  32FD  00AB               	movwf	??___awtoft^(0+128)
 18856  32FE  082B               	movf	??___awtoft^(0+128),w
 18857  32FF  00A3               	movwf	___ftpack@exp^(0+128)
 18858  3300  082D               	movf	___awtoft@sign^(0+128),w
 18859  3301  00AC               	movwf	(??___awtoft+1)^(0+128)
 18860  3302  082C               	movf	(??___awtoft+1)^(0+128),w
 18861  3303  00A4               	movwf	___ftpack@sign^(0+128)
 18862  3304  31AD  2541         	fcall	___ftpack
 18863  3306  0021               	movlb	1	; select bank1
 18864  3307  0820               	movf	?___ftpack^(0+128),w
 18865  3308  00A8               	movwf	?___awtoft^(0+128)
 18866  3309  0821               	movf	(?___ftpack+1)^(0+128),w
 18867  330A  00A9               	movwf	(?___awtoft+1)^(0+128)
 18868  330B  0822               	movf	(?___ftpack+2)^(0+128),w
 18869  330C  00AA               	movwf	(?___awtoft+2)^(0+128)
 18870  330D  0008               	return
 18871  330E                     __end_of___awtoft:	
 18872                           
 18873                           	psect	text75
 18874  3145                     __ptext75:	
 18875 ;; *************** function _adc_convert *****************
 18876 ;; Defined at:
 18877 ;;		line 122 in file "user.c"
 18878 ;; Parameters:    Size  Location     Type
 18879 ;;  channel         1    wreg     unsigned char 
 18880 ;; Auto vars:     Size  Location     Type
 18881 ;;  channel         1    3[BANK1 ] unsigned char 
 18882 ;; Return value:  Size  Location     Type
 18883 ;;                  2    0[BANK1 ] unsigned int 
 18884 ;; Registers used:
 18885 ;;		wreg, status,2, status,0
 18886 ;; Tracked objects:
 18887 ;;		On entry : 0/0
 18888 ;;		On exit  : 0/0
 18889 ;;		Unchanged: 0/0
 18890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18891 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18892 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18893 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18894 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18895 ;;Total ram usage:        4 bytes
 18896 ;; Hardware stack levels used:    1
 18897 ;; Hardware stack levels required when called:    5
 18898 ;; This function calls:
 18899 ;;		Nothing
 18900 ;; This function is called by:
 18901 ;;		_main
 18902 ;; This function uses a non-reentrant model
 18903 ;;
 18904                           
 18905                           
 18906                           ;psect for function _adc_convert
 18907  3145                     _adc_convert:	
 18908                           
 18909                           ;incstack = 0
 18910                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 18911                           ;adc_convert@channel stored from wreg
 18912  3145  0021               	movlb	1	; select bank1
 18913  3146  00A3               	movwf	adc_convert@channel^(0+128)
 18914                           
 18915                           ;user.c: 123: ADCON0bits.CHS = channel;
 18916  3147  0823               	movf	adc_convert@channel^(0+128),w
 18917  3148  00A2               	movwf	??_adc_convert^(0+128)
 18918  3149  0DA2               	rlf	??_adc_convert^(0+128),f
 18919  314A  0DA2               	rlf	??_adc_convert^(0+128),f
 18920  314B  081D               	movf	29,w	;volatile
 18921  314C  0622               	xorwf	??_adc_convert^(0+128),w
 18922  314D  3983               	andlw	-125
 18923  314E  0622               	xorwf	??_adc_convert^(0+128),w
 18924  314F  009D               	movwf	29	;volatile
 18925                           
 18926                           ;user.c: 124: ADCON0bits.GO = 0b1;
 18927  3150  149D               	bsf	29,1	;volatile
 18928  3151                     l707:	
 18929                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 18930                           
 18931  3151  189D               	btfsc	29,1	;volatile
 18932  3152  2951               	goto	l707
 18933                           
 18934                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 18935  3153  081C               	movf	28,w	;volatile
 18936  3154  00A1               	movwf	(?_adc_convert+1)^(0+128)
 18937  3155  081B               	movf	27,w	;volatile
 18938  3156  00A0               	movwf	?_adc_convert^(0+128)
 18939  3157  0008               	return
 18940  3158                     __end_of_adc_convert:	
 18941                           
 18942                           	psect	text76
 18943  1000                     __ptext76:	
 18944 ;; *************** function ___lbtoft *****************
 18945 ;; Defined at:
 18946 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbtoft.c"
 18947 ;; Parameters:    Size  Location     Type
 18948 ;;  c               1    wreg     unsigned char 
 18949 ;; Auto vars:     Size  Location     Type
 18950 ;;  c               1   15[BANK1 ] unsigned char 
 18951 ;; Return value:  Size  Location     Type
 18952 ;;                  3    8[BANK1 ] float 
 18953 ;; Registers used:
 18954 ;;		wreg, status,2, status,0, pclath, cstack
 18955 ;; Tracked objects:
 18956 ;;		On entry : 0/0
 18957 ;;		On exit  : 0/0
 18958 ;;		Unchanged: 0/0
 18959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18960 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18961 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18962 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18963 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18964 ;;Total ram usage:        8 bytes
 18965 ;; Hardware stack levels used:    1
 18966 ;; Hardware stack levels required when called:    6
 18967 ;; This function calls:
 18968 ;;		___ftpack
 18969 ;; This function is called by:
 18970 ;;		_main
 18971 ;; This function uses a non-reentrant model
 18972 ;;
 18973                           
 18974                           
 18975                           ;psect for function ___lbtoft
 18976  1000                     ___lbtoft:	
 18977                           
 18978                           ;incstack = 0
 18979                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
 18980                           ;___lbtoft@c stored from wreg
 18981  1000  0021               	movlb	1	; select bank1
 18982  1001  00AF               	movwf	___lbtoft@c^(0+128)
 18983  1002  082F               	movf	___lbtoft@c^(0+128),w
 18984  1003  00AB               	movwf	??___lbtoft^(0+128)
 18985  1004  01AC               	clrf	(??___lbtoft^(0+128)+1)
 18986  1005  01AD               	clrf	(??___lbtoft^(0+128)+2)
 18987  1006  082B               	movf	??___lbtoft^(0+128),w
 18988  1007  00A0               	movwf	___ftpack@arg^(0+128)
 18989  1008  082C               	movf	(??___lbtoft+1)^(0+128),w
 18990  1009  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 18991  100A  082D               	movf	(??___lbtoft+2)^(0+128),w
 18992  100B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 18993  100C  308E               	movlw	142
 18994  100D  00AE               	movwf	(??___lbtoft+3)^(0+128)
 18995  100E  082E               	movf	(??___lbtoft+3)^(0+128),w
 18996  100F  00A3               	movwf	___ftpack@exp^(0+128)
 18997  1010  01A4               	clrf	___ftpack@sign^(0+128)
 18998  1011  31AD  2541         	fcall	___ftpack
 18999  1013  0021               	movlb	1	; select bank1
 19000  1014  0820               	movf	?___ftpack^(0+128),w
 19001  1015  00A8               	movwf	?___lbtoft^(0+128)
 19002  1016  0821               	movf	(?___ftpack+1)^(0+128),w
 19003  1017  00A9               	movwf	(?___lbtoft+1)^(0+128)
 19004  1018  0822               	movf	(?___ftpack+2)^(0+128),w
 19005  1019  00AA               	movwf	(?___lbtoft+2)^(0+128)
 19006  101A  0008               	return
 19007  101B                     __end_of___lbtoft:	
 19008                           
 19009                           	psect	text77
 19010  2D41                     __ptext77:	
 19011 ;; *************** function ___ftpack *****************
 19012 ;; Defined at:
 19013 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 19014 ;; Parameters:    Size  Location     Type
 19015 ;;  arg             3    0[BANK1 ] unsigned um
 19016 ;;  exp             1    3[BANK1 ] unsigned char 
 19017 ;;  sign            1    4[BANK1 ] unsigned char 
 19018 ;; Auto vars:     Size  Location     Type
 19019 ;;		None
 19020 ;; Return value:  Size  Location     Type
 19021 ;;                  3    0[BANK1 ] float 
 19022 ;; Registers used:
 19023 ;;		wreg, status,2, status,0
 19024 ;; Tracked objects:
 19025 ;;		On entry : 0/0
 19026 ;;		On exit  : 0/0
 19027 ;;		Unchanged: 0/0
 19028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19029 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19031 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19032 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19033 ;;Total ram usage:        8 bytes
 19034 ;; Hardware stack levels used:    1
 19035 ;; Hardware stack levels required when called:    5
 19036 ;; This function calls:
 19037 ;;		Nothing
 19038 ;; This function is called by:
 19039 ;;		___altoft
 19040 ;;		___awtoft
 19041 ;;		___ftadd
 19042 ;;		___ftdiv
 19043 ;;		___ftmul
 19044 ;;		___lbtoft
 19045 ;;		___lltoft
 19046 ;; This function uses a non-reentrant model
 19047 ;;
 19048                           
 19049                           
 19050                           ;psect for function ___ftpack
 19051  2D41                     ___ftpack:	
 19052                           
 19053                           ;incstack = 0
 19054                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 19055  2D41  0021               	movlb	1	; select bank1
 19056  2D42  0823               	movf	___ftpack@exp^(0+128),w
 19057  2D43  1903               	btfsc	3,2
 19058  2D44  2D4A               	goto	l6231
 19059  2D45  0822               	movf	(___ftpack@arg+2)^(0+128),w
 19060  2D46  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 19061  2D47  0420               	iorwf	___ftpack@arg^(0+128),w
 19062  2D48  1D03               	skipz
 19063  2D49  2D5B               	goto	l6237
 19064  2D4A                     l6231:	
 19065  2D4A  3000               	movlw	0
 19066  2D4B  00A0               	movwf	?___ftpack^(0+128)
 19067  2D4C  3000               	movlw	0
 19068  2D4D  00A1               	movwf	(?___ftpack+1)^(0+128)
 19069  2D4E  3000               	movlw	0
 19070  2D4F  00A2               	movwf	(?___ftpack+2)^(0+128)
 19071  2D50  0008               	return
 19072  2D51                     l6235:	
 19073  2D51  3001               	movlw	1
 19074  2D52  00A5               	movwf	??___ftpack^(0+128)
 19075  2D53  0825               	movf	??___ftpack^(0+128),w
 19076  2D54  07A3               	addwf	___ftpack@exp^(0+128),f
 19077  2D55  3001               	movlw	1
 19078  2D56                     u4885:	
 19079  2D56  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 19080  2D57  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 19081  2D58  0CA0               	rrf	___ftpack@arg^(0+128),f
 19082  2D59  0B89               	decfsz	9,f
 19083  2D5A  2D56               	goto	u4885
 19084  2D5B                     l6237:	
 19085  2D5B  30FE               	movlw	254
 19086  2D5C  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 19087  2D5D  1903               	btfsc	3,2
 19088  2D5E  2D74               	goto	l2614
 19089  2D5F  2D51               	goto	l6235
 19090  2D60                     l6239:	
 19091  2D60  3001               	movlw	1
 19092  2D61  00A5               	movwf	??___ftpack^(0+128)
 19093  2D62  0825               	movf	??___ftpack^(0+128),w
 19094  2D63  07A3               	addwf	___ftpack@exp^(0+128),f
 19095  2D64  3001               	movlw	1
 19096  2D65  07A0               	addwf	___ftpack@arg^(0+128),f
 19097  2D66  3000               	movlw	0
 19098  2D67  1803               	skipnc
 19099  2D68  3001               	movlw	1
 19100  2D69  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 19101  2D6A  3000               	movlw	0
 19102  2D6B  1803               	skipnc
 19103  2D6C  3001               	movlw	1
 19104  2D6D  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 19105  2D6E  3001               	movlw	1
 19106  2D6F                     u4905:	
 19107  2D6F  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 19108  2D70  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 19109  2D71  0CA0               	rrf	___ftpack@arg^(0+128),f
 19110  2D72  0B89               	decfsz	9,f
 19111  2D73  2D6F               	goto	u4905
 19112  2D74                     l2614:	
 19113  2D74  30FF               	movlw	255
 19114  2D75  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 19115  2D76  1903               	btfsc	3,2
 19116  2D77  2D81               	goto	l6247
 19117  2D78  2D60               	goto	l6239
 19118  2D79                     l6245:	
 19119  2D79  3001               	movlw	1
 19120  2D7A  02A3               	subwf	___ftpack@exp^(0+128),f
 19121  2D7B  3001               	movlw	1
 19122  2D7C                     u4925:	
 19123  2D7C  35A0               	lslf	___ftpack@arg^(0+128),f
 19124  2D7D  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 19125  2D7E  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 19126  2D7F  0B89               	decfsz	9,f
 19127  2D80  2D7C               	goto	u4925
 19128  2D81                     l6247:	
 19129  2D81  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 19130  2D82  2D87               	goto	l2621
 19131  2D83  3002               	movlw	2
 19132  2D84  0223               	subwf	___ftpack@exp^(0+128),w
 19133  2D85  1803               	skipnc
 19134  2D86  2D79               	goto	l6245
 19135  2D87                     l2621:	
 19136  2D87  1823               	btfsc	___ftpack@exp^(0+128),0
 19137  2D88  2D8F               	goto	l2622
 19138  2D89  30FF               	movlw	255
 19139  2D8A  05A0               	andwf	___ftpack@arg^(0+128),f
 19140  2D8B  307F               	movlw	127
 19141  2D8C  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 19142  2D8D  30FF               	movlw	255
 19143  2D8E  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 19144  2D8F                     l2622:	
 19145  2D8F  1003               	clrc
 19146  2D90  0CA3               	rrf	___ftpack@exp^(0+128),f
 19147  2D91  0823               	movf	___ftpack@exp^(0+128),w
 19148  2D92  00A5               	movwf	??___ftpack^(0+128)
 19149  2D93  01A6               	clrf	(??___ftpack^(0+128)+1)
 19150  2D94  01A7               	clrf	(??___ftpack^(0+128)+2)
 19151  2D95  3010               	movlw	16
 19152  2D96                     u4965:	
 19153  2D96  35A5               	lslf	??___ftpack^(0+128),f
 19154  2D97  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 19155  2D98  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 19156  2D99  0B89               	decfsz	9,f
 19157  2D9A  2D96               	goto	u4965
 19158  2D9B  0825               	movf	??___ftpack^(0+128),w
 19159  2D9C  04A0               	iorwf	___ftpack@arg^(0+128),f
 19160  2D9D  0826               	movf	(??___ftpack+1)^(0+128),w
 19161  2D9E  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 19162  2D9F  0827               	movf	(??___ftpack+2)^(0+128),w
 19163  2DA0  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 19164  2DA1  0824               	movf	___ftpack@sign^(0+128),w
 19165  2DA2  1903               	btfsc	3,2
 19166  2DA3  0008               	return
 19167  2DA4  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 19168  2DA5  0008               	return
 19169  2DA6                     __end_of___ftpack:	
 19170                           
 19171                           	psect	text78
 19172  328C                     __ptext78:	
 19173 ;; *************** function _USARTReadBuffer *****************
 19174 ;; Defined at:
 19175 ;;		line 195 in file "usart_pic16.c"
 19176 ;; Parameters:    Size  Location     Type
 19177 ;;  buff            1    wreg     PTR unsigned char 
 19178 ;;		 -> midiBuff(64), 
 19179 ;;  len             2    2[BANK1 ] unsigned int 
 19180 ;; Auto vars:     Size  Location     Type
 19181 ;;  buff            1    6[BANK1 ] PTR unsigned char 
 19182 ;;		 -> midiBuff(64), 
 19183 ;;  i               2    7[BANK1 ] unsigned int 
 19184 ;; Return value:  Size  Location     Type
 19185 ;;                  1    wreg      void 
 19186 ;; Registers used:
 19187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19188 ;; Tracked objects:
 19189 ;;		On entry : 0/0
 19190 ;;		On exit  : 0/0
 19191 ;;		Unchanged: 0/0
 19192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19193 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19194 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19195 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19196 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19197 ;;Total ram usage:        7 bytes
 19198 ;; Hardware stack levels used:    1
 19199 ;; Hardware stack levels required when called:    6
 19200 ;; This function calls:
 19201 ;;		_USARTReadData
 19202 ;; This function is called by:
 19203 ;;		_main
 19204 ;; This function uses a non-reentrant model
 19205 ;;
 19206                           
 19207                           
 19208                           ;psect for function _USARTReadBuffer
 19209  328C                     _USARTReadBuffer:	
 19210                           
 19211                           ;incstack = 0
 19212                           ; Regs used in _USARTReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19213                           ;USARTReadBuffer@buff stored from wreg
 19214  328C  0021               	movlb	1	; select bank1
 19215  328D  00A6               	movwf	USARTReadBuffer@buff^(0+128)
 19216                           
 19217                           ;usart_pic16.c: 196: uint16_t i;
 19218                           ;usart_pic16.c: 197: for(i=0;i<len;i++) {
 19219  328E  01A7               	clrf	USARTReadBuffer@i^(0+128)
 19220  328F  01A8               	clrf	(USARTReadBuffer@i+1)^(0+128)
 19221  3290                     l7947:	
 19222  3290  0823               	movf	(USARTReadBuffer@len+1)^(0+128),w
 19223  3291  0228               	subwf	(USARTReadBuffer@i+1)^(0+128),w
 19224  3292  1D03               	skipz
 19225  3293  2A96               	goto	u7505
 19226  3294  0822               	movf	USARTReadBuffer@len^(0+128),w
 19227  3295  0227               	subwf	USARTReadBuffer@i^(0+128),w
 19228  3296                     u7505:	
 19229  3296  1803               	btfsc	3,0
 19230  3297  0008               	return
 19231                           
 19232                           ;usart_pic16.c: 198: buff[i]=USARTReadData();
 19233  3298  31B3  237F  31B2   	fcall	_USARTReadData
 19234  329B  0021               	movlb	1	; select bank1
 19235  329C  00A4               	movwf	??_USARTReadBuffer^(0+128)
 19236  329D  0827               	movf	USARTReadBuffer@i^(0+128),w
 19237  329E  0726               	addwf	USARTReadBuffer@buff^(0+128),w
 19238  329F  00A5               	movwf	(??_USARTReadBuffer+1)^(0+128)
 19239  32A0  0825               	movf	(??_USARTReadBuffer+1)^(0+128),w
 19240  32A1  0086               	movwf	6
 19241  32A2  3003               	movlw	3	; select bank6/7
 19242  32A3  0087               	movwf	7
 19243  32A4  0824               	movf	??_USARTReadBuffer^(0+128),w
 19244  32A5  0081               	movwf	1
 19245  32A6  3001               	movlw	1
 19246  32A7  07A7               	addwf	USARTReadBuffer@i^(0+128),f
 19247  32A8  3000               	movlw	0
 19248  32A9  3DA8               	addwfc	(USARTReadBuffer@i+1)^(0+128),f
 19249  32AA  2A90               	goto	l7947
 19250  32AB                     __end_of_USARTReadBuffer:	
 19251                           
 19252                           	psect	text79
 19253  337F                     __ptext79:	
 19254 ;; *************** function _USARTReadData *****************
 19255 ;; Defined at:
 19256 ;;		line 121 in file "usart_pic16.c"
 19257 ;; Parameters:    Size  Location     Type
 19258 ;;		None
 19259 ;; Auto vars:     Size  Location     Type
 19260 ;;  data            1    1[BANK1 ] unsigned char 
 19261 ;; Return value:  Size  Location     Type
 19262 ;;                  1    wreg      unsigned char 
 19263 ;; Registers used:
 19264 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19265 ;; Tracked objects:
 19266 ;;		On entry : 0/0
 19267 ;;		On exit  : 0/0
 19268 ;;		Unchanged: 0/0
 19269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19271 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19272 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19273 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19274 ;;Total ram usage:        2 bytes
 19275 ;; Hardware stack levels used:    1
 19276 ;; Hardware stack levels required when called:    5
 19277 ;; This function calls:
 19278 ;;		Nothing
 19279 ;; This function is called by:
 19280 ;;		_USARTReadBuffer
 19281 ;;		_USARTFlushBuffer
 19282 ;; This function uses a non-reentrant model
 19283 ;;
 19284                           
 19285                           
 19286                           ;psect for function _USARTReadData
 19287  337F                     _USARTReadData:	
 19288                           
 19289                           ;usart_pic16.c: 122: char data;
 19290                           ;usart_pic16.c: 125: if(UQFront == -1)
 19291                           
 19292                           ;incstack = 0
 19293                           ; Regs used in _USARTReadData: [wreg+fsr1l+fsr1h+status,2+status,0]
 19294  337F  0020               	movlb	0	; select bank0
 19295  3380  0A60               	incf	_UQFront,w	;volatile
 19296  3381  1D03               	btfss	3,2
 19297  3382  2B85               	goto	l7581
 19298                           
 19299                           ;usart_pic16.c: 126: return 0;
 19300  3383  3000               	movlw	0
 19301  3384  0008               	return
 19302  3385                     l7581:	
 19303                           
 19304                           ;usart_pic16.c: 128: data = URBuff[UQFront];
 19305  3385  0860               	movf	_UQFront,w
 19306  3386  3E20               	addlw	(low (_URBuff| (0+1024)))& (0+255)
 19307  3387  0086               	movwf	6
 19308  3388  3004               	movlw	4	; select bank8/9
 19309  3389  0087               	movwf	7
 19310  338A  0801               	movf	1,w
 19311  338B  0021               	movlb	1	; select bank1
 19312  338C  00A0               	movwf	??_USARTReadData^(0+128)
 19313  338D  0820               	movf	??_USARTReadData^(0+128),w
 19314  338E  00A1               	movwf	USARTReadData@data^(0+128)
 19315                           
 19316                           ;usart_pic16.c: 130: if(UQFront == UQEnd) {
 19317  338F  0020               	movlb	0	; select bank0
 19318  3390  0860               	movf	_UQFront,w	;volatile
 19319  3391  065F               	xorwf	_UQEnd,w	;volatile
 19320  3392  1D03               	skipz
 19321  3393  2B9C               	goto	l7587
 19322                           
 19323                           ;usart_pic16.c: 133: UQFront = UQEnd = -1;
 19324  3394  30FF               	movlw	255
 19325  3395  00DF               	movwf	_UQEnd	;volatile
 19326  3396  0021               	movlb	1	; select bank1
 19327  3397  00A0               	movwf	??_USARTReadData^(0+128)
 19328  3398  0820               	movf	??_USARTReadData^(0+128),w
 19329  3399  0020               	movlb	0	; select bank0
 19330  339A  00E0               	movwf	_UQFront	;volatile
 19331                           
 19332                           ;usart_pic16.c: 134: } else {
 19333  339B  2BA6               	goto	l7591
 19334  339C                     l7587:	
 19335                           
 19336                           ;usart_pic16.c: 135: UQFront++;
 19337  339C  3001               	movlw	1
 19338  339D  0021               	movlb	1	; select bank1
 19339  339E  00A0               	movwf	??_USARTReadData^(0+128)
 19340  339F  0820               	movf	??_USARTReadData^(0+128),w
 19341  33A0  0020               	movlb	0	; select bank0
 19342  33A1  07E0               	addwf	_UQFront,f	;volatile
 19343                           
 19344                           ;usart_pic16.c: 137: if(UQFront==64) {
 19345  33A2  3040               	movlw	64
 19346  33A3  0660               	xorwf	_UQFront,w	;volatile
 19347  33A4  1903               	btfsc	3,2
 19348                           
 19349                           ;usart_pic16.c: 138: UQFront=0;
 19350  33A5  01E0               	clrf	_UQFront	;volatile
 19351  33A6                     l7591:	
 19352                           
 19353                           ;usart_pic16.c: 139: }
 19354                           ;usart_pic16.c: 140: }
 19355                           ;usart_pic16.c: 142: return data;
 19356  33A6  0021               	movlb	1	; select bank1
 19357  33A7  0821               	movf	USARTReadData@data^(0+128),w
 19358  33A8  0008               	return
 19359  33A9                     __end_of_USARTReadData:	
 19360                           
 19361                           	psect	text80
 19362  2941                     __ptext80:	
 19363 ;; *************** function _USARTInit *****************
 19364 ;; Defined at:
 19365 ;;		line 31 in file "usart_pic16.c"
 19366 ;; Parameters:    Size  Location     Type
 19367 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 19368 ;; Auto vars:     Size  Location     Type
 19369 ;;		None
 19370 ;; Return value:  Size  Location     Type
 19371 ;;                  1    wreg      void 
 19372 ;; Registers used:
 19373 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 19374 ;; Tracked objects:
 19375 ;;		On entry : 0/0
 19376 ;;		On exit  : 0/0
 19377 ;;		Unchanged: 0/0
 19378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19379 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19381 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19382 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19383 ;;Total ram usage:        3 bytes
 19384 ;; Hardware stack levels used:    1
 19385 ;; Hardware stack levels required when called:    5
 19386 ;; This function calls:
 19387 ;;		Nothing
 19388 ;; This function is called by:
 19389 ;;		_main
 19390 ;; This function uses a non-reentrant model
 19391 ;;
 19392                           
 19393                           
 19394                           ;psect for function _USARTInit
 19395  2941                     _USARTInit:	
 19396                           
 19397                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 19398                           
 19399                           ;incstack = 0
 19400                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 19401  2941  30FF               	movlw	255
 19402  2942  0020               	movlb	0	; select bank0
 19403  2943  00DF               	movwf	_UQEnd	;volatile
 19404  2944  0021               	movlb	1	; select bank1
 19405  2945  00A2               	movwf	??_USARTInit^(0+128)
 19406  2946  0822               	movf	??_USARTInit^(0+128),w
 19407  2947  0020               	movlb	0	; select bank0
 19408  2948  00E0               	movwf	_UQFront	;volatile
 19409                           
 19410                           ;usart_pic16.c: 37: switch(baud_rate) {
 19411  2949  2954               	goto	l7791
 19412  294A                     l7781:	
 19413                           ;usart_pic16.c: 38: case 9600:
 19414                           
 19415                           
 19416                           ;usart_pic16.c: 39: SPBRG=103;
 19417  294A  3067               	movlw	103
 19418  294B  2951               	goto	L22
 19419  294C                     l7783:	
 19420                           ;usart_pic16.c: 41: case 19200:
 19421                           
 19422                           ;usart_pic16.c: 40: break;
 19423                           
 19424                           
 19425                           ;usart_pic16.c: 42: SPBRG=51;
 19426  294C  3033               	movlw	51
 19427  294D  2951               	goto	L22
 19428  294E                     l7785:	
 19429                           ;usart_pic16.c: 44: case 31250:
 19430                           
 19431                           ;usart_pic16.c: 43: break;
 19432                           
 19433                           
 19434                           ;usart_pic16.c: 45: SPBRG = 31;
 19435  294E  301F               	movlw	31
 19436  294F  2951               	goto	L22
 19437  2950                     l7787:	
 19438                           ;usart_pic16.c: 47: case 38400:
 19439                           
 19440                           ;usart_pic16.c: 46: break;
 19441                           
 19442                           
 19443                           ;usart_pic16.c: 48: SPBRG=25;
 19444  2950  3019               	movlw	25
 19445  2951                     L22:	
 19446  2951  0023               	movlb	3	; select bank3
 19447  2952  009B               	movwf	27	;volatile
 19448                           
 19449                           ;usart_pic16.c: 50: }
 19450                           
 19451                           ;usart_pic16.c: 49: break;
 19452  2953  2977               	goto	l2021
 19453  2954                     l7791:	
 19454                           
 19455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19456                           ; Switch size 1, requested type "space"
 19457                           ; Number of cases is 4, Range of values is 37 to 150
 19458                           ; switch strategies available:
 19459                           ; Name         Instructions Cycles
 19460                           ; simple_byte           13     7 (average)
 19461                           ; direct_byte          237     9 (fixed)
 19462                           ; jumptable            263     9 (fixed)
 19463                           ;	Chosen strategy is simple_byte
 19464  2954  0021               	movlb	1	; select bank1
 19465  2955  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 19466  2956  3A25               	xorlw	37	; case 37
 19467  2957  1903               	skipnz
 19468  2958  2963               	goto	l9461
 19469  2959  3A6E               	xorlw	110	; case 75
 19470  295A  1903               	skipnz
 19471  295B  2968               	goto	l9463
 19472  295C  3A31               	xorlw	49	; case 122
 19473  295D  1903               	skipnz
 19474  295E  296D               	goto	l9465
 19475  295F  3AEC               	xorlw	236	; case 150
 19476  2960  1903               	skipnz
 19477  2961  2972               	goto	l9467
 19478  2962  2977               	goto	l2021
 19479  2963                     l9461:	
 19480                           
 19481                           ; Switch size 1, requested type "space"
 19482                           ; Number of cases is 1, Range of values is 128 to 128
 19483                           ; switch strategies available:
 19484                           ; Name         Instructions Cycles
 19485                           ; simple_byte            4     3 (average)
 19486                           ; direct_byte           11     9 (fixed)
 19487                           ; jumptable            263     9 (fixed)
 19488                           ;	Chosen strategy is simple_byte
 19489  2963  0820               	movf	USARTInit@baud_rate^(0+128),w
 19490  2964  3A80               	xorlw	128	; case 128
 19491  2965  1903               	skipnz
 19492  2966  294A               	goto	l7781
 19493  2967  2977               	goto	l2021
 19494  2968                     l9463:	
 19495                           
 19496                           ; Switch size 1, requested type "space"
 19497                           ; Number of cases is 1, Range of values is 0 to 0
 19498                           ; switch strategies available:
 19499                           ; Name         Instructions Cycles
 19500                           ; simple_byte            4     3 (average)
 19501                           ; direct_byte            8     6 (fixed)
 19502                           ; jumptable            260     6 (fixed)
 19503                           ;	Chosen strategy is simple_byte
 19504  2968  0820               	movf	USARTInit@baud_rate^(0+128),w
 19505  2969  3A00               	xorlw	0	; case 0
 19506  296A  1903               	skipnz
 19507  296B  294C               	goto	l7783
 19508  296C  2977               	goto	l2021
 19509  296D                     l9465:	
 19510                           
 19511                           ; Switch size 1, requested type "space"
 19512                           ; Number of cases is 1, Range of values is 18 to 18
 19513                           ; switch strategies available:
 19514                           ; Name         Instructions Cycles
 19515                           ; simple_byte            4     3 (average)
 19516                           ; direct_byte           11     9 (fixed)
 19517                           ; jumptable            263     9 (fixed)
 19518                           ;	Chosen strategy is simple_byte
 19519  296D  0820               	movf	USARTInit@baud_rate^(0+128),w
 19520  296E  3A12               	xorlw	18	; case 18
 19521  296F  1903               	skipnz
 19522  2970  294E               	goto	l7785
 19523  2971  2977               	goto	l2021
 19524  2972                     l9467:	
 19525                           
 19526                           ; Switch size 1, requested type "space"
 19527                           ; Number of cases is 1, Range of values is 0 to 0
 19528                           ; switch strategies available:
 19529                           ; Name         Instructions Cycles
 19530                           ; simple_byte            4     3 (average)
 19531                           ; direct_byte            8     6 (fixed)
 19532                           ; jumptable            260     6 (fixed)
 19533                           ;	Chosen strategy is simple_byte
 19534  2972  0820               	movf	USARTInit@baud_rate^(0+128),w
 19535  2973  3A00               	xorlw	0	; case 0
 19536  2974  1903               	skipnz
 19537  2975  2950               	goto	l7787
 19538  2976  2977               	goto	l2021
 19539  2977                     l2021:	
 19540                           
 19541                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 19542  2977  0023               	movlb	3	; select bank3
 19543  2978  131E               	bcf	30,6	;volatile
 19544                           
 19545                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 19546  2979  169E               	bsf	30,5	;volatile
 19547                           
 19548                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 19549  297A  121E               	bcf	30,4	;volatile
 19550                           
 19551                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 19552  297B  151E               	bsf	30,2	;volatile
 19553                           
 19554                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 19555  297C  179D               	bsf	29,7	;volatile
 19556                           
 19557                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 19558  297D  131D               	bcf	29,6	;volatile
 19559                           
 19560                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 19561  297E  161D               	bsf	29,4	;volatile
 19562                           
 19563                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 19564  297F  119D               	bcf	29,3	;volatile
 19565                           
 19566                           ;usart_pic16.c: 65: RCIE=1;
 19567  2980  0021               	movlb	1	; select bank1
 19568  2981  1691               	bsf	17,5	;volatile
 19569                           
 19570                           ;usart_pic16.c: 66: PEIE=1;
 19571  2982  170B               	bsf	11,6	;volatile
 19572                           
 19573                           ;usart_pic16.c: 68: (GIE = 1);
 19574  2983  178B               	bsf	11,7	;volatile
 19575  2984  0008               	return
 19576  2985                     __end_of_USARTInit:	
 19577                           
 19578                           	psect	text81
 19579  33D3                     __ptext81:	
 19580 ;; *************** function _USARTDataAvailable *****************
 19581 ;; Defined at:
 19582 ;;		line 145 in file "usart_pic16.c"
 19583 ;; Parameters:    Size  Location     Type
 19584 ;;		None
 19585 ;; Auto vars:     Size  Location     Type
 19586 ;;		None
 19587 ;; Return value:  Size  Location     Type
 19588 ;;                  1    wreg      unsigned char 
 19589 ;; Registers used:
 19590 ;;		wreg, status,2, status,0
 19591 ;; Tracked objects:
 19592 ;;		On entry : 0/0
 19593 ;;		On exit  : 0/0
 19594 ;;		Unchanged: 0/0
 19595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19598 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19599 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19600 ;;Total ram usage:        1 bytes
 19601 ;; Hardware stack levels used:    1
 19602 ;; Hardware stack levels required when called:    5
 19603 ;; This function calls:
 19604 ;;		Nothing
 19605 ;; This function is called by:
 19606 ;;		_main
 19607 ;;		_USARTFlushBuffer
 19608 ;; This function uses a non-reentrant model
 19609 ;;
 19610                           
 19611                           
 19612                           ;psect for function _USARTDataAvailable
 19613  33D3                     _USARTDataAvailable:	
 19614                           
 19615                           ;usart_pic16.c: 146: if(UQFront==-1) return 0;
 19616                           
 19617                           ;incstack = 0
 19618                           ; Regs used in _USARTDataAvailable: [wreg+status,2+status,0]
 19619  33D3  0020               	movlb	0	; select bank0
 19620  33D4  0A60               	incf	_UQFront,w	;volatile
 19621  33D5  1D03               	btfss	3,2
 19622  33D6  2BD9               	goto	l7921
 19623  33D7  3000               	movlw	0
 19624  33D8  0008               	return
 19625  33D9                     l7921:	
 19626                           
 19627                           ;usart_pic16.c: 148: if(UQFront<UQEnd)
 19628  33D9  0860               	movf	_UQFront,w	;volatile
 19629  33DA  3A80               	xorlw	128
 19630  33DB  0021               	movlb	1	; select bank1
 19631  33DC  00A0               	movwf	??_USARTDataAvailable^(0+128)
 19632  33DD  0020               	movlb	0	; select bank0
 19633  33DE  085F               	movf	_UQEnd,w	;volatile
 19634  33DF  3A80               	xorlw	128
 19635  33E0  0021               	movlb	1	; select bank1
 19636  33E1  02A0               	subwf	??_USARTDataAvailable^(0+128),f
 19637  33E2  1803               	skipnc
 19638  33E3  2BEA               	goto	l7929
 19639                           
 19640                           ;usart_pic16.c: 149: return(UQEnd-UQFront+1);
 19641  33E4  0020               	movlb	0	; select bank0
 19642  33E5  0360               	decf	_UQFront,w	;volatile
 19643  33E6  3AFF               	xorlw	255
 19644  33E7  075F               	addwf	_UQEnd,w	;volatile
 19645  33E8  3E01               	addlw	1
 19646  33E9  0008               	return
 19647  33EA                     l7929:	
 19648                           
 19649                           ;usart_pic16.c: 150: else if(UQFront>UQEnd)
 19650  33EA  0020               	movlb	0	; select bank0
 19651  33EB  085F               	movf	_UQEnd,w	;volatile
 19652  33EC  3A80               	xorlw	128
 19653  33ED  0021               	movlb	1	; select bank1
 19654  33EE  00A0               	movwf	??_USARTDataAvailable^(0+128)
 19655  33EF  0020               	movlb	0	; select bank0
 19656  33F0  0860               	movf	_UQFront,w	;volatile
 19657  33F1  3A80               	xorlw	128
 19658  33F2  0021               	movlb	1	; select bank1
 19659  33F3  02A0               	subwf	??_USARTDataAvailable^(0+128),f
 19660  33F4  1803               	skipnc
 19661  33F5  2BFC               	goto	l7937
 19662                           
 19663                           ;usart_pic16.c: 151: return (64-UQFront+UQEnd+1);
 19664  33F6  0020               	movlb	0	; select bank0
 19665  33F7  0360               	decf	_UQFront,w	;volatile
 19666  33F8  3AFF               	xorlw	255
 19667  33F9  075F               	addwf	_UQEnd,w	;volatile
 19668  33FA  3E41               	addlw	65
 19669  33FB  0008               	return
 19670  33FC                     l7937:	
 19671                           
 19672                           ;usart_pic16.c: 152: else
 19673                           ;usart_pic16.c: 153: return 1;
 19674  33FC  3001               	movlw	1
 19675  33FD  0008               	return
 19676  33FE                     __end_of_USARTDataAvailable:	
 19677                           
 19678                           	psect	text82
 19679  3330                     __ptext82:	
 19680 ;; *************** function _InitializeTaps *****************
 19681 ;; Defined at:
 19682 ;;		line 246 in file "user.c"
 19683 ;; Parameters:    Size  Location     Type
 19684 ;;		None
 19685 ;; Auto vars:     Size  Location     Type
 19686 ;;  itap            2    1[BANK1 ] int 
 19687 ;; Return value:  Size  Location     Type
 19688 ;;                  1    wreg      void 
 19689 ;; Registers used:
 19690 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19691 ;; Tracked objects:
 19692 ;;		On entry : 0/0
 19693 ;;		On exit  : 0/0
 19694 ;;		Unchanged: 0/0
 19695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19697 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19698 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19699 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19700 ;;Total ram usage:        3 bytes
 19701 ;; Hardware stack levels used:    1
 19702 ;; Hardware stack levels required when called:    5
 19703 ;; This function calls:
 19704 ;;		Nothing
 19705 ;; This function is called by:
 19706 ;;		_main
 19707 ;; This function uses a non-reentrant model
 19708 ;;
 19709                           
 19710                           
 19711                           ;psect for function _InitializeTaps
 19712  3330                     _InitializeTaps:	
 19713                           
 19714                           ;user.c: 247: for (int itap = 0; itap < 12; itap++) {
 19715                           
 19716                           ;incstack = 0
 19717                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 19718  3330  0021               	movlb	1	; select bank1
 19719  3331  01A1               	clrf	InitializeTaps@itap^(0+128)
 19720  3332  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 19721  3333                     L23:	
 19722  3333  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 19723  3334  3A80               	xorlw	128
 19724  3335  00A0               	movwf	??_InitializeTaps^(0+128)
 19725  3336  3080               	movlw	128
 19726  3337  0220               	subwf	??_InitializeTaps^(0+128),w
 19727  3338  1D03               	skipz
 19728  3339  2B3C               	goto	u7385
 19729  333A  300C               	movlw	12
 19730  333B  0221               	subwf	InitializeTaps@itap^(0+128),w
 19731  333C                     u7385:	
 19732  333C  1803               	btfsc	3,0
 19733  333D  0008               	return
 19734                           
 19735                           ;user.c: 248: tap[itap] = 0;
 19736  333E  0021               	movlb	1	; select bank1
 19737  333F  0821               	movf	InitializeTaps@itap^(0+128),w
 19738  3340  00A0               	movwf	??_InitializeTaps^(0+128)
 19739  3341  3001               	movlw	1
 19740  3342                     u7395:	
 19741  3342  35A0               	lslf	??_InitializeTaps^(0+128),f
 19742  3343  3EFF               	addlw	-1
 19743  3344  1D03               	skipz
 19744  3345  2B42               	goto	u7395
 19745  3346  3520               	lslf	??_InitializeTaps^(0+128),w
 19746  3347  3EA0               	addlw	(low (_tap| (0+768)))& (0+255)
 19747  3348  0086               	movwf	6
 19748  3349  3003               	movlw	3	; select bank7/8
 19749  334A  0087               	movwf	7
 19750  334B  3000               	movlw	0
 19751  334C  3FC0               	movwi [0]fsr1
 19752  334D  3000               	movlw	0
 19753  334E  3FC1               	movwi [1]fsr1
 19754  334F  3FC2               	movwi [2]fsr1
 19755  3350  3FC3               	movwi [3]fsr1
 19756  3351  3001               	movlw	1
 19757  3352  07A1               	addwf	InitializeTaps@itap^(0+128),f
 19758  3353  3000               	movlw	0
 19759  3354  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 19760  3355  2B33               	goto	L23
 19761  3356                     __end_of_InitializeTaps:	
 19762                           
 19763                           	psect	text83
 19764  361D                     __ptext83:	
 19765 ;; *************** function _InitWaveform *****************
 19766 ;; Defined at:
 19767 ;;		line 20 in file "tactiles.c"
 19768 ;; Parameters:    Size  Location     Type
 19769 ;;		None
 19770 ;; Auto vars:     Size  Location     Type
 19771 ;;		None
 19772 ;; Return value:  Size  Location     Type
 19773 ;;                  1    wreg      void 
 19774 ;; Registers used:
 19775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19776 ;; Tracked objects:
 19777 ;;		On entry : 0/0
 19778 ;;		On exit  : 0/0
 19779 ;;		Unchanged: 0/0
 19780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19783 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19784 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19785 ;;Total ram usage:        1 bytes
 19786 ;; Hardware stack levels used:    1
 19787 ;; Hardware stack levels required when called:   11
 19788 ;; This function calls:
 19789 ;;		_getWaveFormState
 19790 ;;		_set_leds_bottom
 19791 ;; This function is called by:
 19792 ;;		_main
 19793 ;; This function uses a non-reentrant model
 19794 ;;
 19795                           
 19796                           
 19797                           ;psect for function _InitWaveform
 19798  361D                     _InitWaveform:	
 19799                           
 19800                           ;tactiles.c: 21: bottom_push_state = getWaveFormState();
 19801                           
 19802                           ;incstack = 0
 19803                           ; Regs used in _InitWaveform: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19804  361D  31B0  20FF  31B6   	fcall	_getWaveFormState
 19805  3620  0022               	movlb	2	; select bank2
 19806  3621  0855               	movf	(?_getWaveFormState+1)^(0+256),w
 19807  3622  0023               	movlb	3	; select bank3
 19808  3623  00E3               	movwf	(_bottom_push_state+1)^(0+384)
 19809  3624  0022               	movlb	2	; select bank2
 19810  3625  0854               	movf	?_getWaveFormState^(0+256),w
 19811  3626  0023               	movlb	3	; select bank3
 19812  3627  00E2               	movwf	_bottom_push_state^(0+384)
 19813                           
 19814                           ;tactiles.c: 22: if (bottom_push_state < 1 || bottom_push_state > 5) {
 19815  3628  0863               	movf	(_bottom_push_state+1)^(0+384),w
 19816  3629  3A80               	xorlw	128
 19817  362A  0022               	movlb	2	; select bank2
 19818  362B  00D8               	movwf	??_InitWaveform^(0+256)
 19819  362C  3080               	movlw	128
 19820  362D  0258               	subwf	??_InitWaveform^(0+256),w
 19821  362E  1D03               	skipz
 19822  362F  2E33               	goto	u7345
 19823  3630  3001               	movlw	1
 19824  3631  0023               	movlb	3	; select bank3
 19825  3632  0262               	subwf	_bottom_push_state^(0+384),w
 19826  3633                     u7345:	
 19827  3633  1C03               	skipc
 19828  3634  2E43               	goto	l7829
 19829  3635  0023               	movlb	3	; select bank3
 19830  3636  0863               	movf	(_bottom_push_state+1)^(0+384),w
 19831  3637  3A80               	xorlw	128
 19832  3638  0022               	movlb	2	; select bank2
 19833  3639  00D8               	movwf	??_InitWaveform^(0+256)
 19834  363A  3080               	movlw	128
 19835  363B  0258               	subwf	??_InitWaveform^(0+256),w
 19836  363C  1D03               	skipz
 19837  363D  2E41               	goto	u7355
 19838  363E  3006               	movlw	6
 19839  363F  0023               	movlb	3	; select bank3
 19840  3640  0262               	subwf	_bottom_push_state^(0+384),w
 19841  3641                     u7355:	
 19842  3641  1C03               	skipc
 19843  3642  2E48               	goto	l7831
 19844  3643                     l7829:	
 19845                           
 19846                           ;tactiles.c: 23: bottom_push_state = 1;
 19847  3643  3001               	movlw	1
 19848  3644  0023               	movlb	3	; select bank3
 19849  3645  00E2               	movwf	_bottom_push_state^(0+384)
 19850  3646  3000               	movlw	0
 19851  3647  00E3               	movwf	(_bottom_push_state^(0+384)+1)
 19852  3648                     l7831:	
 19853                           
 19854                           ;tactiles.c: 24: }
 19855                           ;tactiles.c: 25: modulation_changed = 1;
 19856  3648  0024               	movlb	4	; select bank4
 19857  3649  01CE               	clrf	_modulation_changed^(0+512)
 19858  364A  0ACE               	incf	_modulation_changed^(0+512),f
 19859                           
 19860                           ;tactiles.c: 26: set_leds_bottom(bottom_push_state);
 19861  364B  0023               	movlb	3	; select bank3
 19862  364C  0863               	movf	(_bottom_push_state+1)^(0+384),w
 19863  364D  0021               	movlb	1	; select bank1
 19864  364E  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 19865  364F  0023               	movlb	3	; select bank3
 19866  3650  0862               	movf	_bottom_push_state^(0+384),w
 19867  3651  0021               	movlb	1	; select bank1
 19868  3652  00A0               	movwf	set_leds_bottom@x^(0+128)
 19869  3653  31B6  2690         	fcall	_set_leds_bottom
 19870  3655  0008               	return
 19871  3656                     __end_of_InitWaveform:	
 19872                           
 19873                           	psect	text84
 19874  3690                     __ptext84:	
 19875 ;; *************** function _set_leds_bottom *****************
 19876 ;; Defined at:
 19877 ;;		line 53 in file "LEDs.c"
 19878 ;; Parameters:    Size  Location     Type
 19879 ;;  x               2    0[BANK1 ] int 
 19880 ;; Auto vars:     Size  Location     Type
 19881 ;;		None
 19882 ;; Return value:  Size  Location     Type
 19883 ;;                  1    wreg      void 
 19884 ;; Registers used:
 19885 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 19886 ;; Tracked objects:
 19887 ;;		On entry : 0/0
 19888 ;;		On exit  : 0/0
 19889 ;;		Unchanged: 0/0
 19890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19891 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19894 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19895 ;;Total ram usage:        2 bytes
 19896 ;; Hardware stack levels used:    1
 19897 ;; Hardware stack levels required when called:    5
 19898 ;; This function calls:
 19899 ;;		Nothing
 19900 ;; This function is called by:
 19901 ;;		_main
 19902 ;;		_ring_tactiles
 19903 ;;		_solidring_tactiles
 19904 ;;		_InitWaveform
 19905 ;;		_read_bottom_tactile
 19906 ;;		_setPresetDisplay
 19907 ;;		_resetRingLEDs
 19908 ;;		_setExpressionDisplay
 19909 ;;		_star_tactiles
 19910 ;; This function uses a non-reentrant model
 19911 ;;
 19912                           
 19913                           
 19914                           ;psect for function _set_leds_bottom
 19915  3690                     _set_leds_bottom:	
 19916                           
 19917                           ;LEDs.c: 54: LATDbits.LATD0 = 0;
 19918                           
 19919                           ;incstack = 0
 19920                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 19921  3690  0022               	movlb	2	; select bank2
 19922  3691  100F               	bcf	15,0	;volatile
 19923                           
 19924                           ;LEDs.c: 55: LATDbits.LATD1 = 0;
 19925  3692  108F               	bcf	15,1	;volatile
 19926                           
 19927                           ;LEDs.c: 56: LATDbits.LATD2 = 0;
 19928  3693  110F               	bcf	15,2	;volatile
 19929                           
 19930                           ;LEDs.c: 57: LATDbits.LATD3 = 0;
 19931  3694  118F               	bcf	15,3	;volatile
 19932                           
 19933                           ;LEDs.c: 58: LATDbits.LATD4 = 0;
 19934  3695  120F               	bcf	15,4	;volatile
 19935                           
 19936                           ;LEDs.c: 59: switch (x) {
 19937  3696  2EAD               	goto	l6615
 19938  3697                     l929:	
 19939                           ;LEDs.c: 60: case 1:
 19940                           
 19941                           
 19942                           ;LEDs.c: 61: LATDbits.LATD0 = 1;
 19943  3697  0022               	movlb	2	; select bank2
 19944  3698  140F               	bsf	15,0	;volatile
 19945                           
 19946                           ;LEDs.c: 62: break;
 19947  3699  0008               	return
 19948  369A                     l931:	
 19949                           ;LEDs.c: 63: case 2:
 19950                           
 19951                           
 19952                           ;LEDs.c: 64: LATDbits.LATD1 = 1;
 19953  369A  0022               	movlb	2	; select bank2
 19954  369B  148F               	bsf	15,1	;volatile
 19955                           
 19956                           ;LEDs.c: 65: break;
 19957  369C  0008               	return
 19958  369D                     l932:	
 19959                           ;LEDs.c: 66: case 3:
 19960                           
 19961                           
 19962                           ;LEDs.c: 67: LATDbits.LATD2 = 1;
 19963  369D  0022               	movlb	2	; select bank2
 19964  369E  150F               	bsf	15,2	;volatile
 19965                           
 19966                           ;LEDs.c: 68: break;
 19967  369F  0008               	return
 19968  36A0                     l933:	
 19969                           ;LEDs.c: 69: case 4:
 19970                           
 19971                           
 19972                           ;LEDs.c: 70: LATDbits.LATD3 = 1;
 19973  36A0  0022               	movlb	2	; select bank2
 19974  36A1  158F               	bsf	15,3	;volatile
 19975                           
 19976                           ;LEDs.c: 71: break;
 19977  36A2  0008               	return
 19978  36A3                     l934:	
 19979                           ;LEDs.c: 72: case 5:
 19980                           
 19981                           
 19982                           ;LEDs.c: 73: LATDbits.LATD4 = 1;
 19983  36A3  0022               	movlb	2	; select bank2
 19984  36A4  160F               	bsf	15,4	;volatile
 19985                           
 19986                           ;LEDs.c: 76: break;
 19987                           
 19988                           ;LEDs.c: 75: case 6:
 19989                           
 19990                           ;LEDs.c: 74: break;
 19991  36A5  0008               	return
 19992  36A6                     l936:	
 19993                           ;LEDs.c: 77: case 100:
 19994                           
 19995                           
 19996                           ;LEDs.c: 78: LATDbits.LATD0 = 1;
 19997  36A6  0022               	movlb	2	; select bank2
 19998  36A7  140F               	bsf	15,0	;volatile
 19999                           
 20000                           ;LEDs.c: 79: LATDbits.LATD1 = 1;
 20001  36A8  148F               	bsf	15,1	;volatile
 20002                           
 20003                           ;LEDs.c: 80: LATDbits.LATD2 = 1;
 20004  36A9  150F               	bsf	15,2	;volatile
 20005                           
 20006                           ;LEDs.c: 81: LATDbits.LATD3 = 1;
 20007  36AA  158F               	bsf	15,3	;volatile
 20008                           
 20009                           ;LEDs.c: 82: LATDbits.LATD4 = 1;
 20010  36AB  160F               	bsf	15,4	;volatile
 20011                           
 20012                           ;LEDs.c: 84: }
 20013                           
 20014                           ;LEDs.c: 83: break;
 20015  36AC  0008               	return
 20016  36AD                     l6615:	
 20017                           
 20018                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20019                           ; Switch size 1, requested type "space"
 20020                           ; Number of cases is 1, Range of values is 0 to 0
 20021                           ; switch strategies available:
 20022                           ; Name         Instructions Cycles
 20023                           ; simple_byte            4     3 (average)
 20024                           ; direct_byte            8     6 (fixed)
 20025                           ; jumptable            260     6 (fixed)
 20026                           ;	Chosen strategy is simple_byte
 20027  36AD  0021               	movlb	1	; select bank1
 20028  36AE  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 20029  36AF  3A00               	xorlw	0	; case 0
 20030  36B0  1903               	skipnz
 20031  36B1  2EB3               	goto	l9469
 20032  36B2  2ECA               	goto	l937
 20033  36B3                     l9469:	
 20034                           
 20035                           ; Switch size 1, requested type "space"
 20036                           ; Number of cases is 7, Range of values is 1 to 100
 20037                           ; switch strategies available:
 20038                           ; Name         Instructions Cycles
 20039                           ; simple_byte           22    12 (average)
 20040                           ; direct_byte          209     9 (fixed)
 20041                           ; jumptable            263     9 (fixed)
 20042                           ;	Chosen strategy is simple_byte
 20043  36B3  0820               	movf	set_leds_bottom@x^(0+128),w
 20044  36B4  3A01               	xorlw	1	; case 1
 20045  36B5  1903               	skipnz
 20046  36B6  2E97               	goto	l929
 20047  36B7  3A03               	xorlw	3	; case 2
 20048  36B8  1903               	skipnz
 20049  36B9  2E9A               	goto	l931
 20050  36BA  3A01               	xorlw	1	; case 3
 20051  36BB  1903               	skipnz
 20052  36BC  2E9D               	goto	l932
 20053  36BD  3A07               	xorlw	7	; case 4
 20054  36BE  1903               	skipnz
 20055  36BF  2EA0               	goto	l933
 20056  36C0  3A01               	xorlw	1	; case 5
 20057  36C1  1903               	skipnz
 20058  36C2  2EA3               	goto	l934
 20059  36C3  3A03               	xorlw	3	; case 6
 20060  36C4  1903               	skipnz
 20061  36C5  2ECA               	goto	l937
 20062  36C6  3A62               	xorlw	98	; case 100
 20063  36C7  1903               	skipnz
 20064  36C8  2EA6               	goto	l936
 20065  36C9  2ECA               	goto	l937
 20066  36CA                     l937:	
 20067  36CA  0008               	return
 20068  36CB                     __end_of_set_leds_bottom:	
 20069                           
 20070                           	psect	text85
 20071  30FF                     __ptext85:	
 20072 ;; *************** function _getWaveFormState *****************
 20073 ;; Defined at:
 20074 ;;		line 345 in file "state_manager.c"
 20075 ;; Parameters:    Size  Location     Type
 20076 ;;		None
 20077 ;; Auto vars:     Size  Location     Type
 20078 ;;		None
 20079 ;; Return value:  Size  Location     Type
 20080 ;;                  2   52[BANK2 ] int 
 20081 ;; Registers used:
 20082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20083 ;; Tracked objects:
 20084 ;;		On entry : 0/0
 20085 ;;		On exit  : 0/0
 20086 ;;		Unchanged: 0/0
 20087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20088 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20090 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20091 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20092 ;;Total ram usage:        4 bytes
 20093 ;; Hardware stack levels used:    1
 20094 ;; Hardware stack levels required when called:   10
 20095 ;; This function calls:
 20096 ;;		_initStateManager
 20097 ;; This function is called by:
 20098 ;;		_InitWaveform
 20099 ;; This function uses a non-reentrant model
 20100 ;;
 20101                           
 20102                           
 20103                           ;psect for function _getWaveFormState
 20104  30FF                     _getWaveFormState:	
 20105                           
 20106                           ;state_manager.c: 346: if (isStateInitialized != 1) {
 20107                           
 20108                           ;incstack = 0
 20109                           ; Regs used in _getWaveFormState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20110  30FF  0020               	movlb	0	; select bank0
 20111  3100  035D               	decf	_isStateInitialized,w
 20112  3101  045E               	iorwf	_isStateInitialized+1,w
 20113  3102  1903               	btfsc	3,2
 20114  3103  2906               	goto	l7473
 20115                           
 20116                           ;state_manager.c: 347: initStateManager();
 20117  3104  31BF  27A3         	fcall	_initStateManager
 20118  3106                     l7473:	
 20119                           
 20120                           ;state_manager.c: 348: }
 20121                           ;state_manager.c: 349: return pedalState.waveForm;
 20122  3106  0025               	movlb	5	; select bank5
 20123  3107  0839               	movf	(_pedalState^(0+640)+5),w
 20124  3108  0022               	movlb	2	; select bank2
 20125  3109  00D6               	movwf	??_getWaveFormState^(0+256)
 20126  310A  01D7               	clrf	(??_getWaveFormState^(0+256)+1)
 20127  310B  0856               	movf	??_getWaveFormState^(0+256),w
 20128  310C  00D4               	movwf	?_getWaveFormState^(0+256)
 20129  310D  0857               	movf	(??_getWaveFormState+1)^(0+256),w
 20130  310E  00D5               	movwf	(?_getWaveFormState+1)^(0+256)
 20131  310F  0008               	return
 20132  3110                     __end_of_getWaveFormState:	
 20133                           
 20134                           	psect	text86
 20135  36CB                     __ptext86:	
 20136 ;; *************** function _InitSubdivision *****************
 20137 ;; Defined at:
 20138 ;;		line 62 in file "tactiles.c"
 20139 ;; Parameters:    Size  Location     Type
 20140 ;;		None
 20141 ;; Auto vars:     Size  Location     Type
 20142 ;;		None
 20143 ;; Return value:  Size  Location     Type
 20144 ;;                  1    wreg      void 
 20145 ;; Registers used:
 20146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20147 ;; Tracked objects:
 20148 ;;		On entry : 0/0
 20149 ;;		On exit  : 0/0
 20150 ;;		Unchanged: 0/0
 20151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20154 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20155 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20156 ;;Total ram usage:        1 bytes
 20157 ;; Hardware stack levels used:    1
 20158 ;; Hardware stack levels required when called:   11
 20159 ;; This function calls:
 20160 ;;		_getSubdivisionState
 20161 ;;		_set_leds_top
 20162 ;; This function is called by:
 20163 ;;		_main
 20164 ;; This function uses a non-reentrant model
 20165 ;;
 20166                           
 20167                           
 20168                           ;psect for function _InitSubdivision
 20169  36CB                     _InitSubdivision:	
 20170                           
 20171                           ;tactiles.c: 63: top_push_state = getSubdivisionState();
 20172                           
 20173                           ;incstack = 0
 20174                           ; Regs used in _InitSubdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20175  36CB  31B0  20EE  31B6   	fcall	_getSubdivisionState
 20176  36CE  0022               	movlb	2	; select bank2
 20177  36CF  0855               	movf	(?_getSubdivisionState+1)^(0+256),w
 20178  36D0  0020               	movlb	0	; select bank0
 20179  36D1  00ED               	movwf	_top_push_state+1
 20180  36D2  0022               	movlb	2	; select bank2
 20181  36D3  0854               	movf	?_getSubdivisionState^(0+256),w
 20182  36D4  0020               	movlb	0	; select bank0
 20183  36D5  00EC               	movwf	_top_push_state
 20184                           
 20185                           ;tactiles.c: 64: if (top_push_state < 1 || top_push_state > 6) {
 20186  36D6  086D               	movf	_top_push_state+1,w
 20187  36D7  3A80               	xorlw	128
 20188  36D8  0022               	movlb	2	; select bank2
 20189  36D9  00D8               	movwf	??_InitSubdivision^(0+256)
 20190  36DA  3080               	movlw	128
 20191  36DB  0258               	subwf	??_InitSubdivision^(0+256),w
 20192  36DC  1D03               	skipz
 20193  36DD  2EE1               	goto	u7365
 20194  36DE  3001               	movlw	1
 20195  36DF  0020               	movlb	0	; select bank0
 20196  36E0  026C               	subwf	_top_push_state,w
 20197  36E1                     u7365:	
 20198  36E1  1C03               	skipc
 20199  36E2  2EF1               	goto	l7841
 20200  36E3  0020               	movlb	0	; select bank0
 20201  36E4  086D               	movf	_top_push_state+1,w
 20202  36E5  3A80               	xorlw	128
 20203  36E6  0022               	movlb	2	; select bank2
 20204  36E7  00D8               	movwf	??_InitSubdivision^(0+256)
 20205  36E8  3080               	movlw	128
 20206  36E9  0258               	subwf	??_InitSubdivision^(0+256),w
 20207  36EA  1D03               	skipz
 20208  36EB  2EEF               	goto	u7375
 20209  36EC  3007               	movlw	7
 20210  36ED  0020               	movlb	0	; select bank0
 20211  36EE  026C               	subwf	_top_push_state,w
 20212  36EF                     u7375:	
 20213  36EF  1C03               	skipc
 20214  36F0  2EF6               	goto	l7843
 20215  36F1                     l7841:	
 20216                           
 20217                           ;tactiles.c: 65: top_push_state = 6;
 20218  36F1  3006               	movlw	6
 20219  36F2  0020               	movlb	0	; select bank0
 20220  36F3  00EC               	movwf	_top_push_state
 20221  36F4  3000               	movlw	0
 20222  36F5  00ED               	movwf	_top_push_state+1
 20223  36F6                     l7843:	
 20224                           
 20225                           ;tactiles.c: 66: }
 20226                           ;tactiles.c: 67: set_leds_top(top_push_state, 1);
 20227  36F6  0020               	movlb	0	; select bank0
 20228  36F7  086D               	movf	_top_push_state+1,w
 20229  36F8  0021               	movlb	1	; select bank1
 20230  36F9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 20231  36FA  0020               	movlb	0	; select bank0
 20232  36FB  086C               	movf	_top_push_state,w
 20233  36FC  0021               	movlb	1	; select bank1
 20234  36FD  00A0               	movwf	set_leds_top@x^(0+128)
 20235  36FE  3001               	movlw	1
 20236  36FF  00A2               	movwf	set_leds_top@ledState^(0+128)
 20237  3700  3000               	movlw	0
 20238  3701  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 20239  3702  31AC  2440         	fcall	_set_leds_top
 20240                           
 20241                           ;tactiles.c: 68: mod_time_changed = 1;
 20242  3704  0024               	movlb	4	; select bank4
 20243  3705  01EC               	clrf	_mod_time_changed^(0+512)
 20244  3706  0AEC               	incf	_mod_time_changed^(0+512),f
 20245  3707  0008               	return
 20246  3708                     __end_of_InitSubdivision:	
 20247                           
 20248                           	psect	text87
 20249  2C40                     __ptext87:	
 20250 ;; *************** function _set_leds_top *****************
 20251 ;; Defined at:
 20252 ;;		line 18 in file "LEDs.c"
 20253 ;; Parameters:    Size  Location     Type
 20254 ;;  x               2    0[BANK1 ] int 
 20255 ;;  ledState        2    2[BANK1 ] int 
 20256 ;; Auto vars:     Size  Location     Type
 20257 ;;		None
 20258 ;; Return value:  Size  Location     Type
 20259 ;;                  1    wreg      void 
 20260 ;; Registers used:
 20261 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20262 ;; Tracked objects:
 20263 ;;		On entry : 0/0
 20264 ;;		On exit  : 0/0
 20265 ;;		Unchanged: 0/0
 20266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20267 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20270 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20271 ;;Total ram usage:        4 bytes
 20272 ;; Hardware stack levels used:    1
 20273 ;; Hardware stack levels required when called:    5
 20274 ;; This function calls:
 20275 ;;		Nothing
 20276 ;; This function is called by:
 20277 ;;		_main
 20278 ;;		_ring_tactiles
 20279 ;;		_solidring_tactiles
 20280 ;;		_InitSubdivision
 20281 ;;		_read_top_tactile
 20282 ;;		_setPresetDisplay
 20283 ;;		_resetRingLEDs
 20284 ;;		_setExpressionDisplay
 20285 ;;		_star_tactiles
 20286 ;; This function uses a non-reentrant model
 20287 ;;
 20288                           
 20289                           
 20290                           ;psect for function _set_leds_top
 20291  2C40                     _set_leds_top:	
 20292                           
 20293                           ;LEDs.c: 19: LATFbits.LATF0 = 0;
 20294                           
 20295                           ;incstack = 0
 20296                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 20297  2C40  0027               	movlb	7	; select bank7
 20298  2C41  100C               	bcf	12,0	;volatile
 20299                           
 20300                           ;LEDs.c: 20: LATFbits.LATF1 = 0;
 20301  2C42  108C               	bcf	12,1	;volatile
 20302                           
 20303                           ;LEDs.c: 21: LATFbits.LATF2 = 0;
 20304  2C43  110C               	bcf	12,2	;volatile
 20305                           
 20306                           ;LEDs.c: 22: LATFbits.LATF3 = 0;
 20307  2C44  118C               	bcf	12,3	;volatile
 20308                           
 20309                           ;LEDs.c: 23: LATFbits.LATF4 = 0;
 20310  2C45  120C               	bcf	12,4	;volatile
 20311                           
 20312                           ;LEDs.c: 24: switch (x) {
 20313  2C46  2C76               	goto	l6605
 20314  2C47                     l6593:	
 20315                           ;LEDs.c: 25: case 1:
 20316                           
 20317                           
 20318                           ;LEDs.c: 26: LATFbits.LATF0 = ledState;
 20319  2C47  0021               	movlb	1	; select bank1
 20320  2C48  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20321  2C49  0027               	movlb	7	; select bank7
 20322  2C4A  1C03               	skipc
 20323  2C4B  100C               	bcf	12,0	;volatile
 20324  2C4C  1803               	skipnc
 20325  2C4D  140C               	bsf	12,0	;volatile
 20326                           
 20327                           ;LEDs.c: 27: break;
 20328  2C4E  0008               	return
 20329  2C4F                     l6595:	
 20330                           ;LEDs.c: 28: case 2:
 20331                           
 20332                           
 20333                           ;LEDs.c: 29: LATFbits.LATF1 = ledState;
 20334  2C4F  0021               	movlb	1	; select bank1
 20335  2C50  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20336  2C51  0027               	movlb	7	; select bank7
 20337  2C52  1C03               	skipc
 20338  2C53  108C               	bcf	12,1	;volatile
 20339  2C54  1803               	skipnc
 20340  2C55  148C               	bsf	12,1	;volatile
 20341                           
 20342                           ;LEDs.c: 30: break;
 20343  2C56  0008               	return
 20344  2C57                     l6597:	
 20345                           ;LEDs.c: 31: case 3:
 20346                           
 20347                           
 20348                           ;LEDs.c: 32: LATFbits.LATF2 = ledState;
 20349  2C57  0021               	movlb	1	; select bank1
 20350  2C58  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20351  2C59  0027               	movlb	7	; select bank7
 20352  2C5A  1C03               	skipc
 20353  2C5B  110C               	bcf	12,2	;volatile
 20354  2C5C  1803               	skipnc
 20355  2C5D  150C               	bsf	12,2	;volatile
 20356                           
 20357                           ;LEDs.c: 33: break;
 20358  2C5E  0008               	return
 20359  2C5F                     l6599:	
 20360                           ;LEDs.c: 34: case 4:
 20361                           
 20362                           
 20363                           ;LEDs.c: 35: LATFbits.LATF3 = ledState;
 20364  2C5F  0021               	movlb	1	; select bank1
 20365  2C60  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20366  2C61  0027               	movlb	7	; select bank7
 20367  2C62  1C03               	skipc
 20368  2C63  118C               	bcf	12,3	;volatile
 20369  2C64  1803               	skipnc
 20370  2C65  158C               	bsf	12,3	;volatile
 20371                           
 20372                           ;LEDs.c: 36: break;
 20373  2C66  0008               	return
 20374  2C67                     l6601:	
 20375                           ;LEDs.c: 37: case 5:
 20376                           
 20377                           
 20378                           ;LEDs.c: 38: LATFbits.LATF4 = ledState;
 20379  2C67  0021               	movlb	1	; select bank1
 20380  2C68  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20381  2C69  0027               	movlb	7	; select bank7
 20382  2C6A  1C03               	skipc
 20383  2C6B  120C               	bcf	12,4	;volatile
 20384  2C6C  1803               	skipnc
 20385  2C6D  160C               	bsf	12,4	;volatile
 20386                           
 20387                           ;LEDs.c: 41: break;
 20388                           
 20389                           ;LEDs.c: 40: case 6:
 20390                           
 20391                           ;LEDs.c: 39: break;
 20392  2C6E  0008               	return
 20393  2C6F                     l924:	
 20394                           ;LEDs.c: 42: case 100:
 20395                           
 20396                           
 20397                           ;LEDs.c: 43: LATFbits.LATF0 = 1;
 20398  2C6F  0027               	movlb	7	; select bank7
 20399  2C70  140C               	bsf	12,0	;volatile
 20400                           
 20401                           ;LEDs.c: 44: LATFbits.LATF1 = 1;
 20402  2C71  148C               	bsf	12,1	;volatile
 20403                           
 20404                           ;LEDs.c: 45: LATFbits.LATF2 = 1;
 20405  2C72  150C               	bsf	12,2	;volatile
 20406                           
 20407                           ;LEDs.c: 46: LATFbits.LATF3 = 1;
 20408  2C73  158C               	bsf	12,3	;volatile
 20409                           
 20410                           ;LEDs.c: 47: LATFbits.LATF4 = 1;
 20411  2C74  160C               	bsf	12,4	;volatile
 20412                           
 20413                           ;LEDs.c: 49: }
 20414                           
 20415                           ;LEDs.c: 48: break;
 20416  2C75  0008               	return
 20417  2C76                     l6605:	
 20418                           
 20419                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20420                           ; Switch size 1, requested type "space"
 20421                           ; Number of cases is 1, Range of values is 0 to 0
 20422                           ; switch strategies available:
 20423                           ; Name         Instructions Cycles
 20424                           ; simple_byte            4     3 (average)
 20425                           ; direct_byte            8     6 (fixed)
 20426                           ; jumptable            260     6 (fixed)
 20427                           ;	Chosen strategy is simple_byte
 20428  2C76  0021               	movlb	1	; select bank1
 20429  2C77  0821               	movf	(set_leds_top@x+1)^(0+128),w
 20430  2C78  3A00               	xorlw	0	; case 0
 20431  2C79  1903               	skipnz
 20432  2C7A  2C7C               	goto	l9471
 20433  2C7B  2C93               	goto	l925
 20434  2C7C                     l9471:	
 20435                           
 20436                           ; Switch size 1, requested type "space"
 20437                           ; Number of cases is 7, Range of values is 1 to 100
 20438                           ; switch strategies available:
 20439                           ; Name         Instructions Cycles
 20440                           ; simple_byte           22    12 (average)
 20441                           ; direct_byte          209     9 (fixed)
 20442                           ; jumptable            263     9 (fixed)
 20443                           ;	Chosen strategy is simple_byte
 20444  2C7C  0820               	movf	set_leds_top@x^(0+128),w
 20445  2C7D  3A01               	xorlw	1	; case 1
 20446  2C7E  1903               	skipnz
 20447  2C7F  2C47               	goto	l6593
 20448  2C80  3A03               	xorlw	3	; case 2
 20449  2C81  1903               	skipnz
 20450  2C82  2C4F               	goto	l6595
 20451  2C83  3A01               	xorlw	1	; case 3
 20452  2C84  1903               	skipnz
 20453  2C85  2C57               	goto	l6597
 20454  2C86  3A07               	xorlw	7	; case 4
 20455  2C87  1903               	skipnz
 20456  2C88  2C5F               	goto	l6599
 20457  2C89  3A01               	xorlw	1	; case 5
 20458  2C8A  1903               	skipnz
 20459  2C8B  2C67               	goto	l6601
 20460  2C8C  3A03               	xorlw	3	; case 6
 20461  2C8D  1903               	skipnz
 20462  2C8E  2C93               	goto	l925
 20463  2C8F  3A62               	xorlw	98	; case 100
 20464  2C90  1903               	skipnz
 20465  2C91  2C6F               	goto	l924
 20466  2C92  2C93               	goto	l925
 20467  2C93                     l925:	
 20468  2C93  0008               	return
 20469  2C94                     __end_of_set_leds_top:	
 20470                           
 20471                           	psect	text88
 20472  30EE                     __ptext88:	
 20473 ;; *************** function _getSubdivisionState *****************
 20474 ;; Defined at:
 20475 ;;		line 332 in file "state_manager.c"
 20476 ;; Parameters:    Size  Location     Type
 20477 ;;		None
 20478 ;; Auto vars:     Size  Location     Type
 20479 ;;		None
 20480 ;; Return value:  Size  Location     Type
 20481 ;;                  2   52[BANK2 ] int 
 20482 ;; Registers used:
 20483 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20484 ;; Tracked objects:
 20485 ;;		On entry : 0/0
 20486 ;;		On exit  : 0/0
 20487 ;;		Unchanged: 0/0
 20488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20489 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20491 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20492 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20493 ;;Total ram usage:        4 bytes
 20494 ;; Hardware stack levels used:    1
 20495 ;; Hardware stack levels required when called:   10
 20496 ;; This function calls:
 20497 ;;		_initStateManager
 20498 ;; This function is called by:
 20499 ;;		_InitSubdivision
 20500 ;; This function uses a non-reentrant model
 20501 ;;
 20502                           
 20503                           
 20504                           ;psect for function _getSubdivisionState
 20505  30EE                     _getSubdivisionState:	
 20506                           
 20507                           ;state_manager.c: 333: if (isStateInitialized != 1) {
 20508                           
 20509                           ;incstack = 0
 20510                           ; Regs used in _getSubdivisionState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20511  30EE  0020               	movlb	0	; select bank0
 20512  30EF  035D               	decf	_isStateInitialized,w
 20513  30F0  045E               	iorwf	_isStateInitialized+1,w
 20514  30F1  1903               	btfsc	3,2
 20515  30F2  28F5               	goto	l7481
 20516                           
 20517                           ;state_manager.c: 334: initStateManager();
 20518  30F3  31BF  27A3         	fcall	_initStateManager
 20519  30F5                     l7481:	
 20520                           
 20521                           ;state_manager.c: 335: }
 20522                           ;state_manager.c: 336: return pedalState.subdivision;
 20523  30F5  0025               	movlb	5	; select bank5
 20524  30F6  0838               	movf	(_pedalState^(0+640)+4),w
 20525  30F7  0022               	movlb	2	; select bank2
 20526  30F8  00D6               	movwf	??_getSubdivisionState^(0+256)
 20527  30F9  01D7               	clrf	(??_getSubdivisionState^(0+256)+1)
 20528  30FA  0856               	movf	??_getSubdivisionState^(0+256),w
 20529  30FB  00D4               	movwf	?_getSubdivisionState^(0+256)
 20530  30FC  0857               	movf	(??_getSubdivisionState+1)^(0+256),w
 20531  30FD  00D5               	movwf	(?_getSubdivisionState+1)^(0+256)
 20532  30FE  0008               	return
 20533  30FF                     __end_of_getSubdivisionState:	
 20534                           
 20535                           	psect	text89
 20536  3FA3                     __ptext89:	
 20537 ;; *************** function _initStateManager *****************
 20538 ;; Defined at:
 20539 ;;		line 23 in file "state_manager.c"
 20540 ;; Parameters:    Size  Location     Type
 20541 ;;		None
 20542 ;; Auto vars:     Size  Location     Type
 20543 ;;		None
 20544 ;; Return value:  Size  Location     Type
 20545 ;;                  1    wreg      void 
 20546 ;; Registers used:
 20547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20548 ;; Tracked objects:
 20549 ;;		On entry : 0/0
 20550 ;;		On exit  : 0/0
 20551 ;;		Unchanged: 0/0
 20552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20557 ;;Total ram usage:        0 bytes
 20558 ;; Hardware stack levels used:    1
 20559 ;; Hardware stack levels required when called:    9
 20560 ;; This function calls:
 20561 ;;		_getCurrentState
 20562 ;; This function is called by:
 20563 ;;		_getSwitchBypassState
 20564 ;;		_getVolume
 20565 ;;		_getFrequency
 20566 ;;		_getSymmetry
 20567 ;;		_getDepth
 20568 ;;		_getTapTime
 20569 ;;		_getSubdivisionState
 20570 ;;		_getWaveFormState
 20571 ;;		_getPedalMode
 20572 ;;		_getSwitchTapState
 20573 ;; This function uses a non-reentrant model
 20574 ;;
 20575                           
 20576                           
 20577                           ;psect for function _initStateManager
 20578  3FA3                     _initStateManager:	
 20579                           
 20580                           ;state_manager.c: 24: isStateInitialized = 0;
 20581                           
 20582                           ;incstack = 0
 20583                           ; Regs used in _initStateManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20584  3FA3  0020               	movlb	0	; select bank0
 20585  3FA4  01DD               	clrf	_isStateInitialized
 20586  3FA5  01DE               	clrf	_isStateInitialized+1
 20587                           
 20588                           ;state_manager.c: 25: getCurrentState();
 20589  3FA6  31B1  21B4         	fcall	_getCurrentState
 20590  3FA8  0008               	return
 20591  3FA9                     __end_of_initStateManager:	
 20592                           
 20593                           	psect	text90
 20594  31B4                     __ptext90:	
 20595 ;; *************** function _getCurrentState *****************
 20596 ;; Defined at:
 20597 ;;		line 28 in file "state_manager.c"
 20598 ;; Parameters:    Size  Location     Type
 20599 ;;		None
 20600 ;; Auto vars:     Size  Location     Type
 20601 ;;		None
 20602 ;; Return value:  Size  Location     Type
 20603 ;;                  15  1180[None  ] struct .
 20604 ;; Registers used:
 20605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20606 ;; Tracked objects:
 20607 ;;		On entry : 0/0
 20608 ;;		On exit  : 0/0
 20609 ;;		Unchanged: 0/0
 20610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20613 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20614 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20615 ;;Total ram usage:        1 bytes
 20616 ;; Hardware stack levels used:    1
 20617 ;; Hardware stack levels required when called:    8
 20618 ;; This function calls:
 20619 ;;		_getPreset
 20620 ;; This function is called by:
 20621 ;;		_initStateManager
 20622 ;; This function uses a non-reentrant model
 20623 ;;
 20624                           
 20625                           
 20626                           ;psect for function _getCurrentState
 20627  31B4                     _getCurrentState:	
 20628                           
 20629                           ;state_manager.c: 30: pedalState = getPreset(0);
 20630                           
 20631                           ;incstack = 0
 20632                           ; Regs used in _getCurrentState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20633  31B4  3000               	movlw	0
 20634  31B5  3192  2298  31B1   	fcall	_getPreset
 20635  31B8  0022               	movlb	2	; select bank2
 20636  31B9  3040               	movlw	low ?_getPreset
 20637  31BA  0086               	movwf	6
 20638  31BB  3001               	movlw	high ?_getPreset
 20639  31BC  0087               	movwf	7
 20640  31BD  30B4               	movlw	low _pedalState
 20641  31BE  0084               	movwf	4
 20642  31BF  3002               	movlw	high _pedalState
 20643  31C0  0085               	movwf	5
 20644  31C1  300F               	movlw	15
 20645  31C2  00D3               	movwf	??_getCurrentState^(0+256)
 20646  31C3                     u6140:	
 20647  31C3  0016               	moviw fsr1++
 20648  31C4  001A               	movwi fsr0++
 20649  31C5  0BD3               	decfsz	??_getCurrentState^(0+256),f
 20650  31C6  29C3               	goto	u6140
 20651                           
 20652                           ;state_manager.c: 31: isStateInitialized = 1;
 20653  31C7  3001               	movlw	1
 20654  31C8  0020               	movlb	0	; select bank0
 20655  31C9  00DD               	movwf	_isStateInitialized
 20656  31CA  3000               	movlw	0
 20657  31CB  00DE               	movwf	_isStateInitialized+1
 20658  31CC  0008               	return
 20659  31CD                     __end_of_getCurrentState:	
 20660                           ;state_manager.c: 32: return pedalState;
 20661                           ;	Return value of _getCurrentState is never used
 20662                           
 20663                           
 20664                           	psect	text91
 20665  1298                     __ptext91:	
 20666 ;; *************** function _getPreset *****************
 20667 ;; Defined at:
 20668 ;;		line 139 in file "state_manager.c"
 20669 ;; Parameters:    Size  Location     Type
 20670 ;;  presetChanne    1    wreg     unsigned char 
 20671 ;; Auto vars:     Size  Location     Type
 20672 ;;  presetChanne    1    1[BANK3 ] unsigned char 
 20673 ;;  presets        30    3[BANK3 ] struct .[3]
 20674 ;;  pedalPreset    15   34[BANK3 ] struct .
 20675 ;;  bankChannel     1   33[BANK3 ] unsigned char 
 20676 ;;  bankID          1    2[BANK3 ] unsigned char 
 20677 ;;  r               1    0[BANK3 ] unsigned char 
 20678 ;; Return value:  Size  Location     Type
 20679 ;;                  15   32[BANK2 ] struct .
 20680 ;; Registers used:
 20681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20682 ;; Tracked objects:
 20683 ;;		On entry : 0/0
 20684 ;;		On exit  : 0/0
 20685 ;;		Unchanged: 0/0
 20686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20687 ;;      Params:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20688 ;;      Locals:         0       0       0       0      49       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20689 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20690 ;;      Totals:         0       0       0      19      49       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20691 ;;Total ram usage:       68 bytes
 20692 ;; Hardware stack levels used:    1
 20693 ;; Hardware stack levels required when called:    7
 20694 ;; This function calls:
 20695 ;;		_GetBitMask
 20696 ;;		_HEF_ByteArrayRead
 20697 ;;		___awdiv
 20698 ;;		___bmul
 20699 ;; This function is called by:
 20700 ;;		_getCurrentState
 20701 ;; This function uses a non-reentrant model
 20702 ;;
 20703                           
 20704                           
 20705                           ;psect for function _getPreset
 20706  1298                     _getPreset:	
 20707                           
 20708                           ;incstack = 0
 20709                           ; Regs used in _getPreset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20710                           ;getPreset@presetChannel stored from wreg
 20711  1298  0023               	movlb	3	; select bank3
 20712  1299  00A1               	movwf	getPreset@presetChannel^(0+384)
 20713                           
 20714                           ;state_manager.c: 140: PedalStorage presets[3];
 20715                           ;state_manager.c: 141: uint8_t r;
 20716                           ;state_manager.c: 143: char bankID = presetChannel / 3;
 20717  129A  3003               	movlw	3
 20718  129B  0021               	movlb	1	; select bank1
 20719  129C  00A0               	movwf	___awdiv@divisor^(0+128)
 20720  129D  3000               	movlw	0
 20721  129E  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
 20722  129F  0023               	movlb	3	; select bank3
 20723  12A0  0821               	movf	getPreset@presetChannel^(0+384),w
 20724  12A1  0022               	movlb	2	; select bank2
 20725  12A2  00CF               	movwf	??_getPreset^(0+256)
 20726  12A3  01D0               	clrf	(??_getPreset^(0+256)+1)
 20727  12A4  084F               	movf	??_getPreset^(0+256),w
 20728  12A5  0021               	movlb	1	; select bank1
 20729  12A6  00A2               	movwf	___awdiv@dividend^(0+128)
 20730  12A7  0022               	movlb	2	; select bank2
 20731  12A8  0850               	movf	(??_getPreset+1)^(0+256),w
 20732  12A9  0021               	movlb	1	; select bank1
 20733  12AA  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
 20734  12AB  31AB  23EE  3192   	fcall	___awdiv
 20735  12AE  0021               	movlb	1	; select bank1
 20736  12AF  0820               	movf	?___awdiv^(0+128),w
 20737  12B0  0022               	movlb	2	; select bank2
 20738  12B1  00D1               	movwf	(??_getPreset+2)^(0+256)
 20739  12B2  0851               	movf	(??_getPreset+2)^(0+256),w
 20740  12B3  0023               	movlb	3	; select bank3
 20741  12B4  00A2               	movwf	getPreset@bankID^(0+384)
 20742                           
 20743                           ;state_manager.c: 144: char bankChannel = presetChannel - (bankID * 3);
 20744  12B5  3003               	movlw	3
 20745  12B6  0022               	movlb	2	; select bank2
 20746  12B7  00CF               	movwf	??_getPreset^(0+256)
 20747  12B8  084F               	movf	??_getPreset^(0+256),w
 20748  12B9  0021               	movlb	1	; select bank1
 20749  12BA  00A0               	movwf	___bmul@multiplicand^(0+128)
 20750  12BB  0023               	movlb	3	; select bank3
 20751  12BC  0822               	movf	getPreset@bankID^(0+384),w
 20752  12BD  31B1  2121  3192   	fcall	___bmul
 20753  12C0  3AFF               	xorlw	255
 20754  12C1  3E01               	addlw	1
 20755  12C2  0023               	movlb	3	; select bank3
 20756  12C3  0721               	addwf	getPreset@presetChannel^(0+384),w
 20757  12C4  0022               	movlb	2	; select bank2
 20758  12C5  00D0               	movwf	(??_getPreset+1)^(0+256)
 20759  12C6  0850               	movf	(??_getPreset+1)^(0+256),w
 20760  12C7  0023               	movlb	3	; select bank3
 20761  12C8  00C1               	movwf	getPreset@bankChannel^(0+384)
 20762                           
 20763                           ;state_manager.c: 147: r = HEF_ByteArrayRead((void *) &presets, bankID, sizeof (presets)
      +                          );
 20764  12C9  30A3               	movlw	low getPreset@presets
 20765  12CA  0021               	movlb	1	; select bank1
 20766  12CB  00A3               	movwf	HEF_ByteArrayRead@bArray^(0+128)
 20767  12CC  3001               	movlw	high getPreset@presets
 20768  12CD  00A4               	movwf	(HEF_ByteArrayRead@bArray+1)^(0+128)
 20769  12CE  0023               	movlb	3	; select bank3
 20770  12CF  0822               	movf	getPreset@bankID^(0+384),w
 20771  12D0  0022               	movlb	2	; select bank2
 20772  12D1  00CF               	movwf	??_getPreset^(0+256)
 20773  12D2  084F               	movf	??_getPreset^(0+256),w
 20774  12D3  0021               	movlb	1	; select bank1
 20775  12D4  00A5               	movwf	HEF_ByteArrayRead@block^(0+128)
 20776  12D5  301E               	movlw	30
 20777  12D6  0022               	movlb	2	; select bank2
 20778  12D7  00D0               	movwf	(??_getPreset+1)^(0+256)
 20779  12D8  0850               	movf	(??_getPreset+1)^(0+256),w
 20780  12D9  0021               	movlb	1	; select bank1
 20781  12DA  00A6               	movwf	HEF_ByteArrayRead@count^(0+128)
 20782  12DB  31B5  25AD  3192   	fcall	_HEF_ByteArrayRead
 20783  12DE  0022               	movlb	2	; select bank2
 20784  12DF  00D1               	movwf	(??_getPreset+2)^(0+256)
 20785  12E0  0851               	movf	(??_getPreset+2)^(0+256),w
 20786  12E1  0023               	movlb	3	; select bank3
 20787  12E2  00A0               	movwf	getPreset@r^(0+384)
 20788                           
 20789                           ;state_manager.c: 149: PedalState pedalPreset;
 20790                           ;state_manager.c: 151: pedalPreset.pedalMode = GetBitMask(presets[bankChannel].modeBypas
      +                          sSubdivWave, 0, 4);
 20791  12E3  300A               	movlw	10
 20792  12E4  0022               	movlb	2	; select bank2
 20793  12E5  00CF               	movwf	??_getPreset^(0+256)
 20794  12E6  084F               	movf	??_getPreset^(0+256),w
 20795  12E7  0021               	movlb	1	; select bank1
 20796  12E8  00A0               	movwf	___bmul@multiplicand^(0+128)
 20797  12E9  0023               	movlb	3	; select bank3
 20798  12EA  0841               	movf	getPreset@bankChannel^(0+384),w
 20799  12EB  31B1  2121  3192   	fcall	___bmul
 20800  12EE  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20801  12EF  0086               	movwf	6
 20802  12F0  3001               	movlw	1	; select bank3/4
 20803  12F1  0087               	movwf	7
 20804  12F2  3F40               	moviw [0]fsr1
 20805  12F3  0022               	movlb	2	; select bank2
 20806  12F4  00B4               	movwf	GetBitMask@storage^(0+256)
 20807  12F5  3F41               	moviw [1]fsr1
 20808  12F6  00B5               	movwf	(GetBitMask@storage+1)^(0+256)
 20809  12F7  01B6               	clrf	GetBitMask@index^(0+256)
 20810  12F8  3004               	movlw	4
 20811  12F9  00D0               	movwf	(??_getPreset+1)^(0+256)
 20812  12FA  0850               	movf	(??_getPreset+1)^(0+256),w
 20813  12FB  00B7               	movwf	GetBitMask@shift^(0+256)
 20814  12FC  31A9  21CD  3192   	fcall	_GetBitMask
 20815  12FF  0022               	movlb	2	; select bank2
 20816  1300  0834               	movf	?_GetBitMask^(0+256),w
 20817  1301  00D1               	movwf	(??_getPreset+2)^(0+256)
 20818  1302  0851               	movf	(??_getPreset+2)^(0+256),w
 20819  1303  0023               	movlb	3	; select bank3
 20820  1304  00D0               	movwf	(getPreset@pedalPreset^(0+384)+14)
 20821                           
 20822                           ;state_manager.c: 152: pedalPreset.bypass = GetBitMask(presets[bankChannel].modeBypassSu
      +                          bdivWave, 1, 4);
 20823  1305  300A               	movlw	10
 20824  1306  0022               	movlb	2	; select bank2
 20825  1307  00CF               	movwf	??_getPreset^(0+256)
 20826  1308  084F               	movf	??_getPreset^(0+256),w
 20827  1309  0021               	movlb	1	; select bank1
 20828  130A  00A0               	movwf	___bmul@multiplicand^(0+128)
 20829  130B  0023               	movlb	3	; select bank3
 20830  130C  0841               	movf	getPreset@bankChannel^(0+384),w
 20831  130D  31B1  2121  3192   	fcall	___bmul
 20832  1310  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20833  1311  0086               	movwf	6
 20834  1312  3001               	movlw	1	; select bank3/4
 20835  1313  0087               	movwf	7
 20836  1314  3F40               	moviw [0]fsr1
 20837  1315  0022               	movlb	2	; select bank2
 20838  1316  00B4               	movwf	GetBitMask@storage^(0+256)
 20839  1317  3F41               	moviw [1]fsr1
 20840  1318  00B5               	movwf	(GetBitMask@storage+1)^(0+256)
 20841  1319  01B6               	clrf	GetBitMask@index^(0+256)
 20842  131A  0AB6               	incf	GetBitMask@index^(0+256),f
 20843  131B  3004               	movlw	4
 20844  131C  00D0               	movwf	(??_getPreset+1)^(0+256)
 20845  131D  0850               	movf	(??_getPreset+1)^(0+256),w
 20846  131E  00B7               	movwf	GetBitMask@shift^(0+256)
 20847  131F  31A9  21CD  3192   	fcall	_GetBitMask
 20848  1322  0022               	movlb	2	; select bank2
 20849  1323  0834               	movf	?_GetBitMask^(0+256),w
 20850  1324  00D1               	movwf	(??_getPreset+2)^(0+256)
 20851  1325  0851               	movf	(??_getPreset+2)^(0+256),w
 20852  1326  0023               	movlb	3	; select bank3
 20853  1327  00C5               	movwf	(getPreset@pedalPreset^(0+384)+3)
 20854                           
 20855                           ;state_manager.c: 153: pedalPreset.subdivision = GetBitMask(presets[bankChannel].modeByp
      +                          assSubdivWave, 2, 4);
 20856  1328  300A               	movlw	10
 20857  1329  0022               	movlb	2	; select bank2
 20858  132A  00CF               	movwf	??_getPreset^(0+256)
 20859  132B  084F               	movf	??_getPreset^(0+256),w
 20860  132C  0021               	movlb	1	; select bank1
 20861  132D  00A0               	movwf	___bmul@multiplicand^(0+128)
 20862  132E  0023               	movlb	3	; select bank3
 20863  132F  0841               	movf	getPreset@bankChannel^(0+384),w
 20864  1330  31B1  2121  3192   	fcall	___bmul
 20865  1333  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20866  1334  0086               	movwf	6
 20867  1335  3001               	movlw	1	; select bank3/4
 20868  1336  0087               	movwf	7
 20869  1337  3F40               	moviw [0]fsr1
 20870  1338  0022               	movlb	2	; select bank2
 20871  1339  00B4               	movwf	GetBitMask@storage^(0+256)
 20872  133A  3F41               	moviw [1]fsr1
 20873  133B  00B5               	movwf	(GetBitMask@storage+1)^(0+256)
 20874  133C  3002               	movlw	2
 20875  133D  00D0               	movwf	(??_getPreset+1)^(0+256)
 20876  133E  0850               	movf	(??_getPreset+1)^(0+256),w
 20877  133F  00B6               	movwf	GetBitMask@index^(0+256)
 20878  1340  3004               	movlw	4
 20879  1341  00D1               	movwf	(??_getPreset+2)^(0+256)
 20880  1342  0851               	movf	(??_getPreset+2)^(0+256),w
 20881  1343  00B7               	movwf	GetBitMask@shift^(0+256)
 20882  1344  31A9  21CD  3192   	fcall	_GetBitMask
 20883  1347  0022               	movlb	2	; select bank2
 20884  1348  0834               	movf	?_GetBitMask^(0+256),w
 20885  1349  00D2               	movwf	(??_getPreset+3)^(0+256)
 20886  134A  0852               	movf	(??_getPreset+3)^(0+256),w
 20887  134B  0023               	movlb	3	; select bank3
 20888  134C  00C6               	movwf	(getPreset@pedalPreset^(0+384)+4)
 20889                           
 20890                           ;state_manager.c: 154: pedalPreset.waveForm = GetBitMask(presets[bankChannel].modeBypass
      +                          SubdivWave, 3, 4);
 20891  134D  300A               	movlw	10
 20892  134E  0022               	movlb	2	; select bank2
 20893  134F  00CF               	movwf	??_getPreset^(0+256)
 20894  1350  084F               	movf	??_getPreset^(0+256),w
 20895  1351  0021               	movlb	1	; select bank1
 20896  1352  00A0               	movwf	___bmul@multiplicand^(0+128)
 20897  1353  0023               	movlb	3	; select bank3
 20898  1354  0841               	movf	getPreset@bankChannel^(0+384),w
 20899  1355  31B1  2121  3192   	fcall	___bmul
 20900  1358  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20901  1359  0086               	movwf	6
 20902  135A  3001               	movlw	1	; select bank3/4
 20903  135B  0087               	movwf	7
 20904  135C  3F40               	moviw [0]fsr1
 20905  135D  0022               	movlb	2	; select bank2
 20906  135E  00B4               	movwf	GetBitMask@storage^(0+256)
 20907  135F  3F41               	moviw [1]fsr1
 20908  1360  00B5               	movwf	(GetBitMask@storage+1)^(0+256)
 20909  1361  3003               	movlw	3
 20910  1362  00D0               	movwf	(??_getPreset+1)^(0+256)
 20911  1363  0850               	movf	(??_getPreset+1)^(0+256),w
 20912  1364  00B6               	movwf	GetBitMask@index^(0+256)
 20913  1365  3004               	movlw	4
 20914  1366  00D1               	movwf	(??_getPreset+2)^(0+256)
 20915  1367  0851               	movf	(??_getPreset+2)^(0+256),w
 20916  1368  00B7               	movwf	GetBitMask@shift^(0+256)
 20917  1369  31A9  21CD  3192   	fcall	_GetBitMask
 20918  136C  0022               	movlb	2	; select bank2
 20919  136D  0834               	movf	?_GetBitMask^(0+256),w
 20920  136E  00D2               	movwf	(??_getPreset+3)^(0+256)
 20921  136F  0852               	movf	(??_getPreset+3)^(0+256),w
 20922  1370  0023               	movlb	3	; select bank3
 20923  1371  00C7               	movwf	(getPreset@pedalPreset^(0+384)+5)
 20924                           
 20925                           ;state_manager.c: 156: pedalPreset.baseTapTime = presets[bankChannel].baseTapTime;
 20926  1372  300A               	movlw	10
 20927  1373  0022               	movlb	2	; select bank2
 20928  1374  00CF               	movwf	??_getPreset^(0+256)
 20929  1375  084F               	movf	??_getPreset^(0+256),w
 20930  1376  0021               	movlb	1	; select bank1
 20931  1377  00A0               	movwf	___bmul@multiplicand^(0+128)
 20932  1378  0023               	movlb	3	; select bank3
 20933  1379  0841               	movf	getPreset@bankChannel^(0+384),w
 20934  137A  31B1  2121  3192   	fcall	___bmul
 20935  137D  3E02               	addlw	2
 20936  137E  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20937  137F  0086               	movwf	6
 20938  1380  3001               	movlw	1	; select bank3/4
 20939  1381  0087               	movwf	7
 20940  1382  3F40               	moviw [0]fsr1
 20941  1383  0023               	movlb	3	; select bank3
 20942  1384  00C3               	movwf	(getPreset@pedalPreset^(0+384)+1)
 20943  1385  3F41               	moviw [1]fsr1
 20944  1386  00C4               	movwf	((getPreset@pedalPreset+1)^(0+384)+1)
 20945                           
 20946                           ;state_manager.c: 158: pedalPreset.volume = presets[bankChannel].volume;
 20947  1387  300A               	movlw	10
 20948  1388  0022               	movlb	2	; select bank2
 20949  1389  00CF               	movwf	??_getPreset^(0+256)
 20950  138A  084F               	movf	??_getPreset^(0+256),w
 20951  138B  0021               	movlb	1	; select bank1
 20952  138C  00A0               	movwf	___bmul@multiplicand^(0+128)
 20953  138D  0023               	movlb	3	; select bank3
 20954  138E  0841               	movf	getPreset@bankChannel^(0+384),w
 20955  138F  31B1  2121  3192   	fcall	___bmul
 20956  1392  3E04               	addlw	4
 20957  1393  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20958  1394  0086               	movwf	6
 20959  1395  3001               	movlw	1	; select bank3/4
 20960  1396  0087               	movwf	7
 20961  1397  3F40               	moviw [0]fsr1
 20962  1398  0023               	movlb	3	; select bank3
 20963  1399  00C8               	movwf	(getPreset@pedalPreset^(0+384)+6)
 20964  139A  3F41               	moviw [1]fsr1
 20965  139B  00C9               	movwf	((getPreset@pedalPreset+1)^(0+384)+6)
 20966                           
 20967                           ;state_manager.c: 159: pedalPreset.frequency = presets[bankChannel].frequency;
 20968  139C  300A               	movlw	10
 20969  139D  0022               	movlb	2	; select bank2
 20970  139E  00CF               	movwf	??_getPreset^(0+256)
 20971  139F  084F               	movf	??_getPreset^(0+256),w
 20972  13A0  0021               	movlb	1	; select bank1
 20973  13A1  00A0               	movwf	___bmul@multiplicand^(0+128)
 20974  13A2  0023               	movlb	3	; select bank3
 20975  13A3  0841               	movf	getPreset@bankChannel^(0+384),w
 20976  13A4  31B1  2121  3192   	fcall	___bmul
 20977  13A7  3E06               	addlw	6
 20978  13A8  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20979  13A9  0086               	movwf	6
 20980  13AA  3001               	movlw	1	; select bank3/4
 20981  13AB  0087               	movwf	7
 20982  13AC  3F40               	moviw [0]fsr1
 20983  13AD  0023               	movlb	3	; select bank3
 20984  13AE  00CA               	movwf	(getPreset@pedalPreset^(0+384)+8)
 20985  13AF  3F41               	moviw [1]fsr1
 20986  13B0  00CB               	movwf	((getPreset@pedalPreset+1)^(0+384)+8)
 20987                           
 20988                           ;state_manager.c: 161: pedalPreset.symmetry = (int)presets[bankChannel].symmetry * 4;
 20989  13B1  300A               	movlw	10
 20990  13B2  0022               	movlb	2	; select bank2
 20991  13B3  00CF               	movwf	??_getPreset^(0+256)
 20992  13B4  084F               	movf	??_getPreset^(0+256),w
 20993  13B5  0021               	movlb	1	; select bank1
 20994  13B6  00A0               	movwf	___bmul@multiplicand^(0+128)
 20995  13B7  0023               	movlb	3	; select bank3
 20996  13B8  0841               	movf	getPreset@bankChannel^(0+384),w
 20997  13B9  31B1  2121  3192   	fcall	___bmul
 20998  13BC  3E08               	addlw	8
 20999  13BD  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 21000  13BE  0086               	movwf	6
 21001  13BF  3001               	movlw	1	; select bank3/4
 21002  13C0  0087               	movwf	7
 21003  13C1  0801               	movf	1,w
 21004  13C2  0022               	movlb	2	; select bank2
 21005  13C3  00D0               	movwf	(??_getPreset+1)^(0+256)
 21006  13C4  01D1               	clrf	((??_getPreset+1)^(0+256)+1)
 21007  13C5  35D0               	lslf	(??_getPreset+1)^(0+256),f
 21008  13C6  0DD1               	rlf	((??_getPreset+1)^(0+256)+1),f
 21009  13C7  35D0               	lslf	(??_getPreset+1)^(0+256),f
 21010  13C8  0DD1               	rlf	((??_getPreset+1)^(0+256)+1),f
 21011  13C9  0850               	movf	(??_getPreset+1)^(0+256),w
 21012  13CA  0023               	movlb	3	; select bank3
 21013  13CB  00CC               	movwf	(getPreset@pedalPreset^(0+384)+10)
 21014  13CC  0022               	movlb	2	; select bank2
 21015  13CD  0851               	movf	(??_getPreset+2)^(0+256),w
 21016  13CE  0023               	movlb	3	; select bank3
 21017  13CF  00CD               	movwf	((getPreset@pedalPreset+1)^(0+384)+10)
 21018                           
 21019                           ;state_manager.c: 163: pedalPreset.depth = (int)presets[bankChannel].depth * 4;
 21020  13D0  300A               	movlw	10
 21021  13D1  0022               	movlb	2	; select bank2
 21022  13D2  00CF               	movwf	??_getPreset^(0+256)
 21023  13D3  084F               	movf	??_getPreset^(0+256),w
 21024  13D4  0021               	movlb	1	; select bank1
 21025  13D5  00A0               	movwf	___bmul@multiplicand^(0+128)
 21026  13D6  0023               	movlb	3	; select bank3
 21027  13D7  0841               	movf	getPreset@bankChannel^(0+384),w
 21028  13D8  31B1  2121  3192   	fcall	___bmul
 21029  13DB  3E09               	addlw	9
 21030  13DC  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 21031  13DD  0086               	movwf	6
 21032  13DE  3001               	movlw	1	; select bank3/4
 21033  13DF  0087               	movwf	7
 21034  13E0  0801               	movf	1,w
 21035  13E1  0022               	movlb	2	; select bank2
 21036  13E2  00D0               	movwf	(??_getPreset+1)^(0+256)
 21037  13E3  01D1               	clrf	((??_getPreset+1)^(0+256)+1)
 21038  13E4  35D0               	lslf	(??_getPreset+1)^(0+256),f
 21039  13E5  0DD1               	rlf	((??_getPreset+1)^(0+256)+1),f
 21040  13E6  35D0               	lslf	(??_getPreset+1)^(0+256),f
 21041  13E7  0DD1               	rlf	((??_getPreset+1)^(0+256)+1),f
 21042  13E8  0850               	movf	(??_getPreset+1)^(0+256),w
 21043  13E9  0023               	movlb	3	; select bank3
 21044  13EA  00CE               	movwf	(getPreset@pedalPreset^(0+384)+12)
 21045  13EB  0022               	movlb	2	; select bank2
 21046  13EC  0851               	movf	(??_getPreset+2)^(0+256),w
 21047  13ED  0023               	movlb	3	; select bank3
 21048  13EE  00CF               	movwf	((getPreset@pedalPreset+1)^(0+384)+12)
 21049                           
 21050                           ;state_manager.c: 172: if (pedalPreset.tap != 1) {
 21051  13EF  0342               	decf	getPreset@pedalPreset^(0+384),w
 21052  13F0  1D03               	btfss	3,2
 21053                           
 21054                           ;state_manager.c: 173: pedalPreset.tap = 0;
 21055  13F1  01C2               	clrf	getPreset@pedalPreset^(0+384)
 21056                           
 21057                           ;state_manager.c: 174: }
 21058                           ;state_manager.c: 175: if (pedalPreset.bypass != 1) {
 21059  13F2  0345               	decf	(getPreset@pedalPreset^(0+384)+3),w
 21060  13F3  1D03               	btfss	3,2
 21061                           
 21062                           ;state_manager.c: 176: pedalPreset.bypass = 0;
 21063  13F4  01C5               	clrf	(getPreset@pedalPreset^(0+384)+3)
 21064                           
 21065                           ;state_manager.c: 177: }
 21066                           ;state_manager.c: 179: if (pedalPreset.subdivision < 0 || pedalPreset.subdivision > 6) {
 21067  13F5  3007               	movlw	7
 21068  13F6  0246               	subwf	(getPreset@pedalPreset^(0+384)+4),w
 21069  13F7  1C03               	skipc
 21070  13F8  2BFF               	goto	l6661
 21071                           
 21072                           ;state_manager.c: 180: pedalPreset.subdivision = 6;
 21073  13F9  3006               	movlw	6
 21074  13FA  0022               	movlb	2	; select bank2
 21075  13FB  00CF               	movwf	??_getPreset^(0+256)
 21076  13FC  084F               	movf	??_getPreset^(0+256),w
 21077  13FD  0023               	movlb	3	; select bank3
 21078  13FE  00C6               	movwf	(getPreset@pedalPreset^(0+384)+4)
 21079  13FF                     l6661:	
 21080                           
 21081                           ;state_manager.c: 181: }
 21082                           ;state_manager.c: 183: if (pedalPreset.waveForm < 1 || pedalPreset.waveForm > 5) {
 21083  13FF  0847               	movf	(getPreset@pedalPreset^(0+384)+5),w
 21084  1400  1903               	btfsc	3,2
 21085  1401  2C06               	goto	l1313
 21086  1402  3006               	movlw	6
 21087  1403  0247               	subwf	(getPreset@pedalPreset^(0+384)+5),w
 21088  1404  1C03               	skipc
 21089  1405  2C08               	goto	l6665
 21090  1406                     l1313:	
 21091                           
 21092                           ;state_manager.c: 184: pedalPreset.waveForm = 1;
 21093  1406  01C7               	clrf	(getPreset@pedalPreset^(0+384)+5)
 21094  1407  0AC7               	incf	(getPreset@pedalPreset^(0+384)+5),f
 21095  1408                     l6665:	
 21096                           
 21097                           ;state_manager.c: 185: }
 21098                           ;state_manager.c: 187: if (pedalPreset.volume < 1 || pedalPreset.volume > 1023) {
 21099  1408  0848               	movf	(getPreset@pedalPreset^(0+384)+6),w
 21100  1409  0449               	iorwf	((getPreset@pedalPreset+1)^(0+384)+6),w
 21101  140A  1903               	btfsc	3,2
 21102  140B  2C13               	goto	l6669
 21103  140C  3004               	movlw	4
 21104  140D  0249               	subwf	((getPreset@pedalPreset+1)^(0+384)+6),w
 21105  140E  3000               	movlw	0
 21106  140F  1903               	skipnz
 21107  1410  0248               	subwf	(getPreset@pedalPreset^(0+384)+6),w
 21108  1411  1C03               	skipc
 21109  1412  2C17               	goto	l6671
 21110  1413                     l6669:	
 21111                           
 21112                           ;state_manager.c: 188: pedalPreset.volume = 1000;
 21113  1413  30E8               	movlw	232
 21114  1414  00C8               	movwf	(getPreset@pedalPreset^(0+384)+6)
 21115  1415  3003               	movlw	3
 21116  1416  00C9               	movwf	(getPreset@pedalPreset^(0+384)+7)
 21117  1417                     l6671:	
 21118                           
 21119                           ;state_manager.c: 189: }
 21120                           ;state_manager.c: 191: if (pedalPreset.frequency < 1 || pedalPreset.frequency > 1023) {
 21121  1417  084A               	movf	(getPreset@pedalPreset^(0+384)+8),w
 21122  1418  044B               	iorwf	((getPreset@pedalPreset+1)^(0+384)+8),w
 21123  1419  1903               	btfsc	3,2
 21124  141A  2C22               	goto	l6675
 21125  141B  3004               	movlw	4
 21126  141C  024B               	subwf	((getPreset@pedalPreset+1)^(0+384)+8),w
 21127  141D  3000               	movlw	0
 21128  141E  1903               	skipnz
 21129  141F  024A               	subwf	(getPreset@pedalPreset^(0+384)+8),w
 21130  1420  1C03               	skipc
 21131  1421  2C26               	goto	l6677
 21132  1422                     l6675:	
 21133                           
 21134                           ;state_manager.c: 192: pedalPreset.frequency = 1000;
 21135  1422  30E8               	movlw	232
 21136  1423  00CA               	movwf	(getPreset@pedalPreset^(0+384)+8)
 21137  1424  3003               	movlw	3
 21138  1425  00CB               	movwf	(getPreset@pedalPreset^(0+384)+9)
 21139  1426                     l6677:	
 21140                           
 21141                           ;state_manager.c: 193: }
 21142                           ;state_manager.c: 195: if (pedalPreset.symmetry < 1 || pedalPreset.symmetry > 1023) {
 21143  1426  084C               	movf	(getPreset@pedalPreset^(0+384)+10),w
 21144  1427  044D               	iorwf	((getPreset@pedalPreset+1)^(0+384)+10),w
 21145  1428  1903               	btfsc	3,2
 21146  1429  2C31               	goto	l6681
 21147  142A  3004               	movlw	4
 21148  142B  024D               	subwf	((getPreset@pedalPreset+1)^(0+384)+10),w
 21149  142C  3000               	movlw	0
 21150  142D  1903               	skipnz
 21151  142E  024C               	subwf	(getPreset@pedalPreset^(0+384)+10),w
 21152  142F  1C03               	skipc
 21153  1430  2C35               	goto	l6683
 21154  1431                     l6681:	
 21155                           
 21156                           ;state_manager.c: 196: pedalPreset.symmetry = 1000;
 21157  1431  30E8               	movlw	232
 21158  1432  00CC               	movwf	(getPreset@pedalPreset^(0+384)+10)
 21159  1433  3003               	movlw	3
 21160  1434  00CD               	movwf	(getPreset@pedalPreset^(0+384)+11)
 21161  1435                     l6683:	
 21162                           
 21163                           ;state_manager.c: 197: }
 21164                           ;state_manager.c: 199: if (pedalPreset.depth < 1 || pedalPreset.depth > 1023) {
 21165  1435  084E               	movf	(getPreset@pedalPreset^(0+384)+12),w
 21166  1436  044F               	iorwf	((getPreset@pedalPreset+1)^(0+384)+12),w
 21167  1437  1903               	btfsc	3,2
 21168  1438  2C40               	goto	l6687
 21169  1439  3004               	movlw	4
 21170  143A  024F               	subwf	((getPreset@pedalPreset+1)^(0+384)+12),w
 21171  143B  3000               	movlw	0
 21172  143C  1903               	skipnz
 21173  143D  024E               	subwf	(getPreset@pedalPreset^(0+384)+12),w
 21174  143E  1C03               	skipc
 21175  143F  2C44               	goto	l6689
 21176  1440                     l6687:	
 21177                           
 21178                           ;state_manager.c: 200: pedalPreset.depth = 1000;
 21179  1440  30E8               	movlw	232
 21180  1441  00CE               	movwf	(getPreset@pedalPreset^(0+384)+12)
 21181  1442  3003               	movlw	3
 21182  1443  00CF               	movwf	(getPreset@pedalPreset^(0+384)+13)
 21183  1444                     l6689:	
 21184                           
 21185                           ;state_manager.c: 201: }
 21186                           ;state_manager.c: 204: return pedalPreset;
 21187  1444  30C2               	movlw	low getPreset@pedalPreset
 21188  1445  0086               	movwf	6
 21189  1446  3001               	movlw	high getPreset@pedalPreset
 21190  1447  0087               	movwf	7
 21191  1448  3040               	movlw	low ?_getPreset
 21192  1449  0084               	movwf	4
 21193  144A  3001               	movlw	high ?_getPreset
 21194  144B  0085               	movwf	5
 21195  144C  300F               	movlw	15
 21196  144D  0022               	movlb	2	; select bank2
 21197  144E  00CF               	movwf	??_getPreset^(0+256)
 21198  144F                     u5890:	
 21199  144F  0016               	moviw fsr1++
 21200  1450  001A               	movwi fsr0++
 21201  1451  0BCF               	decfsz	??_getPreset^(0+256),f
 21202  1452  2C4F               	goto	u5890
 21203  1453  0008               	return
 21204  1454                     __end_of_getPreset:	
 21205                           
 21206                           	psect	text92
 21207  3121                     __ptext92:	
 21208 ;; *************** function ___bmul *****************
 21209 ;; Defined at:
 21210 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 21211 ;; Parameters:    Size  Location     Type
 21212 ;;  multiplier      1    wreg     unsigned char 
 21213 ;;  multiplicand    1    0[BANK1 ] unsigned char 
 21214 ;; Auto vars:     Size  Location     Type
 21215 ;;  multiplier      1    3[BANK1 ] unsigned char 
 21216 ;;  product         1    2[BANK1 ] unsigned char 
 21217 ;; Return value:  Size  Location     Type
 21218 ;;                  1    wreg      unsigned char 
 21219 ;; Registers used:
 21220 ;;		wreg, status,2, status,0
 21221 ;; Tracked objects:
 21222 ;;		On entry : 0/0
 21223 ;;		On exit  : 0/0
 21224 ;;		Unchanged: 0/0
 21225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21226 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21227 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21228 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21229 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21230 ;;Total ram usage:        4 bytes
 21231 ;; Hardware stack levels used:    1
 21232 ;; Hardware stack levels required when called:    5
 21233 ;; This function calls:
 21234 ;;		Nothing
 21235 ;; This function is called by:
 21236 ;;		_getPreset
 21237 ;; This function uses a non-reentrant model
 21238 ;;
 21239                           
 21240                           
 21241                           ;psect for function ___bmul
 21242  3121                     ___bmul:	
 21243                           
 21244                           ;incstack = 0
 21245                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 21246                           ;___bmul@multiplier stored from wreg
 21247  3121  0021               	movlb	1	; select bank1
 21248  3122  00A3               	movwf	___bmul@multiplier^(0+128)
 21249  3123  01A2               	clrf	___bmul@product^(0+128)
 21250  3124                     l6309:	
 21251  3124  1C23               	btfss	___bmul@multiplier^(0+128),0
 21252  3125  292A               	goto	l6313
 21253  3126  0820               	movf	___bmul@multiplicand^(0+128),w
 21254  3127  00A1               	movwf	??___bmul^(0+128)
 21255  3128  0821               	movf	??___bmul^(0+128),w
 21256  3129  07A2               	addwf	___bmul@product^(0+128),f
 21257  312A                     l6313:	
 21258  312A  1003               	clrc
 21259  312B  0DA0               	rlf	___bmul@multiplicand^(0+128),f
 21260  312C  1003               	clrc
 21261  312D  0CA3               	rrf	___bmul@multiplier^(0+128),f
 21262  312E  0823               	movf	___bmul@multiplier^(0+128),w
 21263  312F  1D03               	btfss	3,2
 21264  3130  2924               	goto	l6309
 21265  3131  0822               	movf	___bmul@product^(0+128),w
 21266  3132  0008               	return
 21267  3133                     __end_of___bmul:	
 21268                           
 21269                           	psect	text93
 21270  2BEE                     __ptext93:	
 21271 ;; *************** function ___awdiv *****************
 21272 ;; Defined at:
 21273 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 21274 ;; Parameters:    Size  Location     Type
 21275 ;;  divisor         2    0[BANK1 ] int 
 21276 ;;  dividend        2    2[BANK1 ] int 
 21277 ;; Auto vars:     Size  Location     Type
 21278 ;;  quotient        2    7[BANK1 ] int 
 21279 ;;  sign            1    6[BANK1 ] unsigned char 
 21280 ;;  counter         1    5[BANK1 ] unsigned char 
 21281 ;; Return value:  Size  Location     Type
 21282 ;;                  2    0[BANK1 ] int 
 21283 ;; Registers used:
 21284 ;;		wreg, status,2, status,0
 21285 ;; Tracked objects:
 21286 ;;		On entry : 0/0
 21287 ;;		On exit  : 0/0
 21288 ;;		Unchanged: 0/0
 21289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21290 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21291 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21292 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21293 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21294 ;;Total ram usage:        9 bytes
 21295 ;; Hardware stack levels used:    1
 21296 ;; Hardware stack levels required when called:    5
 21297 ;; This function calls:
 21298 ;;		Nothing
 21299 ;; This function is called by:
 21300 ;;		_getPreset
 21301 ;;		_updateModulationArray
 21302 ;;		_USARTWriteInt
 21303 ;; This function uses a non-reentrant model
 21304 ;;
 21305                           
 21306                           
 21307                           ;psect for function ___awdiv
 21308  2BEE                     ___awdiv:	
 21309                           
 21310                           ;incstack = 0
 21311                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 21312  2BEE  0021               	movlb	1	; select bank1
 21313  2BEF  01A6               	clrf	___awdiv@sign^(0+128)
 21314  2BF0  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 21315  2BF1  2BF9               	goto	l6345
 21316  2BF2  09A0               	comf	___awdiv@divisor^(0+128),f
 21317  2BF3  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 21318  2BF4  0AA0               	incf	___awdiv@divisor^(0+128),f
 21319  2BF5  1903               	skipnz
 21320  2BF6  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 21321  2BF7  01A6               	clrf	___awdiv@sign^(0+128)
 21322  2BF8  0AA6               	incf	___awdiv@sign^(0+128),f
 21323  2BF9                     l6345:	
 21324  2BF9  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 21325  2BFA  2C04               	goto	l6351
 21326  2BFB  09A2               	comf	___awdiv@dividend^(0+128),f
 21327  2BFC  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 21328  2BFD  0AA2               	incf	___awdiv@dividend^(0+128),f
 21329  2BFE  1903               	skipnz
 21330  2BFF  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 21331  2C00  3001               	movlw	1
 21332  2C01  00A4               	movwf	??___awdiv^(0+128)
 21333  2C02  0824               	movf	??___awdiv^(0+128),w
 21334  2C03  06A6               	xorwf	___awdiv@sign^(0+128),f
 21335  2C04                     l6351:	
 21336  2C04  01A7               	clrf	___awdiv@quotient^(0+128)
 21337  2C05  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 21338  2C06  0820               	movf	___awdiv@divisor^(0+128),w
 21339  2C07  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 21340  2C08  1903               	btfsc	3,2
 21341  2C09  2C33               	goto	l6373
 21342  2C0A  01A5               	clrf	___awdiv@counter^(0+128)
 21343  2C0B  0AA5               	incf	___awdiv@counter^(0+128),f
 21344  2C0C                     l6361:	
 21345  2C0C  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 21346  2C0D  2C18               	goto	l6363
 21347  2C0E  3001               	movlw	1
 21348  2C0F                     u5185:	
 21349  2C0F  35A0               	lslf	___awdiv@divisor^(0+128),f
 21350  2C10  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 21351  2C11  0B89               	decfsz	9,f
 21352  2C12  2C0F               	goto	u5185
 21353  2C13  3001               	movlw	1
 21354  2C14  00A4               	movwf	??___awdiv^(0+128)
 21355  2C15  0824               	movf	??___awdiv^(0+128),w
 21356  2C16  07A5               	addwf	___awdiv@counter^(0+128),f
 21357  2C17  2C0C               	goto	l6361
 21358  2C18                     l6363:	
 21359  2C18  3001               	movlw	1
 21360  2C19                     u5205:	
 21361  2C19  35A7               	lslf	___awdiv@quotient^(0+128),f
 21362  2C1A  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 21363  2C1B  0B89               	decfsz	9,f
 21364  2C1C  2C19               	goto	u5205
 21365  2C1D  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 21366  2C1E  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 21367  2C1F  1D03               	skipz
 21368  2C20  2C23               	goto	u5215
 21369  2C21  0820               	movf	___awdiv@divisor^(0+128),w
 21370  2C22  0222               	subwf	___awdiv@dividend^(0+128),w
 21371  2C23                     u5215:	
 21372  2C23  1C03               	skipc
 21373  2C24  2C2A               	goto	l6369
 21374  2C25  0820               	movf	___awdiv@divisor^(0+128),w
 21375  2C26  02A2               	subwf	___awdiv@dividend^(0+128),f
 21376  2C27  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 21377  2C28  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 21378  2C29  1427               	bsf	___awdiv@quotient^(0+128),0
 21379  2C2A                     l6369:	
 21380  2C2A  3001               	movlw	1
 21381  2C2B                     u5225:	
 21382  2C2B  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 21383  2C2C  0CA0               	rrf	___awdiv@divisor^(0+128),f
 21384  2C2D  0B89               	decfsz	9,f
 21385  2C2E  2C2B               	goto	u5225
 21386  2C2F  3001               	movlw	1
 21387  2C30  02A5               	subwf	___awdiv@counter^(0+128),f
 21388  2C31  1D03               	btfss	3,2
 21389  2C32  2C18               	goto	l6363
 21390  2C33                     l6373:	
 21391  2C33  0826               	movf	___awdiv@sign^(0+128),w
 21392  2C34  1903               	btfsc	3,2
 21393  2C35  2C3B               	goto	l6377
 21394  2C36  09A7               	comf	___awdiv@quotient^(0+128),f
 21395  2C37  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 21396  2C38  0AA7               	incf	___awdiv@quotient^(0+128),f
 21397  2C39  1903               	skipnz
 21398  2C3A  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 21399  2C3B                     l6377:	
 21400  2C3B  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 21401  2C3C  00A1               	movwf	(?___awdiv+1)^(0+128)
 21402  2C3D  0827               	movf	___awdiv@quotient^(0+128),w
 21403  2C3E  00A0               	movwf	?___awdiv^(0+128)
 21404  2C3F  0008               	return
 21405  2C40                     __end_of___awdiv:	
 21406                           
 21407                           	psect	text94
 21408  35AD                     __ptext94:	
 21409 ;; *************** function _HEF_ByteArrayRead *****************
 21410 ;; Defined at:
 21411 ;;		line 53 in file "HEF.c"
 21412 ;; Parameters:    Size  Location     Type
 21413 ;;  bArray          2    3[BANK1 ] PTR unsigned char 
 21414 ;;		 -> getPreset@presets(30), savePreset@presets(30), 
 21415 ;;  block           1    5[BANK1 ] unsigned char 
 21416 ;;  count           1    6[BANK1 ] unsigned char 
 21417 ;; Auto vars:     Size  Location     Type
 21418 ;;  wordAdd         2    9[BANK1 ] unsigned int 
 21419 ;; Return value:  Size  Location     Type
 21420 ;;                  1    wreg      char 
 21421 ;; Registers used:
 21422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21423 ;; Tracked objects:
 21424 ;;		On entry : 0/0
 21425 ;;		On exit  : 0/0
 21426 ;;		Unchanged: 0/0
 21427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21428 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21429 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21430 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21431 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21432 ;;Total ram usage:        8 bytes
 21433 ;; Hardware stack levels used:    1
 21434 ;; Hardware stack levels required when called:    6
 21435 ;; This function calls:
 21436 ;;		_FLASH_ReadWord
 21437 ;; This function is called by:
 21438 ;;		_getPreset
 21439 ;; This function uses a non-reentrant model
 21440 ;;
 21441                           
 21442                           
 21443                           ;psect for function _HEF_ByteArrayRead
 21444  35AD                     _HEF_ByteArrayRead:	
 21445                           
 21446                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
 21447                           
 21448                           ;incstack = 0
 21449                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21450  35AD  0021               	movlb	1	; select bank1
 21451  35AE  0825               	movf	HEF_ByteArrayRead@block^(0+128),w
 21452  35AF  00A7               	movwf	??_HEF_ByteArrayRead^(0+128)
 21453  35B0  01A8               	clrf	(??_HEF_ByteArrayRead^(0+128)+1)
 21454  35B1  3005               	movlw	5
 21455  35B2                     u4985:	
 21456  35B2  35A7               	lslf	??_HEF_ByteArrayRead^(0+128),f
 21457  35B3  0DA8               	rlf	(??_HEF_ByteArrayRead^(0+128)+1),f
 21458  35B4  0B89               	decfsz	9,f
 21459  35B5  2DB2               	goto	u4985
 21460  35B6  0827               	movf	??_HEF_ByteArrayRead^(0+128),w
 21461  35B7  3E80               	addlw	128
 21462  35B8  00A9               	movwf	HEF_ByteArrayRead@wordAdd^(0+128)
 21463  35B9  303F               	movlw	63
 21464  35BA  3D28               	addwfc	(??_HEF_ByteArrayRead+1)^(0+128),w
 21465  35BB  00AA               	movwf	(HEF_ByteArrayRead@wordAdd+1)^(0+128)
 21466                           
 21467                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
 21468  35BC  3021               	movlw	33
 21469  35BD  0226               	subwf	HEF_ByteArrayRead@count^(0+128),w
 21470  35BE  1803               	skipnc
 21471  35BF  2DC4               	goto	l6265
 21472  35C0  3004               	movlw	4
 21473  35C1  0225               	subwf	HEF_ByteArrayRead@block^(0+128),w
 21474  35C2  1C03               	skipc
 21475  35C3  2DE0               	goto	l6277
 21476  35C4                     l6265:	
 21477                           
 21478                           ;HEF.c: 60: return -1;
 21479  35C4  30FF               	movlw	255
 21480  35C5  0008               	return
 21481  35C6                     l6269:	
 21482                           ;HEF.c: 63: while ( count > 0)
 21483                           
 21484                           
 21485                           ;HEF.c: 64: {
 21486                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
 21487  35C6  082A               	movf	(HEF_ByteArrayRead@wordAdd+1)^(0+128),w
 21488  35C7  00A1               	movwf	(FLASH_ReadWord@flashAddr+1)^(0+128)
 21489  35C8  0829               	movf	HEF_ByteArrayRead@wordAdd^(0+128),w
 21490  35C9  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 21491  35CA  31B2  22AB  31B5   	fcall	_FLASH_ReadWord
 21492  35CD  0021               	movlb	1	; select bank1
 21493  35CE  0820               	movf	?_FLASH_ReadWord^(0+128),w
 21494  35CF  00A7               	movwf	??_HEF_ByteArrayRead^(0+128)
 21495  35D0  0823               	movf	HEF_ByteArrayRead@bArray^(0+128),w
 21496  35D1  0086               	movwf	6
 21497  35D2  0824               	movf	(HEF_ByteArrayRead@bArray+1)^(0+128),w
 21498  35D3  0087               	movwf	7
 21499  35D4  0827               	movf	??_HEF_ByteArrayRead^(0+128),w
 21500  35D5  0081               	movwf	1
 21501  35D6  3001               	movlw	1
 21502  35D7  07A9               	addwf	HEF_ByteArrayRead@wordAdd^(0+128),f
 21503  35D8  3000               	movlw	0
 21504  35D9  3DAA               	addwfc	(HEF_ByteArrayRead@wordAdd+1)^(0+128),f
 21505  35DA  3001               	movlw	1
 21506  35DB  07A3               	addwf	HEF_ByteArrayRead@bArray^(0+128),f
 21507  35DC  3000               	movlw	0
 21508  35DD  3DA4               	addwfc	(HEF_ByteArrayRead@bArray+1)^(0+128),f
 21509                           
 21510                           ;HEF.c: 66: count--;
 21511  35DE  3001               	movlw	1
 21512  35DF  02A6               	subwf	HEF_ByteArrayRead@count^(0+128),f
 21513  35E0                     l6277:	
 21514  35E0  0826               	movf	HEF_ByteArrayRead@count^(0+128),w
 21515  35E1  1D03               	btfss	3,2
 21516  35E2  2DC6               	goto	l6269
 21517                           
 21518                           ;HEF.c: 67: }
 21519                           ;HEF.c: 70: return 0;
 21520  35E3  3000               	movlw	0
 21521  35E4  0008               	return
 21522  35E5                     __end_of_HEF_ByteArrayRead:	
 21523                           
 21524                           	psect	text95
 21525  32AB                     __ptext95:	
 21526 ;; *************** function _FLASH_ReadWord *****************
 21527 ;; Defined at:
 21528 ;;		line 58 in file "memory.c"
 21529 ;; Parameters:    Size  Location     Type
 21530 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 21531 ;; Auto vars:     Size  Location     Type
 21532 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 21533 ;; Return value:  Size  Location     Type
 21534 ;;                  2    0[BANK1 ] unsigned int 
 21535 ;; Registers used:
 21536 ;;		wreg, status,2, status,0
 21537 ;; Tracked objects:
 21538 ;;		On entry : 0/0
 21539 ;;		On exit  : 0/0
 21540 ;;		Unchanged: 0/0
 21541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21542 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21543 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21545 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21546 ;;Total ram usage:        3 bytes
 21547 ;; Hardware stack levels used:    1
 21548 ;; Hardware stack levels required when called:    5
 21549 ;; This function calls:
 21550 ;;		Nothing
 21551 ;; This function is called by:
 21552 ;;		_HEF_ByteArrayRead
 21553 ;;		_FLASH_WriteWord
 21554 ;;		_HEF_ByteRead
 21555 ;; This function uses a non-reentrant model
 21556 ;;
 21557                           
 21558                           
 21559                           ;psect for function _FLASH_ReadWord
 21560  32AB                     _FLASH_ReadWord:	
 21561                           
 21562                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 21563                           
 21564                           ;incstack = 0
 21565                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 21566  32AB  3000               	movlw	0
 21567  32AC  1B8B               	btfsc	11,7	;volatile
 21568  32AD  3001               	movlw	1
 21569  32AE  0021               	movlb	1	; select bank1
 21570  32AF  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 21571                           
 21572                           ;memory.c: 61: INTCONbits.GIE = 0;
 21573  32B0  138B               	bcf	11,7	;volatile
 21574                           
 21575                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 21576  32B1  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 21577  32B2  0023               	movlb	3	; select bank3
 21578  32B3  0091               	movwf	17	;volatile
 21579                           
 21580                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 21581  32B4  0021               	movlb	1	; select bank1
 21582  32B5  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 21583  32B6  0023               	movlb	3	; select bank3
 21584  32B7  0092               	movwf	18	;volatile
 21585                           
 21586                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 21587  32B8  1315               	bcf	21,6	;volatile
 21588                           
 21589                           ;memory.c: 66: PMCON1bits.RD = 1;
 21590  32B9  1415               	bsf	21,0	;volatile
 21591                           
 21592                           ;memory.c: 67: __nop();
 21593  32BA  0000               	nop
 21594                           
 21595                           ;memory.c: 68: __nop();
 21596  32BB  0000               	nop
 21597                           
 21598                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 21599  32BC  0021               	movlb	1	; select bank1
 21600  32BD  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 21601  32BE  1C03               	skipc
 21602  32BF  138B               	bcf	11,7	;volatile
 21603  32C0  1803               	skipnc
 21604  32C1  178B               	bsf	11,7	;volatile
 21605                           
 21606                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 21607  32C2  0023               	movlb	3	; select bank3
 21608  32C3  0814               	movf	20,w	;volatile
 21609  32C4  0021               	movlb	1	; select bank1
 21610  32C5  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 21611  32C6  0023               	movlb	3	; select bank3
 21612  32C7  0813               	movf	19,w	;volatile
 21613  32C8  0021               	movlb	1	; select bank1
 21614  32C9  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 21615  32CA  0008               	return
 21616  32CB                     __end_of_FLASH_ReadWord:	
 21617                           
 21618                           	psect	text96
 21619  29CD                     __ptext96:	
 21620 ;; *************** function _GetBitMask *****************
 21621 ;; Defined at:
 21622 ;;		line 387 in file "state_manager.c"
 21623 ;; Parameters:    Size  Location     Type
 21624 ;;  storage         2   20[BANK2 ] unsigned int 
 21625 ;;  index           1   22[BANK2 ] unsigned char 
 21626 ;;  shift           1   23[BANK2 ] unsigned char 
 21627 ;; Auto vars:     Size  Location     Type
 21628 ;;  shiftCount      2   30[BANK2 ] int 
 21629 ;;  mask            2   28[BANK2 ] int 
 21630 ;; Return value:  Size  Location     Type
 21631 ;;                  2   20[BANK2 ] int 
 21632 ;; Registers used:
 21633 ;;		wreg, status,2, status,0, pclath, cstack
 21634 ;; Tracked objects:
 21635 ;;		On entry : 0/0
 21636 ;;		On exit  : 0/0
 21637 ;;		Unchanged: 0/0
 21638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21639 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21640 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21641 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21642 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21643 ;;Total ram usage:       12 bytes
 21644 ;; Hardware stack levels used:    1
 21645 ;; Hardware stack levels required when called:    6
 21646 ;; This function calls:
 21647 ;;		___wmul
 21648 ;; This function is called by:
 21649 ;;		_getPreset
 21650 ;; This function uses a non-reentrant model
 21651 ;;
 21652                           
 21653                           
 21654                           ;psect for function _GetBitMask
 21655  29CD                     _GetBitMask:	
 21656                           
 21657                           ;state_manager.c: 388: int shiftCount = index * shift;
 21658                           
 21659                           ;incstack = 0
 21660                           ; Regs used in _GetBitMask: [wreg+status,2+status,0+pclath+cstack]
 21661  29CD  0022               	movlb	2	; select bank2
 21662  29CE  0836               	movf	GetBitMask@index^(0+256),w
 21663  29CF  00B8               	movwf	??_GetBitMask^(0+256)
 21664  29D0  01B9               	clrf	(??_GetBitMask^(0+256)+1)
 21665  29D1  0838               	movf	??_GetBitMask^(0+256),w
 21666  29D2  00AE               	movwf	___wmul@multiplier^(0+256)
 21667  29D3  0839               	movf	(??_GetBitMask+1)^(0+256),w
 21668  29D4  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 21669  29D5  0837               	movf	GetBitMask@shift^(0+256),w
 21670  29D6  00BA               	movwf	(??_GetBitMask+2)^(0+256)
 21671  29D7  01BB               	clrf	((??_GetBitMask+2)^(0+256)+1)
 21672  29D8  083A               	movf	(??_GetBitMask+2)^(0+256),w
 21673  29D9  00B0               	movwf	___wmul@multiplicand^(0+256)
 21674  29DA  083B               	movf	(??_GetBitMask+3)^(0+256),w
 21675  29DB  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
 21676  29DC  31B2  2238  31A9   	fcall	___wmul
 21677  29DF  0022               	movlb	2	; select bank2
 21678  29E0  082F               	movf	(?___wmul+1)^(0+256),w
 21679  29E1  00BF               	movwf	(GetBitMask@shiftCount+1)^(0+256)
 21680  29E2  082E               	movf	?___wmul^(0+256),w
 21681  29E3  00BE               	movwf	GetBitMask@shiftCount^(0+256)
 21682                           
 21683                           ;state_manager.c: 389: int mask = 0x0f << shiftCount;
 21684  29E4  300F               	movlw	15
 21685  29E5  00B8               	movwf	??_GetBitMask^(0+256)
 21686  29E6  3000               	movlw	0
 21687  29E7  00B9               	movwf	(??_GetBitMask^(0+256)+1)
 21688  29E8  0A3E               	incf	GetBitMask@shiftCount^(0+256),w
 21689  29E9  29EC               	goto	u5024
 21690  29EA                     u5025:	
 21691  29EA  35B8               	lslf	??_GetBitMask^(0+256),f
 21692  29EB  0DB9               	rlf	(??_GetBitMask^(0+256)+1),f
 21693  29EC                     u5024:	
 21694  29EC  0B89               	decfsz	9,f
 21695  29ED  29EA               	goto	u5025
 21696  29EE  0838               	movf	??_GetBitMask^(0+256),w
 21697  29EF  00BC               	movwf	GetBitMask@mask^(0+256)
 21698  29F0  0839               	movf	(??_GetBitMask+1)^(0+256),w
 21699  29F1  00BD               	movwf	(GetBitMask@mask+1)^(0+256)
 21700                           
 21701                           ;state_manager.c: 390: if (shift == 8) {
 21702  29F2  3008               	movlw	8
 21703  29F3  0637               	xorwf	GetBitMask@shift^(0+256),w
 21704  29F4  1D03               	btfss	3,2
 21705  29F5  2A04               	goto	l1414
 21706                           
 21707                           ;state_manager.c: 391: mask = 0xff << shiftCount;
 21708  29F6  30FF               	movlw	255
 21709  29F7  00B8               	movwf	??_GetBitMask^(0+256)
 21710  29F8  3000               	movlw	0
 21711  29F9  00B9               	movwf	(??_GetBitMask^(0+256)+1)
 21712  29FA  0A3E               	incf	GetBitMask@shiftCount^(0+256),w
 21713  29FB  29FE               	goto	u5044
 21714  29FC                     u5045:	
 21715  29FC  35B8               	lslf	??_GetBitMask^(0+256),f
 21716  29FD  0DB9               	rlf	(??_GetBitMask^(0+256)+1),f
 21717  29FE                     u5044:	
 21718  29FE  0B89               	decfsz	9,f
 21719  29FF  29FC               	goto	u5045
 21720  2A00  0838               	movf	??_GetBitMask^(0+256),w
 21721  2A01  00BC               	movwf	GetBitMask@mask^(0+256)
 21722  2A02  0839               	movf	(??_GetBitMask+1)^(0+256),w
 21723  2A03  00BD               	movwf	(GetBitMask@mask+1)^(0+256)
 21724  2A04                     l1414:	
 21725                           
 21726                           ;state_manager.c: 392: }
 21727                           ;state_manager.c: 394: return (storage & mask) >> shiftCount;
 21728  2A04  0834               	movf	GetBitMask@storage^(0+256),w
 21729  2A05  053C               	andwf	GetBitMask@mask^(0+256),w
 21730  2A06  00B8               	movwf	??_GetBitMask^(0+256)
 21731  2A07  0835               	movf	(GetBitMask@storage+1)^(0+256),w
 21732  2A08  053D               	andwf	(GetBitMask@mask+1)^(0+256),w
 21733  2A09  00B9               	movwf	(??_GetBitMask+1)^(0+256)
 21734  2A0A  0A3E               	incf	GetBitMask@shiftCount^(0+256),w
 21735  2A0B  2A0E               	goto	u5054
 21736  2A0C                     u5055:	
 21737  2A0C  36B9               	lsrf	(??_GetBitMask^(0+256)+1),f
 21738  2A0D  0CB8               	rrf	??_GetBitMask^(0+256),f
 21739  2A0E                     u5054:	
 21740  2A0E  0B89               	decfsz	9,f
 21741  2A0F  2A0C               	goto	u5055
 21742  2A10  0838               	movf	??_GetBitMask^(0+256),w
 21743  2A11  00B4               	movwf	?_GetBitMask^(0+256)
 21744  2A12  0839               	movf	(??_GetBitMask+1)^(0+256),w
 21745  2A13  00B5               	movwf	(?_GetBitMask+1)^(0+256)
 21746  2A14  0008               	return
 21747  2A15                     __end_of_GetBitMask:	
 21748                           
 21749                           	psect	text97
 21750  3238                     __ptext97:	
 21751 ;; *************** function ___wmul *****************
 21752 ;; Defined at:
 21753 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 21754 ;; Parameters:    Size  Location     Type
 21755 ;;  multiplier      2   14[BANK2 ] unsigned int 
 21756 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 21757 ;; Auto vars:     Size  Location     Type
 21758 ;;  product         2   18[BANK2 ] unsigned int 
 21759 ;; Return value:  Size  Location     Type
 21760 ;;                  2   14[BANK2 ] unsigned int 
 21761 ;; Registers used:
 21762 ;;		wreg, status,2, status,0
 21763 ;; Tracked objects:
 21764 ;;		On entry : 0/0
 21765 ;;		On exit  : 0/0
 21766 ;;		Unchanged: 0/0
 21767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21768 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21769 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21771 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21772 ;;Total ram usage:        6 bytes
 21773 ;; Hardware stack levels used:    1
 21774 ;; Hardware stack levels required when called:    5
 21775 ;; This function calls:
 21776 ;;		Nothing
 21777 ;; This function is called by:
 21778 ;;		_GetBitMask
 21779 ;;		_calcCosArray
 21780 ;;		_updateModulationArray
 21781 ;;		_modCos
 21782 ;;		_eval_poly
 21783 ;; This function uses a non-reentrant model
 21784 ;;
 21785                           
 21786                           
 21787                           ;psect for function ___wmul
 21788  3238                     ___wmul:	
 21789                           
 21790                           ;incstack = 0
 21791                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 21792  3238  0022               	movlb	2	; select bank2
 21793  3239  01B2               	clrf	___wmul@product^(0+256)
 21794  323A  01B3               	clrf	(___wmul@product+1)^(0+256)
 21795  323B                     l6215:	
 21796  323B  1C2E               	btfss	___wmul@multiplier^(0+256),0
 21797  323C  2A41               	goto	l2447
 21798  323D  0830               	movf	___wmul@multiplicand^(0+256),w
 21799  323E  07B2               	addwf	___wmul@product^(0+256),f
 21800  323F  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 21801  3240  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 21802  3241                     l2447:	
 21803  3241  3001               	movlw	1
 21804  3242                     u4835:	
 21805  3242  35B0               	lslf	___wmul@multiplicand^(0+256),f
 21806  3243  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 21807  3244  0B89               	decfsz	9,f
 21808  3245  2A42               	goto	u4835
 21809  3246  3001               	movlw	1
 21810  3247                     u4845:	
 21811  3247  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 21812  3248  0CAE               	rrf	___wmul@multiplier^(0+256),f
 21813  3249  0B89               	decfsz	9,f
 21814  324A  2A47               	goto	u4845
 21815  324B  082E               	movf	___wmul@multiplier^(0+256),w
 21816  324C  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 21817  324D  1D03               	btfss	3,2
 21818  324E  2A3B               	goto	l6215
 21819  324F  0833               	movf	(___wmul@product+1)^(0+256),w
 21820  3250  00AF               	movwf	(?___wmul+1)^(0+256)
 21821  3251  0832               	movf	___wmul@product^(0+256),w
 21822  3252  00AE               	movwf	?___wmul^(0+256)
 21823  3253  0008               	return
 21824  3254                     __end_of___wmul:	
 21825                           
 21826                           	psect	text98
 21827  34E5                     __ptext98:	
 21828 ;; *************** function _InitApp *****************
 21829 ;; Defined at:
 21830 ;;		line 23 in file "user.c"
 21831 ;; Parameters:    Size  Location     Type
 21832 ;;		None
 21833 ;; Auto vars:     Size  Location     Type
 21834 ;;		None
 21835 ;; Return value:  Size  Location     Type
 21836 ;;                  1    wreg      void 
 21837 ;; Registers used:
 21838 ;;		wreg, status,2, status,0, pclath, cstack
 21839 ;; Tracked objects:
 21840 ;;		On entry : 0/0
 21841 ;;		On exit  : 0/0
 21842 ;;		Unchanged: 0/0
 21843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21848 ;;Total ram usage:        0 bytes
 21849 ;; Hardware stack levels used:    1
 21850 ;; Hardware stack levels required when called:    7
 21851 ;; This function calls:
 21852 ;;		_init_adc
 21853 ;;		_init_pwm
 21854 ;; This function is called by:
 21855 ;;		_main
 21856 ;; This function uses a non-reentrant model
 21857 ;;
 21858                           
 21859                           
 21860                           ;psect for function _InitApp
 21861  34E5                     _InitApp:	
 21862                           
 21863                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 21864                           
 21865                           ;incstack = 0
 21866                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 21867  34E5  0021               	movlb	1	; select bank1
 21868  34E6  100D               	bcf	13,0	;volatile
 21869                           
 21870                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 21871  34E7  108D               	bcf	13,1	;volatile
 21872                           
 21873                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 21874  34E8  110D               	bcf	13,2	;volatile
 21875                           
 21876                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 21877  34E9  118D               	bcf	13,3	;volatile
 21878                           
 21879                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 21880  34EA  120D               	bcf	13,4	;volatile
 21881                           
 21882                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 21883  34EB  128D               	bcf	13,5	;volatile
 21884                           
 21885                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 21886  34EC  140E               	bsf	14,0	;volatile
 21887                           
 21888                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 21889  34ED  120E               	bcf	14,4	;volatile
 21890                           
 21891                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 21892  34EE  128E               	bcf	14,5	;volatile
 21893                           
 21894                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 21895  34EF  100F               	bcf	15,0	;volatile
 21896                           
 21897                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 21898  34F0  108F               	bcf	15,1	;volatile
 21899                           
 21900                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 21901  34F1  110F               	bcf	15,2	;volatile
 21902                           
 21903                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 21904  34F2  118F               	bcf	15,3	;volatile
 21905                           
 21906                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 21907  34F3  120F               	bcf	15,4	;volatile
 21908                           
 21909                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 21910  34F4  168F               	bsf	15,5	;volatile
 21911                           
 21912                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 21913  34F5  170F               	bsf	15,6	;volatile
 21914                           
 21915                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 21916  34F6  178F               	bsf	15,7	;volatile
 21917                           
 21918                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 21919  34F7  1410               	bsf	16,0	;volatile
 21920                           
 21921                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 21922  34F8  1490               	bsf	16,1	;volatile
 21923                           
 21924                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 21925  34F9  0023               	movlb	3	; select bank3
 21926  34FA  1010               	bcf	16,0	;volatile
 21927                           
 21928                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 21929  34FB  1090               	bcf	16,1	;volatile
 21930                           
 21931                           ;user.c: 53: PORTEbits.RE0 = 0;
 21932  34FC  0020               	movlb	0	; select bank0
 21933  34FD  1010               	bcf	16,0	;volatile
 21934                           
 21935                           ;user.c: 54: PORTEbits.RE1 = 0;
 21936  34FE  1090               	bcf	16,1	;volatile
 21937                           
 21938                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 21939  34FF  0026               	movlb	6	; select bank6
 21940  3500  100C               	bcf	12,0	;volatile
 21941                           
 21942                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 21943  3501  108C               	bcf	12,1	;volatile
 21944                           
 21945                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 21946  3502  110C               	bcf	12,2	;volatile
 21947                           
 21948                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 21949  3503  118C               	bcf	12,3	;volatile
 21950                           
 21951                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 21952  3504  120C               	bcf	12,4	;volatile
 21953                           
 21954                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 21955  3505  128C               	bcf	12,5	;volatile
 21956                           
 21957                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 21958  3506  170C               	bsf	12,6	;volatile
 21959                           
 21960                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 21961  3507  0028               	movlb	8	; select bank8
 21962  3508  130C               	bcf	12,6	;volatile
 21963                           
 21964                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 21965  3509  0026               	movlb	6	; select bank6
 21966  350A  108D               	bcf	13,1	;volatile
 21967                           
 21968                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 21969  350B  110D               	bcf	13,2	;volatile
 21970                           
 21971                           ;user.c: 68: init_adc();
 21972  350C  31BF  27F6  31B4   	fcall	_init_adc
 21973                           
 21974                           ;user.c: 69: init_pwm();
 21975  350F  31A8  20BD         	fcall	_init_pwm
 21976                           
 21977                           ;user.c: 71: INTCONbits.GIE = 0b1;
 21978  3511  178B               	bsf	11,7	;volatile
 21979                           
 21980                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 21981  3512  168B               	bsf	11,5	;volatile
 21982                           
 21983                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 21984  3513  110B               	bcf	11,2	;volatile
 21985  3514  0008               	return
 21986  3515                     __end_of_InitApp:	
 21987                           
 21988                           	psect	text99
 21989  28BD                     __ptext99:	
 21990 ;; *************** function _init_pwm *****************
 21991 ;; Defined at:
 21992 ;;		line 129 in file "user.c"
 21993 ;; Parameters:    Size  Location     Type
 21994 ;;		None
 21995 ;; Auto vars:     Size  Location     Type
 21996 ;;		None
 21997 ;; Return value:  Size  Location     Type
 21998 ;;                  1    wreg      void 
 21999 ;; Registers used:
 22000 ;;		wreg, status,2, status,0, pclath, cstack
 22001 ;; Tracked objects:
 22002 ;;		On entry : 0/0
 22003 ;;		On exit  : 0/0
 22004 ;;		Unchanged: 0/0
 22005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22010 ;;Total ram usage:        0 bytes
 22011 ;; Hardware stack levels used:    1
 22012 ;; Hardware stack levels required when called:    6
 22013 ;; This function calls:
 22014 ;;		_init_timer0
 22015 ;;		_init_timer2
 22016 ;; This function is called by:
 22017 ;;		_InitApp
 22018 ;; This function uses a non-reentrant model
 22019 ;;
 22020                           
 22021                           
 22022                           ;psect for function _init_pwm
 22023  28BD                     _init_pwm:	
 22024                           
 22025                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 22026                           
 22027                           ;incstack = 0
 22028                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 22029  28BD  0022               	movlb	2	; select bank2
 22030  28BE  101D               	bcf	29,0	;volatile
 22031                           
 22032                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 22033  28BF  0021               	movlb	1	; select bank1
 22034  28C0  110E               	bcf	14,2	;volatile
 22035                           
 22036                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 22037  28C1  108E               	bcf	14,1	;volatile
 22038                           
 22039                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 22040  28C2  0026               	movlb	6	; select bank6
 22041  28C3  100D               	bcf	13,0	;volatile
 22042                           
 22043                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 22044  28C4  118D               	bcf	13,3	;volatile
 22045                           
 22046                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 22047  28C5  120D               	bcf	13,4	;volatile
 22048                           
 22049                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 22050  28C6  0021               	movlb	1	; select bank1
 22051  28C7  1310               	bcf	16,6	;volatile
 22052                           
 22053                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 22054  28C8  1290               	bcf	16,5	;volatile
 22055                           
 22056                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 22057  28C9  1210               	bcf	16,4	;volatile
 22058                           
 22059                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 22060  28CA  1190               	bcf	16,3	;volatile
 22061                           
 22062                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 22063  28CB  1110               	bcf	16,2	;volatile
 22064                           
 22065                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 22066  28CC  300F               	movlw	15
 22067  28CD  0025               	movlb	5	; select bank5
 22068  28CE  0493               	iorwf	19,f	;volatile
 22069                           
 22070                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 22071  28CF  300F               	movlw	15
 22072  28D0  049A               	iorwf	26,f	;volatile
 22073                           
 22074                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 22075  28D1  300F               	movlw	15
 22076  28D2  0026               	movlb	6	; select bank6
 22077  28D3  0493               	iorwf	19,f	;volatile
 22078                           
 22079                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 22080  28D4  300F               	movlw	15
 22081  28D5  049A               	iorwf	26,f	;volatile
 22082                           
 22083                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 22084  28D6  300F               	movlw	15
 22085  28D7  049E               	iorwf	30,f	;volatile
 22086                           
 22087                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 22088  28D8  300F               	movlw	15
 22089  28D9  002C               	movlb	12	; select bank12
 22090  28DA  0493               	iorwf	19,f	;volatile
 22091                           
 22092                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 22093  28DB  300F               	movlw	15
 22094  28DC  0496               	iorwf	22,f	;volatile
 22095                           
 22096                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 22097  28DD  300F               	movlw	15
 22098  28DE  0499               	iorwf	25,f	;volatile
 22099                           
 22100                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 22101  28DF  300F               	movlw	15
 22102  28E0  049C               	iorwf	28,f	;volatile
 22103                           
 22104                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 22105  28E1  300F               	movlw	15
 22106  28E2  049F               	iorwf	31,f	;volatile
 22107                           
 22108                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 22109  28E3  0025               	movlb	5	; select bank5
 22110  28E4  019D               	clrf	29	;volatile
 22111                           
 22112                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 22113  28E5  019E               	clrf	30	;volatile
 22114                           
 22115                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 22116  28E6  019F               	clrf	31	;volatile
 22117                           
 22118                           ;user.c: 154: CCPR1 = 50;
 22119  28E7  3000               	movlw	0
 22120  28E8  0092               	movwf	18	;volatile
 22121  28E9  3032               	movlw	50
 22122  28EA  0091               	movwf	17	;volatile
 22123                           
 22124                           ;user.c: 155: CCPR2 = 100;
 22125  28EB  3000               	movlw	0
 22126  28EC  0099               	movwf	25	;volatile
 22127  28ED  3064               	movlw	100
 22128  28EE  0098               	movwf	24	;volatile
 22129                           
 22130                           ;user.c: 156: CCPR3 = 150;
 22131  28EF  3000               	movlw	0
 22132  28F0  0026               	movlb	6	; select bank6
 22133  28F1  0092               	movwf	18	;volatile
 22134  28F2  3096               	movlw	150
 22135  28F3  0091               	movwf	17	;volatile
 22136                           
 22137                           ;user.c: 157: CCPR4 = 200;
 22138  28F4  3000               	movlw	0
 22139  28F5  0099               	movwf	25	;volatile
 22140  28F6  30C8               	movlw	200
 22141  28F7  0098               	movwf	24	;volatile
 22142                           
 22143                           ;user.c: 158: init_timer2();
 22144  28F8  31BF  27C9  31A8   	fcall	_init_timer2
 22145                           
 22146                           ;user.c: 159: init_timer0();
 22147  28FB  31BF  27A9         	fcall	_init_timer0
 22148  28FD  0008               	return
 22149  28FE                     __end_of_init_pwm:	
 22150                           
 22151                           	psect	text100
 22152  3FC9                     __ptext100:	
 22153 ;; *************** function _init_timer2 *****************
 22154 ;; Defined at:
 22155 ;;		line 162 in file "user.c"
 22156 ;; Parameters:    Size  Location     Type
 22157 ;;		None
 22158 ;; Auto vars:     Size  Location     Type
 22159 ;;		None
 22160 ;; Return value:  Size  Location     Type
 22161 ;;                  1    wreg      void 
 22162 ;; Registers used:
 22163 ;;		wreg, status,2, status,0
 22164 ;; Tracked objects:
 22165 ;;		On entry : 0/0
 22166 ;;		On exit  : 0/0
 22167 ;;		Unchanged: 0/0
 22168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22173 ;;Total ram usage:        0 bytes
 22174 ;; Hardware stack levels used:    1
 22175 ;; Hardware stack levels required when called:    5
 22176 ;; This function calls:
 22177 ;;		Nothing
 22178 ;; This function is called by:
 22179 ;;		_init_pwm
 22180 ;; This function uses a non-reentrant model
 22181 ;;
 22182                           
 22183                           
 22184                           ;psect for function _init_timer2
 22185  3FC9                     _init_timer2:	
 22186                           
 22187                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 22188                           
 22189                           ;incstack = 0
 22190                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 22191  3FC9  3087               	movlw	-121
 22192  3FCA  0020               	movlb	0	; select bank0
 22193  3FCB  059C               	andwf	28,f	;volatile
 22194                           
 22195                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 22196  3FCC  30FC               	movlw	-4
 22197  3FCD  059C               	andwf	28,f	;volatile
 22198                           
 22199                           ;user.c: 165: PR2 = 0xFF;
 22200  3FCE  30FF               	movlw	255
 22201  3FCF  009B               	movwf	27	;volatile
 22202                           
 22203                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 22204  3FD0  151C               	bsf	28,2	;volatile
 22205  3FD1  0008               	return
 22206  3FD2                     __end_of_init_timer2:	
 22207                           
 22208                           	psect	text101
 22209  3FA9                     __ptext101:	
 22210 ;; *************** function _init_timer0 *****************
 22211 ;; Defined at:
 22212 ;;		line 169 in file "user.c"
 22213 ;; Parameters:    Size  Location     Type
 22214 ;;		None
 22215 ;; Auto vars:     Size  Location     Type
 22216 ;;		None
 22217 ;; Return value:  Size  Location     Type
 22218 ;;                  1    wreg      void 
 22219 ;; Registers used:
 22220 ;;		None
 22221 ;; Tracked objects:
 22222 ;;		On entry : 0/0
 22223 ;;		On exit  : 0/0
 22224 ;;		Unchanged: 0/0
 22225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22230 ;;Total ram usage:        0 bytes
 22231 ;; Hardware stack levels used:    1
 22232 ;; Hardware stack levels required when called:    5
 22233 ;; This function calls:
 22234 ;;		Nothing
 22235 ;; This function is called by:
 22236 ;;		_init_pwm
 22237 ;; This function uses a non-reentrant model
 22238 ;;
 22239                           
 22240                           
 22241                           ;psect for function _init_timer0
 22242  3FA9                     _init_timer0:	
 22243                           
 22244                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 22245                           
 22246                           ;incstack = 0
 22247                           ; Regs used in _init_timer0: []
 22248  3FA9  0021               	movlb	1	; select bank1
 22249  3FAA  1295               	bcf	21,5	;volatile
 22250                           
 22251                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 22252  3FAB  1195               	bcf	21,3	;volatile
 22253                           
 22254                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 22255  3FAC  1015               	bcf	21,0	;volatile
 22256                           
 22257                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 22258  3FAD  1495               	bsf	21,1	;volatile
 22259                           
 22260                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 22261  3FAE  1115               	bcf	21,2	;volatile
 22262  3FAF  0008               	return
 22263  3FB0                     __end_of_init_timer0:	
 22264                           
 22265                           	psect	text102
 22266  3FF6                     __ptext102:	
 22267 ;; *************** function _init_adc *****************
 22268 ;; Defined at:
 22269 ;;		line 115 in file "user.c"
 22270 ;; Parameters:    Size  Location     Type
 22271 ;;		None
 22272 ;; Auto vars:     Size  Location     Type
 22273 ;;		None
 22274 ;; Return value:  Size  Location     Type
 22275 ;;                  1    wreg      void 
 22276 ;; Registers used:
 22277 ;;		wreg, status,2, status,0
 22278 ;; Tracked objects:
 22279 ;;		On entry : 0/0
 22280 ;;		On exit  : 0/0
 22281 ;;		Unchanged: 0/0
 22282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22287 ;;Total ram usage:        0 bytes
 22288 ;; Hardware stack levels used:    1
 22289 ;; Hardware stack levels required when called:    5
 22290 ;; This function calls:
 22291 ;;		Nothing
 22292 ;; This function is called by:
 22293 ;;		_InitApp
 22294 ;; This function uses a non-reentrant model
 22295 ;;
 22296                           
 22297                           
 22298                           ;psect for function _init_adc
 22299  3FF6                     _init_adc:	
 22300                           
 22301                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 22302                           
 22303                           ;incstack = 0
 22304                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 22305  3FF6  0021               	movlb	1	; select bank1
 22306  3FF7  179E               	bsf	30,7	;volatile
 22307                           
 22308                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 22309  3FF8  081E               	movf	30,w	;volatile
 22310  3FF9  398F               	andlw	-113
 22311  3FFA  3860               	iorlw	96
 22312  3FFB  009E               	movwf	30	;volatile
 22313                           
 22314                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 22315  3FFC  30FC               	movlw	-4
 22316  3FFD  059E               	andwf	30,f	;volatile
 22317                           
 22318                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 22319  3FFE  141D               	bsf	29,0	;volatile
 22320  3FFF  0008               	return
 22321  4000                     __end_of_init_adc:	
 22322                           
 22323                           	psect	text103
 22324  3F9F                     __ptext103:	
 22325 ;; *************** function _ConfigureOscillator *****************
 22326 ;; Defined at:
 22327 ;;		line 18 in file "system.c"
 22328 ;; Parameters:    Size  Location     Type
 22329 ;;		None
 22330 ;; Auto vars:     Size  Location     Type
 22331 ;;		None
 22332 ;; Return value:  Size  Location     Type
 22333 ;;                  1    wreg      void 
 22334 ;; Registers used:
 22335 ;;		wreg, status,2, status,0
 22336 ;; Tracked objects:
 22337 ;;		On entry : 0/0
 22338 ;;		On exit  : 0/0
 22339 ;;		Unchanged: 0/0
 22340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22345 ;;Total ram usage:        0 bytes
 22346 ;; Hardware stack levels used:    1
 22347 ;; Hardware stack levels required when called:    5
 22348 ;; This function calls:
 22349 ;;		Nothing
 22350 ;; This function is called by:
 22351 ;;		_main
 22352 ;; This function uses a non-reentrant model
 22353 ;;
 22354                           
 22355                           
 22356                           ;psect for function _ConfigureOscillator
 22357  3F9F                     _ConfigureOscillator:	
 22358                           
 22359                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 22360                           
 22361                           ;incstack = 0
 22362                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 22363  3F9F  30FC               	movlw	-4
 22364  3FA0  0021               	movlb	1	; select bank1
 22365  3FA1  0599               	andwf	25,f	;volatile
 22366  3FA2  0008               	return
 22367  3FA3                     __end_of_ConfigureOscillator:	
 22368                           
 22369                           	psect	intentry
 22370  0004                     __pintentry:	
 22371 ;; *************** function _isr *****************
 22372 ;; Defined at:
 22373 ;;		line 30 in file "interrupts.c"
 22374 ;; Parameters:    Size  Location     Type
 22375 ;;		None
 22376 ;; Auto vars:     Size  Location     Type
 22377 ;;  subDiv          1   56[BANK0 ] unsigned char 
 22378 ;; Return value:  Size  Location     Type
 22379 ;;                  1    wreg      void 
 22380 ;; Registers used:
 22381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22382 ;; Tracked objects:
 22383 ;;		On entry : 0/0
 22384 ;;		On exit  : 0/0
 22385 ;;		Unchanged: 0/0
 22386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22389 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22390 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22391 ;;Total ram usage:        7 bytes
 22392 ;; Hardware stack levels used:    1
 22393 ;; Hardware stack levels required when called:    4
 22394 ;; This function calls:
 22395 ;;		_USARTHandleRxInt
 22396 ;;		_modulation
 22397 ;;		_saveState
 22398 ;;		i1___awdiv
 22399 ;;		i1_getModulationSubdivision
 22400 ;;		i1_set_leds_top
 22401 ;; This function is called by:
 22402 ;;		Interrupt level 1
 22403 ;; This function uses a non-reentrant model
 22404 ;;
 22405                           
 22406  0004                     _isr:	
 22407                           
 22408                           ;incstack = 0
 22409                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22410  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 22411  0005  3180               	pagesel	$
 22412  0006  0020               	movlb	0	; select bank0
 22413  0007  087F               	movf	127,w
 22414  0008  00D7               	movwf	??_isr+5
 22415                           
 22416                           ;interrupts.c: 33: extern char isInitialized;
 22417                           ;interrupts.c: 34: extern volatile long timer;
 22418                           ;interrupts.c: 35: extern volatile long sub_timer;
 22419                           ;interrupts.c: 36: extern volatile long tap_timer;
 22420                           ;interrupts.c: 38: extern int mod_delay_time;
 22421                           ;interrupts.c: 42: extern int top_push_state;
 22422                           ;interrupts.c: 43: extern uint8_t longBypass_start;
 22423                           ;interrupts.c: 44: extern volatile long mod_timer;
 22424                           ;interrupts.c: 45: extern volatile long delay_time;
 22425                           ;interrupts.c: 48: if (RCIE && RCIF) {
 22426  0009  0021               	movlb	1	; select bank1
 22427  000A  1E91               	btfss	17,5	;volatile
 22428  000B  2812               	goto	i1l8439
 22429  000C  0020               	movlb	0	; select bank0
 22430  000D  1E91               	btfss	17,5	;volatile
 22431  000E  2812               	goto	i1l8439
 22432                           
 22433                           ;interrupts.c: 50: USARTHandleRxInt();
 22434  000F  31A8  20FE  3180   	fcall	_USARTHandleRxInt
 22435  0012                     i1l8439:	
 22436                           
 22437                           ;interrupts.c: 76: }
 22438                           ;interrupts.c: 81: if (INTCONbits.TMR0IF == 1) {
 22439  0012  1D0B               	btfss	11,2	;volatile
 22440  0013  2B3F               	goto	i1l150
 22441                           
 22442                           ;interrupts.c: 83: if (isInitialized == 0) {
 22443  0014  0020               	movlb	0	; select bank0
 22444  0015  0862               	movf	_isInitialized,w
 22445  0016  1903               	btfsc	3,2
 22446  0017  2B3E               	goto	i1l8571
 22447                           
 22448                           ;interrupts.c: 88: }
 22449                           ;interrupts.c: 105: if (timer == 0) {
 22450                           
 22451                           ;interrupts.c: 87: return;
 22452                           
 22453                           ;interrupts.c: 86: INTCONbits.TMR0IF = 0;
 22454  0018  0024               	movlb	4	; select bank4
 22455  0019  082F               	movf	(_timer+3)^(0+512),w	;volatile
 22456  001A  042E               	iorwf	(_timer+2)^(0+512),w	;volatile
 22457  001B  042D               	iorwf	(_timer+1)^(0+512),w	;volatile
 22458  001C  042C               	iorwf	_timer^(0+512),w	;volatile
 22459  001D  1D03               	skipz
 22460  001E  2823               	goto	i1l151
 22461                           
 22462                           ;interrupts.c: 106: tmpModDelay = mod_delay_time;
 22463  001F  0864               	movf	(_mod_delay_time+1)^(0+512),w
 22464  0020  00C5               	movwf	(_tmpModDelay+1)^(0+512)
 22465  0021  0863               	movf	_mod_delay_time^(0+512),w
 22466  0022  00C4               	movwf	_tmpModDelay^(0+512)
 22467  0023                     i1l151:	
 22468                           
 22469                           ;interrupts.c: 107: }
 22470                           ;interrupts.c: 115: timer = timer + 1;
 22471  0023  3001               	movlw	1
 22472  0024  0020               	movlb	0	; select bank0
 22473  0025  00D2               	movwf	??_isr
 22474  0026  3000               	movlw	0
 22475  0027  00D3               	movwf	??_isr+1
 22476  0028  3000               	movlw	0
 22477  0029  00D4               	movwf	??_isr+2
 22478  002A  3000               	movlw	0
 22479  002B  00D5               	movwf	??_isr+3
 22480  002C  0024               	movlb	4	; select bank4
 22481  002D  082C               	movf	_timer^(0+512),w	;volatile
 22482  002E  0020               	movlb	0	; select bank0
 22483  002F  07D2               	addwf	??_isr,f
 22484  0030  0024               	movlb	4	; select bank4
 22485  0031  082D               	movf	(_timer+1)^(0+512),w	;volatile
 22486  0032  0020               	movlb	0	; select bank0
 22487  0033  3DD3               	addwfc	??_isr+1,f
 22488  0034  0024               	movlb	4	; select bank4
 22489  0035  082E               	movf	(_timer+2)^(0+512),w	;volatile
 22490  0036  0020               	movlb	0	; select bank0
 22491  0037  3DD4               	addwfc	??_isr+2,f
 22492  0038  0024               	movlb	4	; select bank4
 22493  0039  082F               	movf	(_timer+3)^(0+512),w	;volatile
 22494  003A  0020               	movlb	0	; select bank0
 22495  003B  3DD5               	addwfc	??_isr+3,f
 22496  003C  0855               	movf	??_isr+3,w
 22497  003D  0024               	movlb	4	; select bank4
 22498  003E  00AF               	movwf	(_timer+3)^(0+512)	;volatile
 22499  003F  0020               	movlb	0	; select bank0
 22500  0040  0854               	movf	??_isr+2,w
 22501  0041  0024               	movlb	4	; select bank4
 22502  0042  00AE               	movwf	(_timer+2)^(0+512)	;volatile
 22503  0043  0020               	movlb	0	; select bank0
 22504  0044  0853               	movf	??_isr+1,w
 22505  0045  0024               	movlb	4	; select bank4
 22506  0046  00AD               	movwf	(_timer+1)^(0+512)	;volatile
 22507  0047  0020               	movlb	0	; select bank0
 22508  0048  0852               	movf	??_isr,w
 22509  0049  0024               	movlb	4	; select bank4
 22510  004A  00AC               	movwf	_timer^(0+512)	;volatile
 22511                           
 22512                           ;interrupts.c: 116: sub_timer = sub_timer + 1;
 22513  004B  3001               	movlw	1
 22514  004C  0020               	movlb	0	; select bank0
 22515  004D  00D2               	movwf	??_isr
 22516  004E  3000               	movlw	0
 22517  004F  00D3               	movwf	??_isr+1
 22518  0050  3000               	movlw	0
 22519  0051  00D4               	movwf	??_isr+2
 22520  0052  3000               	movlw	0
 22521  0053  00D5               	movwf	??_isr+3
 22522  0054  0024               	movlb	4	; select bank4
 22523  0055  0828               	movf	_sub_timer^(0+512),w	;volatile
 22524  0056  0020               	movlb	0	; select bank0
 22525  0057  07D2               	addwf	??_isr,f
 22526  0058  0024               	movlb	4	; select bank4
 22527  0059  0829               	movf	(_sub_timer+1)^(0+512),w	;volatile
 22528  005A  0020               	movlb	0	; select bank0
 22529  005B  3DD3               	addwfc	??_isr+1,f
 22530  005C  0024               	movlb	4	; select bank4
 22531  005D  082A               	movf	(_sub_timer+2)^(0+512),w	;volatile
 22532  005E  0020               	movlb	0	; select bank0
 22533  005F  3DD4               	addwfc	??_isr+2,f
 22534  0060  0024               	movlb	4	; select bank4
 22535  0061  082B               	movf	(_sub_timer+3)^(0+512),w	;volatile
 22536  0062  0020               	movlb	0	; select bank0
 22537  0063  3DD5               	addwfc	??_isr+3,f
 22538  0064  0855               	movf	??_isr+3,w
 22539  0065  0024               	movlb	4	; select bank4
 22540  0066  00AB               	movwf	(_sub_timer+3)^(0+512)	;volatile
 22541  0067  0020               	movlb	0	; select bank0
 22542  0068  0854               	movf	??_isr+2,w
 22543  0069  0024               	movlb	4	; select bank4
 22544  006A  00AA               	movwf	(_sub_timer+2)^(0+512)	;volatile
 22545  006B  0020               	movlb	0	; select bank0
 22546  006C  0853               	movf	??_isr+1,w
 22547  006D  0024               	movlb	4	; select bank4
 22548  006E  00A9               	movwf	(_sub_timer+1)^(0+512)	;volatile
 22549  006F  0020               	movlb	0	; select bank0
 22550  0070  0852               	movf	??_isr,w
 22551  0071  0024               	movlb	4	; select bank4
 22552  0072  00A8               	movwf	_sub_timer^(0+512)	;volatile
 22553                           
 22554                           ;interrupts.c: 117: tap_timer = tap_timer + 1;
 22555  0073  3001               	movlw	1
 22556  0074  0020               	movlb	0	; select bank0
 22557  0075  00D2               	movwf	??_isr
 22558  0076  3000               	movlw	0
 22559  0077  00D3               	movwf	??_isr+1
 22560  0078  3000               	movlw	0
 22561  0079  00D4               	movwf	??_isr+2
 22562  007A  3000               	movlw	0
 22563  007B  00D5               	movwf	??_isr+3
 22564  007C  0859               	movf	_tap_timer,w	;volatile
 22565  007D  07D2               	addwf	??_isr,f
 22566  007E  085A               	movf	_tap_timer+1,w	;volatile
 22567  007F  3DD3               	addwfc	??_isr+1,f
 22568  0080  085B               	movf	_tap_timer+2,w	;volatile
 22569  0081  3DD4               	addwfc	??_isr+2,f
 22570  0082  085C               	movf	_tap_timer+3,w	;volatile
 22571  0083  3DD5               	addwfc	??_isr+3,f
 22572  0084  0855               	movf	??_isr+3,w
 22573  0085  00DC               	movwf	_tap_timer+3	;volatile
 22574  0086  0854               	movf	??_isr+2,w
 22575  0087  00DB               	movwf	_tap_timer+2	;volatile
 22576  0088  0853               	movf	??_isr+1,w
 22577  0089  00DA               	movwf	_tap_timer+1	;volatile
 22578  008A  0852               	movf	??_isr,w
 22579  008B  00D9               	movwf	_tap_timer	;volatile
 22580                           
 22581                           ;interrupts.c: 118: mod_timer = mod_timer + 1;
 22582  008C  3001               	movlw	1
 22583  008D  00D2               	movwf	??_isr
 22584  008E  3000               	movlw	0
 22585  008F  00D3               	movwf	??_isr+1
 22586  0090  3000               	movlw	0
 22587  0091  00D4               	movwf	??_isr+2
 22588  0092  3000               	movlw	0
 22589  0093  00D5               	movwf	??_isr+3
 22590  0094  0024               	movlb	4	; select bank4
 22591  0095  0824               	movf	_mod_timer^(0+512),w	;volatile
 22592  0096  0020               	movlb	0	; select bank0
 22593  0097  07D2               	addwf	??_isr,f
 22594  0098  0024               	movlb	4	; select bank4
 22595  0099  0825               	movf	(_mod_timer+1)^(0+512),w	;volatile
 22596  009A  0020               	movlb	0	; select bank0
 22597  009B  3DD3               	addwfc	??_isr+1,f
 22598  009C  0024               	movlb	4	; select bank4
 22599  009D  0826               	movf	(_mod_timer+2)^(0+512),w	;volatile
 22600  009E  0020               	movlb	0	; select bank0
 22601  009F  3DD4               	addwfc	??_isr+2,f
 22602  00A0  0024               	movlb	4	; select bank4
 22603  00A1  0827               	movf	(_mod_timer+3)^(0+512),w	;volatile
 22604  00A2  0020               	movlb	0	; select bank0
 22605  00A3  3DD5               	addwfc	??_isr+3,f
 22606  00A4  0855               	movf	??_isr+3,w
 22607  00A5  0024               	movlb	4	; select bank4
 22608  00A6  00A7               	movwf	(_mod_timer+3)^(0+512)	;volatile
 22609  00A7  0020               	movlb	0	; select bank0
 22610  00A8  0854               	movf	??_isr+2,w
 22611  00A9  0024               	movlb	4	; select bank4
 22612  00AA  00A6               	movwf	(_mod_timer+2)^(0+512)	;volatile
 22613  00AB  0020               	movlb	0	; select bank0
 22614  00AC  0853               	movf	??_isr+1,w
 22615  00AD  0024               	movlb	4	; select bank4
 22616  00AE  00A5               	movwf	(_mod_timer+1)^(0+512)	;volatile
 22617  00AF  0020               	movlb	0	; select bank0
 22618  00B0  0852               	movf	??_isr,w
 22619  00B1  0024               	movlb	4	; select bank4
 22620  00B2  00A4               	movwf	_mod_timer^(0+512)	;volatile
 22621                           
 22622                           ;interrupts.c: 119: double_timer++;
 22623  00B3  3001               	movlw	1
 22624  00B4  07A0               	addwf	_double_timer^(0+512),f	;volatile
 22625  00B5  3000               	movlw	0
 22626  00B6  3DA1               	addwfc	(_double_timer+1)^(0+512),f	;volatile
 22627  00B7  3000               	movlw	0
 22628  00B8  3DA2               	addwfc	(_double_timer+2)^(0+512),f	;volatile
 22629  00B9  3000               	movlw	0
 22630  00BA  3DA3               	addwfc	(_double_timer+3)^(0+512),f	;volatile
 22631                           
 22632                           ;interrupts.c: 120: save_timer++;
 22633  00BB  3001               	movlw	1
 22634  00BC  0025               	movlb	5	; select bank5
 22635  00BD  07D2               	addwf	_save_timer^(0+640),f	;volatile
 22636  00BE  3000               	movlw	0
 22637  00BF  3DD3               	addwfc	(_save_timer+1)^(0+640),f	;volatile
 22638  00C0  3000               	movlw	0
 22639  00C1  3DD4               	addwfc	(_save_timer+2)^(0+640),f	;volatile
 22640  00C2  3000               	movlw	0
 22641  00C3  3DD5               	addwfc	(_save_timer+3)^(0+640),f	;volatile
 22642                           
 22643                           ;interrupts.c: 121: save_counter++;
 22644  00C4  3001               	movlw	1
 22645  00C5  07CE               	addwf	_save_counter^(0+640),f
 22646  00C6  3000               	movlw	0
 22647  00C7  3DCF               	addwfc	(_save_counter+1)^(0+640),f
 22648  00C8  3000               	movlw	0
 22649  00C9  3DD0               	addwfc	(_save_counter+2)^(0+640),f
 22650  00CA  3000               	movlw	0
 22651  00CB  3DD1               	addwfc	(_save_counter+3)^(0+640),f
 22652                           
 22653                           ;interrupts.c: 124: char subDiv = getModulationSubdivision();
 22654  00CC  31B3  23FE  3180   	fcall	i1_getModulationSubdivision
 22655  00CF  0870               	movf	?i1_getModulationSubdivision,w
 22656  00D0  0020               	movlb	0	; select bank0
 22657  00D1  00D2               	movwf	??_isr
 22658  00D2  0852               	movf	??_isr,w
 22659  00D3  00D8               	movwf	isr@subDiv
 22660                           
 22661                           ;interrupts.c: 126: if (save_counter > 1250) {
 22662  00D4  0025               	movlb	5	; select bank5
 22663  00D5  1BD1               	btfsc	(_save_counter+3)^(0+640),7
 22664  00D6  28F1               	goto	i1l8459
 22665  00D7  0851               	movf	(_save_counter+3)^(0+640),w
 22666  00D8  1D03               	btfss	3,2
 22667  00D9  28E3               	goto	i1l8453
 22668  00DA  0850               	movf	(_save_counter+2)^(0+640),w
 22669  00DB  1D03               	btfss	3,2
 22670  00DC  28E3               	goto	i1l8453
 22671  00DD  30E3               	movlw	227
 22672  00DE  024E               	subwf	_save_counter^(0+640),w
 22673  00DF  3004               	movlw	4
 22674  00E0  3B4F               	subwfb	(_save_counter+1)^(0+640),w
 22675  00E1  1C03               	btfss	3,0
 22676  00E2  28F1               	goto	i1l8459
 22677  00E3                     i1l8453:	
 22678                           
 22679                           ;interrupts.c: 127: saveState();
 22680  00E3  31BF  27C0  3180   	fcall	_saveState
 22681                           
 22682                           ;interrupts.c: 128: save_counter = 0;
 22683  00E6  3000               	movlw	0
 22684  00E7  0025               	movlb	5	; select bank5
 22685  00E8  00D1               	movwf	(_save_counter+3)^(0+640)
 22686  00E9  3000               	movlw	0
 22687  00EA  00D0               	movwf	(_save_counter+2)^(0+640)
 22688  00EB  3000               	movlw	0
 22689  00EC  00CF               	movwf	(_save_counter+1)^(0+640)
 22690  00ED  3000               	movlw	0
 22691  00EE  00CE               	movwf	_save_counter^(0+640)
 22692                           
 22693                           ;interrupts.c: 129: LATBbits.LATB0 = 1;
 22694  00EF  0022               	movlb	2	; select bank2
 22695  00F0  140D               	bsf	13,0	;volatile
 22696  00F1                     i1l8459:	
 22697                           
 22698                           ;interrupts.c: 130: }
 22699                           ;interrupts.c: 132: if (save_counter == 10) {
 22700  00F1  300A               	movlw	10
 22701  00F2  0025               	movlb	5	; select bank5
 22702  00F3  064E               	xorwf	_save_counter^(0+640),w
 22703  00F4  044F               	iorwf	(_save_counter+1)^(0+640),w
 22704  00F5  0450               	iorwf	(_save_counter+2)^(0+640),w
 22705  00F6  0451               	iorwf	(_save_counter+3)^(0+640),w
 22706  00F7  1D03               	btfss	3,2
 22707  00F8  28FB               	goto	i1l8463
 22708                           
 22709                           ;interrupts.c: 134: LATBbits.LATB0 = 0;
 22710  00F9  0022               	movlb	2	; select bank2
 22711  00FA  100D               	bcf	13,0	;volatile
 22712  00FB                     i1l8463:	
 22713                           
 22714                           ;interrupts.c: 135: }
 22715                           ;interrupts.c: 138: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpMod
      +                          Delay == mod_delay_time)) {
 22716  00FB  0024               	movlb	4	; select bank4
 22717  00FC  0844               	movf	_tmpModDelay^(0+512),w
 22718  00FD  0020               	movlb	0	; select bank0
 22719  00FE  00D2               	movwf	??_isr
 22720  00FF  0024               	movlb	4	; select bank4
 22721  0100  0845               	movf	(_tmpModDelay+1)^(0+512),w
 22722  0101  0020               	movlb	0	; select bank0
 22723  0102  00D3               	movwf	??_isr+1
 22724  0103  3000               	movlw	0
 22725  0104  1BD3               	btfsc	??_isr+1,7
 22726  0105  30FF               	movlw	255
 22727  0106  00D4               	movwf	??_isr+2
 22728  0107  00D5               	movwf	??_isr+3
 22729  0108  0024               	movlb	4	; select bank4
 22730  0109  0827               	movf	(_mod_timer+3)^(0+512),w	;volatile
 22731  010A  3A80               	xorlw	128
 22732  010B  0020               	movlb	0	; select bank0
 22733  010C  00D6               	movwf	??_isr+4
 22734  010D  0855               	movf	??_isr+3,w
 22735  010E  3A80               	xorlw	128
 22736  010F  0256               	subwf	??_isr+4,w
 22737  0110  0024               	movlb	4	; select bank4
 22738  0111  1D03               	skipz
 22739  0112  2923               	goto	u849_23
 22740  0113  0020               	movlb	0	; select bank0
 22741  0114  0854               	movf	??_isr+2,w
 22742  0115  0024               	movlb	4	; select bank4
 22743  0116  0226               	subwf	(_mod_timer+2)^(0+512),w	;volatile
 22744  0117  1D03               	skipz
 22745  0118  2923               	goto	u849_23
 22746  0119  0020               	movlb	0	; select bank0
 22747  011A  0853               	movf	??_isr+1,w
 22748  011B  0024               	movlb	4	; select bank4
 22749  011C  0225               	subwf	(_mod_timer+1)^(0+512),w	;volatile
 22750  011D  1D03               	skipz
 22751  011E  2923               	goto	u849_23
 22752  011F  0020               	movlb	0	; select bank0
 22753  0120  0852               	movf	??_isr,w
 22754  0121  0024               	movlb	4	; select bank4
 22755  0122  0224               	subwf	_mod_timer^(0+512),w	;volatile
 22756  0123                     u849_23:	
 22757  0123  1C03               	skipc
 22758  0124  2951               	goto	i1l154
 22759  0125  0020               	movlb	0	; select bank0
 22760  0126  0858               	movf	isr@subDiv,w
 22761  0127  00D2               	movwf	??_isr
 22762  0128  01D3               	clrf	??_isr+1
 22763  0129  0024               	movlb	4	; select bank4
 22764  012A  0862               	movf	(_mod_counter+1)^(0+512),w
 22765  012B  0020               	movlb	0	; select bank0
 22766  012C  0653               	xorwf	??_isr+1,w
 22767  012D  1D03               	skipz
 22768  012E  2933               	goto	u850_25
 22769  012F  0024               	movlb	4	; select bank4
 22770  0130  0861               	movf	_mod_counter^(0+512),w
 22771  0131  0020               	movlb	0	; select bank0
 22772  0132  0652               	xorwf	??_isr,w
 22773  0133                     u850_25:	
 22774  0133  1D03               	skipz
 22775  0134  2951               	goto	i1l154
 22776  0135  0024               	movlb	4	; select bank4
 22777  0136  0864               	movf	(_mod_delay_time+1)^(0+512),w
 22778  0137  0645               	xorwf	(_tmpModDelay+1)^(0+512),w
 22779  0138  1D03               	skipz
 22780  0139  293C               	goto	u851_25
 22781  013A  0863               	movf	_mod_delay_time^(0+512),w
 22782  013B  0644               	xorwf	_tmpModDelay^(0+512),w
 22783  013C                     u851_25:	
 22784  013C  1D03               	skipz
 22785  013D  2951               	goto	i1l154
 22786                           
 22787                           ;interrupts.c: 139: tmpModDelay = (delay_time - sub_timer);
 22788  013E  0928               	comf	_sub_timer^(0+512),w	;volatile
 22789  013F  0020               	movlb	0	; select bank0
 22790  0140  00D2               	movwf	??_isr
 22791  0141  0024               	movlb	4	; select bank4
 22792  0142  0929               	comf	(_sub_timer+1)^(0+512),w	;volatile
 22793  0143  0020               	movlb	0	; select bank0
 22794  0144  00D3               	movwf	??_isr+1
 22795  0145  0AD2               	incf	??_isr,f
 22796  0146  1903               	skipnz
 22797  0147  0AD3               	incf	??_isr+1,f
 22798  0148  0866               	movf	_delay_time,w	;volatile
 22799  0149  0752               	addwf	??_isr,w
 22800  014A  0024               	movlb	4	; select bank4
 22801  014B  00C4               	movwf	_tmpModDelay^(0+512)
 22802  014C  0020               	movlb	0	; select bank0
 22803  014D  0867               	movf	_delay_time+1,w	;volatile
 22804  014E  3D53               	addwfc	??_isr+1,w
 22805  014F  0024               	movlb	4	; select bank4
 22806  0150  00C5               	movwf	(_tmpModDelay+1)^(0+512)
 22807  0151                     i1l154:	
 22808                           
 22809                           ;interrupts.c: 140: }
 22810                           ;interrupts.c: 142: if (longBypass_start == 1) {
 22811  0151  0024               	movlb	4	; select bank4
 22812  0152  034B               	decf	_longBypass_start^(0+512),w
 22813  0153  1D03               	btfss	3,2
 22814  0154  2965               	goto	i1l8475
 22815                           
 22816                           ;interrupts.c: 143: longBypass_timer++;
 22817  0155  3001               	movlw	1
 22818  0156  07BA               	addwf	_longBypass_timer^(0+512),f	;volatile
 22819  0157  3000               	movlw	0
 22820  0158  3DBB               	addwfc	(_longBypass_timer+1)^(0+512),f	;volatile
 22821                           
 22822                           ;interrupts.c: 144: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pr
      +                          ess_limit;}
 22823  0159  083B               	movf	(_longBypass_timer+1)^(0+512),w	;volatile
 22824  015A  0260               	subwf	(_long_press_limit+1)^(0+512),w
 22825  015B  1D03               	skipz
 22826  015C  295F               	goto	u853_25
 22827  015D  083A               	movf	_longBypass_timer^(0+512),w	;volatile
 22828  015E  025F               	subwf	_long_press_limit^(0+512),w
 22829  015F                     u853_25:	
 22830  015F  1803               	skipnc
 22831  0160  2965               	goto	i1l8475
 22832  0161  0860               	movf	(_long_press_limit+1)^(0+512),w
 22833  0162  00BB               	movwf	(_longBypass_timer+1)^(0+512)	;volatile
 22834  0163  085F               	movf	_long_press_limit^(0+512),w
 22835  0164  00BA               	movwf	_longBypass_timer^(0+512)	;volatile
 22836  0165                     i1l8475:	
 22837                           
 22838                           ;interrupts.c: 145: }
 22839                           ;interrupts.c: 146: if (longTap_start == 1) {
 22840  0165  034C               	decf	_longTap_start^(0+512),w
 22841  0166  1D03               	btfss	3,2
 22842  0167  2978               	goto	i1l8481
 22843                           
 22844                           ;interrupts.c: 147: longTap_timer++;
 22845  0168  3001               	movlw	1
 22846  0169  07BC               	addwf	_longTap_timer^(0+512),f	;volatile
 22847  016A  3000               	movlw	0
 22848  016B  3DBD               	addwfc	(_longTap_timer+1)^(0+512),f	;volatile
 22849                           
 22850                           ;interrupts.c: 148: if (longTap_timer > long_press_limit) {
 22851  016C  083D               	movf	(_longTap_timer+1)^(0+512),w	;volatile
 22852  016D  0260               	subwf	(_long_press_limit+1)^(0+512),w
 22853  016E  1D03               	skipz
 22854  016F  2972               	goto	u855_25
 22855  0170  083C               	movf	_longTap_timer^(0+512),w	;volatile
 22856  0171  025F               	subwf	_long_press_limit^(0+512),w
 22857  0172                     u855_25:	
 22858  0172  1803               	skipnc
 22859  0173  2978               	goto	i1l8481
 22860                           
 22861                           ;interrupts.c: 149: longTap_timer = long_press_limit;
 22862  0174  0860               	movf	(_long_press_limit+1)^(0+512),w
 22863  0175  00BD               	movwf	(_longTap_timer+1)^(0+512)	;volatile
 22864  0176  085F               	movf	_long_press_limit^(0+512),w
 22865  0177  00BC               	movwf	_longTap_timer^(0+512)	;volatile
 22866  0178                     i1l8481:	
 22867                           
 22868                           ;interrupts.c: 150: }
 22869                           ;interrupts.c: 151: }
 22870                           ;interrupts.c: 153: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) 
      +                          {
 22871  0178  0020               	movlb	0	; select bank0
 22872  0179  086F               	movf	_longTap_state,w	;volatile
 22873  017A  1D03               	btfss	3,2
 22874  017B  29E6               	goto	i1l8507
 22875  017C  0861               	movf	_doubleTap_state,w	;volatile
 22876  017D  1D03               	btfss	3,2
 22877  017E  29E6               	goto	i1l8507
 22878  017F  0865               	movf	_presetSaveMode,w
 22879  0180  1D03               	btfss	3,2
 22880  0181  29E6               	goto	i1l8507
 22881                           
 22882                           ;interrupts.c: 155: if (timer >= baseline_mod_time) {
 22883  0182  086A               	movf	_baseline_mod_time,w	;volatile
 22884  0183  00D2               	movwf	??_isr
 22885  0184  086B               	movf	_baseline_mod_time+1,w	;volatile
 22886  0185  00D3               	movwf	??_isr+1
 22887  0186  3000               	movlw	0
 22888  0187  1BD3               	btfsc	??_isr+1,7
 22889  0188  30FF               	movlw	255
 22890  0189  00D4               	movwf	??_isr+2
 22891  018A  00D5               	movwf	??_isr+3
 22892  018B  0024               	movlb	4	; select bank4
 22893  018C  082F               	movf	(_timer+3)^(0+512),w	;volatile
 22894  018D  3A80               	xorlw	128
 22895  018E  0020               	movlb	0	; select bank0
 22896  018F  00D6               	movwf	??_isr+4
 22897  0190  0855               	movf	??_isr+3,w
 22898  0191  3A80               	xorlw	128
 22899  0192  0256               	subwf	??_isr+4,w
 22900  0193  0024               	movlb	4	; select bank4
 22901  0194  1D03               	skipz
 22902  0195  29A6               	goto	u859_23
 22903  0196  0020               	movlb	0	; select bank0
 22904  0197  0854               	movf	??_isr+2,w
 22905  0198  0024               	movlb	4	; select bank4
 22906  0199  022E               	subwf	(_timer+2)^(0+512),w	;volatile
 22907  019A  1D03               	skipz
 22908  019B  29A6               	goto	u859_23
 22909  019C  0020               	movlb	0	; select bank0
 22910  019D  0853               	movf	??_isr+1,w
 22911  019E  0024               	movlb	4	; select bank4
 22912  019F  022D               	subwf	(_timer+1)^(0+512),w	;volatile
 22913  01A0  1D03               	skipz
 22914  01A1  29A6               	goto	u859_23
 22915  01A2  0020               	movlb	0	; select bank0
 22916  01A3  0852               	movf	??_isr,w
 22917  01A4  0024               	movlb	4	; select bank4
 22918  01A5  022C               	subwf	_timer^(0+512),w	;volatile
 22919  01A6                     u859_23:	
 22920  01A6  1C03               	skipc
 22921  01A7  29D5               	goto	i1l8503
 22922                           
 22923                           ;interrupts.c: 158: LATBbits.LATB4 = 1;
 22924  01A8  0022               	movlb	2	; select bank2
 22925  01A9  160D               	bsf	13,4	;volatile
 22926                           
 22927                           ;interrupts.c: 160: timer = 0;
 22928  01AA  3000               	movlw	0
 22929  01AB  0024               	movlb	4	; select bank4
 22930  01AC  00AF               	movwf	(_timer+3)^(0+512)	;volatile
 22931  01AD  3000               	movlw	0
 22932  01AE  00AE               	movwf	(_timer+2)^(0+512)	;volatile
 22933  01AF  3000               	movlw	0
 22934  01B0  00AD               	movwf	(_timer+1)^(0+512)	;volatile
 22935  01B1  3000               	movlw	0
 22936  01B2  00AC               	movwf	_timer^(0+512)	;volatile
 22937                           
 22938                           ;interrupts.c: 162: if (modulation_changed == 1) {
 22939  01B3  034E               	decf	_modulation_changed^(0+512),w
 22940  01B4  1D03               	btfss	3,2
 22941  01B5  29D5               	goto	i1l8503
 22942                           
 22943                           ;interrupts.c: 165: modulation_changed = 0;
 22944  01B6  01CE               	clrf	_modulation_changed^(0+512)
 22945                           
 22946                           ;interrupts.c: 166: mod_time_changed = 0;
 22947  01B7  01EC               	clrf	_mod_time_changed^(0+512)
 22948                           
 22949                           ;interrupts.c: 167: sub_timer = delay_time;
 22950  01B8  0020               	movlb	0	; select bank0
 22951  01B9  0869               	movf	_delay_time+3,w	;volatile
 22952  01BA  0024               	movlb	4	; select bank4
 22953  01BB  00AB               	movwf	(_sub_timer+3)^(0+512)	;volatile
 22954  01BC  0020               	movlb	0	; select bank0
 22955  01BD  0868               	movf	_delay_time+2,w	;volatile
 22956  01BE  0024               	movlb	4	; select bank4
 22957  01BF  00AA               	movwf	(_sub_timer+2)^(0+512)	;volatile
 22958  01C0  0020               	movlb	0	; select bank0
 22959  01C1  0867               	movf	_delay_time+1,w	;volatile
 22960  01C2  0024               	movlb	4	; select bank4
 22961  01C3  00A9               	movwf	(_sub_timer+1)^(0+512)	;volatile
 22962  01C4  0020               	movlb	0	; select bank0
 22963  01C5  0866               	movf	_delay_time,w	;volatile
 22964  01C6  0024               	movlb	4	; select bank4
 22965  01C7  00A8               	movwf	_sub_timer^(0+512)	;volatile
 22966                           
 22967                           ;interrupts.c: 168: tmpModDelay = mod_delay_time;
 22968  01C8  0864               	movf	(_mod_delay_time+1)^(0+512),w
 22969  01C9  00C5               	movwf	(_tmpModDelay+1)^(0+512)
 22970  01CA  0863               	movf	_mod_delay_time^(0+512),w
 22971  01CB  00C4               	movwf	_tmpModDelay^(0+512)
 22972                           
 22973                           ;interrupts.c: 169: mod_timer = tmpModDelay;
 22974  01CC  0844               	movf	_tmpModDelay^(0+512),w
 22975  01CD  00A4               	movwf	_mod_timer^(0+512)	;volatile
 22976  01CE  0845               	movf	(_tmpModDelay+1)^(0+512),w
 22977  01CF  00A5               	movwf	(_mod_timer+1)^(0+512)	;volatile
 22978  01D0  0D89               	rlf	9,f
 22979  01D1  3B89               	subwfb	9,f
 22980  01D2  0989               	comf	9,f
 22981  01D3  00A6               	movwf	(_mod_timer+2)^(0+512)	;volatile
 22982  01D4  00A7               	movwf	(_mod_timer+3)^(0+512)	;volatile
 22983  01D5                     i1l8503:	
 22984                           
 22985                           ;interrupts.c: 177: }
 22986                           ;interrupts.c: 178: }
 22987                           ;interrupts.c: 180: if (timer >= 30) {
 22988  01D5  1BAF               	btfsc	(_timer+3)^(0+512),7	;volatile
 22989  01D6  29E6               	goto	i1l8507
 22990  01D7  082F               	movf	(_timer+3)^(0+512),w	;volatile
 22991  01D8  1D03               	btfss	3,2
 22992  01D9  29E4               	goto	i1l8505
 22993  01DA  082E               	movf	(_timer+2)^(0+512),w	;volatile
 22994  01DB  1D03               	btfss	3,2
 22995  01DC  29E4               	goto	i1l8505
 22996  01DD  082D               	movf	(_timer+1)^(0+512),w	;volatile
 22997  01DE  1D03               	btfss	3,2
 22998  01DF  29E4               	goto	i1l8505
 22999  01E0  301E               	movlw	30
 23000  01E1  022C               	subwf	_timer^(0+512),w	;volatile
 23001  01E2  1C03               	btfss	3,0
 23002  01E3  29E6               	goto	i1l8507
 23003  01E4                     i1l8505:	
 23004                           
 23005                           ;interrupts.c: 182: LATBbits.LATB4 = 0;
 23006  01E4  0022               	movlb	2	; select bank2
 23007  01E5  120D               	bcf	13,4	;volatile
 23008  01E6                     i1l8507:	
 23009                           
 23010                           ;interrupts.c: 184: }
 23011                           ;interrupts.c: 185: }
 23012                           ;interrupts.c: 194: if (presetSaveMode < 1 && mode2_state == 0) {
 23013  01E6  0020               	movlb	0	; select bank0
 23014  01E7  0865               	movf	_presetSaveMode,w
 23015  01E8  1D03               	btfss	3,2
 23016  01E9  2A41               	goto	i1l8525
 23017  01EA  0864               	movf	_mode2_state,w
 23018  01EB  1D03               	btfss	3,2
 23019  01EC  2A41               	goto	i1l8525
 23020                           
 23021                           ;interrupts.c: 195: if (sub_timer >= delay_time ) {
 23022  01ED  0024               	movlb	4	; select bank4
 23023  01EE  082B               	movf	(_sub_timer+3)^(0+512),w	;volatile
 23024  01EF  3A80               	xorlw	128
 23025  01F0  0020               	movlb	0	; select bank0
 23026  01F1  00D2               	movwf	??_isr
 23027  01F2  0869               	movf	_delay_time+3,w	;volatile
 23028  01F3  3A80               	xorlw	128
 23029  01F4  0252               	subwf	??_isr,w
 23030  01F5  0024               	movlb	4	; select bank4
 23031  01F6  1D03               	skipz
 23032  01F7  2A08               	goto	u864_23
 23033  01F8  0020               	movlb	0	; select bank0
 23034  01F9  0868               	movf	_delay_time+2,w	;volatile
 23035  01FA  0024               	movlb	4	; select bank4
 23036  01FB  022A               	subwf	(_sub_timer+2)^(0+512),w	;volatile
 23037  01FC  1D03               	skipz
 23038  01FD  2A08               	goto	u864_23
 23039  01FE  0020               	movlb	0	; select bank0
 23040  01FF  0867               	movf	_delay_time+1,w	;volatile
 23041  0200  0024               	movlb	4	; select bank4
 23042  0201  0229               	subwf	(_sub_timer+1)^(0+512),w	;volatile
 23043  0202  1D03               	skipz
 23044  0203  2A08               	goto	u864_23
 23045  0204  0020               	movlb	0	; select bank0
 23046  0205  0866               	movf	_delay_time,w	;volatile
 23047  0206  0024               	movlb	4	; select bank4
 23048  0207  0228               	subwf	_sub_timer^(0+512),w	;volatile
 23049  0208                     u864_23:	
 23050  0208  1C03               	skipc
 23051  0209  2A23               	goto	i1l8519
 23052                           
 23053                           ;interrupts.c: 196: if (suspend_blink == 0) {
 23054  020A  0022               	movlb	2	; select bank2
 23055  020B  086F               	movf	_suspend_blink^(0+256),w	;volatile
 23056  020C  1D03               	btfss	3,2
 23057  020D  2A1A               	goto	i1l8517
 23058                           
 23059                           ;interrupts.c: 197: set_leds_top(top_push_state, 1);
 23060  020E  0020               	movlb	0	; select bank0
 23061  020F  086D               	movf	_top_push_state+1,w
 23062  0210  00F1               	movwf	i1set_leds_top@x+1
 23063  0211  086C               	movf	_top_push_state,w
 23064  0212  00F0               	movwf	i1set_leds_top@x
 23065  0213  3001               	movlw	1
 23066  0214  00F2               	movwf	i1set_leds_top@ledState
 23067  0215  3000               	movlw	0
 23068  0216  00F3               	movwf	i1set_leds_top@ledState+1
 23069  0217  31A9  2185  3180   	fcall	i1_set_leds_top
 23070  021A                     i1l8517:	
 23071                           
 23072                           ;interrupts.c: 198: }
 23073                           ;interrupts.c: 200: sub_timer = 0;
 23074  021A  3000               	movlw	0
 23075  021B  0024               	movlb	4	; select bank4
 23076  021C  00AB               	movwf	(_sub_timer+3)^(0+512)	;volatile
 23077  021D  3000               	movlw	0
 23078  021E  00AA               	movwf	(_sub_timer+2)^(0+512)	;volatile
 23079  021F  3000               	movlw	0
 23080  0220  00A9               	movwf	(_sub_timer+1)^(0+512)	;volatile
 23081  0221  3000               	movlw	0
 23082  0222  00A8               	movwf	_sub_timer^(0+512)	;volatile
 23083  0223                     i1l8519:	
 23084                           
 23085                           ;interrupts.c: 201: }
 23086                           ;interrupts.c: 203: if (sub_timer >= 20) {
 23087  0223  1BAB               	btfsc	(_sub_timer+3)^(0+512),7	;volatile
 23088  0224  2A41               	goto	i1l8525
 23089  0225  082B               	movf	(_sub_timer+3)^(0+512),w	;volatile
 23090  0226  1D03               	btfss	3,2
 23091  0227  2A32               	goto	i1l8521
 23092  0228  082A               	movf	(_sub_timer+2)^(0+512),w	;volatile
 23093  0229  1D03               	btfss	3,2
 23094  022A  2A32               	goto	i1l8521
 23095  022B  0829               	movf	(_sub_timer+1)^(0+512),w	;volatile
 23096  022C  1D03               	btfss	3,2
 23097  022D  2A32               	goto	i1l8521
 23098  022E  3014               	movlw	20
 23099  022F  0228               	subwf	_sub_timer^(0+512),w	;volatile
 23100  0230  1C03               	btfss	3,0
 23101  0231  2A41               	goto	i1l8525
 23102  0232                     i1l8521:	
 23103                           
 23104                           ;interrupts.c: 204: if (suspend_blink == 0) {
 23105  0232  0022               	movlb	2	; select bank2
 23106  0233  086F               	movf	_suspend_blink^(0+256),w	;volatile
 23107  0234  1D03               	btfss	3,2
 23108  0235  2A41               	goto	i1l8525
 23109                           
 23110                           ;interrupts.c: 205: set_leds_top(top_push_state, 0);
 23111  0236  0020               	movlb	0	; select bank0
 23112  0237  086D               	movf	_top_push_state+1,w
 23113  0238  00F1               	movwf	i1set_leds_top@x+1
 23114  0239  086C               	movf	_top_push_state,w
 23115  023A  00F0               	movwf	i1set_leds_top@x
 23116  023B  3000               	movlw	0
 23117  023C  00F2               	movwf	i1set_leds_top@ledState
 23118  023D  00F3               	movwf	i1set_leds_top@ledState+1
 23119  023E  31A9  2185  3180   	fcall	i1_set_leds_top
 23120  0241                     i1l8525:	
 23121                           
 23122                           ;interrupts.c: 206: }
 23123                           ;interrupts.c: 207: }
 23124                           ;interrupts.c: 208: }
 23125                           ;interrupts.c: 213: if (presetSaveMode == 1) {
 23126  0241  0020               	movlb	0	; select bank0
 23127  0242  0365               	decf	_presetSaveMode,w
 23128  0243  1D03               	btfss	3,2
 23129  0244  2A71               	goto	i1l8537
 23130                           
 23131                           ;interrupts.c: 214: if (double_timer >= 250) {
 23132  0245  0024               	movlb	4	; select bank4
 23133  0246  1BA3               	btfsc	(_double_timer+3)^(0+512),7	;volatile
 23134  0247  2A60               	goto	i1l8533
 23135  0248  0823               	movf	(_double_timer+3)^(0+512),w	;volatile
 23136  0249  1D03               	btfss	3,2
 23137  024A  2A55               	goto	i1l8529
 23138  024B  0822               	movf	(_double_timer+2)^(0+512),w	;volatile
 23139  024C  1D03               	btfss	3,2
 23140  024D  2A55               	goto	i1l8529
 23141  024E  0821               	movf	(_double_timer+1)^(0+512),w	;volatile
 23142  024F  1D03               	btfss	3,2
 23143  0250  2A55               	goto	i1l8529
 23144  0251  30FA               	movlw	250
 23145  0252  0220               	subwf	_double_timer^(0+512),w	;volatile
 23146  0253  1C03               	btfss	3,0
 23147  0254  2A60               	goto	i1l8533
 23148  0255                     i1l8529:	
 23149                           
 23150                           ;interrupts.c: 215: LATBbits.LATB0 = 1;
 23151  0255  0022               	movlb	2	; select bank2
 23152  0256  140D               	bsf	13,0	;volatile
 23153                           
 23154                           ;interrupts.c: 216: double_timer = 0;
 23155  0257  3000               	movlw	0
 23156  0258  0024               	movlb	4	; select bank4
 23157  0259  00A3               	movwf	(_double_timer+3)^(0+512)	;volatile
 23158  025A  3000               	movlw	0
 23159  025B  00A2               	movwf	(_double_timer+2)^(0+512)	;volatile
 23160  025C  3000               	movlw	0
 23161  025D  00A1               	movwf	(_double_timer+1)^(0+512)	;volatile
 23162  025E  3000               	movlw	0
 23163  025F  00A0               	movwf	_double_timer^(0+512)	;volatile
 23164  0260                     i1l8533:	
 23165                           
 23166                           ;interrupts.c: 217: }
 23167                           ;interrupts.c: 218: if (double_timer >= 30) {
 23168  0260  1BA3               	btfsc	(_double_timer+3)^(0+512),7	;volatile
 23169  0261  2A71               	goto	i1l8537
 23170  0262  0823               	movf	(_double_timer+3)^(0+512),w	;volatile
 23171  0263  1D03               	btfss	3,2
 23172  0264  2A6F               	goto	i1l8535
 23173  0265  0822               	movf	(_double_timer+2)^(0+512),w	;volatile
 23174  0266  1D03               	btfss	3,2
 23175  0267  2A6F               	goto	i1l8535
 23176  0268  0821               	movf	(_double_timer+1)^(0+512),w	;volatile
 23177  0269  1D03               	btfss	3,2
 23178  026A  2A6F               	goto	i1l8535
 23179  026B  301E               	movlw	30
 23180  026C  0220               	subwf	_double_timer^(0+512),w	;volatile
 23181  026D  1C03               	btfss	3,0
 23182  026E  2A71               	goto	i1l8537
 23183  026F                     i1l8535:	
 23184                           
 23185                           ;interrupts.c: 219: LATBbits.LATB0 = 0;
 23186  026F  0022               	movlb	2	; select bank2
 23187  0270  100D               	bcf	13,0	;volatile
 23188  0271                     i1l8537:	
 23189                           
 23190                           ;interrupts.c: 220: }
 23191                           ;interrupts.c: 221: }
 23192                           ;interrupts.c: 242: if (mod_timer >= tmpModDelay) {
 23193  0271  0024               	movlb	4	; select bank4
 23194  0272  0844               	movf	_tmpModDelay^(0+512),w
 23195  0273  0020               	movlb	0	; select bank0
 23196  0274  00D2               	movwf	??_isr
 23197  0275  0024               	movlb	4	; select bank4
 23198  0276  0845               	movf	(_tmpModDelay+1)^(0+512),w
 23199  0277  0020               	movlb	0	; select bank0
 23200  0278  00D3               	movwf	??_isr+1
 23201  0279  3000               	movlw	0
 23202  027A  1BD3               	btfsc	??_isr+1,7
 23203  027B  30FF               	movlw	255
 23204  027C  00D4               	movwf	??_isr+2
 23205  027D  00D5               	movwf	??_isr+3
 23206  027E  0024               	movlb	4	; select bank4
 23207  027F  0827               	movf	(_mod_timer+3)^(0+512),w	;volatile
 23208  0280  3A80               	xorlw	128
 23209  0281  0020               	movlb	0	; select bank0
 23210  0282  00D6               	movwf	??_isr+4
 23211  0283  0855               	movf	??_isr+3,w
 23212  0284  3A80               	xorlw	128
 23213  0285  0256               	subwf	??_isr+4,w
 23214  0286  0024               	movlb	4	; select bank4
 23215  0287  1D03               	skipz
 23216  0288  2A99               	goto	u871_23
 23217  0289  0020               	movlb	0	; select bank0
 23218  028A  0854               	movf	??_isr+2,w
 23219  028B  0024               	movlb	4	; select bank4
 23220  028C  0226               	subwf	(_mod_timer+2)^(0+512),w	;volatile
 23221  028D  1D03               	skipz
 23222  028E  2A99               	goto	u871_23
 23223  028F  0020               	movlb	0	; select bank0
 23224  0290  0853               	movf	??_isr+1,w
 23225  0291  0024               	movlb	4	; select bank4
 23226  0292  0225               	subwf	(_mod_timer+1)^(0+512),w	;volatile
 23227  0293  1D03               	skipz
 23228  0294  2A99               	goto	u871_23
 23229  0295  0020               	movlb	0	; select bank0
 23230  0296  0852               	movf	??_isr,w
 23231  0297  0024               	movlb	4	; select bank4
 23232  0298  0224               	subwf	_mod_timer^(0+512),w	;volatile
 23233  0299                     u871_23:	
 23234  0299  1C03               	skipc
 23235  029A  2B09               	goto	i1l8553
 23236                           
 23237                           ;interrupts.c: 243: mod_timer = 0;
 23238  029B  3000               	movlw	0
 23239  029C  00A7               	movwf	(_mod_timer+3)^(0+512)	;volatile
 23240  029D  3000               	movlw	0
 23241  029E  00A6               	movwf	(_mod_timer+2)^(0+512)	;volatile
 23242  029F  3000               	movlw	0
 23243  02A0  00A5               	movwf	(_mod_timer+1)^(0+512)	;volatile
 23244  02A1  3000               	movlw	0
 23245  02A2  00A4               	movwf	_mod_timer^(0+512)	;volatile
 23246                           
 23247                           ;interrupts.c: 245: if (mod_counter >= subDiv) {
 23248  02A3  0862               	movf	(_mod_counter+1)^(0+512),w
 23249  02A4  3A80               	xorlw	128
 23250  02A5  0020               	movlb	0	; select bank0
 23251  02A6  00D2               	movwf	??_isr
 23252  02A7  3080               	movlw	128
 23253  02A8  0252               	subwf	??_isr,w
 23254  02A9  1D03               	skipz
 23255  02AA  2AAE               	goto	u872_25
 23256  02AB  0858               	movf	isr@subDiv,w
 23257  02AC  0024               	movlb	4	; select bank4
 23258  02AD  0261               	subwf	_mod_counter^(0+512),w
 23259  02AE                     u872_25:	
 23260  02AE  1C03               	skipc
 23261  02AF  2AB7               	goto	i1l8545
 23262                           
 23263                           ;interrupts.c: 246: mod_counter = 0;
 23264  02B0  0024               	movlb	4	; select bank4
 23265  02B1  01E1               	clrf	_mod_counter^(0+512)
 23266  02B2  01E2               	clrf	(_mod_counter+1)^(0+512)
 23267                           
 23268                           ;interrupts.c: 247: tmpModDelay = mod_delay_time;
 23269  02B3  0864               	movf	(_mod_delay_time+1)^(0+512),w
 23270  02B4  00C5               	movwf	(_tmpModDelay+1)^(0+512)
 23271  02B5  0863               	movf	_mod_delay_time^(0+512),w
 23272  02B6  00C4               	movwf	_tmpModDelay^(0+512)
 23273  02B7                     i1l8545:	
 23274                           
 23275                           ;interrupts.c: 251: }
 23276                           ;interrupts.c: 255: mod_value = modArray[mod_counter];
 23277  02B7  0024               	movlb	4	; select bank4
 23278  02B8  0862               	movf	(_mod_counter+1)^(0+512),w
 23279  02B9  0020               	movlb	0	; select bank0
 23280  02BA  00D3               	movwf	??_isr+1
 23281  02BB  0024               	movlb	4	; select bank4
 23282  02BC  0861               	movf	_mod_counter^(0+512),w
 23283  02BD  0020               	movlb	0	; select bank0
 23284  02BE  00D2               	movwf	??_isr
 23285  02BF  35D2               	lslf	??_isr,f
 23286  02C0  0DD3               	rlf	??_isr+1,f
 23287  02C1  308A               	movlw	138
 23288  02C2  00D4               	movwf	??_isr+2
 23289  02C3  3023               	movlw	35
 23290  02C4  00D5               	movwf	??_isr+3
 23291  02C5  0852               	movf	??_isr,w
 23292  02C6  0754               	addwf	??_isr+2,w
 23293  02C7  0086               	movwf	6
 23294  02C8  0853               	movf	??_isr+1,w
 23295  02C9  3D55               	addwfc	??_isr+3,w
 23296  02CA  0087               	movwf	7
 23297  02CB  3F40               	moviw [0]fsr1
 23298  02CC  0024               	movlb	4	; select bank4
 23299  02CD  00C0               	movwf	_mod_value^(0+512)
 23300  02CE  3F41               	moviw [1]fsr1
 23301  02CF  00C1               	movwf	(_mod_value+1)^(0+512)
 23302                           
 23303                           ;interrupts.c: 262: mod_value = modulation(mod_value, adjusted_pot_value);
 23304  02D0  0840               	movf	_mod_value^(0+512),w
 23305  02D1  0020               	movlb	0	; select bank0
 23306  02D2  00AE               	movwf	modulation@x
 23307  02D3  0024               	movlb	4	; select bank4
 23308  02D4  0841               	movf	(_mod_value+1)^(0+512),w
 23309  02D5  0020               	movlb	0	; select bank0
 23310  02D6  00AF               	movwf	modulation@x+1
 23311  02D7  0D89               	rlf	9,f
 23312  02D8  3B89               	subwfb	9,f
 23313  02D9  0989               	comf	9,f
 23314  02DA  00B0               	movwf	modulation@x+2
 23315  02DB  00B1               	movwf	modulation@x+3
 23316  02DC  0025               	movlb	5	; select bank5
 23317  02DD  085A               	movf	_adjusted_pot_value^(0+640),w
 23318  02DE  0020               	movlb	0	; select bank0
 23319  02DF  00B2               	movwf	modulation@y
 23320  02E0  0025               	movlb	5	; select bank5
 23321  02E1  085B               	movf	(_adjusted_pot_value+1)^(0+640),w
 23322  02E2  0020               	movlb	0	; select bank0
 23323  02E3  00B3               	movwf	modulation@y+1
 23324  02E4  0D89               	rlf	9,f
 23325  02E5  3B89               	subwfb	9,f
 23326  02E6  0989               	comf	9,f
 23327  02E7  00B4               	movwf	modulation@y+2
 23328  02E8  00B5               	movwf	modulation@y+3
 23329  02E9  31A8  207C  3180   	fcall	_modulation
 23330  02EC  0020               	movlb	0	; select bank0
 23331  02ED  082F               	movf	?_modulation+1,w
 23332  02EE  0024               	movlb	4	; select bank4
 23333  02EF  00C1               	movwf	(_mod_value+1)^(0+512)
 23334  02F0  0020               	movlb	0	; select bank0
 23335  02F1  082E               	movf	?_modulation,w
 23336  02F2  0024               	movlb	4	; select bank4
 23337  02F3  00C0               	movwf	_mod_value^(0+512)
 23338                           
 23339                           ;interrupts.c: 263: CCPR3 = mod_value / 2;
 23340  02F4  3002               	movlw	2
 23341  02F5  00F0               	movwf	i1___awdiv@divisor
 23342  02F6  3000               	movlw	0
 23343  02F7  00F1               	movwf	i1___awdiv@divisor+1
 23344  02F8  0841               	movf	(_mod_value+1)^(0+512),w
 23345  02F9  00F3               	movwf	i1___awdiv@dividend+1
 23346  02FA  0840               	movf	_mod_value^(0+512),w
 23347  02FB  00F2               	movwf	i1___awdiv@dividend
 23348  02FC  31AB  234B  3180   	fcall	i1___awdiv
 23349  02FF  0871               	movf	?i1___awdiv+1,w
 23350  0300  0026               	movlb	6	; select bank6
 23351  0301  0092               	movwf	18	;volatile
 23352  0302  0870               	movf	?i1___awdiv,w
 23353  0303  0091               	movwf	17	;volatile
 23354                           
 23355                           ;interrupts.c: 264: mod_counter++;
 23356  0304  3001               	movlw	1
 23357  0305  0024               	movlb	4	; select bank4
 23358  0306  07E1               	addwf	_mod_counter^(0+512),f
 23359  0307  3000               	movlw	0
 23360  0308  3DE2               	addwfc	(_mod_counter+1)^(0+512),f
 23361  0309                     i1l8553:	
 23362                           
 23363                           ;interrupts.c: 266: }
 23364                           ;interrupts.c: 268: if (preset_programmning_on == 1) {
 23365  0309  0351               	decf	_preset_programmning_on^(0+512),w
 23366  030A  1D03               	btfss	3,2
 23367  030B  2B37               	goto	i1l8565
 23368                           
 23369                           ;interrupts.c: 269: preset_blink++;
 23370  030C  3001               	movlw	1
 23371  030D  0020               	movlb	0	; select bank0
 23372  030E  00D2               	movwf	??_isr
 23373  030F  0852               	movf	??_isr,w
 23374  0310  0024               	movlb	4	; select bank4
 23375  0311  07D0               	addwf	_preset_blink^(0+512),f
 23376                           
 23377                           ;interrupts.c: 271: if (preset_blink >= blink_delay) {
 23378  0312  085A               	movf	(_blink_delay+1)^(0+512),w
 23379  0313  3A80               	xorlw	128
 23380  0314  3C80               	sublw	128
 23381  0315  1D03               	skipz
 23382  0316  2B19               	goto	u874_25
 23383  0317  0859               	movf	_blink_delay^(0+512),w
 23384  0318  0250               	subwf	_preset_blink^(0+512),w
 23385  0319                     u874_25:	
 23386  0319  1C03               	skipc
 23387  031A  2B3C               	goto	i1l8569
 23388                           
 23389                           ;interrupts.c: 272: LATBbits.LATB1 = 1;
 23390  031B  0022               	movlb	2	; select bank2
 23391  031C  148D               	bsf	13,1	;volatile
 23392                           
 23393                           ;interrupts.c: 273: if (preset_blink > blink_delay*2) {
 23394  031D  0024               	movlb	4	; select bank4
 23395  031E  085A               	movf	(_blink_delay+1)^(0+512),w
 23396  031F  0020               	movlb	0	; select bank0
 23397  0320  00D3               	movwf	??_isr+1
 23398  0321  0024               	movlb	4	; select bank4
 23399  0322  0859               	movf	_blink_delay^(0+512),w
 23400  0323  0020               	movlb	0	; select bank0
 23401  0324  00D2               	movwf	??_isr
 23402  0325  35D2               	lslf	??_isr,f
 23403  0326  0DD3               	rlf	??_isr+1,f
 23404  0327  0853               	movf	??_isr+1,w
 23405  0328  3A80               	xorlw	128
 23406  0329  00D4               	movwf	??_isr+2
 23407  032A  3080               	movlw	128
 23408  032B  0254               	subwf	??_isr+2,w
 23409  032C  1D03               	skipz
 23410  032D  2B32               	goto	u875_25
 23411  032E  0024               	movlb	4	; select bank4
 23412  032F  0850               	movf	_preset_blink^(0+512),w
 23413  0330  0020               	movlb	0	; select bank0
 23414  0331  0252               	subwf	??_isr,w
 23415  0332                     u875_25:	
 23416  0332  1803               	skipnc
 23417  0333  2B3E               	goto	i1l8571
 23418                           
 23419                           ;interrupts.c: 274: preset_blink = 0;
 23420  0334  0024               	movlb	4	; select bank4
 23421  0335  01D0               	clrf	_preset_blink^(0+512)
 23422                           
 23423                           ;interrupts.c: 275: }
 23424                           ;interrupts.c: 277: } else {
 23425  0336  2B3E               	goto	i1l8571
 23426  0337                     i1l8565:	
 23427                           ;interrupts.c: 279: }
 23428                           ;interrupts.c: 281: } else {
 23429                           
 23430                           ;interrupts.c: 278: LATBbits.LATB1 = 0;
 23431                           
 23432                           
 23433                           ;interrupts.c: 282: if (preset_blink > 0) {
 23434  0337  0024               	movlb	4	; select bank4
 23435  0338  0850               	movf	_preset_blink^(0+512),w
 23436  0339  1903               	btfsc	3,2
 23437  033A  2B3E               	goto	i1l8571
 23438                           
 23439                           ;interrupts.c: 283: preset_blink = 0;
 23440  033B  01D0               	clrf	_preset_blink^(0+512)
 23441  033C                     i1l8569:	
 23442                           
 23443                           ;interrupts.c: 284: LATBbits.LATB1 = 0;
 23444  033C  0022               	movlb	2	; select bank2
 23445  033D  108D               	bcf	13,1	;volatile
 23446  033E                     i1l8571:	
 23447                           
 23448                           ;interrupts.c: 285: }
 23449                           ;interrupts.c: 286: }
 23450                           ;interrupts.c: 290: INTCONbits.TMR0IF = 0;
 23451  033E  110B               	bcf	11,2	;volatile
 23452  033F                     i1l150:	
 23453  033F  0020               	movlb	0	; select bank0
 23454  0340  0857               	movf	??_isr+5,w
 23455  0341  00FF               	movwf	127
 23456  0342  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 23457  0343  0009               	retfie
 23458  0344                     __end_of_isr:	
 23459                           
 23460                           	psect	text105
 23461  2985                     __ptext105:	
 23462 ;; *************** function i1_set_leds_top *****************
 23463 ;; Defined at:
 23464 ;;		line 18 in file "LEDs.c"
 23465 ;; Parameters:    Size  Location     Type
 23466 ;;  x               2    0[COMMON] int 
 23467 ;;  ledState        2    2[COMMON] int 
 23468 ;; Auto vars:     Size  Location     Type
 23469 ;;		None
 23470 ;; Return value:  Size  Location     Type
 23471 ;;                  1    wreg      void 
 23472 ;; Registers used:
 23473 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 23474 ;; Tracked objects:
 23475 ;;		On entry : 0/0
 23476 ;;		On exit  : 0/0
 23477 ;;		Unchanged: 0/0
 23478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 23479 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23482 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23483 ;;Total ram usage:        4 bytes
 23484 ;; Hardware stack levels used:    1
 23485 ;; This function calls:
 23486 ;;		Nothing
 23487 ;; This function is called by:
 23488 ;;		_isr
 23489 ;; This function uses a non-reentrant model
 23490 ;;
 23491                           
 23492                           
 23493                           ;psect for function i1_set_leds_top
 23494  2985                     i1_set_leds_top:	
 23495                           
 23496                           ;LEDs.c: 19: LATFbits.LATF0 = 0;
 23497                           
 23498                           ;incstack = 0
 23499                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 23500  2985  0027               	movlb	7	; select bank7
 23501  2986  100C               	bcf	12,0	;volatile
 23502                           
 23503                           ;LEDs.c: 20: LATFbits.LATF1 = 0;
 23504  2987  108C               	bcf	12,1	;volatile
 23505                           
 23506                           ;LEDs.c: 21: LATFbits.LATF2 = 0;
 23507  2988  110C               	bcf	12,2	;volatile
 23508                           
 23509                           ;LEDs.c: 22: LATFbits.LATF3 = 0;
 23510  2989  118C               	bcf	12,3	;volatile
 23511                           
 23512                           ;LEDs.c: 23: LATFbits.LATF4 = 0;
 23513  298A  120C               	bcf	12,4	;volatile
 23514                           
 23515                           ;LEDs.c: 24: switch (x) {
 23516  298B  29B0               	goto	i1l8415
 23517  298C                     i1l8403:	
 23518                           ;LEDs.c: 25: case 1:
 23519                           
 23520                           
 23521                           ;LEDs.c: 26: LATFbits.LATF0 = ledState;
 23522  298C  0C72               	rrf	i1set_leds_top@ledState,w
 23523  298D  1C03               	skipc
 23524  298E  100C               	bcf	12,0	;volatile
 23525  298F  1803               	skipnc
 23526  2990  140C               	bsf	12,0	;volatile
 23527                           
 23528                           ;LEDs.c: 27: break;
 23529  2991  0008               	return
 23530  2992                     i1l8405:	
 23531                           ;LEDs.c: 28: case 2:
 23532                           
 23533                           
 23534                           ;LEDs.c: 29: LATFbits.LATF1 = ledState;
 23535  2992  0C72               	rrf	i1set_leds_top@ledState,w
 23536  2993  1C03               	skipc
 23537  2994  108C               	bcf	12,1	;volatile
 23538  2995  1803               	skipnc
 23539  2996  148C               	bsf	12,1	;volatile
 23540                           
 23541                           ;LEDs.c: 30: break;
 23542  2997  0008               	return
 23543  2998                     i1l8407:	
 23544                           ;LEDs.c: 31: case 3:
 23545                           
 23546                           
 23547                           ;LEDs.c: 32: LATFbits.LATF2 = ledState;
 23548  2998  0C72               	rrf	i1set_leds_top@ledState,w
 23549  2999  1C03               	skipc
 23550  299A  110C               	bcf	12,2	;volatile
 23551  299B  1803               	skipnc
 23552  299C  150C               	bsf	12,2	;volatile
 23553                           
 23554                           ;LEDs.c: 33: break;
 23555  299D  0008               	return
 23556  299E                     i1l8409:	
 23557                           ;LEDs.c: 34: case 4:
 23558                           
 23559                           
 23560                           ;LEDs.c: 35: LATFbits.LATF3 = ledState;
 23561  299E  0C72               	rrf	i1set_leds_top@ledState,w
 23562  299F  1C03               	skipc
 23563  29A0  118C               	bcf	12,3	;volatile
 23564  29A1  1803               	skipnc
 23565  29A2  158C               	bsf	12,3	;volatile
 23566                           
 23567                           ;LEDs.c: 36: break;
 23568  29A3  0008               	return
 23569  29A4                     i1l8411:	
 23570                           ;LEDs.c: 37: case 5:
 23571                           
 23572                           
 23573                           ;LEDs.c: 38: LATFbits.LATF4 = ledState;
 23574  29A4  0C72               	rrf	i1set_leds_top@ledState,w
 23575  29A5  1C03               	skipc
 23576  29A6  120C               	bcf	12,4	;volatile
 23577  29A7  1803               	skipnc
 23578  29A8  160C               	bsf	12,4	;volatile
 23579                           
 23580                           ;LEDs.c: 41: break;
 23581                           
 23582                           ;LEDs.c: 40: case 6:
 23583                           
 23584                           ;LEDs.c: 39: break;
 23585  29A9  0008               	return
 23586  29AA                     i1l924:	
 23587                           ;LEDs.c: 42: case 100:
 23588                           
 23589                           
 23590                           ;LEDs.c: 43: LATFbits.LATF0 = 1;
 23591  29AA  140C               	bsf	12,0	;volatile
 23592                           
 23593                           ;LEDs.c: 44: LATFbits.LATF1 = 1;
 23594  29AB  148C               	bsf	12,1	;volatile
 23595                           
 23596                           ;LEDs.c: 45: LATFbits.LATF2 = 1;
 23597  29AC  150C               	bsf	12,2	;volatile
 23598                           
 23599                           ;LEDs.c: 46: LATFbits.LATF3 = 1;
 23600  29AD  158C               	bsf	12,3	;volatile
 23601                           
 23602                           ;LEDs.c: 47: LATFbits.LATF4 = 1;
 23603  29AE  160C               	bsf	12,4	;volatile
 23604                           
 23605                           ;LEDs.c: 49: }
 23606                           
 23607                           ;LEDs.c: 48: break;
 23608  29AF  0008               	return
 23609  29B0                     i1l8415:	
 23610                           
 23611                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23612                           ; Switch size 1, requested type "space"
 23613                           ; Number of cases is 1, Range of values is 0 to 0
 23614                           ; switch strategies available:
 23615                           ; Name         Instructions Cycles
 23616                           ; simple_byte            4     3 (average)
 23617                           ; direct_byte            8     6 (fixed)
 23618                           ; jumptable            260     6 (fixed)
 23619                           ;	Chosen strategy is simple_byte
 23620  29B0  0871               	movf	i1set_leds_top@x+1,w
 23621  29B1  3A00               	xorlw	0	; case 0
 23622  29B2  1903               	skipnz
 23623  29B3  29B5               	goto	i1l9473
 23624  29B4  29CC               	goto	i1l925
 23625  29B5                     i1l9473:	
 23626                           
 23627                           ; Switch size 1, requested type "space"
 23628                           ; Number of cases is 7, Range of values is 1 to 100
 23629                           ; switch strategies available:
 23630                           ; Name         Instructions Cycles
 23631                           ; simple_byte           22    12 (average)
 23632                           ; direct_byte          209     9 (fixed)
 23633                           ; jumptable            263     9 (fixed)
 23634                           ;	Chosen strategy is simple_byte
 23635  29B5  0870               	movf	i1set_leds_top@x,w
 23636  29B6  3A01               	xorlw	1	; case 1
 23637  29B7  1903               	skipnz
 23638  29B8  298C               	goto	i1l8403
 23639  29B9  3A03               	xorlw	3	; case 2
 23640  29BA  1903               	skipnz
 23641  29BB  2992               	goto	i1l8405
 23642  29BC  3A01               	xorlw	1	; case 3
 23643  29BD  1903               	skipnz
 23644  29BE  2998               	goto	i1l8407
 23645  29BF  3A07               	xorlw	7	; case 4
 23646  29C0  1903               	skipnz
 23647  29C1  299E               	goto	i1l8409
 23648  29C2  3A01               	xorlw	1	; case 5
 23649  29C3  1903               	skipnz
 23650  29C4  29A4               	goto	i1l8411
 23651  29C5  3A03               	xorlw	3	; case 6
 23652  29C6  1903               	skipnz
 23653  29C7  29CC               	goto	i1l925
 23654  29C8  3A62               	xorlw	98	; case 100
 23655  29C9  1903               	skipnz
 23656  29CA  29AA               	goto	i1l924
 23657  29CB  29CC               	goto	i1l925
 23658  29CC                     i1l925:	
 23659  29CC  0008               	return
 23660  29CD                     __end_ofi1_set_leds_top:	
 23661                           
 23662                           	psect	text106
 23663  33FE                     __ptext106:	
 23664 ;; *************** function i1_getModulationSubdivision *****************
 23665 ;; Defined at:
 23666 ;;		line 27 in file "modulation.c"
 23667 ;; Parameters:    Size  Location     Type
 23668 ;;		None
 23669 ;; Auto vars:     Size  Location     Type
 23670 ;;		None
 23671 ;; Return value:  Size  Location     Type
 23672 ;;                  2    0[COMMON] int 
 23673 ;; Registers used:
 23674 ;;		wreg, status,2, status,0
 23675 ;; Tracked objects:
 23676 ;;		On entry : 0/0
 23677 ;;		On exit  : 0/0
 23678 ;;		Unchanged: 0/0
 23679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 23680 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23683 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23684 ;;Total ram usage:        2 bytes
 23685 ;; Hardware stack levels used:    1
 23686 ;; This function calls:
 23687 ;;		Nothing
 23688 ;; This function is called by:
 23689 ;;		_isr
 23690 ;; This function uses a non-reentrant model
 23691 ;;
 23692                           
 23693                           
 23694                           ;psect for function i1_getModulationSubdivision
 23695  33FE                     i1_getModulationSubdivision:	
 23696                           
 23697                           ;modulation.c: 28: if (delay_time >= 2400) {
 23698                           
 23699                           ;incstack = 0
 23700                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 23701  33FE  0020               	movlb	0	; select bank0
 23702  33FF  1BE9               	btfsc	_delay_time+3,7	;volatile
 23703  3400  2C0F               	goto	i1l8425
 23704  3401  0869               	movf	_delay_time+3,w	;volatile
 23705  3402  1D03               	btfss	3,2
 23706  3403  2C0D               	goto	i1l8423
 23707  3404  0868               	movf	_delay_time+2,w	;volatile
 23708  3405  1D03               	btfss	3,2
 23709  3406  2C0D               	goto	i1l8423
 23710  3407  3060               	movlw	96
 23711  3408  0266               	subwf	_delay_time,w	;volatile
 23712  3409  3009               	movlw	9
 23713  340A  3B67               	subwfb	_delay_time+1,w	;volatile
 23714  340B  1C03               	btfss	3,0
 23715  340C  2C0F               	goto	i1l8425
 23716  340D                     i1l8423:	
 23717                           
 23718                           ;modulation.c: 29: modulationSubdivision = 120;
 23719  340D  3078               	movlw	120
 23720  340E  2C21               	goto	L25
 23721  340F                     i1l8425:	
 23722                           ;modulation.c: 30: } else if (delay_time >= 600) {
 23723                           
 23724  340F  0020               	movlb	0	; select bank0
 23725  3410  1BE9               	btfsc	_delay_time+3,7	;volatile
 23726  3411  2C20               	goto	i1l8429
 23727  3412  0869               	movf	_delay_time+3,w	;volatile
 23728  3413  1D03               	btfss	3,2
 23729  3414  2C1E               	goto	i1l8427
 23730  3415  0868               	movf	_delay_time+2,w	;volatile
 23731  3416  1D03               	btfss	3,2
 23732  3417  2C1E               	goto	i1l8427
 23733  3418  3058               	movlw	88
 23734  3419  0266               	subwf	_delay_time,w	;volatile
 23735  341A  3002               	movlw	2
 23736  341B  3B67               	subwfb	_delay_time+1,w	;volatile
 23737  341C  1C03               	btfss	3,0
 23738  341D  2C20               	goto	i1l8429
 23739  341E                     i1l8427:	
 23740                           
 23741                           ;modulation.c: 31: modulationSubdivision = 60;
 23742  341E  303C               	movlw	60
 23743  341F  2C21               	goto	L25
 23744  3420                     i1l8429:	
 23745                           ;modulation.c: 32: } else {
 23746                           
 23747                           
 23748                           ;modulation.c: 33: modulationSubdivision = 30;
 23749  3420  301E               	movlw	30
 23750  3421                     L25:	
 23751  3421  0024               	movlb	4	; select bank4
 23752  3422  00C2               	movwf	_modulationSubdivision^(0+512)
 23753  3423  3000               	movlw	0
 23754  3424  00C3               	movwf	(_modulationSubdivision^(0+512)+1)
 23755                           
 23756                           ;modulation.c: 34: }
 23757                           ;modulation.c: 35: return modulationSubdivision;
 23758  3425  0843               	movf	(_modulationSubdivision+1)^(0+512),w
 23759  3426  00F1               	movwf	?i1_getModulationSubdivision+1
 23760  3427  0842               	movf	_modulationSubdivision^(0+512),w
 23761  3428  00F0               	movwf	?i1_getModulationSubdivision
 23762  3429  0008               	return
 23763  342A                     __end_ofi1_getModulationSubdivision:	
 23764                           
 23765                           	psect	text107
 23766  3FC0                     __ptext107:	
 23767 ;; *************** function _saveState *****************
 23768 ;; Defined at:
 23769 ;;		line 129 in file "state_manager.c"
 23770 ;; Parameters:    Size  Location     Type
 23771 ;;		None
 23772 ;; Auto vars:     Size  Location     Type
 23773 ;;		None
 23774 ;; Return value:  Size  Location     Type
 23775 ;;                  2   12[None  ] int 
 23776 ;; Registers used:
 23777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23778 ;; Tracked objects:
 23779 ;;		On entry : 0/0
 23780 ;;		On exit  : 0/0
 23781 ;;		Unchanged: 0/0
 23782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 23783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23787 ;;Total ram usage:        0 bytes
 23788 ;; Hardware stack levels used:    1
 23789 ;; Hardware stack levels required when called:    3
 23790 ;; This function calls:
 23791 ;;		_savePreset
 23792 ;; This function is called by:
 23793 ;;		_isr
 23794 ;;		_updateSwitchTapState
 23795 ;; This function uses a non-reentrant model
 23796 ;;
 23797                           
 23798                           
 23799                           ;psect for function _saveState
 23800  3FC0                     _saveState:	
 23801                           
 23802                           ;state_manager.c: 130: if (isStateInitialized) {
 23803                           
 23804                           ;incstack = 0
 23805                           ; Regs used in _saveState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23806  3FC0  0020               	movlb	0	; select bank0
 23807  3FC1  085D               	movf	_isStateInitialized,w
 23808  3FC2  045E               	iorwf	_isStateInitialized+1,w
 23809  3FC3  1903               	btfsc	3,2
 23810  3FC4  0008               	return
 23811                           
 23812                           ;state_manager.c: 132: savePreset(0);
 23813  3FC5  3000               	movlw	0
 23814  3FC6  319C  2469         	fcall	_savePreset
 23815  3FC8  0008               	return
 23816  3FC9                     __end_of_saveState:	
 23817                           
 23818                           	psect	text108
 23819  1C69                     __ptext108:	
 23820 ;; *************** function _savePreset *****************
 23821 ;; Defined at:
 23822 ;;		line 88 in file "state_manager.c"
 23823 ;; Parameters:    Size  Location     Type
 23824 ;;  presetChanne    1    wreg     unsigned char 
 23825 ;; Auto vars:     Size  Location     Type
 23826 ;;  presetChanne    1   17[BANK0 ] unsigned char 
 23827 ;;  presets        30   19[BANK0 ] struct .[3]
 23828 ;;  bankChannel     1   49[BANK0 ] unsigned char 
 23829 ;;  bankID          1   18[BANK0 ] unsigned char 
 23830 ;;  dep             1   16[BANK0 ] unsigned char 
 23831 ;;  symm            1   15[BANK0 ] unsigned char 
 23832 ;;  r               1   14[BANK0 ] unsigned char 
 23833 ;; Return value:  Size  Location     Type
 23834 ;;                  1    wreg      void 
 23835 ;; Registers used:
 23836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23837 ;; Tracked objects:
 23838 ;;		On entry : 0/0
 23839 ;;		On exit  : 0/0
 23840 ;;		Unchanged: 0/0
 23841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 23842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23843 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23844 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23845 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23846 ;;Total ram usage:       40 bytes
 23847 ;; Hardware stack levels used:    1
 23848 ;; Hardware stack levels required when called:    2
 23849 ;; This function calls:
 23850 ;;		_HEF_ByteArrayWrite
 23851 ;;		_SetBitMask
 23852 ;;		i1_HEF_ByteArrayRead
 23853 ;;		i1___awdiv
 23854 ;;		i1___bmul
 23855 ;; This function is called by:
 23856 ;;		_saveState
 23857 ;; This function uses a non-reentrant model
 23858 ;;
 23859                           
 23860                           
 23861                           ;psect for function _savePreset
 23862  1C69                     _savePreset:	
 23863                           
 23864                           ;incstack = 0
 23865                           ; Regs used in _savePreset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23866                           ;savePreset@presetChannel stored from wreg
 23867  1C69  0020               	movlb	0	; select bank0
 23868  1C6A  00B1               	movwf	savePreset@presetChannel
 23869                           
 23870                           ;state_manager.c: 94: uint8_t r;
 23871                           ;state_manager.c: 95: PedalStorage presets[3];
 23872                           ;state_manager.c: 97: char bankID = (char) (presetChannel / 3);
 23873  1C6B  3003               	movlw	3
 23874  1C6C  00F0               	movwf	i1___awdiv@divisor
 23875  1C6D  3000               	movlw	0
 23876  1C6E  00F1               	movwf	i1___awdiv@divisor+1
 23877  1C6F  0831               	movf	savePreset@presetChannel,w
 23878  1C70  00AA               	movwf	??_savePreset
 23879  1C71  01AB               	clrf	??_savePreset+1
 23880  1C72  082A               	movf	??_savePreset,w
 23881  1C73  00F2               	movwf	i1___awdiv@dividend
 23882  1C74  082B               	movf	??_savePreset+1,w
 23883  1C75  00F3               	movwf	i1___awdiv@dividend+1
 23884  1C76  31AB  234B  319C   	fcall	i1___awdiv
 23885  1C79  0870               	movf	?i1___awdiv,w
 23886  1C7A  0020               	movlb	0	; select bank0
 23887  1C7B  00AC               	movwf	??_savePreset+2
 23888  1C7C  082C               	movf	??_savePreset+2,w
 23889  1C7D  00B2               	movwf	savePreset@bankID
 23890                           
 23891                           ;state_manager.c: 98: char bankChannel = (char)(presetChannel - (bankID * 3));
 23892  1C7E  3003               	movlw	3
 23893  1C7F  00AA               	movwf	??_savePreset
 23894  1C80  082A               	movf	??_savePreset,w
 23895  1C81  00F0               	movwf	i1___bmul@multiplicand
 23896  1C82  0832               	movf	savePreset@bankID,w
 23897  1C83  31B0  20DD  319C   	fcall	i1___bmul
 23898  1C86  3AFF               	xorlw	255
 23899  1C87  3E01               	addlw	1
 23900  1C88  0020               	movlb	0	; select bank0
 23901  1C89  0731               	addwf	savePreset@presetChannel,w
 23902  1C8A  00AB               	movwf	??_savePreset+1
 23903  1C8B  082B               	movf	??_savePreset+1,w
 23904  1C8C  00D1               	movwf	savePreset@bankChannel
 23905                           
 23906                           ;state_manager.c: 100: r = HEF_ByteArrayRead((void *) presets, bankID, sizeof (presets))
      +                          ;
 23907  1C8D  3033               	movlw	low savePreset@presets
 23908  1C8E  00F3               	movwf	i1HEF_ByteArrayRead@bArray
 23909  1C8F  3000               	movlw	high savePreset@presets
 23910  1C90  00F4               	movwf	i1HEF_ByteArrayRead@bArray+1
 23911  1C91  0832               	movf	savePreset@bankID,w
 23912  1C92  00AA               	movwf	??_savePreset
 23913  1C93  082A               	movf	??_savePreset,w
 23914  1C94  00F5               	movwf	i1HEF_ByteArrayRead@block
 23915  1C95  301E               	movlw	30
 23916  1C96  00AB               	movwf	??_savePreset+1
 23917  1C97  082B               	movf	??_savePreset+1,w
 23918  1C98  00F6               	movwf	i1HEF_ByteArrayRead@count
 23919  1C99  31B5  2577  319C   	fcall	i1_HEF_ByteArrayRead
 23920  1C9C  0020               	movlb	0	; select bank0
 23921  1C9D  00AC               	movwf	??_savePreset+2
 23922  1C9E  082C               	movf	??_savePreset+2,w
 23923  1C9F  00AE               	movwf	savePreset@r
 23924                           
 23925                           ;state_manager.c: 103: presets[bankChannel].modeBypassSubdivWave = SetBitMask(0, pedalSt
      +                          ate.pedalMode, 0, 4);
 23926  1CA0  300A               	movlw	10
 23927  1CA1  00AA               	movwf	??_savePreset
 23928  1CA2  082A               	movf	??_savePreset,w
 23929  1CA3  00F0               	movwf	i1___bmul@multiplicand
 23930  1CA4  0851               	movf	savePreset@bankChannel,w
 23931  1CA5  31B0  20DD  319C   	fcall	i1___bmul
 23932  1CA8  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 23933  1CA9  0086               	movwf	6
 23934  1CAA  0187               	clrf	7
 23935  1CAB  3000               	movlw	0
 23936  1CAC  00F6               	movwf	SetBitMask@storage
 23937  1CAD  00F7               	movwf	SetBitMask@storage+1
 23938  1CAE  0025               	movlb	5	; select bank5
 23939  1CAF  0842               	movf	(_pedalState^(0+640)+14),w
 23940  1CB0  0020               	movlb	0	; select bank0
 23941  1CB1  00AB               	movwf	??_savePreset+1
 23942  1CB2  01AC               	clrf	??_savePreset+2
 23943  1CB3  082B               	movf	??_savePreset+1,w
 23944  1CB4  00F8               	movwf	SetBitMask@value
 23945  1CB5  082C               	movf	??_savePreset+2,w
 23946  1CB6  00F9               	movwf	SetBitMask@value+1
 23947  1CB7  3000               	movlw	0
 23948  1CB8  00FA               	movwf	SetBitMask@index
 23949  1CB9  00FB               	movwf	SetBitMask@index+1
 23950  1CBA  3004               	movlw	4
 23951  1CBB  00FC               	movwf	SetBitMask@shift
 23952  1CBC  3000               	movlw	0
 23953  1CBD  00FD               	movwf	SetBitMask@shift+1
 23954  1CBE  31AA  22AD  319C   	fcall	_SetBitMask
 23955  1CC1  0876               	movf	?_SetBitMask,w
 23956  1CC2  3FC0               	movwi [0]fsr1
 23957  1CC3  0877               	movf	?_SetBitMask+1,w
 23958  1CC4  3FC1               	movwi [1]fsr1
 23959                           
 23960                           ;state_manager.c: 104: presets[bankChannel].modeBypassSubdivWave = SetBitMask(presets[ba
      +                          nkChannel].modeBypassSubdivWave, pedalState.bypass, 1, 4);
 23961  1CC5  300A               	movlw	10
 23962  1CC6  0020               	movlb	0	; select bank0
 23963  1CC7  00AA               	movwf	??_savePreset
 23964  1CC8  082A               	movf	??_savePreset,w
 23965  1CC9  00F0               	movwf	i1___bmul@multiplicand
 23966  1CCA  0851               	movf	savePreset@bankChannel,w
 23967  1CCB  31B0  20DD  319C   	fcall	i1___bmul
 23968  1CCE  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 23969  1CCF  0086               	movwf	6
 23970  1CD0  0187               	clrf	7
 23971  1CD1  300A               	movlw	10
 23972  1CD2  0020               	movlb	0	; select bank0
 23973  1CD3  00AB               	movwf	??_savePreset+1
 23974  1CD4  082B               	movf	??_savePreset+1,w
 23975  1CD5  00F0               	movwf	i1___bmul@multiplicand
 23976  1CD6  0851               	movf	savePreset@bankChannel,w
 23977  1CD7  31B0  20DD  319C   	fcall	i1___bmul
 23978  1CDA  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 23979  1CDB  0084               	movwf	4
 23980  1CDC  0185               	clrf	5
 23981  1CDD  3F00               	moviw [0]fsr0
 23982  1CDE  00F6               	movwf	SetBitMask@storage
 23983  1CDF  3F01               	moviw [1]fsr0
 23984  1CE0  00F7               	movwf	SetBitMask@storage+1
 23985  1CE1  0025               	movlb	5	; select bank5
 23986  1CE2  0837               	movf	(_pedalState^(0+640)+3),w
 23987  1CE3  0020               	movlb	0	; select bank0
 23988  1CE4  00AC               	movwf	??_savePreset+2
 23989  1CE5  01AD               	clrf	??_savePreset+3
 23990  1CE6  082C               	movf	??_savePreset+2,w
 23991  1CE7  00F8               	movwf	SetBitMask@value
 23992  1CE8  082D               	movf	??_savePreset+3,w
 23993  1CE9  00F9               	movwf	SetBitMask@value+1
 23994  1CEA  3001               	movlw	1
 23995  1CEB  00FA               	movwf	SetBitMask@index
 23996  1CEC  3000               	movlw	0
 23997  1CED  00FB               	movwf	SetBitMask@index+1
 23998  1CEE  3004               	movlw	4
 23999  1CEF  00FC               	movwf	SetBitMask@shift
 24000  1CF0  3000               	movlw	0
 24001  1CF1  00FD               	movwf	SetBitMask@shift+1
 24002  1CF2  31AA  22AD  319C   	fcall	_SetBitMask
 24003  1CF5  0876               	movf	?_SetBitMask,w
 24004  1CF6  3FC0               	movwi [0]fsr1
 24005  1CF7  0877               	movf	?_SetBitMask+1,w
 24006  1CF8  3FC1               	movwi [1]fsr1
 24007                           
 24008                           ;state_manager.c: 105: presets[bankChannel].modeBypassSubdivWave = SetBitMask(presets[ba
      +                          nkChannel].modeBypassSubdivWave, pedalState.subdivision, 2, 4);
 24009  1CF9  300A               	movlw	10
 24010  1CFA  0020               	movlb	0	; select bank0
 24011  1CFB  00AA               	movwf	??_savePreset
 24012  1CFC  082A               	movf	??_savePreset,w
 24013  1CFD  00F0               	movwf	i1___bmul@multiplicand
 24014  1CFE  0851               	movf	savePreset@bankChannel,w
 24015  1CFF  31B0  20DD  319C   	fcall	i1___bmul
 24016  1D02  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24017  1D03  0086               	movwf	6
 24018  1D04  0187               	clrf	7
 24019  1D05  300A               	movlw	10
 24020  1D06  0020               	movlb	0	; select bank0
 24021  1D07  00AB               	movwf	??_savePreset+1
 24022  1D08  082B               	movf	??_savePreset+1,w
 24023  1D09  00F0               	movwf	i1___bmul@multiplicand
 24024  1D0A  0851               	movf	savePreset@bankChannel,w
 24025  1D0B  31B0  20DD  319C   	fcall	i1___bmul
 24026  1D0E  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24027  1D0F  0084               	movwf	4
 24028  1D10  0185               	clrf	5
 24029  1D11  3F00               	moviw [0]fsr0
 24030  1D12  00F6               	movwf	SetBitMask@storage
 24031  1D13  3F01               	moviw [1]fsr0
 24032  1D14  00F7               	movwf	SetBitMask@storage+1
 24033  1D15  0025               	movlb	5	; select bank5
 24034  1D16  0838               	movf	(_pedalState^(0+640)+4),w
 24035  1D17  0020               	movlb	0	; select bank0
 24036  1D18  00AC               	movwf	??_savePreset+2
 24037  1D19  01AD               	clrf	??_savePreset+3
 24038  1D1A  082C               	movf	??_savePreset+2,w
 24039  1D1B  00F8               	movwf	SetBitMask@value
 24040  1D1C  082D               	movf	??_savePreset+3,w
 24041  1D1D  00F9               	movwf	SetBitMask@value+1
 24042  1D1E  3002               	movlw	2
 24043  1D1F  00FA               	movwf	SetBitMask@index
 24044  1D20  3000               	movlw	0
 24045  1D21  00FB               	movwf	SetBitMask@index+1
 24046  1D22  3004               	movlw	4
 24047  1D23  00FC               	movwf	SetBitMask@shift
 24048  1D24  3000               	movlw	0
 24049  1D25  00FD               	movwf	SetBitMask@shift+1
 24050  1D26  31AA  22AD  319C   	fcall	_SetBitMask
 24051  1D29  0876               	movf	?_SetBitMask,w
 24052  1D2A  3FC0               	movwi [0]fsr1
 24053  1D2B  0877               	movf	?_SetBitMask+1,w
 24054  1D2C  3FC1               	movwi [1]fsr1
 24055                           
 24056                           ;state_manager.c: 106: presets[bankChannel].modeBypassSubdivWave = SetBitMask(presets[ba
      +                          nkChannel].modeBypassSubdivWave, pedalState.waveForm, 3, 4);
 24057  1D2D  300A               	movlw	10
 24058  1D2E  0020               	movlb	0	; select bank0
 24059  1D2F  00AA               	movwf	??_savePreset
 24060  1D30  082A               	movf	??_savePreset,w
 24061  1D31  00F0               	movwf	i1___bmul@multiplicand
 24062  1D32  0851               	movf	savePreset@bankChannel,w
 24063  1D33  31B0  20DD  319C   	fcall	i1___bmul
 24064  1D36  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24065  1D37  0086               	movwf	6
 24066  1D38  0187               	clrf	7
 24067  1D39  300A               	movlw	10
 24068  1D3A  0020               	movlb	0	; select bank0
 24069  1D3B  00AB               	movwf	??_savePreset+1
 24070  1D3C  082B               	movf	??_savePreset+1,w
 24071  1D3D  00F0               	movwf	i1___bmul@multiplicand
 24072  1D3E  0851               	movf	savePreset@bankChannel,w
 24073  1D3F  31B0  20DD  319C   	fcall	i1___bmul
 24074  1D42  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24075  1D43  0084               	movwf	4
 24076  1D44  0185               	clrf	5
 24077  1D45  3F00               	moviw [0]fsr0
 24078  1D46  00F6               	movwf	SetBitMask@storage
 24079  1D47  3F01               	moviw [1]fsr0
 24080  1D48  00F7               	movwf	SetBitMask@storage+1
 24081  1D49  0025               	movlb	5	; select bank5
 24082  1D4A  0839               	movf	(_pedalState^(0+640)+5),w
 24083  1D4B  0020               	movlb	0	; select bank0
 24084  1D4C  00AC               	movwf	??_savePreset+2
 24085  1D4D  01AD               	clrf	??_savePreset+3
 24086  1D4E  082C               	movf	??_savePreset+2,w
 24087  1D4F  00F8               	movwf	SetBitMask@value
 24088  1D50  082D               	movf	??_savePreset+3,w
 24089  1D51  00F9               	movwf	SetBitMask@value+1
 24090  1D52  3003               	movlw	3
 24091  1D53  00FA               	movwf	SetBitMask@index
 24092  1D54  3000               	movlw	0
 24093  1D55  00FB               	movwf	SetBitMask@index+1
 24094  1D56  3004               	movlw	4
 24095  1D57  00FC               	movwf	SetBitMask@shift
 24096  1D58  3000               	movlw	0
 24097  1D59  00FD               	movwf	SetBitMask@shift+1
 24098  1D5A  31AA  22AD  319C   	fcall	_SetBitMask
 24099  1D5D  0876               	movf	?_SetBitMask,w
 24100  1D5E  3FC0               	movwi [0]fsr1
 24101  1D5F  0877               	movf	?_SetBitMask+1,w
 24102  1D60  3FC1               	movwi [1]fsr1
 24103                           
 24104                           ;state_manager.c: 108: presets[bankChannel].baseTapTime = pedalState.baseTapTime;
 24105  1D61  300A               	movlw	10
 24106  1D62  0020               	movlb	0	; select bank0
 24107  1D63  00AA               	movwf	??_savePreset
 24108  1D64  082A               	movf	??_savePreset,w
 24109  1D65  00F0               	movwf	i1___bmul@multiplicand
 24110  1D66  0851               	movf	savePreset@bankChannel,w
 24111  1D67  31B0  20DD  319C   	fcall	i1___bmul
 24112  1D6A  3E02               	addlw	2
 24113  1D6B  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24114  1D6C  0086               	movwf	6
 24115  1D6D  0187               	clrf	7
 24116  1D6E  0025               	movlb	5	; select bank5
 24117  1D6F  0835               	movf	(_pedalState^(0+640)+1),w
 24118  1D70  3FC0               	movwi [0]fsr1
 24119  1D71  0836               	movf	((_pedalState+1)^(0+640)+1),w
 24120  1D72  3FC1               	movwi [1]fsr1
 24121                           
 24122                           ;state_manager.c: 110: presets[bankChannel].volume = pedalState.volume;
 24123  1D73  300A               	movlw	10
 24124  1D74  0020               	movlb	0	; select bank0
 24125  1D75  00AA               	movwf	??_savePreset
 24126  1D76  082A               	movf	??_savePreset,w
 24127  1D77  00F0               	movwf	i1___bmul@multiplicand
 24128  1D78  0851               	movf	savePreset@bankChannel,w
 24129  1D79  31B0  20DD  319C   	fcall	i1___bmul
 24130  1D7C  3E04               	addlw	4
 24131  1D7D  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24132  1D7E  0086               	movwf	6
 24133  1D7F  0187               	clrf	7
 24134  1D80  0025               	movlb	5	; select bank5
 24135  1D81  083A               	movf	(_pedalState^(0+640)+6),w
 24136  1D82  3FC0               	movwi [0]fsr1
 24137  1D83  083B               	movf	((_pedalState+1)^(0+640)+6),w
 24138  1D84  3FC1               	movwi [1]fsr1
 24139                           
 24140                           ;state_manager.c: 111: presets[bankChannel].frequency = pedalState.frequency;
 24141  1D85  300A               	movlw	10
 24142  1D86  0020               	movlb	0	; select bank0
 24143  1D87  00AA               	movwf	??_savePreset
 24144  1D88  082A               	movf	??_savePreset,w
 24145  1D89  00F0               	movwf	i1___bmul@multiplicand
 24146  1D8A  0851               	movf	savePreset@bankChannel,w
 24147  1D8B  31B0  20DD  319C   	fcall	i1___bmul
 24148  1D8E  3E06               	addlw	6
 24149  1D8F  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24150  1D90  0086               	movwf	6
 24151  1D91  0187               	clrf	7
 24152  1D92  0025               	movlb	5	; select bank5
 24153  1D93  083C               	movf	(_pedalState^(0+640)+8),w
 24154  1D94  3FC0               	movwi [0]fsr1
 24155  1D95  083D               	movf	((_pedalState+1)^(0+640)+8),w
 24156  1D96  3FC1               	movwi [1]fsr1
 24157                           
 24158                           ;state_manager.c: 119: unsigned char symm = (unsigned char)(pedalState.symmetry/4);
 24159  1D97  300A               	movlw	10
 24160  1D98  3EB4               	addlw	(low (_pedalState| (0+512)))& (0+255)
 24161  1D99  0086               	movwf	6
 24162  1D9A  3002               	movlw	2	; select bank5/6
 24163  1D9B  0087               	movwf	7
 24164  1D9C  3F40               	moviw [0]fsr1
 24165  1D9D  0020               	movlb	0	; select bank0
 24166  1D9E  00AA               	movwf	??_savePreset
 24167  1D9F  3F41               	moviw [1]fsr1
 24168  1DA0  00AB               	movwf	??_savePreset+1
 24169  1DA1  36AB               	lsrf	??_savePreset+1,f
 24170  1DA2  0CAA               	rrf	??_savePreset,f
 24171  1DA3  36AB               	lsrf	??_savePreset+1,f
 24172  1DA4  0CAA               	rrf	??_savePreset,f
 24173  1DA5  082A               	movf	??_savePreset,w
 24174  1DA6  00AC               	movwf	??_savePreset+2
 24175  1DA7  082C               	movf	??_savePreset+2,w
 24176  1DA8  00AF               	movwf	savePreset@symm
 24177                           
 24178                           ;state_manager.c: 120: unsigned char dep = (unsigned char)(pedalState.depth/4);
 24179  1DA9  300C               	movlw	12
 24180  1DAA  3EB4               	addlw	(low (_pedalState| (0+512)))& (0+255)
 24181  1DAB  0086               	movwf	6
 24182  1DAC  3002               	movlw	2	; select bank5/6
 24183  1DAD  0087               	movwf	7
 24184  1DAE  3F40               	moviw [0]fsr1
 24185  1DAF  00AA               	movwf	??_savePreset
 24186  1DB0  3F41               	moviw [1]fsr1
 24187  1DB1  00AB               	movwf	??_savePreset+1
 24188  1DB2  36AB               	lsrf	??_savePreset+1,f
 24189  1DB3  0CAA               	rrf	??_savePreset,f
 24190  1DB4  36AB               	lsrf	??_savePreset+1,f
 24191  1DB5  0CAA               	rrf	??_savePreset,f
 24192  1DB6  082A               	movf	??_savePreset,w
 24193  1DB7  00AC               	movwf	??_savePreset+2
 24194  1DB8  082C               	movf	??_savePreset+2,w
 24195  1DB9  00B0               	movwf	savePreset@dep
 24196                           
 24197                           ;state_manager.c: 121: presets[bankChannel].symmetry = symm;
 24198  1DBA  082F               	movf	savePreset@symm,w
 24199  1DBB  00AA               	movwf	??_savePreset
 24200  1DBC  300A               	movlw	10
 24201  1DBD  00AB               	movwf	??_savePreset+1
 24202  1DBE  082B               	movf	??_savePreset+1,w
 24203  1DBF  00F0               	movwf	i1___bmul@multiplicand
 24204  1DC0  0851               	movf	savePreset@bankChannel,w
 24205  1DC1  31B0  20DD  319C   	fcall	i1___bmul
 24206  1DC4  3E08               	addlw	8
 24207  1DC5  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24208  1DC6  0086               	movwf	6
 24209  1DC7  0187               	clrf	7
 24210  1DC8  0020               	movlb	0	; select bank0
 24211  1DC9  082A               	movf	??_savePreset,w
 24212  1DCA  0081               	movwf	1
 24213                           
 24214                           ;state_manager.c: 122: presets[bankChannel].depth = dep;
 24215  1DCB  0830               	movf	savePreset@dep,w
 24216  1DCC  00AA               	movwf	??_savePreset
 24217  1DCD  300A               	movlw	10
 24218  1DCE  00AB               	movwf	??_savePreset+1
 24219  1DCF  082B               	movf	??_savePreset+1,w
 24220  1DD0  00F0               	movwf	i1___bmul@multiplicand
 24221  1DD1  0851               	movf	savePreset@bankChannel,w
 24222  1DD2  31B0  20DD  319C   	fcall	i1___bmul
 24223  1DD5  3E09               	addlw	9
 24224  1DD6  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24225  1DD7  0086               	movwf	6
 24226  1DD8  0187               	clrf	7
 24227  1DD9  0020               	movlb	0	; select bank0
 24228  1DDA  082A               	movf	??_savePreset,w
 24229  1DDB  0081               	movwf	1
 24230                           
 24231                           ;state_manager.c: 124: HEF_ByteArrayWrite(bankID, (void *) &presets, sizeof (presets));
 24232  1DDC  3033               	movlw	(low (savePreset@presets| 0))& (0+255)
 24233  1DDD  00AA               	movwf	??_savePreset
 24234  1DDE  082A               	movf	??_savePreset,w
 24235  1DDF  00F3               	movwf	HEF_ByteArrayWrite@byteArray
 24236  1DE0  301E               	movlw	30
 24237  1DE1  00AB               	movwf	??_savePreset+1
 24238  1DE2  082B               	movf	??_savePreset+1,w
 24239  1DE3  00F4               	movwf	HEF_ByteArrayWrite@count
 24240  1DE4  0832               	movf	savePreset@bankID,w
 24241  1DE5  31AB  239C         	fcall	_HEF_ByteArrayWrite
 24242  1DE7  0008               	return
 24243  1DE8                     __end_of_savePreset:	
 24244                           
 24245                           	psect	text109
 24246  30DD                     __ptext109:	
 24247 ;; *************** function i1___bmul *****************
 24248 ;; Defined at:
 24249 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 24250 ;; Parameters:    Size  Location     Type
 24251 ;;  multiplier      1    wreg     unsigned char 
 24252 ;;  multiplicand    1    0[COMMON] unsigned char 
 24253 ;; Auto vars:     Size  Location     Type
 24254 ;;  multiplier      1    3[COMMON] unsigned char 
 24255 ;;  __bmul          1    2[COMMON] unsigned char 
 24256 ;; Return value:  Size  Location     Type
 24257 ;;                  1    wreg      unsigned char 
 24258 ;; Registers used:
 24259 ;;		wreg, status,2, status,0
 24260 ;; Tracked objects:
 24261 ;;		On entry : 0/0
 24262 ;;		On exit  : 0/0
 24263 ;;		Unchanged: 0/0
 24264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24265 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24266 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24268 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24269 ;;Total ram usage:        4 bytes
 24270 ;; Hardware stack levels used:    1
 24271 ;; This function calls:
 24272 ;;		Nothing
 24273 ;; This function is called by:
 24274 ;;		_savePreset
 24275 ;; This function uses a non-reentrant model
 24276 ;;
 24277                           
 24278                           
 24279                           ;psect for function i1___bmul
 24280  30DD                     i1___bmul:	
 24281                           
 24282                           ;incstack = 0
 24283                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 24284                           ;i1___bmul@multiplier stored from wreg
 24285  30DD  00F3               	movwf	i1___bmul@multiplier
 24286  30DE  01F2               	clrf	i1___bmul@product
 24287  30DF                     i1l7285:	
 24288  30DF  1C73               	btfss	i1___bmul@multiplier,0
 24289  30E0  28E5               	goto	i1l7289
 24290  30E1  0870               	movf	i1___bmul@multiplicand,w
 24291  30E2  00F1               	movwf	??i1___bmul
 24292  30E3  0871               	movf	??i1___bmul,w
 24293  30E4  07F2               	addwf	i1___bmul@product,f
 24294  30E5                     i1l7289:	
 24295  30E5  1003               	clrc
 24296  30E6  0DF0               	rlf	i1___bmul@multiplicand,f
 24297  30E7  1003               	clrc
 24298  30E8  0CF3               	rrf	i1___bmul@multiplier,f
 24299  30E9  0873               	movf	i1___bmul@multiplier,w
 24300  30EA  1D03               	btfss	3,2
 24301  30EB  28DF               	goto	i1l7285
 24302  30EC  0872               	movf	i1___bmul@product,w
 24303  30ED  0008               	return
 24304  30EE                     __end_ofi1___bmul:	
 24305                           
 24306                           	psect	text110
 24307  2B4B                     __ptext110:	
 24308 ;; *************** function i1___awdiv *****************
 24309 ;; Defined at:
 24310 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 24311 ;; Parameters:    Size  Location     Type
 24312 ;;  divisor         2    0[COMMON] int 
 24313 ;;  dividend        2    2[COMMON] int 
 24314 ;; Auto vars:     Size  Location     Type
 24315 ;;  __awdiv         2    7[COMMON] int 
 24316 ;;  __awdiv         1    6[COMMON] unsigned char 
 24317 ;;  __awdiv         1    5[COMMON] unsigned char 
 24318 ;; Return value:  Size  Location     Type
 24319 ;;                  2    0[COMMON] int 
 24320 ;; Registers used:
 24321 ;;		wreg, status,2, status,0
 24322 ;; Tracked objects:
 24323 ;;		On entry : 0/0
 24324 ;;		On exit  : 0/0
 24325 ;;		Unchanged: 0/0
 24326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24327 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24328 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24330 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24331 ;;Total ram usage:        9 bytes
 24332 ;; Hardware stack levels used:    1
 24333 ;; This function calls:
 24334 ;;		Nothing
 24335 ;; This function is called by:
 24336 ;;		_isr
 24337 ;;		_savePreset
 24338 ;; This function uses a non-reentrant model
 24339 ;;
 24340                           
 24341                           
 24342                           ;psect for function i1___awdiv
 24343  2B4B                     i1___awdiv:	
 24344                           
 24345                           ;incstack = 0
 24346                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 24347  2B4B  01F6               	clrf	i1___awdiv@sign
 24348  2B4C  1FF1               	btfss	i1___awdiv@divisor+1,7
 24349  2B4D  2B55               	goto	i1l7305
 24350  2B4E  09F0               	comf	i1___awdiv@divisor,f
 24351  2B4F  09F1               	comf	i1___awdiv@divisor+1,f
 24352  2B50  0AF0               	incf	i1___awdiv@divisor,f
 24353  2B51  1903               	skipnz
 24354  2B52  0AF1               	incf	i1___awdiv@divisor+1,f
 24355  2B53  01F6               	clrf	i1___awdiv@sign
 24356  2B54  0AF6               	incf	i1___awdiv@sign,f
 24357  2B55                     i1l7305:	
 24358  2B55  1FF3               	btfss	i1___awdiv@dividend+1,7
 24359  2B56  2B60               	goto	i1l7311
 24360  2B57  09F2               	comf	i1___awdiv@dividend,f
 24361  2B58  09F3               	comf	i1___awdiv@dividend+1,f
 24362  2B59  0AF2               	incf	i1___awdiv@dividend,f
 24363  2B5A  1903               	skipnz
 24364  2B5B  0AF3               	incf	i1___awdiv@dividend+1,f
 24365  2B5C  3001               	movlw	1
 24366  2B5D  00F4               	movwf	??i1___awdiv
 24367  2B5E  0874               	movf	??i1___awdiv,w
 24368  2B5F  06F6               	xorwf	i1___awdiv@sign,f
 24369  2B60                     i1l7311:	
 24370  2B60  01F7               	clrf	i1___awdiv@quotient
 24371  2B61  01F8               	clrf	i1___awdiv@quotient+1
 24372  2B62  0870               	movf	i1___awdiv@divisor,w
 24373  2B63  0471               	iorwf	i1___awdiv@divisor+1,w
 24374  2B64  1903               	btfsc	3,2
 24375  2B65  2B8F               	goto	i1l7333
 24376  2B66  01F5               	clrf	i1___awdiv@counter
 24377  2B67  0AF5               	incf	i1___awdiv@counter,f
 24378  2B68                     i1l7321:	
 24379  2B68  1BF1               	btfsc	i1___awdiv@divisor+1,7
 24380  2B69  2B74               	goto	i1l7323
 24381  2B6A  3001               	movlw	1
 24382  2B6B                     u666_25:	
 24383  2B6B  35F0               	lslf	i1___awdiv@divisor,f
 24384  2B6C  0DF1               	rlf	i1___awdiv@divisor+1,f
 24385  2B6D  0B89               	decfsz	9,f
 24386  2B6E  2B6B               	goto	u666_25
 24387  2B6F  3001               	movlw	1
 24388  2B70  00F4               	movwf	??i1___awdiv
 24389  2B71  0874               	movf	??i1___awdiv,w
 24390  2B72  07F5               	addwf	i1___awdiv@counter,f
 24391  2B73  2B68               	goto	i1l7321
 24392  2B74                     i1l7323:	
 24393  2B74  3001               	movlw	1
 24394  2B75                     u668_25:	
 24395  2B75  35F7               	lslf	i1___awdiv@quotient,f
 24396  2B76  0DF8               	rlf	i1___awdiv@quotient+1,f
 24397  2B77  0B89               	decfsz	9,f
 24398  2B78  2B75               	goto	u668_25
 24399  2B79  0871               	movf	i1___awdiv@divisor+1,w
 24400  2B7A  0273               	subwf	i1___awdiv@dividend+1,w
 24401  2B7B  1D03               	skipz
 24402  2B7C  2B7F               	goto	u669_25
 24403  2B7D  0870               	movf	i1___awdiv@divisor,w
 24404  2B7E  0272               	subwf	i1___awdiv@dividend,w
 24405  2B7F                     u669_25:	
 24406  2B7F  1C03               	skipc
 24407  2B80  2B86               	goto	i1l7329
 24408  2B81  0870               	movf	i1___awdiv@divisor,w
 24409  2B82  02F2               	subwf	i1___awdiv@dividend,f
 24410  2B83  0871               	movf	i1___awdiv@divisor+1,w
 24411  2B84  3BF3               	subwfb	i1___awdiv@dividend+1,f
 24412  2B85  1477               	bsf	i1___awdiv@quotient,0
 24413  2B86                     i1l7329:	
 24414  2B86  3001               	movlw	1
 24415  2B87                     u670_25:	
 24416  2B87  36F1               	lsrf	i1___awdiv@divisor+1,f
 24417  2B88  0CF0               	rrf	i1___awdiv@divisor,f
 24418  2B89  0B89               	decfsz	9,f
 24419  2B8A  2B87               	goto	u670_25
 24420  2B8B  3001               	movlw	1
 24421  2B8C  02F5               	subwf	i1___awdiv@counter,f
 24422  2B8D  1D03               	btfss	3,2
 24423  2B8E  2B74               	goto	i1l7323
 24424  2B8F                     i1l7333:	
 24425  2B8F  0876               	movf	i1___awdiv@sign,w
 24426  2B90  1903               	btfsc	3,2
 24427  2B91  2B97               	goto	i1l7337
 24428  2B92  09F7               	comf	i1___awdiv@quotient,f
 24429  2B93  09F8               	comf	i1___awdiv@quotient+1,f
 24430  2B94  0AF7               	incf	i1___awdiv@quotient,f
 24431  2B95  1903               	skipnz
 24432  2B96  0AF8               	incf	i1___awdiv@quotient+1,f
 24433  2B97                     i1l7337:	
 24434  2B97  0878               	movf	i1___awdiv@quotient+1,w
 24435  2B98  00F1               	movwf	?i1___awdiv+1
 24436  2B99  0877               	movf	i1___awdiv@quotient,w
 24437  2B9A  00F0               	movwf	?i1___awdiv
 24438  2B9B  0008               	return
 24439  2B9C                     __end_ofi1___awdiv:	
 24440                           
 24441                           	psect	text111
 24442  3577                     __ptext111:	
 24443 ;; *************** function i1_HEF_ByteArrayRead *****************
 24444 ;; Defined at:
 24445 ;;		line 53 in file "HEF.c"
 24446 ;; Parameters:    Size  Location     Type
 24447 ;;  bArray          2    3[COMMON] PTR unsigned char 
 24448 ;;		 -> getPreset@presets(30), savePreset@presets(30), 
 24449 ;;  block           1    5[COMMON] unsigned char 
 24450 ;;  count           1    6[COMMON] unsigned char 
 24451 ;; Auto vars:     Size  Location     Type
 24452 ;;  HEF_ByteArra    2    9[COMMON] unsigned int 
 24453 ;; Return value:  Size  Location     Type
 24454 ;;                  1    wreg      char 
 24455 ;; Registers used:
 24456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24457 ;; Tracked objects:
 24458 ;;		On entry : 0/0
 24459 ;;		On exit  : 0/0
 24460 ;;		Unchanged: 0/0
 24461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24462 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24463 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24464 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24465 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24466 ;;Total ram usage:        8 bytes
 24467 ;; Hardware stack levels used:    1
 24468 ;; Hardware stack levels required when called:    1
 24469 ;; This function calls:
 24470 ;;		i1_FLASH_ReadWord
 24471 ;; This function is called by:
 24472 ;;		_savePreset
 24473 ;; This function uses a non-reentrant model
 24474 ;;
 24475                           
 24476                           
 24477                           ;psect for function i1_HEF_ByteArrayRead
 24478  3577                     i1_HEF_ByteArrayRead:	
 24479                           
 24480                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
 24481                           
 24482                           ;incstack = 0
 24483                           ; Regs used in i1_HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24484  3577  0875               	movf	i1HEF_ByteArrayRead@block,w
 24485  3578  00F7               	movwf	??i1_HEF_ByteArrayRead
 24486  3579  01F8               	clrf	??i1_HEF_ByteArrayRead+1
 24487  357A  3005               	movlw	5
 24488  357B                     u657_25:	
 24489  357B  35F7               	lslf	??i1_HEF_ByteArrayRead,f
 24490  357C  0DF8               	rlf	??i1_HEF_ByteArrayRead+1,f
 24491  357D  0B89               	decfsz	9,f
 24492  357E  2D7B               	goto	u657_25
 24493  357F  0877               	movf	??i1_HEF_ByteArrayRead,w
 24494  3580  3E80               	addlw	128
 24495  3581  00F9               	movwf	i1HEF_ByteArrayRead@wordAdd
 24496  3582  303F               	movlw	63
 24497  3583  3D78               	addwfc	??i1_HEF_ByteArrayRead+1,w
 24498  3584  00FA               	movwf	i1HEF_ByteArrayRead@wordAdd+1
 24499                           
 24500                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
 24501  3585  3021               	movlw	33
 24502  3586  0276               	subwf	i1HEF_ByteArrayRead@count,w
 24503  3587  1803               	skipnc
 24504  3588  2D8D               	goto	i1l7265
 24505  3589  3004               	movlw	4
 24506  358A  0275               	subwf	i1HEF_ByteArrayRead@block,w
 24507  358B  1C03               	skipc
 24508  358C  2DA8               	goto	i1l7277
 24509  358D                     i1l7265:	
 24510                           
 24511                           ;HEF.c: 60: return -1;
 24512  358D  30FF               	movlw	255
 24513  358E  0008               	return
 24514  358F                     i1l7269:	
 24515                           ;HEF.c: 63: while ( count > 0)
 24516                           
 24517                           
 24518                           ;HEF.c: 64: {
 24519                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
 24520  358F  087A               	movf	i1HEF_ByteArrayRead@wordAdd+1,w
 24521  3590  00F1               	movwf	i1FLASH_ReadWord@flashAddr+1
 24522  3591  0879               	movf	i1HEF_ByteArrayRead@wordAdd,w
 24523  3592  00F0               	movwf	i1FLASH_ReadWord@flashAddr
 24524  3593  31B1  219B  31B5   	fcall	i1_FLASH_ReadWord
 24525  3596  0870               	movf	?i1_FLASH_ReadWord,w
 24526  3597  00F7               	movwf	??i1_HEF_ByteArrayRead
 24527  3598  0873               	movf	i1HEF_ByteArrayRead@bArray,w
 24528  3599  0086               	movwf	6
 24529  359A  0874               	movf	i1HEF_ByteArrayRead@bArray+1,w
 24530  359B  0087               	movwf	7
 24531  359C  0877               	movf	??i1_HEF_ByteArrayRead,w
 24532  359D  0081               	movwf	1
 24533  359E  3001               	movlw	1
 24534  359F  07F9               	addwf	i1HEF_ByteArrayRead@wordAdd,f
 24535  35A0  3000               	movlw	0
 24536  35A1  3DFA               	addwfc	i1HEF_ByteArrayRead@wordAdd+1,f
 24537  35A2  3001               	movlw	1
 24538  35A3  07F3               	addwf	i1HEF_ByteArrayRead@bArray,f
 24539  35A4  3000               	movlw	0
 24540  35A5  3DF4               	addwfc	i1HEF_ByteArrayRead@bArray+1,f
 24541                           
 24542                           ;HEF.c: 66: count--;
 24543  35A6  3001               	movlw	1
 24544  35A7  02F6               	subwf	i1HEF_ByteArrayRead@count,f
 24545  35A8                     i1l7277:	
 24546  35A8  0876               	movf	i1HEF_ByteArrayRead@count,w
 24547  35A9  1D03               	btfss	3,2
 24548  35AA  2D8F               	goto	i1l7269
 24549                           
 24550                           ;HEF.c: 67: }
 24551                           ;HEF.c: 70: return 0;
 24552  35AB  3000               	movlw	0
 24553  35AC  0008               	return
 24554  35AD                     __end_ofi1_HEF_ByteArrayRead:	
 24555                           
 24556                           	psect	text112
 24557  319B                     __ptext112:	
 24558 ;; *************** function i1_FLASH_ReadWord *****************
 24559 ;; Defined at:
 24560 ;;		line 58 in file "memory.c"
 24561 ;; Parameters:    Size  Location     Type
 24562 ;;  flashAddr       2    0[COMMON] unsigned int 
 24563 ;; Auto vars:     Size  Location     Type
 24564 ;;  FLASH_ReadWo    1    2[COMMON] unsigned char 
 24565 ;; Return value:  Size  Location     Type
 24566 ;;                  2    0[COMMON] unsigned int 
 24567 ;; Registers used:
 24568 ;;		wreg, status,2, status,0
 24569 ;; Tracked objects:
 24570 ;;		On entry : 0/0
 24571 ;;		On exit  : 0/0
 24572 ;;		Unchanged: 0/0
 24573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24577 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24578 ;;Total ram usage:        3 bytes
 24579 ;; Hardware stack levels used:    1
 24580 ;; This function calls:
 24581 ;;		Nothing
 24582 ;; This function is called by:
 24583 ;;		i1_HEF_ByteArrayRead
 24584 ;; This function uses a non-reentrant model
 24585 ;;
 24586                           
 24587                           
 24588                           ;psect for function i1_FLASH_ReadWord
 24589  319B                     i1_FLASH_ReadWord:	
 24590                           
 24591                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 24592                           
 24593                           ;incstack = 0
 24594                           ; Regs used in i1_FLASH_ReadWord: [wreg+status,2+status,0]
 24595  319B  3000               	movlw	0
 24596  319C  1B8B               	btfsc	11,7	;volatile
 24597  319D  3001               	movlw	1
 24598  319E  00F2               	movwf	i1FLASH_ReadWord@GIEBitValue
 24599                           
 24600                           ;memory.c: 61: INTCONbits.GIE = 0;
 24601  319F  138B               	bcf	11,7	;volatile
 24602                           
 24603                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 24604  31A0  0870               	movf	i1FLASH_ReadWord@flashAddr,w
 24605  31A1  0023               	movlb	3	; select bank3
 24606  31A2  0091               	movwf	17	;volatile
 24607                           
 24608                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 24609  31A3  0871               	movf	i1FLASH_ReadWord@flashAddr+1,w
 24610  31A4  0092               	movwf	18	;volatile
 24611                           
 24612                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 24613  31A5  1315               	bcf	21,6	;volatile
 24614                           
 24615                           ;memory.c: 66: PMCON1bits.RD = 1;
 24616  31A6  1415               	bsf	21,0	;volatile
 24617                           
 24618                           ;memory.c: 67: __nop();
 24619  31A7  0000               	nop
 24620                           
 24621                           ;memory.c: 68: __nop();
 24622  31A8  0000               	nop
 24623                           
 24624                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 24625  31A9  0C72               	rrf	i1FLASH_ReadWord@GIEBitValue,w
 24626  31AA  1C03               	skipc
 24627  31AB  138B               	bcf	11,7	;volatile
 24628  31AC  1803               	skipnc
 24629  31AD  178B               	bsf	11,7	;volatile
 24630                           
 24631                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 24632  31AE  0023               	movlb	3	; select bank3
 24633  31AF  0814               	movf	20,w	;volatile
 24634  31B0  00F1               	movwf	?i1_FLASH_ReadWord+1
 24635  31B1  0813               	movf	19,w	;volatile
 24636  31B2  00F0               	movwf	?i1_FLASH_ReadWord
 24637  31B3  0008               	return
 24638  31B4                     __end_ofi1_FLASH_ReadWord:	
 24639                           
 24640                           	psect	text113
 24641  2AAD                     __ptext113:	
 24642 ;; *************** function _SetBitMask *****************
 24643 ;; Defined at:
 24644 ;;		line 377 in file "state_manager.c"
 24645 ;; Parameters:    Size  Location     Type
 24646 ;;  storage         2    6[COMMON] int 
 24647 ;;  value           2    8[COMMON] int 
 24648 ;;  index           2   10[COMMON] int 
 24649 ;;  shift           2   12[COMMON] int 
 24650 ;; Auto vars:     Size  Location     Type
 24651 ;;  shiftCount      2    8[BANK0 ] int 
 24652 ;;  mask            2    6[BANK0 ] int 
 24653 ;; Return value:  Size  Location     Type
 24654 ;;                  2    6[COMMON] int 
 24655 ;; Registers used:
 24656 ;;		wreg, status,2, status,0, pclath, cstack
 24657 ;; Tracked objects:
 24658 ;;		On entry : 0/0
 24659 ;;		On exit  : 0/0
 24660 ;;		Unchanged: 0/0
 24661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24662 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24663 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24664 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24665 ;;      Totals:         8      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24666 ;;Total ram usage:       18 bytes
 24667 ;; Hardware stack levels used:    1
 24668 ;; Hardware stack levels required when called:    1
 24669 ;; This function calls:
 24670 ;;		i1___wmul
 24671 ;; This function is called by:
 24672 ;;		_savePreset
 24673 ;; This function uses a non-reentrant model
 24674 ;;
 24675                           
 24676                           
 24677                           ;psect for function _SetBitMask
 24678  2AAD                     _SetBitMask:	
 24679                           
 24680                           ;state_manager.c: 378: int shiftCount = index * shift;
 24681                           
 24682                           ;incstack = 0
 24683                           ; Regs used in _SetBitMask: [wreg+status,2+status,0+pclath+cstack]
 24684  2AAD  087B               	movf	SetBitMask@index+1,w
 24685  2AAE  00F1               	movwf	i1___wmul@multiplier+1
 24686  2AAF  087A               	movf	SetBitMask@index,w
 24687  2AB0  00F0               	movwf	i1___wmul@multiplier
 24688  2AB1  087D               	movf	SetBitMask@shift+1,w
 24689  2AB2  00F3               	movwf	i1___wmul@multiplicand+1
 24690  2AB3  087C               	movf	SetBitMask@shift,w
 24691  2AB4  00F2               	movwf	i1___wmul@multiplicand
 24692  2AB5  31B2  2201  31AA   	fcall	i1___wmul
 24693  2AB8  0871               	movf	?i1___wmul+1,w
 24694  2AB9  0020               	movlb	0	; select bank0
 24695  2ABA  00A9               	movwf	SetBitMask@shiftCount+1
 24696  2ABB  0870               	movf	?i1___wmul,w
 24697  2ABC  00A8               	movwf	SetBitMask@shiftCount
 24698                           
 24699                           ;state_manager.c: 379: int mask = 0x0f << shiftCount;
 24700  2ABD  300F               	movlw	15
 24701  2ABE  00A0               	movwf	??_SetBitMask
 24702  2ABF  3000               	movlw	0
 24703  2AC0  00A1               	movwf	??_SetBitMask+1
 24704  2AC1  0A28               	incf	SetBitMask@shiftCount,w
 24705  2AC2  2AC5               	goto	u638_24
 24706  2AC3                     u638_25:	
 24707  2AC3  35A0               	lslf	??_SetBitMask,f
 24708  2AC4  0DA1               	rlf	??_SetBitMask+1,f
 24709  2AC5                     u638_24:	
 24710  2AC5  0B89               	decfsz	9,f
 24711  2AC6  2AC3               	goto	u638_25
 24712  2AC7  0820               	movf	??_SetBitMask,w
 24713  2AC8  00A6               	movwf	SetBitMask@mask
 24714  2AC9  0821               	movf	??_SetBitMask+1,w
 24715  2ACA  00A7               	movwf	SetBitMask@mask+1
 24716                           
 24717                           ;state_manager.c: 380: if (shift == 8) {
 24718  2ACB  3008               	movlw	8
 24719  2ACC  067C               	xorwf	SetBitMask@shift,w
 24720  2ACD  047D               	iorwf	SetBitMask@shift+1,w
 24721  2ACE  1D03               	btfss	3,2
 24722  2ACF  2ADE               	goto	i1l1410
 24723                           
 24724                           ;state_manager.c: 381: mask = 0xff << shiftCount;
 24725  2AD0  30FF               	movlw	255
 24726  2AD1  00A0               	movwf	??_SetBitMask
 24727  2AD2  3000               	movlw	0
 24728  2AD3  00A1               	movwf	??_SetBitMask+1
 24729  2AD4  0A28               	incf	SetBitMask@shiftCount,w
 24730  2AD5  2AD8               	goto	u640_24
 24731  2AD6                     u640_25:	
 24732  2AD6  35A0               	lslf	??_SetBitMask,f
 24733  2AD7  0DA1               	rlf	??_SetBitMask+1,f
 24734  2AD8                     u640_24:	
 24735  2AD8  0B89               	decfsz	9,f
 24736  2AD9  2AD6               	goto	u640_25
 24737  2ADA  0820               	movf	??_SetBitMask,w
 24738  2ADB  00A6               	movwf	SetBitMask@mask
 24739  2ADC  0821               	movf	??_SetBitMask+1,w
 24740  2ADD  00A7               	movwf	SetBitMask@mask+1
 24741  2ADE                     i1l1410:	
 24742                           
 24743                           ;state_manager.c: 382: }
 24744                           ;state_manager.c: 383: return (storage & ~mask) | (value << shiftCount);
 24745  2ADE  0879               	movf	SetBitMask@value+1,w
 24746  2ADF  00A1               	movwf	??_SetBitMask+1
 24747  2AE0  0878               	movf	SetBitMask@value,w
 24748  2AE1  00A0               	movwf	??_SetBitMask
 24749  2AE2  0A28               	incf	SetBitMask@shiftCount,w
 24750  2AE3  2AE6               	goto	u641_24
 24751  2AE4                     u641_25:	
 24752  2AE4  35A0               	lslf	??_SetBitMask,f
 24753  2AE5  0DA1               	rlf	??_SetBitMask+1,f
 24754  2AE6                     u641_24:	
 24755  2AE6  0B89               	decfsz	9,f
 24756  2AE7  2AE4               	goto	u641_25
 24757  2AE8  0827               	movf	SetBitMask@mask+1,w
 24758  2AE9  00A3               	movwf	??_SetBitMask+3
 24759  2AEA  0826               	movf	SetBitMask@mask,w
 24760  2AEB  00A2               	movwf	??_SetBitMask+2
 24761  2AEC  09A2               	comf	??_SetBitMask+2,f
 24762  2AED  09A3               	comf	??_SetBitMask+3,f
 24763  2AEE  0876               	movf	SetBitMask@storage,w
 24764  2AEF  0522               	andwf	??_SetBitMask+2,w
 24765  2AF0  00A4               	movwf	??_SetBitMask+4
 24766  2AF1  0877               	movf	SetBitMask@storage+1,w
 24767  2AF2  0523               	andwf	??_SetBitMask+3,w
 24768  2AF3  00A5               	movwf	??_SetBitMask+5
 24769  2AF4  0820               	movf	??_SetBitMask,w
 24770  2AF5  0424               	iorwf	??_SetBitMask+4,w
 24771  2AF6  00F6               	movwf	?_SetBitMask
 24772  2AF7  0821               	movf	??_SetBitMask+1,w
 24773  2AF8  0425               	iorwf	??_SetBitMask+5,w
 24774  2AF9  00F7               	movwf	?_SetBitMask+1
 24775  2AFA  0008               	return
 24776  2AFB                     __end_of_SetBitMask:	
 24777                           
 24778                           	psect	text114
 24779  3201                     __ptext114:	
 24780 ;; *************** function i1___wmul *****************
 24781 ;; Defined at:
 24782 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 24783 ;; Parameters:    Size  Location     Type
 24784 ;;  multiplier      2    0[COMMON] unsigned int 
 24785 ;;  multiplicand    2    2[COMMON] unsigned int 
 24786 ;; Auto vars:     Size  Location     Type
 24787 ;;  __wmul          2    4[COMMON] unsigned int 
 24788 ;; Return value:  Size  Location     Type
 24789 ;;                  2    0[COMMON] unsigned int 
 24790 ;; Registers used:
 24791 ;;		wreg, status,2, status,0
 24792 ;; Tracked objects:
 24793 ;;		On entry : 0/0
 24794 ;;		On exit  : 0/0
 24795 ;;		Unchanged: 0/0
 24796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24797 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24800 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24801 ;;Total ram usage:        6 bytes
 24802 ;; Hardware stack levels used:    1
 24803 ;; This function calls:
 24804 ;;		Nothing
 24805 ;; This function is called by:
 24806 ;;		_SetBitMask
 24807 ;; This function uses a non-reentrant model
 24808 ;;
 24809                           
 24810                           
 24811                           ;psect for function i1___wmul
 24812  3201                     i1___wmul:	
 24813                           
 24814                           ;incstack = 0
 24815                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 24816  3201  01F4               	clrf	i1___wmul@product
 24817  3202  01F5               	clrf	i1___wmul@product+1
 24818  3203                     i1l7037:	
 24819  3203  1C70               	btfss	i1___wmul@multiplier,0
 24820  3204  2A09               	goto	i1l2447
 24821  3205  0872               	movf	i1___wmul@multiplicand,w
 24822  3206  07F4               	addwf	i1___wmul@product,f
 24823  3207  0873               	movf	i1___wmul@multiplicand+1,w
 24824  3208  3DF5               	addwfc	i1___wmul@product+1,f
 24825  3209                     i1l2447:	
 24826  3209  3001               	movlw	1
 24827  320A                     u629_25:	
 24828  320A  35F2               	lslf	i1___wmul@multiplicand,f
 24829  320B  0DF3               	rlf	i1___wmul@multiplicand+1,f
 24830  320C  0B89               	decfsz	9,f
 24831  320D  2A0A               	goto	u629_25
 24832  320E  3001               	movlw	1
 24833  320F                     u630_25:	
 24834  320F  36F1               	lsrf	i1___wmul@multiplier+1,f
 24835  3210  0CF0               	rrf	i1___wmul@multiplier,f
 24836  3211  0B89               	decfsz	9,f
 24837  3212  2A0F               	goto	u630_25
 24838  3213  0870               	movf	i1___wmul@multiplier,w
 24839  3214  0471               	iorwf	i1___wmul@multiplier+1,w
 24840  3215  1D03               	btfss	3,2
 24841  3216  2A03               	goto	i1l7037
 24842  3217  0875               	movf	i1___wmul@product+1,w
 24843  3218  00F1               	movwf	?i1___wmul+1
 24844  3219  0874               	movf	i1___wmul@product,w
 24845  321A  00F0               	movwf	?i1___wmul
 24846  321B  0008               	return
 24847  321C                     __end_ofi1___wmul:	
 24848                           
 24849                           	psect	text115
 24850  2B9C                     __ptext115:	
 24851 ;; *************** function _HEF_ByteArrayWrite *****************
 24852 ;; Defined at:
 24853 ;;		line 12 in file "HEF.c"
 24854 ;; Parameters:    Size  Location     Type
 24855 ;;  block           1    wreg     unsigned char 
 24856 ;;  byteArray       1    3[COMMON] PTR unsigned char 
 24857 ;;		 -> savePreset@presets(30), 
 24858 ;;  count           1    4[COMMON] unsigned char 
 24859 ;; Auto vars:     Size  Location     Type
 24860 ;;  block           1    8[COMMON] unsigned char 
 24861 ;;  blockAddr       2    9[COMMON] unsigned int 
 24862 ;;  GIEBitValue     1    7[COMMON] unsigned char 
 24863 ;;  i               1    0        unsigned char 
 24864 ;; Return value:  Size  Location     Type
 24865 ;;                  1    wreg      char 
 24866 ;; Registers used:
 24867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24868 ;; Tracked objects:
 24869 ;;		On entry : 0/0
 24870 ;;		On exit  : 0/0
 24871 ;;		Unchanged: 0/0
 24872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24873 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24874 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24875 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24876 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24877 ;;Total ram usage:        8 bytes
 24878 ;; Hardware stack levels used:    1
 24879 ;; Hardware stack levels required when called:    1
 24880 ;; This function calls:
 24881 ;;		_FLASH_EraseBlock
 24882 ;; This function is called by:
 24883 ;;		_savePreset
 24884 ;; This function uses a non-reentrant model
 24885 ;;
 24886                           
 24887                           
 24888                           ;psect for function _HEF_ByteArrayWrite
 24889  2B9C                     _HEF_ByteArrayWrite:	
 24890                           
 24891                           ;incstack = 0
 24892                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24893                           ;HEF_ByteArrayWrite@block stored from wreg
 24894  2B9C  00F8               	movwf	HEF_ByteArrayWrite@block
 24895                           
 24896                           ;HEF.c: 13: uint16_t blockAddr;
 24897                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
 24898  2B9D  3000               	movlw	0
 24899  2B9E  1B8B               	btfsc	11,7	;volatile
 24900  2B9F  3001               	movlw	1
 24901  2BA0  00F7               	movwf	HEF_ByteArrayWrite@GIEBitValue
 24902                           
 24903                           ;HEF.c: 15: uint8_t i;
 24904                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
 24905  2BA1  3004               	movlw	4
 24906  2BA2  0278               	subwf	HEF_ByteArrayWrite@block,w
 24907  2BA3  1803               	skipnc
 24908  2BA4  0008               	return
 24909  2BA5  3021               	movlw	33
 24910  2BA6  0274               	subwf	HEF_ByteArrayWrite@count,w
 24911  2BA7  1803               	btfsc	3,0
 24912  2BA8  0008               	return
 24913                           
 24914                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
 24915                           
 24916                           ;HEF.c: 18: return -1;
 24917                           ;	Return value of _HEF_ByteArrayWrite is never used
 24918  2BA9  0878               	movf	HEF_ByteArrayWrite@block,w
 24919  2BAA  00F5               	movwf	??_HEF_ByteArrayWrite
 24920  2BAB  01F6               	clrf	??_HEF_ByteArrayWrite+1
 24921  2BAC  3005               	movlw	5
 24922  2BAD                     u644_25:	
 24923  2BAD  35F5               	lslf	??_HEF_ByteArrayWrite,f
 24924  2BAE  0DF6               	rlf	??_HEF_ByteArrayWrite+1,f
 24925  2BAF  0B89               	decfsz	9,f
 24926  2BB0  2BAD               	goto	u644_25
 24927  2BB1  0875               	movf	??_HEF_ByteArrayWrite,w
 24928  2BB2  3E80               	addlw	128
 24929  2BB3  00F9               	movwf	HEF_ByteArrayWrite@blockAddr
 24930  2BB4  303F               	movlw	63
 24931  2BB5  3D76               	addwfc	??_HEF_ByteArrayWrite+1,w
 24932  2BB6  00FA               	movwf	HEF_ByteArrayWrite@blockAddr+1
 24933                           
 24934                           ;HEF.c: 21: INTCONbits.GIE = 0;
 24935  2BB7  138B               	bcf	11,7	;volatile
 24936                           
 24937                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
 24938  2BB8  087A               	movf	HEF_ByteArrayWrite@blockAddr+1,w
 24939  2BB9  00F1               	movwf	FLASH_EraseBlock@startAddr+1
 24940  2BBA  0879               	movf	HEF_ByteArrayWrite@blockAddr,w
 24941  2BBB  00F0               	movwf	FLASH_EraseBlock@startAddr
 24942  2BBC  31B2  221C  31AB   	fcall	_FLASH_EraseBlock
 24943                           
 24944                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
 24945  2BBF  0023               	movlb	3	; select bank3
 24946  2BC0  1315               	bcf	21,6	;volatile
 24947                           
 24948                           ;HEF.c: 27: PMCON1bits.WREN = 1;
 24949  2BC1  1515               	bsf	21,2	;volatile
 24950                           
 24951                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
 24952  2BC2  1695               	bsf	21,5	;volatile
 24953  2BC3                     i1l7177:	
 24954                           ;HEF.c: 30: while ( count > 0) {
 24955                           
 24956  2BC3  0874               	movf	HEF_ByteArrayWrite@count,w
 24957  2BC4  1903               	btfsc	3,2
 24958  2BC5  2BE6               	goto	i1l2297
 24959                           
 24960                           ;HEF.c: 31: PMADR = blockAddr++;
 24961  2BC6  087A               	movf	HEF_ByteArrayWrite@blockAddr+1,w
 24962  2BC7  0023               	movlb	3	; select bank3
 24963  2BC8  0092               	movwf	18	;volatile
 24964  2BC9  0879               	movf	HEF_ByteArrayWrite@blockAddr,w
 24965  2BCA  0091               	movwf	17	;volatile
 24966  2BCB  3001               	movlw	1
 24967  2BCC  07F9               	addwf	HEF_ByteArrayWrite@blockAddr,f
 24968  2BCD  3000               	movlw	0
 24969  2BCE  3DFA               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
 24970                           
 24971                           ;HEF.c: 33: PMDATL = *byteArray++;
 24972  2BCF  0873               	movf	HEF_ByteArrayWrite@byteArray,w
 24973  2BD0  0086               	movwf	6
 24974  2BD1  0187               	clrf	7
 24975  2BD2  0801               	movf	1,w
 24976  2BD3  0093               	movwf	19	;volatile
 24977  2BD4  3001               	movlw	1
 24978  2BD5  00F5               	movwf	??_HEF_ByteArrayWrite
 24979  2BD6  0875               	movf	??_HEF_ByteArrayWrite,w
 24980  2BD7  07F3               	addwf	HEF_ByteArrayWrite@byteArray,f
 24981                           
 24982                           ;HEF.c: 34: PMDATH = 0;
 24983  2BD8  0194               	clrf	20	;volatile
 24984                           
 24985                           ;HEF.c: 35: if ( count == 1) {
 24986  2BD9  0374               	decf	HEF_ByteArrayWrite@count,w
 24987  2BDA  1903               	btfsc	3,2
 24988                           
 24989                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
 24990  2BDB  1295               	bcf	21,5	;volatile
 24991                           
 24992                           ;HEF.c: 37: }
 24993                           ;HEF.c: 39: PMCON2 = 0x55;
 24994  2BDC  3055               	movlw	85
 24995  2BDD  0096               	movwf	22	;volsfr
 24996                           
 24997                           ;HEF.c: 40: PMCON2 = 0xAA;
 24998  2BDE  30AA               	movlw	170
 24999  2BDF  0096               	movwf	22	;volsfr
 25000                           
 25001                           ;HEF.c: 41: PMCON1bits.WR = 1;
 25002  2BE0  1495               	bsf	21,1	;volatile
 25003                           
 25004                           ;HEF.c: 42: __nop();
 25005  2BE1  0000               	nop
 25006                           
 25007                           ;HEF.c: 43: __nop();
 25008  2BE2  0000               	nop
 25009                           
 25010                           ;HEF.c: 44: count--;
 25011  2BE3  3001               	movlw	1
 25012  2BE4  02F4               	subwf	HEF_ByteArrayWrite@count,f
 25013  2BE5  2BC3               	goto	i1l7177
 25014  2BE6                     i1l2297:	
 25015                           
 25016                           ;HEF.c: 45: }
 25017                           ;HEF.c: 47: PMCON1bits.WREN = 0;
 25018  2BE6  0023               	movlb	3	; select bank3
 25019  2BE7  1115               	bcf	21,2	;volatile
 25020                           
 25021                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
 25022  2BE8  0C77               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
 25023  2BE9  1C03               	skipc
 25024  2BEA  138B               	bcf	11,7	;volatile
 25025  2BEB  1803               	skipnc
 25026  2BEC  178B               	bsf	11,7	;volatile
 25027  2BED  0008               	return
 25028  2BEE                     __end_of_HEF_ByteArrayWrite:	
 25029                           ;HEF.c: 50: return 0;
 25030                           ;	Return value of _HEF_ByteArrayWrite is never used
 25031                           
 25032                           
 25033                           	psect	text116
 25034  321C                     __ptext116:	
 25035 ;; *************** function _FLASH_EraseBlock *****************
 25036 ;; Defined at:
 25037 ;;		line 141 in file "memory.c"
 25038 ;; Parameters:    Size  Location     Type
 25039 ;;  startAddr       2    0[COMMON] unsigned int 
 25040 ;; Auto vars:     Size  Location     Type
 25041 ;;  GIEBitValue     1    2[COMMON] unsigned char 
 25042 ;; Return value:  Size  Location     Type
 25043 ;;                  1    wreg      void 
 25044 ;; Registers used:
 25045 ;;		wreg, status,2, status,0
 25046 ;; Tracked objects:
 25047 ;;		On entry : 0/0
 25048 ;;		On exit  : 0/0
 25049 ;;		Unchanged: 0/0
 25050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25054 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25055 ;;Total ram usage:        3 bytes
 25056 ;; Hardware stack levels used:    1
 25057 ;; This function calls:
 25058 ;;		Nothing
 25059 ;; This function is called by:
 25060 ;;		_HEF_ByteArrayWrite
 25061 ;;		_FLASH_WriteBlock
 25062 ;; This function uses a non-reentrant model
 25063 ;;
 25064                           
 25065                           
 25066                           ;psect for function _FLASH_EraseBlock
 25067  321C                     _FLASH_EraseBlock:	
 25068                           
 25069                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
 25070                           
 25071                           ;incstack = 0
 25072                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 25073  321C  3000               	movlw	0
 25074  321D  1B8B               	btfsc	11,7	;volatile
 25075  321E  3001               	movlw	1
 25076  321F  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
 25077                           
 25078                           ;memory.c: 145: INTCONbits.GIE = 0;
 25079  3220  138B               	bcf	11,7	;volatile
 25080                           
 25081                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
 25082  3221  0870               	movf	FLASH_EraseBlock@startAddr,w
 25083  3222  0023               	movlb	3	; select bank3
 25084  3223  0091               	movwf	17	;volatile
 25085                           
 25086                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
 25087  3224  0871               	movf	FLASH_EraseBlock@startAddr+1,w
 25088  3225  0092               	movwf	18	;volatile
 25089                           
 25090                           ;memory.c: 152: PMCON1bits.CFGS = 0;
 25091  3226  1315               	bcf	21,6	;volatile
 25092                           
 25093                           ;memory.c: 153: PMCON1bits.FREE = 1;
 25094  3227  1615               	bsf	21,4	;volatile
 25095                           
 25096                           ;memory.c: 154: PMCON1bits.WREN = 1;
 25097  3228  1515               	bsf	21,2	;volatile
 25098                           
 25099                           ;memory.c: 157: PMCON2 = 0x55;
 25100  3229  3055               	movlw	85
 25101  322A  0096               	movwf	22	;volsfr
 25102                           
 25103                           ;memory.c: 158: PMCON2 = 0xAA;
 25104  322B  30AA               	movlw	170
 25105  322C  0096               	movwf	22	;volsfr
 25106                           
 25107                           ;memory.c: 159: PMCON1bits.WR = 1;
 25108  322D  1495               	bsf	21,1	;volatile
 25109                           
 25110                           ;memory.c: 160: __nop();
 25111  322E  0000               	nop
 25112                           
 25113                           ;memory.c: 161: __nop();
 25114  322F  0000               	nop
 25115                           
 25116                           ;memory.c: 163: PMCON1bits.WREN = 0;
 25117  3230  0023               	movlb	3	; select bank3
 25118  3231  1115               	bcf	21,2	;volatile
 25119                           
 25120                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
 25121  3232  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
 25122  3233  1C03               	skipc
 25123  3234  138B               	bcf	11,7	;volatile
 25124  3235  1803               	skipnc
 25125  3236  178B               	bsf	11,7	;volatile
 25126  3237  0008               	return
 25127  3238                     __end_of_FLASH_EraseBlock:	
 25128                           
 25129                           	psect	text117
 25130  287C                     __ptext117:	
 25131 ;; *************** function _modulation *****************
 25132 ;; Defined at:
 25133 ;;		line 240 in file "user.c"
 25134 ;; Parameters:    Size  Location     Type
 25135 ;;  x               4   14[BANK0 ] long 
 25136 ;;  y               4   18[BANK0 ] long 
 25137 ;; Auto vars:     Size  Location     Type
 25138 ;;		None
 25139 ;; Return value:  Size  Location     Type
 25140 ;;                  4   14[BANK0 ] long 
 25141 ;; Registers used:
 25142 ;;		wreg, status,2, status,0, pclath, cstack
 25143 ;; Tracked objects:
 25144 ;;		On entry : 0/0
 25145 ;;		On exit  : 0/0
 25146 ;;		Unchanged: 0/0
 25147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25148 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25150 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25151 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25152 ;;Total ram usage:       12 bytes
 25153 ;; Hardware stack levels used:    1
 25154 ;; Hardware stack levels required when called:    1
 25155 ;; This function calls:
 25156 ;;		i1___aldiv
 25157 ;;		i1___lmul
 25158 ;; This function is called by:
 25159 ;;		_isr
 25160 ;; This function uses a non-reentrant model
 25161 ;;
 25162                           
 25163                           
 25164                           ;psect for function _modulation
 25165  287C                     _modulation:	
 25166                           
 25167                           ;user.c: 243: return (127500 + (y * x)) / 1000;
 25168                           
 25169                           ;incstack = 0
 25170                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 25171  287C  3000               	movlw	0
 25172  287D  0020               	movlb	0	; select bank0
 25173  287E  00A3               	movwf	i1___aldiv@divisor+3
 25174  287F  3000               	movlw	0
 25175  2880  00A2               	movwf	i1___aldiv@divisor+2
 25176  2881  3003               	movlw	3
 25177  2882  00A1               	movwf	i1___aldiv@divisor+1
 25178  2883  30E8               	movlw	232
 25179  2884  00A0               	movwf	i1___aldiv@divisor
 25180  2885  300C               	movlw	12
 25181  2886  00B6               	movwf	??_modulation
 25182  2887  30F2               	movlw	242
 25183  2888  00B7               	movwf	??_modulation+1
 25184  2889  3001               	movlw	1
 25185  288A  00B8               	movwf	??_modulation+2
 25186  288B  3000               	movlw	0
 25187  288C  00B9               	movwf	??_modulation+3
 25188  288D  0835               	movf	modulation@y+3,w
 25189  288E  00F3               	movwf	i1___lmul@multiplier+3
 25190  288F  0834               	movf	modulation@y+2,w
 25191  2890  00F2               	movwf	i1___lmul@multiplier+2
 25192  2891  0833               	movf	modulation@y+1,w
 25193  2892  00F1               	movwf	i1___lmul@multiplier+1
 25194  2893  0832               	movf	modulation@y,w
 25195  2894  00F0               	movwf	i1___lmul@multiplier
 25196  2895  0831               	movf	modulation@x+3,w
 25197  2896  00F7               	movwf	i1___lmul@multiplicand+3
 25198  2897  0830               	movf	modulation@x+2,w
 25199  2898  00F6               	movwf	i1___lmul@multiplicand+2
 25200  2899  082F               	movf	modulation@x+1,w
 25201  289A  00F5               	movwf	i1___lmul@multiplicand+1
 25202  289B  082E               	movf	modulation@x,w
 25203  289C  00F4               	movwf	i1___lmul@multiplicand
 25204  289D  31B4  2458  31A8   	fcall	i1___lmul
 25205  28A0  0870               	movf	?i1___lmul,w
 25206  28A1  0020               	movlb	0	; select bank0
 25207  28A2  07B6               	addwf	??_modulation,f
 25208  28A3  0871               	movf	?i1___lmul+1,w
 25209  28A4  3DB7               	addwfc	??_modulation+1,f
 25210  28A5  0872               	movf	?i1___lmul+2,w
 25211  28A6  3DB8               	addwfc	??_modulation+2,f
 25212  28A7  0873               	movf	?i1___lmul+3,w
 25213  28A8  3DB9               	addwfc	??_modulation+3,f
 25214  28A9  0839               	movf	??_modulation+3,w
 25215  28AA  00A7               	movwf	i1___aldiv@dividend+3
 25216  28AB  0838               	movf	??_modulation+2,w
 25217  28AC  00A6               	movwf	i1___aldiv@dividend+2
 25218  28AD  0837               	movf	??_modulation+1,w
 25219  28AE  00A5               	movwf	i1___aldiv@dividend+1
 25220  28AF  0836               	movf	??_modulation,w
 25221  28B0  00A4               	movwf	i1___aldiv@dividend
 25222  28B1  31AF  277E         	fcall	i1___aldiv
 25223  28B3  0020               	movlb	0	; select bank0
 25224  28B4  0823               	movf	?i1___aldiv+3,w
 25225  28B5  00B1               	movwf	?_modulation+3
 25226  28B6  0822               	movf	?i1___aldiv+2,w
 25227  28B7  00B0               	movwf	?_modulation+2
 25228  28B8  0821               	movf	?i1___aldiv+1,w
 25229  28B9  00AF               	movwf	?_modulation+1
 25230  28BA  0820               	movf	?i1___aldiv,w
 25231  28BB  00AE               	movwf	?_modulation
 25232  28BC  0008               	return
 25233  28BD                     __end_of_modulation:	
 25234                           
 25235                           	psect	text118
 25236  3458                     __ptext118:	
 25237 ;; *************** function i1___lmul *****************
 25238 ;; Defined at:
 25239 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 25240 ;; Parameters:    Size  Location     Type
 25241 ;;  multiplier      4    0[COMMON] unsigned long 
 25242 ;;  multiplicand    4    4[COMMON] unsigned long 
 25243 ;; Auto vars:     Size  Location     Type
 25244 ;;  __lmul          4    8[COMMON] unsigned long 
 25245 ;; Return value:  Size  Location     Type
 25246 ;;                  4    0[COMMON] unsigned long 
 25247 ;; Registers used:
 25248 ;;		wreg, status,2, status,0
 25249 ;; Tracked objects:
 25250 ;;		On entry : 0/0
 25251 ;;		On exit  : 0/0
 25252 ;;		Unchanged: 0/0
 25253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25254 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25255 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25257 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25258 ;;Total ram usage:       12 bytes
 25259 ;; Hardware stack levels used:    1
 25260 ;; This function calls:
 25261 ;;		Nothing
 25262 ;; This function is called by:
 25263 ;;		_modulation
 25264 ;; This function uses a non-reentrant model
 25265 ;;
 25266                           
 25267                           
 25268                           ;psect for function i1___lmul
 25269  3458                     i1___lmul:	
 25270                           
 25271                           ;incstack = 0
 25272                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 25273  3458  3000               	movlw	0
 25274  3459  00FB               	movwf	i1___lmul@product+3
 25275  345A  3000               	movlw	0
 25276  345B  00FA               	movwf	i1___lmul@product+2
 25277  345C  3000               	movlw	0
 25278  345D  00F9               	movwf	i1___lmul@product+1
 25279  345E  3000               	movlw	0
 25280  345F  00F8               	movwf	i1___lmul@product
 25281  3460                     i1l7679:	
 25282  3460  1C70               	btfss	i1___lmul@multiplier,0
 25283  3461  2C6A               	goto	i1l7683
 25284  3462  0874               	movf	i1___lmul@multiplicand,w
 25285  3463  07F8               	addwf	i1___lmul@product,f
 25286  3464  0875               	movf	i1___lmul@multiplicand+1,w
 25287  3465  3DF9               	addwfc	i1___lmul@product+1,f
 25288  3466  0876               	movf	i1___lmul@multiplicand+2,w
 25289  3467  3DFA               	addwfc	i1___lmul@product+2,f
 25290  3468  0877               	movf	i1___lmul@multiplicand+3,w
 25291  3469  3DFB               	addwfc	i1___lmul@product+3,f
 25292  346A                     i1l7683:	
 25293  346A  3001               	movlw	1
 25294  346B                     u711_25:	
 25295  346B  35F4               	lslf	i1___lmul@multiplicand,f
 25296  346C  0DF5               	rlf	i1___lmul@multiplicand+1,f
 25297  346D  0DF6               	rlf	i1___lmul@multiplicand+2,f
 25298  346E  0DF7               	rlf	i1___lmul@multiplicand+3,f
 25299  346F  0B89               	decfsz	9,f
 25300  3470  2C6B               	goto	u711_25
 25301  3471  3001               	movlw	1
 25302  3472                     u712_25:	
 25303  3472  36F3               	lsrf	i1___lmul@multiplier+3,f
 25304  3473  0CF2               	rrf	i1___lmul@multiplier+2,f
 25305  3474  0CF1               	rrf	i1___lmul@multiplier+1,f
 25306  3475  0CF0               	rrf	i1___lmul@multiplier,f
 25307  3476  0B89               	decfsz	9,f
 25308  3477  2C72               	goto	u712_25
 25309  3478  0873               	movf	i1___lmul@multiplier+3,w
 25310  3479  0472               	iorwf	i1___lmul@multiplier+2,w
 25311  347A  0471               	iorwf	i1___lmul@multiplier+1,w
 25312  347B  0470               	iorwf	i1___lmul@multiplier,w
 25313  347C  1D03               	skipz
 25314  347D  2C60               	goto	i1l7679
 25315  347E  087B               	movf	i1___lmul@product+3,w
 25316  347F  00F3               	movwf	?i1___lmul+3
 25317  3480  087A               	movf	i1___lmul@product+2,w
 25318  3481  00F2               	movwf	?i1___lmul+2
 25319  3482  0879               	movf	i1___lmul@product+1,w
 25320  3483  00F1               	movwf	?i1___lmul+1
 25321  3484  0878               	movf	i1___lmul@product,w
 25322  3485  00F0               	movwf	?i1___lmul
 25323  3486  0008               	return
 25324  3487                     __end_ofi1___lmul:	
 25325                           
 25326                           	psect	text119
 25327  2F7E                     __ptext119:	
 25328 ;; *************** function i1___aldiv *****************
 25329 ;; Defined at:
 25330 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 25331 ;; Parameters:    Size  Location     Type
 25332 ;;  divisor         4    0[BANK0 ] long 
 25333 ;;  dividend        4    4[BANK0 ] long 
 25334 ;; Auto vars:     Size  Location     Type
 25335 ;;  __aldiv         4   10[BANK0 ] long 
 25336 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 25337 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 25338 ;; Return value:  Size  Location     Type
 25339 ;;                  4    0[BANK0 ] long 
 25340 ;; Registers used:
 25341 ;;		wreg, status,2, status,0
 25342 ;; Tracked objects:
 25343 ;;		On entry : 0/0
 25344 ;;		On exit  : 0/0
 25345 ;;		Unchanged: 0/0
 25346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25347 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25348 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25350 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25351 ;;Total ram usage:       15 bytes
 25352 ;; Hardware stack levels used:    1
 25353 ;; This function calls:
 25354 ;;		Nothing
 25355 ;; This function is called by:
 25356 ;;		_modulation
 25357 ;; This function uses a non-reentrant model
 25358 ;;
 25359                           
 25360                           
 25361                           ;psect for function i1___aldiv
 25362  2F7E                     i1___aldiv:	
 25363                           
 25364                           ;incstack = 0
 25365                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 25366  2F7E  0020               	movlb	0	; select bank0
 25367  2F7F  01A9               	clrf	i1___aldiv@sign
 25368  2F80  1FA3               	btfss	i1___aldiv@divisor+3,7
 25369  2F81  2F8F               	goto	i1l2502
 25370  2F82  09A0               	comf	i1___aldiv@divisor,f
 25371  2F83  09A1               	comf	i1___aldiv@divisor+1,f
 25372  2F84  09A2               	comf	i1___aldiv@divisor+2,f
 25373  2F85  09A3               	comf	i1___aldiv@divisor+3,f
 25374  2F86  0AA0               	incf	i1___aldiv@divisor,f
 25375  2F87  1903               	skipnz
 25376  2F88  0AA1               	incf	i1___aldiv@divisor+1,f
 25377  2F89  1903               	skipnz
 25378  2F8A  0AA2               	incf	i1___aldiv@divisor+2,f
 25379  2F8B  1903               	skipnz
 25380  2F8C  0AA3               	incf	i1___aldiv@divisor+3,f
 25381  2F8D  01A9               	clrf	i1___aldiv@sign
 25382  2F8E  0AA9               	incf	i1___aldiv@sign,f
 25383  2F8F                     i1l2502:	
 25384  2F8F  1FA7               	btfss	i1___aldiv@dividend+3,7
 25385  2F90  2FA0               	goto	i1l7701
 25386  2F91  09A4               	comf	i1___aldiv@dividend,f
 25387  2F92  09A5               	comf	i1___aldiv@dividend+1,f
 25388  2F93  09A6               	comf	i1___aldiv@dividend+2,f
 25389  2F94  09A7               	comf	i1___aldiv@dividend+3,f
 25390  2F95  0AA4               	incf	i1___aldiv@dividend,f
 25391  2F96  1903               	skipnz
 25392  2F97  0AA5               	incf	i1___aldiv@dividend+1,f
 25393  2F98  1903               	skipnz
 25394  2F99  0AA6               	incf	i1___aldiv@dividend+2,f
 25395  2F9A  1903               	skipnz
 25396  2F9B  0AA7               	incf	i1___aldiv@dividend+3,f
 25397  2F9C  3001               	movlw	1
 25398  2F9D  00FC               	movwf	??i1___aldiv
 25399  2F9E  087C               	movf	??i1___aldiv,w
 25400  2F9F  06A9               	xorwf	i1___aldiv@sign,f
 25401  2FA0                     i1l7701:	
 25402  2FA0  3000               	movlw	0
 25403  2FA1  00AD               	movwf	i1___aldiv@quotient+3
 25404  2FA2  3000               	movlw	0
 25405  2FA3  00AC               	movwf	i1___aldiv@quotient+2
 25406  2FA4  3000               	movlw	0
 25407  2FA5  00AB               	movwf	i1___aldiv@quotient+1
 25408  2FA6  3000               	movlw	0
 25409  2FA7  00AA               	movwf	i1___aldiv@quotient
 25410  2FA8  0823               	movf	i1___aldiv@divisor+3,w
 25411  2FA9  0422               	iorwf	i1___aldiv@divisor+2,w
 25412  2FAA  0421               	iorwf	i1___aldiv@divisor+1,w
 25413  2FAB  0420               	iorwf	i1___aldiv@divisor,w
 25414  2FAC  1903               	skipnz
 25415  2FAD  2FE9               	goto	i1l7723
 25416  2FAE  01A8               	clrf	i1___aldiv@counter
 25417  2FAF  0AA8               	incf	i1___aldiv@counter,f
 25418  2FB0                     i1l7709:	
 25419  2FB0  1BA3               	btfsc	i1___aldiv@divisor+3,7
 25420  2FB1  2FBE               	goto	i1l7711
 25421  2FB2  3001               	movlw	1
 25422  2FB3                     u717_25:	
 25423  2FB3  35A0               	lslf	i1___aldiv@divisor,f
 25424  2FB4  0DA1               	rlf	i1___aldiv@divisor+1,f
 25425  2FB5  0DA2               	rlf	i1___aldiv@divisor+2,f
 25426  2FB6  0DA3               	rlf	i1___aldiv@divisor+3,f
 25427  2FB7  0B89               	decfsz	9,f
 25428  2FB8  2FB3               	goto	u717_25
 25429  2FB9  3001               	movlw	1
 25430  2FBA  00FC               	movwf	??i1___aldiv
 25431  2FBB  087C               	movf	??i1___aldiv,w
 25432  2FBC  07A8               	addwf	i1___aldiv@counter,f
 25433  2FBD  2FB0               	goto	i1l7709
 25434  2FBE                     i1l7711:	
 25435  2FBE  3001               	movlw	1
 25436  2FBF                     u719_25:	
 25437  2FBF  35AA               	lslf	i1___aldiv@quotient,f
 25438  2FC0  0DAB               	rlf	i1___aldiv@quotient+1,f
 25439  2FC1  0DAC               	rlf	i1___aldiv@quotient+2,f
 25440  2FC2  0DAD               	rlf	i1___aldiv@quotient+3,f
 25441  2FC3  0B89               	decfsz	9,f
 25442  2FC4  2FBF               	goto	u719_25
 25443  2FC5  0823               	movf	i1___aldiv@divisor+3,w
 25444  2FC6  0227               	subwf	i1___aldiv@dividend+3,w
 25445  2FC7  1D03               	skipz
 25446  2FC8  2FD3               	goto	u720_25
 25447  2FC9  0822               	movf	i1___aldiv@divisor+2,w
 25448  2FCA  0226               	subwf	i1___aldiv@dividend+2,w
 25449  2FCB  1D03               	skipz
 25450  2FCC  2FD3               	goto	u720_25
 25451  2FCD  0821               	movf	i1___aldiv@divisor+1,w
 25452  2FCE  0225               	subwf	i1___aldiv@dividend+1,w
 25453  2FCF  1D03               	skipz
 25454  2FD0  2FD3               	goto	u720_25
 25455  2FD1  0820               	movf	i1___aldiv@divisor,w
 25456  2FD2  0224               	subwf	i1___aldiv@dividend,w
 25457  2FD3                     u720_25:	
 25458  2FD3  1C03               	skipc
 25459  2FD4  2FDE               	goto	i1l7719
 25460  2FD5  0820               	movf	i1___aldiv@divisor,w
 25461  2FD6  02A4               	subwf	i1___aldiv@dividend,f
 25462  2FD7  0821               	movf	i1___aldiv@divisor+1,w
 25463  2FD8  3BA5               	subwfb	i1___aldiv@dividend+1,f
 25464  2FD9  0822               	movf	i1___aldiv@divisor+2,w
 25465  2FDA  3BA6               	subwfb	i1___aldiv@dividend+2,f
 25466  2FDB  0823               	movf	i1___aldiv@divisor+3,w
 25467  2FDC  3BA7               	subwfb	i1___aldiv@dividend+3,f
 25468  2FDD  142A               	bsf	i1___aldiv@quotient,0
 25469  2FDE                     i1l7719:	
 25470  2FDE  3001               	movlw	1
 25471  2FDF                     u721_25:	
 25472  2FDF  36A3               	lsrf	i1___aldiv@divisor+3,f
 25473  2FE0  0CA2               	rrf	i1___aldiv@divisor+2,f
 25474  2FE1  0CA1               	rrf	i1___aldiv@divisor+1,f
 25475  2FE2  0CA0               	rrf	i1___aldiv@divisor,f
 25476  2FE3  0B89               	decfsz	9,f
 25477  2FE4  2FDF               	goto	u721_25
 25478  2FE5  3001               	movlw	1
 25479  2FE6  02A8               	subwf	i1___aldiv@counter,f
 25480  2FE7  1D03               	btfss	3,2
 25481  2FE8  2FBE               	goto	i1l7711
 25482  2FE9                     i1l7723:	
 25483  2FE9  0829               	movf	i1___aldiv@sign,w
 25484  2FEA  1903               	btfsc	3,2
 25485  2FEB  2FF7               	goto	i1l7727
 25486  2FEC  09AA               	comf	i1___aldiv@quotient,f
 25487  2FED  09AB               	comf	i1___aldiv@quotient+1,f
 25488  2FEE  09AC               	comf	i1___aldiv@quotient+2,f
 25489  2FEF  09AD               	comf	i1___aldiv@quotient+3,f
 25490  2FF0  0AAA               	incf	i1___aldiv@quotient,f
 25491  2FF1  1903               	skipnz
 25492  2FF2  0AAB               	incf	i1___aldiv@quotient+1,f
 25493  2FF3  1903               	skipnz
 25494  2FF4  0AAC               	incf	i1___aldiv@quotient+2,f
 25495  2FF5  1903               	skipnz
 25496  2FF6  0AAD               	incf	i1___aldiv@quotient+3,f
 25497  2FF7                     i1l7727:	
 25498  2FF7  082D               	movf	i1___aldiv@quotient+3,w
 25499  2FF8  00A3               	movwf	?i1___aldiv+3
 25500  2FF9  082C               	movf	i1___aldiv@quotient+2,w
 25501  2FFA  00A2               	movwf	?i1___aldiv+2
 25502  2FFB  082B               	movf	i1___aldiv@quotient+1,w
 25503  2FFC  00A1               	movwf	?i1___aldiv+1
 25504  2FFD  082A               	movf	i1___aldiv@quotient,w
 25505  2FFE  00A0               	movwf	?i1___aldiv
 25506  2FFF  0008               	return
 25507  3000                     __end_ofi1___aldiv:	
 25508                           
 25509                           	psect	text120
 25510  28FE                     __ptext120:	
 25511 ;; *************** function _USARTHandleRxInt *****************
 25512 ;; Defined at:
 25513 ;;		line 91 in file "usart_pic16.c"
 25514 ;; Parameters:    Size  Location     Type
 25515 ;;		None
 25516 ;; Auto vars:     Size  Location     Type
 25517 ;;  data            1    4[COMMON] unsigned char 
 25518 ;; Return value:  Size  Location     Type
 25519 ;;                  1    wreg      void 
 25520 ;; Registers used:
 25521 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 25522 ;; Tracked objects:
 25523 ;;		On entry : 0/0
 25524 ;;		On exit  : 0/0
 25525 ;;		Unchanged: 0/0
 25526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25529 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25530 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25531 ;;Total ram usage:        5 bytes
 25532 ;; Hardware stack levels used:    1
 25533 ;; This function calls:
 25534 ;;		Nothing
 25535 ;; This function is called by:
 25536 ;;		_isr
 25537 ;; This function uses a non-reentrant model
 25538 ;;
 25539                           
 25540                           
 25541                           ;psect for function _USARTHandleRxInt
 25542  28FE                     _USARTHandleRxInt:	
 25543                           
 25544                           ;usart_pic16.c: 100: char data=RCREG;
 25545                           
 25546                           ;incstack = 0
 25547                           ; Regs used in _USARTHandleRxInt: [wreg+fsr1l+fsr1h+status,2+status,0]
 25548  28FE  0023               	movlb	3	; select bank3
 25549  28FF  0819               	movf	25,w	;volatile
 25550  2900  00F0               	movwf	??_USARTHandleRxInt
 25551  2901  0870               	movf	??_USARTHandleRxInt,w
 25552  2902  00F4               	movwf	USARTHandleRxInt@data
 25553                           
 25554                           ;usart_pic16.c: 103: if(((UQEnd == 64 - 1) && UQFront == 0) || ((UQEnd + 1) == UQFront))
      +                           {
 25555  2903  303F               	movlw	63
 25556  2904  0020               	movlb	0	; select bank0
 25557  2905  065F               	xorwf	_UQEnd,w	;volatile
 25558  2906  1903               	btfsc	3,2
 25559  2907  0860               	movf	_UQFront,w	;volatile
 25560  2908  1903               	btfsc	3,2
 25561  2909  291F               	goto	i1l7739
 25562  290A  0860               	movf	_UQFront,w	;volatile
 25563  290B  00F0               	movwf	??_USARTHandleRxInt
 25564  290C  01F1               	clrf	??_USARTHandleRxInt+1
 25565  290D  1BF0               	btfsc	??_USARTHandleRxInt,7
 25566  290E  03F1               	decf	??_USARTHandleRxInt+1,f
 25567  290F  3001               	movlw	1
 25568  2910  075F               	addwf	_UQEnd,w	;volatile
 25569  2911  00F2               	movwf	??_USARTHandleRxInt+2
 25570  2912  01F3               	clrf	??_USARTHandleRxInt+3
 25571  2913  1803               	skipnc
 25572  2914  0AF3               	incf	??_USARTHandleRxInt+3,f
 25573  2915  1BDF               	btfsc	_UQEnd,7	;volatile
 25574  2916  03F3               	decf	??_USARTHandleRxInt+3,f
 25575  2917  0871               	movf	??_USARTHandleRxInt+1,w
 25576  2918  0673               	xorwf	??_USARTHandleRxInt+3,w
 25577  2919  1D03               	skipz
 25578  291A  291D               	goto	u727_25
 25579  291B  0870               	movf	??_USARTHandleRxInt,w
 25580  291C  0672               	xorwf	??_USARTHandleRxInt+2,w
 25581  291D                     u727_25:	
 25582  291D  1D03               	skipz
 25583  291E  2928               	goto	i1l7743
 25584  291F                     i1l7739:	
 25585                           
 25586                           ;usart_pic16.c: 105: UQFront++;
 25587  291F  3001               	movlw	1
 25588  2920  00F0               	movwf	??_USARTHandleRxInt
 25589  2921  0870               	movf	??_USARTHandleRxInt,w
 25590  2922  0020               	movlb	0	; select bank0
 25591  2923  07E0               	addwf	_UQFront,f	;volatile
 25592                           
 25593                           ;usart_pic16.c: 106: if(UQFront == 64) UQFront=0;
 25594  2924  3040               	movlw	64
 25595  2925  0660               	xorwf	_UQFront,w	;volatile
 25596  2926  1903               	btfsc	3,2
 25597  2927  01E0               	clrf	_UQFront	;volatile
 25598  2928                     i1l7743:	
 25599                           
 25600                           ;usart_pic16.c: 107: }
 25601                           ;usart_pic16.c: 109: if(UQEnd==64-1) {
 25602  2928  303F               	movlw	63
 25603  2929  0020               	movlb	0	; select bank0
 25604  292A  065F               	xorwf	_UQEnd,w	;volatile
 25605  292B  1D03               	btfss	3,2
 25606  292C  292F               	goto	i1l7747
 25607                           
 25608                           ;usart_pic16.c: 110: UQEnd=0;
 25609  292D  01DF               	clrf	_UQEnd	;volatile
 25610                           
 25611                           ;usart_pic16.c: 111: } else {
 25612  292E  2933               	goto	i1l7749
 25613  292F                     i1l7747:	
 25614                           
 25615                           ;usart_pic16.c: 112: UQEnd++;
 25616  292F  3001               	movlw	1
 25617  2930  00F0               	movwf	??_USARTHandleRxInt
 25618  2931  0870               	movf	??_USARTHandleRxInt,w
 25619  2932  07DF               	addwf	_UQEnd,f	;volatile
 25620  2933                     i1l7749:	
 25621                           
 25622                           ;usart_pic16.c: 113: }
 25623                           ;usart_pic16.c: 115: URBuff[UQEnd]=data;
 25624  2933  0874               	movf	USARTHandleRxInt@data,w
 25625  2934  00F0               	movwf	??_USARTHandleRxInt
 25626  2935  085F               	movf	_UQEnd,w
 25627  2936  3E20               	addlw	(low (_URBuff| (0+1024)))& (0+255)
 25628  2937  0086               	movwf	6
 25629  2938  3004               	movlw	4	; select bank8/9
 25630  2939  0087               	movwf	7
 25631  293A  0870               	movf	??_USARTHandleRxInt,w
 25632  293B  0081               	movwf	1
 25633                           
 25634                           ;usart_pic16.c: 117: if(UQFront==-1) UQFront=0;
 25635  293C  0A60               	incf	_UQFront,w	;volatile
 25636  293D  1D03               	btfss	3,2
 25637  293E  0008               	return
 25638  293F  01E0               	clrf	_UQFront	;volatile
 25639  2940  0008               	return
 25640  2941                     __end_of_USARTHandleRxInt:	
 25641  007E                     btemp	set	126	;btemp
 25642  007E                     int$flags	set	126
 25643  007E                     wtemp	set	126
 25644  007E                     wtemp0	set	126
 25645  0080                     wtemp1	set	128
 25646  0082                     wtemp2	set	130
 25647  0084                     wtemp3	set	132
 25648  0086                     wtemp4	set	134
 25649  0088                     wtemp5	set	136
 25650  007F                     wtemp6	set	127
 25651  007E                     ttemp	set	126
 25652  007E                     ttemp0	set	126
 25653  0081                     ttemp1	set	129
 25654  0084                     ttemp2	set	132
 25655  0087                     ttemp3	set	135
 25656  007F                     ttemp4	set	127
 25657  007E                     ltemp	set	126
 25658  007E                     ltemp0	set	126
 25659  0082                     ltemp1	set	130
 25660  0086                     ltemp2	set	134
 25661  0080                     ltemp3	set	128
 25662  238A                     
 25663                           	psect	maintext_split_1
 25664  088D                     l8661:	
 25665  088D  3040               	movlw	64
 25666  088E  0026               	movlb	6	; select bank6
 25667  088F  0222               	subwf	(_midiBuff^(0+768)+2),w
 25668  0890  1803               	skipnc
 25669  0891  289A               	goto	l8665
 25670                           
 25671                           ;main.c: 156: setSwitchBypassState(0);
 25672  0892  3000               	movlw	0
 25673  0893  0021               	movlb	1	; select bank1
 25674  0894  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
 25675  0895  00B6               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 25676  0896  31B2  2254  3188   	fcall	_setSwitchBypassState
 25677                           
 25678                           ;main.c: 157: } else {
 25679  0899  2C95               	goto	l8759
 25680  089A                     l8665:	
 25681                           
 25682                           ;main.c: 158: setSwitchBypassState(1);
 25683  089A  3001               	movlw	1
 25684  089B  0021               	movlb	1	; select bank1
 25685  089C  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
 25686  089D  3000               	movlw	0
 25687  089E  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
 25688  089F  31B2  2254  3188   	fcall	_setSwitchBypassState
 25689                           
 25690                           ;main.c: 159: }
 25691                           ;main.c: 160: break;
 25692  08A2  2C95               	goto	l8759
 25693  08A3                     l8667:	
 25694                           ;main.c: 161: case 93:
 25695                           
 25696                           
 25697                           ;main.c: 162: if (tap_timer >= 1563) {
 25698  08A3  0020               	movlb	0	; select bank0
 25699  08A4  1BDC               	btfsc	_tap_timer+3,7	;volatile
 25700  08A5  28E8               	goto	l8681
 25701  08A6  085C               	movf	_tap_timer+3,w	;volatile
 25702  08A7  1D03               	btfss	3,2
 25703  08A8  28B2               	goto	l8669
 25704  08A9  085B               	movf	_tap_timer+2,w	;volatile
 25705  08AA  1D03               	btfss	3,2
 25706  08AB  28B2               	goto	l8669
 25707  08AC  301B               	movlw	27
 25708  08AD  0259               	subwf	_tap_timer,w	;volatile
 25709  08AE  3006               	movlw	6
 25710  08AF  3B5A               	subwfb	_tap_timer+1,w	;volatile
 25711  08B0  1C03               	btfss	3,0
 25712  08B1  28E8               	goto	l8681
 25713  08B2                     l8669:	
 25714                           
 25715                           ;main.c: 163: tap_timer = 0;
 25716  08B2  3000               	movlw	0
 25717  08B3  00DC               	movwf	_tap_timer+3	;volatile
 25718  08B4  3000               	movlw	0
 25719  08B5  00DB               	movwf	_tap_timer+2	;volatile
 25720  08B6  3000               	movlw	0
 25721  08B7  00DA               	movwf	_tap_timer+1	;volatile
 25722  08B8  3000               	movlw	0
 25723  08B9  00D9               	movwf	_tap_timer	;volatile
 25724                           
 25725                           ;main.c: 164: tap_iteration = 1;
 25726  08BA  3001               	movlw	1
 25727  08BB  0024               	movlb	4	; select bank4
 25728  08BC  00E5               	movwf	_tap_iteration^(0+512)
 25729  08BD  3000               	movlw	0
 25730  08BE  00E6               	movwf	(_tap_iteration^(0+512)+1)
 25731                           
 25732                           ;main.c: 165: tap_total = 0;
 25733  08BF  3000               	movlw	0
 25734  08C0  0025               	movlb	5	; select bank5
 25735  08C1  00D9               	movwf	(_tap_total+3)^(0+640)
 25736  08C2  3000               	movlw	0
 25737  08C3  00D8               	movwf	(_tap_total+2)^(0+640)
 25738  08C4  3000               	movlw	0
 25739  08C5  00D7               	movwf	(_tap_total+1)^(0+640)
 25740  08C6  3000               	movlw	0
 25741  08C7  00D6               	movwf	_tap_total^(0+640)
 25742                           
 25743                           ;main.c: 166: mod_time_changed = 0;
 25744  08C8  0024               	movlb	4	; select bank4
 25745  08C9  01EC               	clrf	_mod_time_changed^(0+512)
 25746                           
 25747                           ;main.c: 168: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
 25748  08CA  0023               	movlb	3	; select bank3
 25749  08CB  01EF               	clrf	_iCnt^(0+384)
 25750  08CC  0AEF               	incf	_iCnt^(0+384),f
 25751  08CD                     l8679:	
 25752  08CD  086F               	movf	_iCnt^(0+384),w
 25753  08CE  026C               	subwf	_num_taps^(0+384),w
 25754  08CF  1C03               	btfss	3,0
 25755  08D0  2C95               	goto	l8759
 25756                           
 25757                           ;main.c: 169: tap_history[iCnt] = 0;
 25758  08D1  086F               	movf	_iCnt^(0+384),w
 25759  08D2  00D1               	movwf	??_main^(0+384)
 25760  08D3  3001               	movlw	1
 25761  08D4                     u8885:	
 25762  08D4  35D1               	lslf	??_main^(0+384),f
 25763  08D5  3EFF               	addlw	-1
 25764  08D6  1D03               	skipz
 25765  08D7  28D4               	goto	u8885
 25766  08D8  3551               	lslf	??_main^(0+384),w
 25767  08D9  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25768  08DA  0086               	movwf	6
 25769  08DB  3002               	movlw	2	; select bank5/6
 25770  08DC  0087               	movwf	7
 25771  08DD  3000               	movlw	0
 25772  08DE  3FC0               	movwi [0]fsr1
 25773  08DF  3000               	movlw	0
 25774  08E0  3FC1               	movwi [1]fsr1
 25775  08E1  3FC2               	movwi [2]fsr1
 25776  08E2  3FC3               	movwi [3]fsr1
 25777  08E3  3001               	movlw	1
 25778  08E4  00D1               	movwf	??_main^(0+384)
 25779  08E5  0851               	movf	??_main^(0+384),w
 25780  08E6  07EF               	addwf	_iCnt^(0+384),f
 25781  08E7  28CD               	goto	l8679
 25782  08E8                     l8681:	
 25783                           ;main.c: 170: }
 25784                           ;main.c: 171: } else {
 25785                           
 25786                           
 25787                           ;main.c: 172: if (tap_timer >= 1172) {
 25788  08E8  0020               	movlb	0	; select bank0
 25789  08E9  1BDC               	btfsc	_tap_timer+3,7	;volatile
 25790  08EA  28FF               	goto	l453
 25791  08EB  085C               	movf	_tap_timer+3,w	;volatile
 25792  08EC  1D03               	btfss	3,2
 25793  08ED  28F7               	goto	l8683
 25794  08EE  085B               	movf	_tap_timer+2,w	;volatile
 25795  08EF  1D03               	btfss	3,2
 25796  08F0  28F7               	goto	l8683
 25797  08F1  3094               	movlw	148
 25798  08F2  0259               	subwf	_tap_timer,w	;volatile
 25799  08F3  3004               	movlw	4
 25800  08F4  3B5A               	subwfb	_tap_timer+1,w	;volatile
 25801  08F5  1C03               	btfss	3,0
 25802  08F6  28FF               	goto	l453
 25803  08F7                     l8683:	
 25804                           
 25805                           ;main.c: 173: tap_timer = 1172;
 25806  08F7  3000               	movlw	0
 25807  08F8  00DC               	movwf	_tap_timer+3	;volatile
 25808  08F9  3000               	movlw	0
 25809  08FA  00DB               	movwf	_tap_timer+2	;volatile
 25810  08FB  3004               	movlw	4
 25811  08FC  00DA               	movwf	_tap_timer+1	;volatile
 25812  08FD  3094               	movlw	148
 25813  08FE  00D9               	movwf	_tap_timer	;volatile
 25814  08FF                     l453:	
 25815                           
 25816                           ;main.c: 174: }
 25817                           ;main.c: 176: int tapCntDivisor = num_taps;
 25818  08FF  0023               	movlb	3	; select bank3
 25819  0900  086C               	movf	_num_taps^(0+384),w
 25820  0901  00D1               	movwf	??_main^(0+384)
 25821  0902  01D2               	clrf	(??_main^(0+384)+1)
 25822  0903  0851               	movf	??_main^(0+384),w
 25823  0904  00DD               	movwf	main@tapCntDivisor^(0+384)
 25824  0905  0852               	movf	(??_main+1)^(0+384),w
 25825  0906  00DE               	movwf	(main@tapCntDivisor+1)^(0+384)
 25826                           
 25827                           ;main.c: 177: if (tap_iteration <= num_taps) {
 25828  0907  0024               	movlb	4	; select bank4
 25829  0908  0866               	movf	(_tap_iteration+1)^(0+512),w
 25830  0909  3A80               	xorlw	128
 25831  090A  3C80               	sublw	128
 25832  090B  1D03               	skipz
 25833  090C  2910               	goto	u8915
 25834  090D  0865               	movf	_tap_iteration^(0+512),w
 25835  090E  0023               	movlb	3	; select bank3
 25836  090F  026C               	subwf	_num_taps^(0+384),w
 25837  0910                     u8915:	
 25838  0910  1C03               	skipc
 25839  0911  2942               	goto	l8691
 25840                           
 25841                           ;main.c: 178: tap_total += tap_timer;
 25842  0912  0020               	movlb	0	; select bank0
 25843  0913  0859               	movf	_tap_timer,w	;volatile
 25844  0914  0025               	movlb	5	; select bank5
 25845  0915  07D6               	addwf	_tap_total^(0+640),f
 25846  0916  0020               	movlb	0	; select bank0
 25847  0917  085A               	movf	_tap_timer+1,w	;volatile
 25848  0918  0025               	movlb	5	; select bank5
 25849  0919  3DD7               	addwfc	(_tap_total+1)^(0+640),f
 25850  091A  0020               	movlb	0	; select bank0
 25851  091B  085B               	movf	_tap_timer+2,w	;volatile
 25852  091C  0025               	movlb	5	; select bank5
 25853  091D  3DD8               	addwfc	(_tap_total+2)^(0+640),f
 25854  091E  0020               	movlb	0	; select bank0
 25855  091F  085C               	movf	_tap_timer+3,w	;volatile
 25856  0920  0025               	movlb	5	; select bank5
 25857  0921  3DD9               	addwfc	(_tap_total+3)^(0+640),f
 25858                           
 25859                           ;main.c: 179: tap_history[tap_iteration] = tap_timer;
 25860  0922  0024               	movlb	4	; select bank4
 25861  0923  0865               	movf	_tap_iteration^(0+512),w
 25862  0924  0023               	movlb	3	; select bank3
 25863  0925  00D1               	movwf	??_main^(0+384)
 25864  0926  3001               	movlw	1
 25865  0927                     u8925:	
 25866  0927  35D1               	lslf	??_main^(0+384),f
 25867  0928  3EFF               	addlw	-1
 25868  0929  1D03               	skipz
 25869  092A  2927               	goto	u8925
 25870  092B  3551               	lslf	??_main^(0+384),w
 25871  092C  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25872  092D  0086               	movwf	6
 25873  092E  3002               	movlw	2	; select bank5/6
 25874  092F  0087               	movwf	7
 25875  0930  0020               	movlb	0	; select bank0
 25876  0931  0859               	movf	_tap_timer,w	;volatile
 25877  0932  3FC0               	movwi [0]fsr1
 25878  0933  085A               	movf	_tap_timer+1,w	;volatile
 25879  0934  3FC1               	movwi [1]fsr1
 25880  0935  085B               	movf	_tap_timer+2,w	;volatile
 25881  0936  3FC2               	movwi [2]fsr1
 25882  0937  085C               	movf	_tap_timer+3,w	;volatile
 25883  0938  3FC3               	movwi [3]fsr1
 25884                           
 25885                           ;main.c: 180: tapCntDivisor = tap_iteration;
 25886  0939  0024               	movlb	4	; select bank4
 25887  093A  0866               	movf	(_tap_iteration+1)^(0+512),w
 25888  093B  0023               	movlb	3	; select bank3
 25889  093C  00DE               	movwf	(main@tapCntDivisor+1)^(0+384)
 25890  093D  0024               	movlb	4	; select bank4
 25891  093E  0865               	movf	_tap_iteration^(0+512),w
 25892  093F  0023               	movlb	3	; select bank3
 25893  0940  00DD               	movwf	main@tapCntDivisor^(0+384)
 25894                           
 25895                           ;main.c: 181: } else {
 25896  0941  29BA               	goto	l8705
 25897  0942                     l8691:	
 25898                           
 25899                           ;main.c: 182: tap_total = 0;
 25900  0942  3000               	movlw	0
 25901  0943  0025               	movlb	5	; select bank5
 25902  0944  00D9               	movwf	(_tap_total+3)^(0+640)
 25903  0945  3000               	movlw	0
 25904  0946  00D8               	movwf	(_tap_total+2)^(0+640)
 25905  0947  3000               	movlw	0
 25906  0948  00D7               	movwf	(_tap_total+1)^(0+640)
 25907  0949  3000               	movlw	0
 25908  094A  00D6               	movwf	_tap_total^(0+640)
 25909                           
 25910                           ;main.c: 183: for (iCnt = 1; iCnt < num_taps; iCnt++) {
 25911  094B  0023               	movlb	3	; select bank3
 25912  094C  01EF               	clrf	_iCnt^(0+384)
 25913  094D  0AEF               	incf	_iCnt^(0+384),f
 25914  094E                     l8699:	
 25915  094E  086C               	movf	_num_taps^(0+384),w
 25916  094F  026F               	subwf	_iCnt^(0+384),w
 25917  0950  1803               	btfsc	3,0
 25918  0951  2996               	goto	l8701
 25919                           
 25920                           ;main.c: 184: tap_history[iCnt] = tap_history[iCnt + 1];
 25921  0952  086F               	movf	_iCnt^(0+384),w
 25922  0953  00D1               	movwf	??_main^(0+384)
 25923  0954  3001               	movlw	1
 25924  0955                     u8935:	
 25925  0955  35D1               	lslf	??_main^(0+384),f
 25926  0956  3EFF               	addlw	-1
 25927  0957  1D03               	skipz
 25928  0958  2955               	goto	u8935
 25929  0959  3551               	lslf	??_main^(0+384),w
 25930  095A  3E04               	addlw	4
 25931  095B  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25932  095C  0086               	movwf	6
 25933  095D  3002               	movlw	2	; select bank5/6
 25934  095E  0087               	movwf	7
 25935  095F  3F40               	moviw [0]fsr1
 25936  0960  00D2               	movwf	(??_main+1)^(0+384)
 25937  0961  3F41               	moviw [1]fsr1
 25938  0962  00D3               	movwf	((??_main+1)^(0+384)+1)
 25939  0963  3F42               	moviw [2]fsr1
 25940  0964  00D4               	movwf	((??_main+1)^(0+384)+2)
 25941  0965  3F43               	moviw [3]fsr1
 25942  0966  00D5               	movwf	((??_main+1)^(0+384)+3)
 25943  0967  086F               	movf	_iCnt^(0+384),w
 25944  0968  00D6               	movwf	(??_main+5)^(0+384)
 25945  0969  3001               	movlw	1
 25946  096A                     u8945:	
 25947  096A  35D6               	lslf	(??_main+5)^(0+384),f
 25948  096B  3EFF               	addlw	-1
 25949  096C  1D03               	skipz
 25950  096D  296A               	goto	u8945
 25951  096E  3556               	lslf	(??_main+5)^(0+384),w
 25952  096F  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25953  0970  0086               	movwf	6
 25954  0971  3002               	movlw	2	; select bank5/6
 25955  0972  0087               	movwf	7
 25956  0973  0852               	movf	(??_main+1)^(0+384),w
 25957  0974  3FC0               	movwi [0]fsr1
 25958  0975  0853               	movf	(??_main+2)^(0+384),w
 25959  0976  3FC1               	movwi [1]fsr1
 25960  0977  0854               	movf	(??_main+3)^(0+384),w
 25961  0978  3FC2               	movwi [2]fsr1
 25962  0979  0855               	movf	(??_main+4)^(0+384),w
 25963  097A  3FC3               	movwi [3]fsr1
 25964                           
 25965                           ;main.c: 185: tap_total += tap_history[iCnt];
 25966  097B  086F               	movf	_iCnt^(0+384),w
 25967  097C  00D1               	movwf	??_main^(0+384)
 25968  097D  3001               	movlw	1
 25969  097E                     u8955:	
 25970  097E  35D1               	lslf	??_main^(0+384),f
 25971  097F  3EFF               	addlw	-1
 25972  0980  1D03               	skipz
 25973  0981  297E               	goto	u8955
 25974  0982  3551               	lslf	??_main^(0+384),w
 25975  0983  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25976  0984  0086               	movwf	6
 25977  0985  3002               	movlw	2	; select bank5/6
 25978  0986  0087               	movwf	7
 25979  0987  3F40               	moviw [0]fsr1
 25980  0988  0025               	movlb	5	; select bank5
 25981  0989  07D6               	addwf	_tap_total^(0+640),f
 25982  098A  3F41               	moviw [1]fsr1
 25983  098B  3DD7               	addwfc	(_tap_total+1)^(0+640),f
 25984  098C  3F42               	moviw [2]fsr1
 25985  098D  3DD8               	addwfc	(_tap_total+2)^(0+640),f
 25986  098E  3F43               	moviw [3]fsr1
 25987  098F  3DD9               	addwfc	(_tap_total+3)^(0+640),f
 25988  0990  3001               	movlw	1
 25989  0991  0023               	movlb	3	; select bank3
 25990  0992  00D1               	movwf	??_main^(0+384)
 25991  0993  0851               	movf	??_main^(0+384),w
 25992  0994  07EF               	addwf	_iCnt^(0+384),f
 25993  0995  294E               	goto	l8699
 25994  0996                     l8701:	
 25995                           
 25996                           ;main.c: 186: }
 25997                           ;main.c: 187: tap_history[num_taps] = tap_timer;
 25998  0996  086C               	movf	_num_taps^(0+384),w
 25999  0997  00D1               	movwf	??_main^(0+384)
 26000  0998  3001               	movlw	1
 26001  0999                     u8975:	
 26002  0999  35D1               	lslf	??_main^(0+384),f
 26003  099A  3EFF               	addlw	-1
 26004  099B  1D03               	skipz
 26005  099C  2999               	goto	u8975
 26006  099D  3551               	lslf	??_main^(0+384),w
 26007  099E  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 26008  099F  0086               	movwf	6
 26009  09A0  3002               	movlw	2	; select bank5/6
 26010  09A1  0087               	movwf	7
 26011  09A2  0020               	movlb	0	; select bank0
 26012  09A3  0859               	movf	_tap_timer,w	;volatile
 26013  09A4  3FC0               	movwi [0]fsr1
 26014  09A5  085A               	movf	_tap_timer+1,w	;volatile
 26015  09A6  3FC1               	movwi [1]fsr1
 26016  09A7  085B               	movf	_tap_timer+2,w	;volatile
 26017  09A8  3FC2               	movwi [2]fsr1
 26018  09A9  085C               	movf	_tap_timer+3,w	;volatile
 26019  09AA  3FC3               	movwi [3]fsr1
 26020                           
 26021                           ;main.c: 188: tap_total += tap_timer;
 26022  09AB  0859               	movf	_tap_timer,w	;volatile
 26023  09AC  0025               	movlb	5	; select bank5
 26024  09AD  07D6               	addwf	_tap_total^(0+640),f
 26025  09AE  0020               	movlb	0	; select bank0
 26026  09AF  085A               	movf	_tap_timer+1,w	;volatile
 26027  09B0  0025               	movlb	5	; select bank5
 26028  09B1  3DD7               	addwfc	(_tap_total+1)^(0+640),f
 26029  09B2  0020               	movlb	0	; select bank0
 26030  09B3  085B               	movf	_tap_timer+2,w	;volatile
 26031  09B4  0025               	movlb	5	; select bank5
 26032  09B5  3DD8               	addwfc	(_tap_total+2)^(0+640),f
 26033  09B6  0020               	movlb	0	; select bank0
 26034  09B7  085C               	movf	_tap_timer+3,w	;volatile
 26035  09B8  0025               	movlb	5	; select bank5
 26036  09B9  3DD9               	addwfc	(_tap_total+3)^(0+640),f
 26037  09BA                     l8705:	
 26038                           
 26039                           ;main.c: 189: }
 26040                           ;main.c: 191: baseline_mod_time = tap_total / tapCntDivisor;
 26041  09BA  0023               	movlb	3	; select bank3
 26042  09BB  085D               	movf	main@tapCntDivisor^(0+384),w
 26043  09BC  0021               	movlb	1	; select bank1
 26044  09BD  00A0               	movwf	___aldiv@divisor^(0+128)
 26045  09BE  0023               	movlb	3	; select bank3
 26046  09BF  085E               	movf	(main@tapCntDivisor+1)^(0+384),w
 26047  09C0  0021               	movlb	1	; select bank1
 26048  09C1  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
 26049  09C2  0D89               	rlf	9,f
 26050  09C3  3B89               	subwfb	9,f
 26051  09C4  0989               	comf	9,f
 26052  09C5  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
 26053  09C6  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
 26054  09C7  0025               	movlb	5	; select bank5
 26055  09C8  0859               	movf	(_tap_total+3)^(0+640),w
 26056  09C9  0021               	movlb	1	; select bank1
 26057  09CA  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
 26058  09CB  0025               	movlb	5	; select bank5
 26059  09CC  0858               	movf	(_tap_total+2)^(0+640),w
 26060  09CD  0021               	movlb	1	; select bank1
 26061  09CE  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
 26062  09CF  0025               	movlb	5	; select bank5
 26063  09D0  0857               	movf	(_tap_total+1)^(0+640),w
 26064  09D1  0021               	movlb	1	; select bank1
 26065  09D2  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
 26066  09D3  0025               	movlb	5	; select bank5
 26067  09D4  0856               	movf	_tap_total^(0+640),w
 26068  09D5  0021               	movlb	1	; select bank1
 26069  09D6  00A4               	movwf	___aldiv@dividend^(0+128)
 26070  09D7  31A0  2051  3188   	fcall	___aldiv
 26071  09DA  0021               	movlb	1	; select bank1
 26072  09DB  0821               	movf	(?___aldiv^(0+128)+1),w
 26073  09DC  0020               	movlb	0	; select bank0
 26074  09DD  00EB               	movwf	_baseline_mod_time+1	;volatile
 26075  09DE  0021               	movlb	1	; select bank1
 26076  09DF  0820               	movf	?___aldiv^(0+128),w
 26077  09E0  0020               	movlb	0	; select bank0
 26078  09E1  00EA               	movwf	_baseline_mod_time	;volatile
 26079                           
 26080                           ;main.c: 192: mod_time_changed = 1;
 26081  09E2  0024               	movlb	4	; select bank4
 26082  09E3  01EC               	clrf	_mod_time_changed^(0+512)
 26083  09E4  0AEC               	incf	_mod_time_changed^(0+512),f
 26084                           
 26085                           ;main.c: 193: tap_timer = 0;
 26086  09E5  3000               	movlw	0
 26087  09E6  0020               	movlb	0	; select bank0
 26088  09E7  00DC               	movwf	_tap_timer+3	;volatile
 26089  09E8  3000               	movlw	0
 26090  09E9  00DB               	movwf	_tap_timer+2	;volatile
 26091  09EA  3000               	movlw	0
 26092  09EB  00DA               	movwf	_tap_timer+1	;volatile
 26093  09EC  3000               	movlw	0
 26094  09ED  00D9               	movwf	_tap_timer	;volatile
 26095                           
 26096                           ;main.c: 194: updateTapTime();
 26097  09EE  3187  27F7  3188   	fcall	_updateTapTime
 26098                           
 26099                           ;main.c: 195: }
 26100                           ;main.c: 196: break;
 26101  09F1  2C95               	goto	l8759
 26102  09F2                     l8713:	
 26103                           ;main.c: 197: case 14:
 26104                           
 26105                           
 26106                           ;main.c: 198: midiLevel = (int) map(midiBuff[2], 127, 0, 0, 1023);
 26107  09F2  30C0               	movlw	192
 26108  09F3  0021               	movlb	1	; select bank1
 26109  09F4  00EA               	movwf	map@out_max^(0+128)
 26110  09F5  307F               	movlw	127
 26111  09F6  00EB               	movwf	(map@out_max+1)^(0+128)
 26112  09F7  3044               	movlw	68
 26113  09F8  00EC               	movwf	(map@out_max+2)^(0+128)
 26114  09F9  3000               	movlw	0
 26115  09FA  00E7               	movwf	map@out_min^(0+128)
 26116  09FB  3000               	movlw	0
 26117  09FC  00E8               	movwf	(map@out_min+1)^(0+128)
 26118  09FD  3000               	movlw	0
 26119  09FE  00E9               	movwf	(map@out_min+2)^(0+128)
 26120  09FF  3000               	movlw	0
 26121  0A00  00E4               	movwf	map@in_max^(0+128)
 26122  0A01  3000               	movlw	0
 26123  0A02  00E5               	movwf	(map@in_max+1)^(0+128)
 26124  0A03  3000               	movlw	0
 26125  0A04  00E6               	movwf	(map@in_max+2)^(0+128)
 26126  0A05  3000               	movlw	0
 26127  0A06  00E1               	movwf	map@in_min^(0+128)
 26128  0A07  30FE               	movlw	254
 26129  0A08  00E2               	movwf	(map@in_min+1)^(0+128)
 26130  0A09  3042               	movlw	66
 26131  0A0A  00E3               	movwf	(map@in_min+2)^(0+128)
 26132  0A0B  0026               	movlb	6	; select bank6
 26133  0A0C  0822               	movf	(_midiBuff^(0+768)+2),w
 26134  0A0D  3190  2000  3188   	fcall	___lbtoft
 26135  0A10  0021               	movlb	1	; select bank1
 26136  0A11  0828               	movf	?___lbtoft^(0+128),w
 26137  0A12  00DE               	movwf	map@x^(0+128)
 26138  0A13  0829               	movf	(?___lbtoft+1)^(0+128),w
 26139  0A14  00DF               	movwf	(map@x+1)^(0+128)
 26140  0A15  082A               	movf	(?___lbtoft+2)^(0+128),w
 26141  0A16  00E0               	movwf	(map@x+2)^(0+128)
 26142  0A17  31A1  21DF  3188   	fcall	_map
 26143  0A1A  0021               	movlb	1	; select bank1
 26144  0A1B  085E               	movf	?_map^(0+128),w
 26145  0A1C  0022               	movlb	2	; select bank2
 26146  0A1D  00A0               	movwf	___fttol@f1^(0+256)
 26147  0A1E  0021               	movlb	1	; select bank1
 26148  0A1F  085F               	movf	(?_map+1)^(0+128),w
 26149  0A20  0022               	movlb	2	; select bank2
 26150  0A21  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26151  0A22  0021               	movlb	1	; select bank1
 26152  0A23  0860               	movf	(?_map+2)^(0+128),w
 26153  0A24  0022               	movlb	2	; select bank2
 26154  0A25  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26155  0A26  31A1  2158  3188   	fcall	___fttol
 26156  0A29  0022               	movlb	2	; select bank2
 26157  0A2A  0821               	movf	(?___fttol^(0+256)+1),w
 26158  0A2B  0024               	movlb	4	; select bank4
 26159  0A2C  00BF               	movwf	(_midiLevel+1)^(0+512)
 26160  0A2D  0022               	movlb	2	; select bank2
 26161  0A2E  0820               	movf	?___fttol^(0+256),w
 26162  0A2F  0024               	movlb	4	; select bank4
 26163  0A30  00BE               	movwf	_midiLevel^(0+512)
 26164                           
 26165                           ;main.c: 199: CCPR4 = scaleA10kPot(midiLevel);
 26166  0A31  083F               	movf	(_midiLevel+1)^(0+512),w
 26167  0A32  0021               	movlb	1	; select bank1
 26168  0A33  00A9               	movwf	(___awtoft@c+1)^(0+128)
 26169  0A34  0024               	movlb	4	; select bank4
 26170  0A35  083E               	movf	_midiLevel^(0+512),w
 26171  0A36  0021               	movlb	1	; select bank1
 26172  0A37  00A8               	movwf	___awtoft@c^(0+128)
 26173  0A38  31B2  22EC  3188   	fcall	___awtoft
 26174  0A3B  0021               	movlb	1	; select bank1
 26175  0A3C  0828               	movf	?___awtoft^(0+128),w
 26176  0A3D  0023               	movlb	3	; select bank3
 26177  0A3E  00D7               	movwf	_main$3248^(0+384)
 26178  0A3F  0021               	movlb	1	; select bank1
 26179  0A40  0829               	movf	(?___awtoft+1)^(0+128),w
 26180  0A41  0023               	movlb	3	; select bank3
 26181  0A42  00D8               	movwf	(_main$3248+1)^(0+384)
 26182  0A43  0021               	movlb	1	; select bank1
 26183  0A44  082A               	movf	(?___awtoft+2)^(0+128),w
 26184  0A45  0023               	movlb	3	; select bank3
 26185  0A46  00D9               	movwf	(_main$3248+2)^(0+384)
 26186                           
 26187                           ;main.c: 199: CCPR4 = scaleA10kPot(midiLevel);
 26188  0A47  0857               	movf	_main$3248^(0+384),w
 26189  0A48  0022               	movlb	2	; select bank2
 26190  0A49  00E7               	movwf	scaleA10kPot@input^(0+256)
 26191  0A4A  0023               	movlb	3	; select bank3
 26192  0A4B  0858               	movf	(_main$3248+1)^(0+384),w
 26193  0A4C  0022               	movlb	2	; select bank2
 26194  0A4D  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
 26195  0A4E  0023               	movlb	3	; select bank3
 26196  0A4F  0859               	movf	(_main$3248+2)^(0+384),w
 26197  0A50  0022               	movlb	2	; select bank2
 26198  0A51  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
 26199  0A52  31A3  2396  3188   	fcall	_scaleA10kPot
 26200  0A55  0022               	movlb	2	; select bank2
 26201  0A56  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
 26202  0A57  0026               	movlb	6	; select bank6
 26203  0A58  0099               	movwf	25	;volatile
 26204  0A59  0022               	movlb	2	; select bank2
 26205  0A5A  0867               	movf	?_scaleA10kPot^(0+256),w
 26206  0A5B  0026               	movlb	6	; select bank6
 26207  0A5C  0098               	movwf	24	;volatile
 26208                           
 26209                           ;main.c: 200: CCPR5 = scaleiA10kPot(midiLevel);
 26210  0A5D  0024               	movlb	4	; select bank4
 26211  0A5E  083F               	movf	(_midiLevel+1)^(0+512),w
 26212  0A5F  0021               	movlb	1	; select bank1
 26213  0A60  00A9               	movwf	(___awtoft@c+1)^(0+128)
 26214  0A61  0024               	movlb	4	; select bank4
 26215  0A62  083E               	movf	_midiLevel^(0+512),w
 26216  0A63  0021               	movlb	1	; select bank1
 26217  0A64  00A8               	movwf	___awtoft@c^(0+128)
 26218  0A65  31B2  22EC  3188   	fcall	___awtoft
 26219  0A68  0021               	movlb	1	; select bank1
 26220  0A69  0828               	movf	?___awtoft^(0+128),w
 26221  0A6A  0023               	movlb	3	; select bank3
 26222  0A6B  00DA               	movwf	_main$3249^(0+384)
 26223  0A6C  0021               	movlb	1	; select bank1
 26224  0A6D  0829               	movf	(?___awtoft+1)^(0+128),w
 26225  0A6E  0023               	movlb	3	; select bank3
 26226  0A6F  00DB               	movwf	(_main$3249+1)^(0+384)
 26227  0A70  0021               	movlb	1	; select bank1
 26228  0A71  082A               	movf	(?___awtoft+2)^(0+128),w
 26229  0A72  0023               	movlb	3	; select bank3
 26230  0A73  00DC               	movwf	(_main$3249+2)^(0+384)
 26231                           
 26232                           ;main.c: 200: CCPR5 = scaleiA10kPot(midiLevel);
 26233  0A74  085A               	movf	_main$3249^(0+384),w
 26234  0A75  0022               	movlb	2	; select bank2
 26235  0A76  00E7               	movwf	scaleiA10kPot@input^(0+256)
 26236  0A77  0023               	movlb	3	; select bank3
 26237  0A78  085B               	movf	(_main$3249+1)^(0+384),w
 26238  0A79  0022               	movlb	2	; select bank2
 26239  0A7A  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
 26240  0A7B  0023               	movlb	3	; select bank3
 26241  0A7C  085C               	movf	(_main$3249+2)^(0+384),w
 26242  0A7D  0022               	movlb	2	; select bank2
 26243  0A7E  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
 26244  0A7F  31A6  2644  3188   	fcall	_scaleiA10kPot
 26245  0A82  0022               	movlb	2	; select bank2
 26246  0A83  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
 26247  0A84  0026               	movlb	6	; select bank6
 26248  0A85  009D               	movwf	29	;volatile
 26249  0A86  0022               	movlb	2	; select bank2
 26250  0A87  0867               	movf	?_scaleiA10kPot^(0+256),w
 26251  0A88  0026               	movlb	6	; select bank6
 26252  0A89  009C               	movwf	28	;volatile
 26253                           
 26254                           ;main.c: 201: break;
 26255  0A8A  2C95               	goto	l8759
 26256  0A8B                     l8719:	
 26257                           ;main.c: 202: case 15:
 26258                           
 26259                           
 26260                           ;main.c: 203: midiLevel = (int) map(midiBuff[2], 127, 0, 0, 1023);
 26261  0A8B  30C0               	movlw	192
 26262  0A8C  0021               	movlb	1	; select bank1
 26263  0A8D  00EA               	movwf	map@out_max^(0+128)
 26264  0A8E  307F               	movlw	127
 26265  0A8F  00EB               	movwf	(map@out_max+1)^(0+128)
 26266  0A90  3044               	movlw	68
 26267  0A91  00EC               	movwf	(map@out_max+2)^(0+128)
 26268  0A92  3000               	movlw	0
 26269  0A93  00E7               	movwf	map@out_min^(0+128)
 26270  0A94  3000               	movlw	0
 26271  0A95  00E8               	movwf	(map@out_min+1)^(0+128)
 26272  0A96  3000               	movlw	0
 26273  0A97  00E9               	movwf	(map@out_min+2)^(0+128)
 26274  0A98  3000               	movlw	0
 26275  0A99  00E4               	movwf	map@in_max^(0+128)
 26276  0A9A  3000               	movlw	0
 26277  0A9B  00E5               	movwf	(map@in_max+1)^(0+128)
 26278  0A9C  3000               	movlw	0
 26279  0A9D  00E6               	movwf	(map@in_max+2)^(0+128)
 26280  0A9E  3000               	movlw	0
 26281  0A9F  00E1               	movwf	map@in_min^(0+128)
 26282  0AA0  30FE               	movlw	254
 26283  0AA1  00E2               	movwf	(map@in_min+1)^(0+128)
 26284  0AA2  3042               	movlw	66
 26285  0AA3  00E3               	movwf	(map@in_min+2)^(0+128)
 26286  0AA4  0026               	movlb	6	; select bank6
 26287  0AA5  0822               	movf	(_midiBuff^(0+768)+2),w
 26288  0AA6  3190  2000  3188   	fcall	___lbtoft
 26289  0AA9  0021               	movlb	1	; select bank1
 26290  0AAA  0828               	movf	?___lbtoft^(0+128),w
 26291  0AAB  00DE               	movwf	map@x^(0+128)
 26292  0AAC  0829               	movf	(?___lbtoft+1)^(0+128),w
 26293  0AAD  00DF               	movwf	(map@x+1)^(0+128)
 26294  0AAE  082A               	movf	(?___lbtoft+2)^(0+128),w
 26295  0AAF  00E0               	movwf	(map@x+2)^(0+128)
 26296  0AB0  31A1  21DF  3188   	fcall	_map
 26297  0AB3  0021               	movlb	1	; select bank1
 26298  0AB4  085E               	movf	?_map^(0+128),w
 26299  0AB5  0022               	movlb	2	; select bank2
 26300  0AB6  00A0               	movwf	___fttol@f1^(0+256)
 26301  0AB7  0021               	movlb	1	; select bank1
 26302  0AB8  085F               	movf	(?_map+1)^(0+128),w
 26303  0AB9  0022               	movlb	2	; select bank2
 26304  0ABA  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26305  0ABB  0021               	movlb	1	; select bank1
 26306  0ABC  0860               	movf	(?_map+2)^(0+128),w
 26307  0ABD  0022               	movlb	2	; select bank2
 26308  0ABE  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26309  0ABF  31A1  2158  3188   	fcall	___fttol
 26310  0AC2  0022               	movlb	2	; select bank2
 26311  0AC3  0821               	movf	(?___fttol^(0+256)+1),w
 26312  0AC4  0024               	movlb	4	; select bank4
 26313  0AC5  00BF               	movwf	(_midiLevel+1)^(0+512)
 26314  0AC6  0022               	movlb	2	; select bank2
 26315  0AC7  0820               	movf	?___fttol^(0+256),w
 26316  0AC8  0024               	movlb	4	; select bank4
 26317  0AC9  00BE               	movwf	_midiLevel^(0+512)
 26318                           
 26319                           ;main.c: 204: CCPR1 = scaleA100kPot(1023 - midiLevel);
 26320  0ACA  093E               	comf	_midiLevel^(0+512),w
 26321  0ACB  0023               	movlb	3	; select bank3
 26322  0ACC  00D1               	movwf	??_main^(0+384)
 26323  0ACD  0024               	movlb	4	; select bank4
 26324  0ACE  093F               	comf	(_midiLevel+1)^(0+512),w
 26325  0ACF  0023               	movlb	3	; select bank3
 26326  0AD0  00D2               	movwf	(??_main^(0+384)+1)
 26327  0AD1  0AD1               	incf	??_main^(0+384),f
 26328  0AD2  1903               	skipnz
 26329  0AD3  0AD2               	incf	(??_main^(0+384)+1),f
 26330  0AD4  0851               	movf	??_main^(0+384),w
 26331  0AD5  3EFF               	addlw	255
 26332  0AD6  0021               	movlb	1	; select bank1
 26333  0AD7  00A8               	movwf	___awtoft@c^(0+128)
 26334  0AD8  3003               	movlw	3
 26335  0AD9  0023               	movlb	3	; select bank3
 26336  0ADA  3D52               	addwfc	(??_main+1)^(0+384),w
 26337  0ADB  0021               	movlb	1	; select bank1
 26338  0ADC  00A9               	movwf	(___awtoft@c+1)^(0+128)
 26339  0ADD  31B2  22EC  3188   	fcall	___awtoft
 26340  0AE0  0021               	movlb	1	; select bank1
 26341  0AE1  0828               	movf	?___awtoft^(0+128),w
 26342  0AE2  0023               	movlb	3	; select bank3
 26343  0AE3  00DF               	movwf	_main$3250^(0+384)
 26344  0AE4  0021               	movlb	1	; select bank1
 26345  0AE5  0829               	movf	(?___awtoft+1)^(0+128),w
 26346  0AE6  0023               	movlb	3	; select bank3
 26347  0AE7  00E0               	movwf	(_main$3250+1)^(0+384)
 26348  0AE8  0021               	movlb	1	; select bank1
 26349  0AE9  082A               	movf	(?___awtoft+2)^(0+128),w
 26350  0AEA  0023               	movlb	3	; select bank3
 26351  0AEB  00E1               	movwf	(_main$3250+2)^(0+384)
 26352                           
 26353                           ;main.c: 204: CCPR1 = scaleA100kPot(1023 - midiLevel);
 26354  0AEC  085F               	movf	_main$3250^(0+384),w
 26355  0AED  0022               	movlb	2	; select bank2
 26356  0AEE  00E7               	movwf	scaleA100kPot@input^(0+256)
 26357  0AEF  0023               	movlb	3	; select bank3
 26358  0AF0  0860               	movf	(_main$3250+1)^(0+384),w
 26359  0AF1  0022               	movlb	2	; select bank2
 26360  0AF2  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 26361  0AF3  0023               	movlb	3	; select bank3
 26362  0AF4  0861               	movf	(_main$3250+2)^(0+384),w
 26363  0AF5  0022               	movlb	2	; select bank2
 26364  0AF6  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 26365  0AF7  31A0  20D3  3188   	fcall	_scaleA100kPot
 26366  0AFA  0022               	movlb	2	; select bank2
 26367  0AFB  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
 26368  0AFC  0025               	movlb	5	; select bank5
 26369  0AFD  0092               	movwf	18	;volatile
 26370  0AFE  0022               	movlb	2	; select bank2
 26371  0AFF  0867               	movf	?_scaleA100kPot^(0+256),w
 26372  0B00  0025               	movlb	5	; select bank5
 26373  0B01  0091               	movwf	17	;volatile
 26374                           
 26375                           ;main.c: 205: CCPR2 = scaleA100kPot(1023 - midiLevel);
 26376  0B02  0024               	movlb	4	; select bank4
 26377  0B03  093E               	comf	_midiLevel^(0+512),w
 26378  0B04  0023               	movlb	3	; select bank3
 26379  0B05  00D1               	movwf	??_main^(0+384)
 26380  0B06  0024               	movlb	4	; select bank4
 26381  0B07  093F               	comf	(_midiLevel+1)^(0+512),w
 26382  0B08  0023               	movlb	3	; select bank3
 26383  0B09  00D2               	movwf	(??_main^(0+384)+1)
 26384  0B0A  0AD1               	incf	??_main^(0+384),f
 26385  0B0B  1903               	skipnz
 26386  0B0C  0AD2               	incf	(??_main^(0+384)+1),f
 26387  0B0D  0851               	movf	??_main^(0+384),w
 26388  0B0E  3EFF               	addlw	255
 26389  0B0F  0021               	movlb	1	; select bank1
 26390  0B10  00A8               	movwf	___awtoft@c^(0+128)
 26391  0B11  3003               	movlw	3
 26392  0B12  0023               	movlb	3	; select bank3
 26393  0B13  3D52               	addwfc	(??_main+1)^(0+384),w
 26394  0B14  0021               	movlb	1	; select bank1
 26395  0B15  00A9               	movwf	(___awtoft@c+1)^(0+128)
 26396  0B16  31B2  22EC  3188   	fcall	___awtoft
 26397  0B19  0021               	movlb	1	; select bank1
 26398  0B1A  0828               	movf	?___awtoft^(0+128),w
 26399  0B1B  0023               	movlb	3	; select bank3
 26400  0B1C  00DF               	movwf	_main$3250^(0+384)
 26401  0B1D  0021               	movlb	1	; select bank1
 26402  0B1E  0829               	movf	(?___awtoft+1)^(0+128),w
 26403  0B1F  0023               	movlb	3	; select bank3
 26404  0B20  00E0               	movwf	(_main$3250+1)^(0+384)
 26405  0B21  0021               	movlb	1	; select bank1
 26406  0B22  082A               	movf	(?___awtoft+2)^(0+128),w
 26407  0B23  0023               	movlb	3	; select bank3
 26408  0B24  00E1               	movwf	(_main$3250+2)^(0+384)
 26409                           
 26410                           ;main.c: 205: CCPR2 = scaleA100kPot(1023 - midiLevel);
 26411  0B25  085F               	movf	_main$3250^(0+384),w
 26412  0B26  0022               	movlb	2	; select bank2
 26413  0B27  00E7               	movwf	scaleA100kPot@input^(0+256)
 26414  0B28  0023               	movlb	3	; select bank3
 26415  0B29  0860               	movf	(_main$3250+1)^(0+384),w
 26416  0B2A  0022               	movlb	2	; select bank2
 26417  0B2B  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 26418  0B2C  0023               	movlb	3	; select bank3
 26419  0B2D  0861               	movf	(_main$3250+2)^(0+384),w
 26420  0B2E  0022               	movlb	2	; select bank2
 26421  0B2F  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 26422  0B30  31A0  20D3  3188   	fcall	_scaleA100kPot
 26423  0B33  0022               	movlb	2	; select bank2
 26424  0B34  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
 26425  0B35  0025               	movlb	5	; select bank5
 26426  0B36  0099               	movwf	25	;volatile
 26427  0B37  0022               	movlb	2	; select bank2
 26428  0B38  0867               	movf	?_scaleA100kPot^(0+256),w
 26429  0B39  0025               	movlb	5	; select bank5
 26430  0B3A  0098               	movwf	24	;volatile
 26431                           
 26432                           ;main.c: 206: break;
 26433  0B3B  2C95               	goto	l8759
 26434  0B3C                     l8725:	
 26435                           ;main.c: 207: case 16:
 26436                           
 26437                           
 26438                           ;main.c: 208: symmetry = (int) map(midiBuff[2], 127, 0, 45, 315);
 26439  0B3C  3080               	movlw	128
 26440  0B3D  0021               	movlb	1	; select bank1
 26441  0B3E  00EA               	movwf	map@out_max^(0+128)
 26442  0B3F  309D               	movlw	157
 26443  0B40  00EB               	movwf	(map@out_max+1)^(0+128)
 26444  0B41  3043               	movlw	67
 26445  0B42  00EC               	movwf	(map@out_max+2)^(0+128)
 26446  0B43  3000               	movlw	0
 26447  0B44  00E7               	movwf	map@out_min^(0+128)
 26448  0B45  3034               	movlw	52
 26449  0B46  00E8               	movwf	(map@out_min+1)^(0+128)
 26450  0B47  3042               	movlw	66
 26451  0B48  00E9               	movwf	(map@out_min+2)^(0+128)
 26452  0B49  3000               	movlw	0
 26453  0B4A  00E4               	movwf	map@in_max^(0+128)
 26454  0B4B  3000               	movlw	0
 26455  0B4C  00E5               	movwf	(map@in_max+1)^(0+128)
 26456  0B4D  3000               	movlw	0
 26457  0B4E  00E6               	movwf	(map@in_max+2)^(0+128)
 26458  0B4F  3000               	movlw	0
 26459  0B50  00E1               	movwf	map@in_min^(0+128)
 26460  0B51  30FE               	movlw	254
 26461  0B52  00E2               	movwf	(map@in_min+1)^(0+128)
 26462  0B53  3042               	movlw	66
 26463  0B54  00E3               	movwf	(map@in_min+2)^(0+128)
 26464  0B55  0026               	movlb	6	; select bank6
 26465  0B56  0822               	movf	(_midiBuff^(0+768)+2),w
 26466  0B57  3190  2000  3188   	fcall	___lbtoft
 26467  0B5A  0021               	movlb	1	; select bank1
 26468  0B5B  0828               	movf	?___lbtoft^(0+128),w
 26469  0B5C  00DE               	movwf	map@x^(0+128)
 26470  0B5D  0829               	movf	(?___lbtoft+1)^(0+128),w
 26471  0B5E  00DF               	movwf	(map@x+1)^(0+128)
 26472  0B5F  082A               	movf	(?___lbtoft+2)^(0+128),w
 26473  0B60  00E0               	movwf	(map@x+2)^(0+128)
 26474  0B61  31A1  21DF  3188   	fcall	_map
 26475  0B64  0021               	movlb	1	; select bank1
 26476  0B65  085E               	movf	?_map^(0+128),w
 26477  0B66  0022               	movlb	2	; select bank2
 26478  0B67  00A0               	movwf	___fttol@f1^(0+256)
 26479  0B68  0021               	movlb	1	; select bank1
 26480  0B69  085F               	movf	(?_map+1)^(0+128),w
 26481  0B6A  0022               	movlb	2	; select bank2
 26482  0B6B  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26483  0B6C  0021               	movlb	1	; select bank1
 26484  0B6D  0860               	movf	(?_map+2)^(0+128),w
 26485  0B6E  0022               	movlb	2	; select bank2
 26486  0B6F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26487  0B70  31A1  2158  3188   	fcall	___fttol
 26488  0B73  0022               	movlb	2	; select bank2
 26489  0B74  0821               	movf	(?___fttol^(0+256)+1),w
 26490  0B75  0023               	movlb	3	; select bank3
 26491  0B76  00EB               	movwf	(_symmetry+1)^(0+384)
 26492  0B77  0022               	movlb	2	; select bank2
 26493  0B78  0820               	movf	?___fttol^(0+256),w
 26494  0B79  0023               	movlb	3	; select bank3
 26495  0B7A  00EA               	movwf	_symmetry^(0+384)
 26496                           
 26497                           ;main.c: 209: break;
 26498  0B7B  2C95               	goto	l8759
 26499  0B7C                     l8727:	
 26500                           ;main.c: 210: case 17:
 26501                           
 26502                           
 26503                           ;main.c: 211: baseline_mod_time = (int)map(midiBuff[2], 127, 0, 180, 2820);
 26504  0B7C  3040               	movlw	64
 26505  0B7D  0021               	movlb	1	; select bank1
 26506  0B7E  00EA               	movwf	map@out_max^(0+128)
 26507  0B7F  3030               	movlw	48
 26508  0B80  00EB               	movwf	(map@out_max+1)^(0+128)
 26509  0B81  3045               	movlw	69
 26510  0B82  00EC               	movwf	(map@out_max+2)^(0+128)
 26511  0B83  3000               	movlw	0
 26512  0B84  00E7               	movwf	map@out_min^(0+128)
 26513  0B85  3034               	movlw	52
 26514  0B86  00E8               	movwf	(map@out_min+1)^(0+128)
 26515  0B87  3043               	movlw	67
 26516  0B88  00E9               	movwf	(map@out_min+2)^(0+128)
 26517  0B89  3000               	movlw	0
 26518  0B8A  00E4               	movwf	map@in_max^(0+128)
 26519  0B8B  3000               	movlw	0
 26520  0B8C  00E5               	movwf	(map@in_max+1)^(0+128)
 26521  0B8D  3000               	movlw	0
 26522  0B8E  00E6               	movwf	(map@in_max+2)^(0+128)
 26523  0B8F  3000               	movlw	0
 26524  0B90  00E1               	movwf	map@in_min^(0+128)
 26525  0B91  30FE               	movlw	254
 26526  0B92  00E2               	movwf	(map@in_min+1)^(0+128)
 26527  0B93  3042               	movlw	66
 26528  0B94  00E3               	movwf	(map@in_min+2)^(0+128)
 26529  0B95  0026               	movlb	6	; select bank6
 26530  0B96  0822               	movf	(_midiBuff^(0+768)+2),w
 26531  0B97  3190  2000  3188   	fcall	___lbtoft
 26532  0B9A  0021               	movlb	1	; select bank1
 26533  0B9B  0828               	movf	?___lbtoft^(0+128),w
 26534  0B9C  00DE               	movwf	map@x^(0+128)
 26535  0B9D  0829               	movf	(?___lbtoft+1)^(0+128),w
 26536  0B9E  00DF               	movwf	(map@x+1)^(0+128)
 26537  0B9F  082A               	movf	(?___lbtoft+2)^(0+128),w
 26538  0BA0  00E0               	movwf	(map@x+2)^(0+128)
 26539  0BA1  31A1  21DF  3188   	fcall	_map
 26540  0BA4  0021               	movlb	1	; select bank1
 26541  0BA5  085E               	movf	?_map^(0+128),w
 26542  0BA6  0022               	movlb	2	; select bank2
 26543  0BA7  00A0               	movwf	___fttol@f1^(0+256)
 26544  0BA8  0021               	movlb	1	; select bank1
 26545  0BA9  085F               	movf	(?_map+1)^(0+128),w
 26546  0BAA  0022               	movlb	2	; select bank2
 26547  0BAB  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26548  0BAC  0021               	movlb	1	; select bank1
 26549  0BAD  0860               	movf	(?_map+2)^(0+128),w
 26550  0BAE  0022               	movlb	2	; select bank2
 26551  0BAF  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26552  0BB0  31A1  2158  3188   	fcall	___fttol
 26553  0BB3  0022               	movlb	2	; select bank2
 26554  0BB4  0821               	movf	(?___fttol^(0+256)+1),w
 26555  0BB5  0020               	movlb	0	; select bank0
 26556  0BB6  00EB               	movwf	_baseline_mod_time+1	;volatile
 26557  0BB7  0022               	movlb	2	; select bank2
 26558  0BB8  0820               	movf	?___fttol^(0+256),w
 26559  0BB9  0020               	movlb	0	; select bank0
 26560  0BBA  00EA               	movwf	_baseline_mod_time	;volatile
 26561                           
 26562                           ;main.c: 212: updateTapTime();
 26563  0BBB  3187  27F7  3188   	fcall	_updateTapTime
 26564                           
 26565                           ;main.c: 213: break;
 26566  0BBE  2C95               	goto	l8759
 26567  0BBF                     l8729:	
 26568                           ;main.c: 214: case 18:
 26569                           
 26570                           
 26571                           ;main.c: 215: adjusted_pot_value = (int)map(midiBuff[2], 127, 0, 1275, 0);
 26572  0BBF  3000               	movlw	0
 26573  0BC0  0021               	movlb	1	; select bank1
 26574  0BC1  00EA               	movwf	map@out_max^(0+128)
 26575  0BC2  3000               	movlw	0
 26576  0BC3  00EB               	movwf	(map@out_max+1)^(0+128)
 26577  0BC4  3000               	movlw	0
 26578  0BC5  00EC               	movwf	(map@out_max+2)^(0+128)
 26579  0BC6  3060               	movlw	96
 26580  0BC7  00E7               	movwf	map@out_min^(0+128)
 26581  0BC8  309F               	movlw	159
 26582  0BC9  00E8               	movwf	(map@out_min+1)^(0+128)
 26583  0BCA  3044               	movlw	68
 26584  0BCB  00E9               	movwf	(map@out_min+2)^(0+128)
 26585  0BCC  3000               	movlw	0
 26586  0BCD  00E4               	movwf	map@in_max^(0+128)
 26587  0BCE  3000               	movlw	0
 26588  0BCF  00E5               	movwf	(map@in_max+1)^(0+128)
 26589  0BD0  3000               	movlw	0
 26590  0BD1  00E6               	movwf	(map@in_max+2)^(0+128)
 26591  0BD2  3000               	movlw	0
 26592  0BD3  00E1               	movwf	map@in_min^(0+128)
 26593  0BD4  30FE               	movlw	254
 26594  0BD5  00E2               	movwf	(map@in_min+1)^(0+128)
 26595  0BD6  3042               	movlw	66
 26596  0BD7  00E3               	movwf	(map@in_min+2)^(0+128)
 26597  0BD8  0026               	movlb	6	; select bank6
 26598  0BD9  0822               	movf	(_midiBuff^(0+768)+2),w
 26599  0BDA  3190  2000  3188   	fcall	___lbtoft
 26600  0BDD  0021               	movlb	1	; select bank1
 26601  0BDE  0828               	movf	?___lbtoft^(0+128),w
 26602  0BDF  00DE               	movwf	map@x^(0+128)
 26603  0BE0  0829               	movf	(?___lbtoft+1)^(0+128),w
 26604  0BE1  00DF               	movwf	(map@x+1)^(0+128)
 26605  0BE2  082A               	movf	(?___lbtoft+2)^(0+128),w
 26606  0BE3  00E0               	movwf	(map@x+2)^(0+128)
 26607  0BE4  31A1  21DF  3188   	fcall	_map
 26608  0BE7  0021               	movlb	1	; select bank1
 26609  0BE8  085E               	movf	?_map^(0+128),w
 26610  0BE9  0022               	movlb	2	; select bank2
 26611  0BEA  00A0               	movwf	___fttol@f1^(0+256)
 26612  0BEB  0021               	movlb	1	; select bank1
 26613  0BEC  085F               	movf	(?_map+1)^(0+128),w
 26614  0BED  0022               	movlb	2	; select bank2
 26615  0BEE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26616  0BEF  0021               	movlb	1	; select bank1
 26617  0BF0  0860               	movf	(?_map+2)^(0+128),w
 26618  0BF1  0022               	movlb	2	; select bank2
 26619  0BF2  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26620  0BF3  31A1  2158  3188   	fcall	___fttol
 26621  0BF6  0022               	movlb	2	; select bank2
 26622  0BF7  0821               	movf	(?___fttol^(0+256)+1),w
 26623  0BF8  0025               	movlb	5	; select bank5
 26624  0BF9  00DB               	movwf	(_adjusted_pot_value+1)^(0+640)
 26625  0BFA  0022               	movlb	2	; select bank2
 26626  0BFB  0820               	movf	?___fttol^(0+256),w
 26627  0BFC  0025               	movlb	5	; select bank5
 26628  0BFD  00DA               	movwf	_adjusted_pot_value^(0+640)
 26629                           
 26630                           ;main.c: 216: break;
 26631  0BFE  2C95               	goto	l8759
 26632  0BFF                     l8731:	
 26633                           ;main.c: 217: case 19:
 26634                           
 26635                           
 26636                           ;main.c: 218: top_push_state = midiBuff[2];
 26637  0BFF  0026               	movlb	6	; select bank6
 26638  0C00  0822               	movf	(_midiBuff^(0+768)+2),w
 26639  0C01  0023               	movlb	3	; select bank3
 26640  0C02  00D1               	movwf	??_main^(0+384)
 26641  0C03  01D2               	clrf	(??_main^(0+384)+1)
 26642  0C04  0851               	movf	??_main^(0+384),w
 26643  0C05  0020               	movlb	0	; select bank0
 26644  0C06  00EC               	movwf	_top_push_state
 26645  0C07  0023               	movlb	3	; select bank3
 26646  0C08  0852               	movf	(??_main+1)^(0+384),w
 26647  0C09  0020               	movlb	0	; select bank0
 26648  0C0A  00ED               	movwf	_top_push_state+1
 26649                           
 26650                           ;main.c: 219: if (top_push_state > 5) {
 26651  0C0B  086D               	movf	_top_push_state+1,w
 26652  0C0C  3A80               	xorlw	128
 26653  0C0D  0023               	movlb	3	; select bank3
 26654  0C0E  00D1               	movwf	??_main^(0+384)
 26655  0C0F  3080               	movlw	128
 26656  0C10  0251               	subwf	??_main^(0+384),w
 26657  0C11  1D03               	skipz
 26658  0C12  2C16               	goto	u8985
 26659  0C13  3006               	movlw	6
 26660  0C14  0020               	movlb	0	; select bank0
 26661  0C15  026C               	subwf	_top_push_state,w
 26662  0C16                     u8985:	
 26663  0C16  1C03               	skipc
 26664  0C17  2C1D               	goto	l8735
 26665                           
 26666                           ;main.c: 220: top_push_state = 6;
 26667  0C18  3006               	movlw	6
 26668  0C19  0020               	movlb	0	; select bank0
 26669  0C1A  00EC               	movwf	_top_push_state
 26670  0C1B  3000               	movlw	0
 26671  0C1C  00ED               	movwf	_top_push_state+1
 26672  0C1D                     l8735:	
 26673                           
 26674                           ;main.c: 221: }
 26675                           ;main.c: 222: if (top_push_state == 0) {
 26676  0C1D  0020               	movlb	0	; select bank0
 26677  0C1E  086C               	movf	_top_push_state,w
 26678  0C1F  046D               	iorwf	_top_push_state+1,w
 26679  0C20  1D03               	btfss	3,2
 26680  0C21  2C26               	goto	l8739
 26681                           
 26682                           ;main.c: 223: top_push_state = 6;
 26683  0C22  3006               	movlw	6
 26684  0C23  00EC               	movwf	_top_push_state
 26685  0C24  3000               	movlw	0
 26686  0C25  00ED               	movwf	_top_push_state+1
 26687  0C26                     l8739:	
 26688                           
 26689                           ;main.c: 224: }
 26690                           ;main.c: 225: set_leds_top(top_push_state, 1);
 26691  0C26  086D               	movf	_top_push_state+1,w
 26692  0C27  0021               	movlb	1	; select bank1
 26693  0C28  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 26694  0C29  0020               	movlb	0	; select bank0
 26695  0C2A  086C               	movf	_top_push_state,w
 26696  0C2B  0021               	movlb	1	; select bank1
 26697  0C2C  00A0               	movwf	set_leds_top@x^(0+128)
 26698  0C2D  3001               	movlw	1
 26699  0C2E  00A2               	movwf	set_leds_top@ledState^(0+128)
 26700  0C2F  3000               	movlw	0
 26701  0C30  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 26702  0C31  31AC  2440  3188   	fcall	_set_leds_top
 26703                           
 26704                           ;main.c: 226: mod_time_changed = 1;
 26705  0C34  0024               	movlb	4	; select bank4
 26706  0C35  01EC               	clrf	_mod_time_changed^(0+512)
 26707  0C36  0AEC               	incf	_mod_time_changed^(0+512),f
 26708                           
 26709                           ;main.c: 227: updateSubdivisionState();
 26710  0C37  31BF  27B8  3188   	fcall	_updateSubdivisionState
 26711                           
 26712                           ;main.c: 228: break;
 26713  0C3A  2C95               	goto	l8759
 26714  0C3B                     l467:	
 26715                           ;main.c: 229: case 20:
 26716                           
 26717                           
 26718                           ;main.c: 230: modulation_changed = 1;
 26719  0C3B  0024               	movlb	4	; select bank4
 26720  0C3C  01CE               	clrf	_modulation_changed^(0+512)
 26721  0C3D  0ACE               	incf	_modulation_changed^(0+512),f
 26722                           
 26723                           ;main.c: 231: bottom_push_state = midiBuff[2];
 26724  0C3E  0026               	movlb	6	; select bank6
 26725  0C3F  0822               	movf	(_midiBuff^(0+768)+2),w
 26726  0C40  0023               	movlb	3	; select bank3
 26727  0C41  00D1               	movwf	??_main^(0+384)
 26728  0C42  01D2               	clrf	(??_main^(0+384)+1)
 26729  0C43  0851               	movf	??_main^(0+384),w
 26730  0C44  00E2               	movwf	_bottom_push_state^(0+384)
 26731  0C45  0852               	movf	(??_main+1)^(0+384),w
 26732  0C46  00E3               	movwf	(_bottom_push_state+1)^(0+384)
 26733                           
 26734                           ;main.c: 232: if (bottom_push_state > 5) {
 26735  0C47  0863               	movf	(_bottom_push_state+1)^(0+384),w
 26736  0C48  3A80               	xorlw	128
 26737  0C49  00D1               	movwf	??_main^(0+384)
 26738  0C4A  3080               	movlw	128
 26739  0C4B  0251               	subwf	??_main^(0+384),w
 26740  0C4C  1D03               	skipz
 26741  0C4D  2C50               	goto	u9005
 26742  0C4E  3006               	movlw	6
 26743  0C4F  0262               	subwf	_bottom_push_state^(0+384),w
 26744  0C50                     u9005:	
 26745  0C50  1C03               	skipc
 26746  0C51  2C57               	goto	l468
 26747                           
 26748                           ;main.c: 233: bottom_push_state = 1;
 26749  0C52  3001               	movlw	1
 26750  0C53  0023               	movlb	3	; select bank3
 26751  0C54  00E2               	movwf	_bottom_push_state^(0+384)
 26752  0C55  3000               	movlw	0
 26753  0C56  00E3               	movwf	(_bottom_push_state^(0+384)+1)
 26754  0C57                     l468:	
 26755                           
 26756                           ;main.c: 234: }
 26757                           ;main.c: 235: if (bottom_push_state < 1) {
 26758  0C57  0023               	movlb	3	; select bank3
 26759  0C58  0863               	movf	(_bottom_push_state+1)^(0+384),w
 26760  0C59  3A80               	xorlw	128
 26761  0C5A  00D1               	movwf	??_main^(0+384)
 26762  0C5B  3080               	movlw	128
 26763  0C5C  0251               	subwf	??_main^(0+384),w
 26764  0C5D  1D03               	skipz
 26765  0C5E  2C61               	goto	u9015
 26766  0C5F  3001               	movlw	1
 26767  0C60  0262               	subwf	_bottom_push_state^(0+384),w
 26768  0C61                     u9015:	
 26769  0C61  1803               	skipnc
 26770  0C62  2C68               	goto	l8751
 26771                           
 26772                           ;main.c: 236: bottom_push_state = 1;
 26773  0C63  3001               	movlw	1
 26774  0C64  0023               	movlb	3	; select bank3
 26775  0C65  00E2               	movwf	_bottom_push_state^(0+384)
 26776  0C66  3000               	movlw	0
 26777  0C67  00E3               	movwf	(_bottom_push_state^(0+384)+1)
 26778  0C68                     l8751:	
 26779                           
 26780                           ;main.c: 237: }
 26781                           ;main.c: 238: set_leds_bottom(bottom_push_state);
 26782  0C68  0023               	movlb	3	; select bank3
 26783  0C69  0863               	movf	(_bottom_push_state+1)^(0+384),w
 26784  0C6A  0021               	movlb	1	; select bank1
 26785  0C6B  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 26786  0C6C  0023               	movlb	3	; select bank3
 26787  0C6D  0862               	movf	_bottom_push_state^(0+384),w
 26788  0C6E  0021               	movlb	1	; select bank1
 26789  0C6F  00A0               	movwf	set_leds_bottom@x^(0+128)
 26790  0C70  31B6  2690  3188   	fcall	_set_leds_bottom
 26791                           
 26792                           ;main.c: 239: updateWaveFormState();
 26793  0C73  31BF  27B0  3188   	fcall	_updateWaveFormState
 26794                           
 26795                           ;main.c: 241: }
 26796                           
 26797                           ;main.c: 240: break;
 26798  0C76  2C95               	goto	l8759
 26799  0C77                     l8757:	
 26800  0C77  0026               	movlb	6	; select bank6
 26801  0C78  0821               	movf	(_midiBuff^(0+768)+1),w
 26802                           
 26803                           ; Switch size 1, requested type "space"
 26804                           ; Number of cases is 9, Range of values is 14 to 102
 26805                           ; switch strategies available:
 26806                           ; Name         Instructions Cycles
 26807                           ; simple_byte           28    15 (average)
 26808                           ; direct_byte          187     9 (fixed)
 26809                           ; jumptable            263     9 (fixed)
 26810                           ;	Chosen strategy is simple_byte
 26811  0C79  3A0E               	xorlw	14	; case 14
 26812  0C7A  1903               	skipnz
 26813  0C7B  29F2               	goto	l8713
 26814  0C7C  3A01               	xorlw	1	; case 15
 26815  0C7D  1903               	skipnz
 26816  0C7E  2A8B               	goto	l8719
 26817  0C7F  3A1F               	xorlw	31	; case 16
 26818  0C80  1903               	skipnz
 26819  0C81  2B3C               	goto	l8725
 26820  0C82  3A01               	xorlw	1	; case 17
 26821  0C83  1903               	skipnz
 26822  0C84  2B7C               	goto	l8727
 26823  0C85  3A03               	xorlw	3	; case 18
 26824  0C86  1903               	skipnz
 26825  0C87  2BBF               	goto	l8729
 26826  0C88  3A01               	xorlw	1	; case 19
 26827  0C89  1903               	skipnz
 26828  0C8A  2BFF               	goto	l8731
 26829  0C8B  3A07               	xorlw	7	; case 20
 26830  0C8C  1903               	skipnz
 26831  0C8D  2C3B               	goto	l467
 26832  0C8E  3A49               	xorlw	73	; case 93
 26833  0C8F  1903               	skipnz
 26834  0C90  28A3               	goto	l8667
 26835  0C91  3A3B               	xorlw	59	; case 102
 26836  0C92  1903               	skipnz
 26837  0C93  2FFE               	goto	L27
 26838  0C94  2C95               	goto	l8759
 26839  0C95                     l8759:	
 26840                           
 26841                           ;main.c: 242: }
 26842                           ;main.c: 243: }
 26843                           ;main.c: 244: }
 26844                           ;main.c: 245: }
 26845                           ;main.c: 248: update_mode();
 26846  0C95  31B5  25E5  3188   	fcall	_update_mode
 26847                           
 26848                           ;main.c: 249: update_selectMode();
 26849  0C98  31AC  24E8  3188   	fcall	_update_selectMode
 26850                           
 26851                           ;main.c: 251: updateSwitchBypass();
 26852  0C9B  31A7  270F  3188   	fcall	_updateSwitchBypass
 26853                           
 26854                           ;main.c: 252: if (presetSaveMode != 1) {
 26855  0C9E  0020               	movlb	0	; select bank0
 26856  0C9F  0365               	decf	_presetSaveMode,w
 26857  0CA0  1903               	btfsc	3,2
 26858  0CA1  2CA5               	goto	l8765
 26859                           
 26860                           ;main.c: 253: updateSwitchTap();
 26861  0CA2  3196  2623  3188   	fcall	_updateSwitchTap
 26862  0CA5                     l8765:	
 26863                           
 26864                           ;main.c: 254: }
 26865                           ;main.c: 256: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
 26866  0CA5  0020               	movlb	0	; select bank0
 26867  0CA6  0365               	decf	_presetSaveMode,w
 26868  0CA7  1903               	btfsc	3,2
 26869  0CA8  2CB4               	goto	l8771
 26870  0CA9  0864               	movf	_mode2_state,w
 26871  0CAA  0024               	movlb	4	; select bank4
 26872  0CAB  066D               	xorwf	_presetModeCnst^(0+512),w
 26873  0CAC  1903               	skipnz
 26874  0CAD  2CB4               	goto	l8771
 26875                           
 26876                           ;main.c: 257: read_bottom_tactile();
 26877  0CAE  31AA  2260  3188   	fcall	_read_bottom_tactile
 26878                           
 26879                           ;main.c: 258: read_top_tactile();
 26880  0CB1  31A0  2000  3188   	fcall	_read_top_tactile
 26881  0CB4                     l8771:	
 26882                           
 26883                           ;main.c: 259: }
 26884                           ;main.c: 262: knob_1_pos = adc_convert(0);
 26885  0CB4  3000               	movlw	0
 26886  0CB5  31B1  2145  3188   	fcall	_adc_convert
 26887  0CB8  0021               	movlb	1	; select bank1
 26888  0CB9  0821               	movf	(?_adc_convert+1)^(0+128),w
 26889  0CBA  0024               	movlb	4	; select bank4
 26890  0CBB  00B1               	movwf	(_knob_1_pos+1)^(0+512)
 26891  0CBC  0021               	movlb	1	; select bank1
 26892  0CBD  0820               	movf	?_adc_convert^(0+128),w
 26893  0CBE  0024               	movlb	4	; select bank4
 26894  0CBF  00B0               	movwf	_knob_1_pos^(0+512)
 26895                           
 26896                           ;main.c: 263: knob_2_pos = adc_convert(1);
 26897  0CC0  3001               	movlw	1
 26898  0CC1  31B1  2145  3188   	fcall	_adc_convert
 26899  0CC4  0021               	movlb	1	; select bank1
 26900  0CC5  0821               	movf	(?_adc_convert+1)^(0+128),w
 26901  0CC6  0024               	movlb	4	; select bank4
 26902  0CC7  00B3               	movwf	(_knob_2_pos+1)^(0+512)
 26903  0CC8  0021               	movlb	1	; select bank1
 26904  0CC9  0820               	movf	?_adc_convert^(0+128),w
 26905  0CCA  0024               	movlb	4	; select bank4
 26906  0CCB  00B2               	movwf	_knob_2_pos^(0+512)
 26907                           
 26908                           ;main.c: 264: knob_3_pos = adc_convert(2);
 26909  0CCC  3002               	movlw	2
 26910  0CCD  31B1  2145  3188   	fcall	_adc_convert
 26911  0CD0  0021               	movlb	1	; select bank1
 26912  0CD1  0821               	movf	(?_adc_convert+1)^(0+128),w
 26913  0CD2  0024               	movlb	4	; select bank4
 26914  0CD3  00B5               	movwf	(_knob_3_pos+1)^(0+512)
 26915  0CD4  0021               	movlb	1	; select bank1
 26916  0CD5  0820               	movf	?_adc_convert^(0+128),w
 26917  0CD6  0024               	movlb	4	; select bank4
 26918  0CD7  00B4               	movwf	_knob_3_pos^(0+512)
 26919                           
 26920                           ;main.c: 265: knob_4_pos = adc_convert(3);
 26921  0CD8  3003               	movlw	3
 26922  0CD9  31B1  2145  3188   	fcall	_adc_convert
 26923  0CDC  0021               	movlb	1	; select bank1
 26924  0CDD  0821               	movf	(?_adc_convert+1)^(0+128),w
 26925  0CDE  0024               	movlb	4	; select bank4
 26926  0CDF  00B7               	movwf	(_knob_4_pos+1)^(0+512)
 26927  0CE0  0021               	movlb	1	; select bank1
 26928  0CE1  0820               	movf	?_adc_convert^(0+128),w
 26929  0CE2  0024               	movlb	4	; select bank4
 26930  0CE3  00B6               	movwf	_knob_4_pos^(0+512)
 26931                           
 26932                           ;main.c: 266: knob_5_pos = adc_convert(4);
 26933  0CE4  3004               	movlw	4
 26934  0CE5  31B1  2145  3188   	fcall	_adc_convert
 26935  0CE8  0021               	movlb	1	; select bank1
 26936  0CE9  0821               	movf	(?_adc_convert+1)^(0+128),w
 26937  0CEA  0024               	movlb	4	; select bank4
 26938  0CEB  00B9               	movwf	(_knob_5_pos+1)^(0+512)
 26939  0CEC  0021               	movlb	1	; select bank1
 26940  0CED  0820               	movf	?_adc_convert^(0+128),w
 26941  0CEE  0024               	movlb	4	; select bank4
 26942  0CEF  00B8               	movwf	_knob_5_pos^(0+512)
 26943                           
 26944                           ;main.c: 270: if (!isInitialized) {
 26945  0CF0  0020               	movlb	0	; select bank0
 26946  0CF1  0862               	movf	_isInitialized,w
 26947  0CF2  1D03               	btfss	3,2
 26948  0CF3  2D09               	goto	l8785
 26949                           
 26950                           ;main.c: 272: knob1_prev = knob_1_pos;
 26951  0CF4  0024               	movlb	4	; select bank4
 26952  0CF5  0831               	movf	(_knob_1_pos+1)^(0+512),w
 26953  0CF6  0023               	movlb	3	; select bank3
 26954  0CF7  00E5               	movwf	(_knob1_prev+1)^(0+384)	;volatile
 26955  0CF8  0024               	movlb	4	; select bank4
 26956  0CF9  0830               	movf	_knob_1_pos^(0+512),w
 26957  0CFA  0023               	movlb	3	; select bank3
 26958  0CFB  00E4               	movwf	_knob1_prev^(0+384)	;volatile
 26959                           
 26960                           ;main.c: 273: knob2_prev = knob_2_pos;
 26961  0CFC  0024               	movlb	4	; select bank4
 26962  0CFD  0833               	movf	(_knob_2_pos+1)^(0+512),w
 26963  0CFE  0023               	movlb	3	; select bank3
 26964  0CFF  00E7               	movwf	(_knob2_prev+1)^(0+384)	;volatile
 26965  0D00  0024               	movlb	4	; select bank4
 26966  0D01  0832               	movf	_knob_2_pos^(0+512),w
 26967  0D02  0023               	movlb	3	; select bank3
 26968  0D03  00E6               	movwf	_knob2_prev^(0+384)	;volatile
 26969                           
 26970                           ;main.c: 275: knob5_prev = knob_5_pos;
 26971  0D04  0024               	movlb	4	; select bank4
 26972  0D05  0839               	movf	(_knob_5_pos+1)^(0+512),w
 26973  0D06  00DE               	movwf	(_knob5_prev+1)^(0+512)	;volatile
 26974  0D07  0838               	movf	_knob_5_pos^(0+512),w
 26975  0D08  00DD               	movwf	_knob5_prev^(0+512)	;volatile
 26976  0D09                     l8785:	
 26977                           
 26978                           ;main.c: 277: }
 26979                           ;main.c: 280: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
 26980  0D09  0023               	movlb	3	; select bank3
 26981  0D0A  0964               	comf	_knob1_prev^(0+384),w	;volatile
 26982  0D0B  00D1               	movwf	??_main^(0+384)
 26983  0D0C  0965               	comf	(_knob1_prev+1)^(0+384),w	;volatile
 26984  0D0D  00D2               	movwf	(??_main^(0+384)+1)
 26985  0D0E  0AD1               	incf	??_main^(0+384),f
 26986  0D0F  1903               	skipnz
 26987  0D10  0AD2               	incf	(??_main^(0+384)+1),f
 26988  0D11  0024               	movlb	4	; select bank4
 26989  0D12  0830               	movf	_knob_1_pos^(0+512),w
 26990  0D13  0023               	movlb	3	; select bank3
 26991  0D14  0751               	addwf	??_main^(0+384),w
 26992  0D15  00D3               	movwf	(??_main+2)^(0+384)
 26993  0D16  0024               	movlb	4	; select bank4
 26994  0D17  0831               	movf	(_knob_1_pos+1)^(0+512),w
 26995  0D18  0023               	movlb	3	; select bank3
 26996  0D19  3D52               	addwfc	(??_main+1)^(0+384),w
 26997  0D1A  00D4               	movwf	(??_main+3)^(0+384)
 26998  0D1B  0854               	movf	(??_main+3)^(0+384),w
 26999  0D1C  3A80               	xorlw	128
 27000  0D1D  00D5               	movwf	(??_main+4)^(0+384)
 27001  0D1E  3080               	movlw	128
 27002  0D1F  0255               	subwf	(??_main+4)^(0+384),w
 27003  0D20  1D03               	skipz
 27004  0D21  2D24               	goto	u9065
 27005  0D22  3004               	movlw	4
 27006  0D23  0253               	subwf	(??_main+2)^(0+384),w
 27007  0D24                     u9065:	
 27008  0D24  1803               	skipnc
 27009  0D25  2D43               	goto	l8789
 27010  0D26  0023               	movlb	3	; select bank3
 27011  0D27  0964               	comf	_knob1_prev^(0+384),w	;volatile
 27012  0D28  00D1               	movwf	??_main^(0+384)
 27013  0D29  0965               	comf	(_knob1_prev+1)^(0+384),w	;volatile
 27014  0D2A  00D2               	movwf	(??_main^(0+384)+1)
 27015  0D2B  0AD1               	incf	??_main^(0+384),f
 27016  0D2C  1903               	skipnz
 27017  0D2D  0AD2               	incf	(??_main^(0+384)+1),f
 27018  0D2E  0024               	movlb	4	; select bank4
 27019  0D2F  0830               	movf	_knob_1_pos^(0+512),w
 27020  0D30  0023               	movlb	3	; select bank3
 27021  0D31  0751               	addwf	??_main^(0+384),w
 27022  0D32  00D3               	movwf	(??_main+2)^(0+384)
 27023  0D33  0024               	movlb	4	; select bank4
 27024  0D34  0831               	movf	(_knob_1_pos+1)^(0+512),w
 27025  0D35  0023               	movlb	3	; select bank3
 27026  0D36  3D52               	addwfc	(??_main+1)^(0+384),w
 27027  0D37  00D4               	movwf	(??_main+3)^(0+384)
 27028  0D38  0854               	movf	(??_main+3)^(0+384),w
 27029  0D39  3A80               	xorlw	128
 27030  0D3A  00D5               	movwf	(??_main+4)^(0+384)
 27031  0D3B  307F               	movlw	127
 27032  0D3C  0255               	subwf	(??_main+4)^(0+384),w
 27033  0D3D  1D03               	skipz
 27034  0D3E  2D41               	goto	u9075
 27035  0D3F  30FD               	movlw	253
 27036  0D40  0253               	subwf	(??_main+2)^(0+384),w
 27037  0D41                     u9075:	
 27038  0D41  1803               	skipnc
 27039  0D42  2D55               	goto	l8793
 27040  0D43                     l8789:	
 27041                           
 27042                           ;main.c: 281: knob1_prev = knob_1_pos;
 27043  0D43  0024               	movlb	4	; select bank4
 27044  0D44  0831               	movf	(_knob_1_pos+1)^(0+512),w
 27045  0D45  0023               	movlb	3	; select bank3
 27046  0D46  00E5               	movwf	(_knob1_prev+1)^(0+384)	;volatile
 27047  0D47  0024               	movlb	4	; select bank4
 27048  0D48  0830               	movf	_knob_1_pos^(0+512),w
 27049  0D49  0023               	movlb	3	; select bank3
 27050  0D4A  00E4               	movwf	_knob1_prev^(0+384)	;volatile
 27051                           
 27052                           ;main.c: 284: setVolume(knob1_prev);
 27053  0D4B  0865               	movf	(_knob1_prev+1)^(0+384),w	;volatile
 27054  0D4C  0022               	movlb	2	; select bank2
 27055  0D4D  00EB               	movwf	(setVolume@rawValue+1)^(0+256)
 27056  0D4E  0023               	movlb	3	; select bank3
 27057  0D4F  0864               	movf	_knob1_prev^(0+384),w	;volatile
 27058  0D50  0022               	movlb	2	; select bank2
 27059  0D51  00EA               	movwf	setVolume@rawValue^(0+256)
 27060  0D52  31AD  25A6  3188   	fcall	_setVolume
 27061  0D55                     l8793:	
 27062                           
 27063                           ;main.c: 287: }
 27064                           ;main.c: 291: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
 27065  0D55  0023               	movlb	3	; select bank3
 27066  0D56  0966               	comf	_knob2_prev^(0+384),w	;volatile
 27067  0D57  00D1               	movwf	??_main^(0+384)
 27068  0D58  0967               	comf	(_knob2_prev+1)^(0+384),w	;volatile
 27069  0D59  00D2               	movwf	(??_main^(0+384)+1)
 27070  0D5A  0AD1               	incf	??_main^(0+384),f
 27071  0D5B  1903               	skipnz
 27072  0D5C  0AD2               	incf	(??_main^(0+384)+1),f
 27073  0D5D  0024               	movlb	4	; select bank4
 27074  0D5E  0832               	movf	_knob_2_pos^(0+512),w
 27075  0D5F  0023               	movlb	3	; select bank3
 27076  0D60  0751               	addwf	??_main^(0+384),w
 27077  0D61  00D3               	movwf	(??_main+2)^(0+384)
 27078  0D62  0024               	movlb	4	; select bank4
 27079  0D63  0833               	movf	(_knob_2_pos+1)^(0+512),w
 27080  0D64  0023               	movlb	3	; select bank3
 27081  0D65  3D52               	addwfc	(??_main+1)^(0+384),w
 27082  0D66  00D4               	movwf	(??_main+3)^(0+384)
 27083  0D67  0854               	movf	(??_main+3)^(0+384),w
 27084  0D68  3A80               	xorlw	128
 27085  0D69  00D5               	movwf	(??_main+4)^(0+384)
 27086  0D6A  3080               	movlw	128
 27087  0D6B  0255               	subwf	(??_main+4)^(0+384),w
 27088  0D6C  1D03               	skipz
 27089  0D6D  2D70               	goto	u9085
 27090  0D6E  3004               	movlw	4
 27091  0D6F  0253               	subwf	(??_main+2)^(0+384),w
 27092  0D70                     u9085:	
 27093  0D70  1803               	skipnc
 27094  0D71  2D8F               	goto	l8797
 27095  0D72  0023               	movlb	3	; select bank3
 27096  0D73  0966               	comf	_knob2_prev^(0+384),w	;volatile
 27097  0D74  00D1               	movwf	??_main^(0+384)
 27098  0D75  0967               	comf	(_knob2_prev+1)^(0+384),w	;volatile
 27099  0D76  00D2               	movwf	(??_main^(0+384)+1)
 27100  0D77  0AD1               	incf	??_main^(0+384),f
 27101  0D78  1903               	skipnz
 27102  0D79  0AD2               	incf	(??_main^(0+384)+1),f
 27103  0D7A  0024               	movlb	4	; select bank4
 27104  0D7B  0832               	movf	_knob_2_pos^(0+512),w
 27105  0D7C  0023               	movlb	3	; select bank3
 27106  0D7D  0751               	addwf	??_main^(0+384),w
 27107  0D7E  00D3               	movwf	(??_main+2)^(0+384)
 27108  0D7F  0024               	movlb	4	; select bank4
 27109  0D80  0833               	movf	(_knob_2_pos+1)^(0+512),w
 27110  0D81  0023               	movlb	3	; select bank3
 27111  0D82  3D52               	addwfc	(??_main+1)^(0+384),w
 27112  0D83  00D4               	movwf	(??_main+3)^(0+384)
 27113  0D84  0854               	movf	(??_main+3)^(0+384),w
 27114  0D85  3A80               	xorlw	128
 27115  0D86  00D5               	movwf	(??_main+4)^(0+384)
 27116  0D87  307F               	movlw	127
 27117  0D88  0255               	subwf	(??_main+4)^(0+384),w
 27118  0D89  1D03               	skipz
 27119  0D8A  2D8D               	goto	u9095
 27120  0D8B  30FD               	movlw	253
 27121  0D8C  0253               	subwf	(??_main+2)^(0+384),w
 27122  0D8D                     u9095:	
 27123  0D8D  1803               	skipnc
 27124  0D8E  2DA1               	goto	l8801
 27125  0D8F                     l8797:	
 27126                           
 27127                           ;main.c: 292: knob2_prev = knob_2_pos;
 27128  0D8F  0024               	movlb	4	; select bank4
 27129  0D90  0833               	movf	(_knob_2_pos+1)^(0+512),w
 27130  0D91  0023               	movlb	3	; select bank3
 27131  0D92  00E7               	movwf	(_knob2_prev+1)^(0+384)	;volatile
 27132  0D93  0024               	movlb	4	; select bank4
 27133  0D94  0832               	movf	_knob_2_pos^(0+512),w
 27134  0D95  0023               	movlb	3	; select bank3
 27135  0D96  00E6               	movwf	_knob2_prev^(0+384)	;volatile
 27136                           
 27137                           ;main.c: 295: setFrequency(knob2_prev);
 27138  0D97  0867               	movf	(_knob2_prev+1)^(0+384),w	;volatile
 27139  0D98  0022               	movlb	2	; select bank2
 27140  0D99  00EB               	movwf	(setFrequency@rawValue+1)^(0+256)
 27141  0D9A  0023               	movlb	3	; select bank3
 27142  0D9B  0866               	movf	_knob2_prev^(0+384),w	;volatile
 27143  0D9C  0022               	movlb	2	; select bank2
 27144  0D9D  00EA               	movwf	setFrequency@rawValue^(0+256)
 27145  0D9E  31A2  226A  3188   	fcall	_setFrequency
 27146  0DA1                     l8801:	
 27147                           
 27148                           ;main.c: 296: }
 27149                           ;main.c: 307: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
 27150  0DA1  0023               	movlb	3	; select bank3
 27151  0DA2  0968               	comf	_knob3_prev^(0+384),w	;volatile
 27152  0DA3  00D1               	movwf	??_main^(0+384)
 27153  0DA4  0969               	comf	(_knob3_prev+1)^(0+384),w	;volatile
 27154  0DA5  00D2               	movwf	(??_main^(0+384)+1)
 27155  0DA6  0AD1               	incf	??_main^(0+384),f
 27156  0DA7  1903               	skipnz
 27157  0DA8  0AD2               	incf	(??_main^(0+384)+1),f
 27158  0DA9  0024               	movlb	4	; select bank4
 27159  0DAA  0834               	movf	_knob_3_pos^(0+512),w
 27160  0DAB  0023               	movlb	3	; select bank3
 27161  0DAC  0751               	addwf	??_main^(0+384),w
 27162  0DAD  00D3               	movwf	(??_main+2)^(0+384)
 27163  0DAE  0024               	movlb	4	; select bank4
 27164  0DAF  0835               	movf	(_knob_3_pos+1)^(0+512),w
 27165  0DB0  0023               	movlb	3	; select bank3
 27166  0DB1  3D52               	addwfc	(??_main+1)^(0+384),w
 27167  0DB2  00D4               	movwf	(??_main+3)^(0+384)
 27168  0DB3  0854               	movf	(??_main+3)^(0+384),w
 27169  0DB4  3A80               	xorlw	128
 27170  0DB5  00D5               	movwf	(??_main+4)^(0+384)
 27171  0DB6  3080               	movlw	128
 27172  0DB7  0255               	subwf	(??_main+4)^(0+384),w
 27173  0DB8  1D03               	skipz
 27174  0DB9  2DBC               	goto	u9105
 27175  0DBA  3004               	movlw	4
 27176  0DBB  0253               	subwf	(??_main+2)^(0+384),w
 27177  0DBC                     u9105:	
 27178  0DBC  1803               	skipnc
 27179  0DBD  2DDB               	goto	l8805
 27180  0DBE  0023               	movlb	3	; select bank3
 27181  0DBF  0968               	comf	_knob3_prev^(0+384),w	;volatile
 27182  0DC0  00D1               	movwf	??_main^(0+384)
 27183  0DC1  0969               	comf	(_knob3_prev+1)^(0+384),w	;volatile
 27184  0DC2  00D2               	movwf	(??_main^(0+384)+1)
 27185  0DC3  0AD1               	incf	??_main^(0+384),f
 27186  0DC4  1903               	skipnz
 27187  0DC5  0AD2               	incf	(??_main^(0+384)+1),f
 27188  0DC6  0024               	movlb	4	; select bank4
 27189  0DC7  0834               	movf	_knob_3_pos^(0+512),w
 27190  0DC8  0023               	movlb	3	; select bank3
 27191  0DC9  0751               	addwf	??_main^(0+384),w
 27192  0DCA  00D3               	movwf	(??_main+2)^(0+384)
 27193  0DCB  0024               	movlb	4	; select bank4
 27194  0DCC  0835               	movf	(_knob_3_pos+1)^(0+512),w
 27195  0DCD  0023               	movlb	3	; select bank3
 27196  0DCE  3D52               	addwfc	(??_main+1)^(0+384),w
 27197  0DCF  00D4               	movwf	(??_main+3)^(0+384)
 27198  0DD0  0854               	movf	(??_main+3)^(0+384),w
 27199  0DD1  3A80               	xorlw	128
 27200  0DD2  00D5               	movwf	(??_main+4)^(0+384)
 27201  0DD3  307F               	movlw	127
 27202  0DD4  0255               	subwf	(??_main+4)^(0+384),w
 27203  0DD5  1D03               	skipz
 27204  0DD6  2DD9               	goto	u9115
 27205  0DD7  30FD               	movlw	253
 27206  0DD8  0253               	subwf	(??_main+2)^(0+384),w
 27207  0DD9                     u9115:	
 27208  0DD9  1803               	skipnc
 27209  0DDA  2DED               	goto	l8809
 27210  0DDB                     l8805:	
 27211                           
 27212                           ;main.c: 308: knob3_prev = knob_3_pos;
 27213  0DDB  0024               	movlb	4	; select bank4
 27214  0DDC  0835               	movf	(_knob_3_pos+1)^(0+512),w
 27215  0DDD  0023               	movlb	3	; select bank3
 27216  0DDE  00E9               	movwf	(_knob3_prev+1)^(0+384)	;volatile
 27217  0DDF  0024               	movlb	4	; select bank4
 27218  0DE0  0834               	movf	_knob_3_pos^(0+512),w
 27219  0DE1  0023               	movlb	3	; select bank3
 27220  0DE2  00E8               	movwf	_knob3_prev^(0+384)	;volatile
 27221                           
 27222                           ;main.c: 310: setSymmetry(knob3_prev);
 27223  0DE3  0869               	movf	(_knob3_prev+1)^(0+384),w	;volatile
 27224  0DE4  0022               	movlb	2	; select bank2
 27225  0DE5  00AF               	movwf	(setSymmetry@rawValue+1)^(0+256)
 27226  0DE6  0023               	movlb	3	; select bank3
 27227  0DE7  0868               	movf	_knob3_prev^(0+384),w	;volatile
 27228  0DE8  0022               	movlb	2	; select bank2
 27229  0DE9  00AE               	movwf	setSymmetry@rawValue^(0+256)
 27230  0DEA  31AC  2494  3188   	fcall	_setSymmetry
 27231  0DED                     l8809:	
 27232                           
 27233                           ;main.c: 317: }
 27234                           ;main.c: 319: if (oldSymmetry - symmetry >= 2 || oldSymmetry - symmetry <= -2) {
 27235  0DED  0023               	movlb	3	; select bank3
 27236  0DEE  096A               	comf	_symmetry^(0+384),w
 27237  0DEF  00D1               	movwf	??_main^(0+384)
 27238  0DF0  096B               	comf	(_symmetry+1)^(0+384),w
 27239  0DF1  00D2               	movwf	(??_main^(0+384)+1)
 27240  0DF2  0AD1               	incf	??_main^(0+384),f
 27241  0DF3  1903               	skipnz
 27242  0DF4  0AD2               	incf	(??_main^(0+384)+1),f
 27243  0DF5  0025               	movlb	5	; select bank5
 27244  0DF6  086A               	movf	_oldSymmetry^(0+640),w
 27245  0DF7  0023               	movlb	3	; select bank3
 27246  0DF8  0751               	addwf	??_main^(0+384),w
 27247  0DF9  00D3               	movwf	(??_main+2)^(0+384)
 27248  0DFA  0025               	movlb	5	; select bank5
 27249  0DFB  086B               	movf	(_oldSymmetry+1)^(0+640),w
 27250  0DFC  0023               	movlb	3	; select bank3
 27251  0DFD  3D52               	addwfc	(??_main+1)^(0+384),w
 27252  0DFE  00D4               	movwf	(??_main+3)^(0+384)
 27253  0DFF  0854               	movf	(??_main+3)^(0+384),w
 27254  0E00  3A80               	xorlw	128
 27255  0E01  00D5               	movwf	(??_main+4)^(0+384)
 27256  0E02  3080               	movlw	128
 27257  0E03  0255               	subwf	(??_main+4)^(0+384),w
 27258  0E04  1D03               	skipz
 27259  0E05  2E08               	goto	u9125
 27260  0E06  3002               	movlw	2
 27261  0E07  0253               	subwf	(??_main+2)^(0+384),w
 27262  0E08                     u9125:	
 27263  0E08  1803               	skipnc
 27264  0E09  2E27               	goto	l484
 27265  0E0A  0023               	movlb	3	; select bank3
 27266  0E0B  096A               	comf	_symmetry^(0+384),w
 27267  0E0C  00D1               	movwf	??_main^(0+384)
 27268  0E0D  096B               	comf	(_symmetry+1)^(0+384),w
 27269  0E0E  00D2               	movwf	(??_main^(0+384)+1)
 27270  0E0F  0AD1               	incf	??_main^(0+384),f
 27271  0E10  1903               	skipnz
 27272  0E11  0AD2               	incf	(??_main^(0+384)+1),f
 27273  0E12  0025               	movlb	5	; select bank5
 27274  0E13  086A               	movf	_oldSymmetry^(0+640),w
 27275  0E14  0023               	movlb	3	; select bank3
 27276  0E15  0751               	addwf	??_main^(0+384),w
 27277  0E16  00D3               	movwf	(??_main+2)^(0+384)
 27278  0E17  0025               	movlb	5	; select bank5
 27279  0E18  086B               	movf	(_oldSymmetry+1)^(0+640),w
 27280  0E19  0023               	movlb	3	; select bank3
 27281  0E1A  3D52               	addwfc	(??_main+1)^(0+384),w
 27282  0E1B  00D4               	movwf	(??_main+3)^(0+384)
 27283  0E1C  0854               	movf	(??_main+3)^(0+384),w
 27284  0E1D  3A80               	xorlw	128
 27285  0E1E  00D5               	movwf	(??_main+4)^(0+384)
 27286  0E1F  307F               	movlw	127
 27287  0E20  0255               	subwf	(??_main+4)^(0+384),w
 27288  0E21  1D03               	skipz
 27289  0E22  2E25               	goto	u9135
 27290  0E23  30FF               	movlw	255
 27291  0E24  0253               	subwf	(??_main+2)^(0+384),w
 27292  0E25                     u9135:	
 27293  0E25  1803               	skipnc
 27294  0E26  2E2A               	goto	l8813
 27295  0E27                     l484:	
 27296                           
 27297                           ;main.c: 321: modulation_changed = 1;
 27298  0E27  0024               	movlb	4	; select bank4
 27299  0E28  01CE               	clrf	_modulation_changed^(0+512)
 27300  0E29  0ACE               	incf	_modulation_changed^(0+512),f
 27301  0E2A                     l8813:	
 27302                           
 27303                           ;main.c: 322: }
 27304                           ;main.c: 331: if (!isInitialized) {
 27305  0E2A  0020               	movlb	0	; select bank0
 27306  0E2B  0862               	movf	_isInitialized,w
 27307  0E2C  1D03               	btfss	3,2
 27308  0E2D  2E33               	goto	l8817
 27309                           
 27310                           ;main.c: 333: knob4_prev = knob_4_pos;
 27311  0E2E  0024               	movlb	4	; select bank4
 27312  0E2F  0837               	movf	(_knob_4_pos+1)^(0+512),w
 27313  0E30  00DC               	movwf	(_knob4_prev+1)^(0+512)	;volatile
 27314  0E31  0836               	movf	_knob_4_pos^(0+512),w
 27315  0E32  00DB               	movwf	_knob4_prev^(0+512)	;volatile
 27316  0E33                     l8817:	
 27317                           
 27318                           ;main.c: 335: }
 27319                           ;main.c: 336: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
 27320  0E33  0024               	movlb	4	; select bank4
 27321  0E34  095B               	comf	_knob4_prev^(0+512),w	;volatile
 27322  0E35  0023               	movlb	3	; select bank3
 27323  0E36  00D1               	movwf	??_main^(0+384)
 27324  0E37  0024               	movlb	4	; select bank4
 27325  0E38  095C               	comf	(_knob4_prev+1)^(0+512),w	;volatile
 27326  0E39  0023               	movlb	3	; select bank3
 27327  0E3A  00D2               	movwf	(??_main^(0+384)+1)
 27328  0E3B  0AD1               	incf	??_main^(0+384),f
 27329  0E3C  1903               	skipnz
 27330  0E3D  0AD2               	incf	(??_main^(0+384)+1),f
 27331  0E3E  0024               	movlb	4	; select bank4
 27332  0E3F  0836               	movf	_knob_4_pos^(0+512),w
 27333  0E40  0023               	movlb	3	; select bank3
 27334  0E41  0751               	addwf	??_main^(0+384),w
 27335  0E42  00D3               	movwf	(??_main+2)^(0+384)
 27336  0E43  0024               	movlb	4	; select bank4
 27337  0E44  0837               	movf	(_knob_4_pos+1)^(0+512),w
 27338  0E45  0023               	movlb	3	; select bank3
 27339  0E46  3D52               	addwfc	(??_main+1)^(0+384),w
 27340  0E47  00D4               	movwf	(??_main+3)^(0+384)
 27341  0E48  0854               	movf	(??_main+3)^(0+384),w
 27342  0E49  3A80               	xorlw	128
 27343  0E4A  00D5               	movwf	(??_main+4)^(0+384)
 27344  0E4B  3080               	movlw	128
 27345  0E4C  0255               	subwf	(??_main+4)^(0+384),w
 27346  0E4D  1D03               	skipz
 27347  0E4E  2E51               	goto	u9155
 27348  0E4F  3004               	movlw	4
 27349  0E50  0253               	subwf	(??_main+2)^(0+384),w
 27350  0E51                     u9155:	
 27351  0E51  1803               	skipnc
 27352  0E52  2E73               	goto	l8821
 27353  0E53  0024               	movlb	4	; select bank4
 27354  0E54  095B               	comf	_knob4_prev^(0+512),w	;volatile
 27355  0E55  0023               	movlb	3	; select bank3
 27356  0E56  00D1               	movwf	??_main^(0+384)
 27357  0E57  0024               	movlb	4	; select bank4
 27358  0E58  095C               	comf	(_knob4_prev+1)^(0+512),w	;volatile
 27359  0E59  0023               	movlb	3	; select bank3
 27360  0E5A  00D2               	movwf	(??_main^(0+384)+1)
 27361  0E5B  0AD1               	incf	??_main^(0+384),f
 27362  0E5C  1903               	skipnz
 27363  0E5D  0AD2               	incf	(??_main^(0+384)+1),f
 27364  0E5E  0024               	movlb	4	; select bank4
 27365  0E5F  0836               	movf	_knob_4_pos^(0+512),w
 27366  0E60  0023               	movlb	3	; select bank3
 27367  0E61  0751               	addwf	??_main^(0+384),w
 27368  0E62  00D3               	movwf	(??_main+2)^(0+384)
 27369  0E63  0024               	movlb	4	; select bank4
 27370  0E64  0837               	movf	(_knob_4_pos+1)^(0+512),w
 27371  0E65  0023               	movlb	3	; select bank3
 27372  0E66  3D52               	addwfc	(??_main+1)^(0+384),w
 27373  0E67  00D4               	movwf	(??_main+3)^(0+384)
 27374  0E68  0854               	movf	(??_main+3)^(0+384),w
 27375  0E69  3A80               	xorlw	128
 27376  0E6A  00D5               	movwf	(??_main+4)^(0+384)
 27377  0E6B  307F               	movlw	127
 27378  0E6C  0255               	subwf	(??_main+4)^(0+384),w
 27379  0E6D  1D03               	skipz
 27380  0E6E  2E71               	goto	u9165
 27381  0E6F  30FD               	movlw	253
 27382  0E70  0253               	subwf	(??_main+2)^(0+384),w
 27383  0E71                     u9165:	
 27384  0E71  1803               	skipnc
 27385  0E72  2EC0               	goto	l8827
 27386  0E73                     l8821:	
 27387                           
 27388                           ;main.c: 338: knob4_prev = knob_4_pos;
 27389  0E73  0024               	movlb	4	; select bank4
 27390  0E74  0837               	movf	(_knob_4_pos+1)^(0+512),w
 27391  0E75  00DC               	movwf	(_knob4_prev+1)^(0+512)	;volatile
 27392  0E76  0836               	movf	_knob_4_pos^(0+512),w
 27393  0E77  00DB               	movwf	_knob4_prev^(0+512)	;volatile
 27394                           
 27395                           ;main.c: 339: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
 27396  0E78  3040               	movlw	64
 27397  0E79  0021               	movlb	1	; select bank1
 27398  0E7A  00EA               	movwf	map@out_max^(0+128)
 27399  0E7B  3030               	movlw	48
 27400  0E7C  00EB               	movwf	(map@out_max+1)^(0+128)
 27401  0E7D  3045               	movlw	69
 27402  0E7E  00EC               	movwf	(map@out_max+2)^(0+128)
 27403  0E7F  3000               	movlw	0
 27404  0E80  00E7               	movwf	map@out_min^(0+128)
 27405  0E81  3034               	movlw	52
 27406  0E82  00E8               	movwf	(map@out_min+1)^(0+128)
 27407  0E83  3043               	movlw	67
 27408  0E84  00E9               	movwf	(map@out_min+2)^(0+128)
 27409  0E85  30C0               	movlw	192
 27410  0E86  00E4               	movwf	map@in_max^(0+128)
 27411  0E87  307F               	movlw	127
 27412  0E88  00E5               	movwf	(map@in_max+1)^(0+128)
 27413  0E89  3044               	movlw	68
 27414  0E8A  00E6               	movwf	(map@in_max+2)^(0+128)
 27415  0E8B  3000               	movlw	0
 27416  0E8C  00E1               	movwf	map@in_min^(0+128)
 27417  0E8D  3000               	movlw	0
 27418  0E8E  00E2               	movwf	(map@in_min+1)^(0+128)
 27419  0E8F  3000               	movlw	0
 27420  0E90  00E3               	movwf	(map@in_min+2)^(0+128)
 27421  0E91  0024               	movlb	4	; select bank4
 27422  0E92  085C               	movf	(_knob4_prev+1)^(0+512),w	;volatile
 27423  0E93  0021               	movlb	1	; select bank1
 27424  0E94  00A9               	movwf	(___awtoft@c+1)^(0+128)
 27425  0E95  0024               	movlb	4	; select bank4
 27426  0E96  085B               	movf	_knob4_prev^(0+512),w	;volatile
 27427  0E97  0021               	movlb	1	; select bank1
 27428  0E98  00A8               	movwf	___awtoft@c^(0+128)
 27429  0E99  31B2  22EC  3188   	fcall	___awtoft
 27430  0E9C  0021               	movlb	1	; select bank1
 27431  0E9D  0828               	movf	?___awtoft^(0+128),w
 27432  0E9E  00DE               	movwf	map@x^(0+128)
 27433  0E9F  0829               	movf	(?___awtoft+1)^(0+128),w
 27434  0EA0  00DF               	movwf	(map@x+1)^(0+128)
 27435  0EA1  082A               	movf	(?___awtoft+2)^(0+128),w
 27436  0EA2  00E0               	movwf	(map@x+2)^(0+128)
 27437  0EA3  31A1  21DF  3188   	fcall	_map
 27438  0EA6  0021               	movlb	1	; select bank1
 27439  0EA7  085E               	movf	?_map^(0+128),w
 27440  0EA8  0022               	movlb	2	; select bank2
 27441  0EA9  00A0               	movwf	___fttol@f1^(0+256)
 27442  0EAA  0021               	movlb	1	; select bank1
 27443  0EAB  085F               	movf	(?_map+1)^(0+128),w
 27444  0EAC  0022               	movlb	2	; select bank2
 27445  0EAD  00A1               	movwf	(___fttol@f1+1)^(0+256)
 27446  0EAE  0021               	movlb	1	; select bank1
 27447  0EAF  0860               	movf	(?_map+2)^(0+128),w
 27448  0EB0  0022               	movlb	2	; select bank2
 27449  0EB1  00A2               	movwf	(___fttol@f1+2)^(0+256)
 27450  0EB2  31A1  2158  3188   	fcall	___fttol
 27451  0EB5  0022               	movlb	2	; select bank2
 27452  0EB6  0821               	movf	(?___fttol^(0+256)+1),w
 27453  0EB7  0020               	movlb	0	; select bank0
 27454  0EB8  00EB               	movwf	_baseline_mod_time+1	;volatile
 27455  0EB9  0022               	movlb	2	; select bank2
 27456  0EBA  0820               	movf	?___fttol^(0+256),w
 27457  0EBB  0020               	movlb	0	; select bank0
 27458  0EBC  00EA               	movwf	_baseline_mod_time	;volatile
 27459                           
 27460                           ;main.c: 340: updateTapTime();
 27461  0EBD  3187  27F7  3188   	fcall	_updateTapTime
 27462  0EC0                     l8827:	
 27463                           
 27464                           ;main.c: 342: }
 27465                           ;main.c: 344: if (oldBaseTime - baseline_mod_time >= 1 || oldBaseTime - baseline_mod_tim
      +                          e <= -1) {
 27466  0EC0  0020               	movlb	0	; select bank0
 27467  0EC1  096A               	comf	_baseline_mod_time,w	;volatile
 27468  0EC2  0023               	movlb	3	; select bank3
 27469  0EC3  00D1               	movwf	??_main^(0+384)
 27470  0EC4  0020               	movlb	0	; select bank0
 27471  0EC5  096B               	comf	_baseline_mod_time+1,w	;volatile
 27472  0EC6  0023               	movlb	3	; select bank3
 27473  0EC7  00D2               	movwf	(??_main^(0+384)+1)
 27474  0EC8  0AD1               	incf	??_main^(0+384),f
 27475  0EC9  1903               	skipnz
 27476  0ECA  0AD2               	incf	(??_main^(0+384)+1),f
 27477  0ECB  0025               	movlb	5	; select bank5
 27478  0ECC  0868               	movf	_oldBaseTime^(0+640),w
 27479  0ECD  0023               	movlb	3	; select bank3
 27480  0ECE  0751               	addwf	??_main^(0+384),w
 27481  0ECF  00D3               	movwf	(??_main+2)^(0+384)
 27482  0ED0  0025               	movlb	5	; select bank5
 27483  0ED1  0869               	movf	(_oldBaseTime+1)^(0+640),w
 27484  0ED2  0023               	movlb	3	; select bank3
 27485  0ED3  3D52               	addwfc	(??_main+1)^(0+384),w
 27486  0ED4  00D4               	movwf	(??_main+3)^(0+384)
 27487  0ED5  0854               	movf	(??_main+3)^(0+384),w
 27488  0ED6  3A80               	xorlw	128
 27489  0ED7  00D5               	movwf	(??_main+4)^(0+384)
 27490  0ED8  3080               	movlw	128
 27491  0ED9  0255               	subwf	(??_main+4)^(0+384),w
 27492  0EDA  1D03               	skipz
 27493  0EDB  2EDE               	goto	u9175
 27494  0EDC  3001               	movlw	1
 27495  0EDD  0253               	subwf	(??_main+2)^(0+384),w
 27496  0EDE                     u9175:	
 27497  0EDE  1803               	skipnc
 27498  0EDF  2EF6               	goto	l491
 27499  0EE0  0020               	movlb	0	; select bank0
 27500  0EE1  096A               	comf	_baseline_mod_time,w	;volatile
 27501  0EE2  0023               	movlb	3	; select bank3
 27502  0EE3  00D1               	movwf	??_main^(0+384)
 27503  0EE4  0020               	movlb	0	; select bank0
 27504  0EE5  096B               	comf	_baseline_mod_time+1,w	;volatile
 27505  0EE6  0023               	movlb	3	; select bank3
 27506  0EE7  00D2               	movwf	(??_main^(0+384)+1)
 27507  0EE8  0AD1               	incf	??_main^(0+384),f
 27508  0EE9  1903               	skipnz
 27509  0EEA  0AD2               	incf	(??_main^(0+384)+1),f
 27510  0EEB  0025               	movlb	5	; select bank5
 27511  0EEC  0868               	movf	_oldBaseTime^(0+640),w
 27512  0EED  0023               	movlb	3	; select bank3
 27513  0EEE  0751               	addwf	??_main^(0+384),w
 27514  0EEF  0852               	movf	(??_main+1)^(0+384),w
 27515  0EF0  1803               	skipnc
 27516  0EF1  0A52               	incf	(??_main+1)^(0+384),w
 27517  0EF2  0025               	movlb	5	; select bank5
 27518  0EF3  0769               	addwf	(_oldBaseTime+1)^(0+640),w
 27519  0EF4  1F89               	btfss	9,7
 27520  0EF5  2EF9               	goto	l8831
 27521  0EF6                     l491:	
 27522                           
 27523                           ;main.c: 346: mod_time_changed = 1;
 27524  0EF6  0024               	movlb	4	; select bank4
 27525  0EF7  01EC               	clrf	_mod_time_changed^(0+512)
 27526  0EF8  0AEC               	incf	_mod_time_changed^(0+512),f
 27527  0EF9                     l8831:	
 27528                           
 27529                           ;main.c: 348: }
 27530                           ;main.c: 351: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
 27531  0EF9  0024               	movlb	4	; select bank4
 27532  0EFA  095D               	comf	_knob5_prev^(0+512),w	;volatile
 27533  0EFB  0023               	movlb	3	; select bank3
 27534  0EFC  00D1               	movwf	??_main^(0+384)
 27535  0EFD  0024               	movlb	4	; select bank4
 27536  0EFE  095E               	comf	(_knob5_prev+1)^(0+512),w	;volatile
 27537  0EFF  0023               	movlb	3	; select bank3
 27538  0F00  00D2               	movwf	(??_main^(0+384)+1)
 27539  0F01  0AD1               	incf	??_main^(0+384),f
 27540  0F02  1903               	skipnz
 27541  0F03  0AD2               	incf	(??_main^(0+384)+1),f
 27542  0F04  0024               	movlb	4	; select bank4
 27543  0F05  0838               	movf	_knob_5_pos^(0+512),w
 27544  0F06  0023               	movlb	3	; select bank3
 27545  0F07  0751               	addwf	??_main^(0+384),w
 27546  0F08  00D3               	movwf	(??_main+2)^(0+384)
 27547  0F09  0024               	movlb	4	; select bank4
 27548  0F0A  0839               	movf	(_knob_5_pos+1)^(0+512),w
 27549  0F0B  0023               	movlb	3	; select bank3
 27550  0F0C  3D52               	addwfc	(??_main+1)^(0+384),w
 27551  0F0D  00D4               	movwf	(??_main+3)^(0+384)
 27552  0F0E  0854               	movf	(??_main+3)^(0+384),w
 27553  0F0F  3A80               	xorlw	128
 27554  0F10  00D5               	movwf	(??_main+4)^(0+384)
 27555  0F11  3080               	movlw	128
 27556  0F12  0255               	subwf	(??_main+4)^(0+384),w
 27557  0F13  1D03               	skipz
 27558  0F14  2F17               	goto	u9195
 27559  0F15  3004               	movlw	4
 27560  0F16  0253               	subwf	(??_main+2)^(0+384),w
 27561  0F17                     u9195:	
 27562  0F17  1803               	skipnc
 27563  0F18  2F39               	goto	l8835
 27564  0F19  0024               	movlb	4	; select bank4
 27565  0F1A  095D               	comf	_knob5_prev^(0+512),w	;volatile
 27566  0F1B  0023               	movlb	3	; select bank3
 27567  0F1C  00D1               	movwf	??_main^(0+384)
 27568  0F1D  0024               	movlb	4	; select bank4
 27569  0F1E  095E               	comf	(_knob5_prev+1)^(0+512),w	;volatile
 27570  0F1F  0023               	movlb	3	; select bank3
 27571  0F20  00D2               	movwf	(??_main^(0+384)+1)
 27572  0F21  0AD1               	incf	??_main^(0+384),f
 27573  0F22  1903               	skipnz
 27574  0F23  0AD2               	incf	(??_main^(0+384)+1),f
 27575  0F24  0024               	movlb	4	; select bank4
 27576  0F25  0838               	movf	_knob_5_pos^(0+512),w
 27577  0F26  0023               	movlb	3	; select bank3
 27578  0F27  0751               	addwf	??_main^(0+384),w
 27579  0F28  00D3               	movwf	(??_main+2)^(0+384)
 27580  0F29  0024               	movlb	4	; select bank4
 27581  0F2A  0839               	movf	(_knob_5_pos+1)^(0+512),w
 27582  0F2B  0023               	movlb	3	; select bank3
 27583  0F2C  3D52               	addwfc	(??_main+1)^(0+384),w
 27584  0F2D  00D4               	movwf	(??_main+3)^(0+384)
 27585  0F2E  0854               	movf	(??_main+3)^(0+384),w
 27586  0F2F  3A80               	xorlw	128
 27587  0F30  00D5               	movwf	(??_main+4)^(0+384)
 27588  0F31  307F               	movlw	127
 27589  0F32  0255               	subwf	(??_main+4)^(0+384),w
 27590  0F33  1D03               	skipz
 27591  0F34  2F37               	goto	u9205
 27592  0F35  30FD               	movlw	253
 27593  0F36  0253               	subwf	(??_main+2)^(0+384),w
 27594  0F37                     u9205:	
 27595  0F37  1803               	skipnc
 27596  0F38  2F8E               	goto	l8841
 27597  0F39                     l8835:	
 27598                           
 27599                           ;main.c: 352: knob5_prev = knob_5_pos;
 27600  0F39  0024               	movlb	4	; select bank4
 27601  0F3A  0839               	movf	(_knob_5_pos+1)^(0+512),w
 27602  0F3B  00DE               	movwf	(_knob5_prev+1)^(0+512)	;volatile
 27603  0F3C  0838               	movf	_knob_5_pos^(0+512),w
 27604  0F3D  00DD               	movwf	_knob5_prev^(0+512)	;volatile
 27605                           
 27606                           ;main.c: 353: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
 27607  0F3E  3000               	movlw	0
 27608  0F3F  0021               	movlb	1	; select bank1
 27609  0F40  00EA               	movwf	map@out_max^(0+128)
 27610  0F41  3000               	movlw	0
 27611  0F42  00EB               	movwf	(map@out_max+1)^(0+128)
 27612  0F43  3000               	movlw	0
 27613  0F44  00EC               	movwf	(map@out_max+2)^(0+128)
 27614  0F45  3060               	movlw	96
 27615  0F46  00E7               	movwf	map@out_min^(0+128)
 27616  0F47  309F               	movlw	159
 27617  0F48  00E8               	movwf	(map@out_min+1)^(0+128)
 27618  0F49  3044               	movlw	68
 27619  0F4A  00E9               	movwf	(map@out_min+2)^(0+128)
 27620  0F4B  30C0               	movlw	192
 27621  0F4C  00E4               	movwf	map@in_max^(0+128)
 27622  0F4D  307F               	movlw	127
 27623  0F4E  00E5               	movwf	(map@in_max+1)^(0+128)
 27624  0F4F  3044               	movlw	68
 27625  0F50  00E6               	movwf	(map@in_max+2)^(0+128)
 27626  0F51  3000               	movlw	0
 27627  0F52  00E1               	movwf	map@in_min^(0+128)
 27628  0F53  3000               	movlw	0
 27629  0F54  00E2               	movwf	(map@in_min+1)^(0+128)
 27630  0F55  3000               	movlw	0
 27631  0F56  00E3               	movwf	(map@in_min+2)^(0+128)
 27632  0F57  0024               	movlb	4	; select bank4
 27633  0F58  085E               	movf	(_knob5_prev+1)^(0+512),w	;volatile
 27634  0F59  0021               	movlb	1	; select bank1
 27635  0F5A  00A9               	movwf	(___awtoft@c+1)^(0+128)
 27636  0F5B  0024               	movlb	4	; select bank4
 27637  0F5C  085D               	movf	_knob5_prev^(0+512),w	;volatile
 27638  0F5D  0021               	movlb	1	; select bank1
 27639  0F5E  00A8               	movwf	___awtoft@c^(0+128)
 27640  0F5F  31B2  22EC  3188   	fcall	___awtoft
 27641  0F62  0021               	movlb	1	; select bank1
 27642  0F63  0828               	movf	?___awtoft^(0+128),w
 27643  0F64  00DE               	movwf	map@x^(0+128)
 27644  0F65  0829               	movf	(?___awtoft+1)^(0+128),w
 27645  0F66  00DF               	movwf	(map@x+1)^(0+128)
 27646  0F67  082A               	movf	(?___awtoft+2)^(0+128),w
 27647  0F68  00E0               	movwf	(map@x+2)^(0+128)
 27648  0F69  31A1  21DF  3188   	fcall	_map
 27649  0F6C  0021               	movlb	1	; select bank1
 27650  0F6D  085E               	movf	?_map^(0+128),w
 27651  0F6E  0022               	movlb	2	; select bank2
 27652  0F6F  00A0               	movwf	___fttol@f1^(0+256)
 27653  0F70  0021               	movlb	1	; select bank1
 27654  0F71  085F               	movf	(?_map+1)^(0+128),w
 27655  0F72  0022               	movlb	2	; select bank2
 27656  0F73  00A1               	movwf	(___fttol@f1+1)^(0+256)
 27657  0F74  0021               	movlb	1	; select bank1
 27658  0F75  0860               	movf	(?_map+2)^(0+128),w
 27659  0F76  0022               	movlb	2	; select bank2
 27660  0F77  00A2               	movwf	(___fttol@f1+2)^(0+256)
 27661  0F78  31A1  2158  3188   	fcall	___fttol
 27662  0F7B  0022               	movlb	2	; select bank2
 27663  0F7C  0821               	movf	(?___fttol^(0+256)+1),w
 27664  0F7D  0025               	movlb	5	; select bank5
 27665  0F7E  00DB               	movwf	(_adjusted_pot_value+1)^(0+640)
 27666  0F7F  0022               	movlb	2	; select bank2
 27667  0F80  0820               	movf	?___fttol^(0+256),w
 27668  0F81  0025               	movlb	5	; select bank5
 27669  0F82  00DA               	movwf	_adjusted_pot_value^(0+640)
 27670                           
 27671                           ;main.c: 354: setDepth(knob5_prev);
 27672  0F83  0024               	movlb	4	; select bank4
 27673  0F84  085E               	movf	(_knob5_prev+1)^(0+512),w	;volatile
 27674  0F85  0021               	movlb	1	; select bank1
 27675  0F86  00A3               	movwf	(setDepth@rawValue+1)^(0+128)
 27676  0F87  0024               	movlb	4	; select bank4
 27677  0F88  085D               	movf	_knob5_prev^(0+512),w	;volatile
 27678  0F89  0021               	movlb	1	; select bank1
 27679  0F8A  00A2               	movwf	setDepth@rawValue^(0+128)
 27680  0F8B  31B0  207C  3188   	fcall	_setDepth
 27681  0F8E                     l8841:	
 27682                           
 27683                           ;main.c: 356: }
 27684                           ;main.c: 361: if (mod_time_changed == 1) {
 27685  0F8E  0024               	movlb	4	; select bank4
 27686  0F8F  036C               	decf	_mod_time_changed^(0+512),w
 27687  0F90  1D03               	btfss	3,2
 27688  0F91  2FC2               	goto	l8853
 27689                           
 27690                           ;main.c: 363: delay_time = baseline_mod_time;
 27691  0F92  0020               	movlb	0	; select bank0
 27692  0F93  086A               	movf	_baseline_mod_time,w	;volatile
 27693  0F94  00E6               	movwf	_delay_time	;volatile
 27694  0F95  086B               	movf	_baseline_mod_time+1,w	;volatile
 27695  0F96  00E7               	movwf	_delay_time+1	;volatile
 27696  0F97  0D89               	rlf	9,f
 27697  0F98  3B89               	subwfb	9,f
 27698  0F99  0989               	comf	9,f
 27699  0F9A  00E8               	movwf	_delay_time+2	;volatile
 27700  0F9B  00E9               	movwf	_delay_time+3	;volatile
 27701                           
 27702                           ;main.c: 364: delay_time = set_subdivision(baseline_mod_time, top_push_state);
 27703  0F9C  086B               	movf	_baseline_mod_time+1,w	;volatile
 27704  0F9D  0022               	movlb	2	; select bank2
 27705  0F9E  00AF               	movwf	(set_subdivision@x+1)^(0+256)
 27706  0F9F  0020               	movlb	0	; select bank0
 27707  0FA0  086A               	movf	_baseline_mod_time,w	;volatile
 27708  0FA1  0022               	movlb	2	; select bank2
 27709  0FA2  00AE               	movwf	set_subdivision@x^(0+256)
 27710  0FA3  0020               	movlb	0	; select bank0
 27711  0FA4  086D               	movf	_top_push_state+1,w
 27712  0FA5  0022               	movlb	2	; select bank2
 27713  0FA6  00B1               	movwf	(set_subdivision@y+1)^(0+256)
 27714  0FA7  0020               	movlb	0	; select bank0
 27715  0FA8  086C               	movf	_top_push_state,w
 27716  0FA9  0022               	movlb	2	; select bank2
 27717  0FAA  00B0               	movwf	set_subdivision@y^(0+256)
 27718  0FAB  3188  2002  3188   	fcall	_set_subdivision
 27719  0FAE  0022               	movlb	2	; select bank2
 27720  0FAF  082E               	movf	?_set_subdivision^(0+256),w
 27721  0FB0  0020               	movlb	0	; select bank0
 27722  0FB1  00E6               	movwf	_delay_time	;volatile
 27723  0FB2  0022               	movlb	2	; select bank2
 27724  0FB3  082F               	movf	(?_set_subdivision+1)^(0+256),w
 27725  0FB4  0020               	movlb	0	; select bank0
 27726  0FB5  00E7               	movwf	_delay_time+1	;volatile
 27727  0FB6  0D89               	rlf	9,f
 27728  0FB7  3B89               	subwfb	9,f
 27729  0FB8  0989               	comf	9,f
 27730  0FB9  00E8               	movwf	_delay_time+2	;volatile
 27731  0FBA  00E9               	movwf	_delay_time+3	;volatile
 27732                           
 27733                           ;main.c: 365: getModulationDelayTime();
 27734  0FBB  31AA  2215  3188   	fcall	_getModulationDelayTime
 27735                           
 27736                           ;main.c: 366: modulation_changed = 1;
 27737  0FBE  0024               	movlb	4	; select bank4
 27738  0FBF  01CE               	clrf	_modulation_changed^(0+512)
 27739  0FC0  0ACE               	incf	_modulation_changed^(0+512),f
 27740                           
 27741                           ;main.c: 367: mod_time_changed = 0;
 27742  0FC1  01EC               	clrf	_mod_time_changed^(0+512)
 27743  0FC2                     l8853:	
 27744                           
 27745                           ;main.c: 369: }
 27746                           ;main.c: 372: if ((modArray[120] != bottom_push_state || modArray[121] != symmetry || mo
      +                          dArray[122] != modulationSubdivision)) {
 27747  0FC2  307A               	movlw	122
 27748  0FC3  0086               	movwf	6
 27749  0FC4  3024               	movlw	36
 27750  0FC5  0087               	movwf	7
 27751  0FC6  3F40               	moviw [0]fsr1
 27752  0FC7  0023               	movlb	3	; select bank3
 27753  0FC8  00D1               	movwf	??_main^(0+384)
 27754  0FC9  3F41               	moviw [1]fsr1
 27755  0FCA  00D2               	movwf	(??_main^(0+384)+1)
 27756  0FCB  0863               	movf	(_bottom_push_state+1)^(0+384),w
 27757  0FCC  0652               	xorwf	(??_main+1)^(0+384),w
 27758  0FCD  1D03               	skipz
 27759  0FCE  2FD1               	goto	u9225
 27760  0FCF  0862               	movf	_bottom_push_state^(0+384),w
 27761  0FD0  0651               	xorwf	??_main^(0+384),w
 27762  0FD1                     u9225:	
 27763  0FD1  1D03               	skipz
 27764  0FD2  2FF7               	goto	l8859
 27765  0FD3  307C               	movlw	124
 27766  0FD4  0086               	movwf	6
 27767  0FD5  3024               	movlw	36
 27768  0FD6  0087               	movwf	7
 27769  0FD7  3F40               	moviw [0]fsr1
 27770  0FD8  00D1               	movwf	??_main^(0+384)
 27771  0FD9  3F41               	moviw [1]fsr1
 27772  0FDA  00D2               	movwf	(??_main^(0+384)+1)
 27773  0FDB  086B               	movf	(_symmetry+1)^(0+384),w
 27774  0FDC  0652               	xorwf	(??_main+1)^(0+384),w
 27775  0FDD  1D03               	skipz
 27776  0FDE  2FE1               	goto	u9235
 27777  0FDF  086A               	movf	_symmetry^(0+384),w
 27778  0FE0  0651               	xorwf	??_main^(0+384),w
 27779  0FE1                     u9235:	
 27780  0FE1  1D03               	skipz
 27781  0FE2  2FF7               	goto	l8859
 27782  0FE3  307E               	movlw	126
 27783  0FE4  0086               	movwf	6
 27784  0FE5  3024               	movlw	36
 27785  0FE6  0087               	movwf	7
 27786  0FE7  3F40               	moviw [0]fsr1
 27787  0FE8  00D1               	movwf	??_main^(0+384)
 27788  0FE9  3F41               	moviw [1]fsr1
 27789  0FEA  00D2               	movwf	(??_main^(0+384)+1)
 27790  0FEB  0024               	movlb	4	; select bank4
 27791  0FEC  0843               	movf	(_modulationSubdivision+1)^(0+512),w
 27792  0FED  0023               	movlb	3	; select bank3
 27793  0FEE  0652               	xorwf	(??_main+1)^(0+384),w
 27794  0FEF  1D03               	skipz
 27795  0FF0  2FF5               	goto	u9245
 27796  0FF1  0024               	movlb	4	; select bank4
 27797  0FF2  0842               	movf	_modulationSubdivision^(0+512),w
 27798  0FF3  0023               	movlb	3	; select bank3
 27799  0FF4  0651               	xorwf	??_main^(0+384),w
 27800  0FF5                     u9245:	
 27801  0FF5  1903               	skipnz
 27802  0FF6  2FFC               	goto	L28
 27803  0FF7                     l8859:	
 27804                           
 27805                           ;main.c: 373: updateModulationArray();
 27806  0FF7  3183  23CF         	fcall	_updateModulationArray
 27807                           
 27808                           ;main.c: 374: isInitialized = 1;
 27809  0FF9  0020               	movlb	0	; select bank0
 27810  0FFA  01E2               	clrf	_isInitialized
 27811  0FFB  0AE2               	incf	_isInitialized,f
 27812  0FFC                     L28:	
 27813  0FFC  3198  288E         	goto	l8627
 27814  0FFE                     L27:	
 27815  0FFE                     __end_of_main:	
 27816  0FFE  3198  28D3         	ljmp	l8649


Data Sizes:
    Strings     0
    Constant    84
    Data        46
    BSS         386
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      80
    BANK1            80     80      80
    BANK2            80     79      80
    BANK3            80     66      80
    BANK4            80      0      80
    BANK5            80      0      78
    BANK6            80      0      64
    BANK7            80      0      44
    BANK8            80      0      64
    BANK9            80      0      64
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(2) Largest target is 30
		 -> getPreset@presets(BANK3[30]), savePreset@presets(BANK0[30]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 30
		 -> savePreset@presets(BANK0[30]), 

    USARTReadBuffer@buff	PTR unsigned char  size(1) Largest target is 64
		 -> midiBuff(BANK6[64]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _savePreset->_SetBitMask
    i1_HEF_ByteArrayRead->i1_FLASH_ReadWord
    _SetBitMask->i1___wmul
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _saveState->_savePreset
    _savePreset->_SetBitMask
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    _setSymmetry->_map
    _map->___ftdiv
    ___lltoft->___ftpack
    _setDepth->_updateDepth
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    ___lbtoft->___ftpack
    _USARTReadBuffer->_USARTReadData
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_setFrequency
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _setVolume->_scaleA10kPot
    _setVolume->_scaleiA10kPot
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _setSymmetry->___fttol
    _setFrequency->_scaleA100kPot
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _initSwitchTap->_getTapTime
    _initSwitchBypass->_getSwitchBypassState
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___ftsub->_floor
    _InitWaveform->_getWaveFormState
    _InitSubdivision->_getSubdivisionState
    _initStateManager->_getCurrentState
    _getCurrentState->_getPreset
    _getPreset->_GetBitMask
    _GetBitMask->___wmul
    ___wmul->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _setVolume->_scaleA10kPot
    _setVolume->_scaleiA10kPot
    _setFrequency->_scaleA100kPot
    _getCurrentState->_getPreset

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0 1367475
                                             49 BANK3     17    17      0
                _ConfigureOscillator
                            _InitApp
                    _InitSubdivision
                       _InitWaveform
                     _InitializeTaps
                 _USARTDataAvailable
                          _USARTInit
                    _USARTReadBuffer
                            ___aldiv
                           ___awtoft
                            ___fttol
                           ___lbtoft
                        _adc_convert
                       _calcCosArray
                           _getDepth
                       _getFrequency
             _getModulationDelayTime
                        _getSymmetry
                          _getVolume
                   _initSwitchBypass
                      _initSwitchTap
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                           _setDepth
                       _setFrequency
                 _setLongBypassState
               _setSwitchBypassState
                        _setSymmetry
                          _setVolume
                    _set_leds_bottom
                       _set_leds_top
                    _set_subdivision
              _updateModulationArray
             _updateSubdivisionState
                 _updateSwitchBypass
                    _updateSwitchTap
                      _updateTapTime
                _updateWaveFormState
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5308
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   10528
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   24335
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
                      _updateTapTime
 ---------------------------------------------------------------------------------
 (1) _updateTapTime                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     194
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     632
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   1     1      0   27866
                                             28 BANK1      1     1      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     408
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   23348
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    8391
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4150
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4241
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    7918
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
                    _updatePedalMode
 ---------------------------------------------------------------------------------
 (3) _updatePedalMode                                      1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    2676
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2632
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2610
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               12    12      0  151672
                                             48 BANK2     12    12      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   26866
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   33267
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   29586
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   27098
                                             34 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              20    14      6   26926
                                             14 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   12540
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _setVolume                                            8     6      2  301284
                                             74 BANK2      2     0      2
                                              9 BANK3      6     6      0
                           ___awtoft
                       _scaleA10kPot
                      _scaleiA10kPot
                       _updateVolume
 ---------------------------------------------------------------------------------
 (2) _updateVolume                                         2     0      2      86
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _scaleiA10kPot                                       12     9      3  153052
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _scaleA10kPot                                        12     9      3  143964
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _setSymmetry                                          2     0      2   29871
                                             14 BANK2      2     0      2
                           ___awtoft
                            ___fttol
                                _map
                    _updateFrequency
 ---------------------------------------------------------------------------------
 (2) _map                                                 18     3     15   23947
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         8     6      2  154073
                                             74 BANK2      5     3      2
                           ___awtoft
                            ___ftadd
                            ___ftneg
                      _scaleA100kPot
                    _updateFrequency
 ---------------------------------------------------------------------------------
 (2) _updateFrequency                                      2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _scaleA100kPot                                       12     9      3  140607
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 18    12      6  126391
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     3      3   39184
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 13    10      3   70024
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                               10     5      5    5829
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             6     2      4    2320
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _setDepth                                             2     0      2     172
                                              2 BANK1      2     0      2
                        _updateDepth
 ---------------------------------------------------------------------------------
 (2) _updateDepth                                          2     0      2      86
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3315
                                             18 BANK1      1     1      0
                       _set_leds_top
             _updateSubdivisionState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _updateSubdivisionState                               1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2285
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                _updateWaveFormState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _updateWaveFormState                                  1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initSwitchTap                                        0     0      0    6761
                         _getTapTime
 ---------------------------------------------------------------------------------
 (2) _getTapTime                                           4     0      4    6761
                                             52 BANK2      4     0      4
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    9160
                                             56 BANK2      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2376
                                             21 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                3     1      2    1734
                                             18 BANK1      3     1      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1495
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     296
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     2      0      45
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 4     2      2    6761
                                             52 BANK2      4     2      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _getVolume                                            2     0      2    6761
                                             52 BANK2      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _getSymmetry                                          2     0      2    6761
                                             52 BANK2      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               0     0      0   13658
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getFrequency                                         2     0      2    6761
                                             52 BANK2      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _getDepth                                             2     0      2    6761
                                             52 BANK2      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0   95455
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   76595
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   65786
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (5) _floor                                                9     6      3   15623
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     480
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1724
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___lbtoft (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    3464
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                             8     4      4    2453
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     3      7   17312
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    6583
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    7574
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    7123
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    1965
                                             30 BANK1      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    5539
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3942
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      22
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             8     5      3    2209
                                              8 BANK1      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2187
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _USARTReadBuffer                                      7     5      2     207
                                              2 BANK1      7     5      2
                      _USARTReadData
 ---------------------------------------------------------------------------------
 (2) _USARTReadData                                        2     2      0      23
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      86
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _USARTDataAvailable                                   1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      68
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitWaveform                                         1     1      0    7551
                                             56 BANK2      1     1      0
                   _getWaveFormState
                    _set_leds_bottom
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     790
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getWaveFormState                                     4     2      2    6761
                                             52 BANK2      4     2      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _InitSubdivision                                      1     1      0    8581
                                             56 BANK2      1     1      0
                _getSubdivisionState
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1820
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getSubdivisionState                                  4     2      2    6761
                                             52 BANK2      4     2      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     0     0      0    6761
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (4) _getCurrentState                                      1     1      0    6761
                                             51 BANK2      1     1      0
                          _getPreset
 ---------------------------------------------------------------------------------
 (5) _getPreset                                           68    53     15    6761
                                             32 BANK2     19     4     15
                                              0 BANK3     49    49      0
                         _GetBitMask
                  _HEF_ByteArrayRead
                            ___awdiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     428
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     836
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (6) _HEF_ByteArrayRead                                    8     4      4     663
                                              3 BANK1      8     4      4
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (7) _FLASH_ReadWord                                       3     1      2     259
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (6) _GetBitMask                                          12     8      4    3607
                                             20 BANK2     12     8      4
                             ___bmul (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2660
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  7     7      0    5147
                                             50 BANK0      7     7      0
                   _USARTHandleRxInt
                         _modulation
                          _saveState
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (9) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) _saveState                                            0     0      0    3771
                         _savePreset
 ---------------------------------------------------------------------------------
 (10) _savePreset                                         40    40      0    3771
                                             10 BANK0     40    40      0
                 _HEF_ByteArrayWrite
                         _SetBitMask
                i1_HEF_ByteArrayRead
                          i1___awdiv
                           i1___bmul
 ---------------------------------------------------------------------------------
 (11) i1___bmul                                            4     3      1     430
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (9) i1___awdiv                                            9     5      4     404
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (11) i1_HEF_ByteArrayRead                                 8     4      4     285
                                              3 COMMON     8     4      4
                   i1_FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (12) i1_FLASH_ReadWord                                    3     1      2      93
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (11) _SetBitMask                                         18    10      8    1369
                                              6 COMMON     8     0      8
                                              0 BANK0     10    10      0
                           i1___bmul (ARG)
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (11) _HEF_ByteArrayWrite                                  9     7      2     526
                                              3 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (12) _FLASH_EraseBlock                                    3     1      2     195
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (10) i1___lmul                                           12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (10) i1___aldiv                                          15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (9) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitSubdivision
     _getSubdivisionState
       _initStateManager
         _getCurrentState
           _getPreset
             _GetBitMask
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _HEF_ByteArrayRead
               _FLASH_ReadWord
             ___awdiv
             ___bmul
     _set_leds_top
   _InitWaveform
     _getWaveFormState
       _initStateManager
         _getCurrentState
           _getPreset
             _GetBitMask
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _HEF_ByteArrayRead
               _FLASH_ReadWord
             ___awdiv
             ___bmul
     _set_leds_bottom
   _InitializeTaps
   _USARTDataAvailable
   _USARTInit
   _USARTReadBuffer
     _USARTReadData
   ___aldiv
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___lbtoft (ARG)
       ___ftpack
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
   ___lbtoft
     ___ftpack
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _frexp
   _getDepth
     _initStateManager
       _getCurrentState
         _getPreset
           _GetBitMask
             ___bmul (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _HEF_ByteArrayRead
             _FLASH_ReadWord
           ___awdiv
           ___bmul
   _getFrequency
     _initStateManager
       _getCurrentState
         _getPreset
           _GetBitMask
             ___bmul (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _HEF_ByteArrayRead
             _FLASH_ReadWord
           ___awdiv
           ___bmul
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _getModulationSubdivision
   _getSymmetry
     _initStateManager
       _getCurrentState
         _getPreset
           _GetBitMask
             ___bmul (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _HEF_ByteArrayRead
             _FLASH_ReadWord
           ___awdiv
           ___bmul
   _getVolume
     _initStateManager
       _getCurrentState
         _getPreset
           _GetBitMask
             ___bmul (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _HEF_ByteArrayRead
             _FLASH_ReadWord
           ___awdiv
           ___bmul
   _initSwitchBypass
     _getSwitchBypassState
       _initStateManager
         _getCurrentState
           _getPreset
             _GetBitMask
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _HEF_ByteArrayRead
               _FLASH_ReadWord
             ___awdiv
             ___bmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _initSwitchTap
     _getTapTime
       _initStateManager
         _getCurrentState
           _getPreset
             _GetBitMask
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _HEF_ByteArrayRead
               _FLASH_ReadWord
             ___awdiv
             ___bmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___lbtoft (ARG)
       ___ftpack
   _read_bottom_tactile
     _set_leds_bottom
     _updateWaveFormState
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _updateSubdivisionState
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _frexp
   _setDepth
     _updateDepth
   _setFrequency
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _scaleA100kPot
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _floor (ARG)
               ___altoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               _frexp
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
           _ldexp
             ___ftge
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
     _updateFrequency
   _setLongBypassState
   _setSwitchBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _setSymmetry
     ___awtoft
       ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _map
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     _updateFrequency
   _setVolume
     ___awtoft
       ___ftpack
     _scaleA10kPot
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _floor (ARG)
               ___altoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               _frexp
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
           _ldexp
             ___ftge
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
     _scaleiA10kPot
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _floor (ARG)
               ___altoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               _frexp
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
           _ldexp
             ___ftge
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
     _updateVolume
   _set_leds_bottom
   _set_leds_top
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
   _updateSubdivisionState
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
         _updatePedalMode
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
         _updatePedalMode
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
     _updateTapTime
   _updateTapTime
   _updateWaveFormState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _updatePedalMode
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _USARTHandleRxInt
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   _saveState
     _savePreset
       _HEF_ByteArrayWrite
         _FLASH_EraseBlock
       _SetBitMask
         i1___bmul (ARG)
         i1___wmul (ARG)
       i1_HEF_ByteArrayRead
         i1_FLASH_ReadWord
       i1___awdiv
       i1___bmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4F      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     42      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      4E      15       97.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     2D8      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      2C      20       55.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      40      22       80.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     2D8      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Mar 21 23:15:07 2017

                       _updateVolume 3FED                          _update_mode 35E5  
                       ___altoft@exp 00AE                                    _n 024F  
                     ___bmul@product 00A2                          __CFG_CP$OFF 0000  
                      ___altoft@sign 00AF                     modSaw@inflection 0131  
                   scaleA100kPot@pwm 01A0                         ___awdiv@sign 00A6  
                 _topTactile_pressed 0257           setDoublePressState@f_state 00B8  
                ___wmul@multiplicand 0130                   USARTInit@baud_rate 00A0  
                   i1___wmul@product 0074                      _updateSwitchTap 1623  
                    GetBitMask@index 0136                         ___ftadd@exp1 00CD  
                       ___ftadd@exp2 00CC                         ___ftadd@sign 00CB  
                    GetBitMask@shift 0137             __size_of_InitSubdivision 003D  
                                l509 3568                                  l453 08FF  
                                l707 3151                 __size_of_adc_convert 0013  
                                l491 0EF6                                  l467 0C3B  
                                l484 0E27                                  l468 0C57  
               ??_USARTDataAvailable 00A0                                  l931 369A  
                                l924 2C6F                                  l932 369D  
                                l925 2C93                                  l933 36A0  
                                l934 36A3                                  l936 36A6  
                                l937 36CA                                  l929 3697  
                                _GIE 005F                                  _PR2 001B  
                     ?_USARTReadData 0070         solidring_tactiles@ring_delay 00B4  
                                _cos 2E81                                  _map 21DF  
                                _exp 1B10                                  _log 101B  
                    _getCurrentState 31B4                                  _isr 0004  
                                _tap 03A0                                  _sin 1454  
                                _pow 19FA                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       __CFG_FOSC$HS 0000                  set_subdivision@tmpX 0135  
            __end_of_set_leds_bottom 36CB                         __CFG_LVP$OFF 0000  
                     i1___aldiv@sign 0029                         ___ftdiv@cntr 00D8  
                       ___ftdiv@sign 00DD                                 l1120 2AA2  
                               l1116 2A75                                 l2021 2977  
                               l1134 2015                                 l1160 3367  
                               l1313 1406                                 l1138 2046  
                               l1164 2CEF                                 l1157 3357  
                               l1149 3615                                 l1414 2A04  
                               l1159 335E                                 l1175 2D39  
                               l1382 3326                                 l2502 2062  
                               l1553 2724                                 l1731 16EF  
                               l2621 2D87                                 l1717 163A  
                               l2622 2D8F                                 l2614 2D74  
                               l2447 3241                                 l2705 21C5  
                               l2645 19A3                                 ?_cos 014C  
                               l2817 1A1E                                 l2835 1569  
                               ?_map 00DE                                 l6215 323B  
                               l6231 2D4A                                 l6313 312A  
                               l7009 1C49                                 l7121 337C  
                               l8001 2D3D                                 l6235 2D51  
                               l6331 371D                                 l6309 3124  
                               l6245 2D79                                 l6237 2D5B  
                               l6421 1982                                 l6333 372D  
                               l7205 1121                                 l6351 2C04  
                               l6247 2D81                                 l6239 2D60  
                               l6415 196F                                 l6511 261C  
                               l7119 3370                                 l6265 35C4  
                               l6361 2C0C                                 l6345 2BF9  
                               l6601 2C67                                 l6433 19B5  
                               l6417 1979                                 l6409 195C  
                               l7233 1489                                 l7081 1A8C  
                               l7073 1A32                                 l8009 2719  
                               l6363 2C18                                 l6427 1995  
                               l6419 197E                                 l6507 2614  
                               l7067 1A26                                 l7219 1E1D  
                               l8043 276B                                 l8019 272E  
                               ?_exp 0148                                 l6269 35C6  
                               l6277 35E0                                 l6373 2C33  
                               l6605 2C76                                 l6701 32F7  
                               l6437 19C7                                 l6429 199F  
                               l7245 1525                                 l7085 1AAC  
                               l7413 267C                                 l8045 2773  
                               l8141 168B                                 l8125 164C  
                               l8205 17E8                                 ?_log 013E  
                               l6615 36AD                                 l6711 244B  
                               l6447 19E2                                 l6391 1933  
                               l6455 2817                                 l6535 2171  
                               l7343 3496                                 l6295 351E  
                               l8223 2A6A                                 l7407 265F  
                               l8311 0887                                 l8303 082F  
                               l8055 2788                                 l8039 2759  
                               l8119 162F                                 l6377 2C3B  
                               l6369 2C2A                                 l6561 21BC  
                               l6553 21A1                                 l7345 3498  
                               l8233 2A91                                 l8305 0848  
                               l8161 16B8                                 l6731 24A2  
                               l6387 192C                                 l6483 25BD  
                               l6459 282D                                 l6563 21C8  
                               l6555 21AF                                 l7603 2ECB  
                               l7347 34A7                                 l6299 3528  
                               l7531 3316                                 l7427 20DF  
                               l8083 27C8                                 l8075 27AE  
                               l8067 279B                                 l8147 1696  
                               l8139 166E                                 l8163 16C0  
                               ?_isr 0070                                 l6661 13FF  
                               l6717 2461                                 l6397 1942  
                               l6477 25A7                                 l7349 34A9  
                               l7517 3117                                 l7189 34CD  
                               l8341 0447                                 l8085 27CE  
                               l8093 27E0                                 l8069 279E  
                               l8181 1733                                 l8173 16E7  
                               l8165 16CF                                 l6671 1417  
                               l6751 3432                                 l6495 25F8  
                               l6567 21D6                                 l7535 3322  
                               l8247 200A                                 l7391 23BB  
                               l7615 0649                                 l8351 05A5  
                               l8343 048D                                 l8335 0412  
                               l8191 1789                                 l6681 1431  
                               l6665 1408                                 l7481 30F5  
                               l6593 2C47                                 l7473 3106  
                               l8257 2031                                 l6833 237E  
                               l6809 232E                                 l7385 23A1  
                               l8361 05D6                                 l8345 04D3  
                               l6683 1435                                 l6675 1422  
                               l6595 2C4F                                 l6739 24BB  
                               l6499 2600                                 l6579 37D4  
                               l6931 33AE                                 l8291 0816  
                               l7619 078B                                 l8371 05F9  
                               l8347 0519                                 l8355 05B9  
                               l8099 27ED                                 l8195 17AF  
                               l6677 1426                                 l6669 1413  
                               l6597 2C57                                 l7581 3385  
                               l6765 2513                                 l6933 33BE  
                               l6829 2376                                 l8293 081A  
                               l7629 377C                                 l8365 05DF  
                               l8349 055F                                 l8357 05D0  
                               l6909 3672                                 l7557 37AD  
                               l7565 37B8                                 l7549 379C  
                               l8189 173F                                 l8701 0996  
                               l6687 1440                                 l6599 2C5F  
                               l7831 3648                                 l7591 33A6  
                               l6943 103F                                 l8295 081E  
                               l8359 0429                                 l7655 2083  
                               l7647 2073                                 l6689 1444  
                               l7841 36F1                                 l7921 33D9  
                               l6769 251B                                 l8297 0822  
                               l8289 0810                                 l6881 2B0B  
                               l7673 20CA                                 l7665 20B1  
                               l7657 2091                                 l8801 0DA1  
                               l8713 09F2                                 l8705 09BA  
                               l8625 1878                                 l7843 36F6  
                               l7587 339C                                 l6779 2588  
                               l8299 0828                                 l8731 0BFF  
                               l8627 188E                                 ?_sin 013E  
                               l7829 3643                                 l9461 2963  
                               l7781 294A                                 l6789 2E7A  
                               l6981 1B66                                 l6965 1B1D  
                               l6949 1052                                 l7669 20BC  
                               l8821 0E73                                 l8813 0E2A  
                               l8805 0DDB                                 l8725 0B3C  
                               l8661 088D                                 l9471 2C7C  
                               l9463 2968                                 l7783 294C  
                               l7791 2954                                 l6799 230C  
                               l6975 1B42                                 l8831 0EF9  
                               l8751 0C68                                 l8735 0C1D  
                               l8727 0B7C                                 l8719 0A8B  
                               l8655 18E3                                 l7937 33FC  
                               l7929 33EA                                 l9465 296D  
                               l7785 294E                                 l9457 05BF  
                               l6889 2B2F                                 l7961 3608  
                               l8841 0F8E                                 l8817 0E33  
                               l8809 0DED                                 l8729 0BBF  
                               l8681 08E8                                 l8665 089A  
                               l8657 18EE                                 l8649 18D3  
                               l9467 2972                                 l7787 2950  
                               l7947 3290                                 l7891 30B4  
                               l7875 30C4                                 l7883 30D4  
                               l7867 1807                                 l6987 1BA1  
                               l9459 0834                                 l8835 0F39  
                               l8827 0EC0                                 l8771 0CB4  
                               l8739 0C26                                 l8691 0942  
                               l8683 08F7                                 l8667 08A3  
                               l9469 36B3                                 l8853 0FC2  
                               l8765 0CA5                                 l8669 08B2  
                               l8757 0C77                                 ?_pow 0155  
                               l7967 3612                                 l7991 2D23  
                               l7983 2D12                                 l8679 08CD  
                               l8759 0C95                                 l7969 3619  
                               l8793 0D55                                 l8785 0D09  
                               l8859 0FF7                                 l8699 094E  
                               l7989 2D1E                                 l8797 0D8F  
                               l8789 0D43                                 l7999 2D35  
                               u5024 29EC                                 u5025 29EA  
                               u5044 29FE                                 u5045 29FC  
                               u5205 2C19                                 u5054 2A0E  
                               u5055 2A0C                                 u5215 2C23  
                               u5135 3722                                 u5225 2C2B  
                               u6105 2B2D                                 u5075 3529  
                               _PEIE 005E                                 u6140 31C3  
                               u5405 1983                                 u5085 3530  
                               u6230 1B7F                                 u6240 1B80  
                               u5185 2C0F                                 u5345 195D  
                               u5435 1996                                 u6075 2337  
                               u7035 2086                                 _RCIE 048D  
                               _RCIF 008D                                 u5605 261D  
                               u6165 33B3                                 u5375 1970  
                               u5615 2623                                 u5535 25C9  
                               u6095 2B09                                 u7055 2092  
                               u4905 2D6F                                 u5545 25D9  
                               u7065 20A6                                 u8105 175D  
                               u6530 1521                                 u4835 3242  
                               u5715 21BD                                 u6275 1C40  
                               u7075 20B2                                 u8115 1771  
                               u6540 1522                                 u4845 3247  
                               u4925 2D7C                                 u5565 2601  
                               u6365 1A7D                                 u9005 0C50  
                               u6470 34CB                                 u5575 2607  
                               u5655 2178                                 u8135 178E  
                               u9015 0C61                                 u7345 3633  
                               u7505 3296                                 u8305 0882  
                               u9105 0DBC                                 u7355 3641  
                               u8315 03EC                                 u8075 1701  
                               u9115 0DD9                                 u7365 36E1  
                               u4965 2D96                                 u4885 2D56  
                               u5685 21A2                                 u8325 0400  
                               u8085 1718                                 u7525 35F8  
                               u9205 0F37                                 u9125 0E08  
                               u7375 36EF                                 u5935 2473  
                               u8255 202A                                 u8335 0410  
                               u8095 1748                                 u9135 0E25  
                               u4985 35B2                                 u7385 333C  
                               u5945 2483                                 u8345 0430  
                               u9225 0FD1                                 u9065 0D24  
                               u5890 144F                                 u7395 3342  
                               u5955 24A3                                 u6755 325F  
                               u8195 2A8A                                 u7715 2734  
                               u9235 0FE1                                 u9155 0E51  
                               u9075 0D41                                 u5965 24B2  
                               u6765 32D6                                 u6925 31F2  
                               u9245 0FF5                                 u9165 0E71  
                               u9085 0D70                                 u5975 24BC  
                               u9175 0EDE                                 u9095 0D8D  
                               u7595 2D01                                 u9195 0F17  
                               u6885 378D                                 u8915 0910  
                               u7965 1677                                 u8925 0927  
                               u8935 0955                                 u8775 1874  
                               u8945 096A                                 u7995 169C  
                               u8955 097E                                 u8885 08D4  
                               u8975 0999                                 u8985 0C16  
       __size_of_getSubdivisionState 0011                   scaleA100kPot@input 0167  
                       __CFG_WRT$OFF 0000                    _scaleA10kPot$3257 01A3  
                  _scaleA10kPot$3258 01A6                        __CFG_FCMEN$ON 0000  
         __end_of_HEF_ByteArrayWrite 2BEE                                 _iCnt 01EF  
                               _main 1810                         ___ftpack@arg 00A0  
                               cos@f 014C                         ___ftpack@exp 00A3  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               map@x 00DE                       ?_updateTapTime 0070  
                               btemp 007E                    USARTReadData@data 00A1  
                               exp@x 0148                                 log@x 013E  
                      __CFG_BOREN$ON 0000                                 sin@f 013E  
                               sin@y 0142                                 ltemp 007E  
                               pow@x 0155                                 pow@y 0158  
                               start 0344                                 ttemp 007E  
                               wtemp 007E         __end_of_getSwitchBypassState 3121  
                    _expressModeCnst 026A                           _GetBitMask 29CD  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 3270  
                    ?i1_set_leds_top 0070                    ___bmul@multiplier 00A3  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 00BC  
            __end_of_updatePedalMode 305C                    ?_getWaveFormState 0154  
            __end_of_updateFrequency 3FED                         ___ftmul@sign 00BD  
                    __end_of_InitApp 3515                         ___fttol@exp1 012D  
                 ??_getWaveFormState 0156                                ??_cos 00F0  
                              ??_map 00ED                __size_of_calcCosArray 0081  
                              ??_exp 014B                                ??_log 0141  
                       ___fttol@lval 0129                                ??_isr 0052  
                              ??_sin 0141                                ??_pow 015B  
                    _switchBypass_up 026E                    ?_USARTHandleRxInt 0070  
                      ?_InitWaveform 0070            __size_of_initSwitchBypass 0012  
                    __end_of___aldiv 20D3                                ?_main 0070  
                     i1___awdiv@sign 0076                      __end_of___awdiv 2C40  
                 ??_USARTHandleRxInt 0070                      __end_of___ftadd 19FA  
                              _CCPR1 0291                                _CCPR2 0298  
                              _CCPR3 0311                                _CCPR4 0318  
                              _CCPR5 031C                        __CFG_WDTE$OFF 0000  
                    __end_of___ftdiv 24DD                      __end_of___ftneg 3FDB  
                    __end_of___ftmul 2644                      ___awdiv@divisor 00A0  
                    __end_of___ftsub 3458                      __end_of___fttol 21DF  
                              i1l150 033F                                i1l151 0023  
                              i1l154 0151                                i1l924 29AA  
                              i1l925 29CC                      ___awdiv@counter 00A5  
                              _PMADR 0191                                _RCREG 0199  
                              _SPBRG 019B                    GetBitMask@storage 0134  
                  SetBitMask@storage 0076                   __end_ofsin@coeff_a 3048  
                 __end_ofsin@coeff_b 3054                                _TXREG 019A  
                              _UQEnd 005F                  _ConfigureOscillator 3F9F  
        __size_of_setLongBypassState 0021                    main@tapCntDivisor 01DD  
                   _setPresetDisplay 3656                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                   ?_USARTReadBuffer 00A2                         ___lltoft@exp 00AD  
                    _switchTap_state 026F                    ??_setLongTapState 00A2  
                      ___awtoft@sign 00AD                                _floor 24DD  
                              _ldexp 22FF                                _frexp 37C0  
                              _myBuf 04A0                                _errno 02E6  
           _getModulationSubdivision 3487                        ___ftpack@sign 00A4  
                              _timer 022C                     __end_ofi1___bmul 30EE  
                   __end_ofi1___lmul 3487                                sin@x2 0148  
                   __end_ofi1___wmul 321C                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                      __end_of_wait_ms 3577  
                              pow@yi 0163                      scaleA10kPot@pwm 01A0  
                 __size_of_USARTInit 0044                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003               HEF_ByteArrayRead@block 00A5  
        __end_of_read_bottom_tactile 2AAD                  i1___wmul@multiplier 0070  
                 __size_ofi1___aldiv 0082                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
             HEF_ByteArrayRead@count 00A6                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0132       __size_of_setSwitchBypassRelays 002F  
                   setDepth@rawValue 00A2        __end_of_setSwitchBypassRelays 34E5  
                       _calcCosArray 2EFD                          exp@exponent 0152  
               ?_ConfigureOscillator 0070                   _updateSwitchBypass 270F  
                        ldexp@newexp 0141              __end_of_updateSwitchTap 1800  
                    __initialization 0346      __size_of_updateSubdivisionState 0008  
                        log@exponent 0142          updateModulationArray@iAngle 015B  
            _updateSwitchBypassState 3066                         __end_of_main 0FFE  
               __end_of_getFrequency 30CD              __size_of_InitializeTaps 0026  
                i1___lmul@multiplier 0070               __size_of_scaleA100kPot 0085  
                        modCos@angle 0134              __end_of_getCurrentState 31CD  
                     ??_InitWaveform 0158                  ?_updateSwitchBypass 0070  
                     __CFG_LPBOR$OFF 0000               ring_tactiles@iLed_1609 00B5  
                        modCos@shift 013F                      _set_subdivision 0802  
                    ??_USARTReadData 00A0                     _initStateManager 3FA3  
        updateModulationArray@subDiv 0157                               ??_main 01D1  
                      ___fttol@sign1 0128   __end_ofi1_getModulationSubdivision 342A  
         i1_getModulationSubdivision 33FE                    ?i1_FLASH_ReadWord 0070  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0                           _SetBitMask 2AAD  
                 ??i1_FLASH_ReadWord 0072           __end_of_solidring_tactiles 287C  
                   ?_set_leds_bottom 00A0                    savePreset@presets 0033  
                  _HEF_ByteArrayRead 35AD                    ??_InitSubdivision 0158  
                             ?_floor 012E                               ?_ldexp 013E  
                             ?_frexp 00A0                     __end_of___altoft 3745  
                 USARTReadBuffer@len 00A2                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
               getPreset@bankChannel 01C1                     __end_of___awtoft 330E  
                   __end_of___ftpack 2DA6                     __end_of___lbtoft 101B  
               ??_updateSwitchBypass 00BC                   ?_HEF_ByteArrayRead 00A3  
                   __end_of___lltoft 33D3                               i1l1410 2ADE  
                             i1l2502 2F8F                               i1l2447 3209  
                             i1l2297 2BE6                               i1l7037 3203  
                             i1l7311 2B60                               i1l7321 2B68  
                             i1l7305 2B55                               i1l7323 2B74  
                             i1l7333 2B8F                               i1l7177 2BC3  
                             i1l7265 358D                               i1l7337 2B97  
                             i1l7329 2B86                               i1l8411 29A4  
                             i1l8403 298C                               i1l7701 2FA0  
                             i1l7269 358F                               i1l7277 35A8  
                             i1l7285 30DF                               i1l8405 2992  
                             i1l7711 2FBE                               i1l8423 340D  
                             i1l8407 2998                               i1l8415 29B0  
                             i1l8503 01D5                               i1l7289 30E5  
                             i1l8425 340F                               i1l8409 299E  
                             i1l8521 0232                               i1l8505 01E4  
                             i1l7723 2FE9                               i1l8427 341E  
                             i1l8507 01E6                               i1l7709 2FB0  
                             i1l8429 3420                               i1l8533 0260  
                             i1l8517 021A                               i1l8525 0241  
                             i1l8453 00E3                               i1l7743 2928  
                             i1l7727 2FF7                               i1l7719 2FDE  
                             i1l8535 026F                               i1l8519 0223  
                             i1l8463 00FB                               i1l8439 0012  
                             i1l8545 02B7                               i1l8553 0309  
                             i1l8529 0255                               i1l8537 0271  
                             i1l8481 0178                               i1l7747 292F  
                             i1l7739 291F                               i1l7683 346A  
                             i1l8571 033E                               i1l8475 0165  
                             i1l8459 00F1                               i1l7749 2933  
                             i1l8565 0337                               i1l7679 3460  
                             i1l9473 29B5                               i1l8569 033C  
                    ??_updateTapTime 00A0                               _PMADRH 0192  
                             _PMADRL 0191                               _PMDATH 0194  
                             _PMDATL 0193                               _PMCON2 0196  
          __size_of_FLASH_EraseBlock 001C                               u630_25 320F  
                             u711_25 346B                               u640_24 2AD8  
                             u720_25 2FD3                               u712_25 3472  
                             u640_25 2AD6                               u641_24 2AE6  
                             u721_25 2FDF                               u641_25 2AE4  
                             u644_25 2BAD                               u717_25 2FB3  
                             u629_25 320A                               u638_24 2AC5  
                             u638_25 2AC3                               u670_25 2B87  
                             u727_25 291D                               u719_25 2FBF  
                             u657_25 357B                               u666_25 2B6B  
                             u850_25 0133                               u851_25 013C  
                             u668_25 2B75                               u669_25 2B7F  
                             u853_25 015F                               u871_23 0299  
                             u855_25 0172                               u864_23 0208  
                             u872_25 02AE                               u849_23 0123  
                             u874_25 0319                               u859_23 01A6  
                             u875_25 0332                       _debounce_count 02DE  
                        modSaw@angle 012E                       _debounce_mode1 02E0  
                     _debounce_mode2 02E2               __size_of_initSwitchTap 000B  
                        modSaw@shift 013C                               _URBuff 0420  
                          ??_InitApp 00A0                ??_ConfigureOscillator 00A0  
           __end_of_read_top_tactile 2051                         ?_setSymmetry 012E  
            ?_getModulationDelayTime 0070                  ??_HEF_ByteArrayRead 00A7  
                   __end_of_getDepth 30BD                       __CFG_PWRTE$OFF 0000  
                        ?_GetBitMask 0134                 __size_of_getSymmetry 0010  
                   ?_updatePedalMode 0070                               ___bmul 3121  
                   ?_updateFrequency 00A0                               ___ftge 2800  
                             ___lmul 3515                            ??___aldiv 00A8  
                             ___wmul 3238                    _update_selectMode 2CE8  
                          ??___awdiv 00A4                            ??___ftadd 00C7  
                     __CFG_STVREN$ON 0000                            ??___ftdiv 00D4  
                          ??___ftneg 00C1                            ??___ftmul 00B4  
                          ??___ftsub 00F0                            ??___fttol 0124  
                        modTri@angle 012E                               _modCos 10EC  
                   __end_of_init_adc 4000                               _modSaw 1DE8  
                             _modTri 0614                     __end_of_init_pwm 28FE  
                 ?_update_selectMode 0070                          modTri@shift 0137  
                   ___awdiv@quotient 00A7                __end_of_resetRingLEDs 31E7  
                             _tmpVal 02EC                    __end_of_USARTInit 2985  
                   __end_of_setDepth 3088                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 3000                               floor@i 0132  
                             floor@x 012E          __end_of_updateWaveFormState 3FB8  
              ___ftmul@f3_as_product 00B9                    __end_ofi1___awdiv 2B9C  
            FLASH_ReadWord@flashAddr 00A0            __end_of_HEF_ByteArrayRead 35E5  
            HEF_ByteArrayRead@bArray 00A3                               sin@sgn 014B  
                   __end_of_showSave 316C                  ??_update_selectMode 00A7  
               _getSwitchBypassState 3110               _updateSubdivisionState 3FB8  
                          ??_wait_ms 00AE                 _setSwitchBypassState 3254  
                      _scaleA100kPot 20D3         __end_of_setExpressionDisplay 319B  
             __size_of_scaleiA10kPot 00CB               setLongTapState@f_state 00A0  
                   __end_ofexp@coeff 301E                     __end_oflog@coeff 3039  
          i1FLASH_ReadWord@flashAddr 0070              __end_of__initialization 03CB  
                         ___altoft@c 00A8       __end_of_getModulationDelayTime 2A60  
          i1HEF_ByteArrayRead@bArray 0073                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 0248  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 006C            ??_updateSwitchBypassState 00A0  
                       ?_updateDepth 00A0                           ___ftneg@f1 00BE  
                _switchBypass_toggle 0254                           ___awtoft@c 00A8  
              __end_of_ring_tactiles 2B4B                           ___lbtoft@c 00AF  
                ___bmul@multiplicand 00A0            __end_of_update_selectMode 2D41  
            __end_of_set_subdivision 088D                           ___ftmul@f1 00AE  
                         ___ftmul@f2 00B1                           ___ftsub@f1 013A  
                         ___ftsub@f2 0137                           ___fttol@f1 0120  
                   ?_updateSwitchTap 0070                         ?_update_mode 0070  
                     __pcstackCOMMON 0070               getPreset@presetChannel 01A1  
                       __pidataBANK0 305C                         __pidataBANK3 30A0  
                       __pidataBANK4 316C                           ___lltoft@c 00A8  
                      __end_of_floor 2590                        __end_of_ldexp 2396  
                      __end_of_frexp 3800                     ?_getCurrentState 0070  
                _getSubdivisionState 30EE                     _initSwitchBypass 3133  
                          ?i1___bmul 0070                        _initSwitchTap 3071  
        updateFrequency@currentValue 00A0                            ?i1___lmul 0070  
              _updateModulationArray 03CF                            ?i1___wmul 0070  
                    _doubleTap_state 0061                savePreset@bankChannel 0051  
                     _OPTION_REGbits 0095                         modCos@period 0142  
                 __size_of_getPreset 01BC                          ?_SetBitMask 0076  
                       modCos@tmpVal 0145                ?_getSwitchBypassState 0154  
                 __size_of_getVolume 0010                  __size_of_GetBitMask 0048  
              ?_setSwitchBypassState 00B5         __size_ofi1_HEF_ByteArrayRead 0036  
                     ?_scaleA100kPot 0167                     i1___bmul@product 0072  
                            ??_floor 0131                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                        ?_setPedalMode 0070  
                      ?_setFrequency 016A                           __pbssBANK0 0059  
                         __pbssBANK2 016F                           __pbssBANK3 01EF  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                           __pbssBANK7 03A0  
                         __pbssBANK8 0420                           __pbssBANK9 04A0  
               ?_getSubdivisionState 0154                 __end_of_InitWaveform 3656  
                 __size_of_eval_poly 0072                     ??i1_set_leds_top 0074  
                    __CFG_VCAPEN$OFF 0000                   __size_of_modSawRev 001C  
              __size_of_getFrequency 0010                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 3690                           _delay_time 0066  
                   _long_press_limit 025F         __size_of_setDoublePressState 003E  
                         _delayfound 02E4                           __pmaintext 1810  
                            ?___bmul 00A0                       _InitializeTaps 3330  
                            ?___ftge 00A0                              ?___lmul 00A0  
                            ?___wmul 012E       updateModulationArray@thisAngle 0159  
                         __pintentry 0004                        _scaleiA10kPot 2644  
                 _HEF_ByteArrayWrite 2B9C                           _blink_rate 006E  
                 __size_of_saveState 0009                        ??_adc_convert 00A2  
                            ?_modCos 0134                            ?___altoft 00A8  
                            ?_modSaw 012E                  USARTReadBuffer@buff 00A6  
                            ?_modTri 012E                       ___lmul@product 00A8  
                         _getTapTime 330E                      _setLongTapState 31E7  
                     ?_initSwitchTap 0070                     getPreset@presets 01A3  
                          ?___awtoft 00A8                            ?___ftpack 00A0  
                          ?___lbtoft 00A8                   __size_of_setVolume 0069  
                modSquare@inflection 014B                           ??i1___bmul 0071  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                           ??i1___wmul 0074  
                     _FLASH_ReadWord 32AB          __size_of_USARTDataAvailable 002B  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 3071  
                        modulation@x 002E                          modulation@y 0032  
                ?_HEF_ByteArrayWrite 0073           __size_of_HEF_ByteArrayRead 0038  
                     _setVolume$3271 01A9                       _setVolume$3272 01AC  
                        savePreset@r 002E            __size_of_getWaveFormState 0011  
                          ?_getDepth 0154                           _ldexp$3018 0145  
                    _debounce_bypass 02DC                         _getFrequency 30BD  
                     ??_setPedalMode 00A7                       ??_setFrequency 00F0  
                 USARTWriteInt@F3536 02C9                _modulationSubdivision 0242  
          __size_of_USARTHandleRxInt 0043                ??_getSubdivisionState 0156  
                      _suspend_blink 016F         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 013F                              _UQFront 0060  
                   _FLASH_EraseBlock 321C             __end_of_initStateManager 3FA9  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 0246                              _InitApp 34E5  
               ??_HEF_ByteArrayWrite 0075                 __end_of_scaleA10kPot 2434  
                          ?_setDepth 00A2               __end_of_InitializeTaps 3356  
                      ?_set_leds_top 00A0                    __end_of_getPreset 1454  
                         _knob1_prev 01E4           __size_of_update_selectMode 0059  
                 i1___awdiv@quotient 0077                           _knob2_prev 01E6  
                         _knob3_prev 01E8                           _knob4_prev 025B  
                         _knob5_prev 025D                     ?_set_subdivision 012E  
                  __end_of_getVolume 1810                  __size_of_SetBitMask 004E  
               __size_of_setSymmetry 0054                            ?_showSave 0070  
                            ___aldiv 2051                           _pedalState 02B4  
                    __size_of___bmul 0012                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 2BEE  
                    __size_of___lmul 0030                              ___ftadd 1904  
                            ___ftdiv 2434                              ___ftneg 3FD2  
                         _knob_1_pos 0230                           _knob_2_pos 0232  
                    __size_of___wmul 001C                              ___ftmul 2590  
                         _knob_3_pos 0234                              ___ftsub 342A  
                            ___fttol 2158                           _knob_4_pos 0236  
                         _knob_5_pos 0238                    _switchTap_pressed 0256  
                         ??___altoft 00AC                 _setExpressionDisplay 3183  
             ?_updateModulationArray 0070                      __size_of_modCos 01AC  
             __end_of_FLASH_ReadWord 32CB                      __size_of_modSaw 0198  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01E3                           ??___lbtoft 00AB  
                  __end_of_eval_poly 2E81                      _InitSubdivision 36CB  
               getPreset@pedalPreset 01C2                   InitializeTaps@itap 00A1  
                         ??___lltoft 00AC                              __ptext1 2CE8  
                            __ptext2 35E5                              __ptext3 1623  
                            __ptext4 07F7                              __ptext5 31E7  
                            __ptext6 2051                              __ptext7 270F  
                            __ptext8 32CB                              __ptext9 3782  
         __end_of_setLongBypassState 32EC          ?i1_getModulationSubdivision 0070  
             ??_getSwitchBypassState 0156                    __end_of_modSawRev 328C  
                          _T2CONbits 001C                         __size_of_cos 007C  
                       __size_of_map 008B                         __size_of_exp 0159  
                       __size_of_log 00D1                         __size_of_isr 0340  
             ??_setSwitchBypassState 00B7                         __size_of_sin 01CF  
                       __size_of_pow 0116                  __end_of_adc_convert 3158  
                       modTri@period 013A                    __end_of_modSquare 3782  
                    ??_scaleA100kPot 00F0                     ___aldiv@dividend 00A4  
                       modTri@tmpVal 013D                  i1___bmul@multiplier 0073  
                         ??_getDepth 00F0                              _wait_ms 3545  
                            clrloop0 3095                 end_of_initialization 03CB  
                  __end_of_saveState 3FC9                              exp@sign 0154  
                      savePreset@dep 0030                           _modulation 287C  
                         _savePreset 1C69             __size_of_USARTReadBuffer 001F  
                  __end_of_setVolume 2E0F                              init_ram 3088  
                         ??_init_adc 00A0            __size_ofi1_FLASH_ReadWord 0019  
                            initloop 3089                           ??_init_pwm 00A0  
                  setVolume@rawValue 016A         updateSwitchBypassState@state 00A1  
                 _solidring_tactiles 283C                           _save_timer 02D2  
                      _longTap_timer 023C                        _longTap_state 006F  
                      _longTap_start 024C                           ??_setDepth 00A4  
                     ??_set_leds_top 00A4                         ??_GetBitMask 0138  
                  ?_read_top_tactile 0070                      ?_InitializeTaps 0070  
                            pow@sign 0162                    scaleA10kPot@input 0167  
            __end_of_setLongTapState 3201                _setSwitchBypassRelays 34B6  
             i1set_leds_top@ledState 0072                   ??_read_top_tactile 00B2  
                          _RCSTAbits 019D                           ??_showSave 00B7  
                   _mod_time_changed 026C                     _longBypass_timer 023A  
                   ___aldiv@quotient 00AB                 __size_of_updateDepth 0009  
                   _longBypass_state 0063                     _longBypass_start 024B  
                            psplit$0 1A0093         __size_of_read_bottom_tactile 004D  
                ?_solidring_tactiles 0070                      ??_initSwitchTap 00F0  
                       __pstringtext 3000            FLASH_ReadWord@GIEBitValue 00A2  
              ?_setExpressionDisplay 0070                 __size_of_update_mode 0038  
              i1___wmul@multiplicand 0072                          ?_getTapTime 0154  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 026B  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
            ?_updateSubdivisionState 0070                           getPreset@r 01A0  
              __end_of_USARTReadData 33A9                            _USARTInit 2941  
                          _TRISBbits 008D                            _TRISCbits 008E  
                          _TRISDbits 008F                            _TRISEbits 0090  
                          _TRISFbits 030C                __size_of_InitWaveform 0039  
           HEF_ByteArrayRead@wordAdd 00A9                            _TRISGbits 030D  
                          i1___aldiv 2F7E                            i1___awdiv 2B4B  
                 __end_of_GetBitMask 2A15                 pnum$maintext_split_1 0093  
               ??_solidring_tactiles 00B2                       GetBitMask@mask 013C  
        __end_of_ConfigureOscillator 3FA3                           map@out_max 00EA  
                         map@out_min 00E7          __size_of_updateSwitchBypass 00F1  
           __end_of_initSwitchBypass 3145                      SetBitMask@index 007A  
            HEF_ByteArrayWrite@block 0078                          _CCP1CONbits 0293  
                        ___ftdiv@exp 00DC                __end_of_updateTapTime 0800  
           __size_of_set_leds_bottom 003B                      SetBitMask@shift 007C  
                      ??_getSymmetry 00F0                      SetBitMask@value 0078  
            HEF_ByteArrayWrite@count 0074                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                 _switchBypass_pressed 0253  
                        _CCP3CONbits 0313                          _CCP4CONbits 031A  
                        _CCP5CONbits 031E                          _CCP6CONbits 0613  
                    ??_scaleiA10kPot 00F0                          _CCP7CONbits 0616  
            __end_of_InitSubdivision 3708                        ?_updateVolume 00A0  
                        ___ftmul@exp 00B8                   adc_convert@channel 00A3  
                        _CCP8CONbits 0619                  i1_HEF_ByteArrayRead 3577  
                        _CCP9CONbits 061C                 set_leds_top@ledState 00A2  
                   USARTReadBuffer@i 00A7                       __end_of___bmul 3133  
                     __end_of___ftge 283C                 __end_of_setPedalMode 337F  
               __end_of_setFrequency 22FF                       __end_of___lmul 3545  
                     __end_of___wmul 3254                         _double_timer 0220  
                        _adc_convert 3145       __end_of_updateSubdivisionState 3FC0  
         i1HEF_ByteArrayRead@wordAdd 0079     __end_of_getModulationSubdivision 34B6  
                       _InitWaveform 361D                       _switchTap_down 0255  
                     __end_of_modCos 1298                       __end_of_modSaw 1F80  
                     __end_of_modTri 07F7             __size_of_updatePedalMode 0008  
           __size_of_updateFrequency 0009                       modSawRev@angle 0142  
                         floor@expon 0135                    __size_ofi1___bmul 0011  
                       ??_SetBitMask 0020                i1___lmul@multiplicand 0074  
                  __size_ofi1___lmul 002F                  start_initialization 0346  
                  __size_ofi1___wmul 001B                     _getWaveFormState 30FF  
                         ?_USARTInit 00A0                           eval_poly@d 0137  
                         eval_poly@n 0139                           eval_poly@x 0134  
              _bottomTactile_pressed 0247                  _setDoublePressState 3782  
                         ldexp@value 013E                 ?i1_HEF_ByteArrayRead 0073  
                         ?i1___aldiv 0020                          __end_of_cos 2EFD  
                        __end_of_map 226A                          __end_of_exp 1C69  
                        __end_of_log 10EC                          __end_of_isr 0344  
                         ?i1___awdiv 0070                          __end_of_sin 1623  
                        __end_of_pow 1B10                     savePreset@bankID 0032  
       __size_of_updateWaveFormState 0008          i1FLASH_ReadWord@GIEBitValue 0072  
                   _USARTHandleRxInt 28FE                __size_of_scaleA10kPot 009E  
                 _adjusted_pot_value 02DA                          ?_modulation 002E  
                        ?_savePreset 0070                   scaleiA10kPot@input 0167  
                         frexp@value 00A0                  __size_of_getTapTime 0022  
             __size_of_resetRingLEDs 001A               ?_setSwitchBypassRelays 00B2  
                     ??_updateVolume 00A2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                    ??_USARTReadBuffer 00A4  
                           ??___bmul 00A1                             ??___ftge 00A6  
                 __end_of_SetBitMask 2AFB                             ??___lmul 00A8  
             ??_setExpressionDisplay 00A4                             ??___wmul 00F0  
                __end_of_getSymmetry 30DD                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 0066                          __pdataBANK3 01E2  
                        __pdataBANK4 0259                             ??_modCos 013A  
                           ??_modSaw 00F0                   i1___aldiv@dividend 0024  
                           ??_modTri 00F0          FLASH_EraseBlock@GIEBitValue 0072  
                      _tap_iteration 0265             __end_of_FLASH_EraseBlock 3238  
           __size_of_updateSwitchTap 01DD                    __size_of___altoft 003D  
                  __size_of___awtoft 0022                    __size_of___ftpack 0065  
                  __size_of___lbtoft 001B                          __pbssBIGRAM 238A  
                       _scaleA10kPot 2396                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
               __end_of_set_leds_top 2C94                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 01EE  
              ??i1_HEF_ByteArrayRead 0077                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                        __pcstackBANK2 0120  
           __size_of_getCurrentState 0019                        __pcstackBANK3 01A0  
             __size_of_ring_tactiles 0050                   _isStateInitialized 005D  
                     _expSwitchState 0269     updateModulationArray@iAngle_2595 0156  
                   i1___lmul@product 0078                    __size_of_getDepth 0010  
                   scaleiA10kPot@pwm 01A0             ?_updateSwitchBypassState 0070  
                   i1_FLASH_ReadWord 319B                           sin@coeff_a 3039  
                         sin@coeff_b 3048                   i1___aldiv@quotient 002A  
                  ?_initStateManager 0070                     modCos@inflection 0137  
                      ?_calcCosArray 0070                             ?_InitApp 0070  
                    getPreset@bankID 01A2                ??_setDoublePressState 00BA  
                  __size_of_init_adc 000A                   ??_initStateManager 00F0  
                  __size_of_init_pwm 0041                            _main$3250 01DF  
                          _main$3248 01D7                            _main$3249 01DA  
                   ?_InitSubdivision 0070                    __size_of_setDepth 000C  
            ??_updateModulationArray 0150                 GetBitMask@shiftCount 013E  
                           ?___aldiv 00A0                    ??_set_leds_bottom 00A2  
                 _currentBypassState 0268                             ?___awdiv 00A0  
                          __ptext100 3FC9                            __ptext101 3FA9  
                          __ptext110 2B4B                            __ptext102 3FF6  
                          __ptext111 3577                            __ptext103 3F9F  
                          __ptext120 28FE                            __ptext112 319B  
                          __ptext113 2AAD                            __ptext105 2985  
                          __ptext114 3201                            __ptext106 33FE  
                          __ptext115 2B9C                            __ptext107 3FC0  
                          __ptext116 321C                            __ptext108 1C69  
                          __ptext117 287C                            __ptext109 30DD  
                           ?___ftadd 00C1                            __ptext118 3458  
                          __ptext119 2F7E                             ?___ftdiv 00CE  
                           ?___ftneg 00BE                             ?___ftmul 00AE  
                           ?___ftsub 0137                             ?___fttol 0120  
                          _getPreset 1298                 SetBitMask@shiftCount 0028  
                  __size_of_showSave 0014                   _modulation_changed 024E  
                          _getVolume 1800          HEF_ByteArrayWrite@blockAddr 0079  
                  i1___awdiv@divisor 0070                   _scaleA100kPot$3253 01A3  
                 _scaleA100kPot$3254 01A6           __end_of_USARTDataAvailable 33FE  
                  i1___awdiv@counter 0075                          _blink_delay 0259  
                __size_of_modulation 0041                        _resetRingLEDs 31CD  
                __size_of_savePreset 017F                          _blink_state 0267  
        __end_of_getSubdivisionState 30FF                            _eval_poly 2E0F  
                          _midiLevel 023E                          ??_USARTInit 00A2  
                           _CCPTMRS0 029D                             _CCPTMRS1 029E  
                           _CCPTMRS2 029F                          ??i1___aldiv 007C  
                           ?_wait_ms 00AC                          ??i1___awdiv 0074  
                          _modSawRev 3270             ??_getModulationDelayTime 00F0  
                _read_bottom_tactile 2A60                    ??_updatePedalMode 00A0  
                     __size_of_floor 00B3                       __size_of_ldexp 0097  
                  ??_updateFrequency 00A2                       __size_of_frexp 0040  
                          _modSquare 3745              updateDepth@currentValue 00A0  
        HEF_ByteArrayWrite@byteArray 0073                   calcCosArray@iAngle 0159  
                     _presetModeCnst 026D                   _setLongBypassState 32CB  
                __end_of_init_timer0 3FB0                  __end_of_init_timer2 3FD2  
                          _mod_value 0240                            _mod_timer 0224  
                   ??_InitializeTaps 00A0                      ___aldiv@divisor 00A0  
  __size_of_getModulationSubdivision 002F                      ___aldiv@counter 00A9  
          ?_getModulationSubdivision 00A0                       _presetSaveMode 0065  
                     ___wmul@product 0132                       ??_calcCosArray 0152  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 0263                          _getSymmetry 30CD  
                          clear_ram0 3094                        ??_setSymmetry 00F0  
                          _saveState 3FC0          __size_of_HEF_ByteArrayWrite 0052  
                 calcCosArray@tmpVal 0156                            _tap_timer 0059  
              i1___bmul@multiplicand 0070                  ?_setLongBypassState 00A0  
                          _tap_total 02D6                __size_of_setPedalMode 0029  
              __size_of_setFrequency 0095                            _setVolume 2DA6  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
          FLASH_EraseBlock@startAddr 0070                        _ring_tactiles 2AFB  
                    _longBypass_down 0249                     ??_FLASH_ReadWord 00A2  
                    _longBypass_save 024A              savePreset@presetChannel 0031  
               ?_read_bottom_tactile 0070              __size_ofi1_set_leds_top 0048  
                         ?_getPreset 0140                         ??_getTapTime 00F0  
                         ?_getVolume 0154            initSwitchBypass@initState 0158  
                          map@in_max 00E4                            map@in_min 00E1  
                     ?_resetRingLEDs 0070                            _sub_timer 0228  
                           i1___bmul 30DD                           _ADCON0bits 009D  
                           i1___lmul 3458                           _ADCON1bits 009E  
           __size_of_set_subdivision 008B                    ___wmul@multiplier 012E  
                   set_subdivision@x 012E                     set_subdivision@y 0130  
                           i1___wmul 3201                 setFrequency@rawValue 016A  
          __size_of_read_top_tactile 0051                       SetBitMask@mask 0026  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0011                 __end_of_updateVolume 3FF6  
                        _modCos$3267 013C        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0142                __end_of_scaleA100kPot 2158  
                  ??_updateSwitchTap 00BC             updateVolume@currentValue 00A0  
                  ___lmul@multiplier 00A0                           ?_modSquare 0148  
                    modSquare@tmpVal 014E                         _setPedalMode 3356  
                       _setFrequency 226A                    ??_getCurrentState 0153  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                        _oldBaseTime 02E8                       wait_ms@timeSec 00AC  
                 __end_of_getTapTime 3330                          _modSaw$3270 0137  
                        _modSaw$3269 0134                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3                           ?_saveState 0070  
                      ??_updateDepth 00A2          setSwitchBypassState@f_state 00B5  
                 ??_initSwitchBypass 00F0                     __size_of_InitApp 0030  
                     ?_ring_tactiles 0070                            modSaw@mod 013A  
                         ?_setVolume 016A             __end_of_getWaveFormState 3110  
                        _mode1_state 024D                        ??_update_mode 00A7  
                        _mode2_state 0064                            isr@subDiv 0058  
              ??_read_bottom_tactile 00B2                          _modTri$3268 0134  
                updateSwitchTap@iCnt 00C4                           _APFCONbits 011D  
                _updateWaveFormState 3FB0             __end_of_USARTHandleRxInt 2941  
                __end_of_setSymmetry 2CE8                     __size_of___aldiv 0082  
                       pnum$maintext 001A                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                       ?_adc_convert 00A0                     __size_of___ftneg 0009  
                           ___altoft 3708                     __size_of___ftmul 00B4  
                   __size_of___ftsub 002E                     __size_of___fttol 0087  
                           _cos$3274 014F                __end_of_initSwitchTap 307C  
                           ___awtoft 32EC                __size_of_set_leds_top 0054  
                           ___ftpack 2D41                             ___lbtoft 1000  
                  _baseline_mod_time 006A                             _map$3251 00ED  
                       _save_counter 02CE                             ___lltoft 33A9  
             _preset_programmning_on 0251                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$3278 014C  
                           _exp$2981 014F                          _init_timer0 3FA9  
                        _init_timer2 3FC9                             _getDepth 30AD  
                           _cosArray 2482           __end_of_updateSwitchBypass 2800  
           i1HEF_ByteArrayRead@block 0075                             __ptext10 3158  
                           __ptext11 283C                             __ptext20 3745  
                           __ptext12 2AFB                             __ptext21 10EC  
                           __ptext13 3356                             __ptext30 21DF  
                           __ptext22 3270                             __ptext14 3054  
                           __ptext31 226A                             __ptext23 1DE8  
                           __ptext15 3656                             __ptext40 3FDB  
                           __ptext32 3FE4                             __ptext24 0802  
                           __ptext16 3183                             __ptext41 2000  
                           __ptext33 20D3                             __ptext25 2DA6  
                           __ptext17 31CD                             __ptext50 3545  
                           __ptext42 3FB8                             __ptext34 19FA  
                           __ptext26 3FED                             __ptext18 03CF  
                           __ptext51 3515                             __ptext43 2A60  
                           __ptext35 101B                             __ptext27 2644  
                           __ptext19 0614                             __ptext60 2EFD  
                           __ptext52 3066                             __ptext44 3FB0  
                           __ptext36 1B10                             __ptext28 2396  
                           __ptext61 2E81                             __ptext53 3110  
                           __ptext45 3071                             __ptext37 22FF  
                           __ptext29 2C94                             __ptext70 342A  
                           __ptext62 1454                             __ptext54 1800  
                           __ptext46 330E                             __ptext38 33A9  
                           __ptext71 1904                             __ptext63 24DD  
                           __ptext55 30CD                             __ptext47 3133  
                           __ptext39 307C                             __ptext80 2941  
                           __ptext72 3FD2                             __ptext64 37C0  
                           __ptext56 2A15                             __ptext48 3254  
                           __ptext81 33D3                             __ptext73 2434  
                           __ptext65 2158                             __ptext57 3487  
                           __ptext49 34B6                             __ptext90 31B4  
                           __ptext82 3330                             __ptext74 32EC  
                           __ptext66 2800                             __ptext58 30BD  
                           __ptext91 1298                             __ptext83 361D  
                           __ptext75 3145                             __ptext67 3708  
                           __ptext59 30AD                             __ptext92 3121  
                           __ptext84 3690                             __ptext76 1000  
                           __ptext68 2E0F                             __ptext93 2BEE  
                           __ptext85 30FF                             __ptext77 2D41  
                           __ptext69 2590                             __ptext94 35AD  
                           __ptext86 36CB                             __ptext78 328C  
                           __ptext95 32AB                             __ptext87 2C40  
                           __ptext79 337F                             __ptext96 29CD  
                           __ptext88 30EE                             __ptext97 3238  
                           __ptext89 3FA3                             __ptext98 34E5  
                           __ptext99 28BD             i1HEF_ByteArrayRead@count 0076  
                           _sin$3277 0145                     __size_of_wait_ms 0032  
               ?_updateWaveFormState 0070          __size_of_solidring_tactiles 0040  
    __size_of_getModulationDelayTime 004B                             _ledState 02C3  
                           _pow$3275 015C                             _pow$3276 015F  
                      _presetChannel 01ED                      _USARTReadBuffer 328C  
                       ??_modulation 0036                         ??_savePreset 002A  
                           _midiBuff 0320                          _mod_counter 0261  
                           _modArray 238A                          _oldSymmetry 02EA  
            ??_setSwitchBypassRelays 00B4                             _init_adc 3FF6  
                      __size_of_main F7EE                             _init_pwm 28BD  
   updateModulationArray@angleFactor 0154                             _setDepth 307C  
       __size_of_ConfigureOscillator 0004               __size_of_USARTReadData 002A  
                       _set_leds_top 2C40                             _showSave 3158  
                           _num_taps 01EC                __end_of_scaleiA10kPot 270F  
                           int$flags 007E                      ??_resetRingLEDs 00A4  
                        ??_getPreset 014F                  __end_of_updateDepth 3FE4  
                    i1set_leds_top@x 0070                          ??_getVolume 00F0  
                     modSquare@angle 0148                  __end_of_update_mode 361D  
                  ?_FLASH_EraseBlock 0070             __end_ofi1_FLASH_ReadWord 31B4  
                           exp@coeff 3000                             _symmetry 01EA  
                modSawRev@inflection 0145                             log@coeff 301E  
                 __end_of_modulation 28BD                   __end_of_savePreset 1DE8  
               __end_of_calcCosArray 2F7E               __size_of_updateTapTime 0009  
                 ??_FLASH_EraseBlock 0072                           _INTCONbits 000B  
                        ??_eval_poly 00F0            __size_of_setPresetDisplay 003A  
                     savePreset@symm 002F                          _tap_history 02A0  
                        ??_modSawRev 0148                ??_updateWaveFormState 00A0  
                  ??_set_subdivision 00F0                        ?_getFrequency 0154  
                        ??_modSquare 00F0                  setSymmetry@rawValue 012E  
                           intlevel1 0000                      _set_leds_bottom 3690  
                         _PMCON1bits 0195        HEF_ByteArrayWrite@GIEBitValue 0077  
                    ??_ring_tactiles 00B2                    __CFG_CLKOUTEN$OFF 0000  
                        ??_saveState 007E                          _setSymmetry 2C94  
                  _setFrequency$3273 016C                      _reset_sub_delay 0252  
                        ??_setVolume 00F0                           _OSCCONbits 0099  
                       _preset_blink 0250               _getModulationDelayTime 2A15  
                     i1_set_leds_top 2985       __size_of_updateModulationArray 0245  
   __size_of_updateSwitchBypassState 000B        __end_of_updateModulationArray 0614  
                      _isInitialized 0062        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$3260 01A6                   _scaleiA10kPot$3259 01A3  
        __end_ofi1_HEF_ByteArrayRead 35AD            __size_of_initStateManager 0006  
                    _updatePedalMode 3054                      _updateFrequency 3FE4  
           __size_of_setLongTapState 001A                __size_of_updateVolume 0009  
                        _tmpModDelay 0244                     _read_top_tactile 2000  
       ??i1_getModulationSubdivision 0072                        _USARTReadData 337F  
            __end_of_USARTReadBuffer 32AB                 USARTHandleRxInt@data 0074  
                       ___aldiv@sign 00AA                       ??_getFrequency 00F0  
                 _USARTDataAvailable 33D3                          _useInitVals 0258  
        __end_of_setDoublePressState 37C0                         _CCP10CONbits 061F  
                  _bottom_push_state 01E2                         ?_getSymmetry 0154  
                ?_USARTDataAvailable 0070                        _updateTapTime 07F7  
                        _updateDepth 3FDB           setPresetDisplay@ledChannel 00A6  
             __end_ofi1_set_leds_top 29CD             ??_updateSubdivisionState 00A0  
