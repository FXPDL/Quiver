

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Jan 14 20:49:44 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text74,local,class=CODE,merge=1,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	dabs	1,0x920,80
   110                           	dabs	1,0x8A0,80
   111                           	dabs	1,0x820,80
   112                           	dabs	1,0x7A0,80
   113                           	dabs	1,0x742,46
   114                           	dabs	1,0x720,34
   115                           	dabs	1,0x6A0,80
   116                           	dabs	1,0x620,80
   117                           	dabs	1,0x5BA,54
   118                           	dabs	1,0x2482,0,_sinArray
   119                           	dabs	1,0x238A,0,_modArray
   120                           	dabs	1,0x7E,2
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  008F                     	;# 
   155  0090                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0099                     	;# 
   164  009A                     	;# 
   165  009B                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  0110                     	;# 
   175  0116                     	;# 
   176  0117                     	;# 
   177  011D                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180  018F                     	;# 
   181  0190                     	;# 
   182  0191                     	;# 
   183  0191                     	;# 
   184  0192                     	;# 
   185  0193                     	;# 
   186  0193                     	;# 
   187  0194                     	;# 
   188  0195                     	;# 
   189  0196                     	;# 
   190  0197                     	;# 
   191  0199                     	;# 
   192  0199                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019A                     	;# 
   196  019A                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019C                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019D                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019E                     	;# 
   210  019E                     	;# 
   211  019F                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  020D                     	;# 
   215  020F                     	;# 
   216  0210                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0219                     	;# 
   233  021A                     	;# 
   234  021B                     	;# 
   235  021C                     	;# 
   236  021D                     	;# 
   237  021E                     	;# 
   238  021F                     	;# 
   239  028C                     	;# 
   240  028D                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0298                     	;# 
   246  0298                     	;# 
   247  0299                     	;# 
   248  029A                     	;# 
   249  029D                     	;# 
   250  029E                     	;# 
   251  029F                     	;# 
   252  030C                     	;# 
   253  030D                     	;# 
   254  0311                     	;# 
   255  0311                     	;# 
   256  0312                     	;# 
   257  0313                     	;# 
   258  0318                     	;# 
   259  0318                     	;# 
   260  0319                     	;# 
   261  031A                     	;# 
   262  031C                     	;# 
   263  031C                     	;# 
   264  031D                     	;# 
   265  031E                     	;# 
   266  038C                     	;# 
   267  038D                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  040C                     	;# 
   272  040D                     	;# 
   273  0411                     	;# 
   274  0411                     	;# 
   275  0412                     	;# 
   276  0413                     	;# 
   277  0414                     	;# 
   278  0415                     	;# 
   279  0416                     	;# 
   280  0417                     	;# 
   281  0418                     	;# 
   282  0418                     	;# 
   283  0419                     	;# 
   284  041A                     	;# 
   285  041B                     	;# 
   286  041C                     	;# 
   287  041D                     	;# 
   288  041E                     	;# 
   289  048D                     	;# 
   290  0491                     	;# 
   291  0491                     	;# 
   292  0492                     	;# 
   293  0492                     	;# 
   294  0493                     	;# 
   295  0493                     	;# 
   296  0493                     	;# 
   297  0494                     	;# 
   298  0494                     	;# 
   299  0495                     	;# 
   300  0495                     	;# 
   301  0496                     	;# 
   302  0496                     	;# 
   303  0497                     	;# 
   304  0497                     	;# 
   305  0595                     	;# 
   306  0596                     	;# 
   307  0597                     	;# 
   308  059C                     	;# 
   309  059D                     	;# 
   310  059E                     	;# 
   311  0611                     	;# 
   312  0611                     	;# 
   313  0612                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0614                     	;# 
   317  0615                     	;# 
   318  0616                     	;# 
   319  0617                     	;# 
   320  0617                     	;# 
   321  0618                     	;# 
   322  0619                     	;# 
   323  061A                     	;# 
   324  061A                     	;# 
   325  061B                     	;# 
   326  061C                     	;# 
   327  061D                     	;# 
   328  061D                     	;# 
   329  061E                     	;# 
   330  061F                     	;# 
   331  0FE4                     	;# 
   332  0FE5                     	;# 
   333  0FE6                     	;# 
   334  0FE7                     	;# 
   335  0FE8                     	;# 
   336  0FE9                     	;# 
   337  0FEA                     	;# 
   338  0FEB                     	;# 
   339  0FED                     	;# 
   340  0FEE                     	;# 
   341  0FEF                     	;# 
   342  0000                     	;# 
   343  0001                     	;# 
   344  0002                     	;# 
   345  0003                     	;# 
   346  0004                     	;# 
   347  0005                     	;# 
   348  0006                     	;# 
   349  0007                     	;# 
   350  0008                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000F                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0014                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  008C                     	;# 
   373  008D                     	;# 
   374  008E                     	;# 
   375  008F                     	;# 
   376  0090                     	;# 
   377  0091                     	;# 
   378  0092                     	;# 
   379  0093                     	;# 
   380  0094                     	;# 
   381  0095                     	;# 
   382  0096                     	;# 
   383  0097                     	;# 
   384  0099                     	;# 
   385  009A                     	;# 
   386  009B                     	;# 
   387  009B                     	;# 
   388  009C                     	;# 
   389  009D                     	;# 
   390  009E                     	;# 
   391  010C                     	;# 
   392  010D                     	;# 
   393  010E                     	;# 
   394  010F                     	;# 
   395  0110                     	;# 
   396  0116                     	;# 
   397  0117                     	;# 
   398  011D                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401  018F                     	;# 
   402  0190                     	;# 
   403  0191                     	;# 
   404  0191                     	;# 
   405  0192                     	;# 
   406  0193                     	;# 
   407  0193                     	;# 
   408  0194                     	;# 
   409  0195                     	;# 
   410  0196                     	;# 
   411  0197                     	;# 
   412  0199                     	;# 
   413  0199                     	;# 
   414  0199                     	;# 
   415  019A                     	;# 
   416  019A                     	;# 
   417  019A                     	;# 
   418  019B                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019C                     	;# 
   424  019C                     	;# 
   425  019C                     	;# 
   426  019D                     	;# 
   427  019D                     	;# 
   428  019D                     	;# 
   429  019E                     	;# 
   430  019E                     	;# 
   431  019E                     	;# 
   432  019F                     	;# 
   433  019F                     	;# 
   434  019F                     	;# 
   435  020D                     	;# 
   436  020F                     	;# 
   437  0210                     	;# 
   438  0211                     	;# 
   439  0211                     	;# 
   440  0212                     	;# 
   441  0212                     	;# 
   442  0213                     	;# 
   443  0213                     	;# 
   444  0214                     	;# 
   445  0214                     	;# 
   446  0215                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0216                     	;# 
   450  0216                     	;# 
   451  0217                     	;# 
   452  0217                     	;# 
   453  0219                     	;# 
   454  021A                     	;# 
   455  021B                     	;# 
   456  021C                     	;# 
   457  021D                     	;# 
   458  021E                     	;# 
   459  021F                     	;# 
   460  028C                     	;# 
   461  028D                     	;# 
   462  0291                     	;# 
   463  0291                     	;# 
   464  0292                     	;# 
   465  0293                     	;# 
   466  0298                     	;# 
   467  0298                     	;# 
   468  0299                     	;# 
   469  029A                     	;# 
   470  029D                     	;# 
   471  029E                     	;# 
   472  029F                     	;# 
   473  030C                     	;# 
   474  030D                     	;# 
   475  0311                     	;# 
   476  0311                     	;# 
   477  0312                     	;# 
   478  0313                     	;# 
   479  0318                     	;# 
   480  0318                     	;# 
   481  0319                     	;# 
   482  031A                     	;# 
   483  031C                     	;# 
   484  031C                     	;# 
   485  031D                     	;# 
   486  031E                     	;# 
   487  038C                     	;# 
   488  038D                     	;# 
   489  0394                     	;# 
   490  0395                     	;# 
   491  0396                     	;# 
   492  040C                     	;# 
   493  040D                     	;# 
   494  0411                     	;# 
   495  0411                     	;# 
   496  0412                     	;# 
   497  0413                     	;# 
   498  0414                     	;# 
   499  0415                     	;# 
   500  0416                     	;# 
   501  0417                     	;# 
   502  0418                     	;# 
   503  0418                     	;# 
   504  0419                     	;# 
   505  041A                     	;# 
   506  041B                     	;# 
   507  041C                     	;# 
   508  041D                     	;# 
   509  041E                     	;# 
   510  048D                     	;# 
   511  0491                     	;# 
   512  0491                     	;# 
   513  0492                     	;# 
   514  0492                     	;# 
   515  0493                     	;# 
   516  0493                     	;# 
   517  0493                     	;# 
   518  0494                     	;# 
   519  0494                     	;# 
   520  0495                     	;# 
   521  0495                     	;# 
   522  0496                     	;# 
   523  0496                     	;# 
   524  0497                     	;# 
   525  0497                     	;# 
   526  0595                     	;# 
   527  0596                     	;# 
   528  0597                     	;# 
   529  059C                     	;# 
   530  059D                     	;# 
   531  059E                     	;# 
   532  0611                     	;# 
   533  0611                     	;# 
   534  0612                     	;# 
   535  0613                     	;# 
   536  0614                     	;# 
   537  0614                     	;# 
   538  0615                     	;# 
   539  0616                     	;# 
   540  0617                     	;# 
   541  0617                     	;# 
   542  0618                     	;# 
   543  0619                     	;# 
   544  061A                     	;# 
   545  061A                     	;# 
   546  061B                     	;# 
   547  061C                     	;# 
   548  061D                     	;# 
   549  061D                     	;# 
   550  061E                     	;# 
   551  061F                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  000F                     	;# 
   579  0010                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0013                     	;# 
   583  0014                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  008F                     	;# 
   597  0090                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0094                     	;# 
   602  0095                     	;# 
   603  0096                     	;# 
   604  0097                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  010C                     	;# 
   613  010D                     	;# 
   614  010E                     	;# 
   615  010F                     	;# 
   616  0110                     	;# 
   617  0116                     	;# 
   618  0117                     	;# 
   619  011D                     	;# 
   620  018C                     	;# 
   621  018D                     	;# 
   622  018F                     	;# 
   623  0190                     	;# 
   624  0191                     	;# 
   625  0191                     	;# 
   626  0192                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0194                     	;# 
   630  0195                     	;# 
   631  0196                     	;# 
   632  0197                     	;# 
   633  0199                     	;# 
   634  0199                     	;# 
   635  0199                     	;# 
   636  019A                     	;# 
   637  019A                     	;# 
   638  019A                     	;# 
   639  019B                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019D                     	;# 
   648  019D                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019E                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  019F                     	;# 
   655  019F                     	;# 
   656  020D                     	;# 
   657  020F                     	;# 
   658  0210                     	;# 
   659  0211                     	;# 
   660  0211                     	;# 
   661  0212                     	;# 
   662  0212                     	;# 
   663  0213                     	;# 
   664  0213                     	;# 
   665  0214                     	;# 
   666  0214                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0216                     	;# 
   671  0216                     	;# 
   672  0217                     	;# 
   673  0217                     	;# 
   674  0219                     	;# 
   675  021A                     	;# 
   676  021B                     	;# 
   677  021C                     	;# 
   678  021D                     	;# 
   679  021E                     	;# 
   680  021F                     	;# 
   681  028C                     	;# 
   682  028D                     	;# 
   683  0291                     	;# 
   684  0291                     	;# 
   685  0292                     	;# 
   686  0293                     	;# 
   687  0298                     	;# 
   688  0298                     	;# 
   689  0299                     	;# 
   690  029A                     	;# 
   691  029D                     	;# 
   692  029E                     	;# 
   693  029F                     	;# 
   694  030C                     	;# 
   695  030D                     	;# 
   696  0311                     	;# 
   697  0311                     	;# 
   698  0312                     	;# 
   699  0313                     	;# 
   700  0318                     	;# 
   701  0318                     	;# 
   702  0319                     	;# 
   703  031A                     	;# 
   704  031C                     	;# 
   705  031C                     	;# 
   706  031D                     	;# 
   707  031E                     	;# 
   708  038C                     	;# 
   709  038D                     	;# 
   710  0394                     	;# 
   711  0395                     	;# 
   712  0396                     	;# 
   713  040C                     	;# 
   714  040D                     	;# 
   715  0411                     	;# 
   716  0411                     	;# 
   717  0412                     	;# 
   718  0413                     	;# 
   719  0414                     	;# 
   720  0415                     	;# 
   721  0416                     	;# 
   722  0417                     	;# 
   723  0418                     	;# 
   724  0418                     	;# 
   725  0419                     	;# 
   726  041A                     	;# 
   727  041B                     	;# 
   728  041C                     	;# 
   729  041D                     	;# 
   730  041E                     	;# 
   731  048D                     	;# 
   732  0491                     	;# 
   733  0491                     	;# 
   734  0492                     	;# 
   735  0492                     	;# 
   736  0493                     	;# 
   737  0493                     	;# 
   738  0493                     	;# 
   739  0494                     	;# 
   740  0494                     	;# 
   741  0495                     	;# 
   742  0495                     	;# 
   743  0496                     	;# 
   744  0496                     	;# 
   745  0497                     	;# 
   746  0497                     	;# 
   747  0595                     	;# 
   748  0596                     	;# 
   749  0597                     	;# 
   750  059C                     	;# 
   751  059D                     	;# 
   752  059E                     	;# 
   753  0611                     	;# 
   754  0611                     	;# 
   755  0612                     	;# 
   756  0613                     	;# 
   757  0614                     	;# 
   758  0614                     	;# 
   759  0615                     	;# 
   760  0616                     	;# 
   761  0617                     	;# 
   762  0617                     	;# 
   763  0618                     	;# 
   764  0619                     	;# 
   765  061A                     	;# 
   766  061A                     	;# 
   767  061B                     	;# 
   768  061C                     	;# 
   769  061D                     	;# 
   770  061D                     	;# 
   771  061E                     	;# 
   772  061F                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000D                     	;# 
   798  000E                     	;# 
   799  000F                     	;# 
   800  0010                     	;# 
   801  0011                     	;# 
   802  0012                     	;# 
   803  0013                     	;# 
   804  0014                     	;# 
   805  0015                     	;# 
   806  0016                     	;# 
   807  0016                     	;# 
   808  0017                     	;# 
   809  0018                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  008C                     	;# 
   815  008D                     	;# 
   816  008E                     	;# 
   817  008F                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0095                     	;# 
   824  0096                     	;# 
   825  0097                     	;# 
   826  0099                     	;# 
   827  009A                     	;# 
   828  009B                     	;# 
   829  009B                     	;# 
   830  009C                     	;# 
   831  009D                     	;# 
   832  009E                     	;# 
   833  010C                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  010F                     	;# 
   837  0110                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  011D                     	;# 
   841  018C                     	;# 
   842  018D                     	;# 
   843  018F                     	;# 
   844  0190                     	;# 
   845  0191                     	;# 
   846  0191                     	;# 
   847  0192                     	;# 
   848  0193                     	;# 
   849  0193                     	;# 
   850  0194                     	;# 
   851  0195                     	;# 
   852  0196                     	;# 
   853  0197                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  020D                     	;# 
   878  020F                     	;# 
   879  0210                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0216                     	;# 
   892  0216                     	;# 
   893  0217                     	;# 
   894  0217                     	;# 
   895  0219                     	;# 
   896  021A                     	;# 
   897  021B                     	;# 
   898  021C                     	;# 
   899  021D                     	;# 
   900  021E                     	;# 
   901  021F                     	;# 
   902  028C                     	;# 
   903  028D                     	;# 
   904  0291                     	;# 
   905  0291                     	;# 
   906  0292                     	;# 
   907  0293                     	;# 
   908  0298                     	;# 
   909  0298                     	;# 
   910  0299                     	;# 
   911  029A                     	;# 
   912  029D                     	;# 
   913  029E                     	;# 
   914  029F                     	;# 
   915  030C                     	;# 
   916  030D                     	;# 
   917  0311                     	;# 
   918  0311                     	;# 
   919  0312                     	;# 
   920  0313                     	;# 
   921  0318                     	;# 
   922  0318                     	;# 
   923  0319                     	;# 
   924  031A                     	;# 
   925  031C                     	;# 
   926  031C                     	;# 
   927  031D                     	;# 
   928  031E                     	;# 
   929  038C                     	;# 
   930  038D                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  040C                     	;# 
   935  040D                     	;# 
   936  0411                     	;# 
   937  0411                     	;# 
   938  0412                     	;# 
   939  0413                     	;# 
   940  0414                     	;# 
   941  0415                     	;# 
   942  0416                     	;# 
   943  0417                     	;# 
   944  0418                     	;# 
   945  0418                     	;# 
   946  0419                     	;# 
   947  041A                     	;# 
   948  041B                     	;# 
   949  041C                     	;# 
   950  041D                     	;# 
   951  041E                     	;# 
   952  048D                     	;# 
   953  0491                     	;# 
   954  0491                     	;# 
   955  0492                     	;# 
   956  0492                     	;# 
   957  0493                     	;# 
   958  0493                     	;# 
   959  0493                     	;# 
   960  0494                     	;# 
   961  0494                     	;# 
   962  0495                     	;# 
   963  0495                     	;# 
   964  0496                     	;# 
   965  0496                     	;# 
   966  0497                     	;# 
   967  0497                     	;# 
   968  0595                     	;# 
   969  0596                     	;# 
   970  0597                     	;# 
   971  059C                     	;# 
   972  059D                     	;# 
   973  059E                     	;# 
   974  0611                     	;# 
   975  0611                     	;# 
   976  0612                     	;# 
   977  0613                     	;# 
   978  0614                     	;# 
   979  0614                     	;# 
   980  0615                     	;# 
   981  0616                     	;# 
   982  0617                     	;# 
   983  0617                     	;# 
   984  0618                     	;# 
   985  0619                     	;# 
   986  061A                     	;# 
   987  061A                     	;# 
   988  061B                     	;# 
   989  061C                     	;# 
   990  061D                     	;# 
   991  061D                     	;# 
   992  061E                     	;# 
   993  061F                     	;# 
   994  0FE4                     	;# 
   995  0FE5                     	;# 
   996  0FE6                     	;# 
   997  0FE7                     	;# 
   998  0FE8                     	;# 
   999  0FE9                     	;# 
  1000  0FEA                     	;# 
  1001  0FEB                     	;# 
  1002  0FED                     	;# 
  1003  0FEE                     	;# 
  1004  0FEF                     	;# 
  1005  0000                     	;# 
  1006  0001                     	;# 
  1007  0002                     	;# 
  1008  0003                     	;# 
  1009  0004                     	;# 
  1010  0005                     	;# 
  1011  0006                     	;# 
  1012  0007                     	;# 
  1013  0008                     	;# 
  1014  0009                     	;# 
  1015  000A                     	;# 
  1016  000B                     	;# 
  1017  000C                     	;# 
  1018  000D                     	;# 
  1019  000E                     	;# 
  1020  000F                     	;# 
  1021  0010                     	;# 
  1022  0011                     	;# 
  1023  0012                     	;# 
  1024  0013                     	;# 
  1025  0014                     	;# 
  1026  0015                     	;# 
  1027  0016                     	;# 
  1028  0016                     	;# 
  1029  0017                     	;# 
  1030  0018                     	;# 
  1031  0019                     	;# 
  1032  001A                     	;# 
  1033  001B                     	;# 
  1034  001C                     	;# 
  1035  008C                     	;# 
  1036  008D                     	;# 
  1037  008E                     	;# 
  1038  008F                     	;# 
  1039  0090                     	;# 
  1040  0091                     	;# 
  1041  0092                     	;# 
  1042  0093                     	;# 
  1043  0094                     	;# 
  1044  0095                     	;# 
  1045  0096                     	;# 
  1046  0097                     	;# 
  1047  0099                     	;# 
  1048  009A                     	;# 
  1049  009B                     	;# 
  1050  009B                     	;# 
  1051  009C                     	;# 
  1052  009D                     	;# 
  1053  009E                     	;# 
  1054  010C                     	;# 
  1055  010D                     	;# 
  1056  010E                     	;# 
  1057  010F                     	;# 
  1058  0110                     	;# 
  1059  0116                     	;# 
  1060  0117                     	;# 
  1061  011D                     	;# 
  1062  018C                     	;# 
  1063  018D                     	;# 
  1064  018F                     	;# 
  1065  0190                     	;# 
  1066  0191                     	;# 
  1067  0191                     	;# 
  1068  0192                     	;# 
  1069  0193                     	;# 
  1070  0193                     	;# 
  1071  0194                     	;# 
  1072  0195                     	;# 
  1073  0196                     	;# 
  1074  0197                     	;# 
  1075  0199                     	;# 
  1076  0199                     	;# 
  1077  0199                     	;# 
  1078  019A                     	;# 
  1079  019A                     	;# 
  1080  019A                     	;# 
  1081  019B                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019C                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019D                     	;# 
  1090  019D                     	;# 
  1091  019D                     	;# 
  1092  019E                     	;# 
  1093  019E                     	;# 
  1094  019E                     	;# 
  1095  019F                     	;# 
  1096  019F                     	;# 
  1097  019F                     	;# 
  1098  020D                     	;# 
  1099  020F                     	;# 
  1100  0210                     	;# 
  1101  0211                     	;# 
  1102  0211                     	;# 
  1103  0212                     	;# 
  1104  0212                     	;# 
  1105  0213                     	;# 
  1106  0213                     	;# 
  1107  0214                     	;# 
  1108  0214                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0216                     	;# 
  1113  0216                     	;# 
  1114  0217                     	;# 
  1115  0217                     	;# 
  1116  0219                     	;# 
  1117  021A                     	;# 
  1118  021B                     	;# 
  1119  021C                     	;# 
  1120  021D                     	;# 
  1121  021E                     	;# 
  1122  021F                     	;# 
  1123  028C                     	;# 
  1124  028D                     	;# 
  1125  0291                     	;# 
  1126  0291                     	;# 
  1127  0292                     	;# 
  1128  0293                     	;# 
  1129  0298                     	;# 
  1130  0298                     	;# 
  1131  0299                     	;# 
  1132  029A                     	;# 
  1133  029D                     	;# 
  1134  029E                     	;# 
  1135  029F                     	;# 
  1136  030C                     	;# 
  1137  030D                     	;# 
  1138  0311                     	;# 
  1139  0311                     	;# 
  1140  0312                     	;# 
  1141  0313                     	;# 
  1142  0318                     	;# 
  1143  0318                     	;# 
  1144  0319                     	;# 
  1145  031A                     	;# 
  1146  031C                     	;# 
  1147  031C                     	;# 
  1148  031D                     	;# 
  1149  031E                     	;# 
  1150  038C                     	;# 
  1151  038D                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  040C                     	;# 
  1156  040D                     	;# 
  1157  0411                     	;# 
  1158  0411                     	;# 
  1159  0412                     	;# 
  1160  0413                     	;# 
  1161  0414                     	;# 
  1162  0415                     	;# 
  1163  0416                     	;# 
  1164  0417                     	;# 
  1165  0418                     	;# 
  1166  0418                     	;# 
  1167  0419                     	;# 
  1168  041A                     	;# 
  1169  041B                     	;# 
  1170  041C                     	;# 
  1171  041D                     	;# 
  1172  041E                     	;# 
  1173  048D                     	;# 
  1174  0491                     	;# 
  1175  0491                     	;# 
  1176  0492                     	;# 
  1177  0492                     	;# 
  1178  0493                     	;# 
  1179  0493                     	;# 
  1180  0493                     	;# 
  1181  0494                     	;# 
  1182  0494                     	;# 
  1183  0495                     	;# 
  1184  0495                     	;# 
  1185  0496                     	;# 
  1186  0496                     	;# 
  1187  0497                     	;# 
  1188  0497                     	;# 
  1189  0595                     	;# 
  1190  0596                     	;# 
  1191  0597                     	;# 
  1192  059C                     	;# 
  1193  059D                     	;# 
  1194  059E                     	;# 
  1195  0611                     	;# 
  1196  0611                     	;# 
  1197  0612                     	;# 
  1198  0613                     	;# 
  1199  0614                     	;# 
  1200  0614                     	;# 
  1201  0615                     	;# 
  1202  0616                     	;# 
  1203  0617                     	;# 
  1204  0617                     	;# 
  1205  0618                     	;# 
  1206  0619                     	;# 
  1207  061A                     	;# 
  1208  061A                     	;# 
  1209  061B                     	;# 
  1210  061C                     	;# 
  1211  061D                     	;# 
  1212  061D                     	;# 
  1213  061E                     	;# 
  1214  061F                     	;# 
  1215  0FE4                     	;# 
  1216  0FE5                     	;# 
  1217  0FE6                     	;# 
  1218  0FE7                     	;# 
  1219  0FE8                     	;# 
  1220  0FE9                     	;# 
  1221  0FEA                     	;# 
  1222  0FEB                     	;# 
  1223  0FED                     	;# 
  1224  0FEE                     	;# 
  1225  0FEF                     	;# 
  1226  0000                     	;# 
  1227  0001                     	;# 
  1228  0002                     	;# 
  1229  0003                     	;# 
  1230  0004                     	;# 
  1231  0005                     	;# 
  1232  0006                     	;# 
  1233  0007                     	;# 
  1234  0008                     	;# 
  1235  0009                     	;# 
  1236  000A                     	;# 
  1237  000B                     	;# 
  1238  000C                     	;# 
  1239  000D                     	;# 
  1240  000E                     	;# 
  1241  000F                     	;# 
  1242  0010                     	;# 
  1243  0011                     	;# 
  1244  0012                     	;# 
  1245  0013                     	;# 
  1246  0014                     	;# 
  1247  0015                     	;# 
  1248  0016                     	;# 
  1249  0016                     	;# 
  1250  0017                     	;# 
  1251  0018                     	;# 
  1252  0019                     	;# 
  1253  001A                     	;# 
  1254  001B                     	;# 
  1255  001C                     	;# 
  1256  008C                     	;# 
  1257  008D                     	;# 
  1258  008E                     	;# 
  1259  008F                     	;# 
  1260  0090                     	;# 
  1261  0091                     	;# 
  1262  0092                     	;# 
  1263  0093                     	;# 
  1264  0094                     	;# 
  1265  0095                     	;# 
  1266  0096                     	;# 
  1267  0097                     	;# 
  1268  0099                     	;# 
  1269  009A                     	;# 
  1270  009B                     	;# 
  1271  009B                     	;# 
  1272  009C                     	;# 
  1273  009D                     	;# 
  1274  009E                     	;# 
  1275  010C                     	;# 
  1276  010D                     	;# 
  1277  010E                     	;# 
  1278  010F                     	;# 
  1279  0110                     	;# 
  1280  0116                     	;# 
  1281  0117                     	;# 
  1282  011D                     	;# 
  1283  018C                     	;# 
  1284  018D                     	;# 
  1285  018F                     	;# 
  1286  0190                     	;# 
  1287  0191                     	;# 
  1288  0191                     	;# 
  1289  0192                     	;# 
  1290  0193                     	;# 
  1291  0193                     	;# 
  1292  0194                     	;# 
  1293  0195                     	;# 
  1294  0196                     	;# 
  1295  0197                     	;# 
  1296  0199                     	;# 
  1297  0199                     	;# 
  1298  0199                     	;# 
  1299  019A                     	;# 
  1300  019A                     	;# 
  1301  019A                     	;# 
  1302  019B                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019C                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019D                     	;# 
  1311  019D                     	;# 
  1312  019D                     	;# 
  1313  019E                     	;# 
  1314  019E                     	;# 
  1315  019E                     	;# 
  1316  019F                     	;# 
  1317  019F                     	;# 
  1318  019F                     	;# 
  1319  020D                     	;# 
  1320  020F                     	;# 
  1321  0210                     	;# 
  1322  0211                     	;# 
  1323  0211                     	;# 
  1324  0212                     	;# 
  1325  0212                     	;# 
  1326  0213                     	;# 
  1327  0213                     	;# 
  1328  0214                     	;# 
  1329  0214                     	;# 
  1330  0215                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0216                     	;# 
  1334  0216                     	;# 
  1335  0217                     	;# 
  1336  0217                     	;# 
  1337  0219                     	;# 
  1338  021A                     	;# 
  1339  021B                     	;# 
  1340  021C                     	;# 
  1341  021D                     	;# 
  1342  021E                     	;# 
  1343  021F                     	;# 
  1344  028C                     	;# 
  1345  028D                     	;# 
  1346  0291                     	;# 
  1347  0291                     	;# 
  1348  0292                     	;# 
  1349  0293                     	;# 
  1350  0298                     	;# 
  1351  0298                     	;# 
  1352  0299                     	;# 
  1353  029A                     	;# 
  1354  029D                     	;# 
  1355  029E                     	;# 
  1356  029F                     	;# 
  1357  030C                     	;# 
  1358  030D                     	;# 
  1359  0311                     	;# 
  1360  0311                     	;# 
  1361  0312                     	;# 
  1362  0313                     	;# 
  1363  0318                     	;# 
  1364  0318                     	;# 
  1365  0319                     	;# 
  1366  031A                     	;# 
  1367  031C                     	;# 
  1368  031C                     	;# 
  1369  031D                     	;# 
  1370  031E                     	;# 
  1371  038C                     	;# 
  1372  038D                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  040C                     	;# 
  1377  040D                     	;# 
  1378  0411                     	;# 
  1379  0411                     	;# 
  1380  0412                     	;# 
  1381  0413                     	;# 
  1382  0414                     	;# 
  1383  0415                     	;# 
  1384  0416                     	;# 
  1385  0417                     	;# 
  1386  0418                     	;# 
  1387  0418                     	;# 
  1388  0419                     	;# 
  1389  041A                     	;# 
  1390  041B                     	;# 
  1391  041C                     	;# 
  1392  041D                     	;# 
  1393  041E                     	;# 
  1394  048D                     	;# 
  1395  0491                     	;# 
  1396  0491                     	;# 
  1397  0492                     	;# 
  1398  0492                     	;# 
  1399  0493                     	;# 
  1400  0493                     	;# 
  1401  0493                     	;# 
  1402  0494                     	;# 
  1403  0494                     	;# 
  1404  0495                     	;# 
  1405  0495                     	;# 
  1406  0496                     	;# 
  1407  0496                     	;# 
  1408  0497                     	;# 
  1409  0497                     	;# 
  1410  0595                     	;# 
  1411  0596                     	;# 
  1412  0597                     	;# 
  1413  059C                     	;# 
  1414  059D                     	;# 
  1415  059E                     	;# 
  1416  0611                     	;# 
  1417  0611                     	;# 
  1418  0612                     	;# 
  1419  0613                     	;# 
  1420  0614                     	;# 
  1421  0614                     	;# 
  1422  0615                     	;# 
  1423  0616                     	;# 
  1424  0617                     	;# 
  1425  0617                     	;# 
  1426  0618                     	;# 
  1427  0619                     	;# 
  1428  061A                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061D                     	;# 
  1433  061D                     	;# 
  1434  061E                     	;# 
  1435  061F                     	;# 
  1436  0FE4                     	;# 
  1437  0FE5                     	;# 
  1438  0FE6                     	;# 
  1439  0FE7                     	;# 
  1440  0FE8                     	;# 
  1441  0FE9                     	;# 
  1442  0FEA                     	;# 
  1443  0FEB                     	;# 
  1444  0FED                     	;# 
  1445  0FEE                     	;# 
  1446  0FEF                     	;# 
  1447  0000                     	;# 
  1448  0001                     	;# 
  1449  0002                     	;# 
  1450  0003                     	;# 
  1451  0004                     	;# 
  1452  0005                     	;# 
  1453  0006                     	;# 
  1454  0007                     	;# 
  1455  0008                     	;# 
  1456  0009                     	;# 
  1457  000A                     	;# 
  1458  000B                     	;# 
  1459  000C                     	;# 
  1460  000D                     	;# 
  1461  000E                     	;# 
  1462  000F                     	;# 
  1463  0010                     	;# 
  1464  0011                     	;# 
  1465  0012                     	;# 
  1466  0013                     	;# 
  1467  0014                     	;# 
  1468  0015                     	;# 
  1469  0016                     	;# 
  1470  0016                     	;# 
  1471  0017                     	;# 
  1472  0018                     	;# 
  1473  0019                     	;# 
  1474  001A                     	;# 
  1475  001B                     	;# 
  1476  001C                     	;# 
  1477  008C                     	;# 
  1478  008D                     	;# 
  1479  008E                     	;# 
  1480  008F                     	;# 
  1481  0090                     	;# 
  1482  0091                     	;# 
  1483  0092                     	;# 
  1484  0093                     	;# 
  1485  0094                     	;# 
  1486  0095                     	;# 
  1487  0096                     	;# 
  1488  0097                     	;# 
  1489  0099                     	;# 
  1490  009A                     	;# 
  1491  009B                     	;# 
  1492  009B                     	;# 
  1493  009C                     	;# 
  1494  009D                     	;# 
  1495  009E                     	;# 
  1496  010C                     	;# 
  1497  010D                     	;# 
  1498  010E                     	;# 
  1499  010F                     	;# 
  1500  0110                     	;# 
  1501  0116                     	;# 
  1502  0117                     	;# 
  1503  011D                     	;# 
  1504  018C                     	;# 
  1505  018D                     	;# 
  1506  018F                     	;# 
  1507  0190                     	;# 
  1508  0191                     	;# 
  1509  0191                     	;# 
  1510  0192                     	;# 
  1511  0193                     	;# 
  1512  0193                     	;# 
  1513  0194                     	;# 
  1514  0195                     	;# 
  1515  0196                     	;# 
  1516  0197                     	;# 
  1517  0199                     	;# 
  1518  0199                     	;# 
  1519  0199                     	;# 
  1520  019A                     	;# 
  1521  019A                     	;# 
  1522  019A                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019C                     	;# 
  1529  019C                     	;# 
  1530  019C                     	;# 
  1531  019D                     	;# 
  1532  019D                     	;# 
  1533  019D                     	;# 
  1534  019E                     	;# 
  1535  019E                     	;# 
  1536  019E                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  020D                     	;# 
  1541  020F                     	;# 
  1542  0210                     	;# 
  1543  0211                     	;# 
  1544  0211                     	;# 
  1545  0212                     	;# 
  1546  0212                     	;# 
  1547  0213                     	;# 
  1548  0213                     	;# 
  1549  0214                     	;# 
  1550  0214                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0216                     	;# 
  1555  0216                     	;# 
  1556  0217                     	;# 
  1557  0217                     	;# 
  1558  0219                     	;# 
  1559  021A                     	;# 
  1560  021B                     	;# 
  1561  021C                     	;# 
  1562  021D                     	;# 
  1563  021E                     	;# 
  1564  021F                     	;# 
  1565  028C                     	;# 
  1566  028D                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0298                     	;# 
  1572  0298                     	;# 
  1573  0299                     	;# 
  1574  029A                     	;# 
  1575  029D                     	;# 
  1576  029E                     	;# 
  1577  029F                     	;# 
  1578  030C                     	;# 
  1579  030D                     	;# 
  1580  0311                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0318                     	;# 
  1585  0318                     	;# 
  1586  0319                     	;# 
  1587  031A                     	;# 
  1588  031C                     	;# 
  1589  031C                     	;# 
  1590  031D                     	;# 
  1591  031E                     	;# 
  1592  038C                     	;# 
  1593  038D                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  040C                     	;# 
  1598  040D                     	;# 
  1599  0411                     	;# 
  1600  0411                     	;# 
  1601  0412                     	;# 
  1602  0413                     	;# 
  1603  0414                     	;# 
  1604  0415                     	;# 
  1605  0416                     	;# 
  1606  0417                     	;# 
  1607  0418                     	;# 
  1608  0418                     	;# 
  1609  0419                     	;# 
  1610  041A                     	;# 
  1611  041B                     	;# 
  1612  041C                     	;# 
  1613  041D                     	;# 
  1614  041E                     	;# 
  1615  048D                     	;# 
  1616  0491                     	;# 
  1617  0491                     	;# 
  1618  0492                     	;# 
  1619  0492                     	;# 
  1620  0493                     	;# 
  1621  0493                     	;# 
  1622  0493                     	;# 
  1623  0494                     	;# 
  1624  0494                     	;# 
  1625  0495                     	;# 
  1626  0495                     	;# 
  1627  0496                     	;# 
  1628  0496                     	;# 
  1629  0497                     	;# 
  1630  0497                     	;# 
  1631  0595                     	;# 
  1632  0596                     	;# 
  1633  0597                     	;# 
  1634  059C                     	;# 
  1635  059D                     	;# 
  1636  059E                     	;# 
  1637  0611                     	;# 
  1638  0611                     	;# 
  1639  0612                     	;# 
  1640  0613                     	;# 
  1641  0614                     	;# 
  1642  0614                     	;# 
  1643  0615                     	;# 
  1644  0616                     	;# 
  1645  0617                     	;# 
  1646  0617                     	;# 
  1647  0618                     	;# 
  1648  0619                     	;# 
  1649  061A                     	;# 
  1650  061A                     	;# 
  1651  061B                     	;# 
  1652  061C                     	;# 
  1653  061D                     	;# 
  1654  061D                     	;# 
  1655  061E                     	;# 
  1656  061F                     	;# 
  1657  0FE4                     	;# 
  1658  0FE5                     	;# 
  1659  0FE6                     	;# 
  1660  0FE7                     	;# 
  1661  0FE8                     	;# 
  1662  0FE9                     	;# 
  1663  0FEA                     	;# 
  1664  0FEB                     	;# 
  1665  0FED                     	;# 
  1666  0FEE                     	;# 
  1667  0FEF                     	;# 
  1668  0000                     	;# 
  1669  0001                     	;# 
  1670  0002                     	;# 
  1671  0003                     	;# 
  1672  0004                     	;# 
  1673  0005                     	;# 
  1674  0006                     	;# 
  1675  0007                     	;# 
  1676  0008                     	;# 
  1677  0009                     	;# 
  1678  000A                     	;# 
  1679  000B                     	;# 
  1680  000C                     	;# 
  1681  000D                     	;# 
  1682  000E                     	;# 
  1683  000F                     	;# 
  1684  0010                     	;# 
  1685  0011                     	;# 
  1686  0012                     	;# 
  1687  0013                     	;# 
  1688  0014                     	;# 
  1689  0015                     	;# 
  1690  0016                     	;# 
  1691  0016                     	;# 
  1692  0017                     	;# 
  1693  0018                     	;# 
  1694  0019                     	;# 
  1695  001A                     	;# 
  1696  001B                     	;# 
  1697  001C                     	;# 
  1698  008C                     	;# 
  1699  008D                     	;# 
  1700  008E                     	;# 
  1701  008F                     	;# 
  1702  0090                     	;# 
  1703  0091                     	;# 
  1704  0092                     	;# 
  1705  0093                     	;# 
  1706  0094                     	;# 
  1707  0095                     	;# 
  1708  0096                     	;# 
  1709  0097                     	;# 
  1710  0099                     	;# 
  1711  009A                     	;# 
  1712  009B                     	;# 
  1713  009B                     	;# 
  1714  009C                     	;# 
  1715  009D                     	;# 
  1716  009E                     	;# 
  1717  010C                     	;# 
  1718  010D                     	;# 
  1719  010E                     	;# 
  1720  010F                     	;# 
  1721  0110                     	;# 
  1722  0116                     	;# 
  1723  0117                     	;# 
  1724  011D                     	;# 
  1725  018C                     	;# 
  1726  018D                     	;# 
  1727  018F                     	;# 
  1728  0190                     	;# 
  1729  0191                     	;# 
  1730  0191                     	;# 
  1731  0192                     	;# 
  1732  0193                     	;# 
  1733  0193                     	;# 
  1734  0194                     	;# 
  1735  0195                     	;# 
  1736  0196                     	;# 
  1737  0197                     	;# 
  1738  0199                     	;# 
  1739  0199                     	;# 
  1740  0199                     	;# 
  1741  019A                     	;# 
  1742  019A                     	;# 
  1743  019A                     	;# 
  1744  019B                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019C                     	;# 
  1750  019C                     	;# 
  1751  019C                     	;# 
  1752  019D                     	;# 
  1753  019D                     	;# 
  1754  019D                     	;# 
  1755  019E                     	;# 
  1756  019E                     	;# 
  1757  019E                     	;# 
  1758  019F                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  020D                     	;# 
  1762  020F                     	;# 
  1763  0210                     	;# 
  1764  0211                     	;# 
  1765  0211                     	;# 
  1766  0212                     	;# 
  1767  0212                     	;# 
  1768  0213                     	;# 
  1769  0213                     	;# 
  1770  0214                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0216                     	;# 
  1776  0216                     	;# 
  1777  0217                     	;# 
  1778  0217                     	;# 
  1779  0219                     	;# 
  1780  021A                     	;# 
  1781  021B                     	;# 
  1782  021C                     	;# 
  1783  021D                     	;# 
  1784  021E                     	;# 
  1785  021F                     	;# 
  1786  028C                     	;# 
  1787  028D                     	;# 
  1788  0291                     	;# 
  1789  0291                     	;# 
  1790  0292                     	;# 
  1791  0293                     	;# 
  1792  0298                     	;# 
  1793  0298                     	;# 
  1794  0299                     	;# 
  1795  029A                     	;# 
  1796  029D                     	;# 
  1797  029E                     	;# 
  1798  029F                     	;# 
  1799  030C                     	;# 
  1800  030D                     	;# 
  1801  0311                     	;# 
  1802  0311                     	;# 
  1803  0312                     	;# 
  1804  0313                     	;# 
  1805  0318                     	;# 
  1806  0318                     	;# 
  1807  0319                     	;# 
  1808  031A                     	;# 
  1809  031C                     	;# 
  1810  031C                     	;# 
  1811  031D                     	;# 
  1812  031E                     	;# 
  1813  038C                     	;# 
  1814  038D                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  040C                     	;# 
  1819  040D                     	;# 
  1820  0411                     	;# 
  1821  0411                     	;# 
  1822  0412                     	;# 
  1823  0413                     	;# 
  1824  0414                     	;# 
  1825  0415                     	;# 
  1826  0416                     	;# 
  1827  0417                     	;# 
  1828  0418                     	;# 
  1829  0418                     	;# 
  1830  0419                     	;# 
  1831  041A                     	;# 
  1832  041B                     	;# 
  1833  041C                     	;# 
  1834  041D                     	;# 
  1835  041E                     	;# 
  1836  048D                     	;# 
  1837  0491                     	;# 
  1838  0491                     	;# 
  1839  0492                     	;# 
  1840  0492                     	;# 
  1841  0493                     	;# 
  1842  0493                     	;# 
  1843  0493                     	;# 
  1844  0494                     	;# 
  1845  0494                     	;# 
  1846  0495                     	;# 
  1847  0495                     	;# 
  1848  0496                     	;# 
  1849  0496                     	;# 
  1850  0497                     	;# 
  1851  0497                     	;# 
  1852  0595                     	;# 
  1853  0596                     	;# 
  1854  0597                     	;# 
  1855  059C                     	;# 
  1856  059D                     	;# 
  1857  059E                     	;# 
  1858  0611                     	;# 
  1859  0611                     	;# 
  1860  0612                     	;# 
  1861  0613                     	;# 
  1862  0614                     	;# 
  1863  0614                     	;# 
  1864  0615                     	;# 
  1865  0616                     	;# 
  1866  0617                     	;# 
  1867  0617                     	;# 
  1868  0618                     	;# 
  1869  0619                     	;# 
  1870  061A                     	;# 
  1871  061A                     	;# 
  1872  061B                     	;# 
  1873  061C                     	;# 
  1874  061D                     	;# 
  1875  061D                     	;# 
  1876  061E                     	;# 
  1877  061F                     	;# 
  1878  0FE4                     	;# 
  1879  0FE5                     	;# 
  1880  0FE6                     	;# 
  1881  0FE7                     	;# 
  1882  0FE8                     	;# 
  1883  0FE9                     	;# 
  1884  0FEA                     	;# 
  1885  0FEB                     	;# 
  1886  0FED                     	;# 
  1887  0FEE                     	;# 
  1888  0FEF                     	;# 
  1889  0000                     	;# 
  1890  0001                     	;# 
  1891  0002                     	;# 
  1892  0003                     	;# 
  1893  0004                     	;# 
  1894  0005                     	;# 
  1895  0006                     	;# 
  1896  0007                     	;# 
  1897  0008                     	;# 
  1898  0009                     	;# 
  1899  000A                     	;# 
  1900  000B                     	;# 
  1901  000C                     	;# 
  1902  000D                     	;# 
  1903  000E                     	;# 
  1904  000F                     	;# 
  1905  0010                     	;# 
  1906  0011                     	;# 
  1907  0012                     	;# 
  1908  0013                     	;# 
  1909  0014                     	;# 
  1910  0015                     	;# 
  1911  0016                     	;# 
  1912  0016                     	;# 
  1913  0017                     	;# 
  1914  0018                     	;# 
  1915  0019                     	;# 
  1916  001A                     	;# 
  1917  001B                     	;# 
  1918  001C                     	;# 
  1919  008C                     	;# 
  1920  008D                     	;# 
  1921  008E                     	;# 
  1922  008F                     	;# 
  1923  0090                     	;# 
  1924  0091                     	;# 
  1925  0092                     	;# 
  1926  0093                     	;# 
  1927  0094                     	;# 
  1928  0095                     	;# 
  1929  0096                     	;# 
  1930  0097                     	;# 
  1931  0099                     	;# 
  1932  009A                     	;# 
  1933  009B                     	;# 
  1934  009B                     	;# 
  1935  009C                     	;# 
  1936  009D                     	;# 
  1937  009E                     	;# 
  1938  010C                     	;# 
  1939  010D                     	;# 
  1940  010E                     	;# 
  1941  010F                     	;# 
  1942  0110                     	;# 
  1943  0116                     	;# 
  1944  0117                     	;# 
  1945  011D                     	;# 
  1946  018C                     	;# 
  1947  018D                     	;# 
  1948  018F                     	;# 
  1949  0190                     	;# 
  1950  0191                     	;# 
  1951  0191                     	;# 
  1952  0192                     	;# 
  1953  0193                     	;# 
  1954  0193                     	;# 
  1955  0194                     	;# 
  1956  0195                     	;# 
  1957  0196                     	;# 
  1958  0197                     	;# 
  1959  0199                     	;# 
  1960  0199                     	;# 
  1961  0199                     	;# 
  1962  019A                     	;# 
  1963  019A                     	;# 
  1964  019A                     	;# 
  1965  019B                     	;# 
  1966  019B                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019C                     	;# 
  1971  019C                     	;# 
  1972  019C                     	;# 
  1973  019D                     	;# 
  1974  019D                     	;# 
  1975  019D                     	;# 
  1976  019E                     	;# 
  1977  019E                     	;# 
  1978  019E                     	;# 
  1979  019F                     	;# 
  1980  019F                     	;# 
  1981  019F                     	;# 
  1982  020D                     	;# 
  1983  020F                     	;# 
  1984  0210                     	;# 
  1985  0211                     	;# 
  1986  0211                     	;# 
  1987  0212                     	;# 
  1988  0212                     	;# 
  1989  0213                     	;# 
  1990  0213                     	;# 
  1991  0214                     	;# 
  1992  0214                     	;# 
  1993  0215                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0216                     	;# 
  1997  0216                     	;# 
  1998  0217                     	;# 
  1999  0217                     	;# 
  2000  0219                     	;# 
  2001  021A                     	;# 
  2002  021B                     	;# 
  2003  021C                     	;# 
  2004  021D                     	;# 
  2005  021E                     	;# 
  2006  021F                     	;# 
  2007  028C                     	;# 
  2008  028D                     	;# 
  2009  0291                     	;# 
  2010  0291                     	;# 
  2011  0292                     	;# 
  2012  0293                     	;# 
  2013  0298                     	;# 
  2014  0298                     	;# 
  2015  0299                     	;# 
  2016  029A                     	;# 
  2017  029D                     	;# 
  2018  029E                     	;# 
  2019  029F                     	;# 
  2020  030C                     	;# 
  2021  030D                     	;# 
  2022  0311                     	;# 
  2023  0311                     	;# 
  2024  0312                     	;# 
  2025  0313                     	;# 
  2026  0318                     	;# 
  2027  0318                     	;# 
  2028  0319                     	;# 
  2029  031A                     	;# 
  2030  031C                     	;# 
  2031  031C                     	;# 
  2032  031D                     	;# 
  2033  031E                     	;# 
  2034  038C                     	;# 
  2035  038D                     	;# 
  2036  0394                     	;# 
  2037  0395                     	;# 
  2038  0396                     	;# 
  2039  040C                     	;# 
  2040  040D                     	;# 
  2041  0411                     	;# 
  2042  0411                     	;# 
  2043  0412                     	;# 
  2044  0413                     	;# 
  2045  0414                     	;# 
  2046  0415                     	;# 
  2047  0416                     	;# 
  2048  0417                     	;# 
  2049  0418                     	;# 
  2050  0418                     	;# 
  2051  0419                     	;# 
  2052  041A                     	;# 
  2053  041B                     	;# 
  2054  041C                     	;# 
  2055  041D                     	;# 
  2056  041E                     	;# 
  2057  048D                     	;# 
  2058  0491                     	;# 
  2059  0491                     	;# 
  2060  0492                     	;# 
  2061  0492                     	;# 
  2062  0493                     	;# 
  2063  0493                     	;# 
  2064  0493                     	;# 
  2065  0494                     	;# 
  2066  0494                     	;# 
  2067  0495                     	;# 
  2068  0495                     	;# 
  2069  0496                     	;# 
  2070  0496                     	;# 
  2071  0497                     	;# 
  2072  0497                     	;# 
  2073  0595                     	;# 
  2074  0596                     	;# 
  2075  0597                     	;# 
  2076  059C                     	;# 
  2077  059D                     	;# 
  2078  059E                     	;# 
  2079  0611                     	;# 
  2080  0611                     	;# 
  2081  0612                     	;# 
  2082  0613                     	;# 
  2083  0614                     	;# 
  2084  0614                     	;# 
  2085  0615                     	;# 
  2086  0616                     	;# 
  2087  0617                     	;# 
  2088  0617                     	;# 
  2089  0618                     	;# 
  2090  0619                     	;# 
  2091  061A                     	;# 
  2092  061A                     	;# 
  2093  061B                     	;# 
  2094  061C                     	;# 
  2095  061D                     	;# 
  2096  061D                     	;# 
  2097  061E                     	;# 
  2098  061F                     	;# 
  2099  0FE4                     	;# 
  2100  0FE5                     	;# 
  2101  0FE6                     	;# 
  2102  0FE7                     	;# 
  2103  0FE8                     	;# 
  2104  0FE9                     	;# 
  2105  0FEA                     	;# 
  2106  0FEB                     	;# 
  2107  0FED                     	;# 
  2108  0FEE                     	;# 
  2109  0FEF                     	;# 
  2110  0000                     	;# 
  2111  0001                     	;# 
  2112  0002                     	;# 
  2113  0003                     	;# 
  2114  0004                     	;# 
  2115  0005                     	;# 
  2116  0006                     	;# 
  2117  0007                     	;# 
  2118  0008                     	;# 
  2119  0009                     	;# 
  2120  000A                     	;# 
  2121  000B                     	;# 
  2122  000C                     	;# 
  2123  000D                     	;# 
  2124  000E                     	;# 
  2125  000F                     	;# 
  2126  0010                     	;# 
  2127  0011                     	;# 
  2128  0012                     	;# 
  2129  0013                     	;# 
  2130  0014                     	;# 
  2131  0015                     	;# 
  2132  0016                     	;# 
  2133  0016                     	;# 
  2134  0017                     	;# 
  2135  0018                     	;# 
  2136  0019                     	;# 
  2137  001A                     	;# 
  2138  001B                     	;# 
  2139  001C                     	;# 
  2140  008C                     	;# 
  2141  008D                     	;# 
  2142  008E                     	;# 
  2143  008F                     	;# 
  2144  0090                     	;# 
  2145  0091                     	;# 
  2146  0092                     	;# 
  2147  0093                     	;# 
  2148  0094                     	;# 
  2149  0095                     	;# 
  2150  0096                     	;# 
  2151  0097                     	;# 
  2152  0099                     	;# 
  2153  009A                     	;# 
  2154  009B                     	;# 
  2155  009B                     	;# 
  2156  009C                     	;# 
  2157  009D                     	;# 
  2158  009E                     	;# 
  2159  010C                     	;# 
  2160  010D                     	;# 
  2161  010E                     	;# 
  2162  010F                     	;# 
  2163  0110                     	;# 
  2164  0116                     	;# 
  2165  0117                     	;# 
  2166  011D                     	;# 
  2167  018C                     	;# 
  2168  018D                     	;# 
  2169  018F                     	;# 
  2170  0190                     	;# 
  2171  0191                     	;# 
  2172  0191                     	;# 
  2173  0192                     	;# 
  2174  0193                     	;# 
  2175  0193                     	;# 
  2176  0194                     	;# 
  2177  0195                     	;# 
  2178  0196                     	;# 
  2179  0197                     	;# 
  2180  0199                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  019A                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019B                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019C                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019D                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019E                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019F                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  020D                     	;# 
  2204  020F                     	;# 
  2205  0210                     	;# 
  2206  0211                     	;# 
  2207  0211                     	;# 
  2208  0212                     	;# 
  2209  0212                     	;# 
  2210  0213                     	;# 
  2211  0213                     	;# 
  2212  0214                     	;# 
  2213  0214                     	;# 
  2214  0215                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0216                     	;# 
  2218  0216                     	;# 
  2219  0217                     	;# 
  2220  0217                     	;# 
  2221  0219                     	;# 
  2222  021A                     	;# 
  2223  021B                     	;# 
  2224  021C                     	;# 
  2225  021D                     	;# 
  2226  021E                     	;# 
  2227  021F                     	;# 
  2228  028C                     	;# 
  2229  028D                     	;# 
  2230  0291                     	;# 
  2231  0291                     	;# 
  2232  0292                     	;# 
  2233  0293                     	;# 
  2234  0298                     	;# 
  2235  0298                     	;# 
  2236  0299                     	;# 
  2237  029A                     	;# 
  2238  029D                     	;# 
  2239  029E                     	;# 
  2240  029F                     	;# 
  2241  030C                     	;# 
  2242  030D                     	;# 
  2243  0311                     	;# 
  2244  0311                     	;# 
  2245  0312                     	;# 
  2246  0313                     	;# 
  2247  0318                     	;# 
  2248  0318                     	;# 
  2249  0319                     	;# 
  2250  031A                     	;# 
  2251  031C                     	;# 
  2252  031C                     	;# 
  2253  031D                     	;# 
  2254  031E                     	;# 
  2255  038C                     	;# 
  2256  038D                     	;# 
  2257  0394                     	;# 
  2258  0395                     	;# 
  2259  0396                     	;# 
  2260  040C                     	;# 
  2261  040D                     	;# 
  2262  0411                     	;# 
  2263  0411                     	;# 
  2264  0412                     	;# 
  2265  0413                     	;# 
  2266  0414                     	;# 
  2267  0415                     	;# 
  2268  0416                     	;# 
  2269  0417                     	;# 
  2270  0418                     	;# 
  2271  0418                     	;# 
  2272  0419                     	;# 
  2273  041A                     	;# 
  2274  041B                     	;# 
  2275  041C                     	;# 
  2276  041D                     	;# 
  2277  041E                     	;# 
  2278  048D                     	;# 
  2279  0491                     	;# 
  2280  0491                     	;# 
  2281  0492                     	;# 
  2282  0492                     	;# 
  2283  0493                     	;# 
  2284  0493                     	;# 
  2285  0493                     	;# 
  2286  0494                     	;# 
  2287  0494                     	;# 
  2288  0495                     	;# 
  2289  0495                     	;# 
  2290  0496                     	;# 
  2291  0496                     	;# 
  2292  0497                     	;# 
  2293  0497                     	;# 
  2294  0595                     	;# 
  2295  0596                     	;# 
  2296  0597                     	;# 
  2297  059C                     	;# 
  2298  059D                     	;# 
  2299  059E                     	;# 
  2300  0611                     	;# 
  2301  0611                     	;# 
  2302  0612                     	;# 
  2303  0613                     	;# 
  2304  0614                     	;# 
  2305  0614                     	;# 
  2306  0615                     	;# 
  2307  0616                     	;# 
  2308  0617                     	;# 
  2309  0617                     	;# 
  2310  0618                     	;# 
  2311  0619                     	;# 
  2312  061A                     	;# 
  2313  061A                     	;# 
  2314  061B                     	;# 
  2315  061C                     	;# 
  2316  061D                     	;# 
  2317  061D                     	;# 
  2318  061E                     	;# 
  2319  061F                     	;# 
  2320  0FE4                     	;# 
  2321  0FE5                     	;# 
  2322  0FE6                     	;# 
  2323  0FE7                     	;# 
  2324  0FE8                     	;# 
  2325  0FE9                     	;# 
  2326  0FEA                     	;# 
  2327  0FEB                     	;# 
  2328  0FED                     	;# 
  2329  0FEE                     	;# 
  2330  0FEF                     	;# 
  2331  0000                     	;# 
  2332  0001                     	;# 
  2333  0002                     	;# 
  2334  0003                     	;# 
  2335  0004                     	;# 
  2336  0005                     	;# 
  2337  0006                     	;# 
  2338  0007                     	;# 
  2339  0008                     	;# 
  2340  0009                     	;# 
  2341  000A                     	;# 
  2342  000B                     	;# 
  2343  000C                     	;# 
  2344  000D                     	;# 
  2345  000E                     	;# 
  2346  000F                     	;# 
  2347  0010                     	;# 
  2348  0011                     	;# 
  2349  0012                     	;# 
  2350  0013                     	;# 
  2351  0014                     	;# 
  2352  0015                     	;# 
  2353  0016                     	;# 
  2354  0016                     	;# 
  2355  0017                     	;# 
  2356  0018                     	;# 
  2357  0019                     	;# 
  2358  001A                     	;# 
  2359  001B                     	;# 
  2360  001C                     	;# 
  2361  008C                     	;# 
  2362  008D                     	;# 
  2363  008E                     	;# 
  2364  008F                     	;# 
  2365  0090                     	;# 
  2366  0091                     	;# 
  2367  0092                     	;# 
  2368  0093                     	;# 
  2369  0094                     	;# 
  2370  0095                     	;# 
  2371  0096                     	;# 
  2372  0097                     	;# 
  2373  0099                     	;# 
  2374  009A                     	;# 
  2375  009B                     	;# 
  2376  009B                     	;# 
  2377  009C                     	;# 
  2378  009D                     	;# 
  2379  009E                     	;# 
  2380  010C                     	;# 
  2381  010D                     	;# 
  2382  010E                     	;# 
  2383  010F                     	;# 
  2384  0110                     	;# 
  2385  0116                     	;# 
  2386  0117                     	;# 
  2387  011D                     	;# 
  2388  018C                     	;# 
  2389  018D                     	;# 
  2390  018F                     	;# 
  2391  0190                     	;# 
  2392  0191                     	;# 
  2393  0191                     	;# 
  2394  0192                     	;# 
  2395  0193                     	;# 
  2396  0193                     	;# 
  2397  0194                     	;# 
  2398  0195                     	;# 
  2399  0196                     	;# 
  2400  0197                     	;# 
  2401  0199                     	;# 
  2402  0199                     	;# 
  2403  0199                     	;# 
  2404  019A                     	;# 
  2405  019A                     	;# 
  2406  019A                     	;# 
  2407  019B                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019C                     	;# 
  2413  019C                     	;# 
  2414  019C                     	;# 
  2415  019D                     	;# 
  2416  019D                     	;# 
  2417  019D                     	;# 
  2418  019E                     	;# 
  2419  019E                     	;# 
  2420  019E                     	;# 
  2421  019F                     	;# 
  2422  019F                     	;# 
  2423  019F                     	;# 
  2424  020D                     	;# 
  2425  020F                     	;# 
  2426  0210                     	;# 
  2427  0211                     	;# 
  2428  0211                     	;# 
  2429  0212                     	;# 
  2430  0212                     	;# 
  2431  0213                     	;# 
  2432  0213                     	;# 
  2433  0214                     	;# 
  2434  0214                     	;# 
  2435  0215                     	;# 
  2436  0215                     	;# 
  2437  0215                     	;# 
  2438  0216                     	;# 
  2439  0216                     	;# 
  2440  0217                     	;# 
  2441  0217                     	;# 
  2442  0219                     	;# 
  2443  021A                     	;# 
  2444  021B                     	;# 
  2445  021C                     	;# 
  2446  021D                     	;# 
  2447  021E                     	;# 
  2448  021F                     	;# 
  2449  028C                     	;# 
  2450  028D                     	;# 
  2451  0291                     	;# 
  2452  0291                     	;# 
  2453  0292                     	;# 
  2454  0293                     	;# 
  2455  0298                     	;# 
  2456  0298                     	;# 
  2457  0299                     	;# 
  2458  029A                     	;# 
  2459  029D                     	;# 
  2460  029E                     	;# 
  2461  029F                     	;# 
  2462  030C                     	;# 
  2463  030D                     	;# 
  2464  0311                     	;# 
  2465  0311                     	;# 
  2466  0312                     	;# 
  2467  0313                     	;# 
  2468  0318                     	;# 
  2469  0318                     	;# 
  2470  0319                     	;# 
  2471  031A                     	;# 
  2472  031C                     	;# 
  2473  031C                     	;# 
  2474  031D                     	;# 
  2475  031E                     	;# 
  2476  038C                     	;# 
  2477  038D                     	;# 
  2478  0394                     	;# 
  2479  0395                     	;# 
  2480  0396                     	;# 
  2481  040C                     	;# 
  2482  040D                     	;# 
  2483  0411                     	;# 
  2484  0411                     	;# 
  2485  0412                     	;# 
  2486  0413                     	;# 
  2487  0414                     	;# 
  2488  0415                     	;# 
  2489  0416                     	;# 
  2490  0417                     	;# 
  2491  0418                     	;# 
  2492  0418                     	;# 
  2493  0419                     	;# 
  2494  041A                     	;# 
  2495  041B                     	;# 
  2496  041C                     	;# 
  2497  041D                     	;# 
  2498  041E                     	;# 
  2499  048D                     	;# 
  2500  0491                     	;# 
  2501  0491                     	;# 
  2502  0492                     	;# 
  2503  0492                     	;# 
  2504  0493                     	;# 
  2505  0493                     	;# 
  2506  0493                     	;# 
  2507  0494                     	;# 
  2508  0494                     	;# 
  2509  0495                     	;# 
  2510  0495                     	;# 
  2511  0496                     	;# 
  2512  0496                     	;# 
  2513  0497                     	;# 
  2514  0497                     	;# 
  2515  0595                     	;# 
  2516  0596                     	;# 
  2517  0597                     	;# 
  2518  059C                     	;# 
  2519  059D                     	;# 
  2520  059E                     	;# 
  2521  0611                     	;# 
  2522  0611                     	;# 
  2523  0612                     	;# 
  2524  0613                     	;# 
  2525  0614                     	;# 
  2526  0614                     	;# 
  2527  0615                     	;# 
  2528  0616                     	;# 
  2529  0617                     	;# 
  2530  0617                     	;# 
  2531  0618                     	;# 
  2532  0619                     	;# 
  2533  061A                     	;# 
  2534  061A                     	;# 
  2535  061B                     	;# 
  2536  061C                     	;# 
  2537  061D                     	;# 
  2538  061D                     	;# 
  2539  061E                     	;# 
  2540  061F                     	;# 
  2541  0FE4                     	;# 
  2542  0FE5                     	;# 
  2543  0FE6                     	;# 
  2544  0FE7                     	;# 
  2545  0FE8                     	;# 
  2546  0FE9                     	;# 
  2547  0FEA                     	;# 
  2548  0FEB                     	;# 
  2549  0FED                     	;# 
  2550  0FEE                     	;# 
  2551  0FEF                     	;# 
  2552  0000                     	;# 
  2553  0001                     	;# 
  2554  0002                     	;# 
  2555  0003                     	;# 
  2556  0004                     	;# 
  2557  0005                     	;# 
  2558  0006                     	;# 
  2559  0007                     	;# 
  2560  0008                     	;# 
  2561  0009                     	;# 
  2562  000A                     	;# 
  2563  000B                     	;# 
  2564  000C                     	;# 
  2565  000D                     	;# 
  2566  000E                     	;# 
  2567  000F                     	;# 
  2568  0010                     	;# 
  2569  0011                     	;# 
  2570  0012                     	;# 
  2571  0013                     	;# 
  2572  0014                     	;# 
  2573  0015                     	;# 
  2574  0016                     	;# 
  2575  0016                     	;# 
  2576  0017                     	;# 
  2577  0018                     	;# 
  2578  0019                     	;# 
  2579  001A                     	;# 
  2580  001B                     	;# 
  2581  001C                     	;# 
  2582  008C                     	;# 
  2583  008D                     	;# 
  2584  008E                     	;# 
  2585  008F                     	;# 
  2586  0090                     	;# 
  2587  0091                     	;# 
  2588  0092                     	;# 
  2589  0093                     	;# 
  2590  0094                     	;# 
  2591  0095                     	;# 
  2592  0096                     	;# 
  2593  0097                     	;# 
  2594  0099                     	;# 
  2595  009A                     	;# 
  2596  009B                     	;# 
  2597  009B                     	;# 
  2598  009C                     	;# 
  2599  009D                     	;# 
  2600  009E                     	;# 
  2601  010C                     	;# 
  2602  010D                     	;# 
  2603  010E                     	;# 
  2604  010F                     	;# 
  2605  0110                     	;# 
  2606  0116                     	;# 
  2607  0117                     	;# 
  2608  011D                     	;# 
  2609  018C                     	;# 
  2610  018D                     	;# 
  2611  018F                     	;# 
  2612  0190                     	;# 
  2613  0191                     	;# 
  2614  0191                     	;# 
  2615  0192                     	;# 
  2616  0193                     	;# 
  2617  0193                     	;# 
  2618  0194                     	;# 
  2619  0195                     	;# 
  2620  0196                     	;# 
  2621  0197                     	;# 
  2622  0199                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  019A                     	;# 
  2626  019A                     	;# 
  2627  019A                     	;# 
  2628  019B                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019C                     	;# 
  2634  019C                     	;# 
  2635  019C                     	;# 
  2636  019D                     	;# 
  2637  019D                     	;# 
  2638  019D                     	;# 
  2639  019E                     	;# 
  2640  019E                     	;# 
  2641  019E                     	;# 
  2642  019F                     	;# 
  2643  019F                     	;# 
  2644  019F                     	;# 
  2645  020D                     	;# 
  2646  020F                     	;# 
  2647  0210                     	;# 
  2648  0211                     	;# 
  2649  0211                     	;# 
  2650  0212                     	;# 
  2651  0212                     	;# 
  2652  0213                     	;# 
  2653  0213                     	;# 
  2654  0214                     	;# 
  2655  0214                     	;# 
  2656  0215                     	;# 
  2657  0215                     	;# 
  2658  0215                     	;# 
  2659  0216                     	;# 
  2660  0216                     	;# 
  2661  0217                     	;# 
  2662  0217                     	;# 
  2663  0219                     	;# 
  2664  021A                     	;# 
  2665  021B                     	;# 
  2666  021C                     	;# 
  2667  021D                     	;# 
  2668  021E                     	;# 
  2669  021F                     	;# 
  2670  028C                     	;# 
  2671  028D                     	;# 
  2672  0291                     	;# 
  2673  0291                     	;# 
  2674  0292                     	;# 
  2675  0293                     	;# 
  2676  0298                     	;# 
  2677  0298                     	;# 
  2678  0299                     	;# 
  2679  029A                     	;# 
  2680  029D                     	;# 
  2681  029E                     	;# 
  2682  029F                     	;# 
  2683  030C                     	;# 
  2684  030D                     	;# 
  2685  0311                     	;# 
  2686  0311                     	;# 
  2687  0312                     	;# 
  2688  0313                     	;# 
  2689  0318                     	;# 
  2690  0318                     	;# 
  2691  0319                     	;# 
  2692  031A                     	;# 
  2693  031C                     	;# 
  2694  031C                     	;# 
  2695  031D                     	;# 
  2696  031E                     	;# 
  2697  038C                     	;# 
  2698  038D                     	;# 
  2699  0394                     	;# 
  2700  0395                     	;# 
  2701  0396                     	;# 
  2702  040C                     	;# 
  2703  040D                     	;# 
  2704  0411                     	;# 
  2705  0411                     	;# 
  2706  0412                     	;# 
  2707  0413                     	;# 
  2708  0414                     	;# 
  2709  0415                     	;# 
  2710  0416                     	;# 
  2711  0417                     	;# 
  2712  0418                     	;# 
  2713  0418                     	;# 
  2714  0419                     	;# 
  2715  041A                     	;# 
  2716  041B                     	;# 
  2717  041C                     	;# 
  2718  041D                     	;# 
  2719  041E                     	;# 
  2720  048D                     	;# 
  2721  0491                     	;# 
  2722  0491                     	;# 
  2723  0492                     	;# 
  2724  0492                     	;# 
  2725  0493                     	;# 
  2726  0493                     	;# 
  2727  0493                     	;# 
  2728  0494                     	;# 
  2729  0494                     	;# 
  2730  0495                     	;# 
  2731  0495                     	;# 
  2732  0496                     	;# 
  2733  0496                     	;# 
  2734  0497                     	;# 
  2735  0497                     	;# 
  2736  0595                     	;# 
  2737  0596                     	;# 
  2738  0597                     	;# 
  2739  059C                     	;# 
  2740  059D                     	;# 
  2741  059E                     	;# 
  2742  0611                     	;# 
  2743  0611                     	;# 
  2744  0612                     	;# 
  2745  0613                     	;# 
  2746  0614                     	;# 
  2747  0614                     	;# 
  2748  0615                     	;# 
  2749  0616                     	;# 
  2750  0617                     	;# 
  2751  0617                     	;# 
  2752  0618                     	;# 
  2753  0619                     	;# 
  2754  061A                     	;# 
  2755  061A                     	;# 
  2756  061B                     	;# 
  2757  061C                     	;# 
  2758  061D                     	;# 
  2759  061D                     	;# 
  2760  061E                     	;# 
  2761  061F                     	;# 
  2762  0FE4                     	;# 
  2763  0FE5                     	;# 
  2764  0FE6                     	;# 
  2765  0FE7                     	;# 
  2766  0FE8                     	;# 
  2767  0FE9                     	;# 
  2768  0FEA                     	;# 
  2769  0FEB                     	;# 
  2770  0FED                     	;# 
  2771  0FEE                     	;# 
  2772  0FEF                     	;# 
  2773  0000                     	;# 
  2774  0001                     	;# 
  2775  0002                     	;# 
  2776  0003                     	;# 
  2777  0004                     	;# 
  2778  0005                     	;# 
  2779  0006                     	;# 
  2780  0007                     	;# 
  2781  0008                     	;# 
  2782  0009                     	;# 
  2783  000A                     	;# 
  2784  000B                     	;# 
  2785  000C                     	;# 
  2786  000D                     	;# 
  2787  000E                     	;# 
  2788  000F                     	;# 
  2789  0010                     	;# 
  2790  0011                     	;# 
  2791  0012                     	;# 
  2792  0013                     	;# 
  2793  0014                     	;# 
  2794  0015                     	;# 
  2795  0016                     	;# 
  2796  0016                     	;# 
  2797  0017                     	;# 
  2798  0018                     	;# 
  2799  0019                     	;# 
  2800  001A                     	;# 
  2801  001B                     	;# 
  2802  001C                     	;# 
  2803  008C                     	;# 
  2804  008D                     	;# 
  2805  008E                     	;# 
  2806  008F                     	;# 
  2807  0090                     	;# 
  2808  0091                     	;# 
  2809  0092                     	;# 
  2810  0093                     	;# 
  2811  0094                     	;# 
  2812  0095                     	;# 
  2813  0096                     	;# 
  2814  0097                     	;# 
  2815  0099                     	;# 
  2816  009A                     	;# 
  2817  009B                     	;# 
  2818  009B                     	;# 
  2819  009C                     	;# 
  2820  009D                     	;# 
  2821  009E                     	;# 
  2822  010C                     	;# 
  2823  010D                     	;# 
  2824  010E                     	;# 
  2825  010F                     	;# 
  2826  0110                     	;# 
  2827  0116                     	;# 
  2828  0117                     	;# 
  2829  011D                     	;# 
  2830  018C                     	;# 
  2831  018D                     	;# 
  2832  018F                     	;# 
  2833  0190                     	;# 
  2834  0191                     	;# 
  2835  0191                     	;# 
  2836  0192                     	;# 
  2837  0193                     	;# 
  2838  0193                     	;# 
  2839  0194                     	;# 
  2840  0195                     	;# 
  2841  0196                     	;# 
  2842  0197                     	;# 
  2843  0199                     	;# 
  2844  0199                     	;# 
  2845  0199                     	;# 
  2846  019A                     	;# 
  2847  019A                     	;# 
  2848  019A                     	;# 
  2849  019B                     	;# 
  2850  019B                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019C                     	;# 
  2855  019C                     	;# 
  2856  019C                     	;# 
  2857  019D                     	;# 
  2858  019D                     	;# 
  2859  019D                     	;# 
  2860  019E                     	;# 
  2861  019E                     	;# 
  2862  019E                     	;# 
  2863  019F                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  020D                     	;# 
  2867  020F                     	;# 
  2868  0210                     	;# 
  2869  0211                     	;# 
  2870  0211                     	;# 
  2871  0212                     	;# 
  2872  0212                     	;# 
  2873  0213                     	;# 
  2874  0213                     	;# 
  2875  0214                     	;# 
  2876  0214                     	;# 
  2877  0215                     	;# 
  2878  0215                     	;# 
  2879  0215                     	;# 
  2880  0216                     	;# 
  2881  0216                     	;# 
  2882  0217                     	;# 
  2883  0217                     	;# 
  2884  0219                     	;# 
  2885  021A                     	;# 
  2886  021B                     	;# 
  2887  021C                     	;# 
  2888  021D                     	;# 
  2889  021E                     	;# 
  2890  021F                     	;# 
  2891  028C                     	;# 
  2892  028D                     	;# 
  2893  0291                     	;# 
  2894  0291                     	;# 
  2895  0292                     	;# 
  2896  0293                     	;# 
  2897  0298                     	;# 
  2898  0298                     	;# 
  2899  0299                     	;# 
  2900  029A                     	;# 
  2901  029D                     	;# 
  2902  029E                     	;# 
  2903  029F                     	;# 
  2904  030C                     	;# 
  2905  030D                     	;# 
  2906  0311                     	;# 
  2907  0311                     	;# 
  2908  0312                     	;# 
  2909  0313                     	;# 
  2910  0318                     	;# 
  2911  0318                     	;# 
  2912  0319                     	;# 
  2913  031A                     	;# 
  2914  031C                     	;# 
  2915  031C                     	;# 
  2916  031D                     	;# 
  2917  031E                     	;# 
  2918  038C                     	;# 
  2919  038D                     	;# 
  2920  0394                     	;# 
  2921  0395                     	;# 
  2922  0396                     	;# 
  2923  040C                     	;# 
  2924  040D                     	;# 
  2925  0411                     	;# 
  2926  0411                     	;# 
  2927  0412                     	;# 
  2928  0413                     	;# 
  2929  0414                     	;# 
  2930  0415                     	;# 
  2931  0416                     	;# 
  2932  0417                     	;# 
  2933  0418                     	;# 
  2934  0418                     	;# 
  2935  0419                     	;# 
  2936  041A                     	;# 
  2937  041B                     	;# 
  2938  041C                     	;# 
  2939  041D                     	;# 
  2940  041E                     	;# 
  2941  048D                     	;# 
  2942  0491                     	;# 
  2943  0491                     	;# 
  2944  0492                     	;# 
  2945  0492                     	;# 
  2946  0493                     	;# 
  2947  0493                     	;# 
  2948  0493                     	;# 
  2949  0494                     	;# 
  2950  0494                     	;# 
  2951  0495                     	;# 
  2952  0495                     	;# 
  2953  0496                     	;# 
  2954  0496                     	;# 
  2955  0497                     	;# 
  2956  0497                     	;# 
  2957  0595                     	;# 
  2958  0596                     	;# 
  2959  0597                     	;# 
  2960  059C                     	;# 
  2961  059D                     	;# 
  2962  059E                     	;# 
  2963  0611                     	;# 
  2964  0611                     	;# 
  2965  0612                     	;# 
  2966  0613                     	;# 
  2967  0614                     	;# 
  2968  0614                     	;# 
  2969  0615                     	;# 
  2970  0616                     	;# 
  2971  0617                     	;# 
  2972  0617                     	;# 
  2973  0618                     	;# 
  2974  0619                     	;# 
  2975  061A                     	;# 
  2976  061A                     	;# 
  2977  061B                     	;# 
  2978  061C                     	;# 
  2979  061D                     	;# 
  2980  061D                     	;# 
  2981  061E                     	;# 
  2982  061F                     	;# 
  2983  0FE4                     	;# 
  2984  0FE5                     	;# 
  2985  0FE6                     	;# 
  2986  0FE7                     	;# 
  2987  0FE8                     	;# 
  2988  0FE9                     	;# 
  2989  0FEA                     	;# 
  2990  0FEB                     	;# 
  2991  0FED                     	;# 
  2992  0FEE                     	;# 
  2993  0FEF                     	;# 
  2994  0000                     	;# 
  2995  0001                     	;# 
  2996  0002                     	;# 
  2997  0003                     	;# 
  2998  0004                     	;# 
  2999  0005                     	;# 
  3000  0006                     	;# 
  3001  0007                     	;# 
  3002  0008                     	;# 
  3003  0009                     	;# 
  3004  000A                     	;# 
  3005  000B                     	;# 
  3006  000C                     	;# 
  3007  000D                     	;# 
  3008  000E                     	;# 
  3009  000F                     	;# 
  3010  0010                     	;# 
  3011  0011                     	;# 
  3012  0012                     	;# 
  3013  0013                     	;# 
  3014  0014                     	;# 
  3015  0015                     	;# 
  3016  0016                     	;# 
  3017  0016                     	;# 
  3018  0017                     	;# 
  3019  0018                     	;# 
  3020  0019                     	;# 
  3021  001A                     	;# 
  3022  001B                     	;# 
  3023  001C                     	;# 
  3024  008C                     	;# 
  3025  008D                     	;# 
  3026  008E                     	;# 
  3027  008F                     	;# 
  3028  0090                     	;# 
  3029  0091                     	;# 
  3030  0092                     	;# 
  3031  0093                     	;# 
  3032  0094                     	;# 
  3033  0095                     	;# 
  3034  0096                     	;# 
  3035  0097                     	;# 
  3036  0099                     	;# 
  3037  009A                     	;# 
  3038  009B                     	;# 
  3039  009B                     	;# 
  3040  009C                     	;# 
  3041  009D                     	;# 
  3042  009E                     	;# 
  3043  010C                     	;# 
  3044  010D                     	;# 
  3045  010E                     	;# 
  3046  010F                     	;# 
  3047  0110                     	;# 
  3048  0116                     	;# 
  3049  0117                     	;# 
  3050  011D                     	;# 
  3051  018C                     	;# 
  3052  018D                     	;# 
  3053  018F                     	;# 
  3054  0190                     	;# 
  3055  0191                     	;# 
  3056  0191                     	;# 
  3057  0192                     	;# 
  3058  0193                     	;# 
  3059  0193                     	;# 
  3060  0194                     	;# 
  3061  0195                     	;# 
  3062  0196                     	;# 
  3063  0197                     	;# 
  3064  0199                     	;# 
  3065  0199                     	;# 
  3066  0199                     	;# 
  3067  019A                     	;# 
  3068  019A                     	;# 
  3069  019A                     	;# 
  3070  019B                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019C                     	;# 
  3076  019C                     	;# 
  3077  019C                     	;# 
  3078  019D                     	;# 
  3079  019D                     	;# 
  3080  019D                     	;# 
  3081  019E                     	;# 
  3082  019E                     	;# 
  3083  019E                     	;# 
  3084  019F                     	;# 
  3085  019F                     	;# 
  3086  019F                     	;# 
  3087  020D                     	;# 
  3088  020F                     	;# 
  3089  0210                     	;# 
  3090  0211                     	;# 
  3091  0211                     	;# 
  3092  0212                     	;# 
  3093  0212                     	;# 
  3094  0213                     	;# 
  3095  0213                     	;# 
  3096  0214                     	;# 
  3097  0214                     	;# 
  3098  0215                     	;# 
  3099  0215                     	;# 
  3100  0215                     	;# 
  3101  0216                     	;# 
  3102  0216                     	;# 
  3103  0217                     	;# 
  3104  0217                     	;# 
  3105  0219                     	;# 
  3106  021A                     	;# 
  3107  021B                     	;# 
  3108  021C                     	;# 
  3109  021D                     	;# 
  3110  021E                     	;# 
  3111  021F                     	;# 
  3112  028C                     	;# 
  3113  028D                     	;# 
  3114  0291                     	;# 
  3115  0291                     	;# 
  3116  0292                     	;# 
  3117  0293                     	;# 
  3118  0298                     	;# 
  3119  0298                     	;# 
  3120  0299                     	;# 
  3121  029A                     	;# 
  3122  029D                     	;# 
  3123  029E                     	;# 
  3124  029F                     	;# 
  3125  030C                     	;# 
  3126  030D                     	;# 
  3127  0311                     	;# 
  3128  0311                     	;# 
  3129  0312                     	;# 
  3130  0313                     	;# 
  3131  0318                     	;# 
  3132  0318                     	;# 
  3133  0319                     	;# 
  3134  031A                     	;# 
  3135  031C                     	;# 
  3136  031C                     	;# 
  3137  031D                     	;# 
  3138  031E                     	;# 
  3139  038C                     	;# 
  3140  038D                     	;# 
  3141  0394                     	;# 
  3142  0395                     	;# 
  3143  0396                     	;# 
  3144  040C                     	;# 
  3145  040D                     	;# 
  3146  0411                     	;# 
  3147  0411                     	;# 
  3148  0412                     	;# 
  3149  0413                     	;# 
  3150  0414                     	;# 
  3151  0415                     	;# 
  3152  0416                     	;# 
  3153  0417                     	;# 
  3154  0418                     	;# 
  3155  0418                     	;# 
  3156  0419                     	;# 
  3157  041A                     	;# 
  3158  041B                     	;# 
  3159  041C                     	;# 
  3160  041D                     	;# 
  3161  041E                     	;# 
  3162  048D                     	;# 
  3163  0491                     	;# 
  3164  0491                     	;# 
  3165  0492                     	;# 
  3166  0492                     	;# 
  3167  0493                     	;# 
  3168  0493                     	;# 
  3169  0493                     	;# 
  3170  0494                     	;# 
  3171  0494                     	;# 
  3172  0495                     	;# 
  3173  0495                     	;# 
  3174  0496                     	;# 
  3175  0496                     	;# 
  3176  0497                     	;# 
  3177  0497                     	;# 
  3178  0595                     	;# 
  3179  0596                     	;# 
  3180  0597                     	;# 
  3181  059C                     	;# 
  3182  059D                     	;# 
  3183  059E                     	;# 
  3184  0611                     	;# 
  3185  0611                     	;# 
  3186  0612                     	;# 
  3187  0613                     	;# 
  3188  0614                     	;# 
  3189  0614                     	;# 
  3190  0615                     	;# 
  3191  0616                     	;# 
  3192  0617                     	;# 
  3193  0617                     	;# 
  3194  0618                     	;# 
  3195  0619                     	;# 
  3196  061A                     	;# 
  3197  061A                     	;# 
  3198  061B                     	;# 
  3199  061C                     	;# 
  3200  061D                     	;# 
  3201  061D                     	;# 
  3202  061E                     	;# 
  3203  061F                     	;# 
  3204  0FE4                     	;# 
  3205  0FE5                     	;# 
  3206  0FE6                     	;# 
  3207  0FE7                     	;# 
  3208  0FE8                     	;# 
  3209  0FE9                     	;# 
  3210  0FEA                     	;# 
  3211  0FEB                     	;# 
  3212  0FED                     	;# 
  3213  0FEE                     	;# 
  3214  0FEF                     	;# 
  3215  0000                     	;# 
  3216  0001                     	;# 
  3217  0002                     	;# 
  3218  0003                     	;# 
  3219  0004                     	;# 
  3220  0005                     	;# 
  3221  0006                     	;# 
  3222  0007                     	;# 
  3223  0008                     	;# 
  3224  0009                     	;# 
  3225  000A                     	;# 
  3226  000B                     	;# 
  3227  000C                     	;# 
  3228  000D                     	;# 
  3229  000E                     	;# 
  3230  000F                     	;# 
  3231  0010                     	;# 
  3232  0011                     	;# 
  3233  0012                     	;# 
  3234  0013                     	;# 
  3235  0014                     	;# 
  3236  0015                     	;# 
  3237  0016                     	;# 
  3238  0016                     	;# 
  3239  0017                     	;# 
  3240  0018                     	;# 
  3241  0019                     	;# 
  3242  001A                     	;# 
  3243  001B                     	;# 
  3244  001C                     	;# 
  3245  008C                     	;# 
  3246  008D                     	;# 
  3247  008E                     	;# 
  3248  008F                     	;# 
  3249  0090                     	;# 
  3250  0091                     	;# 
  3251  0092                     	;# 
  3252  0093                     	;# 
  3253  0094                     	;# 
  3254  0095                     	;# 
  3255  0096                     	;# 
  3256  0097                     	;# 
  3257  0099                     	;# 
  3258  009A                     	;# 
  3259  009B                     	;# 
  3260  009B                     	;# 
  3261  009C                     	;# 
  3262  009D                     	;# 
  3263  009E                     	;# 
  3264  010C                     	;# 
  3265  010D                     	;# 
  3266  010E                     	;# 
  3267  010F                     	;# 
  3268  0110                     	;# 
  3269  0116                     	;# 
  3270  0117                     	;# 
  3271  011D                     	;# 
  3272  018C                     	;# 
  3273  018D                     	;# 
  3274  018F                     	;# 
  3275  0190                     	;# 
  3276  0191                     	;# 
  3277  0191                     	;# 
  3278  0192                     	;# 
  3279  0193                     	;# 
  3280  0193                     	;# 
  3281  0194                     	;# 
  3282  0195                     	;# 
  3283  0196                     	;# 
  3284  0197                     	;# 
  3285  0199                     	;# 
  3286  0199                     	;# 
  3287  0199                     	;# 
  3288  019A                     	;# 
  3289  019A                     	;# 
  3290  019A                     	;# 
  3291  019B                     	;# 
  3292  019B                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019C                     	;# 
  3297  019C                     	;# 
  3298  019C                     	;# 
  3299  019D                     	;# 
  3300  019D                     	;# 
  3301  019D                     	;# 
  3302  019E                     	;# 
  3303  019E                     	;# 
  3304  019E                     	;# 
  3305  019F                     	;# 
  3306  019F                     	;# 
  3307  019F                     	;# 
  3308  020D                     	;# 
  3309  020F                     	;# 
  3310  0210                     	;# 
  3311  0211                     	;# 
  3312  0211                     	;# 
  3313  0212                     	;# 
  3314  0212                     	;# 
  3315  0213                     	;# 
  3316  0213                     	;# 
  3317  0214                     	;# 
  3318  0214                     	;# 
  3319  0215                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0216                     	;# 
  3323  0216                     	;# 
  3324  0217                     	;# 
  3325  0217                     	;# 
  3326  0219                     	;# 
  3327  021A                     	;# 
  3328  021B                     	;# 
  3329  021C                     	;# 
  3330  021D                     	;# 
  3331  021E                     	;# 
  3332  021F                     	;# 
  3333  028C                     	;# 
  3334  028D                     	;# 
  3335  0291                     	;# 
  3336  0291                     	;# 
  3337  0292                     	;# 
  3338  0293                     	;# 
  3339  0298                     	;# 
  3340  0298                     	;# 
  3341  0299                     	;# 
  3342  029A                     	;# 
  3343  029D                     	;# 
  3344  029E                     	;# 
  3345  029F                     	;# 
  3346  030C                     	;# 
  3347  030D                     	;# 
  3348  0311                     	;# 
  3349  0311                     	;# 
  3350  0312                     	;# 
  3351  0313                     	;# 
  3352  0318                     	;# 
  3353  0318                     	;# 
  3354  0319                     	;# 
  3355  031A                     	;# 
  3356  031C                     	;# 
  3357  031C                     	;# 
  3358  031D                     	;# 
  3359  031E                     	;# 
  3360  038C                     	;# 
  3361  038D                     	;# 
  3362  0394                     	;# 
  3363  0395                     	;# 
  3364  0396                     	;# 
  3365  040C                     	;# 
  3366  040D                     	;# 
  3367  0411                     	;# 
  3368  0411                     	;# 
  3369  0412                     	;# 
  3370  0413                     	;# 
  3371  0414                     	;# 
  3372  0415                     	;# 
  3373  0416                     	;# 
  3374  0417                     	;# 
  3375  0418                     	;# 
  3376  0418                     	;# 
  3377  0419                     	;# 
  3378  041A                     	;# 
  3379  041B                     	;# 
  3380  041C                     	;# 
  3381  041D                     	;# 
  3382  041E                     	;# 
  3383  048D                     	;# 
  3384  0491                     	;# 
  3385  0491                     	;# 
  3386  0492                     	;# 
  3387  0492                     	;# 
  3388  0493                     	;# 
  3389  0493                     	;# 
  3390  0493                     	;# 
  3391  0494                     	;# 
  3392  0494                     	;# 
  3393  0495                     	;# 
  3394  0495                     	;# 
  3395  0496                     	;# 
  3396  0496                     	;# 
  3397  0497                     	;# 
  3398  0497                     	;# 
  3399  0595                     	;# 
  3400  0596                     	;# 
  3401  0597                     	;# 
  3402  059C                     	;# 
  3403  059D                     	;# 
  3404  059E                     	;# 
  3405  0611                     	;# 
  3406  0611                     	;# 
  3407  0612                     	;# 
  3408  0613                     	;# 
  3409  0614                     	;# 
  3410  0614                     	;# 
  3411  0615                     	;# 
  3412  0616                     	;# 
  3413  0617                     	;# 
  3414  0617                     	;# 
  3415  0618                     	;# 
  3416  0619                     	;# 
  3417  061A                     	;# 
  3418  061A                     	;# 
  3419  061B                     	;# 
  3420  061C                     	;# 
  3421  061D                     	;# 
  3422  061D                     	;# 
  3423  061E                     	;# 
  3424  061F                     	;# 
  3425  0FE4                     	;# 
  3426  0FE5                     	;# 
  3427  0FE6                     	;# 
  3428  0FE7                     	;# 
  3429  0FE8                     	;# 
  3430  0FE9                     	;# 
  3431  0FEA                     	;# 
  3432  0FEB                     	;# 
  3433  0FED                     	;# 
  3434  0FEE                     	;# 
  3435  0FEF                     	;_modArray
  3436                           
  3437                           	psect	idataBANK0
  3438  2E3E                     __pidataBANK0:	
  3439                           
  3440                           ;initializer for _delay_time
  3441  2E3E  34D0               	retlw	208
  3442  2E3F  3407               	retlw	7
  3443  2E40  3400               	retlw	0
  3444  2E41  3400               	retlw	0
  3445                           
  3446                           ;initializer for _bottom_push_state
  3447  2E42  3401               	retlw	1
  3448  2E43  3400               	retlw	0
  3449                           
  3450                           ;initializer for _long_press_limit
  3451  2E44  34E8               	retlw	232
  3452  2E45  3403               	retlw	3
  3453                           
  3454                           ;initializer for _top_push_state
  3455  2E46  3406               	retlw	6
  3456  2E47  3400               	retlw	0
  3457                           
  3458                           ;initializer for _blink_rate
  3459  2E48  3414               	retlw	20
  3460                           
  3461                           ;initializer for _longTap_state
  3462  2E49  34FF               	retlw	255
  3463                           
  3464                           ;initializer for _num_taps
  3465  2E4A  3404               	retlw	4
  3466                           
  3467                           ;initializer for _switchBypass_state
  3468  2E4B  34FF               	retlw	255
  3469                           
  3470                           	psect	idataBANK2
  3471  1002                     __pidataBANK2:	
  3472                           
  3473                           ;initializer for _presetChannel
  3474  1002  3401               	retlw	1
  3475                           
  3476                           	psect	idataBANK3
  3477  2F26                     __pidataBANK3:	
  3478                           
  3479                           ;initializer for _baseline_mod_time
  3480  2F26  34D0               	retlw	208
  3481  2F27  3407               	retlw	7
  3482  2F28  3400               	retlw	0
  3483  2F29  3400               	retlw	0
  3484                           
  3485                           ;initializer for _blink_delay
  3486  2F2A  3464               	retlw	100
  3487  2F2B  3400               	retlw	0
  3488                           
  3489                           ;initializer for _knob1_prev
  3490  2F2C  34D0               	retlw	208
  3491  2F2D  3407               	retlw	7
  3492                           
  3493                           ;initializer for _knob2_prev
  3494  2F2E  34D0               	retlw	208
  3495  2F2F  3407               	retlw	7
  3496                           
  3497                           ;initializer for _knob3_prev
  3498  2F30  34D0               	retlw	208
  3499  2F31  3407               	retlw	7
  3500                           
  3501                           ;initializer for _knob4_prev
  3502  2F32  34D0               	retlw	208
  3503  2F33  3407               	retlw	7
  3504                           
  3505                           ;initializer for _knob5_prev
  3506  2F34  34D0               	retlw	208
  3507  2F35  3407               	retlw	7
  3508                           
  3509                           ;initializer for _mod_counter
  3510  2F36  3401               	retlw	1
  3511  2F37  3400               	retlw	0
  3512                           
  3513                           ;initializer for _mod_delay_time
  3514  2F38  34D0               	retlw	208
  3515  2F39  3407               	retlw	7
  3516                           
  3517                           ;initializer for _symmetry
  3518  2F3A  34B4               	retlw	180
  3519  2F3B  3400               	retlw	0
  3520                           
  3521                           ;initializer for _tap_iteration
  3522  2F3C  3401               	retlw	1
  3523  2F3D  3400               	retlw	0
  3524                           
  3525                           ;initializer for _blink_state
  3526  2F3E  3401               	retlw	1
  3527                           
  3528                           ;initializer for _currentBypassState
  3529  2F3F  34FF               	retlw	255
  3530                           
  3531                           ;initializer for _expSwitchState
  3532  2F40  34FF               	retlw	255
  3533                           
  3534                           ;initializer for _expressModeCnst
  3535  2F41  3402               	retlw	2
  3536                           
  3537                           ;initializer for _expressionChannel
  3538  2F42  3401               	retlw	1
  3539                           
  3540                           ;initializer for _mod_time_changed
  3541  2F43  3401               	retlw	1
  3542                           
  3543                           ;initializer for _presetModeCnst
  3544  2F44  3401               	retlw	1
  3545                           
  3546                           ;initializer for _switchTap_state
  3547  2F45  34FF               	retlw	255
  3548                           
  3549                           	psect	idataBANK4
  3550  0002                     __pidataBANK4:	
  3551                           
  3552                           ;initializer for _switchBypass_up
  3553  0002  3401               	retlw	1
  3554  0003  3400               	retlw	0
  3555                           
  3556                           	psect	stringtext
  3557  2800                     __pstringtext:	
  3558  2800                     exp@coeff:	
  3559  2800  3400               	retlw	0
  3560  2801  3480               	retlw	128
  3561  2802  343F               	retlw	63
  3562  2803  3472               	retlw	114
  3563  2804  3431               	retlw	49
  3564  2805  343F               	retlw	63
  3565  2806  34FE               	retlw	254
  3566  2807  3475               	retlw	117
  3567  2808  343E               	retlw	62
  3568  2809  3458               	retlw	88
  3569  280A  3463               	retlw	99
  3570  280B  343D               	retlw	61
  3571  280C  3495               	retlw	149
  3572  280D  341D               	retlw	29
  3573  280E  343C               	retlw	60
  3574  280F  34C5               	retlw	197
  3575  2810  34AE               	retlw	174
  3576  2811  343A               	retlw	58
  3577  2812  3479               	retlw	121
  3578  2813  3421               	retlw	33
  3579  2814  3439               	retlw	57
  3580  2815  3494               	retlw	148
  3581  2816  3480               	retlw	128
  3582  2817  3437               	retlw	55
  3583  2818  3493               	retlw	147
  3584  2819  34A7               	retlw	167
  3585  281A  3435               	retlw	53
  3586  281B  3456               	retlw	86
  3587  281C  3415               	retlw	21
  3588  281D  3434               	retlw	52
  3589  281E                     __end_ofexp@coeff:	
  3590  281E                     log@coeff:	
  3591  281E  3400               	retlw	0
  3592  281F  3400               	retlw	0
  3593  2820  3400               	retlw	0
  3594  2821  3400               	retlw	0
  3595  2822  3480               	retlw	128
  3596  2823  343F               	retlw	63
  3597  2824  34F0               	retlw	240
  3598  2825  34FF               	retlw	255
  3599  2826  34BE               	retlw	190
  3600  2827  34E2               	retlw	226
  3601  2828  34A9               	retlw	169
  3602  2829  343E               	retlw	62
  3603  282A  3483               	retlw	131
  3604  282B  3476               	retlw	118
  3605  282C  34BE               	retlw	190
  3606  282D  34AE               	retlw	174
  3607  282E  342B               	retlw	43
  3608  282F  343E               	retlw	62
  3609  2830  343C               	retlw	60
  3610  2831  34C3               	retlw	195
  3611  2832  34BD               	retlw	189
  3612  2833  34D2               	retlw	210
  3613  2834  3413               	retlw	19
  3614  2835  343D               	retlw	61
  3615  2836  3478               	retlw	120
  3616  2837  34D3               	retlw	211
  3617  2838  34BB               	retlw	187
  3618  2839                     __end_oflog@coeff:	
  3619  2839                     sin@coeff_a:	
  3620  2839  34F4               	retlw	244
  3621  283A  344A               	retlw	74
  3622  283B  3448               	retlw	72
  3623  283C  3495               	retlw	149
  3624  283D  3495               	retlw	149
  3625  283E  34C7               	retlw	199
  3626  283F  34C1               	retlw	193
  3627  2840  34DC               	retlw	220
  3628  2841  3445               	retlw	69
  3629  2842  34DC               	retlw	220
  3630  2843  346D               	retlw	109
  3631  2844  34C3               	retlw	195
  3632  2845  34B3               	retlw	179
  3633  2846  3433               	retlw	51
  3634  2847  3440               	retlw	64
  3635  2848                     __end_ofsin@coeff_a:	
  3636  2848                     sin@coeff_b:	
  3637  2848  3434               	retlw	52
  3638  2849  3401               	retlw	1
  3639  284A  3448               	retlw	72
  3640  284B  349D               	retlw	157
  3641  284C  34B0               	retlw	176
  3642  284D  3445               	retlw	69
  3643  284E  3400               	retlw	0
  3644  284F  34DA               	retlw	218
  3645  2850  3442               	retlw	66
  3646  2851  3400               	retlw	0
  3647  2852  3480               	retlw	128
  3648  2853  343F               	retlw	63
  3649  2854                     __end_ofsin@coeff_b:	
  3650  000B                     _INTCONbits	set	11
  3651  0011                     _PIR1bits	set	17
  3652  000C                     _PORTAbits	set	12
  3653  000E                     _PORTCbits	set	14
  3654  000F                     _PORTDbits	set	15
  3655  0010                     _PORTEbits	set	16
  3656  001B                     _PR2	set	27
  3657  001C                     _T2CONbits	set	28
  3658  005F                     _GIE	set	95
  3659  005E                     _PEIE	set	94
  3660  0069                     _RB1	set	105
  3661  009D                     _ADCON0bits	set	157
  3662  009E                     _ADCON1bits	set	158
  3663  009C                     _ADRESH	set	156
  3664  009B                     _ADRESL	set	155
  3665  0095                     _OPTION_REGbits	set	149
  3666  0099                     _OSCCONbits	set	153
  3667  008D                     _TRISBbits	set	141
  3668  008E                     _TRISCbits	set	142
  3669  008F                     _TRISDbits	set	143
  3670  0090                     _TRISEbits	set	144
  3671  048D                     _RCIE	set	1165
  3672  011D                     _APFCONbits	set	285
  3673  010D                     _LATBbits	set	269
  3674  010F                     _LATDbits	set	271
  3675  0190                     _ANSELEbits	set	400
  3676  0192                     _PMADRH	set	402
  3677  0191                     _PMADRL	set	401
  3678  0195                     _PMCON1bits	set	405
  3679  0196                     _PMCON2	set	406
  3680  0194                     _PMDATH	set	404
  3681  0193                     _PMDATL	set	403
  3682  0199                     _RCREG	set	409
  3683  019D                     _RCSTAbits	set	413
  3684  019B                     _SPBRG	set	411
  3685  019A                     _TXREG	set	410
  3686  019E                     _TXSTAbits	set	414
  3687  0291                     _CCPR1	set	657
  3688  0298                     _CCPR2	set	664
  3689  0293                     _CCP1CONbits	set	659
  3690  029A                     _CCP2CONbits	set	666
  3691  029D                     _CCPTMRS0	set	669
  3692  029E                     _CCPTMRS1	set	670
  3693  029F                     _CCPTMRS2	set	671
  3694  0311                     _CCPR3	set	785
  3695  0318                     _CCPR4	set	792
  3696  031C                     _CCPR5	set	796
  3697  0313                     _CCP3CONbits	set	787
  3698  031A                     _CCP4CONbits	set	794
  3699  031E                     _CCP5CONbits	set	798
  3700  030C                     _TRISFbits	set	780
  3701  030D                     _TRISGbits	set	781
  3702  038C                     _LATFbits	set	908
  3703  038D                     _LATGbits	set	909
  3704  040C                     _ANSELFbits	set	1036
  3705  061F                     _CCP10CONbits	set	1567
  3706  0613                     _CCP6CONbits	set	1555
  3707  0616                     _CCP7CONbits	set	1558
  3708  0619                     _CCP8CONbits	set	1561
  3709  061C                     _CCP9CONbits	set	1564
  3710                           
  3711                           ; #config settings
  3712  0000                     
  3713                           	psect	cinit
  3714  02E4                     start_initialization:	
  3715  02E4                     __initialization:		;BIGRAM
  3716                           
  3717                           ; Clear objects allocated to BIGRAM
  3718  02E4  308A               	movlw	low (0+9098)
  3719  02E5  0084               	movwf	4
  3720  02E6  3023               	movlw	high (0+9098)
  3721  02E7  0085               	movwf	5
  3722  02E8  3066               	movlw	102
  3723  02E9  00FE               	movwf	btemp
  3724  02EA  3002               	movlw	2
  3725  02EB  00FF               	movwf	btemp+1
  3726  02EC  3187  27F4  3182   	fcall	clear_ram0
  3727                           
  3728                           ; Clear objects allocated to BANK0
  3729  02EF  3040               	movlw	low __pbssBANK0
  3730  02F0  0084               	movwf	4
  3731  02F1  3000               	movlw	high __pbssBANK0
  3732  02F2  0085               	movwf	5
  3733  02F3  3012               	movlw	18
  3734  02F4  00FE               	movwf	btemp
  3735  02F5  3000               	movlw	0
  3736  02F6  00FF               	movwf	btemp+1
  3737  02F7  3187  27F4  3182   	fcall	clear_ram0
  3738                           
  3739                           ; Clear objects allocated to BANK2
  3740  02FA  0022               	movlb	2	; select bank2
  3741  02FB  01EA               	clrf	__pbssBANK2& (0+127)
  3742  02FC  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3743  02FD  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3744  02FE  01ED               	clrf	(__pbssBANK2+3)& (0+127)
  3745  02FF  01EE               	clrf	(__pbssBANK2+4)& (0+127)
  3746                           
  3747                           ; Clear objects allocated to BANK3
  3748  0300  30A0               	movlw	low __pbssBANK3
  3749  0301  0084               	movwf	4
  3750  0302  3001               	movlw	high __pbssBANK3
  3751  0303  0085               	movwf	5
  3752  0304  3027               	movlw	39
  3753  0305  00FE               	movwf	btemp
  3754  0306  3000               	movlw	0
  3755  0307  00FF               	movwf	btemp+1
  3756  0308  3187  27F4  3182   	fcall	clear_ram0
  3757                           
  3758                           ; Clear objects allocated to BANK4
  3759  030B  3020               	movlw	low __pbssBANK4
  3760  030C  0084               	movwf	4
  3761  030D  3002               	movlw	high __pbssBANK4
  3762  030E  0085               	movwf	5
  3763  030F  3035               	movlw	53
  3764  0310  00FE               	movwf	btemp
  3765  0311  3000               	movlw	0
  3766  0312  00FF               	movwf	btemp+1
  3767  0313  3187  27F4  3182   	fcall	clear_ram0
  3768                           
  3769                           ; Clear objects allocated to BANK5
  3770  0316  30A0               	movlw	low __pbssBANK5
  3771  0317  0084               	movwf	4
  3772  0318  3002               	movlw	high __pbssBANK5
  3773  0319  0085               	movwf	5
  3774  031A  302C               	movlw	44
  3775  031B  00FE               	movwf	btemp
  3776  031C  3000               	movlw	0
  3777  031D  00FF               	movwf	btemp+1
  3778  031E  3187  27F4  3182   	fcall	clear_ram0
  3779                           
  3780                           ; Clear objects allocated to BANK6
  3781  0321  3020               	movlw	low __pbssBANK6
  3782  0322  0084               	movwf	4
  3783  0323  3003               	movlw	high __pbssBANK6
  3784  0324  0085               	movwf	5
  3785  0325  3040               	movlw	64
  3786  0326  00FE               	movwf	btemp
  3787  0327  3000               	movlw	0
  3788  0328  00FF               	movwf	btemp+1
  3789  0329  3187  27F4  3182   	fcall	clear_ram0
  3790                           
  3791                           ; Clear objects allocated to BANK7
  3792  032C  30A0               	movlw	low __pbssBANK7
  3793  032D  0084               	movwf	4
  3794  032E  3003               	movlw	high __pbssBANK7
  3795  032F  0085               	movwf	5
  3796  0330  3040               	movlw	64
  3797  0331  00FE               	movwf	btemp
  3798  0332  3000               	movlw	0
  3799  0333  00FF               	movwf	btemp+1
  3800  0334  3187  27F4  3182   	fcall	clear_ram0
  3801                           
  3802                           ; Initialize objects allocated to BANK0
  3803  0337  303E               	movlw	low __pidataBANK0
  3804  0338  0084               	movwf	4
  3805  0339  30AE               	movlw	(high __pidataBANK0)| (0+128)
  3806  033A  0085               	movwf	5
  3807  033B  3052               	movlw	low __pdataBANK0
  3808  033C  0086               	movwf	6
  3809  033D  3000               	movlw	high __pdataBANK0
  3810  033E  0087               	movwf	7
  3811  033F  3000               	movlw	0
  3812  0340  00FF               	movwf	btemp+1
  3813  0341  300E               	movlw	14
  3814  0342  31AE  2632  3182   	fcall	init_ram
  3815                           
  3816                           ; Initialize objects allocated to BANK2
  3817  0345  3190  2002  3182   	fcall	__pidataBANK2	;fetch initializer
  3818  0348  00EF               	movwf	__pdataBANK2& (0+127)
  3819                           
  3820                           ; Initialize objects allocated to BANK3
  3821  0349  3026               	movlw	low __pidataBANK3
  3822  034A  0084               	movwf	4
  3823  034B  30AF               	movlw	(high __pidataBANK3)| (0+128)
  3824  034C  0085               	movwf	5
  3825  034D  30C7               	movlw	low __pdataBANK3
  3826  034E  0086               	movwf	6
  3827  034F  3001               	movlw	high __pdataBANK3
  3828  0350  0087               	movwf	7
  3829  0351  3000               	movlw	0
  3830  0352  00FF               	movwf	btemp+1
  3831  0353  3020               	movlw	32
  3832  0354  31AE  2632  3182   	fcall	init_ram
  3833                           
  3834                           ; Initialize objects allocated to BANK4
  3835  0357  0024               	movlb	4	; select bank4
  3836  0358  3180  2002  3182   	fcall	__pidataBANK4	;fetch initializer
  3837  035B  00E3               	movwf	__pdataBANK4& (0+127)
  3838  035C  3180  2003         	fcall	__pidataBANK4+1	;fetch initializer
  3839  035E  00E4               	movwf	(__pdataBANK4+1)& (0+127)
  3840  035F                     end_of_initialization:	
  3841                           ;End of C runtime variable initialization code
  3842                           
  3843  035F                     __end_of__initialization:	
  3844  035F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3845  0360  0020               	movlb	0
  3846  0361  3183  2B63         	ljmp	_main	;jump to C main() function
  3847                           
  3848                           	psect	bssBANK0
  3849  0040                     __pbssBANK0:	
  3850  0040                     _sub_timer:	
  3851  0040                     	ds	4
  3852  0044                     _tap_timer:	
  3853  0044                     	ds	4
  3854  0048                     _timer:	
  3855  0048                     	ds	4
  3856  004C                     _UQEnd:	
  3857  004C                     	ds	1
  3858  004D                     _UQFront:	
  3859  004D                     	ds	1
  3860  004E                     _doubleTap_state:	
  3861  004E                     	ds	1
  3862  004F                     _longBypass_state:	
  3863  004F                     	ds	1
  3864  0050                     _mode2_state:	
  3865  0050                     	ds	1
  3866  0051                     _presetSaveMode:	
  3867  0051                     	ds	1
  3868                           
  3869                           	psect	dataBANK0
  3870  0052                     __pdataBANK0:	
  3871  0052                     _delay_time:	
  3872  0052                     	ds	4
  3873  0056                     _bottom_push_state:	
  3874  0056                     	ds	2
  3875  0058                     _long_press_limit:	
  3876  0058                     	ds	2
  3877  005A                     _top_push_state:	
  3878  005A                     	ds	2
  3879  005C                     _blink_rate:	
  3880  005C                     	ds	1
  3881  005D                     _longTap_state:	
  3882  005D                     	ds	1
  3883  005E                     _num_taps:	
  3884  005E                     	ds	1
  3885  005F                     _switchBypass_state:	
  3886  005F                     	ds	1
  3887                           
  3888                           	psect	bssBANK2
  3889  016A                     __pbssBANK2:	
  3890  016A                     _longBypass_start:	
  3891  016A                     	ds	1
  3892  016B                     _longTap_start:	
  3893  016B                     	ds	1
  3894  016C                     _preset_blink:	
  3895  016C                     	ds	1
  3896  016D                     _suspend_blink:	
  3897  016D                     	ds	1
  3898  016E                     _switchTap_pressed:	
  3899  016E                     	ds	1
  3900                           
  3901                           	psect	dataBANK2
  3902  016F                     __pdataBANK2:	
  3903  016F                     _presetChannel:	
  3904  016F                     	ds	1
  3905                           
  3906                           	psect	bssBANK3
  3907  01A0                     __pbssBANK3:	
  3908  01A0                     _double_timer:	
  3909  01A0                     	ds	4
  3910  01A4                     _mod_timer:	
  3911  01A4                     	ds	4
  3912  01A8                     _knob_1_pos:	
  3913  01A8                     	ds	2
  3914  01AA                     _knob_2_pos:	
  3915  01AA                     	ds	2
  3916  01AC                     _knob_3_pos:	
  3917  01AC                     	ds	2
  3918  01AE                     _knob_4_pos:	
  3919  01AE                     	ds	2
  3920  01B0                     _knob_5_pos:	
  3921  01B0                     	ds	2
  3922  01B2                     _longBypass_timer:	
  3923  01B2                     	ds	2
  3924  01B4                     _longTap_timer:	
  3925  01B4                     	ds	2
  3926  01B6                     _switchBypass_pressed:	
  3927  01B6                     	ds	2
  3928  01B8                     _tmpModDelay:	
  3929  01B8                     	ds	2
  3930  01BA                     _adjust_mod_delay:	
  3931  01BA                     	ds	1
  3932  01BB                     _bottomTactile_pressed:	
  3933  01BB                     	ds	1
  3934  01BC                     _bypass_turning_on:	
  3935  01BC                     	ds	1
  3936  01BD                     _iCnt:	
  3937  01BD                     	ds	1
  3938  01BE                     _isInitialized:	
  3939  01BE                     	ds	1
  3940  01BF                     _longBypass_down:	
  3941  01BF                     	ds	1
  3942  01C0                     _longBypass_save:	
  3943  01C0                     	ds	1
  3944  01C1                     _mode1_state:	
  3945  01C1                     	ds	1
  3946  01C2                     _modulation_changed:	
  3947  01C2                     	ds	1
  3948  01C3                     _preset_programmning_on:	
  3949  01C3                     	ds	1
  3950  01C4                     _reset_sub_delay:	
  3951  01C4                     	ds	1
  3952  01C5                     _switchTap_down:	
  3953  01C5                     	ds	1
  3954  01C6                     _topTactile_pressed:	
  3955  01C6                     	ds	1
  3956                           
  3957                           	psect	dataBANK3
  3958  01C7                     __pdataBANK3:	
  3959  01C7                     _baseline_mod_time:	
  3960  01C7                     	ds	4
  3961  01CB                     _blink_delay:	
  3962  01CB                     	ds	2
  3963  01CD                     _knob1_prev:	
  3964  01CD                     	ds	2
  3965  01CF                     _knob2_prev:	
  3966  01CF                     	ds	2
  3967  01D1                     _knob3_prev:	
  3968  01D1                     	ds	2
  3969  01D3                     _knob4_prev:	
  3970  01D3                     	ds	2
  3971  01D5                     _knob5_prev:	
  3972  01D5                     	ds	2
  3973  01D7                     _mod_counter:	
  3974  01D7                     	ds	2
  3975  01D9                     _mod_delay_time:	
  3976  01D9                     	ds	2
  3977  01DB                     _symmetry:	
  3978  01DB                     	ds	2
  3979  01DD                     _tap_iteration:	
  3980  01DD                     	ds	2
  3981  01DF                     _blink_state:	
  3982  01DF                     	ds	1
  3983  01E0                     _currentBypassState:	
  3984  01E0                     	ds	1
  3985  01E1                     _expSwitchState:	
  3986  01E1                     	ds	1
  3987  01E2                     _expressModeCnst:	
  3988  01E2                     	ds	1
  3989  01E3                     _expressionChannel:	
  3990  01E3                     	ds	1
  3991  01E4                     _mod_time_changed:	
  3992  01E4                     	ds	1
  3993  01E5                     _presetModeCnst:	
  3994  01E5                     	ds	1
  3995  01E6                     _switchTap_state:	
  3996  01E6                     	ds	1
  3997                           
  3998                           	psect	bssBANK4
  3999  0220                     __pbssBANK4:	
  4000  0220                     _tap_history:	
  4001  0220                     	ds	20
  4002  0234                     USARTWriteInt@F3536:	
  4003  0234                     	ds	5
  4004  0239                     _ledState:	
  4005  0239                     	ds	4
  4006  023D                     _tap_total:	
  4007  023D                     	ds	4
  4008  0241                     _adjusted_pot_value:	
  4009  0241                     	ds	2
  4010  0243                     _debounce_bypass:	
  4011  0243                     	ds	2
  4012  0245                     _debounce_count:	
  4013  0245                     	ds	2
  4014  0247                     _debounce_mode1:	
  4015  0247                     	ds	2
  4016  0249                     _debounce_mode2:	
  4017  0249                     	ds	2
  4018  024B                     _delayfound:	
  4019  024B                     	ds	2
  4020  024D                     _errno:	
  4021  024D                     	ds	2
  4022  024F                     _mod_value:	
  4023  024F                     	ds	2
  4024  0251                     _switchBypass_toggle:	
  4025  0251                     	ds	2
  4026  0253                     _tmpVal:	
  4027  0253                     	ds	2
  4028                           
  4029                           	psect	dataBANK4
  4030  0263                     __pdataBANK4:	
  4031  0263                     _switchBypass_up:	
  4032  0263                     	ds	2
  4033                           
  4034                           	psect	bssBANK5
  4035  02A0                     __pbssBANK5:	
  4036  02A0                     _tap:	
  4037  02A0                     	ds	44
  4038                           
  4039                           	psect	bssBANK6
  4040  0320                     __pbssBANK6:	
  4041  0320                     _URBuff:	
  4042  0320                     	ds	64
  4043                           
  4044                           	psect	bssBANK7
  4045  03A0                     __pbssBANK7:	
  4046  03A0                     _myBuf:	
  4047  03A0                     	ds	64
  4048                           
  4049                           	psect	clrtext
  4050  07F4                     clear_ram0:	
  4051                           ;	Called with FSR0 containing the base address, and
  4052                           ;	btemp/btemp+1 has the size to clear
  4053                           
  4054  07F4  0064               	clrwdt	;clear the watchdog before getting into this loop
  4055  07F5                     clrloop0:	
  4056  07F5  0180               	clrf	0	;clear RAM location pointed to by FSR
  4057  07F6  3101               	addfsr 0,1
  4058  07F7  3001               	movlw	1
  4059  07F8  02FE               	subwf	126,f
  4060  07F9  3000               	movlw	0
  4061  07FA  3BFF               	subwfb	127,f
  4062  07FB  087F               	movf	127,w
  4063  07FC  047E               	iorwf	126,w
  4064  07FD  1903               	btfsc	3,2
  4065  07FE  3400               	retlw	0	;all done for this memory range, return
  4066  07FF  2FF5               	goto	clrloop0	;have we reached the end yet?
  4067                           
  4068                           	psect	inittext
  4069  2E32                     init_ram:	
  4070  2E32  00FE               	movwf	126
  4071  2E33                     initloop:	
  4072  2E33  0012               	moviw fsr0++
  4073  2E34  001E               	movwi fsr1++
  4074  2E35  3001               	movlw	1
  4075  2E36  02FE               	subwf	126,f
  4076  2E37  3000               	movlw	0
  4077  2E38  3BFF               	subwfb	127,f
  4078  2E39  087F               	movf	127,w
  4079  2E3A  047E               	iorwf	126,w
  4080  2E3B  1903               	btfsc	3,2
  4081  2E3C  3400               	retlw	0
  4082  2E3D  2E33               	goto	initloop
  4083                           
  4084                           	psect	cstackBANK4
  4085  0255                     __pcstackBANK4:	
  4086  0255                     ??_main:	
  4087                           
  4088                           ; 1 bytes @ 0x0
  4089  0255                     	ds	5
  4090  025A                     _main$2833:	
  4091                           
  4092                           ; 3 bytes @ 0x5
  4093  025A                     	ds	3
  4094  025D                     _main$2834:	
  4095                           
  4096                           ; 3 bytes @ 0x8
  4097  025D                     	ds	3
  4098  0260                     _main$2835:	
  4099                           
  4100                           ; 3 bytes @ 0xB
  4101  0260                     	ds	3
  4102                           
  4103                           	psect	cstackBANK3
  4104  01E7                     __pcstackBANK3:	
  4105  01E7                     scaleA100kPot@pwm:	
  4106  01E7                     scaleA10kPot@pwm:	
  4107                           ; 3 bytes @ 0x0
  4108                           
  4109  01E7                     scaleiA10kPot@pwm:	
  4110                           ; 3 bytes @ 0x0
  4111                           
  4112                           
  4113                           ; 3 bytes @ 0x0
  4114  01E7                     	ds	3
  4115  01EA                     _scaleA100kPot$2838:	
  4116  01EA                     _scaleA10kPot$2842:	
  4117                           ; 3 bytes @ 0x3
  4118                           
  4119  01EA                     _scaleiA10kPot$2844:	
  4120                           ; 3 bytes @ 0x3
  4121                           
  4122                           
  4123                           ; 3 bytes @ 0x3
  4124  01EA                     	ds	3
  4125  01ED                     _scaleA100kPot$2839:	
  4126  01ED                     _scaleA10kPot$2843:	
  4127                           ; 3 bytes @ 0x6
  4128                           
  4129  01ED                     _scaleiA10kPot$2845:	
  4130                           ; 3 bytes @ 0x6
  4131                           
  4132                           
  4133                           ; 3 bytes @ 0x6
  4134  01ED                     	ds	3
  4135                           
  4136                           	psect	cstackBANK2
  4137  0120                     __pcstackBANK2:	
  4138  0120                     ?___fttol:	
  4139  0120                     ___fttol@f1:	
  4140                           ; 4 bytes @ 0x0
  4141                           
  4142                           
  4143                           ; 3 bytes @ 0x0
  4144  0120                     	ds	4
  4145  0124                     ??___fttol:	
  4146                           
  4147                           ; 1 bytes @ 0x4
  4148  0124                     	ds	4
  4149  0128                     ___fttol@sign1:	
  4150                           
  4151                           ; 1 bytes @ 0x8
  4152  0128                     	ds	1
  4153  0129                     ___fttol@lval:	
  4154                           
  4155                           ; 4 bytes @ 0x9
  4156  0129                     	ds	4
  4157  012D                     ___fttol@exp1:	
  4158                           
  4159                           ; 1 bytes @ 0xD
  4160  012D                     	ds	1
  4161  012E                     ?_set_subdivision:	
  4162  012E                     ?_modTri:	
  4163                           ; 2 bytes @ 0xE
  4164                           
  4165  012E                     ?_modSaw:	
  4166                           ; 2 bytes @ 0xE
  4167                           
  4168  012E                     ?___wmul:	
  4169                           ; 2 bytes @ 0xE
  4170                           
  4171  012E                     ?_floor:	
  4172                           ; 2 bytes @ 0xE
  4173                           
  4174  012E                     set_subdivision@x:	
  4175                           ; 3 bytes @ 0xE
  4176                           
  4177  012E                     getModulationDelayTime@subDiv:	
  4178                           ; 2 bytes @ 0xE
  4179                           
  4180  012E                     ___wmul@multiplier:	
  4181                           ; 2 bytes @ 0xE
  4182                           
  4183  012E                     modTri@angle:	
  4184                           ; 2 bytes @ 0xE
  4185                           
  4186  012E                     modSaw@angle:	
  4187                           ; 3 bytes @ 0xE
  4188                           
  4189  012E                     floor@x:	
  4190                           ; 3 bytes @ 0xE
  4191                           
  4192                           
  4193                           ; 3 bytes @ 0xE
  4194  012E                     	ds	2
  4195  0130                     set_subdivision@y:	
  4196  0130                     ___wmul@multiplicand:	
  4197                           ; 2 bytes @ 0x10
  4198                           
  4199                           
  4200                           ; 2 bytes @ 0x10
  4201  0130                     	ds	1
  4202  0131                     ??_floor:	
  4203  0131                     modTri@inflection:	
  4204                           ; 1 bytes @ 0x11
  4205                           
  4206  0131                     modSaw@inflection:	
  4207                           ; 3 bytes @ 0x11
  4208                           
  4209                           
  4210                           ; 3 bytes @ 0x11
  4211  0131                     	ds	1
  4212  0132                     ___wmul@product:	
  4213  0132                     set_subdivision@scalar:	
  4214                           ; 2 bytes @ 0x12
  4215                           
  4216  0132                     floor@i:	
  4217                           ; 3 bytes @ 0x12
  4218                           
  4219                           
  4220                           ; 3 bytes @ 0x12
  4221  0132                     	ds	2
  4222  0134                     ?_modSin:	
  4223  0134                     ?_eval_poly:	
  4224                           ; 2 bytes @ 0x14
  4225                           
  4226  0134                     modSin@angle:	
  4227                           ; 3 bytes @ 0x14
  4228                           
  4229  0134                     eval_poly@x:	
  4230                           ; 3 bytes @ 0x14
  4231                           
  4232  0134                     _modTri$2847:	
  4233                           ; 3 bytes @ 0x14
  4234                           
  4235  0134                     _modSaw$2848:	
  4236                           ; 3 bytes @ 0x14
  4237                           
  4238                           
  4239                           ; 3 bytes @ 0x14
  4240  0134                     	ds	1
  4241  0135                     set_subdivision@tmpX:	
  4242  0135                     floor@expon:	
  4243                           ; 2 bytes @ 0x15
  4244                           
  4245                           
  4246                           ; 2 bytes @ 0x15
  4247  0135                     	ds	2
  4248  0137                     ?___ftsub:	
  4249  0137                     eval_poly@d:	
  4250                           ; 3 bytes @ 0x17
  4251                           
  4252  0137                     modSin@inflection:	
  4253                           ; 2 bytes @ 0x17
  4254                           
  4255  0137                     modTri@shift:	
  4256                           ; 3 bytes @ 0x17
  4257                           
  4258  0137                     ___ftsub@f2:	
  4259                           ; 3 bytes @ 0x17
  4260                           
  4261  0137                     _modSaw$2849:	
  4262                           ; 3 bytes @ 0x17
  4263                           
  4264                           
  4265                           ; 3 bytes @ 0x17
  4266  0137                     	ds	2
  4267  0139                     eval_poly@n:	
  4268                           
  4269                           ; 2 bytes @ 0x19
  4270  0139                     	ds	1
  4271  013A                     ??_modSin:	
  4272  013A                     modTri@period:	
  4273                           ; 1 bytes @ 0x1A
  4274                           
  4275  013A                     ___ftsub@f1:	
  4276                           ; 3 bytes @ 0x1A
  4277                           
  4278  013A                     _modSaw$2850:	
  4279                           ; 3 bytes @ 0x1A
  4280                           
  4281                           
  4282                           ; 3 bytes @ 0x1A
  4283  013A                     	ds	1
  4284  013B                     eval_poly@res:	
  4285                           
  4286                           ; 3 bytes @ 0x1B
  4287  013B                     	ds	1
  4288  013C                     _modSin$2846:	
  4289                           
  4290                           ; 3 bytes @ 0x1C
  4291  013C                     	ds	1
  4292  013D                     modSaw@mod:	
  4293  013D                     modTri@tmpVal:	
  4294                           ; 2 bytes @ 0x1D
  4295                           
  4296                           
  4297                           ; 3 bytes @ 0x1D
  4298  013D                     	ds	1
  4299  013E                     ?_sin:	
  4300  013E                     ?_log:	
  4301                           ; 3 bytes @ 0x1E
  4302                           
  4303  013E                     ?_ldexp:	
  4304                           ; 3 bytes @ 0x1E
  4305                           
  4306  013E                     sin@f:	
  4307                           ; 3 bytes @ 0x1E
  4308                           
  4309  013E                     ldexp@value:	
  4310                           ; 3 bytes @ 0x1E
  4311                           
  4312  013E                     log@x:	
  4313                           ; 3 bytes @ 0x1E
  4314                           
  4315                           
  4316                           ; 3 bytes @ 0x1E
  4317  013E                     	ds	1
  4318  013F                     modSin@shift:	
  4319  013F                     modSaw@shift:	
  4320                           ; 3 bytes @ 0x1F
  4321                           
  4322                           
  4323                           ; 3 bytes @ 0x1F
  4324  013F                     	ds	2
  4325  0141                     ??_sin:	
  4326  0141                     ??_log:	
  4327                           ; 1 bytes @ 0x21
  4328                           
  4329  0141                     ldexp@newexp:	
  4330                           ; 1 bytes @ 0x21
  4331                           
  4332                           
  4333                           ; 2 bytes @ 0x21
  4334  0141                     	ds	1
  4335  0142                     log@exponent:	
  4336  0142                     modSin@period:	
  4337                           ; 2 bytes @ 0x22
  4338                           
  4339  0142                     modSaw@period:	
  4340                           ; 3 bytes @ 0x22
  4341                           
  4342  0142                     sin@y:	
  4343                           ; 3 bytes @ 0x22
  4344                           
  4345                           
  4346                           ; 3 bytes @ 0x22
  4347  0142                     	ds	1
  4348  0143                     ??_ldexp:	
  4349                           
  4350                           ; 1 bytes @ 0x23
  4351  0143                     	ds	2
  4352  0145                     ?_modSawRev:	
  4353  0145                     modSin@tmpVal:	
  4354                           ; 2 bytes @ 0x25
  4355                           
  4356  0145                     modSawRev@angle:	
  4357                           ; 3 bytes @ 0x25
  4358                           
  4359  0145                     _ldexp$2642:	
  4360                           ; 3 bytes @ 0x25
  4361                           
  4362  0145                     _sin$2853:	
  4363                           ; 3 bytes @ 0x25
  4364                           
  4365                           
  4366                           ; 3 bytes @ 0x25
  4367  0145                     	ds	3
  4368  0148                     ?_modSquare:	
  4369  0148                     ?_exp:	
  4370                           ; 2 bytes @ 0x28
  4371                           
  4372  0148                     modSawRev@inflection:	
  4373                           ; 3 bytes @ 0x28
  4374                           
  4375  0148                     modSquare@angle:	
  4376                           ; 3 bytes @ 0x28
  4377                           
  4378  0148                     sin@x2:	
  4379                           ; 3 bytes @ 0x28
  4380                           
  4381  0148                     exp@x:	
  4382                           ; 3 bytes @ 0x28
  4383                           
  4384                           
  4385                           ; 3 bytes @ 0x28
  4386  0148                     	ds	3
  4387  014B                     ??_modSawRev:	
  4388  014B                     ??_exp:	
  4389                           ; 1 bytes @ 0x2B
  4390                           
  4391  014B                     sin@sgn:	
  4392                           ; 1 bytes @ 0x2B
  4393                           
  4394  014B                     modSquare@inflection:	
  4395                           ; 1 bytes @ 0x2B
  4396                           
  4397                           
  4398                           ; 3 bytes @ 0x2B
  4399  014B                     	ds	1
  4400  014C                     ??_calcSinArray:	
  4401  014C                     _exp$2854:	
  4402                           ; 1 bytes @ 0x2C
  4403                           
  4404                           
  4405                           ; 3 bytes @ 0x2C
  4406  014C                     	ds	2
  4407  014E                     modSquare@tmpVal:	
  4408                           
  4409                           ; 2 bytes @ 0x2E
  4410  014E                     	ds	1
  4411  014F                     _exp$2605:	
  4412                           
  4413                           ; 3 bytes @ 0x2F
  4414  014F                     	ds	1
  4415  0150                     ??_updateModulationArray:	
  4416  0150                     calcSinArray@tmpVal:	
  4417                           ; 1 bytes @ 0x30
  4418                           
  4419                           
  4420                           ; 3 bytes @ 0x30
  4421  0150                     	ds	2
  4422  0152                     exp@exponent:	
  4423                           
  4424                           ; 2 bytes @ 0x32
  4425  0152                     	ds	1
  4426  0153                     calcSinArray@iAngle:	
  4427                           
  4428                           ; 1 bytes @ 0x33
  4429  0153                     	ds	1
  4430  0154                     exp@sign:	
  4431  0154                     updateModulationArray@angleFactor:	
  4432                           ; 1 bytes @ 0x34
  4433                           
  4434                           
  4435                           ; 2 bytes @ 0x34
  4436  0154                     	ds	1
  4437  0155                     ?_pow:	
  4438  0155                     pow@x:	
  4439                           ; 3 bytes @ 0x35
  4440                           
  4441                           
  4442                           ; 3 bytes @ 0x35
  4443  0155                     	ds	1
  4444  0156                     updateModulationArray@subDiv:	
  4445                           
  4446                           ; 2 bytes @ 0x36
  4447  0156                     	ds	2
  4448  0158                     updateModulationArray@thisAngle:	
  4449  0158                     pow@y:	
  4450                           ; 2 bytes @ 0x38
  4451                           
  4452                           
  4453                           ; 3 bytes @ 0x38
  4454  0158                     	ds	2
  4455  015A                     updateModulationArray@iAngle:	
  4456                           
  4457                           ; 1 bytes @ 0x3A
  4458  015A                     	ds	1
  4459  015B                     ??_pow:	
  4460                           
  4461                           ; 1 bytes @ 0x3B
  4462  015B                     	ds	1
  4463  015C                     _pow$2851:	
  4464                           
  4465                           ; 3 bytes @ 0x3C
  4466  015C                     	ds	3
  4467  015F                     _pow$2852:	
  4468                           
  4469                           ; 3 bytes @ 0x3F
  4470  015F                     	ds	3
  4471  0162                     pow@sign:	
  4472                           
  4473                           ; 1 bytes @ 0x42
  4474  0162                     	ds	1
  4475  0163                     pow@yi:	
  4476                           
  4477                           ; 4 bytes @ 0x43
  4478  0163                     	ds	4
  4479  0167                     ?_scaleA10kPot:	
  4480  0167                     ?_scaleiA10kPot:	
  4481                           ; 2 bytes @ 0x47
  4482                           
  4483  0167                     ?_scaleA100kPot:	
  4484                           ; 2 bytes @ 0x47
  4485                           
  4486  0167                     scaleA100kPot@input:	
  4487                           ; 2 bytes @ 0x47
  4488                           
  4489  0167                     scaleA10kPot@input:	
  4490                           ; 3 bytes @ 0x47
  4491                           
  4492  0167                     scaleiA10kPot@input:	
  4493                           ; 3 bytes @ 0x47
  4494                           
  4495                           
  4496                           ; 3 bytes @ 0x47
  4497  0167                     	ds	3
  4498                           
  4499                           	psect	cstackBANK1
  4500  00A0                     __pcstackBANK1:	
  4501  00A0                     ?___ftge:	
  4502  00A0                     ?_set_leds_top:	
  4503                           ; 1 bit 
  4504                           
  4505  00A0                     ?_USARTInit:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  00A0                     ??_ConfigureOscillator:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  00A0                     ??_InitApp:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  00A0                     ??_InitializeTaps:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  00A0                     ??_init_adc:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  00A0                     ??_init_pwm:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  00A0                     ??_init_timer2:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  00A0                     ??_init_timer0:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  00A0                     ?_set_leds_bottom:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  00A0                     ?_setLongBypassState:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  00A0                     ?_setLongTapState:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  00A0                     ?_updateSwitchBypassState:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  00A0                     ?_getModulationSubdivision:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  00A0                     ?_adc_convert:	
  4545                           ; 2 bytes @ 0x0
  4546                           
  4547  00A0                     ?_FLASH_ReadWord:	
  4548                           ; 2 bytes @ 0x0
  4549                           
  4550  00A0                     ?_getSwitchBypassState:	
  4551                           ; 2 bytes @ 0x0
  4552                           
  4553  00A0                     ?___awdiv:	
  4554                           ; 2 bytes @ 0x0
  4555                           
  4556  00A0                     ?___ftpack:	
  4557                           ; 2 bytes @ 0x0
  4558                           
  4559  00A0                     ?_frexp:	
  4560                           ; 3 bytes @ 0x0
  4561                           
  4562  00A0                     ?___lmul:	
  4563                           ; 3 bytes @ 0x0
  4564                           
  4565  00A0                     ?___aldiv:	
  4566                           ; 4 bytes @ 0x0
  4567                           
  4568  00A0                     FLASH_ReadWord@flashAddr:	
  4569                           ; 4 bytes @ 0x0
  4570                           
  4571  00A0                     set_leds_top@x:	
  4572                           ; 2 bytes @ 0x0
  4573                           
  4574  00A0                     set_leds_bottom@x:	
  4575                           ; 2 bytes @ 0x0
  4576                           
  4577  00A0                     updateSwitchBypassState@state:	
  4578                           ; 2 bytes @ 0x0
  4579                           
  4580  00A0                     setLongBypassState@f_state:	
  4581                           ; 2 bytes @ 0x0
  4582                           
  4583  00A0                     setLongTapState@f_state:	
  4584                           ; 2 bytes @ 0x0
  4585                           
  4586  00A0                     USARTInit@baud_rate:	
  4587                           ; 2 bytes @ 0x0
  4588                           
  4589  00A0                     ___awdiv@divisor:	
  4590                           ; 2 bytes @ 0x0
  4591                           
  4592  00A0                     ___ftpack@arg:	
  4593                           ; 2 bytes @ 0x0
  4594                           
  4595  00A0                     ___ftge@ff1:	
  4596                           ; 3 bytes @ 0x0
  4597                           
  4598  00A0                     frexp@value:	
  4599                           ; 3 bytes @ 0x0
  4600                           
  4601  00A0                     ___lmul@multiplier:	
  4602                           ; 3 bytes @ 0x0
  4603                           
  4604  00A0                     ___aldiv@divisor:	
  4605                           ; 4 bytes @ 0x0
  4606                           
  4607                           
  4608                           ; 4 bytes @ 0x0
  4609  00A0                     	ds	1
  4610  00A1                     InitializeTaps@itap:	
  4611                           
  4612                           ; 2 bytes @ 0x1
  4613  00A1                     	ds	1
  4614  00A2                     ??_getModulationSubdivision:	
  4615  00A2                     ??_USARTInit:	
  4616                           ; 1 bytes @ 0x2
  4617                           
  4618  00A2                     ??_adc_convert:	
  4619                           ; 1 bytes @ 0x2
  4620                           
  4621  00A2                     ??_FLASH_ReadWord:	
  4622                           ; 1 bytes @ 0x2
  4623                           
  4624  00A2                     ??_set_leds_bottom:	
  4625                           ; 1 bytes @ 0x2
  4626                           
  4627  00A2                     ??_setLongBypassState:	
  4628                           ; 1 bytes @ 0x2
  4629                           
  4630  00A2                     ??_setLongTapState:	
  4631                           ; 1 bytes @ 0x2
  4632                           
  4633  00A2                     ??_updateSwitchBypassState:	
  4634                           ; 1 bytes @ 0x2
  4635                           
  4636  00A2                     ??_getSwitchBypassState:	
  4637                           ; 1 bytes @ 0x2
  4638                           
  4639  00A2                     FLASH_ReadWord@GIEBitValue:	
  4640                           ; 1 bytes @ 0x2
  4641                           
  4642  00A2                     set_leds_top@ledState:	
  4643                           ; 1 bytes @ 0x2
  4644                           
  4645  00A2                     ___awdiv@dividend:	
  4646                           ; 2 bytes @ 0x2
  4647                           
  4648                           
  4649                           ; 2 bytes @ 0x2
  4650  00A2                     	ds	1
  4651  00A3                     adc_convert@channel:	
  4652  00A3                     ___ftpack@exp:	
  4653                           ; 1 bytes @ 0x3
  4654                           
  4655  00A3                     frexp@eptr:	
  4656                           ; 1 bytes @ 0x3
  4657                           
  4658  00A3                     ___ftge@ff2:	
  4659                           ; 1 bytes @ 0x3
  4660                           
  4661                           
  4662                           ; 3 bytes @ 0x3
  4663  00A3                     	ds	1
  4664  00A4                     ??_set_leds_top:	
  4665  00A4                     ??_ReadSavedSettings:	
  4666                           ; 1 bytes @ 0x4
  4667                           
  4668  00A4                     ??_resetRingLEDs:	
  4669                           ; 1 bytes @ 0x4
  4670                           
  4671  00A4                     ??_setPresetDisplay:	
  4672                           ; 1 bytes @ 0x4
  4673                           
  4674  00A4                     ??_setExpressionDisplay:	
  4675                           ; 1 bytes @ 0x4
  4676                           
  4677  00A4                     ??_frexp:	
  4678                           ; 1 bytes @ 0x4
  4679                           
  4680  00A4                     ??___awdiv:	
  4681                           ; 1 bytes @ 0x4
  4682                           
  4683  00A4                     ___ftpack@sign:	
  4684                           ; 1 bytes @ 0x4
  4685                           
  4686  00A4                     ___lmul@multiplicand:	
  4687                           ; 1 bytes @ 0x4
  4688                           
  4689  00A4                     ___aldiv@dividend:	
  4690                           ; 4 bytes @ 0x4
  4691                           
  4692                           
  4693                           ; 4 bytes @ 0x4
  4694  00A4                     	ds	1
  4695  00A5                     ??___ftpack:	
  4696  00A5                     ___awdiv@counter:	
  4697                           ; 1 bytes @ 0x5
  4698                           
  4699                           
  4700                           ; 1 bytes @ 0x5
  4701  00A5                     	ds	1
  4702  00A6                     ??___ftge:	
  4703  00A6                     setPresetDisplay@ledChannel:	
  4704                           ; 1 bytes @ 0x6
  4705                           
  4706  00A6                     setExpressionDisplay@ledChannel:	
  4707                           ; 1 bytes @ 0x6
  4708                           
  4709  00A6                     ___awdiv@sign:	
  4710                           ; 1 bytes @ 0x6
  4711                           
  4712                           
  4713                           ; 1 bytes @ 0x6
  4714  00A6                     	ds	1
  4715  00A7                     ??_update_mode:	
  4716  00A7                     ??_update_selectMode:	
  4717                           ; 1 bytes @ 0x7
  4718                           
  4719  00A7                     ??_setPedalMode:	
  4720                           ; 1 bytes @ 0x7
  4721                           
  4722  00A7                     ___awdiv@quotient:	
  4723                           ; 1 bytes @ 0x7
  4724                           
  4725                           
  4726                           ; 2 bytes @ 0x7
  4727  00A7                     	ds	1
  4728  00A8                     ??___lmul:	
  4729  00A8                     ??___aldiv:	
  4730                           ; 1 bytes @ 0x8
  4731                           
  4732  00A8                     ?___altoft:	
  4733                           ; 1 bytes @ 0x8
  4734                           
  4735  00A8                     ?___awtoft:	
  4736                           ; 3 bytes @ 0x8
  4737                           
  4738  00A8                     ?___lltoft:	
  4739                           ; 3 bytes @ 0x8
  4740                           
  4741  00A8                     ___awtoft@c:	
  4742                           ; 3 bytes @ 0x8
  4743                           
  4744  00A8                     ___lmul@product:	
  4745                           ; 2 bytes @ 0x8
  4746                           
  4747  00A8                     ___altoft@c:	
  4748                           ; 4 bytes @ 0x8
  4749                           
  4750  00A8                     ___lltoft@c:	
  4751                           ; 4 bytes @ 0x8
  4752                           
  4753                           
  4754                           ; 4 bytes @ 0x8
  4755  00A8                     	ds	1
  4756  00A9                     ___aldiv@counter:	
  4757                           
  4758                           ; 1 bytes @ 0x9
  4759  00A9                     	ds	1
  4760  00AA                     ___aldiv@sign:	
  4761                           
  4762                           ; 1 bytes @ 0xA
  4763  00AA                     	ds	1
  4764  00AB                     ??___awtoft:	
  4765  00AB                     ___aldiv@quotient:	
  4766                           ; 1 bytes @ 0xB
  4767                           
  4768                           
  4769                           ; 4 bytes @ 0xB
  4770  00AB                     	ds	1
  4771  00AC                     ?_wait_ms:	
  4772  00AC                     ??___altoft:	
  4773                           ; 1 bytes @ 0xC
  4774                           
  4775  00AC                     ??___lltoft:	
  4776                           ; 1 bytes @ 0xC
  4777                           
  4778  00AC                     wait_ms@timeSec:	
  4779                           ; 1 bytes @ 0xC
  4780                           
  4781                           
  4782                           ; 2 bytes @ 0xC
  4783  00AC                     	ds	1
  4784  00AD                     ___awtoft@sign:	
  4785  00AD                     ___lltoft@exp:	
  4786                           ; 1 bytes @ 0xD
  4787                           
  4788                           
  4789                           ; 1 bytes @ 0xD
  4790  00AD                     	ds	1
  4791  00AE                     ??_wait_ms:	
  4792  00AE                     ?___ftmul:	
  4793                           ; 1 bytes @ 0xE
  4794                           
  4795  00AE                     ___altoft@exp:	
  4796                           ; 3 bytes @ 0xE
  4797                           
  4798  00AE                     ___ftmul@f1:	
  4799                           ; 1 bytes @ 0xE
  4800                           
  4801  00AE                     wait_ms@timemsl:	
  4802                           ; 3 bytes @ 0xE
  4803                           
  4804                           
  4805                           ; 4 bytes @ 0xE
  4806  00AE                     	ds	1
  4807  00AF                     ___altoft@sign:	
  4808                           
  4809                           ; 1 bytes @ 0xF
  4810  00AF                     	ds	2
  4811  00B1                     ___ftmul@f2:	
  4812                           
  4813                           ; 3 bytes @ 0x11
  4814  00B1                     	ds	1
  4815  00B2                     ??_read_bottom_tactile:	
  4816  00B2                     ??_read_top_tactile:	
  4817                           ; 1 bytes @ 0x12
  4818                           
  4819  00B2                     ??_solidring_tactiles:	
  4820                           ; 1 bytes @ 0x12
  4821                           
  4822  00B2                     ??_ring_tactiles:	
  4823                           ; 1 bytes @ 0x12
  4824                           
  4825  00B2                     ?_setSwitchBypassRelays:	
  4826                           ; 1 bytes @ 0x12
  4827                           
  4828  00B2                     setSwitchBypassRelays@f_state:	
  4829                           ; 1 bytes @ 0x12
  4830                           
  4831                           
  4832                           ; 2 bytes @ 0x12
  4833  00B2                     	ds	1
  4834  00B3                     ring_tactiles@iLed:	
  4835                           
  4836                           ; 2 bytes @ 0x13
  4837  00B3                     	ds	1
  4838  00B4                     ??_setSwitchBypassRelays:	
  4839  00B4                     ??___ftmul:	
  4840                           ; 1 bytes @ 0x14
  4841                           
  4842  00B4                     solidring_tactiles@ring_delay:	
  4843                           ; 1 bytes @ 0x14
  4844                           
  4845                           
  4846                           ; 1 bytes @ 0x14
  4847  00B4                     	ds	1
  4848  00B5                     ring_tactiles@iLed_1532:	
  4849                           
  4850                           ; 2 bytes @ 0x15
  4851  00B5                     	ds	1
  4852  00B6                     ?_setSwitchBypassState:	
  4853  00B6                     setSwitchBypassState@f_state:	
  4854                           ; 1 bytes @ 0x16
  4855                           
  4856                           
  4857                           ; 2 bytes @ 0x16
  4858  00B6                     	ds	1
  4859  00B7                     ??_showSave:	
  4860                           
  4861                           ; 1 bytes @ 0x17
  4862  00B7                     	ds	1
  4863  00B8                     ??_setSwitchBypassState:	
  4864  00B8                     ?_setDoublePressState:	
  4865                           ; 1 bytes @ 0x18
  4866                           
  4867  00B8                     ___ftmul@exp:	
  4868                           ; 1 bytes @ 0x18
  4869                           
  4870  00B8                     setDoublePressState@f_state:	
  4871                           ; 1 bytes @ 0x18
  4872                           
  4873                           
  4874                           ; 2 bytes @ 0x18
  4875  00B8                     	ds	1
  4876  00B9                     ___ftmul@f3_as_product:	
  4877                           
  4878                           ; 3 bytes @ 0x19
  4879  00B9                     	ds	1
  4880  00BA                     ??_initSwitchBypass:	
  4881  00BA                     ??_setDoublePressState:	
  4882                           ; 1 bytes @ 0x1A
  4883                           
  4884  00BA                     initSwitchBypass@initState:	
  4885                           ; 1 bytes @ 0x1A
  4886                           
  4887                           
  4888                           ; 2 bytes @ 0x1A
  4889  00BA                     	ds	2
  4890  00BC                     ??_updateSwitchBypass:	
  4891  00BC                     ??_updateSwitchTap:	
  4892                           ; 1 bytes @ 0x1C
  4893                           
  4894  00BC                     ___ftmul@cntr:	
  4895                           ; 1 bytes @ 0x1C
  4896                           
  4897                           
  4898                           ; 1 bytes @ 0x1C
  4899  00BC                     	ds	1
  4900  00BD                     ___ftmul@sign:	
  4901                           
  4902                           ; 1 bytes @ 0x1D
  4903  00BD                     	ds	1
  4904  00BE                     ?___ftneg:	
  4905  00BE                     ___ftneg@f1:	
  4906                           ; 3 bytes @ 0x1E
  4907                           
  4908                           
  4909                           ; 3 bytes @ 0x1E
  4910  00BE                     	ds	3
  4911  00C1                     ??___ftneg:	
  4912  00C1                     ?___ftadd:	
  4913                           ; 1 bytes @ 0x21
  4914                           
  4915  00C1                     ___ftadd@f1:	
  4916                           ; 3 bytes @ 0x21
  4917                           
  4918                           
  4919                           ; 3 bytes @ 0x21
  4920  00C1                     	ds	1
  4921  00C2                     updateSwitchTap@tapCntDivisor:	
  4922                           
  4923                           ; 2 bytes @ 0x22
  4924  00C2                     	ds	2
  4925  00C4                     updateSwitchTap@iCnt:	
  4926  00C4                     ___ftadd@f2:	
  4927                           ; 1 bytes @ 0x24
  4928                           
  4929                           
  4930                           ; 3 bytes @ 0x24
  4931  00C4                     	ds	3
  4932  00C7                     ??___ftadd:	
  4933                           
  4934                           ; 1 bytes @ 0x27
  4935  00C7                     	ds	4
  4936  00CB                     ___ftadd@sign:	
  4937                           
  4938                           ; 1 bytes @ 0x2B
  4939  00CB                     	ds	1
  4940  00CC                     ___ftadd@exp2:	
  4941                           
  4942                           ; 1 bytes @ 0x2C
  4943  00CC                     	ds	1
  4944  00CD                     ___ftadd@exp1:	
  4945                           
  4946                           ; 1 bytes @ 0x2D
  4947  00CD                     	ds	1
  4948  00CE                     ?___ftdiv:	
  4949  00CE                     ___ftdiv@f2:	
  4950                           ; 3 bytes @ 0x2E
  4951                           
  4952                           
  4953                           ; 3 bytes @ 0x2E
  4954  00CE                     	ds	3
  4955  00D1                     ___ftdiv@f1:	
  4956                           
  4957                           ; 3 bytes @ 0x31
  4958  00D1                     	ds	3
  4959  00D4                     ??___ftdiv:	
  4960                           
  4961                           ; 1 bytes @ 0x34
  4962  00D4                     	ds	4
  4963  00D8                     ___ftdiv@cntr:	
  4964                           
  4965                           ; 1 bytes @ 0x38
  4966  00D8                     	ds	1
  4967  00D9                     ___ftdiv@f3:	
  4968                           
  4969                           ; 3 bytes @ 0x39
  4970  00D9                     	ds	3
  4971  00DC                     ___ftdiv@exp:	
  4972                           
  4973                           ; 1 bytes @ 0x3C
  4974  00DC                     	ds	1
  4975  00DD                     ___ftdiv@sign:	
  4976                           
  4977                           ; 1 bytes @ 0x3D
  4978  00DD                     	ds	1
  4979  00DE                     ?_map:	
  4980  00DE                     map@x:	
  4981                           ; 3 bytes @ 0x3E
  4982                           
  4983                           
  4984                           ; 3 bytes @ 0x3E
  4985  00DE                     	ds	3
  4986  00E1                     map@in_min:	
  4987                           
  4988                           ; 3 bytes @ 0x41
  4989  00E1                     	ds	3
  4990  00E4                     map@in_max:	
  4991                           
  4992                           ; 3 bytes @ 0x44
  4993  00E4                     	ds	3
  4994  00E7                     map@out_min:	
  4995                           
  4996                           ; 3 bytes @ 0x47
  4997  00E7                     	ds	3
  4998  00EA                     map@out_max:	
  4999                           
  5000                           ; 3 bytes @ 0x4A
  5001  00EA                     	ds	3
  5002  00ED                     ??_map:	
  5003  00ED                     _map$2836:	
  5004                           ; 1 bytes @ 0x4D
  5005                           
  5006                           
  5007                           ; 3 bytes @ 0x4D
  5008  00ED                     	ds	3
  5009  00F0                     ??_scaleA10kPot:	
  5010  00F0                     ??_scaleiA10kPot:	
  5011                           ; 1 bytes @ 0x50
  5012                           
  5013  00F0                     ??_scaleA100kPot:	
  5014                           ; 1 bytes @ 0x50
  5015                           
  5016  00F0                     ??_set_subdivision:	
  5017                           ; 1 bytes @ 0x50
  5018                           
  5019  00F0                     ??_getModulationDelayTime:	
  5020                           ; 1 bytes @ 0x50
  5021                           
  5022  00F0                     ??_modTri:	
  5023                           ; 1 bytes @ 0x50
  5024                           
  5025  00F0                     ??_modSquare:	
  5026                           ; 1 bytes @ 0x50
  5027                           
  5028  00F0                     ??_modSaw:	
  5029                           ; 1 bytes @ 0x50
  5030                           
  5031  00F0                     ??_eval_poly:	
  5032                           ; 1 bytes @ 0x50
  5033                           
  5034  00F0                     ??___wmul:	
  5035                           ; 1 bytes @ 0x50
  5036                           
  5037  00F0                     ??___ftsub:	
  5038                           ; 1 bytes @ 0x50
  5039                           
  5040                           
  5041                           	psect	cstackCOMMON
  5042  0070                     __pcstackCOMMON:	
  5043                           ; 1 bytes @ 0x50
  5044                           
  5045  0070                     ?_calcSinArray:	
  5046  0070                     ?_ConfigureOscillator:	
  5047                           ; 1 bytes @ 0x0
  5048                           
  5049  0070                     ?_InitApp:	
  5050                           ; 1 bytes @ 0x0
  5051                           
  5052  0070                     ?_InitializeTaps:	
  5053                           ; 1 bytes @ 0x0
  5054                           
  5055  0070                     ?_initSwitchBypass:	
  5056                           ; 1 bytes @ 0x0
  5057                           
  5058  0070                     ?_ReadSavedSettings:	
  5059                           ; 1 bytes @ 0x0
  5060                           
  5061  0070                     ?_updateModulationArray:	
  5062                           ; 1 bytes @ 0x0
  5063                           
  5064  0070                     ?_update_mode:	
  5065                           ; 1 bytes @ 0x0
  5066                           
  5067  0070                     ?_update_selectMode:	
  5068                           ; 1 bytes @ 0x0
  5069                           
  5070  0070                     ?_updateSwitchBypass:	
  5071                           ; 1 bytes @ 0x0
  5072                           
  5073  0070                     ?_updateSwitchTap:	
  5074                           ; 1 bytes @ 0x0
  5075                           
  5076  0070                     ?_read_bottom_tactile:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     ?_read_top_tactile:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     ?_getModulationDelayTime:	
  5083                           ; 1 bytes @ 0x0
  5084                           
  5085  0070                     ?_init_adc:	
  5086                           ; 1 bytes @ 0x0
  5087                           
  5088  0070                     ?_init_pwm:	
  5089                           ; 1 bytes @ 0x0
  5090                           
  5091  0070                     ?_init_timer2:	
  5092                           ; 1 bytes @ 0x0
  5093                           
  5094  0070                     ?_init_timer0:	
  5095                           ; 1 bytes @ 0x0
  5096                           
  5097  0070                     ?_solidring_tactiles:	
  5098                           ; 1 bytes @ 0x0
  5099                           
  5100  0070                     ?_ring_tactiles:	
  5101                           ; 1 bytes @ 0x0
  5102                           
  5103  0070                     ?_resetRingLEDs:	
  5104                           ; 1 bytes @ 0x0
  5105                           
  5106  0070                     ?_setPedalMode:	
  5107                           ; 1 bytes @ 0x0
  5108                           
  5109  0070                     ?_setPresetDisplay:	
  5110                           ; 1 bytes @ 0x0
  5111                           
  5112  0070                     ?_setExpressionDisplay:	
  5113                           ; 1 bytes @ 0x0
  5114                           
  5115  0070                     ?_isr:	
  5116                           ; 1 bytes @ 0x0
  5117                           
  5118  0070                     ?_main:	
  5119                           ; 1 bytes @ 0x0
  5120                           
  5121  0070                     ?_showSave:	
  5122                           ; 1 bytes @ 0x0
  5123                           
  5124  0070                     ?i1_set_leds_top:	
  5125                           ; 1 bytes @ 0x0
  5126                           
  5127  0070                     ?i1_getModulationSubdivision:	
  5128                           ; 1 bytes @ 0x0
  5129                           
  5130  0070                     ?i1___awdiv:	
  5131                           ; 2 bytes @ 0x0
  5132                           
  5133  0070                     ?i1___lmul:	
  5134                           ; 2 bytes @ 0x0
  5135                           
  5136  0070                     i1set_leds_top@x:	
  5137                           ; 4 bytes @ 0x0
  5138                           
  5139  0070                     i1___awdiv@divisor:	
  5140                           ; 2 bytes @ 0x0
  5141                           
  5142  0070                     i1___lmul@multiplier:	
  5143                           ; 2 bytes @ 0x0
  5144                           
  5145                           
  5146                           ; 4 bytes @ 0x0
  5147  0070                     	ds	2
  5148  0072                     ??i1_getModulationSubdivision:	
  5149  0072                     i1set_leds_top@ledState:	
  5150                           ; 1 bytes @ 0x2
  5151                           
  5152  0072                     i1___awdiv@dividend:	
  5153                           ; 2 bytes @ 0x2
  5154                           
  5155                           
  5156                           ; 2 bytes @ 0x2
  5157  0072                     	ds	2
  5158  0074                     ??i1_set_leds_top:	
  5159  0074                     ??i1___awdiv:	
  5160                           ; 1 bytes @ 0x4
  5161                           
  5162  0074                     i1___lmul@multiplicand:	
  5163                           ; 1 bytes @ 0x4
  5164                           
  5165                           
  5166                           ; 4 bytes @ 0x4
  5167  0074                     	ds	1
  5168  0075                     i1___awdiv@counter:	
  5169                           
  5170                           ; 1 bytes @ 0x5
  5171  0075                     	ds	1
  5172  0076                     i1___awdiv@sign:	
  5173                           
  5174                           ; 1 bytes @ 0x6
  5175  0076                     	ds	1
  5176  0077                     i1___awdiv@quotient:	
  5177                           
  5178                           ; 2 bytes @ 0x7
  5179  0077                     	ds	1
  5180  0078                     ??i1___lmul:	
  5181  0078                     i1___lmul@product:	
  5182                           ; 1 bytes @ 0x8
  5183                           
  5184                           
  5185                           ; 4 bytes @ 0x8
  5186  0078                     	ds	4
  5187  007C                     ??i1___aldiv:	
  5188                           
  5189                           ; 1 bytes @ 0xC
  5190  007C                     	ds	1
  5191  007D                     isr@subDiv:	
  5192                           
  5193                           ; 1 bytes @ 0xD
  5194  007D                     	ds	1
  5195                           
  5196                           	psect	cstackBANK0
  5197  0020                     __pcstackBANK0:	
  5198  0020                     ?i1___aldiv:	
  5199  0020                     i1___aldiv@divisor:	
  5200                           ; 4 bytes @ 0x0
  5201                           
  5202                           
  5203                           ; 4 bytes @ 0x0
  5204  0020                     	ds	4
  5205  0024                     i1___aldiv@dividend:	
  5206                           
  5207                           ; 4 bytes @ 0x4
  5208  0024                     	ds	4
  5209  0028                     i1___aldiv@counter:	
  5210                           
  5211                           ; 1 bytes @ 0x8
  5212  0028                     	ds	1
  5213  0029                     i1___aldiv@sign:	
  5214                           
  5215                           ; 1 bytes @ 0x9
  5216  0029                     	ds	1
  5217  002A                     i1___aldiv@quotient:	
  5218                           
  5219                           ; 4 bytes @ 0xA
  5220  002A                     	ds	4
  5221  002E                     ?_modulation:	
  5222  002E                     modulation@x:	
  5223                           ; 4 bytes @ 0xE
  5224                           
  5225                           
  5226                           ; 4 bytes @ 0xE
  5227  002E                     	ds	4
  5228  0032                     modulation@y:	
  5229                           
  5230                           ; 4 bytes @ 0x12
  5231  0032                     	ds	4
  5232  0036                     ??_modulation:	
  5233                           
  5234                           ; 1 bytes @ 0x16
  5235  0036                     	ds	4
  5236  003A                     ??_isr:	
  5237                           
  5238                           ; 1 bytes @ 0x1A
  5239  003A                     	ds	6
  5240                           
  5241                           	psect	maintext
  5242  0363                     __pmaintext:	
  5243 ;;
  5244 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5245 ;;
  5246 ;; *************** function _main *****************
  5247 ;; Defined at:
  5248 ;;		line 68 in file "main.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;		None
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;		None
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      void 
  5255 ;; Registers used:
  5256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : B1F/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5263 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5264 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5265 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5266 ;;Total ram usage:       14 bytes
  5267 ;; Hardware stack levels required when called:    9
  5268 ;; This function calls:
  5269 ;;		_ConfigureOscillator
  5270 ;;		_InitApp
  5271 ;;		_InitializeTaps
  5272 ;;		_ReadSavedSettings
  5273 ;;		_USARTInit
  5274 ;;		___awtoft
  5275 ;;		___fttol
  5276 ;;		_adc_convert
  5277 ;;		_calcSinArray
  5278 ;;		_getModulationDelayTime
  5279 ;;		_initSwitchBypass
  5280 ;;		_map
  5281 ;;		_read_bottom_tactile
  5282 ;;		_read_top_tactile
  5283 ;;		_scaleA100kPot
  5284 ;;		_scaleA10kPot
  5285 ;;		_scaleiA10kPot
  5286 ;;		_set_subdivision
  5287 ;;		_updateModulationArray
  5288 ;;		_updateSwitchBypass
  5289 ;;		_updateSwitchTap
  5290 ;;		_update_mode
  5291 ;;		_update_selectMode
  5292 ;; This function is called by:
  5293 ;;		Startup code after reset
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _main
  5299  0363                     _main:	
  5300                           
  5301                           ;main.c: 70: calcSinArray();
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5305  0363  3198  2059  3183   	fcall	_calcSinArray
  5306                           
  5307                           ;main.c: 82: USARTInit(31250);
  5308  0366  3012               	movlw	18
  5309  0367  0021               	movlb	1	; select bank1
  5310  0368  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5311  0369  307A               	movlw	122
  5312  036A  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5313  036B  31A3  23F5  3183   	fcall	_USARTInit
  5314                           
  5315                           ;main.c: 83: ConfigureOscillator();
  5316  036E  31AE  2607  3183   	fcall	_ConfigureOscillator
  5317                           
  5318                           ;main.c: 84: InitApp();
  5319  0371  31A0  205B  3183   	fcall	_InitApp
  5320                           
  5321                           ;main.c: 86: PORTEbits.RE0 = 1;
  5322  0374  0020               	movlb	0	; select bank0
  5323  0375  1410               	bsf	16,0	;volatile
  5324                           
  5325                           ;main.c: 87: PORTEbits.RE1 = 1;
  5326  0376  1490               	bsf	16,1	;volatile
  5327                           
  5328                           ;main.c: 88: PORTDbits.RD6 = 1;
  5329  0377  170F               	bsf	15,6	;volatile
  5330                           
  5331                           ;main.c: 89: PORTDbits.RD5 = 1;
  5332  0378  168F               	bsf	15,5	;volatile
  5333                           
  5334                           ;main.c: 90: PORTCbits.RC0 = 1;
  5335  0379  140E               	bsf	14,0	;volatile
  5336                           
  5337                           ;main.c: 91: PORTDbits.RD7 = 1;
  5338  037A  178F               	bsf	15,7	;volatile
  5339                           
  5340                           ;main.c: 93: InitializeTaps();
  5341  037B  31AF  27AC  3183   	fcall	_InitializeTaps
  5342                           
  5343                           ;main.c: 94: initSwitchBypass();
  5344  037E  31AE  264C  3183   	fcall	_initSwitchBypass
  5345                           
  5346                           ;main.c: 97: ReadSavedSettings();
  5347  0381  31A7  278A  3183   	fcall	_ReadSavedSettings
  5348                           
  5349                           ;main.c: 98: updateModulationArray();
  5350  0384  318D  25DD  3183   	fcall	_updateModulationArray
  5351  0387                     l9206:	
  5352                           ;main.c: 99: while (1) {
  5353                           
  5354                           
  5355                           ;main.c: 102: update_mode();
  5356  0387  31A1  2153  3183   	fcall	_update_mode
  5357                           
  5358                           ;main.c: 103: update_selectMode();
  5359  038A  3198  2000  3183   	fcall	_update_selectMode
  5360                           
  5361                           ;main.c: 106: updateSwitchBypass();
  5362  038D  3192  222B  3183   	fcall	_updateSwitchBypass
  5363                           
  5364                           ;main.c: 107: if (presetSaveMode != 1) {
  5365  0390  0020               	movlb	0	; select bank0
  5366  0391  0351               	decf	_presetSaveMode,w
  5367  0392  1903               	btfsc	3,2
  5368  0393  2B97               	goto	l9216
  5369                           
  5370                           ;main.c: 108: updateSwitchTap();
  5371  0394  3189  21FB  3183   	fcall	_updateSwitchTap
  5372  0397                     l9216:	
  5373                           
  5374                           ;main.c: 109: }
  5375                           ;main.c: 111: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5376  0397  0020               	movlb	0	; select bank0
  5377  0398  0351               	decf	_presetSaveMode,w
  5378  0399  1903               	btfsc	3,2
  5379  039A  2BA6               	goto	l9222
  5380  039B  0850               	movf	_mode2_state,w
  5381  039C  0023               	movlb	3	; select bank3
  5382  039D  0665               	xorwf	_presetModeCnst^(0+384),w
  5383  039E  1903               	skipnz
  5384  039F  2BA6               	goto	l9222
  5385                           
  5386                           ;main.c: 112: read_bottom_tactile();
  5387  03A0  31A4  2481  3183   	fcall	_read_bottom_tactile
  5388                           
  5389                           ;main.c: 113: read_top_tactile();
  5390  03A3  31A4  24CB  3183   	fcall	_read_top_tactile
  5391  03A6                     l9222:	
  5392                           
  5393                           ;main.c: 114: }
  5394                           ;main.c: 117: knob_1_pos = adc_convert(0);
  5395  03A6  3000               	movlw	0
  5396  03A7  31AE  265B  3183   	fcall	_adc_convert
  5397  03AA  0021               	movlb	1	; select bank1
  5398  03AB  0821               	movf	(?_adc_convert+1)^(0+128),w
  5399  03AC  0023               	movlb	3	; select bank3
  5400  03AD  00A9               	movwf	(_knob_1_pos+1)^(0+384)
  5401  03AE  0021               	movlb	1	; select bank1
  5402  03AF  0820               	movf	?_adc_convert^(0+128),w
  5403  03B0  0023               	movlb	3	; select bank3
  5404  03B1  00A8               	movwf	_knob_1_pos^(0+384)
  5405                           
  5406                           ;main.c: 118: knob_2_pos = adc_convert(1);
  5407  03B2  3001               	movlw	1
  5408  03B3  31AE  265B  3183   	fcall	_adc_convert
  5409  03B6  0021               	movlb	1	; select bank1
  5410  03B7  0821               	movf	(?_adc_convert+1)^(0+128),w
  5411  03B8  0023               	movlb	3	; select bank3
  5412  03B9  00AB               	movwf	(_knob_2_pos+1)^(0+384)
  5413  03BA  0021               	movlb	1	; select bank1
  5414  03BB  0820               	movf	?_adc_convert^(0+128),w
  5415  03BC  0023               	movlb	3	; select bank3
  5416  03BD  00AA               	movwf	_knob_2_pos^(0+384)
  5417                           
  5418                           ;main.c: 119: knob_3_pos = adc_convert(2);
  5419  03BE  3002               	movlw	2
  5420  03BF  31AE  265B  3183   	fcall	_adc_convert
  5421  03C2  0021               	movlb	1	; select bank1
  5422  03C3  0821               	movf	(?_adc_convert+1)^(0+128),w
  5423  03C4  0023               	movlb	3	; select bank3
  5424  03C5  00AD               	movwf	(_knob_3_pos+1)^(0+384)
  5425  03C6  0021               	movlb	1	; select bank1
  5426  03C7  0820               	movf	?_adc_convert^(0+128),w
  5427  03C8  0023               	movlb	3	; select bank3
  5428  03C9  00AC               	movwf	_knob_3_pos^(0+384)
  5429                           
  5430                           ;main.c: 120: knob_4_pos = adc_convert(3);
  5431  03CA  3003               	movlw	3
  5432  03CB  31AE  265B  3183   	fcall	_adc_convert
  5433  03CE  0021               	movlb	1	; select bank1
  5434  03CF  0821               	movf	(?_adc_convert+1)^(0+128),w
  5435  03D0  0023               	movlb	3	; select bank3
  5436  03D1  00AF               	movwf	(_knob_4_pos+1)^(0+384)
  5437  03D2  0021               	movlb	1	; select bank1
  5438  03D3  0820               	movf	?_adc_convert^(0+128),w
  5439  03D4  0023               	movlb	3	; select bank3
  5440  03D5  00AE               	movwf	_knob_4_pos^(0+384)
  5441                           
  5442                           ;main.c: 121: knob_5_pos = adc_convert(4);
  5443  03D6  3004               	movlw	4
  5444  03D7  31AE  265B  3183   	fcall	_adc_convert
  5445  03DA  0021               	movlb	1	; select bank1
  5446  03DB  0821               	movf	(?_adc_convert+1)^(0+128),w
  5447  03DC  0023               	movlb	3	; select bank3
  5448  03DD  00B1               	movwf	(_knob_5_pos+1)^(0+384)
  5449  03DE  0021               	movlb	1	; select bank1
  5450  03DF  0820               	movf	?_adc_convert^(0+128),w
  5451  03E0  0023               	movlb	3	; select bank3
  5452  03E1  00B0               	movwf	_knob_5_pos^(0+384)
  5453                           
  5454                           ;main.c: 125: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5455  03E2  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5456  03E3  0024               	movlb	4	; select bank4
  5457  03E4  00D5               	movwf	??_main^(0+512)
  5458  03E5  0023               	movlb	3	; select bank3
  5459  03E6  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5460  03E7  0024               	movlb	4	; select bank4
  5461  03E8  00D6               	movwf	(??_main^(0+512)+1)
  5462  03E9  0AD5               	incf	??_main^(0+512),f
  5463  03EA  1903               	skipnz
  5464  03EB  0AD6               	incf	(??_main^(0+512)+1),f
  5465  03EC  0023               	movlb	3	; select bank3
  5466  03ED  0828               	movf	_knob_1_pos^(0+384),w
  5467  03EE  0024               	movlb	4	; select bank4
  5468  03EF  0755               	addwf	??_main^(0+512),w
  5469  03F0  00D7               	movwf	(??_main+2)^(0+512)
  5470  03F1  0023               	movlb	3	; select bank3
  5471  03F2  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5472  03F3  0024               	movlb	4	; select bank4
  5473  03F4  3D56               	addwfc	(??_main+1)^(0+512),w
  5474  03F5  00D8               	movwf	(??_main+3)^(0+512)
  5475  03F6  0858               	movf	(??_main+3)^(0+512),w
  5476  03F7  3A80               	xorlw	128
  5477  03F8  00D9               	movwf	(??_main+4)^(0+512)
  5478  03F9  3080               	movlw	128
  5479  03FA  0259               	subwf	(??_main+4)^(0+512),w
  5480  03FB  1D03               	skipz
  5481  03FC  2BFF               	goto	u10185
  5482  03FD  3004               	movlw	4
  5483  03FE  0257               	subwf	(??_main+2)^(0+512),w
  5484  03FF                     u10185:	
  5485  03FF  1803               	skipnc
  5486  0400  2C21               	goto	l9236
  5487  0401  0023               	movlb	3	; select bank3
  5488  0402  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5489  0403  0024               	movlb	4	; select bank4
  5490  0404  00D5               	movwf	??_main^(0+512)
  5491  0405  0023               	movlb	3	; select bank3
  5492  0406  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5493  0407  0024               	movlb	4	; select bank4
  5494  0408  00D6               	movwf	(??_main^(0+512)+1)
  5495  0409  0AD5               	incf	??_main^(0+512),f
  5496  040A  1903               	skipnz
  5497  040B  0AD6               	incf	(??_main^(0+512)+1),f
  5498  040C  0023               	movlb	3	; select bank3
  5499  040D  0828               	movf	_knob_1_pos^(0+384),w
  5500  040E  0024               	movlb	4	; select bank4
  5501  040F  0755               	addwf	??_main^(0+512),w
  5502  0410  00D7               	movwf	(??_main+2)^(0+512)
  5503  0411  0023               	movlb	3	; select bank3
  5504  0412  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5505  0413  0024               	movlb	4	; select bank4
  5506  0414  3D56               	addwfc	(??_main+1)^(0+512),w
  5507  0415  00D8               	movwf	(??_main+3)^(0+512)
  5508  0416  0858               	movf	(??_main+3)^(0+512),w
  5509  0417  3A80               	xorlw	128
  5510  0418  00D9               	movwf	(??_main+4)^(0+512)
  5511  0419  307F               	movlw	127
  5512  041A  0259               	subwf	(??_main+4)^(0+512),w
  5513  041B  1D03               	skipz
  5514  041C  2C1F               	goto	u10195
  5515  041D  30FD               	movlw	253
  5516  041E  0257               	subwf	(??_main+2)^(0+512),w
  5517  041F                     u10195:	
  5518  041F  1803               	skipnc
  5519  0420  2C7F               	goto	l9246
  5520  0421                     l9236:	
  5521                           
  5522                           ;main.c: 126: knob1_prev = knob_1_pos;
  5523  0421  0023               	movlb	3	; select bank3
  5524  0422  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5525  0423  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5526  0424  0828               	movf	_knob_1_pos^(0+384),w
  5527  0425  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5528                           
  5529                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5530  0426  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5531  0427  0021               	movlb	1	; select bank1
  5532  0428  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5533  0429  0023               	movlb	3	; select bank3
  5534  042A  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5535  042B  0021               	movlb	1	; select bank1
  5536  042C  00A8               	movwf	___awtoft@c^(0+128)
  5537  042D  31AF  2767  3183   	fcall	___awtoft
  5538  0430  0021               	movlb	1	; select bank1
  5539  0431  0828               	movf	?___awtoft^(0+128),w
  5540  0432  0024               	movlb	4	; select bank4
  5541  0433  00DA               	movwf	_main$2833^(0+512)
  5542  0434  0021               	movlb	1	; select bank1
  5543  0435  0829               	movf	(?___awtoft+1)^(0+128),w
  5544  0436  0024               	movlb	4	; select bank4
  5545  0437  00DB               	movwf	(_main$2833+1)^(0+512)
  5546  0438  0021               	movlb	1	; select bank1
  5547  0439  082A               	movf	(?___awtoft+2)^(0+128),w
  5548  043A  0024               	movlb	4	; select bank4
  5549  043B  00DC               	movwf	(_main$2833+2)^(0+512)
  5550                           
  5551                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5552  043C  085A               	movf	_main$2833^(0+512),w
  5553  043D  0022               	movlb	2	; select bank2
  5554  043E  00E7               	movwf	scaleA10kPot@input^(0+256)
  5555  043F  0024               	movlb	4	; select bank4
  5556  0440  085B               	movf	(_main$2833+1)^(0+512),w
  5557  0441  0022               	movlb	2	; select bank2
  5558  0442  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5559  0443  0024               	movlb	4	; select bank4
  5560  0444  085C               	movf	(_main$2833+2)^(0+512),w
  5561  0445  0022               	movlb	2	; select bank2
  5562  0446  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5563  0447  319C  2400  3183   	fcall	_scaleA10kPot
  5564  044A  0022               	movlb	2	; select bank2
  5565  044B  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5566  044C  0026               	movlb	6	; select bank6
  5567  044D  0099               	movwf	25	;volatile
  5568  044E  0022               	movlb	2	; select bank2
  5569  044F  0867               	movf	?_scaleA10kPot^(0+256),w
  5570  0450  0026               	movlb	6	; select bank6
  5571  0451  0098               	movwf	24	;volatile
  5572                           
  5573                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5574  0452  0023               	movlb	3	; select bank3
  5575  0453  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5576  0454  0021               	movlb	1	; select bank1
  5577  0455  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5578  0456  0023               	movlb	3	; select bank3
  5579  0457  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5580  0458  0021               	movlb	1	; select bank1
  5581  0459  00A8               	movwf	___awtoft@c^(0+128)
  5582  045A  31AF  2767  3183   	fcall	___awtoft
  5583  045D  0021               	movlb	1	; select bank1
  5584  045E  0828               	movf	?___awtoft^(0+128),w
  5585  045F  0024               	movlb	4	; select bank4
  5586  0460  00DD               	movwf	_main$2834^(0+512)
  5587  0461  0021               	movlb	1	; select bank1
  5588  0462  0829               	movf	(?___awtoft+1)^(0+128),w
  5589  0463  0024               	movlb	4	; select bank4
  5590  0464  00DE               	movwf	(_main$2834+1)^(0+512)
  5591  0465  0021               	movlb	1	; select bank1
  5592  0466  082A               	movf	(?___awtoft+2)^(0+128),w
  5593  0467  0024               	movlb	4	; select bank4
  5594  0468  00DF               	movwf	(_main$2834+2)^(0+512)
  5595                           
  5596                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5597  0469  085D               	movf	_main$2834^(0+512),w
  5598  046A  0022               	movlb	2	; select bank2
  5599  046B  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5600  046C  0024               	movlb	4	; select bank4
  5601  046D  085E               	movf	(_main$2834+1)^(0+512),w
  5602  046E  0022               	movlb	2	; select bank2
  5603  046F  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5604  0470  0024               	movlb	4	; select bank4
  5605  0471  085F               	movf	(_main$2834+2)^(0+512),w
  5606  0472  0022               	movlb	2	; select bank2
  5607  0473  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5608  0474  319D  25D1  3183   	fcall	_scaleiA10kPot
  5609  0477  0022               	movlb	2	; select bank2
  5610  0478  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5611  0479  0026               	movlb	6	; select bank6
  5612  047A  009D               	movwf	29	;volatile
  5613  047B  0022               	movlb	2	; select bank2
  5614  047C  0867               	movf	?_scaleiA10kPot^(0+256),w
  5615  047D  0026               	movlb	6	; select bank6
  5616  047E  009C               	movwf	28	;volatile
  5617  047F                     l9246:	
  5618                           
  5619                           ;main.c: 130: }
  5620                           ;main.c: 134: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5621  047F  0023               	movlb	3	; select bank3
  5622  0480  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5623  0481  0024               	movlb	4	; select bank4
  5624  0482  00D5               	movwf	??_main^(0+512)
  5625  0483  0023               	movlb	3	; select bank3
  5626  0484  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5627  0485  0024               	movlb	4	; select bank4
  5628  0486  00D6               	movwf	(??_main^(0+512)+1)
  5629  0487  0AD5               	incf	??_main^(0+512),f
  5630  0488  1903               	skipnz
  5631  0489  0AD6               	incf	(??_main^(0+512)+1),f
  5632  048A  0023               	movlb	3	; select bank3
  5633  048B  082A               	movf	_knob_2_pos^(0+384),w
  5634  048C  0024               	movlb	4	; select bank4
  5635  048D  0755               	addwf	??_main^(0+512),w
  5636  048E  00D7               	movwf	(??_main+2)^(0+512)
  5637  048F  0023               	movlb	3	; select bank3
  5638  0490  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5639  0491  0024               	movlb	4	; select bank4
  5640  0492  3D56               	addwfc	(??_main+1)^(0+512),w
  5641  0493  00D8               	movwf	(??_main+3)^(0+512)
  5642  0494  0858               	movf	(??_main+3)^(0+512),w
  5643  0495  3A80               	xorlw	128
  5644  0496  00D9               	movwf	(??_main+4)^(0+512)
  5645  0497  3080               	movlw	128
  5646  0498  0259               	subwf	(??_main+4)^(0+512),w
  5647  0499  1D03               	skipz
  5648  049A  2C9D               	goto	u10205
  5649  049B  3004               	movlw	4
  5650  049C  0257               	subwf	(??_main+2)^(0+512),w
  5651  049D                     u10205:	
  5652  049D  1803               	skipnc
  5653  049E  2CBF               	goto	l9250
  5654  049F  0023               	movlb	3	; select bank3
  5655  04A0  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5656  04A1  0024               	movlb	4	; select bank4
  5657  04A2  00D5               	movwf	??_main^(0+512)
  5658  04A3  0023               	movlb	3	; select bank3
  5659  04A4  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5660  04A5  0024               	movlb	4	; select bank4
  5661  04A6  00D6               	movwf	(??_main^(0+512)+1)
  5662  04A7  0AD5               	incf	??_main^(0+512),f
  5663  04A8  1903               	skipnz
  5664  04A9  0AD6               	incf	(??_main^(0+512)+1),f
  5665  04AA  0023               	movlb	3	; select bank3
  5666  04AB  082A               	movf	_knob_2_pos^(0+384),w
  5667  04AC  0024               	movlb	4	; select bank4
  5668  04AD  0755               	addwf	??_main^(0+512),w
  5669  04AE  00D7               	movwf	(??_main+2)^(0+512)
  5670  04AF  0023               	movlb	3	; select bank3
  5671  04B0  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5672  04B1  0024               	movlb	4	; select bank4
  5673  04B2  3D56               	addwfc	(??_main+1)^(0+512),w
  5674  04B3  00D8               	movwf	(??_main+3)^(0+512)
  5675  04B4  0858               	movf	(??_main+3)^(0+512),w
  5676  04B5  3A80               	xorlw	128
  5677  04B6  00D9               	movwf	(??_main+4)^(0+512)
  5678  04B7  307F               	movlw	127
  5679  04B8  0259               	subwf	(??_main+4)^(0+512),w
  5680  04B9  1D03               	skipz
  5681  04BA  2CBD               	goto	u10215
  5682  04BB  30FD               	movlw	253
  5683  04BC  0257               	subwf	(??_main+2)^(0+512),w
  5684  04BD                     u10215:	
  5685  04BD  1803               	skipnc
  5686  04BE  2D35               	goto	l9260
  5687  04BF                     l9250:	
  5688                           
  5689                           ;main.c: 135: knob2_prev = knob_2_pos;
  5690  04BF  0023               	movlb	3	; select bank3
  5691  04C0  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5692  04C1  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5693  04C2  082A               	movf	_knob_2_pos^(0+384),w
  5694  04C3  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5695                           
  5696                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5697  04C4  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5698  04C5  0024               	movlb	4	; select bank4
  5699  04C6  00D5               	movwf	??_main^(0+512)
  5700  04C7  0023               	movlb	3	; select bank3
  5701  04C8  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5702  04C9  0024               	movlb	4	; select bank4
  5703  04CA  00D6               	movwf	(??_main^(0+512)+1)
  5704  04CB  0AD5               	incf	??_main^(0+512),f
  5705  04CC  1903               	skipnz
  5706  04CD  0AD6               	incf	(??_main^(0+512)+1),f
  5707  04CE  0855               	movf	??_main^(0+512),w
  5708  04CF  3EFF               	addlw	255
  5709  04D0  0021               	movlb	1	; select bank1
  5710  04D1  00A8               	movwf	___awtoft@c^(0+128)
  5711  04D2  3003               	movlw	3
  5712  04D3  0024               	movlb	4	; select bank4
  5713  04D4  3D56               	addwfc	(??_main+1)^(0+512),w
  5714  04D5  0021               	movlb	1	; select bank1
  5715  04D6  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5716  04D7  31AF  2767  3183   	fcall	___awtoft
  5717  04DA  0021               	movlb	1	; select bank1
  5718  04DB  0828               	movf	?___awtoft^(0+128),w
  5719  04DC  0024               	movlb	4	; select bank4
  5720  04DD  00E0               	movwf	_main$2835^(0+512)
  5721  04DE  0021               	movlb	1	; select bank1
  5722  04DF  0829               	movf	(?___awtoft+1)^(0+128),w
  5723  04E0  0024               	movlb	4	; select bank4
  5724  04E1  00E1               	movwf	(_main$2835+1)^(0+512)
  5725  04E2  0021               	movlb	1	; select bank1
  5726  04E3  082A               	movf	(?___awtoft+2)^(0+128),w
  5727  04E4  0024               	movlb	4	; select bank4
  5728  04E5  00E2               	movwf	(_main$2835+2)^(0+512)
  5729                           
  5730                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5731  04E6  0860               	movf	_main$2835^(0+512),w
  5732  04E7  0022               	movlb	2	; select bank2
  5733  04E8  00E7               	movwf	scaleA100kPot@input^(0+256)
  5734  04E9  0024               	movlb	4	; select bank4
  5735  04EA  0861               	movf	(_main$2835+1)^(0+512),w
  5736  04EB  0022               	movlb	2	; select bank2
  5737  04EC  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5738  04ED  0024               	movlb	4	; select bank4
  5739  04EE  0862               	movf	(_main$2835+2)^(0+512),w
  5740  04EF  0022               	movlb	2	; select bank2
  5741  04F0  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5742  04F1  3199  21DE  3183   	fcall	_scaleA100kPot
  5743  04F4  0022               	movlb	2	; select bank2
  5744  04F5  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5745  04F6  0025               	movlb	5	; select bank5
  5746  04F7  0092               	movwf	18	;volatile
  5747  04F8  0022               	movlb	2	; select bank2
  5748  04F9  0867               	movf	?_scaleA100kPot^(0+256),w
  5749  04FA  0025               	movlb	5	; select bank5
  5750  04FB  0091               	movwf	17	;volatile
  5751                           
  5752                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5753  04FC  0023               	movlb	3	; select bank3
  5754  04FD  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5755  04FE  0024               	movlb	4	; select bank4
  5756  04FF  00D5               	movwf	??_main^(0+512)
  5757  0500  0023               	movlb	3	; select bank3
  5758  0501  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5759  0502  0024               	movlb	4	; select bank4
  5760  0503  00D6               	movwf	(??_main^(0+512)+1)
  5761  0504  0AD5               	incf	??_main^(0+512),f
  5762  0505  1903               	skipnz
  5763  0506  0AD6               	incf	(??_main^(0+512)+1),f
  5764  0507  0855               	movf	??_main^(0+512),w
  5765  0508  3EFF               	addlw	255
  5766  0509  0021               	movlb	1	; select bank1
  5767  050A  00A8               	movwf	___awtoft@c^(0+128)
  5768  050B  3003               	movlw	3
  5769  050C  0024               	movlb	4	; select bank4
  5770  050D  3D56               	addwfc	(??_main+1)^(0+512),w
  5771  050E  0021               	movlb	1	; select bank1
  5772  050F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5773  0510  31AF  2767  3183   	fcall	___awtoft
  5774  0513  0021               	movlb	1	; select bank1
  5775  0514  0828               	movf	?___awtoft^(0+128),w
  5776  0515  0024               	movlb	4	; select bank4
  5777  0516  00E0               	movwf	_main$2835^(0+512)
  5778  0517  0021               	movlb	1	; select bank1
  5779  0518  0829               	movf	(?___awtoft+1)^(0+128),w
  5780  0519  0024               	movlb	4	; select bank4
  5781  051A  00E1               	movwf	(_main$2835+1)^(0+512)
  5782  051B  0021               	movlb	1	; select bank1
  5783  051C  082A               	movf	(?___awtoft+2)^(0+128),w
  5784  051D  0024               	movlb	4	; select bank4
  5785  051E  00E2               	movwf	(_main$2835+2)^(0+512)
  5786                           
  5787                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5788  051F  0860               	movf	_main$2835^(0+512),w
  5789  0520  0022               	movlb	2	; select bank2
  5790  0521  00E7               	movwf	scaleA100kPot@input^(0+256)
  5791  0522  0024               	movlb	4	; select bank4
  5792  0523  0861               	movf	(_main$2835+1)^(0+512),w
  5793  0524  0022               	movlb	2	; select bank2
  5794  0525  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5795  0526  0024               	movlb	4	; select bank4
  5796  0527  0862               	movf	(_main$2835+2)^(0+512),w
  5797  0528  0022               	movlb	2	; select bank2
  5798  0529  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5799  052A  3199  21DE  3183   	fcall	_scaleA100kPot
  5800  052D  0022               	movlb	2	; select bank2
  5801  052E  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5802  052F  0025               	movlb	5	; select bank5
  5803  0530  0099               	movwf	25	;volatile
  5804  0531  0022               	movlb	2	; select bank2
  5805  0532  0867               	movf	?_scaleA100kPot^(0+256),w
  5806  0533  0025               	movlb	5	; select bank5
  5807  0534  0098               	movwf	24	;volatile
  5808  0535                     l9260:	
  5809                           
  5810                           ;main.c: 138: }
  5811                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5812  0535  0023               	movlb	3	; select bank3
  5813  0536  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5814  0537  0024               	movlb	4	; select bank4
  5815  0538  00D5               	movwf	??_main^(0+512)
  5816  0539  0023               	movlb	3	; select bank3
  5817  053A  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5818  053B  0024               	movlb	4	; select bank4
  5819  053C  00D6               	movwf	(??_main^(0+512)+1)
  5820  053D  0AD5               	incf	??_main^(0+512),f
  5821  053E  1903               	skipnz
  5822  053F  0AD6               	incf	(??_main^(0+512)+1),f
  5823  0540  0023               	movlb	3	; select bank3
  5824  0541  082C               	movf	_knob_3_pos^(0+384),w
  5825  0542  0024               	movlb	4	; select bank4
  5826  0543  0755               	addwf	??_main^(0+512),w
  5827  0544  00D7               	movwf	(??_main+2)^(0+512)
  5828  0545  0023               	movlb	3	; select bank3
  5829  0546  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5830  0547  0024               	movlb	4	; select bank4
  5831  0548  3D56               	addwfc	(??_main+1)^(0+512),w
  5832  0549  00D8               	movwf	(??_main+3)^(0+512)
  5833  054A  0858               	movf	(??_main+3)^(0+512),w
  5834  054B  3A80               	xorlw	128
  5835  054C  00D9               	movwf	(??_main+4)^(0+512)
  5836  054D  3080               	movlw	128
  5837  054E  0259               	subwf	(??_main+4)^(0+512),w
  5838  054F  1D03               	skipz
  5839  0550  2D53               	goto	u10225
  5840  0551  3004               	movlw	4
  5841  0552  0257               	subwf	(??_main+2)^(0+512),w
  5842  0553                     u10225:	
  5843  0553  1803               	skipnc
  5844  0554  2D75               	goto	l9264
  5845  0555  0023               	movlb	3	; select bank3
  5846  0556  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5847  0557  0024               	movlb	4	; select bank4
  5848  0558  00D5               	movwf	??_main^(0+512)
  5849  0559  0023               	movlb	3	; select bank3
  5850  055A  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5851  055B  0024               	movlb	4	; select bank4
  5852  055C  00D6               	movwf	(??_main^(0+512)+1)
  5853  055D  0AD5               	incf	??_main^(0+512),f
  5854  055E  1903               	skipnz
  5855  055F  0AD6               	incf	(??_main^(0+512)+1),f
  5856  0560  0023               	movlb	3	; select bank3
  5857  0561  082C               	movf	_knob_3_pos^(0+384),w
  5858  0562  0024               	movlb	4	; select bank4
  5859  0563  0755               	addwf	??_main^(0+512),w
  5860  0564  00D7               	movwf	(??_main+2)^(0+512)
  5861  0565  0023               	movlb	3	; select bank3
  5862  0566  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5863  0567  0024               	movlb	4	; select bank4
  5864  0568  3D56               	addwfc	(??_main+1)^(0+512),w
  5865  0569  00D8               	movwf	(??_main+3)^(0+512)
  5866  056A  0858               	movf	(??_main+3)^(0+512),w
  5867  056B  3A80               	xorlw	128
  5868  056C  00D9               	movwf	(??_main+4)^(0+512)
  5869  056D  307F               	movlw	127
  5870  056E  0259               	subwf	(??_main+4)^(0+512),w
  5871  056F  1D03               	skipz
  5872  0570  2D73               	goto	u10235
  5873  0571  30FD               	movlw	253
  5874  0572  0257               	subwf	(??_main+2)^(0+512),w
  5875  0573                     u10235:	
  5876  0573  1803               	skipnc
  5877  0574  2DE1               	goto	l9276
  5878  0575                     l9264:	
  5879                           
  5880                           ;main.c: 149: knob3_prev = knob_3_pos;
  5881  0575  0023               	movlb	3	; select bank3
  5882  0576  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5883  0577  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5884  0578  082C               	movf	_knob_3_pos^(0+384),w
  5885  0579  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5886                           
  5887                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5888  057A  3080               	movlw	128
  5889  057B  0021               	movlb	1	; select bank1
  5890  057C  00EA               	movwf	map@out_max^(0+128)
  5891  057D  309D               	movlw	157
  5892  057E  00EB               	movwf	(map@out_max+1)^(0+128)
  5893  057F  3043               	movlw	67
  5894  0580  00EC               	movwf	(map@out_max+2)^(0+128)
  5895  0581  3000               	movlw	0
  5896  0582  00E7               	movwf	map@out_min^(0+128)
  5897  0583  3034               	movlw	52
  5898  0584  00E8               	movwf	(map@out_min+1)^(0+128)
  5899  0585  3042               	movlw	66
  5900  0586  00E9               	movwf	(map@out_min+2)^(0+128)
  5901  0587  30C0               	movlw	192
  5902  0588  00E4               	movwf	map@in_max^(0+128)
  5903  0589  307F               	movlw	127
  5904  058A  00E5               	movwf	(map@in_max+1)^(0+128)
  5905  058B  3044               	movlw	68
  5906  058C  00E6               	movwf	(map@in_max+2)^(0+128)
  5907  058D  3000               	movlw	0
  5908  058E  00E1               	movwf	map@in_min^(0+128)
  5909  058F  3000               	movlw	0
  5910  0590  00E2               	movwf	(map@in_min+1)^(0+128)
  5911  0591  3000               	movlw	0
  5912  0592  00E3               	movwf	(map@in_min+2)^(0+128)
  5913  0593  0023               	movlb	3	; select bank3
  5914  0594  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5915  0595  0021               	movlb	1	; select bank1
  5916  0596  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5917  0597  0023               	movlb	3	; select bank3
  5918  0598  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5919  0599  0021               	movlb	1	; select bank1
  5920  059A  00A8               	movwf	___awtoft@c^(0+128)
  5921  059B  31AF  2767  3183   	fcall	___awtoft
  5922  059E  0021               	movlb	1	; select bank1
  5923  059F  0828               	movf	?___awtoft^(0+128),w
  5924  05A0  00DE               	movwf	map@x^(0+128)
  5925  05A1  0829               	movf	(?___awtoft+1)^(0+128),w
  5926  05A2  00DF               	movwf	(map@x+1)^(0+128)
  5927  05A3  082A               	movf	(?___awtoft+2)^(0+128),w
  5928  05A4  00E0               	movwf	(map@x+2)^(0+128)
  5929  05A5  319A  22EA  3183   	fcall	_map
  5930  05A8  0021               	movlb	1	; select bank1
  5931  05A9  085E               	movf	?_map^(0+128),w
  5932  05AA  0022               	movlb	2	; select bank2
  5933  05AB  00A0               	movwf	___fttol@f1^(0+256)
  5934  05AC  0021               	movlb	1	; select bank1
  5935  05AD  085F               	movf	(?_map+1)^(0+128),w
  5936  05AE  0022               	movlb	2	; select bank2
  5937  05AF  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5938  05B0  0021               	movlb	1	; select bank1
  5939  05B1  0860               	movf	(?_map+2)^(0+128),w
  5940  05B2  0022               	movlb	2	; select bank2
  5941  05B3  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5942  05B4  319A  2263  3183   	fcall	___fttol
  5943  05B7  0022               	movlb	2	; select bank2
  5944  05B8  0821               	movf	(?___fttol^(0+256)+1),w
  5945  05B9  0023               	movlb	3	; select bank3
  5946  05BA  00DC               	movwf	(_symmetry+1)^(0+384)
  5947  05BB  0022               	movlb	2	; select bank2
  5948  05BC  0820               	movf	?___fttol^(0+256),w
  5949  05BD  0023               	movlb	3	; select bank3
  5950  05BE  00DB               	movwf	_symmetry^(0+384)
  5951                           
  5952                           ;main.c: 152: modulation_changed = 1;
  5953  05BF  01C2               	clrf	_modulation_changed^(0+384)
  5954  05C0  0AC2               	incf	_modulation_changed^(0+384),f
  5955                           
  5956                           ;main.c: 153: if (symmetry > 174 && symmetry < 185) {
  5957  05C1  085C               	movf	(_symmetry+1)^(0+384),w
  5958  05C2  3A80               	xorlw	128
  5959  05C3  0024               	movlb	4	; select bank4
  5960  05C4  00D5               	movwf	??_main^(0+512)
  5961  05C5  3080               	movlw	128
  5962  05C6  0255               	subwf	??_main^(0+512),w
  5963  05C7  1D03               	skipz
  5964  05C8  2DCC               	goto	u10245
  5965  05C9  30AF               	movlw	175
  5966  05CA  0023               	movlb	3	; select bank3
  5967  05CB  025B               	subwf	_symmetry^(0+384),w
  5968  05CC                     u10245:	
  5969  05CC  1C03               	skipc
  5970  05CD  2DDF               	goto	l365
  5971  05CE  0023               	movlb	3	; select bank3
  5972  05CF  085C               	movf	(_symmetry+1)^(0+384),w
  5973  05D0  3A80               	xorlw	128
  5974  05D1  0024               	movlb	4	; select bank4
  5975  05D2  00D5               	movwf	??_main^(0+512)
  5976  05D3  3080               	movlw	128
  5977  05D4  0255               	subwf	??_main^(0+512),w
  5978  05D5  1D03               	skipz
  5979  05D6  2DDA               	goto	u10255
  5980  05D7  30B9               	movlw	185
  5981  05D8  0023               	movlb	3	; select bank3
  5982  05D9  025B               	subwf	_symmetry^(0+384),w
  5983  05DA                     u10255:	
  5984  05DA  1803               	skipnc
  5985  05DB  2DDF               	goto	l365
  5986                           
  5987                           ;main.c: 154: LATBbits.LATB1 = 1;
  5988  05DC  0022               	movlb	2	; select bank2
  5989  05DD  148D               	bsf	13,1	;volatile
  5990                           
  5991                           ;main.c: 155: } else {
  5992  05DE  2DE1               	goto	l9276
  5993  05DF                     l365:	
  5994                           
  5995                           ;main.c: 156: LATBbits.LATB1 = 0;
  5996  05DF  0022               	movlb	2	; select bank2
  5997  05E0  108D               	bcf	13,1	;volatile
  5998  05E1                     l9276:	
  5999                           
  6000                           ;main.c: 157: }
  6001                           ;main.c: 158: }
  6002                           ;main.c: 167: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6003  05E1  0023               	movlb	3	; select bank3
  6004  05E2  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6005  05E3  0024               	movlb	4	; select bank4
  6006  05E4  00D5               	movwf	??_main^(0+512)
  6007  05E5  0023               	movlb	3	; select bank3
  6008  05E6  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6009  05E7  0024               	movlb	4	; select bank4
  6010  05E8  00D6               	movwf	(??_main^(0+512)+1)
  6011  05E9  0AD5               	incf	??_main^(0+512),f
  6012  05EA  1903               	skipnz
  6013  05EB  0AD6               	incf	(??_main^(0+512)+1),f
  6014  05EC  0023               	movlb	3	; select bank3
  6015  05ED  082E               	movf	_knob_4_pos^(0+384),w
  6016  05EE  0024               	movlb	4	; select bank4
  6017  05EF  0755               	addwf	??_main^(0+512),w
  6018  05F0  00D7               	movwf	(??_main+2)^(0+512)
  6019  05F1  0023               	movlb	3	; select bank3
  6020  05F2  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6021  05F3  0024               	movlb	4	; select bank4
  6022  05F4  3D56               	addwfc	(??_main+1)^(0+512),w
  6023  05F5  00D8               	movwf	(??_main+3)^(0+512)
  6024  05F6  0858               	movf	(??_main+3)^(0+512),w
  6025  05F7  3A80               	xorlw	128
  6026  05F8  00D9               	movwf	(??_main+4)^(0+512)
  6027  05F9  3080               	movlw	128
  6028  05FA  0259               	subwf	(??_main+4)^(0+512),w
  6029  05FB  1D03               	skipz
  6030  05FC  2DFF               	goto	u10265
  6031  05FD  3004               	movlw	4
  6032  05FE  0257               	subwf	(??_main+2)^(0+512),w
  6033  05FF                     u10265:	
  6034  05FF  1803               	skipnc
  6035  0600  2E21               	goto	l9280
  6036  0601  0023               	movlb	3	; select bank3
  6037  0602  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6038  0603  0024               	movlb	4	; select bank4
  6039  0604  00D5               	movwf	??_main^(0+512)
  6040  0605  0023               	movlb	3	; select bank3
  6041  0606  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6042  0607  0024               	movlb	4	; select bank4
  6043  0608  00D6               	movwf	(??_main^(0+512)+1)
  6044  0609  0AD5               	incf	??_main^(0+512),f
  6045  060A  1903               	skipnz
  6046  060B  0AD6               	incf	(??_main^(0+512)+1),f
  6047  060C  0023               	movlb	3	; select bank3
  6048  060D  082E               	movf	_knob_4_pos^(0+384),w
  6049  060E  0024               	movlb	4	; select bank4
  6050  060F  0755               	addwf	??_main^(0+512),w
  6051  0610  00D7               	movwf	(??_main+2)^(0+512)
  6052  0611  0023               	movlb	3	; select bank3
  6053  0612  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6054  0613  0024               	movlb	4	; select bank4
  6055  0614  3D56               	addwfc	(??_main+1)^(0+512),w
  6056  0615  00D8               	movwf	(??_main+3)^(0+512)
  6057  0616  0858               	movf	(??_main+3)^(0+512),w
  6058  0617  3A80               	xorlw	128
  6059  0618  00D9               	movwf	(??_main+4)^(0+512)
  6060  0619  307F               	movlw	127
  6061  061A  0259               	subwf	(??_main+4)^(0+512),w
  6062  061B  1D03               	skipz
  6063  061C  2E1F               	goto	u10275
  6064  061D  30FD               	movlw	253
  6065  061E  0257               	subwf	(??_main+2)^(0+512),w
  6066  061F                     u10275:	
  6067  061F  1803               	skipnc
  6068  0620  2E72               	goto	l9286
  6069  0621                     l9280:	
  6070                           
  6071                           ;main.c: 168: knob4_prev = knob_4_pos;
  6072  0621  0023               	movlb	3	; select bank3
  6073  0622  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6074  0623  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6075  0624  082E               	movf	_knob_4_pos^(0+384),w
  6076  0625  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6077                           
  6078                           ;main.c: 169: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6079  0626  3040               	movlw	64
  6080  0627  0021               	movlb	1	; select bank1
  6081  0628  00EA               	movwf	map@out_max^(0+128)
  6082  0629  3030               	movlw	48
  6083  062A  00EB               	movwf	(map@out_max+1)^(0+128)
  6084  062B  3045               	movlw	69
  6085  062C  00EC               	movwf	(map@out_max+2)^(0+128)
  6086  062D  3000               	movlw	0
  6087  062E  00E7               	movwf	map@out_min^(0+128)
  6088  062F  3034               	movlw	52
  6089  0630  00E8               	movwf	(map@out_min+1)^(0+128)
  6090  0631  3043               	movlw	67
  6091  0632  00E9               	movwf	(map@out_min+2)^(0+128)
  6092  0633  30C0               	movlw	192
  6093  0634  00E4               	movwf	map@in_max^(0+128)
  6094  0635  307F               	movlw	127
  6095  0636  00E5               	movwf	(map@in_max+1)^(0+128)
  6096  0637  3044               	movlw	68
  6097  0638  00E6               	movwf	(map@in_max+2)^(0+128)
  6098  0639  3000               	movlw	0
  6099  063A  00E1               	movwf	map@in_min^(0+128)
  6100  063B  3000               	movlw	0
  6101  063C  00E2               	movwf	(map@in_min+1)^(0+128)
  6102  063D  3000               	movlw	0
  6103  063E  00E3               	movwf	(map@in_min+2)^(0+128)
  6104  063F  0023               	movlb	3	; select bank3
  6105  0640  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6106  0641  0021               	movlb	1	; select bank1
  6107  0642  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6108  0643  0023               	movlb	3	; select bank3
  6109  0644  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6110  0645  0021               	movlb	1	; select bank1
  6111  0646  00A8               	movwf	___awtoft@c^(0+128)
  6112  0647  31AF  2767  3183   	fcall	___awtoft
  6113  064A  0021               	movlb	1	; select bank1
  6114  064B  0828               	movf	?___awtoft^(0+128),w
  6115  064C  00DE               	movwf	map@x^(0+128)
  6116  064D  0829               	movf	(?___awtoft+1)^(0+128),w
  6117  064E  00DF               	movwf	(map@x+1)^(0+128)
  6118  064F  082A               	movf	(?___awtoft+2)^(0+128),w
  6119  0650  00E0               	movwf	(map@x+2)^(0+128)
  6120  0651  319A  22EA  3183   	fcall	_map
  6121  0654  0021               	movlb	1	; select bank1
  6122  0655  085E               	movf	?_map^(0+128),w
  6123  0656  0022               	movlb	2	; select bank2
  6124  0657  00A0               	movwf	___fttol@f1^(0+256)
  6125  0658  0021               	movlb	1	; select bank1
  6126  0659  085F               	movf	(?_map+1)^(0+128),w
  6127  065A  0022               	movlb	2	; select bank2
  6128  065B  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6129  065C  0021               	movlb	1	; select bank1
  6130  065D  0860               	movf	(?_map+2)^(0+128),w
  6131  065E  0022               	movlb	2	; select bank2
  6132  065F  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6133  0660  319A  2263  3183   	fcall	___fttol
  6134  0663  0022               	movlb	2	; select bank2
  6135  0664  0820               	movf	?___fttol^(0+256),w
  6136  0665  0023               	movlb	3	; select bank3
  6137  0666  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  6138  0667  0022               	movlb	2	; select bank2
  6139  0668  0821               	movf	(?___fttol^(0+256)+1),w
  6140  0669  0023               	movlb	3	; select bank3
  6141  066A  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6142  066B  0D89               	rlf	9,f
  6143  066C  3B89               	subwfb	9,f
  6144  066D  0989               	comf	9,f
  6145  066E  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6146  066F  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6147                           
  6148                           ;main.c: 170: mod_time_changed = 1;
  6149  0670  01E4               	clrf	_mod_time_changed^(0+384)
  6150  0671  0AE4               	incf	_mod_time_changed^(0+384),f
  6151  0672                     l9286:	
  6152                           
  6153                           ;main.c: 172: }
  6154                           ;main.c: 175: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6155  0672  0023               	movlb	3	; select bank3
  6156  0673  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6157  0674  0024               	movlb	4	; select bank4
  6158  0675  00D5               	movwf	??_main^(0+512)
  6159  0676  0023               	movlb	3	; select bank3
  6160  0677  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6161  0678  0024               	movlb	4	; select bank4
  6162  0679  00D6               	movwf	(??_main^(0+512)+1)
  6163  067A  0AD5               	incf	??_main^(0+512),f
  6164  067B  1903               	skipnz
  6165  067C  0AD6               	incf	(??_main^(0+512)+1),f
  6166  067D  0023               	movlb	3	; select bank3
  6167  067E  0830               	movf	_knob_5_pos^(0+384),w
  6168  067F  0024               	movlb	4	; select bank4
  6169  0680  0755               	addwf	??_main^(0+512),w
  6170  0681  00D7               	movwf	(??_main+2)^(0+512)
  6171  0682  0023               	movlb	3	; select bank3
  6172  0683  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6173  0684  0024               	movlb	4	; select bank4
  6174  0685  3D56               	addwfc	(??_main+1)^(0+512),w
  6175  0686  00D8               	movwf	(??_main+3)^(0+512)
  6176  0687  0858               	movf	(??_main+3)^(0+512),w
  6177  0688  3A80               	xorlw	128
  6178  0689  00D9               	movwf	(??_main+4)^(0+512)
  6179  068A  3080               	movlw	128
  6180  068B  0259               	subwf	(??_main+4)^(0+512),w
  6181  068C  1D03               	skipz
  6182  068D  2E90               	goto	u10285
  6183  068E  3004               	movlw	4
  6184  068F  0257               	subwf	(??_main+2)^(0+512),w
  6185  0690                     u10285:	
  6186  0690  1803               	skipnc
  6187  0691  2EB2               	goto	l9290
  6188  0692  0023               	movlb	3	; select bank3
  6189  0693  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6190  0694  0024               	movlb	4	; select bank4
  6191  0695  00D5               	movwf	??_main^(0+512)
  6192  0696  0023               	movlb	3	; select bank3
  6193  0697  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6194  0698  0024               	movlb	4	; select bank4
  6195  0699  00D6               	movwf	(??_main^(0+512)+1)
  6196  069A  0AD5               	incf	??_main^(0+512),f
  6197  069B  1903               	skipnz
  6198  069C  0AD6               	incf	(??_main^(0+512)+1),f
  6199  069D  0023               	movlb	3	; select bank3
  6200  069E  0830               	movf	_knob_5_pos^(0+384),w
  6201  069F  0024               	movlb	4	; select bank4
  6202  06A0  0755               	addwf	??_main^(0+512),w
  6203  06A1  00D7               	movwf	(??_main+2)^(0+512)
  6204  06A2  0023               	movlb	3	; select bank3
  6205  06A3  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6206  06A4  0024               	movlb	4	; select bank4
  6207  06A5  3D56               	addwfc	(??_main+1)^(0+512),w
  6208  06A6  00D8               	movwf	(??_main+3)^(0+512)
  6209  06A7  0858               	movf	(??_main+3)^(0+512),w
  6210  06A8  3A80               	xorlw	128
  6211  06A9  00D9               	movwf	(??_main+4)^(0+512)
  6212  06AA  307F               	movlw	127
  6213  06AB  0259               	subwf	(??_main+4)^(0+512),w
  6214  06AC  1D03               	skipz
  6215  06AD  2EB0               	goto	u10295
  6216  06AE  30FD               	movlw	253
  6217  06AF  0257               	subwf	(??_main+2)^(0+512),w
  6218  06B0                     u10295:	
  6219  06B0  1803               	skipnc
  6220  06B1  2EFC               	goto	l9294
  6221  06B2                     l9290:	
  6222                           
  6223                           ;main.c: 176: knob5_prev = knob_5_pos;
  6224  06B2  0023               	movlb	3	; select bank3
  6225  06B3  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6226  06B4  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6227  06B5  0830               	movf	_knob_5_pos^(0+384),w
  6228  06B6  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6229                           
  6230                           ;main.c: 177: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6231  06B7  3000               	movlw	0
  6232  06B8  0021               	movlb	1	; select bank1
  6233  06B9  00EA               	movwf	map@out_max^(0+128)
  6234  06BA  3000               	movlw	0
  6235  06BB  00EB               	movwf	(map@out_max+1)^(0+128)
  6236  06BC  3000               	movlw	0
  6237  06BD  00EC               	movwf	(map@out_max+2)^(0+128)
  6238  06BE  3060               	movlw	96
  6239  06BF  00E7               	movwf	map@out_min^(0+128)
  6240  06C0  309F               	movlw	159
  6241  06C1  00E8               	movwf	(map@out_min+1)^(0+128)
  6242  06C2  3044               	movlw	68
  6243  06C3  00E9               	movwf	(map@out_min+2)^(0+128)
  6244  06C4  30C0               	movlw	192
  6245  06C5  00E4               	movwf	map@in_max^(0+128)
  6246  06C6  307F               	movlw	127
  6247  06C7  00E5               	movwf	(map@in_max+1)^(0+128)
  6248  06C8  3044               	movlw	68
  6249  06C9  00E6               	movwf	(map@in_max+2)^(0+128)
  6250  06CA  3000               	movlw	0
  6251  06CB  00E1               	movwf	map@in_min^(0+128)
  6252  06CC  3000               	movlw	0
  6253  06CD  00E2               	movwf	(map@in_min+1)^(0+128)
  6254  06CE  3000               	movlw	0
  6255  06CF  00E3               	movwf	(map@in_min+2)^(0+128)
  6256  06D0  0023               	movlb	3	; select bank3
  6257  06D1  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6258  06D2  0021               	movlb	1	; select bank1
  6259  06D3  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6260  06D4  0023               	movlb	3	; select bank3
  6261  06D5  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6262  06D6  0021               	movlb	1	; select bank1
  6263  06D7  00A8               	movwf	___awtoft@c^(0+128)
  6264  06D8  31AF  2767  3183   	fcall	___awtoft
  6265  06DB  0021               	movlb	1	; select bank1
  6266  06DC  0828               	movf	?___awtoft^(0+128),w
  6267  06DD  00DE               	movwf	map@x^(0+128)
  6268  06DE  0829               	movf	(?___awtoft+1)^(0+128),w
  6269  06DF  00DF               	movwf	(map@x+1)^(0+128)
  6270  06E0  082A               	movf	(?___awtoft+2)^(0+128),w
  6271  06E1  00E0               	movwf	(map@x+2)^(0+128)
  6272  06E2  319A  22EA  3183   	fcall	_map
  6273  06E5  0021               	movlb	1	; select bank1
  6274  06E6  085E               	movf	?_map^(0+128),w
  6275  06E7  0022               	movlb	2	; select bank2
  6276  06E8  00A0               	movwf	___fttol@f1^(0+256)
  6277  06E9  0021               	movlb	1	; select bank1
  6278  06EA  085F               	movf	(?_map+1)^(0+128),w
  6279  06EB  0022               	movlb	2	; select bank2
  6280  06EC  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6281  06ED  0021               	movlb	1	; select bank1
  6282  06EE  0860               	movf	(?_map+2)^(0+128),w
  6283  06EF  0022               	movlb	2	; select bank2
  6284  06F0  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6285  06F1  319A  2263  3183   	fcall	___fttol
  6286  06F4  0022               	movlb	2	; select bank2
  6287  06F5  0821               	movf	(?___fttol^(0+256)+1),w
  6288  06F6  0024               	movlb	4	; select bank4
  6289  06F7  00C2               	movwf	(_adjusted_pot_value+1)^(0+512)
  6290  06F8  0022               	movlb	2	; select bank2
  6291  06F9  0820               	movf	?___fttol^(0+256),w
  6292  06FA  0024               	movlb	4	; select bank4
  6293  06FB  00C1               	movwf	_adjusted_pot_value^(0+512)
  6294  06FC                     l9294:	
  6295                           
  6296                           ;main.c: 178: }
  6297                           ;main.c: 183: if (mod_time_changed == 1) {
  6298  06FC  0023               	movlb	3	; select bank3
  6299  06FD  0364               	decf	_mod_time_changed^(0+384),w
  6300  06FE  1D03               	btfss	3,2
  6301  06FF  2F36               	goto	l9306
  6302                           
  6303                           ;main.c: 185: delay_time = baseline_mod_time;
  6304  0700  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
  6305  0701  0020               	movlb	0	; select bank0
  6306  0702  00D5               	movwf	_delay_time+3	;volatile
  6307  0703  0023               	movlb	3	; select bank3
  6308  0704  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
  6309  0705  0020               	movlb	0	; select bank0
  6310  0706  00D4               	movwf	_delay_time+2	;volatile
  6311  0707  0023               	movlb	3	; select bank3
  6312  0708  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6313  0709  0020               	movlb	0	; select bank0
  6314  070A  00D3               	movwf	_delay_time+1	;volatile
  6315  070B  0023               	movlb	3	; select bank3
  6316  070C  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6317  070D  0020               	movlb	0	; select bank0
  6318  070E  00D2               	movwf	_delay_time	;volatile
  6319                           
  6320                           ;main.c: 186: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6321  070F  0023               	movlb	3	; select bank3
  6322  0710  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6323  0711  0022               	movlb	2	; select bank2
  6324  0712  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6325  0713  0023               	movlb	3	; select bank3
  6326  0714  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6327  0715  0022               	movlb	2	; select bank2
  6328  0716  00AE               	movwf	set_subdivision@x^(0+256)
  6329  0717  0020               	movlb	0	; select bank0
  6330  0718  085B               	movf	_top_push_state+1,w
  6331  0719  0022               	movlb	2	; select bank2
  6332  071A  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6333  071B  0020               	movlb	0	; select bank0
  6334  071C  085A               	movf	_top_push_state,w
  6335  071D  0022               	movlb	2	; select bank2
  6336  071E  00B0               	movwf	set_subdivision@y^(0+256)
  6337  071F  319B  2375  3183   	fcall	_set_subdivision
  6338  0722  0022               	movlb	2	; select bank2
  6339  0723  082E               	movf	?_set_subdivision^(0+256),w
  6340  0724  0020               	movlb	0	; select bank0
  6341  0725  00D2               	movwf	_delay_time	;volatile
  6342  0726  0022               	movlb	2	; select bank2
  6343  0727  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6344  0728  0020               	movlb	0	; select bank0
  6345  0729  00D3               	movwf	_delay_time+1	;volatile
  6346  072A  0D89               	rlf	9,f
  6347  072B  3B89               	subwfb	9,f
  6348  072C  0989               	comf	9,f
  6349  072D  00D4               	movwf	_delay_time+2	;volatile
  6350  072E  00D5               	movwf	_delay_time+3	;volatile
  6351                           
  6352                           ;main.c: 187: getModulationDelayTime();
  6353  072F  31A6  260C  3183   	fcall	_getModulationDelayTime
  6354                           
  6355                           ;main.c: 188: modulation_changed = 1;
  6356  0732  0023               	movlb	3	; select bank3
  6357  0733  01C2               	clrf	_modulation_changed^(0+384)
  6358  0734  0AC2               	incf	_modulation_changed^(0+384),f
  6359                           
  6360                           ;main.c: 189: mod_time_changed = 0;
  6361  0735  01E4               	clrf	_mod_time_changed^(0+384)
  6362  0736                     l9306:	
  6363                           
  6364                           ;main.c: 190: }
  6365                           ;main.c: 193: if (modulation_changed == 1) {
  6366  0736  0342               	decf	_modulation_changed^(0+384),w
  6367  0737  1D03               	btfss	3,2
  6368  0738  2B87               	goto	l9206
  6369                           
  6370                           ;main.c: 194: updateModulationArray();
  6371  0739  318D  25DD  3183   	fcall	_updateModulationArray
  6372                           
  6373                           ;main.c: 195: isInitialized = 1;
  6374  073C  0023               	movlb	3	; select bank3
  6375  073D  01BE               	clrf	_isInitialized^(0+384)
  6376  073E  0ABE               	incf	_isInitialized^(0+384),f
  6377  073F  2B87               	goto	l9206
  6378  0740                     __end_of_main:	
  6379                           
  6380                           	psect	text1
  6381  1800                     __ptext1:	
  6382 ;; *************** function _update_selectMode *****************
  6383 ;; Defined at:
  6384 ;;		line 139 in file "tactiles.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;		None
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;		None
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  1    wreg      void 
  6391 ;; Registers used:
  6392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6400 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6401 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6402 ;;Total ram usage:        1 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    5
  6405 ;; This function calls:
  6406 ;;		_setExpressionDisplay
  6407 ;;		_setPresetDisplay
  6408 ;; This function is called by:
  6409 ;;		_main
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           
  6414                           ;psect for function _update_selectMode
  6415  1800                     _update_selectMode:	
  6416                           
  6417                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6418                           
  6419                           ;incstack = 0
  6420                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6421  1800  0020               	movlb	0	; select bank0
  6422  1801  0850               	movf	_mode2_state,w
  6423  1802  1D03               	btfss	3,2
  6424  1803  2807               	goto	l1005
  6425  1804  0351               	decf	_presetSaveMode,w
  6426  1805  1D03               	btfss	3,2
  6427  1806  0008               	return
  6428  1807                     l1005:	
  6429                           ;tactiles.c: 142: return;
  6430                           
  6431                           
  6432                           ;tactiles.c: 143: }
  6433                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6434  1807  1B8F               	btfsc	15,7	;volatile
  6435  1808  2855               	goto	l8804
  6436                           
  6437                           ;tactiles.c: 145: debounce_mode1++;
  6438  1809  3001               	movlw	1
  6439  180A  0024               	movlb	4	; select bank4
  6440  180B  07C7               	addwf	_debounce_mode1^(0+512),f
  6441  180C  3000               	movlw	0
  6442  180D  3DC8               	addwfc	(_debounce_mode1+1)^(0+512),f
  6443                           
  6444                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6445  180E  0848               	movf	(_debounce_mode1+1)^(0+512),w
  6446  180F  3A80               	xorlw	128
  6447  1810  0021               	movlb	1	; select bank1
  6448  1811  00A7               	movwf	??_update_selectMode^(0+128)
  6449  1812  3080               	movlw	128
  6450  1813  0227               	subwf	??_update_selectMode^(0+128),w
  6451  1814  1D03               	skipz
  6452  1815  2819               	goto	u9405
  6453  1816  301A               	movlw	26
  6454  1817  0024               	movlb	4	; select bank4
  6455  1818  0247               	subwf	_debounce_mode1^(0+512),w
  6456  1819                     u9405:	
  6457  1819  1C03               	skipc
  6458  181A  0008               	return
  6459                           
  6460                           ;tactiles.c: 147: debounce_mode1 = 25;
  6461  181B  3019               	movlw	25
  6462  181C  0024               	movlb	4	; select bank4
  6463  181D  00C7               	movwf	_debounce_mode1^(0+512)
  6464  181E  3000               	movlw	0
  6465  181F  00C8               	movwf	(_debounce_mode1^(0+512)+1)
  6466                           
  6467                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6468  1820  0020               	movlb	0	; select bank0
  6469  1821  0850               	movf	_mode2_state,w
  6470  1822  0023               	movlb	3	; select bank3
  6471  1823  0665               	xorwf	_presetModeCnst^(0+384),w
  6472  1824  1903               	skipnz
  6473  1825  282A               	goto	l8786
  6474  1826  0020               	movlb	0	; select bank0
  6475  1827  0351               	decf	_presetSaveMode,w
  6476  1828  1D03               	btfss	3,2
  6477  1829  283B               	goto	l8794
  6478  182A                     l8786:	
  6479                           
  6480                           ;tactiles.c: 149: presetChannel++;
  6481  182A  3001               	movlw	1
  6482  182B  0021               	movlb	1	; select bank1
  6483  182C  00A7               	movwf	??_update_selectMode^(0+128)
  6484  182D  0827               	movf	??_update_selectMode^(0+128),w
  6485  182E  0022               	movlb	2	; select bank2
  6486  182F  07EF               	addwf	_presetChannel^(0+256),f
  6487                           
  6488                           ;tactiles.c: 150: if (presetChannel > 10) {
  6489  1830  300B               	movlw	11
  6490  1831  026F               	subwf	_presetChannel^(0+256),w
  6491  1832  1C03               	skipc
  6492  1833  2836               	goto	l8792
  6493                           
  6494                           ;tactiles.c: 151: presetChannel = 1;
  6495  1834  01EF               	clrf	_presetChannel^(0+256)
  6496  1835  0AEF               	incf	_presetChannel^(0+256),f
  6497  1836                     l8792:	
  6498                           
  6499                           ;tactiles.c: 152: }
  6500                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6501  1836  086F               	movf	_presetChannel^(0+256),w
  6502  1837  31A1  218B  3198   	fcall	_setPresetDisplay
  6503                           
  6504                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6505  183A  2851               	goto	l1016
  6506  183B                     l8794:	
  6507  183B  0020               	movlb	0	; select bank0
  6508  183C  0850               	movf	_mode2_state,w
  6509  183D  0023               	movlb	3	; select bank3
  6510  183E  0662               	xorwf	_expressModeCnst^(0+384),w
  6511  183F  1D03               	skipz
  6512  1840  2851               	goto	l1016
  6513                           
  6514                           ;tactiles.c: 155: expressionChannel++;
  6515  1841  3001               	movlw	1
  6516  1842  0021               	movlb	1	; select bank1
  6517  1843  00A7               	movwf	??_update_selectMode^(0+128)
  6518  1844  0827               	movf	??_update_selectMode^(0+128),w
  6519  1845  0023               	movlb	3	; select bank3
  6520  1846  07E3               	addwf	_expressionChannel^(0+384),f
  6521                           
  6522                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6523  1847  3006               	movlw	6
  6524  1848  0263               	subwf	_expressionChannel^(0+384),w
  6525  1849  1C03               	skipc
  6526  184A  284D               	goto	l8802
  6527                           
  6528                           ;tactiles.c: 157: expressionChannel = 1;
  6529  184B  01E3               	clrf	_expressionChannel^(0+384)
  6530  184C  0AE3               	incf	_expressionChannel^(0+384),f
  6531  184D                     l8802:	
  6532                           
  6533                           ;tactiles.c: 158: }
  6534                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6535  184D  0863               	movf	_expressionChannel^(0+384),w
  6536  184E  31AE  2682  3198   	fcall	_setExpressionDisplay
  6537  1851                     l1016:	
  6538                           ;tactiles.c: 160: }
  6539                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6540                           
  6541  1851  0020               	movlb	0	; select bank0
  6542  1852  1B8F               	btfsc	15,7	;volatile
  6543  1853  0008               	return
  6544  1854  2851               	goto	l1016
  6545  1855                     l8804:	
  6546                           ;tactiles.c: 168: }
  6547                           ;tactiles.c: 169: }
  6548                           ;tactiles.c: 170: } else {
  6549                           
  6550                           
  6551                           ;tactiles.c: 171: debounce_mode1 = 0;
  6552  1855  0024               	movlb	4	; select bank4
  6553  1856  01C7               	clrf	_debounce_mode1^(0+512)
  6554  1857  01C8               	clrf	(_debounce_mode1+1)^(0+512)
  6555  1858  0008               	return
  6556  1859                     __end_of_update_selectMode:	
  6557                           
  6558                           	psect	text2
  6559  2153                     __ptext2:	
  6560 ;; *************** function _update_mode *****************
  6561 ;; Defined at:
  6562 ;;		line 87 in file "tactiles.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;		None
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;		None
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  1    wreg      void 
  6569 ;; Registers used:
  6570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6578 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6579 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6580 ;;Total ram usage:        1 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    6
  6583 ;; This function calls:
  6584 ;;		_resetRingLEDs
  6585 ;;		_setPedalMode
  6586 ;; This function is called by:
  6587 ;;		_main
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           
  6592                           ;psect for function _update_mode
  6593  2153                     _update_mode:	
  6594                           
  6595                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6596                           
  6597                           ;incstack = 0
  6598                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6599  2153  0020               	movlb	0	; select bank0
  6600  2154  180E               	btfsc	14,0	;volatile
  6601  2155  2987               	goto	l8772
  6602                           
  6603                           ;tactiles.c: 95: debounce_mode2++;
  6604  2156  3001               	movlw	1
  6605  2157  0024               	movlb	4	; select bank4
  6606  2158  07C9               	addwf	_debounce_mode2^(0+512),f
  6607  2159  3000               	movlw	0
  6608  215A  3DCA               	addwfc	(_debounce_mode2+1)^(0+512),f
  6609                           
  6610                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6611  215B  084A               	movf	(_debounce_mode2+1)^(0+512),w
  6612  215C  3A80               	xorlw	128
  6613  215D  0021               	movlb	1	; select bank1
  6614  215E  00A7               	movwf	??_update_mode^(0+128)
  6615  215F  3080               	movlw	128
  6616  2160  0227               	subwf	??_update_mode^(0+128),w
  6617  2161  1D03               	skipz
  6618  2162  2966               	goto	u9335
  6619  2163  301A               	movlw	26
  6620  2164  0024               	movlb	4	; select bank4
  6621  2165  0249               	subwf	_debounce_mode2^(0+512),w
  6622  2166                     u9335:	
  6623  2166  1C03               	skipc
  6624  2167  0008               	return
  6625                           
  6626                           ;tactiles.c: 97: debounce_mode2 = 25;
  6627  2168  3019               	movlw	25
  6628  2169  0024               	movlb	4	; select bank4
  6629  216A  00C9               	movwf	_debounce_mode2^(0+512)
  6630  216B  3000               	movlw	0
  6631  216C  00CA               	movwf	(_debounce_mode2^(0+512)+1)
  6632                           
  6633                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6634  216D  0020               	movlb	0	; select bank0
  6635  216E  0351               	decf	_presetSaveMode,w
  6636  216F  1D03               	btfss	3,2
  6637  2170  2976               	goto	l8764
  6638                           
  6639                           ;tactiles.c: 100: presetSaveMode = 0;
  6640  2171  01D1               	clrf	_presetSaveMode
  6641                           
  6642                           ;tactiles.c: 101: resetRingLEDs();
  6643  2172  31AE  269A  31A1   	fcall	_resetRingLEDs
  6644                           
  6645                           ;tactiles.c: 102: } else {
  6646  2175  2980               	goto	l8770
  6647  2176                     l8764:	
  6648                           
  6649                           ;tactiles.c: 103: mode2_state++;
  6650  2176  3001               	movlw	1
  6651  2177  0021               	movlb	1	; select bank1
  6652  2178  00A7               	movwf	??_update_mode^(0+128)
  6653  2179  0827               	movf	??_update_mode^(0+128),w
  6654  217A  0020               	movlb	0	; select bank0
  6655  217B  07D0               	addwf	_mode2_state,f
  6656                           
  6657                           ;tactiles.c: 104: if (mode2_state > 2) {
  6658  217C  3003               	movlw	3
  6659  217D  0250               	subwf	_mode2_state,w
  6660  217E  1803               	btfsc	3,0
  6661                           
  6662                           ;tactiles.c: 105: mode2_state = 0;
  6663  217F  01D0               	clrf	_mode2_state
  6664  2180                     l8770:	
  6665                           
  6666                           ;tactiles.c: 106: }
  6667                           ;tactiles.c: 107: }
  6668                           ;tactiles.c: 109: setPedalMode();
  6669  2180  31AF  2789  31A1   	fcall	_setPedalMode
  6670  2183                     l990:	
  6671                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6672                           
  6673  2183  0020               	movlb	0	; select bank0
  6674  2184  180E               	btfsc	14,0	;volatile
  6675  2185  0008               	return
  6676  2186  2983               	goto	l990
  6677  2187                     l8772:	
  6678                           ;tactiles.c: 111: }
  6679                           ;tactiles.c: 112: }
  6680                           ;tactiles.c: 113: } else {
  6681                           
  6682                           
  6683                           ;tactiles.c: 114: debounce_mode2 = 0;
  6684  2187  0024               	movlb	4	; select bank4
  6685  2188  01C9               	clrf	_debounce_mode2^(0+512)
  6686  2189  01CA               	clrf	(_debounce_mode2+1)^(0+512)
  6687  218A  0008               	return
  6688  218B                     __end_of_update_mode:	
  6689                           
  6690                           	psect	text3
  6691  09FB                     __ptext3:	
  6692 ;; *************** function _updateSwitchTap *****************
  6693 ;; Defined at:
  6694 ;;		line 48 in file "SwitchTap.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;		None
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6699 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6710 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6711 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6712 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6713 ;;Total ram usage:        9 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    8
  6716 ;; This function calls:
  6717 ;;		___aldiv
  6718 ;;		_setDoublePressState
  6719 ;;		_setLongTapState
  6720 ;; This function is called by:
  6721 ;;		_main
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           
  6726                           ;psect for function _updateSwitchTap
  6727  09FB                     _updateSwitchTap:	
  6728                           
  6729                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6730                           
  6731                           ;incstack = 0
  6732                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6733  09FB  0021               	movlb	1	; select bank1
  6734  09FC  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6735                           
  6736                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6737  09FD  0020               	movlb	0	; select bank0
  6738  09FE  1810               	btfsc	16,0	;volatile
  6739  09FF  2A07               	goto	l8928
  6740                           
  6741                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6742  0A00  0022               	movlb	2	; select bank2
  6743  0A01  086E               	movf	_switchTap_pressed^(0+256),w
  6744  0A02  1903               	btfsc	3,2
  6745  0A03  2A12               	goto	l1419
  6746                           
  6747                           ;SwitchTap.c: 59: switchTap_pressed--;
  6748  0A04  3001               	movlw	1
  6749  0A05  02EE               	subwf	_switchTap_pressed^(0+256),f
  6750                           
  6751                           ;SwitchTap.c: 60: }
  6752                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6753  0A06  2A12               	goto	l1419
  6754  0A07                     l8928:	
  6755  0A07  3019               	movlw	25
  6756  0A08  0022               	movlb	2	; select bank2
  6757  0A09  026E               	subwf	_switchTap_pressed^(0+256),w
  6758  0A0A  1803               	skipnc
  6759  0A0B  2A12               	goto	l1419
  6760                           
  6761                           ;SwitchTap.c: 62: switchTap_pressed++;
  6762  0A0C  3001               	movlw	1
  6763  0A0D  0021               	movlb	1	; select bank1
  6764  0A0E  00BC               	movwf	??_updateSwitchTap^(0+128)
  6765  0A0F  083C               	movf	??_updateSwitchTap^(0+128),w
  6766  0A10  0022               	movlb	2	; select bank2
  6767  0A11  07EE               	addwf	_switchTap_pressed^(0+256),f
  6768  0A12                     l1419:	
  6769                           
  6770                           ;SwitchTap.c: 63: }
  6771                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6772  0A12  086E               	movf	_switchTap_pressed^(0+256),w
  6773  0A13  1D03               	btfss	3,2
  6774  0A14  2BC8               	goto	l9012
  6775                           
  6776                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6777  0A15  0020               	movlb	0	; select bank0
  6778  0A16  1BC7               	btfsc	_tap_timer+3,7	;volatile
  6779  0A17  2A9D               	goto	l8972
  6780  0A18  0847               	movf	_tap_timer+3,w	;volatile
  6781  0A19  1D03               	btfss	3,2
  6782  0A1A  2A24               	goto	l8934
  6783  0A1B  0846               	movf	_tap_timer+2,w	;volatile
  6784  0A1C  1D03               	btfss	3,2
  6785  0A1D  2A24               	goto	l8934
  6786  0A1E  301B               	movlw	27
  6787  0A1F  0244               	subwf	_tap_timer,w	;volatile
  6788  0A20  3006               	movlw	6
  6789  0A21  3B45               	subwfb	_tap_timer+1,w	;volatile
  6790  0A22  1C03               	btfss	3,0
  6791  0A23  2A9D               	goto	l8972
  6792  0A24                     l8934:	
  6793                           
  6794                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6795  0A24  0023               	movlb	3	; select bank3
  6796  0A25  0345               	decf	_switchTap_down^(0+384),w
  6797  0A26  1903               	btfsc	3,2
  6798  0A27  2A63               	goto	l8950
  6799                           
  6800                           ;SwitchTap.c: 78: switchTap_down = 1;
  6801  0A28  01C5               	clrf	_switchTap_down^(0+384)
  6802  0A29  0AC5               	incf	_switchTap_down^(0+384),f
  6803                           
  6804                           ;SwitchTap.c: 79: tap_timer = 0;
  6805  0A2A  3000               	movlw	0
  6806  0A2B  0020               	movlb	0	; select bank0
  6807  0A2C  00C7               	movwf	_tap_timer+3	;volatile
  6808  0A2D  3000               	movlw	0
  6809  0A2E  00C6               	movwf	_tap_timer+2	;volatile
  6810  0A2F  3000               	movlw	0
  6811  0A30  00C5               	movwf	_tap_timer+1	;volatile
  6812  0A31  3000               	movlw	0
  6813  0A32  00C4               	movwf	_tap_timer	;volatile
  6814                           
  6815                           ;SwitchTap.c: 80: tap_iteration = 1;
  6816  0A33  3001               	movlw	1
  6817  0A34  0023               	movlb	3	; select bank3
  6818  0A35  00DD               	movwf	_tap_iteration^(0+384)
  6819  0A36  3000               	movlw	0
  6820  0A37  00DE               	movwf	(_tap_iteration^(0+384)+1)
  6821                           
  6822                           ;SwitchTap.c: 81: tap_total = 0;
  6823  0A38  3000               	movlw	0
  6824  0A39  0024               	movlb	4	; select bank4
  6825  0A3A  00C0               	movwf	(_tap_total+3)^(0+512)
  6826  0A3B  3000               	movlw	0
  6827  0A3C  00BF               	movwf	(_tap_total+2)^(0+512)
  6828  0A3D  3000               	movlw	0
  6829  0A3E  00BE               	movwf	(_tap_total+1)^(0+512)
  6830  0A3F  3000               	movlw	0
  6831  0A40  00BD               	movwf	_tap_total^(0+512)
  6832                           
  6833                           ;SwitchTap.c: 82: mod_time_changed = 0;
  6834  0A41  0023               	movlb	3	; select bank3
  6835  0A42  01E4               	clrf	_mod_time_changed^(0+384)
  6836                           
  6837                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6838  0A43  0021               	movlb	1	; select bank1
  6839  0A44  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6840  0A45  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6841  0A46                     l8948:	
  6842  0A46  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6843  0A47  0020               	movlb	0	; select bank0
  6844  0A48  025E               	subwf	_num_taps,w
  6845  0A49  1C03               	btfss	3,0
  6846  0A4A  2A63               	goto	l8950
  6847                           
  6848                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6849  0A4B  0021               	movlb	1	; select bank1
  6850  0A4C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6851  0A4D  00BC               	movwf	??_updateSwitchTap^(0+128)
  6852  0A4E  3001               	movlw	1
  6853  0A4F                     u9775:	
  6854  0A4F  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6855  0A50  3EFF               	addlw	-1
  6856  0A51  1D03               	skipz
  6857  0A52  2A4F               	goto	u9775
  6858  0A53  353C               	lslf	??_updateSwitchTap^(0+128),w
  6859  0A54  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6860  0A55  0086               	movwf	6
  6861  0A56  3002               	movlw	2	; select bank4/5
  6862  0A57  0087               	movwf	7
  6863  0A58  3000               	movlw	0
  6864  0A59  3FC0               	movwi [0]fsr1
  6865  0A5A  3000               	movlw	0
  6866  0A5B  3FC1               	movwi [1]fsr1
  6867  0A5C  3FC2               	movwi [2]fsr1
  6868  0A5D  3FC3               	movwi [3]fsr1
  6869  0A5E  3001               	movlw	1
  6870  0A5F  00BC               	movwf	??_updateSwitchTap^(0+128)
  6871  0A60  083C               	movf	??_updateSwitchTap^(0+128),w
  6872  0A61  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6873  0A62  2A46               	goto	l8948
  6874  0A63                     l8950:	
  6875                           
  6876                           ;SwitchTap.c: 86: }
  6877                           ;SwitchTap.c: 87: }
  6878                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6879  0A63  0022               	movlb	2	; select bank2
  6880  0A64  086B               	movf	_longTap_start^(0+256),w
  6881  0A65  1D03               	btfss	3,2
  6882  0A66  2A6E               	goto	l8956
  6883                           
  6884                           ;SwitchTap.c: 91: longTap_start = 1;
  6885  0A67  01EB               	clrf	_longTap_start^(0+256)
  6886  0A68  0AEB               	incf	_longTap_start^(0+256),f
  6887                           
  6888                           ;SwitchTap.c: 92: longTap_state = 0;
  6889  0A69  0020               	movlb	0	; select bank0
  6890  0A6A  01DD               	clrf	_longTap_state	;volatile
  6891                           
  6892                           ;SwitchTap.c: 93: longTap_timer = 0;
  6893  0A6B  0023               	movlb	3	; select bank3
  6894  0A6C  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  6895  0A6D  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6896  0A6E                     l8956:	
  6897                           
  6898                           ;SwitchTap.c: 94: }
  6899                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6900  0A6E  0020               	movlb	0	; select bank0
  6901  0A6F  0859               	movf	_long_press_limit+1,w
  6902  0A70  0023               	movlb	3	; select bank3
  6903  0A71  0235               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6904  0A72  1D03               	skipz
  6905  0A73  2A78               	goto	u9805
  6906  0A74  0020               	movlb	0	; select bank0
  6907  0A75  0858               	movf	_long_press_limit,w
  6908  0A76  0023               	movlb	3	; select bank3
  6909  0A77  0234               	subwf	_longTap_timer^(0+384),w	;volatile
  6910  0A78                     u9805:	
  6911  0A78  1C03               	skipc
  6912  0A79  0008               	return
  6913  0A7A  0020               	movlb	0	; select bank0
  6914  0A7B  085D               	movf	_longTap_state,w	;volatile
  6915  0A7C  1D03               	btfss	3,2
  6916  0A7D  0008               	return
  6917  0A7E  084E               	movf	_doubleTap_state,w	;volatile
  6918  0A7F  1D03               	btfss	3,2
  6919  0A80  0008               	return
  6920                           
  6921                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6922  0A81  0859               	movf	_long_press_limit+1,w
  6923  0A82  0023               	movlb	3	; select bank3
  6924  0A83  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6925  0A84  0020               	movlb	0	; select bank0
  6926  0A85  0858               	movf	_long_press_limit,w
  6927  0A86  0023               	movlb	3	; select bank3
  6928  0A87  00B4               	movwf	_longTap_timer^(0+384)	;volatile
  6929                           
  6930                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6931  0A88  0022               	movlb	2	; select bank2
  6932  0A89  120D               	bcf	13,4	;volatile
  6933                           
  6934                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6935  0A8A  036A               	decf	_longBypass_start^(0+256),w
  6936  0A8B  1903               	btfsc	3,2
  6937  0A8C  2A95               	goto	l8970
  6938                           
  6939                           ;SwitchTap.c: 104: setLongTapState(1);
  6940  0A8D  3001               	movlw	1
  6941  0A8E  0021               	movlb	1	; select bank1
  6942  0A8F  00A0               	movwf	setLongTapState@f_state^(0+128)
  6943  0A90  3000               	movlw	0
  6944  0A91  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6945  0A92  31AE  26B4         	fcall	_setLongTapState
  6946                           
  6947                           ;SwitchTap.c: 105: } else {
  6948  0A94  0008               	return
  6949  0A95                     l8970:	
  6950                           
  6951                           ;SwitchTap.c: 106: setDoublePressState(1);
  6952  0A95  3001               	movlw	1
  6953  0A96  0021               	movlb	1	; select bank1
  6954  0A97  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6955  0A98  3000               	movlw	0
  6956  0A99  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6957  0A9A  31A2  22B6         	fcall	_setDoublePressState
  6958                           
  6959                           ;SwitchTap.c: 107: }
  6960                           ;SwitchTap.c: 108: }
  6961                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6962  0A9C  0008               	return
  6963  0A9D                     l8972:	
  6964  0A9D  0020               	movlb	0	; select bank0
  6965  0A9E  1BC7               	btfsc	_tap_timer+3,7	;volatile
  6966  0A9F  2AAC               	goto	l8974
  6967  0AA0  0847               	movf	_tap_timer+3,w	;volatile
  6968  0AA1  1D03               	btfss	3,2
  6969  0AA2  0008               	return
  6970  0AA3  0846               	movf	_tap_timer+2,w	;volatile
  6971  0AA4  1D03               	btfss	3,2
  6972  0AA5  0008               	return
  6973  0AA6  301B               	movlw	27
  6974  0AA7  0244               	subwf	_tap_timer,w	;volatile
  6975  0AA8  3006               	movlw	6
  6976  0AA9  3B45               	subwfb	_tap_timer+1,w	;volatile
  6977  0AAA  1803               	btfsc	3,0
  6978  0AAB  0008               	return
  6979  0AAC                     l8974:	
  6980  0AAC  085D               	movf	_longTap_state,w	;volatile
  6981  0AAD  1D03               	btfss	3,2
  6982  0AAE  0008               	return
  6983  0AAF  0023               	movlb	3	; select bank3
  6984  0AB0  0345               	decf	_switchTap_down^(0+384),w
  6985  0AB1  1903               	btfsc	3,2
  6986  0AB2  0008               	return
  6987                           
  6988                           ;SwitchTap.c: 112: switchTap_down = 1;
  6989  0AB3  01C5               	clrf	_switchTap_down^(0+384)
  6990  0AB4  0AC5               	incf	_switchTap_down^(0+384),f
  6991                           
  6992                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6993  0AB5  0020               	movlb	0	; select bank0
  6994  0AB6  1BC7               	btfsc	_tap_timer+3,7	;volatile
  6995  0AB7  2ACC               	goto	l1433
  6996  0AB8  0847               	movf	_tap_timer+3,w	;volatile
  6997  0AB9  1D03               	btfss	3,2
  6998  0ABA  2AC4               	goto	l8982
  6999  0ABB  0846               	movf	_tap_timer+2,w	;volatile
  7000  0ABC  1D03               	btfss	3,2
  7001  0ABD  2AC4               	goto	l8982
  7002  0ABE  3094               	movlw	148
  7003  0ABF  0244               	subwf	_tap_timer,w	;volatile
  7004  0AC0  3004               	movlw	4
  7005  0AC1  3B45               	subwfb	_tap_timer+1,w	;volatile
  7006  0AC2  1C03               	btfss	3,0
  7007  0AC3  2ACC               	goto	l1433
  7008  0AC4                     l8982:	
  7009                           
  7010                           ;SwitchTap.c: 114: tap_timer = 1172;
  7011  0AC4  3000               	movlw	0
  7012  0AC5  00C7               	movwf	_tap_timer+3	;volatile
  7013  0AC6  3000               	movlw	0
  7014  0AC7  00C6               	movwf	_tap_timer+2	;volatile
  7015  0AC8  3004               	movlw	4
  7016  0AC9  00C5               	movwf	_tap_timer+1	;volatile
  7017  0ACA  3094               	movlw	148
  7018  0ACB  00C4               	movwf	_tap_timer	;volatile
  7019  0ACC                     l1433:	
  7020                           
  7021                           ;SwitchTap.c: 115: }
  7022                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7023  0ACC  085E               	movf	_num_taps,w
  7024  0ACD  0021               	movlb	1	; select bank1
  7025  0ACE  00BC               	movwf	??_updateSwitchTap^(0+128)
  7026  0ACF  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7027  0AD0  083C               	movf	??_updateSwitchTap^(0+128),w
  7028  0AD1  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7029  0AD2  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7030  0AD3  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7031                           
  7032                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7033  0AD4  0023               	movlb	3	; select bank3
  7034  0AD5  085E               	movf	(_tap_iteration+1)^(0+384),w
  7035  0AD6  3A80               	xorlw	128
  7036  0AD7  3C80               	sublw	128
  7037  0AD8  1D03               	skipz
  7038  0AD9  2ADD               	goto	u9885
  7039  0ADA  085D               	movf	_tap_iteration^(0+384),w
  7040  0ADB  0020               	movlb	0	; select bank0
  7041  0ADC  025E               	subwf	_num_taps,w
  7042  0ADD                     u9885:	
  7043  0ADD  1C03               	skipc
  7044  0ADE  2B0F               	goto	l8990
  7045                           
  7046                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7047  0ADF  0020               	movlb	0	; select bank0
  7048  0AE0  0844               	movf	_tap_timer,w	;volatile
  7049  0AE1  0024               	movlb	4	; select bank4
  7050  0AE2  07BD               	addwf	_tap_total^(0+512),f
  7051  0AE3  0020               	movlb	0	; select bank0
  7052  0AE4  0845               	movf	_tap_timer+1,w	;volatile
  7053  0AE5  0024               	movlb	4	; select bank4
  7054  0AE6  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7055  0AE7  0020               	movlb	0	; select bank0
  7056  0AE8  0846               	movf	_tap_timer+2,w	;volatile
  7057  0AE9  0024               	movlb	4	; select bank4
  7058  0AEA  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7059  0AEB  0020               	movlb	0	; select bank0
  7060  0AEC  0847               	movf	_tap_timer+3,w	;volatile
  7061  0AED  0024               	movlb	4	; select bank4
  7062  0AEE  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7063                           
  7064                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7065  0AEF  0023               	movlb	3	; select bank3
  7066  0AF0  085D               	movf	_tap_iteration^(0+384),w
  7067  0AF1  0021               	movlb	1	; select bank1
  7068  0AF2  00BC               	movwf	??_updateSwitchTap^(0+128)
  7069  0AF3  3001               	movlw	1
  7070  0AF4                     u9895:	
  7071  0AF4  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7072  0AF5  3EFF               	addlw	-1
  7073  0AF6  1D03               	skipz
  7074  0AF7  2AF4               	goto	u9895
  7075  0AF8  353C               	lslf	??_updateSwitchTap^(0+128),w
  7076  0AF9  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7077  0AFA  0086               	movwf	6
  7078  0AFB  3002               	movlw	2	; select bank4/5
  7079  0AFC  0087               	movwf	7
  7080  0AFD  0020               	movlb	0	; select bank0
  7081  0AFE  0844               	movf	_tap_timer,w	;volatile
  7082  0AFF  3FC0               	movwi [0]fsr1
  7083  0B00  0845               	movf	_tap_timer+1,w	;volatile
  7084  0B01  3FC1               	movwi [1]fsr1
  7085  0B02  0846               	movf	_tap_timer+2,w	;volatile
  7086  0B03  3FC2               	movwi [2]fsr1
  7087  0B04  0847               	movf	_tap_timer+3,w	;volatile
  7088  0B05  3FC3               	movwi [3]fsr1
  7089                           
  7090                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7091  0B06  0023               	movlb	3	; select bank3
  7092  0B07  085E               	movf	(_tap_iteration+1)^(0+384),w
  7093  0B08  0021               	movlb	1	; select bank1
  7094  0B09  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7095  0B0A  0023               	movlb	3	; select bank3
  7096  0B0B  085D               	movf	_tap_iteration^(0+384),w
  7097  0B0C  0021               	movlb	1	; select bank1
  7098  0B0D  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7099                           
  7100                           ;SwitchTap.c: 122: } else {
  7101  0B0E  2B8B               	goto	l9004
  7102  0B0F                     l8990:	
  7103                           
  7104                           ;SwitchTap.c: 123: tap_total = 0;
  7105  0B0F  3000               	movlw	0
  7106  0B10  0024               	movlb	4	; select bank4
  7107  0B11  00C0               	movwf	(_tap_total+3)^(0+512)
  7108  0B12  3000               	movlw	0
  7109  0B13  00BF               	movwf	(_tap_total+2)^(0+512)
  7110  0B14  3000               	movlw	0
  7111  0B15  00BE               	movwf	(_tap_total+1)^(0+512)
  7112  0B16  3000               	movlw	0
  7113  0B17  00BD               	movwf	_tap_total^(0+512)
  7114                           
  7115                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7116  0B18  0021               	movlb	1	; select bank1
  7117  0B19  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7118  0B1A  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7119  0B1B                     l8998:	
  7120  0B1B  0020               	movlb	0	; select bank0
  7121  0B1C  085E               	movf	_num_taps,w
  7122  0B1D  0021               	movlb	1	; select bank1
  7123  0B1E  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7124  0B1F  1803               	btfsc	3,0
  7125  0B20  2B65               	goto	l9000
  7126                           
  7127                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7128  0B21  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7129  0B22  00BC               	movwf	??_updateSwitchTap^(0+128)
  7130  0B23  3001               	movlw	1
  7131  0B24                     u9905:	
  7132  0B24  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7133  0B25  3EFF               	addlw	-1
  7134  0B26  1D03               	skipz
  7135  0B27  2B24               	goto	u9905
  7136  0B28  353C               	lslf	??_updateSwitchTap^(0+128),w
  7137  0B29  3E04               	addlw	4
  7138  0B2A  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7139  0B2B  0086               	movwf	6
  7140  0B2C  3002               	movlw	2	; select bank4/5
  7141  0B2D  0087               	movwf	7
  7142  0B2E  3F40               	moviw [0]fsr1
  7143  0B2F  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7144  0B30  3F41               	moviw [1]fsr1
  7145  0B31  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7146  0B32  3F42               	moviw [2]fsr1
  7147  0B33  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7148  0B34  3F43               	moviw [3]fsr1
  7149  0B35  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7150  0B36  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7151  0B37  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7152  0B38  3001               	movlw	1
  7153  0B39                     u9915:	
  7154  0B39  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7155  0B3A  3EFF               	addlw	-1
  7156  0B3B  1D03               	skipz
  7157  0B3C  2B39               	goto	u9915
  7158  0B3D  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7159  0B3E  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7160  0B3F  0086               	movwf	6
  7161  0B40  3002               	movlw	2	; select bank4/5
  7162  0B41  0087               	movwf	7
  7163  0B42  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7164  0B43  3FC0               	movwi [0]fsr1
  7165  0B44  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7166  0B45  3FC1               	movwi [1]fsr1
  7167  0B46  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7168  0B47  3FC2               	movwi [2]fsr1
  7169  0B48  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7170  0B49  3FC3               	movwi [3]fsr1
  7171                           
  7172                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7173  0B4A  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7174  0B4B  00BC               	movwf	??_updateSwitchTap^(0+128)
  7175  0B4C  3001               	movlw	1
  7176  0B4D                     u9925:	
  7177  0B4D  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7178  0B4E  3EFF               	addlw	-1
  7179  0B4F  1D03               	skipz
  7180  0B50  2B4D               	goto	u9925
  7181  0B51  353C               	lslf	??_updateSwitchTap^(0+128),w
  7182  0B52  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7183  0B53  0086               	movwf	6
  7184  0B54  3002               	movlw	2	; select bank4/5
  7185  0B55  0087               	movwf	7
  7186  0B56  3F40               	moviw [0]fsr1
  7187  0B57  0024               	movlb	4	; select bank4
  7188  0B58  07BD               	addwf	_tap_total^(0+512),f
  7189  0B59  3F41               	moviw [1]fsr1
  7190  0B5A  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7191  0B5B  3F42               	moviw [2]fsr1
  7192  0B5C  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7193  0B5D  3F43               	moviw [3]fsr1
  7194  0B5E  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7195  0B5F  3001               	movlw	1
  7196  0B60  0021               	movlb	1	; select bank1
  7197  0B61  00BC               	movwf	??_updateSwitchTap^(0+128)
  7198  0B62  083C               	movf	??_updateSwitchTap^(0+128),w
  7199  0B63  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7200  0B64  2B1B               	goto	l8998
  7201  0B65                     l9000:	
  7202                           
  7203                           ;SwitchTap.c: 127: }
  7204                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7205  0B65  0020               	movlb	0	; select bank0
  7206  0B66  085E               	movf	_num_taps,w
  7207  0B67  0021               	movlb	1	; select bank1
  7208  0B68  00BC               	movwf	??_updateSwitchTap^(0+128)
  7209  0B69  3001               	movlw	1
  7210  0B6A                     u9945:	
  7211  0B6A  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7212  0B6B  3EFF               	addlw	-1
  7213  0B6C  1D03               	skipz
  7214  0B6D  2B6A               	goto	u9945
  7215  0B6E  353C               	lslf	??_updateSwitchTap^(0+128),w
  7216  0B6F  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7217  0B70  0086               	movwf	6
  7218  0B71  3002               	movlw	2	; select bank4/5
  7219  0B72  0087               	movwf	7
  7220  0B73  0020               	movlb	0	; select bank0
  7221  0B74  0844               	movf	_tap_timer,w	;volatile
  7222  0B75  3FC0               	movwi [0]fsr1
  7223  0B76  0845               	movf	_tap_timer+1,w	;volatile
  7224  0B77  3FC1               	movwi [1]fsr1
  7225  0B78  0846               	movf	_tap_timer+2,w	;volatile
  7226  0B79  3FC2               	movwi [2]fsr1
  7227  0B7A  0847               	movf	_tap_timer+3,w	;volatile
  7228  0B7B  3FC3               	movwi [3]fsr1
  7229                           
  7230                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7231  0B7C  0844               	movf	_tap_timer,w	;volatile
  7232  0B7D  0024               	movlb	4	; select bank4
  7233  0B7E  07BD               	addwf	_tap_total^(0+512),f
  7234  0B7F  0020               	movlb	0	; select bank0
  7235  0B80  0845               	movf	_tap_timer+1,w	;volatile
  7236  0B81  0024               	movlb	4	; select bank4
  7237  0B82  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7238  0B83  0020               	movlb	0	; select bank0
  7239  0B84  0846               	movf	_tap_timer+2,w	;volatile
  7240  0B85  0024               	movlb	4	; select bank4
  7241  0B86  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7242  0B87  0020               	movlb	0	; select bank0
  7243  0B88  0847               	movf	_tap_timer+3,w	;volatile
  7244  0B89  0024               	movlb	4	; select bank4
  7245  0B8A  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7246  0B8B                     l9004:	
  7247                           
  7248                           ;SwitchTap.c: 130: }
  7249                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7250  0B8B  0021               	movlb	1	; select bank1
  7251  0B8C  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7252  0B8D  00A0               	movwf	___aldiv@divisor^(0+128)
  7253  0B8E  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7254  0B8F  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7255  0B90  0D89               	rlf	9,f
  7256  0B91  3B89               	subwfb	9,f
  7257  0B92  0989               	comf	9,f
  7258  0B93  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7259  0B94  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7260  0B95  0024               	movlb	4	; select bank4
  7261  0B96  0840               	movf	(_tap_total+3)^(0+512),w
  7262  0B97  0021               	movlb	1	; select bank1
  7263  0B98  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7264  0B99  0024               	movlb	4	; select bank4
  7265  0B9A  083F               	movf	(_tap_total+2)^(0+512),w
  7266  0B9B  0021               	movlb	1	; select bank1
  7267  0B9C  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7268  0B9D  0024               	movlb	4	; select bank4
  7269  0B9E  083E               	movf	(_tap_total+1)^(0+512),w
  7270  0B9F  0021               	movlb	1	; select bank1
  7271  0BA0  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7272  0BA1  0024               	movlb	4	; select bank4
  7273  0BA2  083D               	movf	_tap_total^(0+512),w
  7274  0BA3  0021               	movlb	1	; select bank1
  7275  0BA4  00A4               	movwf	___aldiv@dividend^(0+128)
  7276  0BA5  3199  215C         	fcall	___aldiv
  7277  0BA7  0021               	movlb	1	; select bank1
  7278  0BA8  0823               	movf	(?___aldiv+3)^(0+128),w
  7279  0BA9  0023               	movlb	3	; select bank3
  7280  0BAA  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  7281  0BAB  0021               	movlb	1	; select bank1
  7282  0BAC  0822               	movf	(?___aldiv+2)^(0+128),w
  7283  0BAD  0023               	movlb	3	; select bank3
  7284  0BAE  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  7285  0BAF  0021               	movlb	1	; select bank1
  7286  0BB0  0821               	movf	(?___aldiv+1)^(0+128),w
  7287  0BB1  0023               	movlb	3	; select bank3
  7288  0BB2  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  7289  0BB3  0021               	movlb	1	; select bank1
  7290  0BB4  0820               	movf	?___aldiv^(0+128),w
  7291  0BB5  0023               	movlb	3	; select bank3
  7292  0BB6  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  7293                           
  7294                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7295  0BB7  01E4               	clrf	_mod_time_changed^(0+384)
  7296  0BB8  0AE4               	incf	_mod_time_changed^(0+384),f
  7297                           
  7298                           ;SwitchTap.c: 134: tap_timer = 0;
  7299  0BB9  3000               	movlw	0
  7300  0BBA  0020               	movlb	0	; select bank0
  7301  0BBB  00C7               	movwf	_tap_timer+3	;volatile
  7302  0BBC  3000               	movlw	0
  7303  0BBD  00C6               	movwf	_tap_timer+2	;volatile
  7304  0BBE  3000               	movlw	0
  7305  0BBF  00C5               	movwf	_tap_timer+1	;volatile
  7306  0BC0  3000               	movlw	0
  7307  0BC1  00C4               	movwf	_tap_timer	;volatile
  7308                           
  7309                           ;SwitchTap.c: 136: tap_iteration++;
  7310  0BC2  3001               	movlw	1
  7311  0BC3  0023               	movlb	3	; select bank3
  7312  0BC4  07DD               	addwf	_tap_iteration^(0+384),f
  7313  0BC5  3000               	movlw	0
  7314  0BC6  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7315                           
  7316                           ;SwitchTap.c: 137: }
  7317                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7318  0BC7  0008               	return
  7319  0BC8                     l9012:	
  7320  0BC8  3019               	movlw	25
  7321  0BC9  0022               	movlb	2	; select bank2
  7322  0BCA  026E               	subwf	_switchTap_pressed^(0+256),w
  7323  0BCB  1C03               	skipc
  7324  0BCC  0008               	return
  7325                           
  7326                           ;SwitchTap.c: 140: switchTap_down = 0;
  7327  0BCD  0023               	movlb	3	; select bank3
  7328  0BCE  01C5               	clrf	_switchTap_down^(0+384)
  7329                           
  7330                           ;SwitchTap.c: 141: switchTap_state = 0;
  7331  0BCF  01E6               	clrf	_switchTap_state^(0+384)
  7332                           
  7333                           ;SwitchTap.c: 147: setLongTapState(0);
  7334  0BD0  3000               	movlw	0
  7335  0BD1  0021               	movlb	1	; select bank1
  7336  0BD2  00A0               	movwf	setLongTapState@f_state^(0+128)
  7337  0BD3  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7338  0BD4  31AE  26B4         	fcall	_setLongTapState
  7339                           
  7340                           ;SwitchTap.c: 149: longTap_timer = 0;
  7341  0BD6  0023               	movlb	3	; select bank3
  7342  0BD7  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  7343  0BD8  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7344                           
  7345                           ;SwitchTap.c: 150: longTap_start = 0;
  7346  0BD9  0022               	movlb	2	; select bank2
  7347  0BDA  01EB               	clrf	_longTap_start^(0+256)
  7348                           
  7349                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7350  0BDB  3019               	movlw	25
  7351  0BDC  0021               	movlb	1	; select bank1
  7352  0BDD  00BC               	movwf	??_updateSwitchTap^(0+128)
  7353  0BDE  083C               	movf	??_updateSwitchTap^(0+128),w
  7354  0BDF  0022               	movlb	2	; select bank2
  7355  0BE0  00EE               	movwf	_switchTap_pressed^(0+256)
  7356  0BE1  0008               	return
  7357  0BE2                     __end_of_updateSwitchTap:	
  7358                           
  7359                           	psect	text4
  7360  2EB4                     __ptext4:	
  7361 ;; *************** function _setLongTapState *****************
  7362 ;; Defined at:
  7363 ;;		line 167 in file "SwitchTap.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;  f_state         2    0[BANK1 ] int 
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;		None
  7368 ;; Return value:  Size  Location     Type
  7369 ;;                  1    wreg      void 
  7370 ;; Registers used:
  7371 ;;		wreg, status,0
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7377 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7379 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7380 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7381 ;;Total ram usage:        4 bytes
  7382 ;; Hardware stack levels used:    1
  7383 ;; Hardware stack levels required when called:    3
  7384 ;; This function calls:
  7385 ;;		Nothing
  7386 ;; This function is called by:
  7387 ;;		_updateSwitchTap
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           
  7392                           ;psect for function _setLongTapState
  7393  2EB4                     _setLongTapState:	
  7394                           
  7395                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7396                           
  7397                           ;incstack = 0
  7398                           ; Regs used in _setLongTapState: [wreg+status,0]
  7399  2EB4  0020               	movlb	0	; select bank0
  7400  2EB5  085D               	movf	_longTap_state,w	;volatile
  7401  2EB6  0021               	movlb	1	; select bank1
  7402  2EB7  00A2               	movwf	??_setLongTapState^(0+128)
  7403  2EB8  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7404  2EB9  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7405  2EBA  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7406  2EBB  1D03               	skipz
  7407  2EBC  2EBF               	goto	u8885
  7408  2EBD  0820               	movf	setLongTapState@f_state^(0+128),w
  7409  2EBE  0622               	xorwf	??_setLongTapState^(0+128),w
  7410  2EBF                     u8885:	
  7411  2EBF  1903               	btfsc	3,2
  7412  2EC0  0008               	return
  7413                           
  7414                           ;SwitchTap.c: 169: longTap_state = f_state;
  7415  2EC1  0820               	movf	setLongTapState@f_state^(0+128),w
  7416  2EC2  00A2               	movwf	??_setLongTapState^(0+128)
  7417  2EC3  0822               	movf	??_setLongTapState^(0+128),w
  7418  2EC4  0020               	movlb	0	; select bank0
  7419  2EC5  00DD               	movwf	_longTap_state	;volatile
  7420                           
  7421                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7422  2EC6  0021               	movlb	1	; select bank1
  7423  2EC7  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7424  2EC8  0022               	movlb	2	; select bank2
  7425  2EC9  1C03               	skipc
  7426  2ECA  128D               	bcf	13,5	;volatile
  7427  2ECB  1803               	skipnc
  7428  2ECC  168D               	bsf	13,5	;volatile
  7429  2ECD  0008               	return
  7430  2ECE                     __end_of_setLongTapState:	
  7431                           
  7432                           	psect	text5
  7433  195C                     __ptext5:	
  7434 ;; *************** function ___aldiv *****************
  7435 ;; Defined at:
  7436 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;  divisor         4    0[BANK1 ] long 
  7439 ;;  dividend        4    4[BANK1 ] long 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  quotient        4   11[BANK1 ] long 
  7442 ;;  sign            1   10[BANK1 ] unsigned char 
  7443 ;;  counter         1    9[BANK1 ] unsigned char 
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  4    0[BANK1 ] long 
  7446 ;; Registers used:
  7447 ;;		wreg, status,2, status,0
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7453 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7454 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7455 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7456 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7457 ;;Total ram usage:       15 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; Hardware stack levels required when called:    3
  7460 ;; This function calls:
  7461 ;;		Nothing
  7462 ;; This function is called by:
  7463 ;;		_updateSwitchTap
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function ___aldiv
  7469  195C                     ___aldiv:	
  7470                           
  7471                           ;incstack = 0
  7472                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7473  195C  0021               	movlb	1	; select bank1
  7474  195D  01AA               	clrf	___aldiv@sign^(0+128)
  7475  195E  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7476  195F  296D               	goto	l2015
  7477  1960  09A0               	comf	___aldiv@divisor^(0+128),f
  7478  1961  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7479  1962  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7480  1963  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7481  1964  0AA0               	incf	___aldiv@divisor^(0+128),f
  7482  1965  1903               	skipnz
  7483  1966  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7484  1967  1903               	skipnz
  7485  1968  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7486  1969  1903               	skipnz
  7487  196A  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7488  196B  01AA               	clrf	___aldiv@sign^(0+128)
  7489  196C  0AAA               	incf	___aldiv@sign^(0+128),f
  7490  196D                     l2015:	
  7491  196D  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7492  196E  297E               	goto	l8534
  7493  196F  09A4               	comf	___aldiv@dividend^(0+128),f
  7494  1970  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7495  1971  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7496  1972  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7497  1973  0AA4               	incf	___aldiv@dividend^(0+128),f
  7498  1974  1903               	skipnz
  7499  1975  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7500  1976  1903               	skipnz
  7501  1977  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7502  1978  1903               	skipnz
  7503  1979  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7504  197A  3001               	movlw	1
  7505  197B  00A8               	movwf	??___aldiv^(0+128)
  7506  197C  0828               	movf	??___aldiv^(0+128),w
  7507  197D  06AA               	xorwf	___aldiv@sign^(0+128),f
  7508  197E                     l8534:	
  7509  197E  3000               	movlw	0
  7510  197F  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7511  1980  3000               	movlw	0
  7512  1981  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7513  1982  3000               	movlw	0
  7514  1983  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7515  1984  3000               	movlw	0
  7516  1985  00AB               	movwf	___aldiv@quotient^(0+128)
  7517  1986  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7518  1987  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7519  1988  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7520  1989  0420               	iorwf	___aldiv@divisor^(0+128),w
  7521  198A  1903               	skipnz
  7522  198B  29C7               	goto	l8556
  7523  198C  01A9               	clrf	___aldiv@counter^(0+128)
  7524  198D  0AA9               	incf	___aldiv@counter^(0+128),f
  7525  198E                     l8542:	
  7526  198E  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7527  198F  299C               	goto	l8544
  7528  1990  3001               	movlw	1
  7529  1991                     u9025:	
  7530  1991  35A0               	lslf	___aldiv@divisor^(0+128),f
  7531  1992  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7532  1993  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7533  1994  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7534  1995  0B89               	decfsz	9,f
  7535  1996  2991               	goto	u9025
  7536  1997  3001               	movlw	1
  7537  1998  00A8               	movwf	??___aldiv^(0+128)
  7538  1999  0828               	movf	??___aldiv^(0+128),w
  7539  199A  07A9               	addwf	___aldiv@counter^(0+128),f
  7540  199B  298E               	goto	l8542
  7541  199C                     l8544:	
  7542  199C  3001               	movlw	1
  7543  199D                     u9045:	
  7544  199D  35AB               	lslf	___aldiv@quotient^(0+128),f
  7545  199E  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7546  199F  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7547  19A0  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7548  19A1  0B89               	decfsz	9,f
  7549  19A2  299D               	goto	u9045
  7550  19A3  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7551  19A4  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7552  19A5  1D03               	skipz
  7553  19A6  29B1               	goto	u9055
  7554  19A7  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7555  19A8  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7556  19A9  1D03               	skipz
  7557  19AA  29B1               	goto	u9055
  7558  19AB  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7559  19AC  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7560  19AD  1D03               	skipz
  7561  19AE  29B1               	goto	u9055
  7562  19AF  0820               	movf	___aldiv@divisor^(0+128),w
  7563  19B0  0224               	subwf	___aldiv@dividend^(0+128),w
  7564  19B1                     u9055:	
  7565  19B1  1C03               	skipc
  7566  19B2  29BC               	goto	l8552
  7567  19B3  0820               	movf	___aldiv@divisor^(0+128),w
  7568  19B4  02A4               	subwf	___aldiv@dividend^(0+128),f
  7569  19B5  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7570  19B6  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7571  19B7  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7572  19B8  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7573  19B9  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7574  19BA  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7575  19BB  142B               	bsf	___aldiv@quotient^(0+128),0
  7576  19BC                     l8552:	
  7577  19BC  3001               	movlw	1
  7578  19BD                     u9065:	
  7579  19BD  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7580  19BE  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7581  19BF  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7582  19C0  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7583  19C1  0B89               	decfsz	9,f
  7584  19C2  29BD               	goto	u9065
  7585  19C3  3001               	movlw	1
  7586  19C4  02A9               	subwf	___aldiv@counter^(0+128),f
  7587  19C5  1D03               	btfss	3,2
  7588  19C6  299C               	goto	l8544
  7589  19C7                     l8556:	
  7590  19C7  082A               	movf	___aldiv@sign^(0+128),w
  7591  19C8  1903               	btfsc	3,2
  7592  19C9  29D5               	goto	l8560
  7593  19CA  09AB               	comf	___aldiv@quotient^(0+128),f
  7594  19CB  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7595  19CC  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7596  19CD  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7597  19CE  0AAB               	incf	___aldiv@quotient^(0+128),f
  7598  19CF  1903               	skipnz
  7599  19D0  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7600  19D1  1903               	skipnz
  7601  19D2  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7602  19D3  1903               	skipnz
  7603  19D4  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7604  19D5                     l8560:	
  7605  19D5  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7606  19D6  00A3               	movwf	(?___aldiv+3)^(0+128)
  7607  19D7  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7608  19D8  00A2               	movwf	(?___aldiv+2)^(0+128)
  7609  19D9  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7610  19DA  00A1               	movwf	(?___aldiv+1)^(0+128)
  7611  19DB  082B               	movf	___aldiv@quotient^(0+128),w
  7612  19DC  00A0               	movwf	?___aldiv^(0+128)
  7613  19DD  0008               	return
  7614  19DE                     __end_of___aldiv:	
  7615                           
  7616                           	psect	text6
  7617  122B                     __ptext6:	
  7618 ;; *************** function _updateSwitchBypass *****************
  7619 ;; Defined at:
  7620 ;;		line 34 in file "SwitchBypass.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;		None
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;		None
  7625 ;; Return value:  Size  Location     Type
  7626 ;;                  1    wreg      void 
  7627 ;; Registers used:
  7628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7636 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7637 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7638 ;;Total ram usage:        2 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    8
  7641 ;; This function calls:
  7642 ;;		_setDoublePressState
  7643 ;;		_setLongBypassState
  7644 ;;		_setSwitchBypassRelays
  7645 ;;		_setSwitchBypassState
  7646 ;; This function is called by:
  7647 ;;		_main
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           
  7652                           ;psect for function _updateSwitchBypass
  7653  122B                     _updateSwitchBypass:	
  7654                           
  7655                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7659  122B  0020               	movlb	0	; select bank0
  7660  122C  1890               	btfsc	16,1	;volatile
  7661  122D  2A41               	goto	l8812
  7662                           
  7663                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7664  122E  0023               	movlb	3	; select bank3
  7665  122F  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7666  1230  3A80               	xorlw	128
  7667  1231  0021               	movlb	1	; select bank1
  7668  1232  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7669  1233  3080               	movlw	128
  7670  1234  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7671  1235  1D03               	skipz
  7672  1236  2A3A               	goto	u9485
  7673  1237  3001               	movlw	1
  7674  1238  0023               	movlb	3	; select bank3
  7675  1239  0236               	subwf	_switchBypass_pressed^(0+384),w
  7676  123A                     u9485:	
  7677  123A  1C03               	skipc
  7678  123B  2A54               	goto	l8816
  7679                           
  7680                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7681  123C  30FF               	movlw	255
  7682  123D  0023               	movlb	3	; select bank3
  7683  123E  07B6               	addwf	_switchBypass_pressed^(0+384),f
  7684  123F  30FF               	movlw	255
  7685  1240  2A53               	goto	L1
  7686  1241                     l8812:	
  7687                           ;SwitchBypass.c: 44: }
  7688                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7689                           
  7690  1241  0023               	movlb	3	; select bank3
  7691  1242  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7692  1243  3A80               	xorlw	128
  7693  1244  0021               	movlb	1	; select bank1
  7694  1245  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7695  1246  3080               	movlw	128
  7696  1247  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7697  1248  1D03               	skipz
  7698  1249  2A4D               	goto	u9495
  7699  124A  3019               	movlw	25
  7700  124B  0023               	movlb	3	; select bank3
  7701  124C  0236               	subwf	_switchBypass_pressed^(0+384),w
  7702  124D                     u9495:	
  7703  124D  1803               	skipnc
  7704  124E  2A54               	goto	l8816
  7705                           
  7706                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7707  124F  3001               	movlw	1
  7708  1250  0023               	movlb	3	; select bank3
  7709  1251  07B6               	addwf	_switchBypass_pressed^(0+384),f
  7710  1252  3000               	movlw	0
  7711  1253                     L1:	
  7712  1253  3DB7               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7713  1254                     l8816:	
  7714                           
  7715                           ;SwitchBypass.c: 47: }
  7716                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7717  1254  0023               	movlb	3	; select bank3
  7718  1255  0836               	movf	_switchBypass_pressed^(0+384),w
  7719  1256  0437               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7720  1257  1D03               	btfss	3,2
  7721  1258  2ADF               	goto	l8878
  7722                           
  7723                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7724  1259  0022               	movlb	2	; select bank2
  7725  125A  086A               	movf	_longBypass_start^(0+256),w
  7726  125B  1D03               	btfss	3,2
  7727  125C  2A62               	goto	l8824
  7728                           
  7729                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7730  125D  01EA               	clrf	_longBypass_start^(0+256)
  7731  125E  0AEA               	incf	_longBypass_start^(0+256),f
  7732                           
  7733                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7734  125F  0023               	movlb	3	; select bank3
  7735  1260  01B2               	clrf	_longBypass_timer^(0+384)	;volatile
  7736  1261  01B3               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7737  1262                     l8824:	
  7738                           
  7739                           ;SwitchBypass.c: 59: }
  7740                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7741  1262  0020               	movlb	0	; select bank0
  7742  1263  0859               	movf	_long_press_limit+1,w
  7743  1264  0023               	movlb	3	; select bank3
  7744  1265  0233               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7745  1266  1D03               	skipz
  7746  1267  2A6C               	goto	u9525
  7747  1268  0020               	movlb	0	; select bank0
  7748  1269  0858               	movf	_long_press_limit,w
  7749  126A  0023               	movlb	3	; select bank3
  7750  126B  0232               	subwf	_longBypass_timer^(0+384),w	;volatile
  7751  126C                     u9525:	
  7752  126C  1C03               	skipc
  7753  126D  2AAA               	goto	l8850
  7754  126E  083F               	movf	_longBypass_down^(0+384),w
  7755  126F  1D03               	btfss	3,2
  7756  1270  2AAA               	goto	l8850
  7757  1271  0020               	movlb	0	; select bank0
  7758  1272  084E               	movf	_doubleTap_state,w	;volatile
  7759  1273  1D03               	btfss	3,2
  7760  1274  2AAA               	goto	l8850
  7761                           
  7762                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7763  1275  0022               	movlb	2	; select bank2
  7764  1276  110D               	bcf	13,2	;volatile
  7765                           
  7766                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7767  1277  036B               	decf	_longTap_start^(0+256),w
  7768  1278  1903               	btfsc	3,2
  7769  1279  2AA2               	goto	l8848
  7770                           
  7771                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7772  127A  0020               	movlb	0	; select bank0
  7773  127B  035F               	decf	_switchBypass_state,w
  7774  127C  1D03               	btfss	3,2
  7775  127D  2AAA               	goto	l8850
  7776                           
  7777                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7778  127E  0023               	movlb	3	; select bank3
  7779  127F  01BF               	clrf	_longBypass_down^(0+384)
  7780  1280  0ABF               	incf	_longBypass_down^(0+384),f
  7781                           
  7782                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7783  1281  0020               	movlb	0	; select bank0
  7784  1282  084F               	movf	_longBypass_state,w	;volatile
  7785  1283  1D03               	btfss	3,2
  7786  1284  2A90               	goto	l8844
  7787                           
  7788                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7789  1285  0022               	movlb	2	; select bank2
  7790  1286  110D               	bcf	13,2	;volatile
  7791                           
  7792                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7793  1287  3001               	movlw	1
  7794  1288  0021               	movlb	1	; select bank1
  7795  1289  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7796  128A  3000               	movlw	0
  7797  128B  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7798  128C  31AF  2746  3192   	fcall	_setLongBypassState
  7799                           
  7800                           ;SwitchBypass.c: 71: } else {
  7801  128F  2AAA               	goto	l8850
  7802  1290                     l8844:	
  7803                           
  7804                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7805  1290  3001               	movlw	1
  7806  1291  0021               	movlb	1	; select bank1
  7807  1292  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7808  1293  3000               	movlw	0
  7809  1294  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7810  1295  31AE  26EA  3192   	fcall	_setSwitchBypassState
  7811                           
  7812                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7813  1298  3000               	movlw	0
  7814  1299  0021               	movlb	1	; select bank1
  7815  129A  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7816  129B  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7817  129C  31AF  2746  3192   	fcall	_setLongBypassState
  7818                           
  7819                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7820  129F  0022               	movlb	2	; select bank2
  7821  12A0  150D               	bsf	13,2	;volatile
  7822                           
  7823                           ;SwitchBypass.c: 75: }
  7824                           ;SwitchBypass.c: 76: }
  7825                           ;SwitchBypass.c: 77: } else {
  7826  12A1  2AAA               	goto	l8850
  7827  12A2                     l8848:	
  7828                           
  7829                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7830  12A2  3001               	movlw	1
  7831  12A3  0021               	movlb	1	; select bank1
  7832  12A4  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7833  12A5  3000               	movlw	0
  7834  12A6  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7835  12A7  31A2  22B6  3192   	fcall	_setDoublePressState
  7836  12AA                     l8850:	
  7837                           
  7838                           ;SwitchBypass.c: 79: }
  7839                           ;SwitchBypass.c: 80: }
  7840                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  7841  12AA  0022               	movlb	2	; select bank2
  7842  12AB  120F               	bcf	15,4	;volatile
  7843                           
  7844                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  7845  12AC  0020               	movlb	0	; select bank0
  7846  12AD  084E               	movf	_doubleTap_state,w	;volatile
  7847  12AE  1D03               	btfss	3,2
  7848  12AF  2ADB               	goto	l8876
  7849  12B0  0023               	movlb	3	; select bank3
  7850  12B1  083F               	movf	_longBypass_down^(0+384),w
  7851  12B2  1D03               	btfss	3,2
  7852  12B3  2ADB               	goto	l8876
  7853                           
  7854                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7855  12B4  0020               	movlb	0	; select bank0
  7856  12B5  035F               	decf	_switchBypass_state,w
  7857  12B6  1D03               	btfss	3,2
  7858  12B7  2AC6               	goto	l8864
  7859                           
  7860                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7861  12B8  0024               	movlb	4	; select bank4
  7862  12B9  0363               	decf	_switchBypass_up^(0+512),w
  7863  12BA  0464               	iorwf	(_switchBypass_up+1)^(0+512),w
  7864  12BB  1D03               	btfss	3,2
  7865  12BC  2ADB               	goto	l8876
  7866                           
  7867                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7868  12BD  0023               	movlb	3	; select bank3
  7869  12BE  01E0               	clrf	_currentBypassState^(0+384)
  7870  12BF  0AE0               	incf	_currentBypassState^(0+384),f
  7871                           
  7872                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7873  12C0  3001               	movlw	1
  7874  12C1  0024               	movlb	4	; select bank4
  7875  12C2  00D1               	movwf	_switchBypass_toggle^(0+512)
  7876  12C3  3000               	movlw	0
  7877  12C4  00D2               	movwf	(_switchBypass_toggle^(0+512)+1)
  7878                           
  7879                           ;SwitchBypass.c: 88: }
  7880                           ;SwitchBypass.c: 89: } else {
  7881  12C5  2ADB               	goto	l8876
  7882  12C6                     l8864:	
  7883                           
  7884                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7885  12C6  0023               	movlb	3	; select bank3
  7886  12C7  033C               	decf	_bypass_turning_on^(0+384),w
  7887  12C8  1903               	btfsc	3,2
  7888  12C9  2ADB               	goto	l8876
  7889                           
  7890                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7891  12CA  01E0               	clrf	_currentBypassState^(0+384)
  7892                           
  7893                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7894  12CB  01BC               	clrf	_bypass_turning_on^(0+384)
  7895  12CC  0ABC               	incf	_bypass_turning_on^(0+384),f
  7896                           
  7897                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7898  12CD  0024               	movlb	4	; select bank4
  7899  12CE  01D1               	clrf	_switchBypass_toggle^(0+512)
  7900  12CF  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  7901                           
  7902                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  7903  12D0  0020               	movlb	0	; select bank0
  7904  12D1  084F               	movf	_longBypass_state,w	;volatile
  7905  12D2  0021               	movlb	1	; select bank1
  7906  12D3  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7907  12D4  083C               	movf	??_updateSwitchBypass^(0+128),w
  7908  12D5  0023               	movlb	3	; select bank3
  7909  12D6  00C0               	movwf	_longBypass_save^(0+384)
  7910                           
  7911                           ;SwitchBypass.c: 98: longBypass_state = 0;
  7912  12D7  0020               	movlb	0	; select bank0
  7913  12D8  01CF               	clrf	_longBypass_state	;volatile
  7914                           
  7915                           ;SwitchBypass.c: 99: longBypass_start = 0;
  7916  12D9  0022               	movlb	2	; select bank2
  7917  12DA  01EA               	clrf	_longBypass_start^(0+256)
  7918  12DB                     l8876:	
  7919                           
  7920                           ;SwitchBypass.c: 100: }
  7921                           ;SwitchBypass.c: 101: }
  7922                           ;SwitchBypass.c: 103: }
  7923                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  7924  12DB  0024               	movlb	4	; select bank4
  7925  12DC  01E3               	clrf	_switchBypass_up^(0+512)
  7926  12DD  01E4               	clrf	(_switchBypass_up+1)^(0+512)
  7927                           
  7928                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  7929  12DE  0008               	return
  7930  12DF                     l8878:	
  7931  12DF  0023               	movlb	3	; select bank3
  7932  12E0  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7933  12E1  3A80               	xorlw	128
  7934  12E2  0021               	movlb	1	; select bank1
  7935  12E3  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7936  12E4  3080               	movlw	128
  7937  12E5  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7938  12E6  1D03               	skipz
  7939  12E7  2AEB               	goto	u9635
  7940  12E8  3019               	movlw	25
  7941  12E9  0023               	movlb	3	; select bank3
  7942  12EA  0236               	subwf	_switchBypass_pressed^(0+384),w
  7943  12EB                     u9635:	
  7944  12EB  1C03               	skipc
  7945  12EC  0008               	return
  7946                           
  7947                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  7948  12ED  0020               	movlb	0	; select bank0
  7949  12EE  034E               	decf	_doubleTap_state,w	;volatile
  7950  12EF  1D03               	btfss	3,2
  7951  12F0  2AFA               	goto	l8884
  7952                           
  7953                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  7954  12F1  0023               	movlb	3	; select bank3
  7955  12F2  0860               	movf	_currentBypassState^(0+384),w
  7956  12F3  0021               	movlb	1	; select bank1
  7957  12F4  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7958  12F5  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7959  12F6  083C               	movf	??_updateSwitchBypass^(0+128),w
  7960  12F7  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7961  12F8  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7962  12F9  2B2A               	goto	L2
  7963  12FA                     l8884:	
  7964                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  7965                           
  7966  12FA  0023               	movlb	3	; select bank3
  7967  12FB  033C               	decf	_bypass_turning_on^(0+384),w
  7968  12FC  1D03               	btfss	3,2
  7969  12FD  2B1A               	goto	l8894
  7970                           
  7971                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  7972  12FE  0340               	decf	_longBypass_save^(0+384),w
  7973  12FF  1D03               	btfss	3,2
  7974  1300  2B14               	goto	l8892
  7975                           
  7976                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  7977  1301  0022               	movlb	2	; select bank2
  7978  1302  110D               	bcf	13,2	;volatile
  7979                           
  7980                           ;SwitchBypass.c: 112: setLongBypassState(1);
  7981  1303  3001               	movlw	1
  7982  1304  0021               	movlb	1	; select bank1
  7983  1305  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7984  1306  3000               	movlw	0
  7985  1307  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7986  1308  31AF  2746  3192   	fcall	_setLongBypassState
  7987                           
  7988                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  7989  130B  3001               	movlw	1
  7990  130C  0021               	movlb	1	; select bank1
  7991  130D  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  7992  130E  3000               	movlw	0
  7993  130F  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  7994  1310  31A1  211D  3192   	fcall	_setSwitchBypassRelays
  7995                           
  7996                           ;SwitchBypass.c: 114: } else {
  7997  1313  2B2E               	goto	l8902
  7998  1314                     l8892:	
  7999                           
  8000                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  8001  1314  3001               	movlw	1
  8002  1315  0021               	movlb	1	; select bank1
  8003  1316  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8004  1317  3000               	movlw	0
  8005  1318  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8006  1319  2B2B               	goto	L3
  8007  131A                     l8894:	
  8008                           ;SwitchBypass.c: 116: }
  8009                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8010                           
  8011  131A  0024               	movlb	4	; select bank4
  8012  131B  0351               	decf	_switchBypass_toggle^(0+512),w
  8013  131C  0452               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8014  131D  1D03               	btfss	3,2
  8015  131E  2B2E               	goto	l8902
  8016  131F  0023               	movlb	3	; select bank3
  8017  1320  083F               	movf	_longBypass_down^(0+384),w
  8018  1321  1D03               	btfss	3,2
  8019  1322  2B2E               	goto	l8902
  8020  1323  0020               	movlb	0	; select bank0
  8021  1324  084E               	movf	_doubleTap_state,w	;volatile
  8022  1325  1D03               	btfss	3,2
  8023  1326  2B2E               	goto	l8902
  8024                           
  8025                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  8026  1327  3000               	movlw	0
  8027  1328  0021               	movlb	1	; select bank1
  8028  1329  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8029  132A                     L2:	
  8030  132A  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8031  132B                     L3:	
  8032  132B  31AE  26EA  3192   	fcall	_setSwitchBypassState
  8033  132E                     l8902:	
  8034                           
  8035                           ;SwitchBypass.c: 120: }
  8036                           ;SwitchBypass.c: 122: longBypass_down = 0;
  8037  132E  0023               	movlb	3	; select bank3
  8038  132F  01BF               	clrf	_longBypass_down^(0+384)
  8039                           
  8040                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  8041  1330  0020               	movlb	0	; select bank0
  8042  1331  084F               	movf	_longBypass_state,w	;volatile
  8043  1332  1D03               	btfss	3,2
  8044  1333  2B3A               	goto	l8908
  8045                           
  8046                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  8047  1334  0C5F               	rrf	_switchBypass_state,w
  8048  1335  0022               	movlb	2	; select bank2
  8049  1336  1C03               	skipc
  8050  1337  110D               	bcf	13,2	;volatile
  8051  1338  1803               	skipnc
  8052  1339  150D               	bsf	13,2	;volatile
  8053  133A                     l8908:	
  8054                           
  8055                           ;SwitchBypass.c: 125: }
  8056                           ;SwitchBypass.c: 127: setDoublePressState(0);
  8057  133A  3000               	movlw	0
  8058  133B  0021               	movlb	1	; select bank1
  8059  133C  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8060  133D  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8061  133E  31A2  22B6         	fcall	_setDoublePressState
  8062                           
  8063                           ;SwitchBypass.c: 128: longBypass_start = 0;
  8064  1340  0022               	movlb	2	; select bank2
  8065  1341  01EA               	clrf	_longBypass_start^(0+256)
  8066                           
  8067                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  8068  1342  0023               	movlb	3	; select bank3
  8069  1343  01BC               	clrf	_bypass_turning_on^(0+384)
  8070                           
  8071                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  8072  1344  0024               	movlb	4	; select bank4
  8073  1345  01D1               	clrf	_switchBypass_toggle^(0+512)
  8074  1346  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  8075                           
  8076                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  8077  1347  3001               	movlw	1
  8078  1348  00E3               	movwf	_switchBypass_up^(0+512)
  8079  1349  3000               	movlw	0
  8080  134A  00E4               	movwf	(_switchBypass_up^(0+512)+1)
  8081                           
  8082                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  8083  134B  3019               	movlw	25
  8084  134C  0023               	movlb	3	; select bank3
  8085  134D  00B6               	movwf	_switchBypass_pressed^(0+384)
  8086  134E  3000               	movlw	0
  8087  134F  00B7               	movwf	(_switchBypass_pressed^(0+384)+1)
  8088  1350  0008               	return
  8089  1351                     __end_of_updateSwitchBypass:	
  8090                           
  8091                           	psect	text7
  8092  2F46                     __ptext7:	
  8093 ;; *************** function _setLongBypassState *****************
  8094 ;; Defined at:
  8095 ;;		line 163 in file "SwitchBypass.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;  f_state         2    0[BANK1 ] int 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;		None
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      void 
  8102 ;; Registers used:
  8103 ;;		wreg, status,0
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8109 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8111 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8112 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8113 ;;Total ram usage:        4 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    3
  8116 ;; This function calls:
  8117 ;;		Nothing
  8118 ;; This function is called by:
  8119 ;;		_updateSwitchBypass
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           
  8124                           ;psect for function _setLongBypassState
  8125  2F46                     _setLongBypassState:	
  8126                           
  8127                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  8128                           
  8129                           ;incstack = 0
  8130                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8131  2F46  0020               	movlb	0	; select bank0
  8132  2F47  084F               	movf	_longBypass_state,w	;volatile
  8133  2F48  0021               	movlb	1	; select bank1
  8134  2F49  00A2               	movwf	??_setLongBypassState^(0+128)
  8135  2F4A  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8136  2F4B  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8137  2F4C  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8138  2F4D  1D03               	skipz
  8139  2F4E  2F51               	goto	u8835
  8140  2F4F  0820               	movf	setLongBypassState@f_state^(0+128),w
  8141  2F50  0622               	xorwf	??_setLongBypassState^(0+128),w
  8142  2F51                     u8835:	
  8143  2F51  1903               	btfsc	3,2
  8144  2F52  0008               	return
  8145                           
  8146                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  8147  2F53  0820               	movf	setLongBypassState@f_state^(0+128),w
  8148  2F54  00A2               	movwf	??_setLongBypassState^(0+128)
  8149  2F55  0822               	movf	??_setLongBypassState^(0+128),w
  8150  2F56  0020               	movlb	0	; select bank0
  8151  2F57  00CF               	movwf	_longBypass_state	;volatile
  8152                           
  8153                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  8154  2F58  0021               	movlb	1	; select bank1
  8155  2F59  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8156  2F5A  0022               	movlb	2	; select bank2
  8157  2F5B  1C03               	skipc
  8158  2F5C  118D               	bcf	13,3	;volatile
  8159  2F5D  1803               	skipnc
  8160  2F5E  158D               	bsf	13,3	;volatile
  8161                           
  8162                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  8163  2F5F  0021               	movlb	1	; select bank1
  8164  2F60  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8165  2F61  0020               	movlb	0	; select bank0
  8166  2F62  1C03               	skipc
  8167  2F63  120E               	bcf	14,4	;volatile
  8168  2F64  1803               	skipnc
  8169  2F65  160E               	bsf	14,4	;volatile
  8170  2F66  0008               	return
  8171  2F67                     __end_of_setLongBypassState:	
  8172                           
  8173                           	psect	text8
  8174  22B6                     __ptext8:	
  8175 ;; *************** function _setDoublePressState *****************
  8176 ;; Defined at:
  8177 ;;		line 21 in file "preset_programming.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  f_state         2   24[BANK1 ] int 
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;		None
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  1    wreg      void 
  8184 ;; Registers used:
  8185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8191 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8193 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8194 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8195 ;;Total ram usage:        4 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; Hardware stack levels required when called:    7
  8198 ;; This function calls:
  8199 ;;		_resetRingLEDs
  8200 ;;		_setPedalMode
  8201 ;;		_setPresetDisplay
  8202 ;;		_showSave
  8203 ;;		_wait_ms
  8204 ;; This function is called by:
  8205 ;;		_updateSwitchBypass
  8206 ;;		_updateSwitchTap
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           
  8211                           ;psect for function _setDoublePressState
  8212  22B6                     _setDoublePressState:	
  8213                           
  8214                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8215                           
  8216                           ;incstack = 0
  8217                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8218  22B6  0020               	movlb	0	; select bank0
  8219  22B7  084E               	movf	_doubleTap_state,w	;volatile
  8220  22B8  0021               	movlb	1	; select bank1
  8221  22B9  00BA               	movwf	??_setDoublePressState^(0+128)
  8222  22BA  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8223  22BB  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8224  22BC  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8225  22BD  1D03               	skipz
  8226  22BE  2AC1               	goto	u8845
  8227  22BF  0838               	movf	setDoublePressState@f_state^(0+128),w
  8228  22C0  063A               	xorwf	??_setDoublePressState^(0+128),w
  8229  22C1                     u8845:	
  8230  22C1  1903               	btfsc	3,2
  8231  22C2  0008               	return
  8232                           
  8233                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8234  22C3  0838               	movf	setDoublePressState@f_state^(0+128),w
  8235  22C4  00BA               	movwf	??_setDoublePressState^(0+128)
  8236  22C5  083A               	movf	??_setDoublePressState^(0+128),w
  8237  22C6  0020               	movlb	0	; select bank0
  8238  22C7  00CE               	movwf	_doubleTap_state	;volatile
  8239                           
  8240                           ;preset_programming.c: 24: if (f_state == 1) {
  8241  22C8  0021               	movlb	1	; select bank1
  8242  22C9  0338               	decf	setDoublePressState@f_state^(0+128),w
  8243  22CA  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8244  22CB  1D03               	btfss	3,2
  8245  22CC  2AD0               	goto	l8434
  8246                           
  8247                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8248  22CD  0022               	movlb	2	; select bank2
  8249  22CE  120D               	bcf	13,4	;volatile
  8250                           
  8251                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8252  22CF  128D               	bcf	13,5	;volatile
  8253  22D0                     l8434:	
  8254                           
  8255                           ;preset_programming.c: 30: }
  8256                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8257  22D0  0020               	movlb	0	; select bank0
  8258  22D1  034E               	decf	_doubleTap_state,w	;volatile
  8259  22D2  1D03               	btfss	3,2
  8260  22D3  2AEB               	goto	l8450
  8261                           
  8262                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8263  22D4  0851               	movf	_presetSaveMode,w
  8264  22D5  1D03               	btfss	3,2
  8265  22D6  2AE0               	goto	l8442
  8266                           
  8267                           ;preset_programming.c: 34: presetSaveMode = 1;
  8268  22D7  01D1               	clrf	_presetSaveMode
  8269  22D8  0AD1               	incf	_presetSaveMode,f
  8270                           
  8271                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8272  22D9  0022               	movlb	2	; select bank2
  8273  22DA  108D               	bcf	13,1	;volatile
  8274                           
  8275                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8276  22DB  086F               	movf	_presetChannel^(0+256),w
  8277  22DC  31A1  218B  31A2   	fcall	_setPresetDisplay
  8278                           
  8279                           ;preset_programming.c: 37: } else {
  8280  22DF  2AEB               	goto	l8450
  8281  22E0                     l8442:	
  8282                           
  8283                           ;preset_programming.c: 39: presetSaveMode = 0;
  8284  22E0  0020               	movlb	0	; select bank0
  8285  22E1  01D1               	clrf	_presetSaveMode
  8286                           
  8287                           ;preset_programming.c: 40: setPedalMode();
  8288  22E2  31AF  2789  31A2   	fcall	_setPedalMode
  8289                           
  8290                           ;preset_programming.c: 41: resetRingLEDs();
  8291  22E5  31AE  269A  31A2   	fcall	_resetRingLEDs
  8292                           
  8293                           ;preset_programming.c: 42: showSave();
  8294  22E8  31AE  266E  31A2   	fcall	_showSave
  8295  22EB                     l8450:	
  8296                           
  8297                           ;preset_programming.c: 44: }
  8298                           ;preset_programming.c: 45: }
  8299                           ;preset_programming.c: 47: wait_ms(20);
  8300  22EB  3014               	movlw	20
  8301  22EC  0021               	movlb	1	; select bank1
  8302  22ED  00AC               	movwf	wait_ms@timeSec^(0+128)
  8303  22EE  3000               	movlw	0
  8304  22EF  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8305  22F0  31A0  20EB         	fcall	_wait_ms
  8306  22F2  0008               	return
  8307  22F3                     __end_of_setDoublePressState:	
  8308                           
  8309                           	psect	text9
  8310  2E6E                     __ptext9:	
  8311 ;; *************** function _showSave *****************
  8312 ;; Defined at:
  8313 ;;		line 112 in file "LEDs.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;		None
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;		None
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  1    wreg      void 
  8320 ;; Registers used:
  8321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8329 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8330 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8331 ;;Total ram usage:        1 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    6
  8334 ;; This function calls:
  8335 ;;		_ring_tactiles
  8336 ;;		_solidring_tactiles
  8337 ;; This function is called by:
  8338 ;;		_setDoublePressState
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           
  8343                           ;psect for function _showSave
  8344  2E6E                     _showSave:	
  8345                           
  8346                           ;LEDs.c: 113: suspend_blink = 1;
  8347                           
  8348                           ;incstack = 0
  8349                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8350  2E6E  3001               	movlw	1
  8351  2E6F  0021               	movlb	1	; select bank1
  8352  2E70  00B7               	movwf	??_showSave^(0+128)
  8353  2E71  0837               	movf	??_showSave^(0+128),w
  8354  2E72  0022               	movlb	2	; select bank2
  8355  2E73  00ED               	movwf	_suspend_blink^(0+256)	;volatile
  8356                           
  8357                           ;LEDs.c: 114: ring_tactiles();
  8358  2E74  31A5  2519  31AE   	fcall	_ring_tactiles
  8359                           
  8360                           ;LEDs.c: 115: ring_tactiles();
  8361  2E77  31A5  2519  31AE   	fcall	_ring_tactiles
  8362                           
  8363                           ;LEDs.c: 116: solidring_tactiles();
  8364  2E7A  31A3  2333  31AE   	fcall	_solidring_tactiles
  8365                           
  8366                           ;LEDs.c: 117: solidring_tactiles();
  8367  2E7D  31A3  2333         	fcall	_solidring_tactiles
  8368                           
  8369                           ;LEDs.c: 118: suspend_blink = 0;
  8370  2E7F  0022               	movlb	2	; select bank2
  8371  2E80  01ED               	clrf	_suspend_blink^(0+256)	;volatile
  8372  2E81  0008               	return
  8373  2E82                     __end_of_showSave:	
  8374                           
  8375                           	psect	text10
  8376  2333                     __ptext10:	
  8377 ;; *************** function _solidring_tactiles *****************
  8378 ;; Defined at:
  8379 ;;		line 208 in file "LEDs.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;		None
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  1    wreg      void 
  8386 ;; Registers used:
  8387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8394 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8395 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8396 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8397 ;;Total ram usage:        3 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    5
  8400 ;; This function calls:
  8401 ;;		_set_leds_bottom
  8402 ;;		_set_leds_top
  8403 ;;		_wait_ms
  8404 ;; This function is called by:
  8405 ;;		_showSave
  8406 ;;		_showBootSequence
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           
  8411                           ;psect for function _solidring_tactiles
  8412  2333                     _solidring_tactiles:	
  8413                           
  8414                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8415                           
  8416                           ;incstack = 0
  8417                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8418  2333  301E               	movlw	30
  8419  2334  0021               	movlb	1	; select bank1
  8420  2335  00B2               	movwf	??_solidring_tactiles^(0+128)
  8421  2336  0832               	movf	??_solidring_tactiles^(0+128),w
  8422  2337  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8423                           
  8424                           ;LEDs.c: 210: set_leds_top(100, 1);
  8425  2338  3064               	movlw	100
  8426  2339  00A0               	movwf	set_leds_top@x^(0+128)
  8427  233A  3000               	movlw	0
  8428  233B  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8429  233C  3001               	movlw	1
  8430  233D  00A2               	movwf	set_leds_top@ledState^(0+128)
  8431  233E  3000               	movlw	0
  8432  233F  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8433  2340  31A6  265F  31A3   	fcall	_set_leds_top
  8434                           
  8435                           ;LEDs.c: 211: set_leds_bottom(100);
  8436  2343  3064               	movlw	100
  8437  2344  0021               	movlb	1	; select bank1
  8438  2345  00A0               	movwf	set_leds_bottom@x^(0+128)
  8439  2346  3000               	movlw	0
  8440  2347  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8441  2348  31A1  21C5  31A3   	fcall	_set_leds_bottom
  8442                           
  8443                           ;LEDs.c: 212: wait_ms(ring_delay);
  8444  234B  0021               	movlb	1	; select bank1
  8445  234C  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8446  234D  00B2               	movwf	??_solidring_tactiles^(0+128)
  8447  234E  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8448  234F  0832               	movf	??_solidring_tactiles^(0+128),w
  8449  2350  00AC               	movwf	wait_ms@timeSec^(0+128)
  8450  2351  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8451  2352  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8452  2353  31A0  20EB  31A3   	fcall	_wait_ms
  8453                           
  8454                           ;LEDs.c: 214: set_leds_top(0, 1);
  8455  2356  3000               	movlw	0
  8456  2357  0021               	movlb	1	; select bank1
  8457  2358  00A0               	movwf	set_leds_top@x^(0+128)
  8458  2359  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8459  235A  3001               	movlw	1
  8460  235B  00A2               	movwf	set_leds_top@ledState^(0+128)
  8461  235C  3000               	movlw	0
  8462  235D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8463  235E  31A6  265F  31A3   	fcall	_set_leds_top
  8464                           
  8465                           ;LEDs.c: 215: set_leds_bottom(0);
  8466  2361  3000               	movlw	0
  8467  2362  0021               	movlb	1	; select bank1
  8468  2363  00A0               	movwf	set_leds_bottom@x^(0+128)
  8469  2364  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8470  2365  31A1  21C5  31A3   	fcall	_set_leds_bottom
  8471                           
  8472                           ;LEDs.c: 216: wait_ms(ring_delay);
  8473  2368  0021               	movlb	1	; select bank1
  8474  2369  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8475  236A  00B2               	movwf	??_solidring_tactiles^(0+128)
  8476  236B  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8477  236C  0832               	movf	??_solidring_tactiles^(0+128),w
  8478  236D  00AC               	movwf	wait_ms@timeSec^(0+128)
  8479  236E  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8480  236F  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8481  2370  31A0  20EB         	fcall	_wait_ms
  8482  2372  0008               	return
  8483  2373                     __end_of_solidring_tactiles:	
  8484                           
  8485                           	psect	text11
  8486  2519                     __ptext11:	
  8487 ;; *************** function _ring_tactiles *****************
  8488 ;; Defined at:
  8489 ;;		line 196 in file "LEDs.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;		None
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  iLed            2   21[BANK1 ] int 
  8494 ;;  iLed            2   19[BANK1 ] int 
  8495 ;; Return value:  Size  Location     Type
  8496 ;;                  1    wreg      void 
  8497 ;; Registers used:
  8498 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8499 ;; Tracked objects:
  8500 ;;		On entry : 0/0
  8501 ;;		On exit  : 0/0
  8502 ;;		Unchanged: 0/0
  8503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8505 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8506 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8507 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8508 ;;Total ram usage:        5 bytes
  8509 ;; Hardware stack levels used:    1
  8510 ;; Hardware stack levels required when called:    5
  8511 ;; This function calls:
  8512 ;;		_set_leds_bottom
  8513 ;;		_set_leds_top
  8514 ;;		_wait_ms
  8515 ;; This function is called by:
  8516 ;;		_showSave
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           
  8521                           ;psect for function _ring_tactiles
  8522  2519                     _ring_tactiles:	
  8523                           
  8524                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8525                           
  8526                           ;incstack = 0
  8527                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8528  2519  3001               	movlw	1
  8529  251A  0021               	movlb	1	; select bank1
  8530  251B  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8531  251C  3000               	movlw	0
  8532  251D  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8533  251E  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8534  251F  3A80               	xorlw	128
  8535  2520  00B2               	movwf	??_ring_tactiles^(0+128)
  8536  2521  3080               	movlw	128
  8537  2522  0232               	subwf	??_ring_tactiles^(0+128),w
  8538  2523  1D03               	skipz
  8539  2524  2D27               	goto	u8345
  8540  2525  3007               	movlw	7
  8541  2526  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8542  2527                     u8345:	
  8543  2527  1803               	btfsc	3,0
  8544  2528  2D4D               	goto	l7960
  8545  2529                     l7952:	
  8546                           
  8547                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8548  2529  0021               	movlb	1	; select bank1
  8549  252A  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8550  252B  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8551  252C  0833               	movf	ring_tactiles@iLed^(0+128),w
  8552  252D  00A0               	movwf	set_leds_top@x^(0+128)
  8553  252E  3001               	movlw	1
  8554  252F  00A2               	movwf	set_leds_top@ledState^(0+128)
  8555  2530  3000               	movlw	0
  8556  2531  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8557  2532  31A6  265F  31A5   	fcall	_set_leds_top
  8558                           
  8559                           ;LEDs.c: 199: wait_ms(5);
  8560  2535  3005               	movlw	5
  8561  2536  0021               	movlb	1	; select bank1
  8562  2537  00AC               	movwf	wait_ms@timeSec^(0+128)
  8563  2538  3000               	movlw	0
  8564  2539  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8565  253A  31A0  20EB  31A5   	fcall	_wait_ms
  8566  253D  3001               	movlw	1
  8567  253E  0021               	movlb	1	; select bank1
  8568  253F  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8569  2540  3000               	movlw	0
  8570  2541  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8571  2542  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8572  2543  3A80               	xorlw	128
  8573  2544  00B2               	movwf	??_ring_tactiles^(0+128)
  8574  2545  3080               	movlw	128
  8575  2546  0232               	subwf	??_ring_tactiles^(0+128),w
  8576  2547  1D03               	skipz
  8577  2548  2D4B               	goto	u8355
  8578  2549  3007               	movlw	7
  8579  254A  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8580  254B                     u8355:	
  8581  254B  1C03               	skipc
  8582  254C  2D29               	goto	l7952
  8583  254D                     l7960:	
  8584                           
  8585                           ;LEDs.c: 200: }
  8586                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8587  254D  3005               	movlw	5
  8588  254E  0021               	movlb	1	; select bank1
  8589  254F  00B5               	movwf	ring_tactiles@iLed_1532^(0+128)
  8590  2550  3000               	movlw	0
  8591  2551  00B6               	movwf	(ring_tactiles@iLed_1532^(0+128)+1)
  8592  2552                     L4:	
  8593  2552  1BB6               	btfsc	(ring_tactiles@iLed_1532+1)^(0+128),7
  8594  2553  0008               	return
  8595                           
  8596                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8597  2554  0836               	movf	(ring_tactiles@iLed_1532+1)^(0+128),w
  8598  2555  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8599  2556  0835               	movf	ring_tactiles@iLed_1532^(0+128),w
  8600  2557  00A0               	movwf	set_leds_bottom@x^(0+128)
  8601  2558  31A1  21C5  31A5   	fcall	_set_leds_bottom
  8602                           
  8603                           ;LEDs.c: 203: wait_ms(5);
  8604  255B  3005               	movlw	5
  8605  255C  0021               	movlb	1	; select bank1
  8606  255D  00AC               	movwf	wait_ms@timeSec^(0+128)
  8607  255E  3000               	movlw	0
  8608  255F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8609  2560  31A0  20EB  31A5   	fcall	_wait_ms
  8610  2563  30FF               	movlw	255
  8611  2564  0021               	movlb	1	; select bank1
  8612  2565  07B5               	addwf	ring_tactiles@iLed_1532^(0+128),f
  8613  2566  30FF               	movlw	255
  8614  2567  3DB6               	addwfc	(ring_tactiles@iLed_1532+1)^(0+128),f
  8615  2568  2D52               	goto	L4
  8616  2569                     __end_of_ring_tactiles:	
  8617                           
  8618                           	psect	text12
  8619  2F89                     __ptext12:	
  8620 ;; *************** function _setPedalMode *****************
  8621 ;; Defined at:
  8622 ;;		line 119 in file "tactiles.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;		None
  8625 ;; Auto vars:     Size  Location     Type
  8626 ;;		None
  8627 ;; Return value:  Size  Location     Type
  8628 ;;                  1    wreg      void 
  8629 ;; Registers used:
  8630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8631 ;; Tracked objects:
  8632 ;;		On entry : 0/0
  8633 ;;		On exit  : 0/0
  8634 ;;		Unchanged: 0/0
  8635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8640 ;;Total ram usage:        0 bytes
  8641 ;; Hardware stack levels used:    1
  8642 ;; Hardware stack levels required when called:    5
  8643 ;; This function calls:
  8644 ;;		_resetRingLEDs
  8645 ;;		_setExpressionDisplay
  8646 ;;		_setPresetDisplay
  8647 ;; This function is called by:
  8648 ;;		_update_mode
  8649 ;;		_setDoublePressState
  8650 ;; This function uses a non-reentrant model
  8651 ;;
  8652                           
  8653                           
  8654                           ;psect for function _setPedalMode
  8655  2F89                     _setPedalMode:	
  8656                           
  8657                           ;tactiles.c: 120: switch (mode2_state) {
  8658                           
  8659                           ;incstack = 0
  8660                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8661  2F89  2F9F               	goto	l8160
  8662  2F8A                     l998:	
  8663                           ;tactiles.c: 121: case 0:
  8664                           
  8665                           
  8666                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8667  2F8A  0022               	movlb	2	; select bank2
  8668  2F8B  108D               	bcf	13,1	;volatile
  8669                           
  8670                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8671  2F8C  100D               	bcf	13,0	;volatile
  8672                           
  8673                           ;tactiles.c: 124: resetRingLEDs();
  8674  2F8D  31AE  269A         	fcall	_resetRingLEDs
  8675                           
  8676                           ;tactiles.c: 125: break;
  8677  2F8F  0008               	return
  8678  2F90                     l1000:	
  8679                           ;tactiles.c: 126: case 1:
  8680                           
  8681                           
  8682                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8683  2F90  0022               	movlb	2	; select bank2
  8684  2F91  108D               	bcf	13,1	;volatile
  8685                           
  8686                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8687  2F92  140D               	bsf	13,0	;volatile
  8688                           
  8689                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8690  2F93  086F               	movf	_presetChannel^(0+256),w
  8691  2F94  31A1  218B         	fcall	_setPresetDisplay
  8692                           
  8693                           ;tactiles.c: 130: break;
  8694  2F96  0008               	return
  8695  2F97                     l1001:	
  8696                           ;tactiles.c: 131: case 2:
  8697                           
  8698                           
  8699                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8700  2F97  0022               	movlb	2	; select bank2
  8701  2F98  148D               	bsf	13,1	;volatile
  8702                           
  8703                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8704  2F99  100D               	bcf	13,0	;volatile
  8705                           
  8706                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8707  2F9A  0023               	movlb	3	; select bank3
  8708  2F9B  0863               	movf	_expressionChannel^(0+384),w
  8709  2F9C  31AE  2682         	fcall	_setExpressionDisplay
  8710                           
  8711                           ;tactiles.c: 136: }
  8712                           
  8713                           ;tactiles.c: 135: break;
  8714  2F9E  0008               	return
  8715  2F9F                     l8160:	
  8716  2F9F  0020               	movlb	0	; select bank0
  8717  2FA0  0850               	movf	_mode2_state,w
  8718                           
  8719                           ; Switch size 1, requested type "space"
  8720                           ; Number of cases is 3, Range of values is 0 to 2
  8721                           ; switch strategies available:
  8722                           ; Name         Instructions Cycles
  8723                           ; simple_byte           10     6 (average)
  8724                           ; direct_byte           12     6 (fixed)
  8725                           ; jumptable            260     6 (fixed)
  8726                           ;	Chosen strategy is simple_byte
  8727  2FA1  3A00               	xorlw	0	; case 0
  8728  2FA2  1903               	skipnz
  8729  2FA3  2F8A               	goto	l998
  8730  2FA4  3A01               	xorlw	1	; case 1
  8731  2FA5  1903               	skipnz
  8732  2FA6  2F90               	goto	l1000
  8733  2FA7  3A03               	xorlw	3	; case 2
  8734  2FA8  1903               	skipnz
  8735  2FA9  2F97               	goto	l1001
  8736  2FAA  2FAB               	goto	l1002
  8737  2FAB                     l1002:	
  8738  2FAB  0008               	return
  8739  2FAC                     __end_of_setPedalMode:	
  8740                           
  8741                           	psect	text13
  8742  218B                     __ptext13:	
  8743 ;; *************** function _setPresetDisplay *****************
  8744 ;; Defined at:
  8745 ;;		line 51 in file "preset_programming.c"
  8746 ;; Parameters:    Size  Location     Type
  8747 ;;  ledChannel      1    wreg     unsigned char 
  8748 ;; Auto vars:     Size  Location     Type
  8749 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8750 ;; Return value:  Size  Location     Type
  8751 ;;                  1    wreg      void 
  8752 ;; Registers used:
  8753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8754 ;; Tracked objects:
  8755 ;;		On entry : 0/0
  8756 ;;		On exit  : 0/0
  8757 ;;		Unchanged: 0/0
  8758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8760 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8761 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8762 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8763 ;;Total ram usage:        3 bytes
  8764 ;; Hardware stack levels used:    1
  8765 ;; Hardware stack levels required when called:    4
  8766 ;; This function calls:
  8767 ;;		_set_leds_bottom
  8768 ;;		_set_leds_top
  8769 ;; This function is called by:
  8770 ;;		_setPedalMode
  8771 ;;		_update_selectMode
  8772 ;;		_setDoublePressState
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           
  8777                           ;psect for function _setPresetDisplay
  8778  218B                     _setPresetDisplay:	
  8779                           
  8780                           ;incstack = 0
  8781                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8782                           ;setPresetDisplay@ledChannel stored from wreg
  8783  218B  0021               	movlb	1	; select bank1
  8784  218C  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8785                           
  8786                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8787  218D  3006               	movlw	6
  8788  218E  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8789  218F  1803               	skipnc
  8790  2190  29A7               	goto	l7980
  8791                           
  8792                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8793  2191  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8794  2192  00A4               	movwf	??_setPresetDisplay^(0+128)
  8795  2193  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8796  2194  0824               	movf	??_setPresetDisplay^(0+128),w
  8797  2195  00A0               	movwf	set_leds_top@x^(0+128)
  8798  2196  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8799  2197  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8800  2198  3001               	movlw	1
  8801  2199  00A2               	movwf	set_leds_top@ledState^(0+128)
  8802  219A  3000               	movlw	0
  8803  219B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8804  219C  31A6  265F  31A1   	fcall	_set_leds_top
  8805                           
  8806                           ;preset_programming.c: 54: set_leds_bottom(6);
  8807  219F  3006               	movlw	6
  8808  21A0  0021               	movlb	1	; select bank1
  8809  21A1  00A0               	movwf	set_leds_bottom@x^(0+128)
  8810  21A2  3000               	movlw	0
  8811  21A3  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8812  21A4  31A1  21C5         	fcall	_set_leds_bottom
  8813                           
  8814                           ;preset_programming.c: 55: } else {
  8815  21A6  0008               	return
  8816  21A7                     l7980:	
  8817                           
  8818                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8819  21A7  3006               	movlw	6
  8820  21A8  0021               	movlb	1	; select bank1
  8821  21A9  00A0               	movwf	set_leds_top@x^(0+128)
  8822  21AA  3000               	movlw	0
  8823  21AB  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8824  21AC  3001               	movlw	1
  8825  21AD  00A2               	movwf	set_leds_top@ledState^(0+128)
  8826  21AE  3000               	movlw	0
  8827  21AF  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8828  21B0  31A6  265F  31A1   	fcall	_set_leds_top
  8829                           
  8830                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8831  21B3  0021               	movlb	1	; select bank1
  8832  21B4  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8833  21B5  00A4               	movwf	??_setPresetDisplay^(0+128)
  8834  21B6  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8835  21B7  09A4               	comf	??_setPresetDisplay^(0+128),f
  8836  21B8  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8837  21B9  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8838  21BA  1903               	skipnz
  8839  21BB  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8840  21BC  0824               	movf	??_setPresetDisplay^(0+128),w
  8841  21BD  3E0B               	addlw	11
  8842  21BE  00A0               	movwf	set_leds_bottom@x^(0+128)
  8843  21BF  3000               	movlw	0
  8844  21C0  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8845  21C1  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8846  21C2  31A1  21C5         	fcall	_set_leds_bottom
  8847  21C4  0008               	return
  8848  21C5                     __end_of_setPresetDisplay:	
  8849                           
  8850                           	psect	text14
  8851  2E82                     __ptext14:	
  8852 ;; *************** function _setExpressionDisplay *****************
  8853 ;; Defined at:
  8854 ;;		line 66 in file "preset_programming.c"
  8855 ;; Parameters:    Size  Location     Type
  8856 ;;  ledChannel      1    wreg     unsigned char 
  8857 ;; Auto vars:     Size  Location     Type
  8858 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8859 ;; Return value:  Size  Location     Type
  8860 ;;                  1    wreg      void 
  8861 ;; Registers used:
  8862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8863 ;; Tracked objects:
  8864 ;;		On entry : 0/0
  8865 ;;		On exit  : 0/0
  8866 ;;		Unchanged: 0/0
  8867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8869 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8870 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8871 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8872 ;;Total ram usage:        3 bytes
  8873 ;; Hardware stack levels used:    1
  8874 ;; Hardware stack levels required when called:    4
  8875 ;; This function calls:
  8876 ;;		_set_leds_bottom
  8877 ;;		_set_leds_top
  8878 ;; This function is called by:
  8879 ;;		_setPedalMode
  8880 ;;		_update_selectMode
  8881 ;; This function uses a non-reentrant model
  8882 ;;
  8883                           
  8884                           
  8885                           ;psect for function _setExpressionDisplay
  8886  2E82                     _setExpressionDisplay:	
  8887                           
  8888                           ;incstack = 0
  8889                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8890                           ;setExpressionDisplay@ledChannel stored from wreg
  8891  2E82  0021               	movlb	1	; select bank1
  8892  2E83  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8893                           
  8894                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8895  2E84  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8896  2E85  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8897  2E86  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8898  2E87  0824               	movf	??_setExpressionDisplay^(0+128),w
  8899  2E88  00A0               	movwf	set_leds_top@x^(0+128)
  8900  2E89  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8901  2E8A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8902  2E8B  3001               	movlw	1
  8903  2E8C  00A2               	movwf	set_leds_top@ledState^(0+128)
  8904  2E8D  3000               	movlw	0
  8905  2E8E  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8906  2E8F  31A6  265F  31AE   	fcall	_set_leds_top
  8907                           
  8908                           ;preset_programming.c: 68: set_leds_bottom(6);
  8909  2E92  3006               	movlw	6
  8910  2E93  0021               	movlb	1	; select bank1
  8911  2E94  00A0               	movwf	set_leds_bottom@x^(0+128)
  8912  2E95  3000               	movlw	0
  8913  2E96  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8914  2E97  31A1  21C5         	fcall	_set_leds_bottom
  8915  2E99  0008               	return
  8916  2E9A                     __end_of_setExpressionDisplay:	
  8917                           
  8918                           	psect	text15
  8919  2E9A                     __ptext15:	
  8920 ;; *************** function _resetRingLEDs *****************
  8921 ;; Defined at:
  8922 ;;		line 61 in file "preset_programming.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;		None
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;		None
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      void 
  8929 ;; Registers used:
  8930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8940 ;;Total ram usage:        0 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    4
  8943 ;; This function calls:
  8944 ;;		_set_leds_bottom
  8945 ;;		_set_leds_top
  8946 ;; This function is called by:
  8947 ;;		_update_mode
  8948 ;;		_setPedalMode
  8949 ;;		_setDoublePressState
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           
  8954                           ;psect for function _resetRingLEDs
  8955  2E9A                     _resetRingLEDs:	
  8956                           
  8957                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8958                           
  8959                           ;incstack = 0
  8960                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8961  2E9A  0020               	movlb	0	; select bank0
  8962  2E9B  085B               	movf	_top_push_state+1,w
  8963  2E9C  0021               	movlb	1	; select bank1
  8964  2E9D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8965  2E9E  0020               	movlb	0	; select bank0
  8966  2E9F  085A               	movf	_top_push_state,w
  8967  2EA0  0021               	movlb	1	; select bank1
  8968  2EA1  00A0               	movwf	set_leds_top@x^(0+128)
  8969  2EA2  3001               	movlw	1
  8970  2EA3  00A2               	movwf	set_leds_top@ledState^(0+128)
  8971  2EA4  3000               	movlw	0
  8972  2EA5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8973  2EA6  31A6  265F  31AE   	fcall	_set_leds_top
  8974                           
  8975                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8976  2EA9  0020               	movlb	0	; select bank0
  8977  2EAA  0857               	movf	_bottom_push_state+1,w
  8978  2EAB  0021               	movlb	1	; select bank1
  8979  2EAC  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8980  2EAD  0020               	movlb	0	; select bank0
  8981  2EAE  0856               	movf	_bottom_push_state,w
  8982  2EAF  0021               	movlb	1	; select bank1
  8983  2EB0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8984  2EB1  31A1  21C5         	fcall	_set_leds_bottom
  8985  2EB3  0008               	return
  8986  2EB4                     __end_of_resetRingLEDs:	
  8987                           
  8988                           	psect	text16
  8989  0DDD                     __ptext16:	
  8990 ;; *************** function _updateModulationArray *****************
  8991 ;; Defined at:
  8992 ;;		line 44 in file "modulation.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;		None
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;  thisAngle       2   56[BANK2 ] int 
  8997 ;;  iAngle          1   58[BANK2 ] unsigned char 
  8998 ;;  subDiv          2   54[BANK2 ] int 
  8999 ;;  angleFactor     2   52[BANK2 ] int 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      void 
  9002 ;; Registers used:
  9003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9010 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9011 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9012 ;;      Totals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9013 ;;Total ram usage:       11 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    7
  9016 ;; This function calls:
  9017 ;;		___awdiv
  9018 ;;		___awtoft
  9019 ;;		___wmul
  9020 ;;		_getModulationSubdivision
  9021 ;;		_modSaw
  9022 ;;		_modSawRev
  9023 ;;		_modSin
  9024 ;;		_modSquare
  9025 ;;		_modTri
  9026 ;; This function is called by:
  9027 ;;		_main
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           
  9032                           ;psect for function _updateModulationArray
  9033  0DDD                     _updateModulationArray:	
  9034                           
  9035                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9036                           
  9037                           ;incstack = 0
  9038                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9039  0DDD  31A0  208B  318D   	fcall	_getModulationSubdivision
  9040  0DE0  0021               	movlb	1	; select bank1
  9041  0DE1  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9042  0DE2  0022               	movlb	2	; select bank2
  9043  0DE3  00D7               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9044  0DE4  0021               	movlb	1	; select bank1
  9045  0DE5  0820               	movf	?_getModulationSubdivision^(0+128),w
  9046  0DE6  0022               	movlb	2	; select bank2
  9047  0DE7  00D6               	movwf	updateModulationArray@subDiv^(0+256)
  9048                           
  9049                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9050  0DE8  307A               	movlw	122
  9051  0DE9  0086               	movwf	6
  9052  0DEA  3024               	movlw	36
  9053  0DEB  0087               	movwf	7
  9054  0DEC  3F40               	moviw [0]fsr1
  9055  0DED  00D0               	movwf	??_updateModulationArray^(0+256)
  9056  0DEE  3F41               	moviw [1]fsr1
  9057  0DEF  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9058  0DF0  0020               	movlb	0	; select bank0
  9059  0DF1  0857               	movf	_bottom_push_state+1,w
  9060  0DF2  0022               	movlb	2	; select bank2
  9061  0DF3  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9062  0DF4  1D03               	skipz
  9063  0DF5  2DFA               	goto	u9285
  9064  0DF6  0020               	movlb	0	; select bank0
  9065  0DF7  0856               	movf	_bottom_push_state,w
  9066  0DF8  0022               	movlb	2	; select bank2
  9067  0DF9  0650               	xorwf	??_updateModulationArray^(0+256),w
  9068  0DFA                     u9285:	
  9069  0DFA  1D03               	skipz
  9070  0DFB  2E20               	goto	l8720
  9071  0DFC  307C               	movlw	124
  9072  0DFD  0086               	movwf	6
  9073  0DFE  3024               	movlw	36
  9074  0DFF  0087               	movwf	7
  9075  0E00  3F40               	moviw [0]fsr1
  9076  0E01  00D0               	movwf	??_updateModulationArray^(0+256)
  9077  0E02  3F41               	moviw [1]fsr1
  9078  0E03  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9079  0E04  0023               	movlb	3	; select bank3
  9080  0E05  085C               	movf	(_symmetry+1)^(0+384),w
  9081  0E06  0022               	movlb	2	; select bank2
  9082  0E07  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9083  0E08  1D03               	skipz
  9084  0E09  2E0E               	goto	u9295
  9085  0E0A  0023               	movlb	3	; select bank3
  9086  0E0B  085B               	movf	_symmetry^(0+384),w
  9087  0E0C  0022               	movlb	2	; select bank2
  9088  0E0D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9089  0E0E                     u9295:	
  9090  0E0E  1D03               	skipz
  9091  0E0F  2E20               	goto	l8720
  9092  0E10  307E               	movlw	126
  9093  0E11  0086               	movwf	6
  9094  0E12  3024               	movlw	36
  9095  0E13  0087               	movwf	7
  9096  0E14  3F40               	moviw [0]fsr1
  9097  0E15  00D0               	movwf	??_updateModulationArray^(0+256)
  9098  0E16  3F41               	moviw [1]fsr1
  9099  0E17  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9100  0E18  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9101  0E19  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9102  0E1A  1D03               	skipz
  9103  0E1B  2E1E               	goto	u9305
  9104  0E1C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9105  0E1D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9106  0E1E                     u9305:	
  9107  0E1E  1903               	btfsc	3,2
  9108  0E1F  0008               	return
  9109  0E20                     l8720:	
  9110                           ;modulation.c: 48: return;
  9111                           
  9112                           
  9113                           ;modulation.c: 49: }
  9114                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9115  0E20  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9116  0E21  0021               	movlb	1	; select bank1
  9117  0E22  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9118  0E23  0022               	movlb	2	; select bank2
  9119  0E24  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9120  0E25  0021               	movlb	1	; select bank1
  9121  0E26  00A0               	movwf	___awdiv@divisor^(0+128)
  9122  0E27  3068               	movlw	104
  9123  0E28  00A2               	movwf	___awdiv@dividend^(0+128)
  9124  0E29  3001               	movlw	1
  9125  0E2A  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9126  0E2B  31A5  25BA  318D   	fcall	___awdiv
  9127  0E2E  0021               	movlb	1	; select bank1
  9128  0E2F  0821               	movf	(?___awdiv+1)^(0+128),w
  9129  0E30  0022               	movlb	2	; select bank2
  9130  0E31  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9131  0E32  0021               	movlb	1	; select bank1
  9132  0E33  0820               	movf	?___awdiv^(0+128),w
  9133  0E34  0022               	movlb	2	; select bank2
  9134  0E35  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9135                           
  9136                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9137  0E36  01DA               	clrf	updateModulationArray@iAngle^(0+256)
  9138  0E37                     l8744:	
  9139  0E37  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9140  0E38  3A80               	xorlw	128
  9141  0E39  3C80               	sublw	128
  9142  0E3A  1D03               	skipz
  9143  0E3B  2E3E               	goto	u9315
  9144  0E3C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9145  0E3D  025A               	subwf	updateModulationArray@iAngle^(0+256),w
  9146  0E3E                     u9315:	
  9147  0E3E  1803               	btfsc	3,0
  9148  0E3F  2FE4               	goto	l8746
  9149                           
  9150                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9151  0E40  0022               	movlb	2	; select bank2
  9152  0E41  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9153  0E42  00D0               	movwf	??_updateModulationArray^(0+256)
  9154  0E43  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9155  0E44  0850               	movf	??_updateModulationArray^(0+256),w
  9156  0E45  00AE               	movwf	___wmul@multiplier^(0+256)
  9157  0E46  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9158  0E47  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9159  0E48  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9160  0E49  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9161  0E4A  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9162  0E4B  00B0               	movwf	___wmul@multiplicand^(0+256)
  9163  0E4C  31AE  26CE  318D   	fcall	___wmul
  9164  0E4F  0022               	movlb	2	; select bank2
  9165  0E50  082F               	movf	(?___wmul+1)^(0+256),w
  9166  0E51  00D9               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9167  0E52  082E               	movf	?___wmul^(0+256),w
  9168  0E53  00D8               	movwf	updateModulationArray@thisAngle^(0+256)
  9169                           
  9170                           ;modulation.c: 54: switch (bottom_push_state) {
  9171  0E54  2FC7               	goto	l8740
  9172  0E55                     l8726:	
  9173                           ;modulation.c: 55: case 1:
  9174                           
  9175                           
  9176                           ;modulation.c: 56: modArray[iAngle] = modSin(thisAngle, symmetry);
  9177  0E55  0022               	movlb	2	; select bank2
  9178  0E56  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9179  0E57  0021               	movlb	1	; select bank1
  9180  0E58  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9181  0E59  0022               	movlb	2	; select bank2
  9182  0E5A  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9183  0E5B  0021               	movlb	1	; select bank1
  9184  0E5C  00A8               	movwf	___awtoft@c^(0+128)
  9185  0E5D  31AF  2767  318D   	fcall	___awtoft
  9186  0E60  0021               	movlb	1	; select bank1
  9187  0E61  0828               	movf	?___awtoft^(0+128),w
  9188  0E62  0022               	movlb	2	; select bank2
  9189  0E63  00B4               	movwf	modSin@angle^(0+256)
  9190  0E64  0021               	movlb	1	; select bank1
  9191  0E65  0829               	movf	(?___awtoft+1)^(0+128),w
  9192  0E66  0022               	movlb	2	; select bank2
  9193  0E67  00B5               	movwf	(modSin@angle+1)^(0+256)
  9194  0E68  0021               	movlb	1	; select bank1
  9195  0E69  082A               	movf	(?___awtoft+2)^(0+128),w
  9196  0E6A  0022               	movlb	2	; select bank2
  9197  0E6B  00B6               	movwf	(modSin@angle+2)^(0+256)
  9198  0E6C  0023               	movlb	3	; select bank3
  9199  0E6D  085C               	movf	(_symmetry+1)^(0+384),w
  9200  0E6E  0021               	movlb	1	; select bank1
  9201  0E6F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9202  0E70  0023               	movlb	3	; select bank3
  9203  0E71  085B               	movf	_symmetry^(0+384),w
  9204  0E72  0021               	movlb	1	; select bank1
  9205  0E73  00A8               	movwf	___awtoft@c^(0+128)
  9206  0E74  31AF  2767  318D   	fcall	___awtoft
  9207  0E77  0021               	movlb	1	; select bank1
  9208  0E78  0828               	movf	?___awtoft^(0+128),w
  9209  0E79  0022               	movlb	2	; select bank2
  9210  0E7A  00B7               	movwf	modSin@inflection^(0+256)
  9211  0E7B  0021               	movlb	1	; select bank1
  9212  0E7C  0829               	movf	(?___awtoft+1)^(0+128),w
  9213  0E7D  0022               	movlb	2	; select bank2
  9214  0E7E  00B8               	movwf	(modSin@inflection+1)^(0+256)
  9215  0E7F  0021               	movlb	1	; select bank1
  9216  0E80  082A               	movf	(?___awtoft+2)^(0+128),w
  9217  0E81  0022               	movlb	2	; select bank2
  9218  0E82  00B9               	movwf	(modSin@inflection+2)^(0+256)
  9219  0E83  3196  2654  318D   	fcall	_modSin
  9220  0E86  0022               	movlb	2	; select bank2
  9221  0E87  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9222  0E88  00D0               	movwf	??_updateModulationArray^(0+256)
  9223  0E89  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9224  0E8A  35D0               	lslf	??_updateModulationArray^(0+256),f
  9225  0E8B  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9226  0E8C  308A               	movlw	138
  9227  0E8D  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9228  0E8E  3023               	movlw	35
  9229  0E8F  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9230  0E90  0850               	movf	??_updateModulationArray^(0+256),w
  9231  0E91  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9232  0E92  0086               	movwf	6
  9233  0E93  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9234  0E94  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9235  0E95  0087               	movwf	7
  9236  0E96  0834               	movf	?_modSin^(0+256),w
  9237  0E97  3FC0               	movwi [0]fsr1
  9238  0E98  0835               	movf	(?_modSin+1)^(0+256),w
  9239  0E99  3FC1               	movwi [1]fsr1
  9240                           
  9241                           ;modulation.c: 57: break;
  9242  0E9A  2FDE               	goto	l8742
  9243  0E9B                     l8728:	
  9244                           ;modulation.c: 58: case 2:
  9245                           
  9246                           
  9247                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9248  0E9B  0022               	movlb	2	; select bank2
  9249  0E9C  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9250  0E9D  0021               	movlb	1	; select bank1
  9251  0E9E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9252  0E9F  0022               	movlb	2	; select bank2
  9253  0EA0  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9254  0EA1  0021               	movlb	1	; select bank1
  9255  0EA2  00A8               	movwf	___awtoft@c^(0+128)
  9256  0EA3  31AF  2767  318D   	fcall	___awtoft
  9257  0EA6  0021               	movlb	1	; select bank1
  9258  0EA7  0828               	movf	?___awtoft^(0+128),w
  9259  0EA8  0022               	movlb	2	; select bank2
  9260  0EA9  00AE               	movwf	modTri@angle^(0+256)
  9261  0EAA  0021               	movlb	1	; select bank1
  9262  0EAB  0829               	movf	(?___awtoft+1)^(0+128),w
  9263  0EAC  0022               	movlb	2	; select bank2
  9264  0EAD  00AF               	movwf	(modTri@angle+1)^(0+256)
  9265  0EAE  0021               	movlb	1	; select bank1
  9266  0EAF  082A               	movf	(?___awtoft+2)^(0+128),w
  9267  0EB0  0022               	movlb	2	; select bank2
  9268  0EB1  00B0               	movwf	(modTri@angle+2)^(0+256)
  9269  0EB2  0023               	movlb	3	; select bank3
  9270  0EB3  085C               	movf	(_symmetry+1)^(0+384),w
  9271  0EB4  0021               	movlb	1	; select bank1
  9272  0EB5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9273  0EB6  0023               	movlb	3	; select bank3
  9274  0EB7  085B               	movf	_symmetry^(0+384),w
  9275  0EB8  0021               	movlb	1	; select bank1
  9276  0EB9  00A8               	movwf	___awtoft@c^(0+128)
  9277  0EBA  31AF  2767  318D   	fcall	___awtoft
  9278  0EBD  0021               	movlb	1	; select bank1
  9279  0EBE  0828               	movf	?___awtoft^(0+128),w
  9280  0EBF  0022               	movlb	2	; select bank2
  9281  0EC0  00B1               	movwf	modTri@inflection^(0+256)
  9282  0EC1  0021               	movlb	1	; select bank1
  9283  0EC2  0829               	movf	(?___awtoft+1)^(0+128),w
  9284  0EC3  0022               	movlb	2	; select bank2
  9285  0EC4  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9286  0EC5  0021               	movlb	1	; select bank1
  9287  0EC6  082A               	movf	(?___awtoft+2)^(0+128),w
  9288  0EC7  0022               	movlb	2	; select bank2
  9289  0EC8  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9290  0EC9  318B  23E2  318D   	fcall	_modTri
  9291  0ECC  0022               	movlb	2	; select bank2
  9292  0ECD  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9293  0ECE  00D0               	movwf	??_updateModulationArray^(0+256)
  9294  0ECF  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9295  0ED0  35D0               	lslf	??_updateModulationArray^(0+256),f
  9296  0ED1  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9297  0ED2  308A               	movlw	138
  9298  0ED3  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9299  0ED4  3023               	movlw	35
  9300  0ED5  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9301  0ED6  0850               	movf	??_updateModulationArray^(0+256),w
  9302  0ED7  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9303  0ED8  0086               	movwf	6
  9304  0ED9  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9305  0EDA  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9306  0EDB  0087               	movwf	7
  9307  0EDC  082E               	movf	?_modTri^(0+256),w
  9308  0EDD  3FC0               	movwi [0]fsr1
  9309  0EDE  082F               	movf	(?_modTri+1)^(0+256),w
  9310  0EDF  3FC1               	movwi [1]fsr1
  9311                           
  9312                           ;modulation.c: 60: break;
  9313  0EE0  2FDE               	goto	l8742
  9314  0EE1                     l8730:	
  9315                           ;modulation.c: 61: case 3:
  9316                           
  9317                           
  9318                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9319  0EE1  0022               	movlb	2	; select bank2
  9320  0EE2  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9321  0EE3  0021               	movlb	1	; select bank1
  9322  0EE4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9323  0EE5  0022               	movlb	2	; select bank2
  9324  0EE6  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9325  0EE7  0021               	movlb	1	; select bank1
  9326  0EE8  00A8               	movwf	___awtoft@c^(0+128)
  9327  0EE9  31AF  2767  318D   	fcall	___awtoft
  9328  0EEC  0021               	movlb	1	; select bank1
  9329  0EED  0828               	movf	?___awtoft^(0+128),w
  9330  0EEE  0022               	movlb	2	; select bank2
  9331  0EEF  00C8               	movwf	modSquare@angle^(0+256)
  9332  0EF0  0021               	movlb	1	; select bank1
  9333  0EF1  0829               	movf	(?___awtoft+1)^(0+128),w
  9334  0EF2  0022               	movlb	2	; select bank2
  9335  0EF3  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9336  0EF4  0021               	movlb	1	; select bank1
  9337  0EF5  082A               	movf	(?___awtoft+2)^(0+128),w
  9338  0EF6  0022               	movlb	2	; select bank2
  9339  0EF7  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9340  0EF8  0023               	movlb	3	; select bank3
  9341  0EF9  085C               	movf	(_symmetry+1)^(0+384),w
  9342  0EFA  0021               	movlb	1	; select bank1
  9343  0EFB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9344  0EFC  0023               	movlb	3	; select bank3
  9345  0EFD  085B               	movf	_symmetry^(0+384),w
  9346  0EFE  0021               	movlb	1	; select bank1
  9347  0EFF  00A8               	movwf	___awtoft@c^(0+128)
  9348  0F00  31AF  2767  318D   	fcall	___awtoft
  9349  0F03  0021               	movlb	1	; select bank1
  9350  0F04  0828               	movf	?___awtoft^(0+128),w
  9351  0F05  0022               	movlb	2	; select bank2
  9352  0F06  00CB               	movwf	modSquare@inflection^(0+256)
  9353  0F07  0021               	movlb	1	; select bank1
  9354  0F08  0829               	movf	(?___awtoft+1)^(0+128),w
  9355  0F09  0022               	movlb	2	; select bank2
  9356  0F0A  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9357  0F0B  0021               	movlb	1	; select bank1
  9358  0F0C  082A               	movf	(?___awtoft+2)^(0+128),w
  9359  0F0D  0022               	movlb	2	; select bank2
  9360  0F0E  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9361  0F0F  31A2  2279  318D   	fcall	_modSquare
  9362  0F12  0022               	movlb	2	; select bank2
  9363  0F13  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9364  0F14  00D0               	movwf	??_updateModulationArray^(0+256)
  9365  0F15  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9366  0F16  35D0               	lslf	??_updateModulationArray^(0+256),f
  9367  0F17  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9368  0F18  308A               	movlw	138
  9369  0F19  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9370  0F1A  3023               	movlw	35
  9371  0F1B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9372  0F1C  0850               	movf	??_updateModulationArray^(0+256),w
  9373  0F1D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9374  0F1E  0086               	movwf	6
  9375  0F1F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9376  0F20  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9377  0F21  0087               	movwf	7
  9378  0F22  0848               	movf	?_modSquare^(0+256),w
  9379  0F23  3FC0               	movwi [0]fsr1
  9380  0F24  0849               	movf	(?_modSquare+1)^(0+256),w
  9381  0F25  3FC1               	movwi [1]fsr1
  9382                           
  9383                           ;modulation.c: 63: break;
  9384  0F26  2FDE               	goto	l8742
  9385  0F27                     l8732:	
  9386                           ;modulation.c: 64: case 4:
  9387                           
  9388                           
  9389                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9390  0F27  0022               	movlb	2	; select bank2
  9391  0F28  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9392  0F29  0021               	movlb	1	; select bank1
  9393  0F2A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9394  0F2B  0022               	movlb	2	; select bank2
  9395  0F2C  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9396  0F2D  0021               	movlb	1	; select bank1
  9397  0F2E  00A8               	movwf	___awtoft@c^(0+128)
  9398  0F2F  31AF  2767  318D   	fcall	___awtoft
  9399  0F32  0021               	movlb	1	; select bank1
  9400  0F33  0828               	movf	?___awtoft^(0+128),w
  9401  0F34  0022               	movlb	2	; select bank2
  9402  0F35  00C5               	movwf	modSawRev@angle^(0+256)
  9403  0F36  0021               	movlb	1	; select bank1
  9404  0F37  0829               	movf	(?___awtoft+1)^(0+128),w
  9405  0F38  0022               	movlb	2	; select bank2
  9406  0F39  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9407  0F3A  0021               	movlb	1	; select bank1
  9408  0F3B  082A               	movf	(?___awtoft+2)^(0+128),w
  9409  0F3C  0022               	movlb	2	; select bank2
  9410  0F3D  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9411  0F3E  0023               	movlb	3	; select bank3
  9412  0F3F  085C               	movf	(_symmetry+1)^(0+384),w
  9413  0F40  0021               	movlb	1	; select bank1
  9414  0F41  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9415  0F42  0023               	movlb	3	; select bank3
  9416  0F43  085B               	movf	_symmetry^(0+384),w
  9417  0F44  0021               	movlb	1	; select bank1
  9418  0F45  00A8               	movwf	___awtoft@c^(0+128)
  9419  0F46  31AF  2767  318D   	fcall	___awtoft
  9420  0F49  0021               	movlb	1	; select bank1
  9421  0F4A  0828               	movf	?___awtoft^(0+128),w
  9422  0F4B  0022               	movlb	2	; select bank2
  9423  0F4C  00C8               	movwf	modSawRev@inflection^(0+256)
  9424  0F4D  0021               	movlb	1	; select bank1
  9425  0F4E  0829               	movf	(?___awtoft+1)^(0+128),w
  9426  0F4F  0022               	movlb	2	; select bank2
  9427  0F50  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9428  0F51  0021               	movlb	1	; select bank1
  9429  0F52  082A               	movf	(?___awtoft+2)^(0+128),w
  9430  0F53  0022               	movlb	2	; select bank2
  9431  0F54  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9432  0F55  3190  2003  318D   	fcall	_modSawRev
  9433  0F58  0022               	movlb	2	; select bank2
  9434  0F59  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9435  0F5A  00D0               	movwf	??_updateModulationArray^(0+256)
  9436  0F5B  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9437  0F5C  35D0               	lslf	??_updateModulationArray^(0+256),f
  9438  0F5D  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9439  0F5E  308A               	movlw	138
  9440  0F5F  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9441  0F60  3023               	movlw	35
  9442  0F61  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9443  0F62  0850               	movf	??_updateModulationArray^(0+256),w
  9444  0F63  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9445  0F64  0086               	movwf	6
  9446  0F65  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9447  0F66  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9448  0F67  0087               	movwf	7
  9449  0F68  0845               	movf	?_modSawRev^(0+256),w
  9450  0F69  3FC0               	movwi [0]fsr1
  9451  0F6A  0846               	movf	(?_modSawRev+1)^(0+256),w
  9452  0F6B  3FC1               	movwi [1]fsr1
  9453                           
  9454                           ;modulation.c: 66: break;
  9455  0F6C  2FDE               	goto	l8742
  9456  0F6D                     l8734:	
  9457                           ;modulation.c: 67: case 5:
  9458                           
  9459                           
  9460                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9461  0F6D  0022               	movlb	2	; select bank2
  9462  0F6E  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9463  0F6F  0021               	movlb	1	; select bank1
  9464  0F70  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9465  0F71  0022               	movlb	2	; select bank2
  9466  0F72  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9467  0F73  0021               	movlb	1	; select bank1
  9468  0F74  00A8               	movwf	___awtoft@c^(0+128)
  9469  0F75  31AF  2767  318D   	fcall	___awtoft
  9470  0F78  0021               	movlb	1	; select bank1
  9471  0F79  0828               	movf	?___awtoft^(0+128),w
  9472  0F7A  0022               	movlb	2	; select bank2
  9473  0F7B  00AE               	movwf	modSaw@angle^(0+256)
  9474  0F7C  0021               	movlb	1	; select bank1
  9475  0F7D  0829               	movf	(?___awtoft+1)^(0+128),w
  9476  0F7E  0022               	movlb	2	; select bank2
  9477  0F7F  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9478  0F80  0021               	movlb	1	; select bank1
  9479  0F81  082A               	movf	(?___awtoft+2)^(0+128),w
  9480  0F82  0022               	movlb	2	; select bank2
  9481  0F83  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9482  0F84  0023               	movlb	3	; select bank3
  9483  0F85  085C               	movf	(_symmetry+1)^(0+384),w
  9484  0F86  0021               	movlb	1	; select bank1
  9485  0F87  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9486  0F88  0023               	movlb	3	; select bank3
  9487  0F89  085B               	movf	_symmetry^(0+384),w
  9488  0F8A  0021               	movlb	1	; select bank1
  9489  0F8B  00A8               	movwf	___awtoft@c^(0+128)
  9490  0F8C  31AF  2767  318D   	fcall	___awtoft
  9491  0F8F  0021               	movlb	1	; select bank1
  9492  0F90  0828               	movf	?___awtoft^(0+128),w
  9493  0F91  0022               	movlb	2	; select bank2
  9494  0F92  00B1               	movwf	modSaw@inflection^(0+256)
  9495  0F93  0021               	movlb	1	; select bank1
  9496  0F94  0829               	movf	(?___awtoft+1)^(0+128),w
  9497  0F95  0022               	movlb	2	; select bank2
  9498  0F96  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9499  0F97  0021               	movlb	1	; select bank1
  9500  0F98  082A               	movf	(?___awtoft+2)^(0+128),w
  9501  0F99  0022               	movlb	2	; select bank2
  9502  0F9A  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9503  0F9B  3194  24AA  318D   	fcall	_modSaw
  9504  0F9E  0022               	movlb	2	; select bank2
  9505  0F9F  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9506  0FA0  00D0               	movwf	??_updateModulationArray^(0+256)
  9507  0FA1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9508  0FA2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9509  0FA3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9510  0FA4  308A               	movlw	138
  9511  0FA5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9512  0FA6  3023               	movlw	35
  9513  0FA7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9514  0FA8  0850               	movf	??_updateModulationArray^(0+256),w
  9515  0FA9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9516  0FAA  0086               	movwf	6
  9517  0FAB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9518  0FAC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9519  0FAD  0087               	movwf	7
  9520  0FAE  082E               	movf	?_modSaw^(0+256),w
  9521  0FAF  3FC0               	movwi [0]fsr1
  9522  0FB0  082F               	movf	(?_modSaw+1)^(0+256),w
  9523  0FB1  3FC1               	movwi [1]fsr1
  9524                           
  9525                           ;modulation.c: 69: break;
  9526  0FB2  2FDE               	goto	l8742
  9527  0FB3                     l8736:	
  9528                           ;modulation.c: 70: default:
  9529                           
  9530                           
  9531                           ;modulation.c: 71: modArray[iAngle] = 0;
  9532  0FB3  0022               	movlb	2	; select bank2
  9533  0FB4  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9534  0FB5  00D0               	movwf	??_updateModulationArray^(0+256)
  9535  0FB6  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9536  0FB7  35D0               	lslf	??_updateModulationArray^(0+256),f
  9537  0FB8  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9538  0FB9  308A               	movlw	138
  9539  0FBA  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9540  0FBB  3023               	movlw	35
  9541  0FBC  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9542  0FBD  0850               	movf	??_updateModulationArray^(0+256),w
  9543  0FBE  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9544  0FBF  0086               	movwf	6
  9545  0FC0  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9546  0FC1  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9547  0FC2  0087               	movwf	7
  9548  0FC3  3000               	movlw	0
  9549  0FC4  3FC0               	movwi [0]fsr1
  9550  0FC5  3FC1               	movwi [1]fsr1
  9551                           
  9552                           ;modulation.c: 73: }
  9553                           
  9554                           ;modulation.c: 72: break;
  9555  0FC6  2FDE               	goto	l8742
  9556  0FC7                     l8740:	
  9557                           
  9558                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9559                           ; Switch size 1, requested type "space"
  9560                           ; Number of cases is 1, Range of values is 0 to 0
  9561                           ; switch strategies available:
  9562                           ; Name         Instructions Cycles
  9563                           ; simple_byte            4     3 (average)
  9564                           ; direct_byte            8     6 (fixed)
  9565                           ; jumptable            260     6 (fixed)
  9566                           ;	Chosen strategy is simple_byte
  9567  0FC7  0020               	movlb	0	; select bank0
  9568  0FC8  0857               	movf	_bottom_push_state+1,w
  9569  0FC9  3A00               	xorlw	0	; case 0
  9570  0FCA  1903               	skipnz
  9571  0FCB  2FCD               	goto	l9736
  9572  0FCC  2FB3               	goto	l8736
  9573  0FCD                     l9736:	
  9574                           
  9575                           ; Switch size 1, requested type "space"
  9576                           ; Number of cases is 5, Range of values is 1 to 5
  9577                           ; switch strategies available:
  9578                           ; Name         Instructions Cycles
  9579                           ; simple_byte           16     9 (average)
  9580                           ; direct_byte           19     9 (fixed)
  9581                           ; jumptable            263     9 (fixed)
  9582                           ;	Chosen strategy is simple_byte
  9583  0FCD  0856               	movf	_bottom_push_state,w
  9584  0FCE  3A01               	xorlw	1	; case 1
  9585  0FCF  1903               	skipnz
  9586  0FD0  2E55               	goto	l8726
  9587  0FD1  3A03               	xorlw	3	; case 2
  9588  0FD2  1903               	skipnz
  9589  0FD3  2E9B               	goto	l8728
  9590  0FD4  3A01               	xorlw	1	; case 3
  9591  0FD5  1903               	skipnz
  9592  0FD6  2EE1               	goto	l8730
  9593  0FD7  3A07               	xorlw	7	; case 4
  9594  0FD8  1903               	skipnz
  9595  0FD9  2F27               	goto	l8732
  9596  0FDA  3A01               	xorlw	1	; case 5
  9597  0FDB  1903               	skipnz
  9598  0FDC  2F6D               	goto	l8734
  9599  0FDD  2FB3               	goto	l8736
  9600  0FDE                     l8742:	
  9601  0FDE  3001               	movlw	1
  9602  0FDF  0022               	movlb	2	; select bank2
  9603  0FE0  00D0               	movwf	??_updateModulationArray^(0+256)
  9604  0FE1  0850               	movf	??_updateModulationArray^(0+256),w
  9605  0FE2  07DA               	addwf	updateModulationArray@iAngle^(0+256),f
  9606  0FE3  2E37               	goto	l8744
  9607  0FE4                     l8746:	
  9608                           
  9609                           ;modulation.c: 74: }
  9610                           ;modulation.c: 75: modArray[120] = bottom_push_state;
  9611  0FE4  307A               	movlw	122
  9612  0FE5  0086               	movwf	6
  9613  0FE6  3024               	movlw	36
  9614  0FE7  0087               	movwf	7
  9615  0FE8  0020               	movlb	0	; select bank0
  9616  0FE9  0856               	movf	_bottom_push_state,w
  9617  0FEA  3FC0               	movwi [0]fsr1
  9618  0FEB  0857               	movf	_bottom_push_state+1,w
  9619  0FEC  3FC1               	movwi [1]fsr1
  9620                           
  9621                           ;modulation.c: 76: modArray[121] = symmetry;
  9622  0FED  307C               	movlw	124
  9623  0FEE  0086               	movwf	6
  9624  0FEF  3024               	movlw	36
  9625  0FF0  0087               	movwf	7
  9626  0FF1  0023               	movlb	3	; select bank3
  9627  0FF2  085B               	movf	_symmetry^(0+384),w
  9628  0FF3  3FC0               	movwi [0]fsr1
  9629  0FF4  085C               	movf	(_symmetry+1)^(0+384),w
  9630  0FF5  3FC1               	movwi [1]fsr1
  9631                           
  9632                           ;modulation.c: 77: modArray[122] = subDiv;
  9633  0FF6  307E               	movlw	126
  9634  0FF7  0086               	movwf	6
  9635  0FF8  3024               	movlw	36
  9636  0FF9  0087               	movwf	7
  9637  0FFA  0022               	movlb	2	; select bank2
  9638  0FFB  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9639  0FFC  3FC0               	movwi [0]fsr1
  9640  0FFD  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9641  0FFE  3FC1               	movwi [1]fsr1
  9642  0FFF  0008               	return
  9643  1000                     __end_of_updateModulationArray:	
  9644                           
  9645                           	psect	text17
  9646  0BE2                     __ptext17:	
  9647 ;; *************** function _modTri *****************
  9648 ;; Defined at:
  9649 ;;		line 96 in file "modulation.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;  angle           3   14[BANK2 ] void 
  9652 ;;  inflection      3   17[BANK2 ] void 
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  tmpVal          3   29[BANK2 ] void 
  9655 ;;  period          3   26[BANK2 ] void 
  9656 ;;  shift           3   23[BANK2 ] void 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  2   14[BANK2 ] int 
  9659 ;; Registers used:
  9660 ;;		wreg, status,2, status,0, pclath, cstack
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/0
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9666 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9667 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9669 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9670 ;;Total ram usage:       18 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    5
  9673 ;; This function calls:
  9674 ;;		___ftadd
  9675 ;;		___ftdiv
  9676 ;;		___ftge
  9677 ;;		___ftmul
  9678 ;;		___ftneg
  9679 ;;		___fttol
  9680 ;; This function is called by:
  9681 ;;		_updateModulationArray
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           
  9686                           ;psect for function _modTri
  9687  0BE2                     _modTri:	
  9688                           
  9689                           ;modulation.c: 97: double period = 1.0;
  9690                           
  9691                           ;incstack = 0
  9692                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9693  0BE2  3000               	movlw	0
  9694  0BE3  0022               	movlb	2	; select bank2
  9695  0BE4  00BA               	movwf	modTri@period^(0+256)
  9696  0BE5  3080               	movlw	128
  9697  0BE6  00BB               	movwf	(modTri@period+1)^(0+256)
  9698  0BE7  303F               	movlw	63
  9699  0BE8  00BC               	movwf	(modTri@period+2)^(0+256)
  9700                           
  9701                           ;modulation.c: 98: double shift = 0;
  9702  0BE9  3000               	movlw	0
  9703  0BEA  00B7               	movwf	modTri@shift^(0+256)
  9704  0BEB  3000               	movlw	0
  9705  0BEC  00B8               	movwf	(modTri@shift+1)^(0+256)
  9706  0BED  3000               	movlw	0
  9707  0BEE  00B9               	movwf	(modTri@shift+2)^(0+256)
  9708                           
  9709                           ;modulation.c: 100: if(angle<=inflection) {
  9710  0BEF  0831               	movf	modTri@inflection^(0+256),w
  9711  0BF0  0021               	movlb	1	; select bank1
  9712  0BF1  00A0               	movwf	___ftge@ff1^(0+128)
  9713  0BF2  0022               	movlb	2	; select bank2
  9714  0BF3  0832               	movf	(modTri@inflection+1)^(0+256),w
  9715  0BF4  0021               	movlb	1	; select bank1
  9716  0BF5  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9717  0BF6  0022               	movlb	2	; select bank2
  9718  0BF7  0833               	movf	(modTri@inflection+2)^(0+256),w
  9719  0BF8  0021               	movlb	1	; select bank1
  9720  0BF9  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9721  0BFA  0022               	movlb	2	; select bank2
  9722  0BFB  082E               	movf	modTri@angle^(0+256),w
  9723  0BFC  0021               	movlb	1	; select bank1
  9724  0BFD  00A3               	movwf	___ftge@ff2^(0+128)
  9725  0BFE  0022               	movlb	2	; select bank2
  9726  0BFF  082F               	movf	(modTri@angle+1)^(0+256),w
  9727  0C00  0021               	movlb	1	; select bank1
  9728  0C01  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9729  0C02  0022               	movlb	2	; select bank2
  9730  0C03  0830               	movf	(modTri@angle+2)^(0+256),w
  9731  0C04  0021               	movlb	1	; select bank1
  9732  0C05  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9733  0C06  31A2  2200  318B   	fcall	___ftge
  9734  0C09  1C03               	btfss	3,0
  9735  0C0A  2C17               	goto	l8500
  9736                           
  9737                           ;modulation.c: 101: period = 180.0/inflection;
  9738  0C0B  0022               	movlb	2	; select bank2
  9739  0C0C  0831               	movf	modTri@inflection^(0+256),w
  9740  0C0D  0021               	movlb	1	; select bank1
  9741  0C0E  00CE               	movwf	___ftdiv@f2^(0+128)
  9742  0C0F  0022               	movlb	2	; select bank2
  9743  0C10  0832               	movf	(modTri@inflection+1)^(0+256),w
  9744  0C11  0021               	movlb	1	; select bank1
  9745  0C12  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9746  0C13  0022               	movlb	2	; select bank2
  9747  0C14  0833               	movf	(modTri@inflection+2)^(0+256),w
  9748  0C15  0021               	movlb	1	; select bank1
  9749  0C16  2CD2               	goto	L5
  9750  0C17                     l8500:	
  9751                           ;modulation.c: 102: } else {
  9752                           
  9753                           
  9754                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9755  0C17  0022               	movlb	2	; select bank2
  9756  0C18  0831               	movf	modTri@inflection^(0+256),w
  9757  0C19  0021               	movlb	1	; select bank1
  9758  0C1A  00B1               	movwf	___ftmul@f2^(0+128)
  9759  0C1B  0022               	movlb	2	; select bank2
  9760  0C1C  0832               	movf	(modTri@inflection+1)^(0+256),w
  9761  0C1D  0021               	movlb	1	; select bank1
  9762  0C1E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9763  0C1F  0022               	movlb	2	; select bank2
  9764  0C20  0833               	movf	(modTri@inflection+2)^(0+256),w
  9765  0C21  0021               	movlb	1	; select bank1
  9766  0C22  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9767  0C23  3000               	movlw	0
  9768  0C24  00AE               	movwf	___ftmul@f1^(0+128)
  9769  0C25  3000               	movlw	0
  9770  0C26  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9771  0C27  3040               	movlw	64
  9772  0C28  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9773  0C29  3187  2740  318B   	fcall	___ftmul
  9774  0C2C  0021               	movlb	1	; select bank1
  9775  0C2D  082E               	movf	?___ftmul^(0+128),w
  9776  0C2E  00BE               	movwf	___ftneg@f1^(0+128)
  9777  0C2F  082F               	movf	(?___ftmul+1)^(0+128),w
  9778  0C30  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9779  0C31  0830               	movf	(?___ftmul+2)^(0+128),w
  9780  0C32  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9781  0C33  31AE  261F  318B   	fcall	___ftneg
  9782  0C36  0021               	movlb	1	; select bank1
  9783  0C37  083E               	movf	?___ftneg^(0+128),w
  9784  0C38  00C4               	movwf	___ftadd@f2^(0+128)
  9785  0C39  083F               	movf	(?___ftneg+1)^(0+128),w
  9786  0C3A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9787  0C3B  0840               	movf	(?___ftneg+2)^(0+128),w
  9788  0C3C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9789  0C3D  3000               	movlw	0
  9790  0C3E  00C1               	movwf	___ftadd@f1^(0+128)
  9791  0C3F  30B4               	movlw	180
  9792  0C40  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9793  0C41  3043               	movlw	67
  9794  0C42  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9795  0C43  3190  201F  318B   	fcall	___ftadd
  9796  0C46  0021               	movlb	1	; select bank1
  9797  0C47  0841               	movf	?___ftadd^(0+128),w
  9798  0C48  0022               	movlb	2	; select bank2
  9799  0C49  00B4               	movwf	_modTri$2847^(0+256)
  9800  0C4A  0021               	movlb	1	; select bank1
  9801  0C4B  0842               	movf	(?___ftadd+1)^(0+128),w
  9802  0C4C  0022               	movlb	2	; select bank2
  9803  0C4D  00B5               	movwf	(_modTri$2847+1)^(0+256)
  9804  0C4E  0021               	movlb	1	; select bank1
  9805  0C4F  0843               	movf	(?___ftadd+2)^(0+128),w
  9806  0C50  0022               	movlb	2	; select bank2
  9807  0C51  00B6               	movwf	(_modTri$2847+2)^(0+256)
  9808                           
  9809                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9810  0C52  0834               	movf	_modTri$2847^(0+256),w
  9811  0C53  0021               	movlb	1	; select bank1
  9812  0C54  00BE               	movwf	___ftneg@f1^(0+128)
  9813  0C55  0022               	movlb	2	; select bank2
  9814  0C56  0835               	movf	(_modTri$2847+1)^(0+256),w
  9815  0C57  0021               	movlb	1	; select bank1
  9816  0C58  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9817  0C59  0022               	movlb	2	; select bank2
  9818  0C5A  0836               	movf	(_modTri$2847+2)^(0+256),w
  9819  0C5B  0021               	movlb	1	; select bank1
  9820  0C5C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9821  0C5D  31AE  261F  318B   	fcall	___ftneg
  9822  0C60  0021               	movlb	1	; select bank1
  9823  0C61  083E               	movf	?___ftneg^(0+128),w
  9824  0C62  00AE               	movwf	___ftmul@f1^(0+128)
  9825  0C63  083F               	movf	(?___ftneg+1)^(0+128),w
  9826  0C64  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9827  0C65  0840               	movf	(?___ftneg+2)^(0+128),w
  9828  0C66  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9829  0C67  3000               	movlw	0
  9830  0C68  00C1               	movwf	___ftadd@f1^(0+128)
  9831  0C69  30B4               	movlw	180
  9832  0C6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9833  0C6B  3043               	movlw	67
  9834  0C6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9835  0C6D  0022               	movlb	2	; select bank2
  9836  0C6E  0831               	movf	modTri@inflection^(0+256),w
  9837  0C6F  0021               	movlb	1	; select bank1
  9838  0C70  00BE               	movwf	___ftneg@f1^(0+128)
  9839  0C71  0022               	movlb	2	; select bank2
  9840  0C72  0832               	movf	(modTri@inflection+1)^(0+256),w
  9841  0C73  0021               	movlb	1	; select bank1
  9842  0C74  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9843  0C75  0022               	movlb	2	; select bank2
  9844  0C76  0833               	movf	(modTri@inflection+2)^(0+256),w
  9845  0C77  0021               	movlb	1	; select bank1
  9846  0C78  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9847  0C79  31AE  261F  318B   	fcall	___ftneg
  9848  0C7C  0021               	movlb	1	; select bank1
  9849  0C7D  083E               	movf	?___ftneg^(0+128),w
  9850  0C7E  00C4               	movwf	___ftadd@f2^(0+128)
  9851  0C7F  083F               	movf	(?___ftneg+1)^(0+128),w
  9852  0C80  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9853  0C81  0840               	movf	(?___ftneg+2)^(0+128),w
  9854  0C82  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9855  0C83  3190  201F  318B   	fcall	___ftadd
  9856  0C86  0021               	movlb	1	; select bank1
  9857  0C87  0841               	movf	?___ftadd^(0+128),w
  9858  0C88  00CE               	movwf	___ftdiv@f2^(0+128)
  9859  0C89  0842               	movf	(?___ftadd+1)^(0+128),w
  9860  0C8A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9861  0C8B  0843               	movf	(?___ftadd+2)^(0+128),w
  9862  0C8C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9863  0C8D  3000               	movlw	0
  9864  0C8E  00D1               	movwf	___ftdiv@f1^(0+128)
  9865  0C8F  3034               	movlw	52
  9866  0C90  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9867  0C91  3043               	movlw	67
  9868  0C92  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9869  0C93  319D  2528  318B   	fcall	___ftdiv
  9870  0C96  0021               	movlb	1	; select bank1
  9871  0C97  084E               	movf	?___ftdiv^(0+128),w
  9872  0C98  00B1               	movwf	___ftmul@f2^(0+128)
  9873  0C99  084F               	movf	(?___ftdiv+1)^(0+128),w
  9874  0C9A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9875  0C9B  0850               	movf	(?___ftdiv+2)^(0+128),w
  9876  0C9C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9877  0C9D  3187  2740  318B   	fcall	___ftmul
  9878  0CA0  0021               	movlb	1	; select bank1
  9879  0CA1  082E               	movf	?___ftmul^(0+128),w
  9880  0CA2  0022               	movlb	2	; select bank2
  9881  0CA3  00B7               	movwf	modTri@shift^(0+256)
  9882  0CA4  0021               	movlb	1	; select bank1
  9883  0CA5  082F               	movf	(?___ftmul+1)^(0+128),w
  9884  0CA6  0022               	movlb	2	; select bank2
  9885  0CA7  00B8               	movwf	(modTri@shift+1)^(0+256)
  9886  0CA8  0021               	movlb	1	; select bank1
  9887  0CA9  0830               	movf	(?___ftmul+2)^(0+128),w
  9888  0CAA  0022               	movlb	2	; select bank2
  9889  0CAB  00B9               	movwf	(modTri@shift+2)^(0+256)
  9890                           
  9891                           ;modulation.c: 104: period = 180/(360-inflection);
  9892  0CAC  3000               	movlw	0
  9893  0CAD  0021               	movlb	1	; select bank1
  9894  0CAE  00C1               	movwf	___ftadd@f1^(0+128)
  9895  0CAF  30B4               	movlw	180
  9896  0CB0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9897  0CB1  3043               	movlw	67
  9898  0CB2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9899  0CB3  0022               	movlb	2	; select bank2
  9900  0CB4  0831               	movf	modTri@inflection^(0+256),w
  9901  0CB5  0021               	movlb	1	; select bank1
  9902  0CB6  00BE               	movwf	___ftneg@f1^(0+128)
  9903  0CB7  0022               	movlb	2	; select bank2
  9904  0CB8  0832               	movf	(modTri@inflection+1)^(0+256),w
  9905  0CB9  0021               	movlb	1	; select bank1
  9906  0CBA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9907  0CBB  0022               	movlb	2	; select bank2
  9908  0CBC  0833               	movf	(modTri@inflection+2)^(0+256),w
  9909  0CBD  0021               	movlb	1	; select bank1
  9910  0CBE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9911  0CBF  31AE  261F  318B   	fcall	___ftneg
  9912  0CC2  0021               	movlb	1	; select bank1
  9913  0CC3  083E               	movf	?___ftneg^(0+128),w
  9914  0CC4  00C4               	movwf	___ftadd@f2^(0+128)
  9915  0CC5  083F               	movf	(?___ftneg+1)^(0+128),w
  9916  0CC6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9917  0CC7  0840               	movf	(?___ftneg+2)^(0+128),w
  9918  0CC8  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9919  0CC9  3190  201F  318B   	fcall	___ftadd
  9920  0CCC  0021               	movlb	1	; select bank1
  9921  0CCD  0841               	movf	?___ftadd^(0+128),w
  9922  0CCE  00CE               	movwf	___ftdiv@f2^(0+128)
  9923  0CCF  0842               	movf	(?___ftadd+1)^(0+128),w
  9924  0CD0  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9925  0CD1  0843               	movf	(?___ftadd+2)^(0+128),w
  9926  0CD2                     L5:	
  9927  0CD2  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9928  0CD3  3000               	movlw	0
  9929  0CD4  00D1               	movwf	___ftdiv@f1^(0+128)
  9930  0CD5  3034               	movlw	52
  9931  0CD6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9932  0CD7  3043               	movlw	67
  9933  0CD8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9934  0CD9  319D  2528  318B   	fcall	___ftdiv
  9935  0CDC  0021               	movlb	1	; select bank1
  9936  0CDD  084E               	movf	?___ftdiv^(0+128),w
  9937  0CDE  0022               	movlb	2	; select bank2
  9938  0CDF  00BA               	movwf	modTri@period^(0+256)
  9939  0CE0  0021               	movlb	1	; select bank1
  9940  0CE1  084F               	movf	(?___ftdiv+1)^(0+128),w
  9941  0CE2  0022               	movlb	2	; select bank2
  9942  0CE3  00BB               	movwf	(modTri@period+1)^(0+256)
  9943  0CE4  0021               	movlb	1	; select bank1
  9944  0CE5  0850               	movf	(?___ftdiv+2)^(0+128),w
  9945  0CE6  0022               	movlb	2	; select bank2
  9946  0CE7  00BC               	movwf	(modTri@period+2)^(0+256)
  9947                           
  9948                           ;modulation.c: 106: }
  9949                           ;modulation.c: 107: double tmpVal = (period*angle-shift) ;
  9950  0CE8  0837               	movf	modTri@shift^(0+256),w
  9951  0CE9  0021               	movlb	1	; select bank1
  9952  0CEA  00BE               	movwf	___ftneg@f1^(0+128)
  9953  0CEB  0022               	movlb	2	; select bank2
  9954  0CEC  0838               	movf	(modTri@shift+1)^(0+256),w
  9955  0CED  0021               	movlb	1	; select bank1
  9956  0CEE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9957  0CEF  0022               	movlb	2	; select bank2
  9958  0CF0  0839               	movf	(modTri@shift+2)^(0+256),w
  9959  0CF1  0021               	movlb	1	; select bank1
  9960  0CF2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9961  0CF3  31AE  261F  318B   	fcall	___ftneg
  9962  0CF6  0021               	movlb	1	; select bank1
  9963  0CF7  083E               	movf	?___ftneg^(0+128),w
  9964  0CF8  00C1               	movwf	___ftadd@f1^(0+128)
  9965  0CF9  083F               	movf	(?___ftneg+1)^(0+128),w
  9966  0CFA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9967  0CFB  0840               	movf	(?___ftneg+2)^(0+128),w
  9968  0CFC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9969  0CFD  0022               	movlb	2	; select bank2
  9970  0CFE  082E               	movf	modTri@angle^(0+256),w
  9971  0CFF  0021               	movlb	1	; select bank1
  9972  0D00  00AE               	movwf	___ftmul@f1^(0+128)
  9973  0D01  0022               	movlb	2	; select bank2
  9974  0D02  082F               	movf	(modTri@angle+1)^(0+256),w
  9975  0D03  0021               	movlb	1	; select bank1
  9976  0D04  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9977  0D05  0022               	movlb	2	; select bank2
  9978  0D06  0830               	movf	(modTri@angle+2)^(0+256),w
  9979  0D07  0021               	movlb	1	; select bank1
  9980  0D08  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9981  0D09  0022               	movlb	2	; select bank2
  9982  0D0A  083A               	movf	modTri@period^(0+256),w
  9983  0D0B  0021               	movlb	1	; select bank1
  9984  0D0C  00B1               	movwf	___ftmul@f2^(0+128)
  9985  0D0D  0022               	movlb	2	; select bank2
  9986  0D0E  083B               	movf	(modTri@period+1)^(0+256),w
  9987  0D0F  0021               	movlb	1	; select bank1
  9988  0D10  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9989  0D11  0022               	movlb	2	; select bank2
  9990  0D12  083C               	movf	(modTri@period+2)^(0+256),w
  9991  0D13  0021               	movlb	1	; select bank1
  9992  0D14  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9993  0D15  3187  2740  318B   	fcall	___ftmul
  9994  0D18  0021               	movlb	1	; select bank1
  9995  0D19  082E               	movf	?___ftmul^(0+128),w
  9996  0D1A  00C4               	movwf	___ftadd@f2^(0+128)
  9997  0D1B  082F               	movf	(?___ftmul+1)^(0+128),w
  9998  0D1C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9999  0D1D  0830               	movf	(?___ftmul+2)^(0+128),w
 10000  0D1E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10001  0D1F  3190  201F  318B   	fcall	___ftadd
 10002  0D22  0021               	movlb	1	; select bank1
 10003  0D23  0841               	movf	?___ftadd^(0+128),w
 10004  0D24  0022               	movlb	2	; select bank2
 10005  0D25  00BD               	movwf	modTri@tmpVal^(0+256)
 10006  0D26  0021               	movlb	1	; select bank1
 10007  0D27  0842               	movf	(?___ftadd+1)^(0+128),w
 10008  0D28  0022               	movlb	2	; select bank2
 10009  0D29  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10010  0D2A  0021               	movlb	1	; select bank1
 10011  0D2B  0843               	movf	(?___ftadd+2)^(0+128),w
 10012  0D2C  0022               	movlb	2	; select bank2
 10013  0D2D  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10014                           
 10015                           ;modulation.c: 108: if (tmpVal > 270) {
 10016  0D2E  3000               	movlw	0
 10017  0D2F  0021               	movlb	1	; select bank1
 10018  0D30  00A0               	movwf	___ftge@ff1^(0+128)
 10019  0D31  3087               	movlw	135
 10020  0D32  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10021  0D33  3043               	movlw	67
 10022  0D34  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10023  0D35  0022               	movlb	2	; select bank2
 10024  0D36  083D               	movf	modTri@tmpVal^(0+256),w
 10025  0D37  0021               	movlb	1	; select bank1
 10026  0D38  00A3               	movwf	___ftge@ff2^(0+128)
 10027  0D39  0022               	movlb	2	; select bank2
 10028  0D3A  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10029  0D3B  0021               	movlb	1	; select bank1
 10030  0D3C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10031  0D3D  0022               	movlb	2	; select bank2
 10032  0D3E  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10033  0D3F  0021               	movlb	1	; select bank1
 10034  0D40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10035  0D41  31A2  2200  318B   	fcall	___ftge
 10036  0D44  1803               	btfsc	3,0
 10037  0D45  2D59               	goto	l8504
 10038                           
 10039                           ;modulation.c: 109: tmpVal = tmpVal - 360.0;
 10040  0D46  3000               	movlw	0
 10041  0D47  0021               	movlb	1	; select bank1
 10042  0D48  00C1               	movwf	___ftadd@f1^(0+128)
 10043  0D49  30B4               	movlw	180
 10044  0D4A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10045  0D4B  30C3               	movlw	195
 10046  0D4C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10047  0D4D  0022               	movlb	2	; select bank2
 10048  0D4E  083D               	movf	modTri@tmpVal^(0+256),w
 10049  0D4F  0021               	movlb	1	; select bank1
 10050  0D50  00C4               	movwf	___ftadd@f2^(0+128)
 10051  0D51  0022               	movlb	2	; select bank2
 10052  0D52  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10053  0D53  0021               	movlb	1	; select bank1
 10054  0D54  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10055  0D55  0022               	movlb	2	; select bank2
 10056  0D56  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10057  0D57  0021               	movlb	1	; select bank1
 10058  0D58  2D8D               	goto	L7
 10059  0D59                     l8504:	
 10060                           ;modulation.c: 110: } else if (tmpVal > 90) {
 10061                           
 10062  0D59  3000               	movlw	0
 10063  0D5A  0021               	movlb	1	; select bank1
 10064  0D5B  00A0               	movwf	___ftge@ff1^(0+128)
 10065  0D5C  30B4               	movlw	180
 10066  0D5D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10067  0D5E  3042               	movlw	66
 10068  0D5F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10069  0D60  0022               	movlb	2	; select bank2
 10070  0D61  083D               	movf	modTri@tmpVal^(0+256),w
 10071  0D62  0021               	movlb	1	; select bank1
 10072  0D63  00A3               	movwf	___ftge@ff2^(0+128)
 10073  0D64  0022               	movlb	2	; select bank2
 10074  0D65  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10075  0D66  0021               	movlb	1	; select bank1
 10076  0D67  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10077  0D68  0022               	movlb	2	; select bank2
 10078  0D69  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10079  0D6A  0021               	movlb	1	; select bank1
 10080  0D6B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10081  0D6C  31A2  2200  318B   	fcall	___ftge
 10082  0D6F  1803               	btfsc	3,0
 10083  0D70  2D9D               	goto	l1939
 10084                           
 10085                           ;modulation.c: 111: tmpVal = 180 - tmpVal;
 10086  0D71  3000               	movlw	0
 10087  0D72  0021               	movlb	1	; select bank1
 10088  0D73  00C1               	movwf	___ftadd@f1^(0+128)
 10089  0D74  3034               	movlw	52
 10090  0D75  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10091  0D76  3043               	movlw	67
 10092  0D77  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10093  0D78  0022               	movlb	2	; select bank2
 10094  0D79  083D               	movf	modTri@tmpVal^(0+256),w
 10095  0D7A  0021               	movlb	1	; select bank1
 10096  0D7B  00BE               	movwf	___ftneg@f1^(0+128)
 10097  0D7C  0022               	movlb	2	; select bank2
 10098  0D7D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10099  0D7E  0021               	movlb	1	; select bank1
 10100  0D7F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10101  0D80  0022               	movlb	2	; select bank2
 10102  0D81  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10103  0D82  0021               	movlb	1	; select bank1
 10104  0D83  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10105  0D84  31AE  261F  318B   	fcall	___ftneg
 10106  0D87  0021               	movlb	1	; select bank1
 10107  0D88  083E               	movf	?___ftneg^(0+128),w
 10108  0D89  00C4               	movwf	___ftadd@f2^(0+128)
 10109  0D8A  083F               	movf	(?___ftneg+1)^(0+128),w
 10110  0D8B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10111  0D8C  0840               	movf	(?___ftneg+2)^(0+128),w
 10112  0D8D                     L7:	
 10113  0D8D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10114  0D8E  3190  201F  318B   	fcall	___ftadd
 10115  0D91  0021               	movlb	1	; select bank1
 10116  0D92  0841               	movf	?___ftadd^(0+128),w
 10117  0D93  0022               	movlb	2	; select bank2
 10118  0D94  00BD               	movwf	modTri@tmpVal^(0+256)
 10119  0D95  0021               	movlb	1	; select bank1
 10120  0D96  0842               	movf	(?___ftadd+1)^(0+128),w
 10121  0D97  0022               	movlb	2	; select bank2
 10122  0D98  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10123  0D99  0021               	movlb	1	; select bank1
 10124  0D9A  0843               	movf	(?___ftadd+2)^(0+128),w
 10125  0D9B  0022               	movlb	2	; select bank2
 10126  0D9C  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10127  0D9D                     l1939:	
 10128                           
 10129                           ;modulation.c: 112: }
 10130                           ;modulation.c: 113: tmpVal = tmpVal * 10/9;
 10131  0D9D  3000               	movlw	0
 10132  0D9E  0021               	movlb	1	; select bank1
 10133  0D9F  00CE               	movwf	___ftdiv@f2^(0+128)
 10134  0DA0  3010               	movlw	16
 10135  0DA1  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10136  0DA2  3041               	movlw	65
 10137  0DA3  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10138  0DA4  3000               	movlw	0
 10139  0DA5  00AE               	movwf	___ftmul@f1^(0+128)
 10140  0DA6  3020               	movlw	32
 10141  0DA7  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10142  0DA8  3041               	movlw	65
 10143  0DA9  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10144  0DAA  0022               	movlb	2	; select bank2
 10145  0DAB  083D               	movf	modTri@tmpVal^(0+256),w
 10146  0DAC  0021               	movlb	1	; select bank1
 10147  0DAD  00B1               	movwf	___ftmul@f2^(0+128)
 10148  0DAE  0022               	movlb	2	; select bank2
 10149  0DAF  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10150  0DB0  0021               	movlb	1	; select bank1
 10151  0DB1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10152  0DB2  0022               	movlb	2	; select bank2
 10153  0DB3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10154  0DB4  0021               	movlb	1	; select bank1
 10155  0DB5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10156  0DB6  3187  2740  318B   	fcall	___ftmul
 10157  0DB9  0021               	movlb	1	; select bank1
 10158  0DBA  082E               	movf	?___ftmul^(0+128),w
 10159  0DBB  00D1               	movwf	___ftdiv@f1^(0+128)
 10160  0DBC  082F               	movf	(?___ftmul+1)^(0+128),w
 10161  0DBD  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10162  0DBE  0830               	movf	(?___ftmul+2)^(0+128),w
 10163  0DBF  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10164  0DC0  319D  2528  318B   	fcall	___ftdiv
 10165  0DC3  0021               	movlb	1	; select bank1
 10166  0DC4  084E               	movf	?___ftdiv^(0+128),w
 10167  0DC5  0022               	movlb	2	; select bank2
 10168  0DC6  00BD               	movwf	modTri@tmpVal^(0+256)
 10169  0DC7  0021               	movlb	1	; select bank1
 10170  0DC8  084F               	movf	(?___ftdiv+1)^(0+128),w
 10171  0DC9  0022               	movlb	2	; select bank2
 10172  0DCA  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10173  0DCB  0021               	movlb	1	; select bank1
 10174  0DCC  0850               	movf	(?___ftdiv+2)^(0+128),w
 10175  0DCD  0022               	movlb	2	; select bank2
 10176  0DCE  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10177                           
 10178                           ;modulation.c: 115: return (int)(tmpVal);
 10179  0DCF  083D               	movf	modTri@tmpVal^(0+256),w
 10180  0DD0  00A0               	movwf	___fttol@f1^(0+256)
 10181  0DD1  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10182  0DD2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10183  0DD3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10184  0DD4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10185  0DD5  319A  2263         	fcall	___fttol
 10186  0DD7  0022               	movlb	2	; select bank2
 10187  0DD8  0821               	movf	(?___fttol^(0+256)+1),w
 10188  0DD9  00AF               	movwf	(?_modTri+1)^(0+256)
 10189  0DDA  0820               	movf	?___fttol^(0+256),w
 10190  0DDB  00AE               	movwf	?_modTri^(0+256)
 10191  0DDC  0008               	return
 10192  0DDD                     __end_of_modTri:	
 10193                           
 10194                           	psect	text18
 10195  2279                     __ptext18:	
 10196 ;; *************** function _modSquare *****************
 10197 ;; Defined at:
 10198 ;;		line 141 in file "modulation.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;  angle           3   40[BANK2 ] int 
 10201 ;;  inflection      3   43[BANK2 ] int 
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;  tmpVal          2   46[BANK2 ] int 
 10204 ;; Return value:  Size  Location     Type
 10205 ;;                  2   40[BANK2 ] int 
 10206 ;; Registers used:
 10207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10208 ;; Tracked objects:
 10209 ;;		On entry : 0/0
 10210 ;;		On exit  : 0/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10213 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10214 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10216 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10217 ;;Total ram usage:        8 bytes
 10218 ;; Hardware stack levels used:    1
 10219 ;; Hardware stack levels required when called:    6
 10220 ;; This function calls:
 10221 ;;		___ftge
 10222 ;;		_modSin
 10223 ;; This function is called by:
 10224 ;;		_updateModulationArray
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           
 10229                           ;psect for function _modSquare
 10230  2279                     _modSquare:	
 10231                           
 10232                           ;modulation.c: 142: int tmpVal = modSin(angle, inflection);
 10233                           
 10234                           ;incstack = 0
 10235                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10236  2279  0022               	movlb	2	; select bank2
 10237  227A  0848               	movf	modSquare@angle^(0+256),w
 10238  227B  00B4               	movwf	modSin@angle^(0+256)
 10239  227C  0849               	movf	(modSquare@angle+1)^(0+256),w
 10240  227D  00B5               	movwf	(modSin@angle+1)^(0+256)
 10241  227E  084A               	movf	(modSquare@angle+2)^(0+256),w
 10242  227F  00B6               	movwf	(modSin@angle+2)^(0+256)
 10243  2280  084B               	movf	modSquare@inflection^(0+256),w
 10244  2281  00B7               	movwf	modSin@inflection^(0+256)
 10245  2282  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10246  2283  00B8               	movwf	(modSin@inflection+1)^(0+256)
 10247  2284  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10248  2285  00B9               	movwf	(modSin@inflection+2)^(0+256)
 10249  2286  3196  2654  31A2   	fcall	_modSin
 10250  2289  0022               	movlb	2	; select bank2
 10251  228A  0835               	movf	(?_modSin+1)^(0+256),w
 10252  228B  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10253  228C  0834               	movf	?_modSin^(0+256),w
 10254  228D  00CE               	movwf	modSquare@tmpVal^(0+256)
 10255                           
 10256                           ;modulation.c: 144: return (angle <= inflection) ? 100 : -100;
 10257  228E  084B               	movf	modSquare@inflection^(0+256),w
 10258  228F  0021               	movlb	1	; select bank1
 10259  2290  00A0               	movwf	___ftge@ff1^(0+128)
 10260  2291  0022               	movlb	2	; select bank2
 10261  2292  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10262  2293  0021               	movlb	1	; select bank1
 10263  2294  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10264  2295  0022               	movlb	2	; select bank2
 10265  2296  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10266  2297  0021               	movlb	1	; select bank1
 10267  2298  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10268  2299  0022               	movlb	2	; select bank2
 10269  229A  0848               	movf	modSquare@angle^(0+256),w
 10270  229B  0021               	movlb	1	; select bank1
 10271  229C  00A3               	movwf	___ftge@ff2^(0+128)
 10272  229D  0022               	movlb	2	; select bank2
 10273  229E  0849               	movf	(modSquare@angle+1)^(0+256),w
 10274  229F  0021               	movlb	1	; select bank1
 10275  22A0  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10276  22A1  0022               	movlb	2	; select bank2
 10277  22A2  084A               	movf	(modSquare@angle+2)^(0+256),w
 10278  22A3  0021               	movlb	1	; select bank1
 10279  22A4  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10280  22A5  31A2  2200  31A2   	fcall	___ftge
 10281  22A8  1803               	btfsc	3,0
 10282  22A9  2AB0               	goto	l8516
 10283  22AA  309C               	movlw	156
 10284  22AB  0022               	movlb	2	; select bank2
 10285  22AC  00C8               	movwf	?_modSquare^(0+256)
 10286  22AD  30FF               	movlw	255
 10287  22AE  00C9               	movwf	(?_modSquare^(0+256)+1)
 10288  22AF  0008               	return
 10289  22B0                     l8516:	
 10290  22B0  3064               	movlw	100
 10291  22B1  0022               	movlb	2	; select bank2
 10292  22B2  00C8               	movwf	?_modSquare^(0+256)
 10293  22B3  3000               	movlw	0
 10294  22B4  00C9               	movwf	(?_modSquare^(0+256)+1)
 10295  22B5  0008               	return
 10296  22B6                     __end_of_modSquare:	
 10297                           
 10298                           	psect	text19
 10299  1654                     __ptext19:	
 10300 ;; *************** function _modSin *****************
 10301 ;; Defined at:
 10302 ;;		line 80 in file "modulation.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;  angle           3   20[BANK2 ] int 
 10305 ;;  inflection      3   23[BANK2 ] int 
 10306 ;; Auto vars:     Size  Location     Type
 10307 ;;  tmpVal          3   37[BANK2 ] int 
 10308 ;;  period          3   34[BANK2 ] int 
 10309 ;;  shift           3   31[BANK2 ] int 
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  2   20[BANK2 ] int 
 10312 ;; Registers used:
 10313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10319 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10320 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10321 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10322 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10323 ;;Total ram usage:       20 bytes
 10324 ;; Hardware stack levels used:    1
 10325 ;; Hardware stack levels required when called:    5
 10326 ;; This function calls:
 10327 ;;		___ftadd
 10328 ;;		___ftdiv
 10329 ;;		___ftge
 10330 ;;		___ftmul
 10331 ;;		___ftneg
 10332 ;;		___fttol
 10333 ;;		___wmul
 10334 ;; This function is called by:
 10335 ;;		_updateModulationArray
 10336 ;;		_modSquare
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           
 10341                           ;psect for function _modSin
 10342  1654                     _modSin:	
 10343                           
 10344                           ;modulation.c: 81: double period = 1.0;
 10345                           
 10346                           ;incstack = 0
 10347                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10348  1654  3000               	movlw	0
 10349  1655  0022               	movlb	2	; select bank2
 10350  1656  00C2               	movwf	modSin@period^(0+256)
 10351  1657  3080               	movlw	128
 10352  1658  00C3               	movwf	(modSin@period+1)^(0+256)
 10353  1659  303F               	movlw	63
 10354  165A  00C4               	movwf	(modSin@period+2)^(0+256)
 10355                           
 10356                           ;modulation.c: 82: double shift = 0.0;
 10357  165B  3000               	movlw	0
 10358  165C  00BF               	movwf	modSin@shift^(0+256)
 10359  165D  3000               	movlw	0
 10360  165E  00C0               	movwf	(modSin@shift+1)^(0+256)
 10361  165F  3000               	movlw	0
 10362  1660  00C1               	movwf	(modSin@shift+2)^(0+256)
 10363                           
 10364                           ;modulation.c: 84: if(angle<=inflection) {
 10365  1661  0837               	movf	modSin@inflection^(0+256),w
 10366  1662  0021               	movlb	1	; select bank1
 10367  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10368  1664  0022               	movlb	2	; select bank2
 10369  1665  0838               	movf	(modSin@inflection+1)^(0+256),w
 10370  1666  0021               	movlb	1	; select bank1
 10371  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10372  1668  0022               	movlb	2	; select bank2
 10373  1669  0839               	movf	(modSin@inflection+2)^(0+256),w
 10374  166A  0021               	movlb	1	; select bank1
 10375  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10376  166C  0022               	movlb	2	; select bank2
 10377  166D  0834               	movf	modSin@angle^(0+256),w
 10378  166E  0021               	movlb	1	; select bank1
 10379  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10380  1670  0022               	movlb	2	; select bank2
 10381  1671  0835               	movf	(modSin@angle+1)^(0+256),w
 10382  1672  0021               	movlb	1	; select bank1
 10383  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10384  1674  0022               	movlb	2	; select bank2
 10385  1675  0836               	movf	(modSin@angle+2)^(0+256),w
 10386  1676  0021               	movlb	1	; select bank1
 10387  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10388  1678  31A2  2200  3196   	fcall	___ftge
 10389  167B  1C03               	btfss	3,0
 10390  167C  2E89               	goto	l8184
 10391                           
 10392                           ;modulation.c: 85: period = 180.0/inflection;
 10393  167D  0022               	movlb	2	; select bank2
 10394  167E  0837               	movf	modSin@inflection^(0+256),w
 10395  167F  0021               	movlb	1	; select bank1
 10396  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10397  1681  0022               	movlb	2	; select bank2
 10398  1682  0838               	movf	(modSin@inflection+1)^(0+256),w
 10399  1683  0021               	movlb	1	; select bank1
 10400  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10401  1685  0022               	movlb	2	; select bank2
 10402  1686  0839               	movf	(modSin@inflection+2)^(0+256),w
 10403  1687  0021               	movlb	1	; select bank1
 10404  1688  2F44               	goto	L8
 10405  1689                     l8184:	
 10406                           ;modulation.c: 86: } else {
 10407                           
 10408                           
 10409                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10410  1689  0022               	movlb	2	; select bank2
 10411  168A  0837               	movf	modSin@inflection^(0+256),w
 10412  168B  0021               	movlb	1	; select bank1
 10413  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10414  168D  0022               	movlb	2	; select bank2
 10415  168E  0838               	movf	(modSin@inflection+1)^(0+256),w
 10416  168F  0021               	movlb	1	; select bank1
 10417  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10418  1691  0022               	movlb	2	; select bank2
 10419  1692  0839               	movf	(modSin@inflection+2)^(0+256),w
 10420  1693  0021               	movlb	1	; select bank1
 10421  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10422  1695  3000               	movlw	0
 10423  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10424  1697  3000               	movlw	0
 10425  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10426  1699  3040               	movlw	64
 10427  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10428  169B  3187  2740  3196   	fcall	___ftmul
 10429  169E  0021               	movlb	1	; select bank1
 10430  169F  082E               	movf	?___ftmul^(0+128),w
 10431  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10432  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10433  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10434  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10435  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10436  16A5  31AE  261F  3196   	fcall	___ftneg
 10437  16A8  0021               	movlb	1	; select bank1
 10438  16A9  083E               	movf	?___ftneg^(0+128),w
 10439  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10440  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10441  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10442  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10443  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10444  16AF  3000               	movlw	0
 10445  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10446  16B1  30B4               	movlw	180
 10447  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10448  16B3  3043               	movlw	67
 10449  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10450  16B5  3190  201F  3196   	fcall	___ftadd
 10451  16B8  0021               	movlb	1	; select bank1
 10452  16B9  0841               	movf	?___ftadd^(0+128),w
 10453  16BA  0022               	movlb	2	; select bank2
 10454  16BB  00BC               	movwf	_modSin$2846^(0+256)
 10455  16BC  0021               	movlb	1	; select bank1
 10456  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10457  16BE  0022               	movlb	2	; select bank2
 10458  16BF  00BD               	movwf	(_modSin$2846+1)^(0+256)
 10459  16C0  0021               	movlb	1	; select bank1
 10460  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10461  16C2  0022               	movlb	2	; select bank2
 10462  16C3  00BE               	movwf	(_modSin$2846+2)^(0+256)
 10463                           
 10464                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10465  16C4  083C               	movf	_modSin$2846^(0+256),w
 10466  16C5  0021               	movlb	1	; select bank1
 10467  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10468  16C7  0022               	movlb	2	; select bank2
 10469  16C8  083D               	movf	(_modSin$2846+1)^(0+256),w
 10470  16C9  0021               	movlb	1	; select bank1
 10471  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10472  16CB  0022               	movlb	2	; select bank2
 10473  16CC  083E               	movf	(_modSin$2846+2)^(0+256),w
 10474  16CD  0021               	movlb	1	; select bank1
 10475  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10476  16CF  31AE  261F  3196   	fcall	___ftneg
 10477  16D2  0021               	movlb	1	; select bank1
 10478  16D3  083E               	movf	?___ftneg^(0+128),w
 10479  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10480  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10481  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10482  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10483  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10484  16D9  3000               	movlw	0
 10485  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10486  16DB  30B4               	movlw	180
 10487  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10488  16DD  3043               	movlw	67
 10489  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10490  16DF  0022               	movlb	2	; select bank2
 10491  16E0  0837               	movf	modSin@inflection^(0+256),w
 10492  16E1  0021               	movlb	1	; select bank1
 10493  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10494  16E3  0022               	movlb	2	; select bank2
 10495  16E4  0838               	movf	(modSin@inflection+1)^(0+256),w
 10496  16E5  0021               	movlb	1	; select bank1
 10497  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10498  16E7  0022               	movlb	2	; select bank2
 10499  16E8  0839               	movf	(modSin@inflection+2)^(0+256),w
 10500  16E9  0021               	movlb	1	; select bank1
 10501  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10502  16EB  31AE  261F  3196   	fcall	___ftneg
 10503  16EE  0021               	movlb	1	; select bank1
 10504  16EF  083E               	movf	?___ftneg^(0+128),w
 10505  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10506  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10507  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10508  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10509  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10510  16F5  3190  201F  3196   	fcall	___ftadd
 10511  16F8  0021               	movlb	1	; select bank1
 10512  16F9  0841               	movf	?___ftadd^(0+128),w
 10513  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10514  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10515  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10516  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10517  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10518  16FF  3000               	movlw	0
 10519  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10520  1701  3034               	movlw	52
 10521  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10522  1703  3043               	movlw	67
 10523  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10524  1705  319D  2528  3196   	fcall	___ftdiv
 10525  1708  0021               	movlb	1	; select bank1
 10526  1709  084E               	movf	?___ftdiv^(0+128),w
 10527  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10528  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10529  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10530  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10531  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10532  170F  3187  2740  3196   	fcall	___ftmul
 10533  1712  0021               	movlb	1	; select bank1
 10534  1713  082E               	movf	?___ftmul^(0+128),w
 10535  1714  0022               	movlb	2	; select bank2
 10536  1715  00BF               	movwf	modSin@shift^(0+256)
 10537  1716  0021               	movlb	1	; select bank1
 10538  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10539  1718  0022               	movlb	2	; select bank2
 10540  1719  00C0               	movwf	(modSin@shift+1)^(0+256)
 10541  171A  0021               	movlb	1	; select bank1
 10542  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10543  171C  0022               	movlb	2	; select bank2
 10544  171D  00C1               	movwf	(modSin@shift+2)^(0+256)
 10545                           
 10546                           ;modulation.c: 88: period = 180/(360-inflection);
 10547  171E  3000               	movlw	0
 10548  171F  0021               	movlb	1	; select bank1
 10549  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10550  1721  30B4               	movlw	180
 10551  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10552  1723  3043               	movlw	67
 10553  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10554  1725  0022               	movlb	2	; select bank2
 10555  1726  0837               	movf	modSin@inflection^(0+256),w
 10556  1727  0021               	movlb	1	; select bank1
 10557  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10558  1729  0022               	movlb	2	; select bank2
 10559  172A  0838               	movf	(modSin@inflection+1)^(0+256),w
 10560  172B  0021               	movlb	1	; select bank1
 10561  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10562  172D  0022               	movlb	2	; select bank2
 10563  172E  0839               	movf	(modSin@inflection+2)^(0+256),w
 10564  172F  0021               	movlb	1	; select bank1
 10565  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10566  1731  31AE  261F  3196   	fcall	___ftneg
 10567  1734  0021               	movlb	1	; select bank1
 10568  1735  083E               	movf	?___ftneg^(0+128),w
 10569  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10570  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10571  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10572  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10573  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10574  173B  3190  201F  3196   	fcall	___ftadd
 10575  173E  0021               	movlb	1	; select bank1
 10576  173F  0841               	movf	?___ftadd^(0+128),w
 10577  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10578  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10579  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10580  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10581  1744                     L8:	
 10582  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10583  1745  3000               	movlw	0
 10584  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10585  1747  3034               	movlw	52
 10586  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10587  1749  3043               	movlw	67
 10588  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10589  174B  319D  2528  3196   	fcall	___ftdiv
 10590  174E  0021               	movlb	1	; select bank1
 10591  174F  084E               	movf	?___ftdiv^(0+128),w
 10592  1750  0022               	movlb	2	; select bank2
 10593  1751  00C2               	movwf	modSin@period^(0+256)
 10594  1752  0021               	movlb	1	; select bank1
 10595  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10596  1754  0022               	movlb	2	; select bank2
 10597  1755  00C3               	movwf	(modSin@period+1)^(0+256)
 10598  1756  0021               	movlb	1	; select bank1
 10599  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10600  1758  0022               	movlb	2	; select bank2
 10601  1759  00C4               	movwf	(modSin@period+2)^(0+256)
 10602                           
 10603                           ;modulation.c: 90: }
 10604                           ;modulation.c: 91: double tmpVal = (period*angle-shift) /3;
 10605  175A  3000               	movlw	0
 10606  175B  0021               	movlb	1	; select bank1
 10607  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10608  175D  3040               	movlw	64
 10609  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10610  175F  3040               	movlw	64
 10611  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10612  1761  0022               	movlb	2	; select bank2
 10613  1762  083F               	movf	modSin@shift^(0+256),w
 10614  1763  0021               	movlb	1	; select bank1
 10615  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10616  1765  0022               	movlb	2	; select bank2
 10617  1766  0840               	movf	(modSin@shift+1)^(0+256),w
 10618  1767  0021               	movlb	1	; select bank1
 10619  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10620  1769  0022               	movlb	2	; select bank2
 10621  176A  0841               	movf	(modSin@shift+2)^(0+256),w
 10622  176B  0021               	movlb	1	; select bank1
 10623  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10624  176D  31AE  261F  3196   	fcall	___ftneg
 10625  1770  0021               	movlb	1	; select bank1
 10626  1771  083E               	movf	?___ftneg^(0+128),w
 10627  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10628  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10629  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10630  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10631  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10632  1777  0022               	movlb	2	; select bank2
 10633  1778  0834               	movf	modSin@angle^(0+256),w
 10634  1779  0021               	movlb	1	; select bank1
 10635  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10636  177B  0022               	movlb	2	; select bank2
 10637  177C  0835               	movf	(modSin@angle+1)^(0+256),w
 10638  177D  0021               	movlb	1	; select bank1
 10639  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10640  177F  0022               	movlb	2	; select bank2
 10641  1780  0836               	movf	(modSin@angle+2)^(0+256),w
 10642  1781  0021               	movlb	1	; select bank1
 10643  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10644  1783  0022               	movlb	2	; select bank2
 10645  1784  0842               	movf	modSin@period^(0+256),w
 10646  1785  0021               	movlb	1	; select bank1
 10647  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10648  1787  0022               	movlb	2	; select bank2
 10649  1788  0843               	movf	(modSin@period+1)^(0+256),w
 10650  1789  0021               	movlb	1	; select bank1
 10651  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10652  178B  0022               	movlb	2	; select bank2
 10653  178C  0844               	movf	(modSin@period+2)^(0+256),w
 10654  178D  0021               	movlb	1	; select bank1
 10655  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10656  178F  3187  2740  3196   	fcall	___ftmul
 10657  1792  0021               	movlb	1	; select bank1
 10658  1793  082E               	movf	?___ftmul^(0+128),w
 10659  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10660  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10661  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10662  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10663  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10664  1799  3190  201F  3196   	fcall	___ftadd
 10665  179C  0021               	movlb	1	; select bank1
 10666  179D  0841               	movf	?___ftadd^(0+128),w
 10667  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10668  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10669  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10670  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10671  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10672  17A3  319D  2528  3196   	fcall	___ftdiv
 10673  17A6  0021               	movlb	1	; select bank1
 10674  17A7  084E               	movf	?___ftdiv^(0+128),w
 10675  17A8  0022               	movlb	2	; select bank2
 10676  17A9  00C5               	movwf	modSin@tmpVal^(0+256)
 10677  17AA  0021               	movlb	1	; select bank1
 10678  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10679  17AC  0022               	movlb	2	; select bank2
 10680  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10681  17AE  0021               	movlb	1	; select bank1
 10682  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10683  17B0  0022               	movlb	2	; select bank2
 10684  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10685                           
 10686                           ;modulation.c: 92: tmpVal = sinArray[(int)(tmpVal)];
 10687  17B2  0845               	movf	modSin@tmpVal^(0+256),w
 10688  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10689  17B4  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10690  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10691  17B6  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10692  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10693  17B8  319A  2263  3196   	fcall	___fttol
 10694  17BB  0022               	movlb	2	; select bank2
 10695  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10696  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10697  17BE  0820               	movf	?___fttol^(0+256),w
 10698  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10699  17C0  3003               	movlw	3
 10700  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10701  17C2  3000               	movlw	0
 10702  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10703  17C4  31AE  26CE  3196   	fcall	___wmul
 10704  17C7  3082               	movlw	130
 10705  17C8  0022               	movlb	2	; select bank2
 10706  17C9  00BA               	movwf	??_modSin^(0+256)
 10707  17CA  3024               	movlw	36
 10708  17CB  00BB               	movwf	(??_modSin^(0+256)+1)
 10709  17CC  082E               	movf	?___wmul^(0+256),w
 10710  17CD  073A               	addwf	??_modSin^(0+256),w
 10711  17CE  0086               	movwf	6
 10712  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10713  17D0  3D3B               	addwfc	(??_modSin+1)^(0+256),w
 10714  17D1  0087               	movwf	7
 10715  17D2  3F40               	moviw [0]fsr1
 10716  17D3  00C5               	movwf	modSin@tmpVal^(0+256)
 10717  17D4  3F41               	moviw [1]fsr1
 10718  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10719  17D6  3F42               	moviw [2]fsr1
 10720  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10721                           
 10722                           ;modulation.c: 93: return (int)(100.0 * tmpVal);
 10723  17D8  0845               	movf	modSin@tmpVal^(0+256),w
 10724  17D9  0021               	movlb	1	; select bank1
 10725  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10726  17DB  0022               	movlb	2	; select bank2
 10727  17DC  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10728  17DD  0021               	movlb	1	; select bank1
 10729  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10730  17DF  0022               	movlb	2	; select bank2
 10731  17E0  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10732  17E1  0021               	movlb	1	; select bank1
 10733  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10734  17E3  3000               	movlw	0
 10735  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10736  17E5  30C8               	movlw	200
 10737  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10738  17E7  3042               	movlw	66
 10739  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10740  17E9  3187  2740  3196   	fcall	___ftmul
 10741  17EC  0021               	movlb	1	; select bank1
 10742  17ED  082E               	movf	?___ftmul^(0+128),w
 10743  17EE  0022               	movlb	2	; select bank2
 10744  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10745  17F0  0021               	movlb	1	; select bank1
 10746  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10747  17F2  0022               	movlb	2	; select bank2
 10748  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10749  17F4  0021               	movlb	1	; select bank1
 10750  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10751  17F6  0022               	movlb	2	; select bank2
 10752  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10753  17F8  319A  2263         	fcall	___fttol
 10754  17FA  0022               	movlb	2	; select bank2
 10755  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10756  17FC  00B5               	movwf	(?_modSin+1)^(0+256)
 10757  17FD  0820               	movf	?___fttol^(0+256),w
 10758  17FE  00B4               	movwf	?_modSin^(0+256)
 10759  17FF  0008               	return
 10760  1800                     __end_of_modSin:	
 10761                           
 10762                           	psect	text20
 10763  1003                     __ptext20:	
 10764 ;; *************** function _modSawRev *****************
 10765 ;; Defined at:
 10766 ;;		line 135 in file "modulation.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;  angle           3   37[BANK2 ] int 
 10769 ;;  inflection      3   40[BANK2 ] int 
 10770 ;; Auto vars:     Size  Location     Type
 10771 ;;		None
 10772 ;; Return value:  Size  Location     Type
 10773 ;;                  2   37[BANK2 ] int 
 10774 ;; Registers used:
 10775 ;;		wreg, status,2, status,0, pclath, cstack
 10776 ;; Tracked objects:
 10777 ;;		On entry : 0/0
 10778 ;;		On exit  : 0/0
 10779 ;;		Unchanged: 0/0
 10780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10781 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10783 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10784 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10785 ;;Total ram usage:        8 bytes
 10786 ;; Hardware stack levels used:    1
 10787 ;; Hardware stack levels required when called:    6
 10788 ;; This function calls:
 10789 ;;		_modSaw
 10790 ;; This function is called by:
 10791 ;;		_updateModulationArray
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           
 10796                           ;psect for function _modSawRev
 10797  1003                     _modSawRev:	
 10798                           
 10799                           ;modulation.c: 136: return -1 * modSaw(angle, inflection);
 10800                           
 10801                           ;incstack = 0
 10802                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10803  1003  0022               	movlb	2	; select bank2
 10804  1004  0845               	movf	modSawRev@angle^(0+256),w
 10805  1005  00AE               	movwf	modSaw@angle^(0+256)
 10806  1006  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10807  1007  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10808  1008  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10809  1009  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10810  100A  0848               	movf	modSawRev@inflection^(0+256),w
 10811  100B  00B1               	movwf	modSaw@inflection^(0+256)
 10812  100C  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10813  100D  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10814  100E  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10815  100F  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10816  1010  3194  24AA         	fcall	_modSaw
 10817  1012  0022               	movlb	2	; select bank2
 10818  1013  092E               	comf	?_modSaw^(0+256),w
 10819  1014  00CB               	movwf	??_modSawRev^(0+256)
 10820  1015  092F               	comf	(?_modSaw+1)^(0+256),w
 10821  1016  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10822  1017  0ACB               	incf	??_modSawRev^(0+256),f
 10823  1018  1903               	skipnz
 10824  1019  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10825  101A  084B               	movf	??_modSawRev^(0+256),w
 10826  101B  00C5               	movwf	?_modSawRev^(0+256)
 10827  101C  084C               	movf	(??_modSawRev+1)^(0+256),w
 10828  101D  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10829  101E  0008               	return
 10830  101F                     __end_of_modSawRev:	
 10831                           
 10832                           	psect	text21
 10833  14AA                     __ptext21:	
 10834 ;; *************** function _modSaw *****************
 10835 ;; Defined at:
 10836 ;;		line 119 in file "modulation.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;  angle           3   14[BANK2 ] int 
 10839 ;;  inflection      3   17[BANK2 ] int 
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;  period          3   34[BANK2 ] int 
 10842 ;;  shift           3   31[BANK2 ] int 
 10843 ;;  mod             2   29[BANK2 ] int 
 10844 ;; Return value:  Size  Location     Type
 10845 ;;                  2   14[BANK2 ] int 
 10846 ;; Registers used:
 10847 ;;		wreg, status,2, status,0, pclath, cstack
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10853 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10854 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10856 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10857 ;;Total ram usage:       23 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    5
 10860 ;; This function calls:
 10861 ;;		___ftadd
 10862 ;;		___ftdiv
 10863 ;;		___ftge
 10864 ;;		___ftmul
 10865 ;;		___ftneg
 10866 ;;		___fttol
 10867 ;; This function is called by:
 10868 ;;		_updateModulationArray
 10869 ;;		_modSawRev
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           
 10874                           ;psect for function _modSaw
 10875  14AA                     _modSaw:	
 10876                           
 10877                           ;modulation.c: 120: double period = 1.0;
 10878                           
 10879                           ;incstack = 0
 10880                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10881  14AA  3000               	movlw	0
 10882  14AB  0022               	movlb	2	; select bank2
 10883  14AC  00C2               	movwf	modSaw@period^(0+256)
 10884  14AD  3080               	movlw	128
 10885  14AE  00C3               	movwf	(modSaw@period+1)^(0+256)
 10886  14AF  303F               	movlw	63
 10887  14B0  00C4               	movwf	(modSaw@period+2)^(0+256)
 10888                           
 10889                           ;modulation.c: 121: double shift = 0;
 10890  14B1  3000               	movlw	0
 10891  14B2  00BF               	movwf	modSaw@shift^(0+256)
 10892  14B3  3000               	movlw	0
 10893  14B4  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10894  14B5  3000               	movlw	0
 10895  14B6  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10896                           
 10897                           ;modulation.c: 123: if(angle<=inflection) {
 10898  14B7  0831               	movf	modSaw@inflection^(0+256),w
 10899  14B8  0021               	movlb	1	; select bank1
 10900  14B9  00A0               	movwf	___ftge@ff1^(0+128)
 10901  14BA  0022               	movlb	2	; select bank2
 10902  14BB  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10903  14BC  0021               	movlb	1	; select bank1
 10904  14BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10905  14BE  0022               	movlb	2	; select bank2
 10906  14BF  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10907  14C0  0021               	movlb	1	; select bank1
 10908  14C1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10909  14C2  0022               	movlb	2	; select bank2
 10910  14C3  082E               	movf	modSaw@angle^(0+256),w
 10911  14C4  0021               	movlb	1	; select bank1
 10912  14C5  00A3               	movwf	___ftge@ff2^(0+128)
 10913  14C6  0022               	movlb	2	; select bank2
 10914  14C7  082F               	movf	(modSaw@angle+1)^(0+256),w
 10915  14C8  0021               	movlb	1	; select bank1
 10916  14C9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10917  14CA  0022               	movlb	2	; select bank2
 10918  14CB  0830               	movf	(modSaw@angle+2)^(0+256),w
 10919  14CC  0021               	movlb	1	; select bank1
 10920  14CD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10921  14CE  31A2  2200  3194   	fcall	___ftge
 10922  14D1  1C03               	btfss	3,0
 10923  14D2  2CDF               	goto	l8198
 10924                           
 10925                           ;modulation.c: 124: period = 180.0/inflection;
 10926  14D3  0022               	movlb	2	; select bank2
 10927  14D4  0831               	movf	modSaw@inflection^(0+256),w
 10928  14D5  0021               	movlb	1	; select bank1
 10929  14D6  00CE               	movwf	___ftdiv@f2^(0+128)
 10930  14D7  0022               	movlb	2	; select bank2
 10931  14D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10932  14D9  0021               	movlb	1	; select bank1
 10933  14DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10934  14DB  0022               	movlb	2	; select bank2
 10935  14DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10936  14DD  0021               	movlb	1	; select bank1
 10937  14DE  2DBC               	goto	L9
 10938  14DF                     l8198:	
 10939                           ;modulation.c: 125: } else {
 10940                           
 10941                           
 10942                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10943  14DF  0022               	movlb	2	; select bank2
 10944  14E0  0831               	movf	modSaw@inflection^(0+256),w
 10945  14E1  0021               	movlb	1	; select bank1
 10946  14E2  00B1               	movwf	___ftmul@f2^(0+128)
 10947  14E3  0022               	movlb	2	; select bank2
 10948  14E4  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10949  14E5  0021               	movlb	1	; select bank1
 10950  14E6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10951  14E7  0022               	movlb	2	; select bank2
 10952  14E8  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10953  14E9  0021               	movlb	1	; select bank1
 10954  14EA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10955  14EB  3000               	movlw	0
 10956  14EC  00AE               	movwf	___ftmul@f1^(0+128)
 10957  14ED  3000               	movlw	0
 10958  14EE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10959  14EF  3040               	movlw	64
 10960  14F0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10961  14F1  3187  2740  3194   	fcall	___ftmul
 10962  14F4  0021               	movlb	1	; select bank1
 10963  14F5  082E               	movf	?___ftmul^(0+128),w
 10964  14F6  00BE               	movwf	___ftneg@f1^(0+128)
 10965  14F7  082F               	movf	(?___ftmul+1)^(0+128),w
 10966  14F8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10967  14F9  0830               	movf	(?___ftmul+2)^(0+128),w
 10968  14FA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10969  14FB  31AE  261F  3194   	fcall	___ftneg
 10970  14FE  0021               	movlb	1	; select bank1
 10971  14FF  083E               	movf	?___ftneg^(0+128),w
 10972  1500  00C4               	movwf	___ftadd@f2^(0+128)
 10973  1501  083F               	movf	(?___ftneg+1)^(0+128),w
 10974  1502  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10975  1503  0840               	movf	(?___ftneg+2)^(0+128),w
 10976  1504  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10977  1505  3000               	movlw	0
 10978  1506  00C1               	movwf	___ftadd@f1^(0+128)
 10979  1507  30B4               	movlw	180
 10980  1508  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10981  1509  3043               	movlw	67
 10982  150A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10983  150B  3190  201F  3194   	fcall	___ftadd
 10984  150E  0021               	movlb	1	; select bank1
 10985  150F  0841               	movf	?___ftadd^(0+128),w
 10986  1510  0022               	movlb	2	; select bank2
 10987  1511  00B4               	movwf	_modSaw$2848^(0+256)
 10988  1512  0021               	movlb	1	; select bank1
 10989  1513  0842               	movf	(?___ftadd+1)^(0+128),w
 10990  1514  0022               	movlb	2	; select bank2
 10991  1515  00B5               	movwf	(_modSaw$2848+1)^(0+256)
 10992  1516  0021               	movlb	1	; select bank1
 10993  1517  0843               	movf	(?___ftadd+2)^(0+128),w
 10994  1518  0022               	movlb	2	; select bank2
 10995  1519  00B6               	movwf	(_modSaw$2848+2)^(0+256)
 10996                           
 10997                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10998  151A  0834               	movf	_modSaw$2848^(0+256),w
 10999  151B  0021               	movlb	1	; select bank1
 11000  151C  00BE               	movwf	___ftneg@f1^(0+128)
 11001  151D  0022               	movlb	2	; select bank2
 11002  151E  0835               	movf	(_modSaw$2848+1)^(0+256),w
 11003  151F  0021               	movlb	1	; select bank1
 11004  1520  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11005  1521  0022               	movlb	2	; select bank2
 11006  1522  0836               	movf	(_modSaw$2848+2)^(0+256),w
 11007  1523  0021               	movlb	1	; select bank1
 11008  1524  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11009  1525  31AE  261F  3194   	fcall	___ftneg
 11010  1528  0021               	movlb	1	; select bank1
 11011  1529  083E               	movf	?___ftneg^(0+128),w
 11012  152A  00AE               	movwf	___ftmul@f1^(0+128)
 11013  152B  083F               	movf	(?___ftneg+1)^(0+128),w
 11014  152C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11015  152D  0840               	movf	(?___ftneg+2)^(0+128),w
 11016  152E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11017  152F  3000               	movlw	0
 11018  1530  00C1               	movwf	___ftadd@f1^(0+128)
 11019  1531  30B4               	movlw	180
 11020  1532  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11021  1533  3043               	movlw	67
 11022  1534  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11023  1535  0022               	movlb	2	; select bank2
 11024  1536  0831               	movf	modSaw@inflection^(0+256),w
 11025  1537  0021               	movlb	1	; select bank1
 11026  1538  00BE               	movwf	___ftneg@f1^(0+128)
 11027  1539  0022               	movlb	2	; select bank2
 11028  153A  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11029  153B  0021               	movlb	1	; select bank1
 11030  153C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11031  153D  0022               	movlb	2	; select bank2
 11032  153E  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11033  153F  0021               	movlb	1	; select bank1
 11034  1540  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11035  1541  31AE  261F  3194   	fcall	___ftneg
 11036  1544  0021               	movlb	1	; select bank1
 11037  1545  083E               	movf	?___ftneg^(0+128),w
 11038  1546  00C4               	movwf	___ftadd@f2^(0+128)
 11039  1547  083F               	movf	(?___ftneg+1)^(0+128),w
 11040  1548  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11041  1549  0840               	movf	(?___ftneg+2)^(0+128),w
 11042  154A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11043  154B  3190  201F  3194   	fcall	___ftadd
 11044  154E  0021               	movlb	1	; select bank1
 11045  154F  0841               	movf	?___ftadd^(0+128),w
 11046  1550  00CE               	movwf	___ftdiv@f2^(0+128)
 11047  1551  0842               	movf	(?___ftadd+1)^(0+128),w
 11048  1552  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11049  1553  0843               	movf	(?___ftadd+2)^(0+128),w
 11050  1554  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11051  1555  3000               	movlw	0
 11052  1556  00D1               	movwf	___ftdiv@f1^(0+128)
 11053  1557  3034               	movlw	52
 11054  1558  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11055  1559  3043               	movlw	67
 11056  155A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11057  155B  319D  2528  3194   	fcall	___ftdiv
 11058  155E  0021               	movlb	1	; select bank1
 11059  155F  084E               	movf	?___ftdiv^(0+128),w
 11060  1560  00B1               	movwf	___ftmul@f2^(0+128)
 11061  1561  084F               	movf	(?___ftdiv+1)^(0+128),w
 11062  1562  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11063  1563  0850               	movf	(?___ftdiv+2)^(0+128),w
 11064  1564  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11065  1565  3187  2740  3194   	fcall	___ftmul
 11066  1568  0021               	movlb	1	; select bank1
 11067  1569  082E               	movf	?___ftmul^(0+128),w
 11068  156A  0022               	movlb	2	; select bank2
 11069  156B  00B7               	movwf	_modSaw$2849^(0+256)
 11070  156C  0021               	movlb	1	; select bank1
 11071  156D  082F               	movf	(?___ftmul+1)^(0+128),w
 11072  156E  0022               	movlb	2	; select bank2
 11073  156F  00B8               	movwf	(_modSaw$2849+1)^(0+256)
 11074  1570  0021               	movlb	1	; select bank1
 11075  1571  0830               	movf	(?___ftmul+2)^(0+128),w
 11076  1572  0022               	movlb	2	; select bank2
 11077  1573  00B9               	movwf	(_modSaw$2849+2)^(0+256)
 11078                           
 11079                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 11080  1574  3000               	movlw	0
 11081  1575  0021               	movlb	1	; select bank1
 11082  1576  00C1               	movwf	___ftadd@f1^(0+128)
 11083  1577  30B4               	movlw	180
 11084  1578  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11085  1579  3043               	movlw	67
 11086  157A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11087  157B  0022               	movlb	2	; select bank2
 11088  157C  0837               	movf	_modSaw$2849^(0+256),w
 11089  157D  0021               	movlb	1	; select bank1
 11090  157E  00C4               	movwf	___ftadd@f2^(0+128)
 11091  157F  0022               	movlb	2	; select bank2
 11092  1580  0838               	movf	(_modSaw$2849+1)^(0+256),w
 11093  1581  0021               	movlb	1	; select bank1
 11094  1582  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11095  1583  0022               	movlb	2	; select bank2
 11096  1584  0839               	movf	(_modSaw$2849+2)^(0+256),w
 11097  1585  0021               	movlb	1	; select bank1
 11098  1586  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11099  1587  3190  201F  3194   	fcall	___ftadd
 11100  158A  0021               	movlb	1	; select bank1
 11101  158B  0841               	movf	?___ftadd^(0+128),w
 11102  158C  0022               	movlb	2	; select bank2
 11103  158D  00BF               	movwf	modSaw@shift^(0+256)
 11104  158E  0021               	movlb	1	; select bank1
 11105  158F  0842               	movf	(?___ftadd+1)^(0+128),w
 11106  1590  0022               	movlb	2	; select bank2
 11107  1591  00C0               	movwf	(modSaw@shift+1)^(0+256)
 11108  1592  0021               	movlb	1	; select bank1
 11109  1593  0843               	movf	(?___ftadd+2)^(0+128),w
 11110  1594  0022               	movlb	2	; select bank2
 11111  1595  00C1               	movwf	(modSaw@shift+2)^(0+256)
 11112                           
 11113                           ;modulation.c: 127: period = 180/(360-inflection);
 11114  1596  3000               	movlw	0
 11115  1597  0021               	movlb	1	; select bank1
 11116  1598  00C1               	movwf	___ftadd@f1^(0+128)
 11117  1599  30B4               	movlw	180
 11118  159A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11119  159B  3043               	movlw	67
 11120  159C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11121  159D  0022               	movlb	2	; select bank2
 11122  159E  0831               	movf	modSaw@inflection^(0+256),w
 11123  159F  0021               	movlb	1	; select bank1
 11124  15A0  00BE               	movwf	___ftneg@f1^(0+128)
 11125  15A1  0022               	movlb	2	; select bank2
 11126  15A2  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11127  15A3  0021               	movlb	1	; select bank1
 11128  15A4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11129  15A5  0022               	movlb	2	; select bank2
 11130  15A6  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11131  15A7  0021               	movlb	1	; select bank1
 11132  15A8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11133  15A9  31AE  261F  3194   	fcall	___ftneg
 11134  15AC  0021               	movlb	1	; select bank1
 11135  15AD  083E               	movf	?___ftneg^(0+128),w
 11136  15AE  00C4               	movwf	___ftadd@f2^(0+128)
 11137  15AF  083F               	movf	(?___ftneg+1)^(0+128),w
 11138  15B0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11139  15B1  0840               	movf	(?___ftneg+2)^(0+128),w
 11140  15B2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11141  15B3  3190  201F  3194   	fcall	___ftadd
 11142  15B6  0021               	movlb	1	; select bank1
 11143  15B7  0841               	movf	?___ftadd^(0+128),w
 11144  15B8  00CE               	movwf	___ftdiv@f2^(0+128)
 11145  15B9  0842               	movf	(?___ftadd+1)^(0+128),w
 11146  15BA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11147  15BB  0843               	movf	(?___ftadd+2)^(0+128),w
 11148  15BC                     L9:	
 11149  15BC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11150  15BD  3000               	movlw	0
 11151  15BE  00D1               	movwf	___ftdiv@f1^(0+128)
 11152  15BF  3034               	movlw	52
 11153  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11154  15C1  3043               	movlw	67
 11155  15C2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11156  15C3  319D  2528  3194   	fcall	___ftdiv
 11157  15C6  0021               	movlb	1	; select bank1
 11158  15C7  084E               	movf	?___ftdiv^(0+128),w
 11159  15C8  0022               	movlb	2	; select bank2
 11160  15C9  00C2               	movwf	modSaw@period^(0+256)
 11161  15CA  0021               	movlb	1	; select bank1
 11162  15CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11163  15CC  0022               	movlb	2	; select bank2
 11164  15CD  00C3               	movwf	(modSaw@period+1)^(0+256)
 11165  15CE  0021               	movlb	1	; select bank1
 11166  15CF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11167  15D0  0022               	movlb	2	; select bank2
 11168  15D1  00C4               	movwf	(modSaw@period+2)^(0+256)
 11169                           
 11170                           ;modulation.c: 128: }
 11171                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 11172  15D2  0842               	movf	modSaw@period^(0+256),w
 11173  15D3  0021               	movlb	1	; select bank1
 11174  15D4  00B1               	movwf	___ftmul@f2^(0+128)
 11175  15D5  0022               	movlb	2	; select bank2
 11176  15D6  0843               	movf	(modSaw@period+1)^(0+256),w
 11177  15D7  0021               	movlb	1	; select bank1
 11178  15D8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11179  15D9  0022               	movlb	2	; select bank2
 11180  15DA  0844               	movf	(modSaw@period+2)^(0+256),w
 11181  15DB  0021               	movlb	1	; select bank1
 11182  15DC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11183  15DD  0022               	movlb	2	; select bank2
 11184  15DE  082E               	movf	modSaw@angle^(0+256),w
 11185  15DF  0021               	movlb	1	; select bank1
 11186  15E0  00AE               	movwf	___ftmul@f1^(0+128)
 11187  15E1  0022               	movlb	2	; select bank2
 11188  15E2  082F               	movf	(modSaw@angle+1)^(0+256),w
 11189  15E3  0021               	movlb	1	; select bank1
 11190  15E4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11191  15E5  0022               	movlb	2	; select bank2
 11192  15E6  0830               	movf	(modSaw@angle+2)^(0+256),w
 11193  15E7  0021               	movlb	1	; select bank1
 11194  15E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11195  15E9  3187  2740  3194   	fcall	___ftmul
 11196  15EC  0021               	movlb	1	; select bank1
 11197  15ED  082E               	movf	?___ftmul^(0+128),w
 11198  15EE  00C4               	movwf	___ftadd@f2^(0+128)
 11199  15EF  082F               	movf	(?___ftmul+1)^(0+128),w
 11200  15F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11201  15F1  0830               	movf	(?___ftmul+2)^(0+128),w
 11202  15F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11203  15F3  0022               	movlb	2	; select bank2
 11204  15F4  083F               	movf	modSaw@shift^(0+256),w
 11205  15F5  0021               	movlb	1	; select bank1
 11206  15F6  00BE               	movwf	___ftneg@f1^(0+128)
 11207  15F7  0022               	movlb	2	; select bank2
 11208  15F8  0840               	movf	(modSaw@shift+1)^(0+256),w
 11209  15F9  0021               	movlb	1	; select bank1
 11210  15FA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11211  15FB  0022               	movlb	2	; select bank2
 11212  15FC  0841               	movf	(modSaw@shift+2)^(0+256),w
 11213  15FD  0021               	movlb	1	; select bank1
 11214  15FE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11215  15FF  31AE  261F  3194   	fcall	___ftneg
 11216  1602  0021               	movlb	1	; select bank1
 11217  1603  083E               	movf	?___ftneg^(0+128),w
 11218  1604  00C1               	movwf	___ftadd@f1^(0+128)
 11219  1605  083F               	movf	(?___ftneg+1)^(0+128),w
 11220  1606  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11221  1607  0840               	movf	(?___ftneg+2)^(0+128),w
 11222  1608  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11223  1609  3190  201F  3194   	fcall	___ftadd
 11224  160C  0021               	movlb	1	; select bank1
 11225  160D  0841               	movf	?___ftadd^(0+128),w
 11226  160E  0022               	movlb	2	; select bank2
 11227  160F  00BA               	movwf	_modSaw$2850^(0+256)
 11228  1610  0021               	movlb	1	; select bank1
 11229  1611  0842               	movf	(?___ftadd+1)^(0+128),w
 11230  1612  0022               	movlb	2	; select bank2
 11231  1613  00BB               	movwf	(_modSaw$2850+1)^(0+256)
 11232  1614  0021               	movlb	1	; select bank1
 11233  1615  0843               	movf	(?___ftadd+2)^(0+128),w
 11234  1616  0022               	movlb	2	; select bank2
 11235  1617  00BC               	movwf	(_modSaw$2850+2)^(0+256)
 11236                           
 11237                           ;modulation.c: 128: }
 11238                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 11239  1618  083A               	movf	_modSaw$2850^(0+256),w
 11240  1619  0021               	movlb	1	; select bank1
 11241  161A  00B1               	movwf	___ftmul@f2^(0+128)
 11242  161B  0022               	movlb	2	; select bank2
 11243  161C  083B               	movf	(_modSaw$2850+1)^(0+256),w
 11244  161D  0021               	movlb	1	; select bank1
 11245  161E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11246  161F  0022               	movlb	2	; select bank2
 11247  1620  083C               	movf	(_modSaw$2850+2)^(0+256),w
 11248  1621  0021               	movlb	1	; select bank1
 11249  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11250  1623  3000               	movlw	0
 11251  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11252  1625  30A0               	movlw	160
 11253  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11254  1627  3040               	movlw	64
 11255  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11256  1629  3187  2740  3194   	fcall	___ftmul
 11257  162C  0021               	movlb	1	; select bank1
 11258  162D  082E               	movf	?___ftmul^(0+128),w
 11259  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11260  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11261  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11262  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11263  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11264  1633  3000               	movlw	0
 11265  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11266  1635  3010               	movlw	16
 11267  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11268  1637  3041               	movlw	65
 11269  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11270  1639  319D  2528  3194   	fcall	___ftdiv
 11271  163C  0021               	movlb	1	; select bank1
 11272  163D  084E               	movf	?___ftdiv^(0+128),w
 11273  163E  0022               	movlb	2	; select bank2
 11274  163F  00A0               	movwf	___fttol@f1^(0+256)
 11275  1640  0021               	movlb	1	; select bank1
 11276  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11277  1642  0022               	movlb	2	; select bank2
 11278  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11279  1644  0021               	movlb	1	; select bank1
 11280  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11281  1646  0022               	movlb	2	; select bank2
 11282  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11283  1648  319A  2263         	fcall	___fttol
 11284  164A  0022               	movlb	2	; select bank2
 11285  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11286  164C  00BE               	movwf	(modSaw@mod+1)^(0+256)
 11287  164D  0820               	movf	?___fttol^(0+256),w
 11288  164E  00BD               	movwf	modSaw@mod^(0+256)
 11289                           
 11290                           ;modulation.c: 132: return mod;
 11291  164F  083E               	movf	(modSaw@mod+1)^(0+256),w
 11292  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11293  1651  083D               	movf	modSaw@mod^(0+256),w
 11294  1652  00AE               	movwf	?_modSaw^(0+256)
 11295  1653  0008               	return
 11296  1654                     __end_of_modSaw:	
 11297                           
 11298                           	psect	text22
 11299  25BA                     __ptext22:	
 11300 ;; *************** function ___awdiv *****************
 11301 ;; Defined at:
 11302 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11303 ;; Parameters:    Size  Location     Type
 11304 ;;  divisor         2    0[BANK1 ] int 
 11305 ;;  dividend        2    2[BANK1 ] int 
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;  quotient        2    7[BANK1 ] int 
 11308 ;;  sign            1    6[BANK1 ] unsigned char 
 11309 ;;  counter         1    5[BANK1 ] unsigned char 
 11310 ;; Return value:  Size  Location     Type
 11311 ;;                  2    0[BANK1 ] int 
 11312 ;; Registers used:
 11313 ;;		wreg, status,2, status,0
 11314 ;; Tracked objects:
 11315 ;;		On entry : 0/0
 11316 ;;		On exit  : 0/0
 11317 ;;		Unchanged: 0/0
 11318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11319 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11320 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11321 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11322 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11323 ;;Total ram usage:        9 bytes
 11324 ;; Hardware stack levels used:    1
 11325 ;; Hardware stack levels required when called:    3
 11326 ;; This function calls:
 11327 ;;		Nothing
 11328 ;; This function is called by:
 11329 ;;		_updateModulationArray
 11330 ;;		_USARTWriteInt
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           
 11335                           ;psect for function ___awdiv
 11336  25BA                     ___awdiv:	
 11337                           
 11338                           ;incstack = 0
 11339                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11340  25BA  0021               	movlb	1	; select bank1
 11341  25BB  01A6               	clrf	___awdiv@sign^(0+128)
 11342  25BC  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11343  25BD  2DC5               	goto	l8572
 11344  25BE  09A0               	comf	___awdiv@divisor^(0+128),f
 11345  25BF  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11346  25C0  0AA0               	incf	___awdiv@divisor^(0+128),f
 11347  25C1  1903               	skipnz
 11348  25C2  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11349  25C3  01A6               	clrf	___awdiv@sign^(0+128)
 11350  25C4  0AA6               	incf	___awdiv@sign^(0+128),f
 11351  25C5                     l8572:	
 11352  25C5  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11353  25C6  2DD0               	goto	l8578
 11354  25C7  09A2               	comf	___awdiv@dividend^(0+128),f
 11355  25C8  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11356  25C9  0AA2               	incf	___awdiv@dividend^(0+128),f
 11357  25CA  1903               	skipnz
 11358  25CB  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11359  25CC  3001               	movlw	1
 11360  25CD  00A4               	movwf	??___awdiv^(0+128)
 11361  25CE  0824               	movf	??___awdiv^(0+128),w
 11362  25CF  06A6               	xorwf	___awdiv@sign^(0+128),f
 11363  25D0                     l8578:	
 11364  25D0  01A7               	clrf	___awdiv@quotient^(0+128)
 11365  25D1  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11366  25D2  0820               	movf	___awdiv@divisor^(0+128),w
 11367  25D3  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11368  25D4  1903               	btfsc	3,2
 11369  25D5  2DFF               	goto	l8600
 11370  25D6  01A5               	clrf	___awdiv@counter^(0+128)
 11371  25D7  0AA5               	incf	___awdiv@counter^(0+128),f
 11372  25D8                     l8588:	
 11373  25D8  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11374  25D9  2DE4               	goto	l8590
 11375  25DA  3001               	movlw	1
 11376  25DB                     u9125:	
 11377  25DB  35A0               	lslf	___awdiv@divisor^(0+128),f
 11378  25DC  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11379  25DD  0B89               	decfsz	9,f
 11380  25DE  2DDB               	goto	u9125
 11381  25DF  3001               	movlw	1
 11382  25E0  00A4               	movwf	??___awdiv^(0+128)
 11383  25E1  0824               	movf	??___awdiv^(0+128),w
 11384  25E2  07A5               	addwf	___awdiv@counter^(0+128),f
 11385  25E3  2DD8               	goto	l8588
 11386  25E4                     l8590:	
 11387  25E4  3001               	movlw	1
 11388  25E5                     u9145:	
 11389  25E5  35A7               	lslf	___awdiv@quotient^(0+128),f
 11390  25E6  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11391  25E7  0B89               	decfsz	9,f
 11392  25E8  2DE5               	goto	u9145
 11393  25E9  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11394  25EA  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11395  25EB  1D03               	skipz
 11396  25EC  2DEF               	goto	u9155
 11397  25ED  0820               	movf	___awdiv@divisor^(0+128),w
 11398  25EE  0222               	subwf	___awdiv@dividend^(0+128),w
 11399  25EF                     u9155:	
 11400  25EF  1C03               	skipc
 11401  25F0  2DF6               	goto	l8596
 11402  25F1  0820               	movf	___awdiv@divisor^(0+128),w
 11403  25F2  02A2               	subwf	___awdiv@dividend^(0+128),f
 11404  25F3  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11405  25F4  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11406  25F5  1427               	bsf	___awdiv@quotient^(0+128),0
 11407  25F6                     l8596:	
 11408  25F6  3001               	movlw	1
 11409  25F7                     u9165:	
 11410  25F7  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11411  25F8  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11412  25F9  0B89               	decfsz	9,f
 11413  25FA  2DF7               	goto	u9165
 11414  25FB  3001               	movlw	1
 11415  25FC  02A5               	subwf	___awdiv@counter^(0+128),f
 11416  25FD  1D03               	btfss	3,2
 11417  25FE  2DE4               	goto	l8590
 11418  25FF                     l8600:	
 11419  25FF  0826               	movf	___awdiv@sign^(0+128),w
 11420  2600  1903               	btfsc	3,2
 11421  2601  2E07               	goto	l8604
 11422  2602  09A7               	comf	___awdiv@quotient^(0+128),f
 11423  2603  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11424  2604  0AA7               	incf	___awdiv@quotient^(0+128),f
 11425  2605  1903               	skipnz
 11426  2606  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11427  2607                     l8604:	
 11428  2607  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11429  2608  00A1               	movwf	(?___awdiv+1)^(0+128)
 11430  2609  0827               	movf	___awdiv@quotient^(0+128),w
 11431  260A  00A0               	movwf	?___awdiv^(0+128)
 11432  260B  0008               	return
 11433  260C                     __end_of___awdiv:	
 11434                           
 11435                           	psect	text23
 11436  1B75                     __ptext23:	
 11437 ;; *************** function _set_subdivision *****************
 11438 ;; Defined at:
 11439 ;;		line 77 in file "user.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;  x               2   14[BANK2 ] int 
 11442 ;;  y               2   16[BANK2 ] int 
 11443 ;; Auto vars:     Size  Location     Type
 11444 ;;  scalar          3   18[BANK2 ] float 
 11445 ;;  tmpX            2   21[BANK2 ] int 
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  2   14[BANK2 ] int 
 11448 ;; Registers used:
 11449 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11455 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11456 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11458 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11459 ;;Total ram usage:        9 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; Hardware stack levels required when called:    5
 11462 ;; This function calls:
 11463 ;;		___awtoft
 11464 ;;		___ftmul
 11465 ;;		___fttol
 11466 ;; This function is called by:
 11467 ;;		_main
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           
 11472                           ;psect for function _set_subdivision
 11473  1B75                     _set_subdivision:	
 11474                           
 11475                           ;user.c: 81: adjust_mod_delay = 0;
 11476                           
 11477                           ;incstack = 0
 11478                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11479  1B75  0023               	movlb	3	; select bank3
 11480  1B76  01BA               	clrf	_adjust_mod_delay^(0+384)
 11481                           
 11482                           ;user.c: 82: int tmpX = x;
 11483  1B77  0022               	movlb	2	; select bank2
 11484  1B78  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11485  1B79  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11486  1B7A  082E               	movf	set_subdivision@x^(0+256),w
 11487  1B7B  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11488                           
 11489                           ;user.c: 83: float scalar = 1.0;
 11490  1B7C  3000               	movlw	0
 11491  1B7D  00B2               	movwf	set_subdivision@scalar^(0+256)
 11492  1B7E  3080               	movlw	128
 11493  1B7F  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11494  1B80  303F               	movlw	63
 11495  1B81  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11496                           
 11497                           ;user.c: 85: switch (y) {
 11498  1B82  2BA2               	goto	l9158
 11499  1B83                     l9144:	
 11500                           ;user.c: 86: case 1:
 11501                           
 11502                           
 11503                           ;user.c: 87: scalar = 2.0;
 11504  1B83  3000               	movlw	0
 11505  1B84  00B2               	movwf	set_subdivision@scalar^(0+256)
 11506  1B85  3000               	movlw	0
 11507  1B86  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11508  1B87  3040               	movlw	64
 11509  1B88  2BA0               	goto	L14
 11510  1B89                     l9146:	
 11511                           ;user.c: 89: case 2:
 11512                           
 11513                           ;user.c: 88: break;
 11514                           
 11515                           
 11516                           ;user.c: 90: scalar = 0.6666;
 11517  1B89  30A6               	movlw	166
 11518  1B8A  00B2               	movwf	set_subdivision@scalar^(0+256)
 11519  1B8B  302A               	movlw	42
 11520  1B8C  2B9E               	goto	L15
 11521  1B8D                     l9148:	
 11522                           ;user.c: 92: case 3:
 11523                           
 11524                           ;user.c: 91: break;
 11525                           
 11526                           
 11527                           ;user.c: 93: scalar = .5;
 11528  1B8D  3000               	movlw	0
 11529  1B8E  00B2               	movwf	set_subdivision@scalar^(0+256)
 11530  1B8F  3000               	movlw	0
 11531  1B90  2B9E               	goto	L15
 11532  1B91                     l9150:	
 11533                           ;user.c: 95: case 4:
 11534                           
 11535                           ;user.c: 94: break;
 11536                           
 11537                           
 11538                           ;user.c: 96: scalar = 0.3333;
 11539  1B91  30A6               	movlw	166
 11540  1B92  00B2               	movwf	set_subdivision@scalar^(0+256)
 11541  1B93  30AA               	movlw	170
 11542  1B94  2B98               	goto	L16
 11543  1B95                     l9152:	
 11544                           ;user.c: 98: case 5:
 11545                           
 11546                           ;user.c: 97: break;
 11547                           
 11548                           
 11549                           ;user.c: 99: scalar = 0.25;
 11550  1B95  3000               	movlw	0
 11551  1B96  00B2               	movwf	set_subdivision@scalar^(0+256)
 11552  1B97  3080               	movlw	128
 11553  1B98                     L16:	
 11554  1B98  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11555  1B99  303E               	movlw	62
 11556  1B9A  2BA0               	goto	L14
 11557  1B9B                     l9154:	
 11558                           ;user.c: 101: case 6:
 11559                           
 11560                           ;user.c: 100: break;
 11561                           
 11562                           
 11563                           ;user.c: 102: scalar = 1.0;
 11564  1B9B  3000               	movlw	0
 11565  1B9C  00B2               	movwf	set_subdivision@scalar^(0+256)
 11566  1B9D  3080               	movlw	128
 11567  1B9E                     L15:	
 11568  1B9E  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11569  1B9F  303F               	movlw	63
 11570  1BA0                     L14:	
 11571  1BA0  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11572                           
 11573                           ;user.c: 104: }
 11574                           
 11575                           ;user.c: 103: break;
 11576  1BA1  2BBB               	goto	l9160
 11577  1BA2                     l9158:	
 11578                           
 11579                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11580                           ; Switch size 1, requested type "space"
 11581                           ; Number of cases is 1, Range of values is 0 to 0
 11582                           ; switch strategies available:
 11583                           ; Name         Instructions Cycles
 11584                           ; simple_byte            4     3 (average)
 11585                           ; direct_byte            8     6 (fixed)
 11586                           ; jumptable            260     6 (fixed)
 11587                           ;	Chosen strategy is simple_byte
 11588  1BA2  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11589  1BA3  3A00               	xorlw	0	; case 0
 11590  1BA4  1903               	skipnz
 11591  1BA5  2BA7               	goto	l9738
 11592  1BA6  2BBB               	goto	l9160
 11593  1BA7                     l9738:	
 11594                           
 11595                           ; Switch size 1, requested type "space"
 11596                           ; Number of cases is 6, Range of values is 1 to 6
 11597                           ; switch strategies available:
 11598                           ; Name         Instructions Cycles
 11599                           ; simple_byte           19    10 (average)
 11600                           ; direct_byte           21     9 (fixed)
 11601                           ; jumptable            263     9 (fixed)
 11602                           ;	Chosen strategy is simple_byte
 11603  1BA7  0830               	movf	set_subdivision@y^(0+256),w
 11604  1BA8  3A01               	xorlw	1	; case 1
 11605  1BA9  1903               	skipnz
 11606  1BAA  2B83               	goto	l9144
 11607  1BAB  3A03               	xorlw	3	; case 2
 11608  1BAC  1903               	skipnz
 11609  1BAD  2B89               	goto	l9146
 11610  1BAE  3A01               	xorlw	1	; case 3
 11611  1BAF  1903               	skipnz
 11612  1BB0  2B8D               	goto	l9148
 11613  1BB1  3A07               	xorlw	7	; case 4
 11614  1BB2  1903               	skipnz
 11615  1BB3  2B91               	goto	l9150
 11616  1BB4  3A01               	xorlw	1	; case 5
 11617  1BB5  1903               	skipnz
 11618  1BB6  2B95               	goto	l9152
 11619  1BB7  3A03               	xorlw	3	; case 6
 11620  1BB8  1903               	skipnz
 11621  1BB9  2B9B               	goto	l9154
 11622  1BBA  2BBB               	goto	l9160
 11623  1BBB                     l9160:	
 11624                           
 11625                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11626  1BBB  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11627  1BBC  0021               	movlb	1	; select bank1
 11628  1BBD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11629  1BBE  0022               	movlb	2	; select bank2
 11630  1BBF  0835               	movf	set_subdivision@tmpX^(0+256),w
 11631  1BC0  0021               	movlb	1	; select bank1
 11632  1BC1  00A8               	movwf	___awtoft@c^(0+128)
 11633  1BC2  31AF  2767  319B   	fcall	___awtoft
 11634  1BC5  0021               	movlb	1	; select bank1
 11635  1BC6  0828               	movf	?___awtoft^(0+128),w
 11636  1BC7  00B1               	movwf	___ftmul@f2^(0+128)
 11637  1BC8  0829               	movf	(?___awtoft+1)^(0+128),w
 11638  1BC9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11639  1BCA  082A               	movf	(?___awtoft+2)^(0+128),w
 11640  1BCB  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11641  1BCC  0022               	movlb	2	; select bank2
 11642  1BCD  0832               	movf	set_subdivision@scalar^(0+256),w
 11643  1BCE  0021               	movlb	1	; select bank1
 11644  1BCF  00AE               	movwf	___ftmul@f1^(0+128)
 11645  1BD0  0022               	movlb	2	; select bank2
 11646  1BD1  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11647  1BD2  0021               	movlb	1	; select bank1
 11648  1BD3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11649  1BD4  0022               	movlb	2	; select bank2
 11650  1BD5  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11651  1BD6  0021               	movlb	1	; select bank1
 11652  1BD7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11653  1BD8  3187  2740  319B   	fcall	___ftmul
 11654  1BDB  0021               	movlb	1	; select bank1
 11655  1BDC  082E               	movf	?___ftmul^(0+128),w
 11656  1BDD  0022               	movlb	2	; select bank2
 11657  1BDE  00A0               	movwf	___fttol@f1^(0+256)
 11658  1BDF  0021               	movlb	1	; select bank1
 11659  1BE0  082F               	movf	(?___ftmul+1)^(0+128),w
 11660  1BE1  0022               	movlb	2	; select bank2
 11661  1BE2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11662  1BE3  0021               	movlb	1	; select bank1
 11663  1BE4  0830               	movf	(?___ftmul+2)^(0+128),w
 11664  1BE5  0022               	movlb	2	; select bank2
 11665  1BE6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11666  1BE7  319A  2263  319B   	fcall	___fttol
 11667  1BEA  0022               	movlb	2	; select bank2
 11668  1BEB  0821               	movf	(?___fttol^(0+256)+1),w
 11669  1BEC  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11670  1BED  0820               	movf	?___fttol^(0+256),w
 11671  1BEE  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11672                           
 11673                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11674  1BEF  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11675  1BF0  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11676  1BF1  1D03               	skipz
 11677  1BF2  2BF5               	goto	u10145
 11678  1BF3  0835               	movf	set_subdivision@tmpX^(0+256),w
 11679  1BF4  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11680  1BF5                     u10145:	
 11681  1BF5  1903               	skipnz
 11682  1BF6  2BFA               	goto	l9166
 11683                           
 11684                           ;user.c: 109: adjust_mod_delay = 1;
 11685  1BF7  0023               	movlb	3	; select bank3
 11686  1BF8  01BA               	clrf	_adjust_mod_delay^(0+384)
 11687  1BF9  0ABA               	incf	_adjust_mod_delay^(0+384),f
 11688  1BFA                     l9166:	
 11689                           
 11690                           ;user.c: 110: }
 11691                           ;user.c: 112: return tmpX;
 11692  1BFA  0022               	movlb	2	; select bank2
 11693  1BFB  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11694  1BFC  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11695  1BFD  0835               	movf	set_subdivision@tmpX^(0+256),w
 11696  1BFE  00AE               	movwf	?_set_subdivision^(0+256)
 11697  1BFF  0008               	return
 11698  1C00                     __end_of_set_subdivision:	
 11699                           
 11700                           	psect	text24
 11701  1DD1                     __ptext24:	
 11702 ;; *************** function _scaleiA10kPot *****************
 11703 ;; Defined at:
 11704 ;;		line 211 in file "user.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;  input           3   71[BANK2 ] int 
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;  pwm             3    0[BANK3 ] float 
 11709 ;; Return value:  Size  Location     Type
 11710 ;;                  2   71[BANK2 ] int 
 11711 ;; Registers used:
 11712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11713 ;; Tracked objects:
 11714 ;;		On entry : 0/0
 11715 ;;		On exit  : 0/0
 11716 ;;		Unchanged: 0/0
 11717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11718 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11719 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11721 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11722 ;;Total ram usage:       12 bytes
 11723 ;; Hardware stack levels used:    1
 11724 ;; Hardware stack levels required when called:    8
 11725 ;; This function calls:
 11726 ;;		___ftadd
 11727 ;;		___ftdiv
 11728 ;;		___ftmul
 11729 ;;		___ftneg
 11730 ;;		___fttol
 11731 ;;		_pow
 11732 ;; This function is called by:
 11733 ;;		_main
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           
 11738                           ;psect for function _scaleiA10kPot
 11739  1DD1                     _scaleiA10kPot:	
 11740                           
 11741                           ;user.c: 214: if (input == 0.0) {return 0;}
 11742                           
 11743                           ;incstack = 0
 11744                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11745  1DD1  0022               	movlb	2	; select bank2
 11746  1DD2  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11747  1DD3  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11748  1DD4  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11749  1DD5  1D03               	skipz
 11750  1DD6  2DDA               	goto	l9104
 11751  1DD7  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11752  1DD8  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11753  1DD9  0008               	return
 11754  1DDA                     l9104:	
 11755                           
 11756                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11757  1DDA  30C0               	movlw	192
 11758  1DDB  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11759  1DDC  307F               	movlw	127
 11760  1DDD  1903               	skipnz
 11761  1DDE  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11762  1DDF  3044               	movlw	68
 11763  1DE0  1903               	skipnz
 11764  1DE1  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11765  1DE2  1D03               	btfss	3,2
 11766  1DE3  2DE9               	goto	l9110
 11767  1DE4  30FF               	movlw	255
 11768  1DE5  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11769  1DE6  3000               	movlw	0
 11770  1DE7  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11771  1DE8  0008               	return
 11772  1DE9                     l9110:	
 11773                           
 11774                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11775  1DE9  3000               	movlw	0
 11776  1DEA  0021               	movlb	1	; select bank1
 11777  1DEB  00C1               	movwf	___ftadd@f1^(0+128)
 11778  1DEC  3080               	movlw	128
 11779  1DED  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11780  1DEE  303F               	movlw	63
 11781  1DEF  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11782  1DF0  0022               	movlb	2	; select bank2
 11783  1DF1  0867               	movf	scaleiA10kPot@input^(0+256),w
 11784  1DF2  0021               	movlb	1	; select bank1
 11785  1DF3  00D1               	movwf	___ftdiv@f1^(0+128)
 11786  1DF4  0022               	movlb	2	; select bank2
 11787  1DF5  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11788  1DF6  0021               	movlb	1	; select bank1
 11789  1DF7  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11790  1DF8  0022               	movlb	2	; select bank2
 11791  1DF9  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11792  1DFA  0021               	movlb	1	; select bank1
 11793  1DFB  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11794  1DFC  30C0               	movlw	192
 11795  1DFD  00CE               	movwf	___ftdiv@f2^(0+128)
 11796  1DFE  307F               	movlw	127
 11797  1DFF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11798  1E00  3044               	movlw	68
 11799  1E01  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11800  1E02  319D  2528  319D   	fcall	___ftdiv
 11801  1E05  0021               	movlb	1	; select bank1
 11802  1E06  084E               	movf	?___ftdiv^(0+128),w
 11803  1E07  00BE               	movwf	___ftneg@f1^(0+128)
 11804  1E08  084F               	movf	(?___ftdiv+1)^(0+128),w
 11805  1E09  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11806  1E0A  0850               	movf	(?___ftdiv+2)^(0+128),w
 11807  1E0B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11808  1E0C  31AE  261F  319D   	fcall	___ftneg
 11809  1E0F  0021               	movlb	1	; select bank1
 11810  1E10  083E               	movf	?___ftneg^(0+128),w
 11811  1E11  00C4               	movwf	___ftadd@f2^(0+128)
 11812  1E12  083F               	movf	(?___ftneg+1)^(0+128),w
 11813  1E13  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11814  1E14  0840               	movf	(?___ftneg+2)^(0+128),w
 11815  1E15  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11816  1E16  3190  201F  319D   	fcall	___ftadd
 11817  1E19  0021               	movlb	1	; select bank1
 11818  1E1A  0841               	movf	?___ftadd^(0+128),w
 11819  1E1B  0023               	movlb	3	; select bank3
 11820  1E1C  00EA               	movwf	_scaleiA10kPot$2844^(0+384)
 11821  1E1D  0021               	movlb	1	; select bank1
 11822  1E1E  0842               	movf	(?___ftadd+1)^(0+128),w
 11823  1E1F  0023               	movlb	3	; select bank3
 11824  1E20  00EB               	movwf	(_scaleiA10kPot$2844+1)^(0+384)
 11825  1E21  0021               	movlb	1	; select bank1
 11826  1E22  0843               	movf	(?___ftadd+2)^(0+128),w
 11827  1E23  0023               	movlb	3	; select bank3
 11828  1E24  00EC               	movwf	(_scaleiA10kPot$2844+2)^(0+384)
 11829                           
 11830                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11831  1E25  306A               	movlw	106
 11832  1E26  0022               	movlb	2	; select bank2
 11833  1E27  00D8               	movwf	pow@y^(0+256)
 11834  1E28  309C               	movlw	156
 11835  1E29  00D9               	movwf	(pow@y+1)^(0+256)
 11836  1E2A  30BF               	movlw	191
 11837  1E2B  00DA               	movwf	(pow@y+2)^(0+256)
 11838  1E2C  0023               	movlb	3	; select bank3
 11839  1E2D  086A               	movf	_scaleiA10kPot$2844^(0+384),w
 11840  1E2E  0022               	movlb	2	; select bank2
 11841  1E2F  00D5               	movwf	pow@x^(0+256)
 11842  1E30  0023               	movlb	3	; select bank3
 11843  1E31  086B               	movf	(_scaleiA10kPot$2844+1)^(0+384),w
 11844  1E32  0022               	movlb	2	; select bank2
 11845  1E33  00D6               	movwf	(pow@x+1)^(0+256)
 11846  1E34  0023               	movlb	3	; select bank3
 11847  1E35  086C               	movf	(_scaleiA10kPot$2844+2)^(0+384),w
 11848  1E36  0022               	movlb	2	; select bank2
 11849  1E37  00D7               	movwf	(pow@x+2)^(0+256)
 11850  1E38  3191  2115  319D   	fcall	_pow
 11851  1E3B  0022               	movlb	2	; select bank2
 11852  1E3C  0855               	movf	?_pow^(0+256),w
 11853  1E3D  0023               	movlb	3	; select bank3
 11854  1E3E  00ED               	movwf	_scaleiA10kPot$2845^(0+384)
 11855  1E3F  0022               	movlb	2	; select bank2
 11856  1E40  0856               	movf	(?_pow+1)^(0+256),w
 11857  1E41  0023               	movlb	3	; select bank3
 11858  1E42  00EE               	movwf	(_scaleiA10kPot$2845+1)^(0+384)
 11859  1E43  0022               	movlb	2	; select bank2
 11860  1E44  0857               	movf	(?_pow+2)^(0+256),w
 11861  1E45  0023               	movlb	3	; select bank3
 11862  1E46  00EF               	movwf	(_scaleiA10kPot$2845+2)^(0+384)
 11863                           
 11864                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11865  1E47  30E3               	movlw	227
 11866  1E48  0021               	movlb	1	; select bank1
 11867  1E49  00AE               	movwf	___ftmul@f1^(0+128)
 11868  1E4A  300B               	movlw	11
 11869  1E4B  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11870  1E4C  3041               	movlw	65
 11871  1E4D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11872  1E4E  0023               	movlb	3	; select bank3
 11873  1E4F  086D               	movf	_scaleiA10kPot$2845^(0+384),w
 11874  1E50  0021               	movlb	1	; select bank1
 11875  1E51  00B1               	movwf	___ftmul@f2^(0+128)
 11876  1E52  0023               	movlb	3	; select bank3
 11877  1E53  086E               	movf	(_scaleiA10kPot$2845+1)^(0+384),w
 11878  1E54  0021               	movlb	1	; select bank1
 11879  1E55  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11880  1E56  0023               	movlb	3	; select bank3
 11881  1E57  086F               	movf	(_scaleiA10kPot$2845+2)^(0+384),w
 11882  1E58  0021               	movlb	1	; select bank1
 11883  1E59  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11884  1E5A  3187  2740  319D   	fcall	___ftmul
 11885  1E5D  0021               	movlb	1	; select bank1
 11886  1E5E  082E               	movf	?___ftmul^(0+128),w
 11887  1E5F  0023               	movlb	3	; select bank3
 11888  1E60  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 11889  1E61  0021               	movlb	1	; select bank1
 11890  1E62  082F               	movf	(?___ftmul+1)^(0+128),w
 11891  1E63  0023               	movlb	3	; select bank3
 11892  1E64  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 11893  1E65  0021               	movlb	1	; select bank1
 11894  1E66  0830               	movf	(?___ftmul+2)^(0+128),w
 11895  1E67  0023               	movlb	3	; select bank3
 11896  1E68  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 11897                           
 11898                           ;user.c: 219: return (int)(pwm);
 11899  1E69  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 11900  1E6A  0022               	movlb	2	; select bank2
 11901  1E6B  00A0               	movwf	___fttol@f1^(0+256)
 11902  1E6C  0023               	movlb	3	; select bank3
 11903  1E6D  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 11904  1E6E  0022               	movlb	2	; select bank2
 11905  1E6F  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11906  1E70  0023               	movlb	3	; select bank3
 11907  1E71  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 11908  1E72  0022               	movlb	2	; select bank2
 11909  1E73  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11910  1E74  319A  2263         	fcall	___fttol
 11911  1E76  0022               	movlb	2	; select bank2
 11912  1E77  0821               	movf	(?___fttol^(0+256)+1),w
 11913  1E78  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 11914  1E79  0820               	movf	?___fttol^(0+256),w
 11915  1E7A  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11916  1E7B  0008               	return
 11917  1E7C                     __end_of_scaleiA10kPot:	
 11918                           
 11919                           	psect	text25
 11920  1C00                     __ptext25:	
 11921 ;; *************** function _scaleA10kPot *****************
 11922 ;; Defined at:
 11923 ;;		line 202 in file "user.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;  input           3   71[BANK2 ] int 
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;  pwm             3    0[BANK3 ] float 
 11928 ;; Return value:  Size  Location     Type
 11929 ;;                  2   71[BANK2 ] int 
 11930 ;; Registers used:
 11931 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11932 ;; Tracked objects:
 11933 ;;		On entry : 0/0
 11934 ;;		On exit  : 0/0
 11935 ;;		Unchanged: 0/0
 11936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11937 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11938 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11940 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11941 ;;Total ram usage:       12 bytes
 11942 ;; Hardware stack levels used:    1
 11943 ;; Hardware stack levels required when called:    8
 11944 ;; This function calls:
 11945 ;;		___ftdiv
 11946 ;;		___ftmul
 11947 ;;		___fttol
 11948 ;;		_pow
 11949 ;; This function is called by:
 11950 ;;		_main
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           
 11955                           ;psect for function _scaleA10kPot
 11956  1C00                     _scaleA10kPot:	
 11957                           
 11958                           ;user.c: 204: if (input == 0.0) {return 255;}
 11959                           
 11960                           ;incstack = 0
 11961                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11962  1C00  0022               	movlb	2	; select bank2
 11963  1C01  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11964  1C02  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 11965  1C03  0467               	iorwf	scaleA10kPot@input^(0+256),w
 11966  1C04  1D03               	skipz
 11967  1C05  2C0B               	goto	l9082
 11968  1C06  30FF               	movlw	255
 11969  1C07  00E7               	movwf	?_scaleA10kPot^(0+256)
 11970  1C08  3000               	movlw	0
 11971  1C09  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 11972  1C0A  0008               	return
 11973  1C0B                     l9082:	
 11974                           
 11975                           ;user.c: 205: if (input == 1023.0) {return 0;}
 11976  1C0B  30C0               	movlw	192
 11977  1C0C  0667               	xorwf	scaleA10kPot@input^(0+256),w
 11978  1C0D  307F               	movlw	127
 11979  1C0E  1903               	skipnz
 11980  1C0F  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 11981  1C10  3044               	movlw	68
 11982  1C11  1903               	skipnz
 11983  1C12  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 11984  1C13  1D03               	btfss	3,2
 11985  1C14  2C18               	goto	l9088
 11986  1C15  01E7               	clrf	?_scaleA10kPot^(0+256)
 11987  1C16  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 11988  1C17  0008               	return
 11989  1C18                     l9088:	
 11990                           
 11991                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11992  1C18  30C0               	movlw	192
 11993  1C19  0021               	movlb	1	; select bank1
 11994  1C1A  00CE               	movwf	___ftdiv@f2^(0+128)
 11995  1C1B  307F               	movlw	127
 11996  1C1C  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11997  1C1D  3044               	movlw	68
 11998  1C1E  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11999  1C1F  0022               	movlb	2	; select bank2
 12000  1C20  0867               	movf	scaleA10kPot@input^(0+256),w
 12001  1C21  0021               	movlb	1	; select bank1
 12002  1C22  00D1               	movwf	___ftdiv@f1^(0+128)
 12003  1C23  0022               	movlb	2	; select bank2
 12004  1C24  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12005  1C25  0021               	movlb	1	; select bank1
 12006  1C26  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12007  1C27  0022               	movlb	2	; select bank2
 12008  1C28  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12009  1C29  0021               	movlb	1	; select bank1
 12010  1C2A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12011  1C2B  319D  2528  319C   	fcall	___ftdiv
 12012  1C2E  0021               	movlb	1	; select bank1
 12013  1C2F  084E               	movf	?___ftdiv^(0+128),w
 12014  1C30  0023               	movlb	3	; select bank3
 12015  1C31  00EA               	movwf	_scaleA10kPot$2842^(0+384)
 12016  1C32  0021               	movlb	1	; select bank1
 12017  1C33  084F               	movf	(?___ftdiv+1)^(0+128),w
 12018  1C34  0023               	movlb	3	; select bank3
 12019  1C35  00EB               	movwf	(_scaleA10kPot$2842+1)^(0+384)
 12020  1C36  0021               	movlb	1	; select bank1
 12021  1C37  0850               	movf	(?___ftdiv+2)^(0+128),w
 12022  1C38  0023               	movlb	3	; select bank3
 12023  1C39  00EC               	movwf	(_scaleA10kPot$2842+2)^(0+384)
 12024                           
 12025                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12026  1C3A  306A               	movlw	106
 12027  1C3B  0022               	movlb	2	; select bank2
 12028  1C3C  00D8               	movwf	pow@y^(0+256)
 12029  1C3D  309C               	movlw	156
 12030  1C3E  00D9               	movwf	(pow@y+1)^(0+256)
 12031  1C3F  30BF               	movlw	191
 12032  1C40  00DA               	movwf	(pow@y+2)^(0+256)
 12033  1C41  0023               	movlb	3	; select bank3
 12034  1C42  086A               	movf	_scaleA10kPot$2842^(0+384),w
 12035  1C43  0022               	movlb	2	; select bank2
 12036  1C44  00D5               	movwf	pow@x^(0+256)
 12037  1C45  0023               	movlb	3	; select bank3
 12038  1C46  086B               	movf	(_scaleA10kPot$2842+1)^(0+384),w
 12039  1C47  0022               	movlb	2	; select bank2
 12040  1C48  00D6               	movwf	(pow@x+1)^(0+256)
 12041  1C49  0023               	movlb	3	; select bank3
 12042  1C4A  086C               	movf	(_scaleA10kPot$2842+2)^(0+384),w
 12043  1C4B  0022               	movlb	2	; select bank2
 12044  1C4C  00D7               	movwf	(pow@x+2)^(0+256)
 12045  1C4D  3191  2115  319C   	fcall	_pow
 12046  1C50  0022               	movlb	2	; select bank2
 12047  1C51  0855               	movf	?_pow^(0+256),w
 12048  1C52  0023               	movlb	3	; select bank3
 12049  1C53  00ED               	movwf	_scaleA10kPot$2843^(0+384)
 12050  1C54  0022               	movlb	2	; select bank2
 12051  1C55  0856               	movf	(?_pow+1)^(0+256),w
 12052  1C56  0023               	movlb	3	; select bank3
 12053  1C57  00EE               	movwf	(_scaleA10kPot$2843+1)^(0+384)
 12054  1C58  0022               	movlb	2	; select bank2
 12055  1C59  0857               	movf	(?_pow+2)^(0+256),w
 12056  1C5A  0023               	movlb	3	; select bank3
 12057  1C5B  00EF               	movwf	(_scaleA10kPot$2843+2)^(0+384)
 12058                           
 12059                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12060  1C5C  30E3               	movlw	227
 12061  1C5D  0021               	movlb	1	; select bank1
 12062  1C5E  00AE               	movwf	___ftmul@f1^(0+128)
 12063  1C5F  300B               	movlw	11
 12064  1C60  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12065  1C61  3041               	movlw	65
 12066  1C62  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12067  1C63  0023               	movlb	3	; select bank3
 12068  1C64  086D               	movf	_scaleA10kPot$2843^(0+384),w
 12069  1C65  0021               	movlb	1	; select bank1
 12070  1C66  00B1               	movwf	___ftmul@f2^(0+128)
 12071  1C67  0023               	movlb	3	; select bank3
 12072  1C68  086E               	movf	(_scaleA10kPot$2843+1)^(0+384),w
 12073  1C69  0021               	movlb	1	; select bank1
 12074  1C6A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12075  1C6B  0023               	movlb	3	; select bank3
 12076  1C6C  086F               	movf	(_scaleA10kPot$2843+2)^(0+384),w
 12077  1C6D  0021               	movlb	1	; select bank1
 12078  1C6E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12079  1C6F  3187  2740  319C   	fcall	___ftmul
 12080  1C72  0021               	movlb	1	; select bank1
 12081  1C73  082E               	movf	?___ftmul^(0+128),w
 12082  1C74  0023               	movlb	3	; select bank3
 12083  1C75  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 12084  1C76  0021               	movlb	1	; select bank1
 12085  1C77  082F               	movf	(?___ftmul+1)^(0+128),w
 12086  1C78  0023               	movlb	3	; select bank3
 12087  1C79  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12088  1C7A  0021               	movlb	1	; select bank1
 12089  1C7B  0830               	movf	(?___ftmul+2)^(0+128),w
 12090  1C7C  0023               	movlb	3	; select bank3
 12091  1C7D  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12092                           
 12093                           ;user.c: 207: return (int)(pwm);
 12094  1C7E  0867               	movf	scaleA10kPot@pwm^(0+384),w
 12095  1C7F  0022               	movlb	2	; select bank2
 12096  1C80  00A0               	movwf	___fttol@f1^(0+256)
 12097  1C81  0023               	movlb	3	; select bank3
 12098  1C82  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12099  1C83  0022               	movlb	2	; select bank2
 12100  1C84  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12101  1C85  0023               	movlb	3	; select bank3
 12102  1C86  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12103  1C87  0022               	movlb	2	; select bank2
 12104  1C88  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12105  1C89  319A  2263         	fcall	___fttol
 12106  1C8B  0022               	movlb	2	; select bank2
 12107  1C8C  0821               	movf	(?___fttol^(0+256)+1),w
 12108  1C8D  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12109  1C8E  0820               	movf	?___fttol^(0+256),w
 12110  1C8F  00E7               	movwf	?_scaleA10kPot^(0+256)
 12111  1C90  0008               	return
 12112  1C91                     __end_of_scaleA10kPot:	
 12113                           
 12114                           	psect	text26
 12115  19DE                     __ptext26:	
 12116 ;; *************** function _scaleA100kPot *****************
 12117 ;; Defined at:
 12118 ;;		line 188 in file "user.c"
 12119 ;; Parameters:    Size  Location     Type
 12120 ;;  input           3   71[BANK2 ] int 
 12121 ;; Auto vars:     Size  Location     Type
 12122 ;;  pwm             3    0[BANK3 ] float 
 12123 ;; Return value:  Size  Location     Type
 12124 ;;                  2   71[BANK2 ] int 
 12125 ;; Registers used:
 12126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12127 ;; Tracked objects:
 12128 ;;		On entry : 0/0
 12129 ;;		On exit  : 0/0
 12130 ;;		Unchanged: 0/0
 12131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12132 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12133 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12135 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12136 ;;Total ram usage:       12 bytes
 12137 ;; Hardware stack levels used:    1
 12138 ;; Hardware stack levels required when called:    8
 12139 ;; This function calls:
 12140 ;;		___ftdiv
 12141 ;;		___ftmul
 12142 ;;		___fttol
 12143 ;;		_pow
 12144 ;; This function is called by:
 12145 ;;		_main
 12146 ;; This function uses a non-reentrant model
 12147 ;;
 12148                           
 12149                           
 12150                           ;psect for function _scaleA100kPot
 12151  19DE                     _scaleA100kPot:	
 12152                           
 12153                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12154                           
 12155                           ;incstack = 0
 12156                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12157  19DE  0022               	movlb	2	; select bank2
 12158  19DF  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12159  19E0  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12160  19E1  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12161  19E2  1D03               	skipz
 12162  19E3  29EA               	goto	l9124
 12163  19E4  3000               	movlw	0
 12164  19E5  00E7               	movwf	scaleA100kPot@input^(0+256)
 12165  19E6  3080               	movlw	128
 12166  19E7  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12167  19E8  303F               	movlw	63
 12168  19E9  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12169  19EA                     l9124:	
 12170                           
 12171                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12172  19EA  30C0               	movlw	192
 12173  19EB  0021               	movlb	1	; select bank1
 12174  19EC  00CE               	movwf	___ftdiv@f2^(0+128)
 12175  19ED  307F               	movlw	127
 12176  19EE  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12177  19EF  3044               	movlw	68
 12178  19F0  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12179  19F1  0022               	movlb	2	; select bank2
 12180  19F2  0867               	movf	scaleA100kPot@input^(0+256),w
 12181  19F3  0021               	movlb	1	; select bank1
 12182  19F4  00D1               	movwf	___ftdiv@f1^(0+128)
 12183  19F5  0022               	movlb	2	; select bank2
 12184  19F6  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12185  19F7  0021               	movlb	1	; select bank1
 12186  19F8  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12187  19F9  0022               	movlb	2	; select bank2
 12188  19FA  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12189  19FB  0021               	movlb	1	; select bank1
 12190  19FC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12191  19FD  319D  2528  3199   	fcall	___ftdiv
 12192  1A00  0021               	movlb	1	; select bank1
 12193  1A01  084E               	movf	?___ftdiv^(0+128),w
 12194  1A02  0023               	movlb	3	; select bank3
 12195  1A03  00EA               	movwf	_scaleA100kPot$2838^(0+384)
 12196  1A04  0021               	movlb	1	; select bank1
 12197  1A05  084F               	movf	(?___ftdiv+1)^(0+128),w
 12198  1A06  0023               	movlb	3	; select bank3
 12199  1A07  00EB               	movwf	(_scaleA100kPot$2838+1)^(0+384)
 12200  1A08  0021               	movlb	1	; select bank1
 12201  1A09  0850               	movf	(?___ftdiv+2)^(0+128),w
 12202  1A0A  0023               	movlb	3	; select bank3
 12203  1A0B  00EC               	movwf	(_scaleA100kPot$2838+2)^(0+384)
 12204                           
 12205                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12206  1A0C  3056               	movlw	86
 12207  1A0D  0022               	movlb	2	; select bank2
 12208  1A0E  00D8               	movwf	pow@y^(0+256)
 12209  1A0F  308E               	movlw	142
 12210  1A10  00D9               	movwf	(pow@y+1)^(0+256)
 12211  1A11  30BF               	movlw	191
 12212  1A12  00DA               	movwf	(pow@y+2)^(0+256)
 12213  1A13  0023               	movlb	3	; select bank3
 12214  1A14  086A               	movf	_scaleA100kPot$2838^(0+384),w
 12215  1A15  0022               	movlb	2	; select bank2
 12216  1A16  00D5               	movwf	pow@x^(0+256)
 12217  1A17  0023               	movlb	3	; select bank3
 12218  1A18  086B               	movf	(_scaleA100kPot$2838+1)^(0+384),w
 12219  1A19  0022               	movlb	2	; select bank2
 12220  1A1A  00D6               	movwf	(pow@x+1)^(0+256)
 12221  1A1B  0023               	movlb	3	; select bank3
 12222  1A1C  086C               	movf	(_scaleA100kPot$2838+2)^(0+384),w
 12223  1A1D  0022               	movlb	2	; select bank2
 12224  1A1E  00D7               	movwf	(pow@x+2)^(0+256)
 12225  1A1F  3191  2115  3199   	fcall	_pow
 12226  1A22  0022               	movlb	2	; select bank2
 12227  1A23  0855               	movf	?_pow^(0+256),w
 12228  1A24  0023               	movlb	3	; select bank3
 12229  1A25  00ED               	movwf	_scaleA100kPot$2839^(0+384)
 12230  1A26  0022               	movlb	2	; select bank2
 12231  1A27  0856               	movf	(?_pow+1)^(0+256),w
 12232  1A28  0023               	movlb	3	; select bank3
 12233  1A29  00EE               	movwf	(_scaleA100kPot$2839+1)^(0+384)
 12234  1A2A  0022               	movlb	2	; select bank2
 12235  1A2B  0857               	movf	(?_pow+2)^(0+256),w
 12236  1A2C  0023               	movlb	3	; select bank3
 12237  1A2D  00EF               	movwf	(_scaleA100kPot$2839+2)^(0+384)
 12238                           
 12239                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12240  1A2E  309F               	movlw	159
 12241  1A2F  0021               	movlb	1	; select bank1
 12242  1A30  00AE               	movwf	___ftmul@f1^(0+128)
 12243  1A31  3068               	movlw	104
 12244  1A32  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12245  1A33  3040               	movlw	64
 12246  1A34  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12247  1A35  0023               	movlb	3	; select bank3
 12248  1A36  086D               	movf	_scaleA100kPot$2839^(0+384),w
 12249  1A37  0021               	movlb	1	; select bank1
 12250  1A38  00B1               	movwf	___ftmul@f2^(0+128)
 12251  1A39  0023               	movlb	3	; select bank3
 12252  1A3A  086E               	movf	(_scaleA100kPot$2839+1)^(0+384),w
 12253  1A3B  0021               	movlb	1	; select bank1
 12254  1A3C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12255  1A3D  0023               	movlb	3	; select bank3
 12256  1A3E  086F               	movf	(_scaleA100kPot$2839+2)^(0+384),w
 12257  1A3F  0021               	movlb	1	; select bank1
 12258  1A40  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12259  1A41  3187  2740  3199   	fcall	___ftmul
 12260  1A44  0021               	movlb	1	; select bank1
 12261  1A45  082E               	movf	?___ftmul^(0+128),w
 12262  1A46  0023               	movlb	3	; select bank3
 12263  1A47  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 12264  1A48  0021               	movlb	1	; select bank1
 12265  1A49  082F               	movf	(?___ftmul+1)^(0+128),w
 12266  1A4A  0023               	movlb	3	; select bank3
 12267  1A4B  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12268  1A4C  0021               	movlb	1	; select bank1
 12269  1A4D  0830               	movf	(?___ftmul+2)^(0+128),w
 12270  1A4E  0023               	movlb	3	; select bank3
 12271  1A4F  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12272                           
 12273                           ;user.c: 192: return (int)(pwm);
 12274  1A50  0867               	movf	scaleA100kPot@pwm^(0+384),w
 12275  1A51  0022               	movlb	2	; select bank2
 12276  1A52  00A0               	movwf	___fttol@f1^(0+256)
 12277  1A53  0023               	movlb	3	; select bank3
 12278  1A54  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12279  1A55  0022               	movlb	2	; select bank2
 12280  1A56  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12281  1A57  0023               	movlb	3	; select bank3
 12282  1A58  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12283  1A59  0022               	movlb	2	; select bank2
 12284  1A5A  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12285  1A5B  319A  2263         	fcall	___fttol
 12286  1A5D  0022               	movlb	2	; select bank2
 12287  1A5E  0821               	movf	(?___fttol^(0+256)+1),w
 12288  1A5F  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12289  1A60  0820               	movf	?___fttol^(0+256),w
 12290  1A61  00E7               	movwf	?_scaleA100kPot^(0+256)
 12291  1A62  0008               	return
 12292  1A63                     __end_of_scaleA100kPot:	
 12293                           
 12294                           	psect	text27
 12295  1115                     __ptext27:	
 12296 ;; *************** function _pow *****************
 12297 ;; Defined at:
 12298 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12299 ;; Parameters:    Size  Location     Type
 12300 ;;  x               3   53[BANK2 ] int 
 12301 ;;  y               3   56[BANK2 ] int 
 12302 ;; Auto vars:     Size  Location     Type
 12303 ;;  yi              4   67[BANK2 ] unsigned long 
 12304 ;;  sign            1   66[BANK2 ] unsigned char 
 12305 ;; Return value:  Size  Location     Type
 12306 ;;                  3   53[BANK2 ] unsigned char 
 12307 ;; Registers used:
 12308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12309 ;; Tracked objects:
 12310 ;;		On entry : 0/0
 12311 ;;		On exit  : 0/0
 12312 ;;		Unchanged: 0/0
 12313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12314 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12315 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12316 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12317 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12318 ;;Total ram usage:       18 bytes
 12319 ;; Hardware stack levels used:    1
 12320 ;; Hardware stack levels required when called:    7
 12321 ;; This function calls:
 12322 ;;		___ftge
 12323 ;;		___ftmul
 12324 ;;		___ftneg
 12325 ;;		___fttol
 12326 ;;		___lltoft
 12327 ;;		_exp
 12328 ;;		_log
 12329 ;; This function is called by:
 12330 ;;		_scaleA100kPot
 12331 ;;		_scaleA10kPot
 12332 ;;		_scaleiA10kPot
 12333 ;;		_scaleiA100kPot
 12334 ;; This function uses a non-reentrant model
 12335 ;;
 12336                           
 12337                           
 12338                           ;psect for function _pow
 12339  1115                     _pow:	
 12340                           
 12341                           ;incstack = 0
 12342                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12343  1115  0022               	movlb	2	; select bank2
 12344  1116  01E2               	clrf	pow@sign^(0+256)
 12345  1117  0857               	movf	(pow@x+2)^(0+256),w
 12346  1118  0456               	iorwf	(pow@x+1)^(0+256),w
 12347  1119  0455               	iorwf	pow@x^(0+256),w
 12348  111A  1D03               	skipz
 12349  111B  2941               	goto	l8348
 12350  111C  3000               	movlw	0
 12351  111D  0021               	movlb	1	; select bank1
 12352  111E  00A0               	movwf	___ftge@ff1^(0+128)
 12353  111F  3000               	movlw	0
 12354  1120  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12355  1121  3000               	movlw	0
 12356  1122  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12357  1123  0022               	movlb	2	; select bank2
 12358  1124  0858               	movf	pow@y^(0+256),w
 12359  1125  0021               	movlb	1	; select bank1
 12360  1126  00A3               	movwf	___ftge@ff2^(0+128)
 12361  1127  0022               	movlb	2	; select bank2
 12362  1128  0859               	movf	(pow@y+1)^(0+256),w
 12363  1129  0021               	movlb	1	; select bank1
 12364  112A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12365  112B  0022               	movlb	2	; select bank2
 12366  112C  085A               	movf	(pow@y+2)^(0+256),w
 12367  112D  0021               	movlb	1	; select bank1
 12368  112E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12369  112F  31A2  2200  3191   	fcall	___ftge
 12370  1132  1C03               	btfss	3,0
 12371  1133  2939               	goto	l2324
 12372  1134  3021               	movlw	33
 12373  1135  0024               	movlb	4	; select bank4
 12374  1136  00CD               	movwf	_errno^(0+512)
 12375  1137  3000               	movlw	0
 12376  1138  00CE               	movwf	(_errno^(0+512)+1)
 12377  1139                     l2324:	
 12378  1139  3000               	movlw	0
 12379  113A  0022               	movlb	2	; select bank2
 12380  113B  00D5               	movwf	?_pow^(0+256)
 12381  113C  3000               	movlw	0
 12382  113D  00D6               	movwf	(?_pow+1)^(0+256)
 12383  113E  3000               	movlw	0
 12384  113F  00D7               	movwf	(?_pow+2)^(0+256)
 12385  1140  0008               	return
 12386  1141                     l8348:	
 12387  1141  085A               	movf	(pow@y+2)^(0+256),w
 12388  1142  0459               	iorwf	(pow@y+1)^(0+256),w
 12389  1143  0458               	iorwf	pow@y^(0+256),w
 12390  1144  1D03               	skipz
 12391  1145  294D               	goto	l8354
 12392  1146  3000               	movlw	0
 12393  1147  00D5               	movwf	?_pow^(0+256)
 12394  1148  3080               	movlw	128
 12395  1149  00D6               	movwf	(?_pow+1)^(0+256)
 12396  114A  303F               	movlw	63
 12397  114B  00D7               	movwf	(?_pow+2)^(0+256)
 12398  114C  0008               	return
 12399  114D                     l8354:	
 12400  114D  0855               	movf	pow@x^(0+256),w
 12401  114E  0021               	movlb	1	; select bank1
 12402  114F  00A0               	movwf	___ftge@ff1^(0+128)
 12403  1150  0022               	movlb	2	; select bank2
 12404  1151  0856               	movf	(pow@x+1)^(0+256),w
 12405  1152  0021               	movlb	1	; select bank1
 12406  1153  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12407  1154  0022               	movlb	2	; select bank2
 12408  1155  0857               	movf	(pow@x+2)^(0+256),w
 12409  1156  0021               	movlb	1	; select bank1
 12410  1157  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12411  1158  3000               	movlw	0
 12412  1159  00A3               	movwf	___ftge@ff2^(0+128)
 12413  115A  3000               	movlw	0
 12414  115B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12415  115C  3000               	movlw	0
 12416  115D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12417  115E  31A2  2200  3191   	fcall	___ftge
 12418  1161  1803               	btfsc	3,0
 12419  1162  29C7               	goto	l8366
 12420  1163  0022               	movlb	2	; select bank2
 12421  1164  0858               	movf	pow@y^(0+256),w
 12422  1165  00A0               	movwf	___fttol@f1^(0+256)
 12423  1166  0859               	movf	(pow@y+1)^(0+256),w
 12424  1167  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12425  1168  085A               	movf	(pow@y+2)^(0+256),w
 12426  1169  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12427  116A  319A  2263  3191   	fcall	___fttol
 12428  116D  0022               	movlb	2	; select bank2
 12429  116E  0823               	movf	(?___fttol+3)^(0+256),w
 12430  116F  00E6               	movwf	(pow@yi+3)^(0+256)
 12431  1170  0822               	movf	(?___fttol+2)^(0+256),w
 12432  1171  00E5               	movwf	(pow@yi+2)^(0+256)
 12433  1172  0821               	movf	(?___fttol+1)^(0+256),w
 12434  1173  00E4               	movwf	(pow@yi+1)^(0+256)
 12435  1174  0820               	movf	?___fttol^(0+256),w
 12436  1175  00E3               	movwf	pow@yi^(0+256)
 12437  1176  0866               	movf	(pow@yi+3)^(0+256),w
 12438  1177  0021               	movlb	1	; select bank1
 12439  1178  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12440  1179  0022               	movlb	2	; select bank2
 12441  117A  0865               	movf	(pow@yi+2)^(0+256),w
 12442  117B  0021               	movlb	1	; select bank1
 12443  117C  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12444  117D  0022               	movlb	2	; select bank2
 12445  117E  0864               	movf	(pow@yi+1)^(0+256),w
 12446  117F  0021               	movlb	1	; select bank1
 12447  1180  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12448  1181  0022               	movlb	2	; select bank2
 12449  1182  0863               	movf	pow@yi^(0+256),w
 12450  1183  0021               	movlb	1	; select bank1
 12451  1184  00A8               	movwf	___lltoft@c^(0+128)
 12452  1185  31A0  2002  3191   	fcall	___lltoft
 12453  1188  0022               	movlb	2	; select bank2
 12454  1189  085A               	movf	(pow@y+2)^(0+256),w
 12455  118A  0021               	movlb	1	; select bank1
 12456  118B  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12457  118C  1D03               	skipz
 12458  118D  2998               	goto	u8805
 12459  118E  0022               	movlb	2	; select bank2
 12460  118F  0859               	movf	(pow@y+1)^(0+256),w
 12461  1190  0021               	movlb	1	; select bank1
 12462  1191  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12463  1192  1D03               	skipz
 12464  1193  2998               	goto	u8805
 12465  1194  0022               	movlb	2	; select bank2
 12466  1195  0858               	movf	pow@y^(0+256),w
 12467  1196  0021               	movlb	1	; select bank1
 12468  1197  0628               	xorwf	?___lltoft^(0+128),w
 12469  1198                     u8805:	
 12470  1198  1903               	skipnz
 12471  1199  29A7               	goto	l8362
 12472  119A  3021               	movlw	33
 12473  119B  0024               	movlb	4	; select bank4
 12474  119C  00CD               	movwf	_errno^(0+512)
 12475  119D  3000               	movlw	0
 12476  119E  00CE               	movwf	(_errno^(0+512)+1)
 12477  119F  3000               	movlw	0
 12478  11A0  0022               	movlb	2	; select bank2
 12479  11A1  00D5               	movwf	?_pow^(0+256)
 12480  11A2  3000               	movlw	0
 12481  11A3  00D6               	movwf	(?_pow+1)^(0+256)
 12482  11A4  3000               	movlw	0
 12483  11A5  00D7               	movwf	(?_pow+2)^(0+256)
 12484  11A6  0008               	return
 12485  11A7                     l8362:	
 12486  11A7  0022               	movlb	2	; select bank2
 12487  11A8  0863               	movf	pow@yi^(0+256),w
 12488  11A9  3901               	andlw	1
 12489  11AA  00DB               	movwf	??_pow^(0+256)
 12490  11AB  085B               	movf	??_pow^(0+256),w
 12491  11AC  00E2               	movwf	pow@sign^(0+256)
 12492  11AD  0855               	movf	pow@x^(0+256),w
 12493  11AE  0021               	movlb	1	; select bank1
 12494  11AF  00BE               	movwf	___ftneg@f1^(0+128)
 12495  11B0  0022               	movlb	2	; select bank2
 12496  11B1  0856               	movf	(pow@x+1)^(0+256),w
 12497  11B2  0021               	movlb	1	; select bank1
 12498  11B3  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12499  11B4  0022               	movlb	2	; select bank2
 12500  11B5  0857               	movf	(pow@x+2)^(0+256),w
 12501  11B6  0021               	movlb	1	; select bank1
 12502  11B7  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12503  11B8  31AE  261F  3191   	fcall	___ftneg
 12504  11BB  0021               	movlb	1	; select bank1
 12505  11BC  083E               	movf	?___ftneg^(0+128),w
 12506  11BD  0022               	movlb	2	; select bank2
 12507  11BE  00D5               	movwf	pow@x^(0+256)
 12508  11BF  0021               	movlb	1	; select bank1
 12509  11C0  083F               	movf	(?___ftneg+1)^(0+128),w
 12510  11C1  0022               	movlb	2	; select bank2
 12511  11C2  00D6               	movwf	(pow@x+1)^(0+256)
 12512  11C3  0021               	movlb	1	; select bank1
 12513  11C4  0840               	movf	(?___ftneg+2)^(0+128),w
 12514  11C5  0022               	movlb	2	; select bank2
 12515  11C6  00D7               	movwf	(pow@x+2)^(0+256)
 12516  11C7                     l8366:	
 12517  11C7  0022               	movlb	2	; select bank2
 12518  11C8  0855               	movf	pow@x^(0+256),w
 12519  11C9  00BE               	movwf	log@x^(0+256)
 12520  11CA  0856               	movf	(pow@x+1)^(0+256),w
 12521  11CB  00BF               	movwf	(log@x+1)^(0+256)
 12522  11CC  0857               	movf	(pow@x+2)^(0+256),w
 12523  11CD  00C0               	movwf	(log@x+2)^(0+256)
 12524  11CE  319F  272F  3191   	fcall	_log
 12525  11D1  0022               	movlb	2	; select bank2
 12526  11D2  083E               	movf	?_log^(0+256),w
 12527  11D3  00DC               	movwf	_pow$2851^(0+256)
 12528  11D4  083F               	movf	(?_log+1)^(0+256),w
 12529  11D5  00DD               	movwf	(_pow$2851+1)^(0+256)
 12530  11D6  0840               	movf	(?_log+2)^(0+256),w
 12531  11D7  00DE               	movwf	(_pow$2851+2)^(0+256)
 12532  11D8  0858               	movf	pow@y^(0+256),w
 12533  11D9  0021               	movlb	1	; select bank1
 12534  11DA  00AE               	movwf	___ftmul@f1^(0+128)
 12535  11DB  0022               	movlb	2	; select bank2
 12536  11DC  0859               	movf	(pow@y+1)^(0+256),w
 12537  11DD  0021               	movlb	1	; select bank1
 12538  11DE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12539  11DF  0022               	movlb	2	; select bank2
 12540  11E0  085A               	movf	(pow@y+2)^(0+256),w
 12541  11E1  0021               	movlb	1	; select bank1
 12542  11E2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12543  11E3  0022               	movlb	2	; select bank2
 12544  11E4  085C               	movf	_pow$2851^(0+256),w
 12545  11E5  0021               	movlb	1	; select bank1
 12546  11E6  00B1               	movwf	___ftmul@f2^(0+128)
 12547  11E7  0022               	movlb	2	; select bank2
 12548  11E8  085D               	movf	(_pow$2851+1)^(0+256),w
 12549  11E9  0021               	movlb	1	; select bank1
 12550  11EA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12551  11EB  0022               	movlb	2	; select bank2
 12552  11EC  085E               	movf	(_pow$2851+2)^(0+256),w
 12553  11ED  0021               	movlb	1	; select bank1
 12554  11EE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12555  11EF  3187  2740  3191   	fcall	___ftmul
 12556  11F2  0021               	movlb	1	; select bank1
 12557  11F3  082E               	movf	?___ftmul^(0+128),w
 12558  11F4  0022               	movlb	2	; select bank2
 12559  11F5  00DF               	movwf	_pow$2852^(0+256)
 12560  11F6  0021               	movlb	1	; select bank1
 12561  11F7  082F               	movf	(?___ftmul+1)^(0+128),w
 12562  11F8  0022               	movlb	2	; select bank2
 12563  11F9  00E0               	movwf	(_pow$2852+1)^(0+256)
 12564  11FA  0021               	movlb	1	; select bank1
 12565  11FB  0830               	movf	(?___ftmul+2)^(0+128),w
 12566  11FC  0022               	movlb	2	; select bank2
 12567  11FD  00E1               	movwf	(_pow$2852+2)^(0+256)
 12568  11FE  085F               	movf	_pow$2852^(0+256),w
 12569  11FF  00C8               	movwf	exp@x^(0+256)
 12570  1200  0860               	movf	(_pow$2852+1)^(0+256),w
 12571  1201  00C9               	movwf	(exp@x+1)^(0+256)
 12572  1202  0861               	movf	(_pow$2852+2)^(0+256),w
 12573  1203  00CA               	movwf	(exp@x+2)^(0+256)
 12574  1204  3193  2351  3191   	fcall	_exp
 12575  1207  0022               	movlb	2	; select bank2
 12576  1208  0848               	movf	?_exp^(0+256),w
 12577  1209  00D5               	movwf	pow@x^(0+256)
 12578  120A  0849               	movf	(?_exp+1)^(0+256),w
 12579  120B  00D6               	movwf	(pow@x+1)^(0+256)
 12580  120C  084A               	movf	(?_exp+2)^(0+256),w
 12581  120D  00D7               	movwf	(pow@x+2)^(0+256)
 12582  120E  0862               	movf	pow@sign^(0+256),w
 12583  120F  1903               	btfsc	3,2
 12584  1210  0008               	return
 12585  1211  0855               	movf	pow@x^(0+256),w
 12586  1212  0021               	movlb	1	; select bank1
 12587  1213  00BE               	movwf	___ftneg@f1^(0+128)
 12588  1214  0022               	movlb	2	; select bank2
 12589  1215  0856               	movf	(pow@x+1)^(0+256),w
 12590  1216  0021               	movlb	1	; select bank1
 12591  1217  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12592  1218  0022               	movlb	2	; select bank2
 12593  1219  0857               	movf	(pow@x+2)^(0+256),w
 12594  121A  0021               	movlb	1	; select bank1
 12595  121B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12596  121C  31AE  261F         	fcall	___ftneg
 12597  121E  0021               	movlb	1	; select bank1
 12598  121F  083E               	movf	?___ftneg^(0+128),w
 12599  1220  0022               	movlb	2	; select bank2
 12600  1221  00D5               	movwf	?_pow^(0+256)
 12601  1222  0021               	movlb	1	; select bank1
 12602  1223  083F               	movf	(?___ftneg+1)^(0+128),w
 12603  1224  0022               	movlb	2	; select bank2
 12604  1225  00D6               	movwf	(?_pow+1)^(0+256)
 12605  1226  0021               	movlb	1	; select bank1
 12606  1227  0840               	movf	(?___ftneg+2)^(0+128),w
 12607  1228  0022               	movlb	2	; select bank2
 12608  1229  00D7               	movwf	(?_pow+2)^(0+256)
 12609  122A  0008               	return
 12610  122B                     __end_of_pow:	
 12611                           
 12612                           	psect	text28
 12613  1F2F                     __ptext28:	
 12614 ;; *************** function _log *****************
 12615 ;; Defined at:
 12616 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;  x               3   30[BANK2 ] unsigned char 
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;  exponent        2   34[BANK2 ] int 
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  3   30[BANK2 ] int 
 12623 ;; Registers used:
 12624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12625 ;; Tracked objects:
 12626 ;;		On entry : 0/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12630 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12631 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12632 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12633 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12634 ;;Total ram usage:        6 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    6
 12637 ;; This function calls:
 12638 ;;		___awtoft
 12639 ;;		___ftadd
 12640 ;;		___ftge
 12641 ;;		___ftmul
 12642 ;;		_eval_poly
 12643 ;;		_frexp
 12644 ;; This function is called by:
 12645 ;;		_pow
 12646 ;; This function uses a non-reentrant model
 12647 ;;
 12648                           
 12649                           
 12650                           ;psect for function _log
 12651  1F2F                     _log:	
 12652                           
 12653                           ;incstack = 0
 12654                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12655  1F2F  0022               	movlb	2	; select bank2
 12656  1F30  083E               	movf	log@x^(0+256),w
 12657  1F31  0021               	movlb	1	; select bank1
 12658  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12659  1F33  0022               	movlb	2	; select bank2
 12660  1F34  083F               	movf	(log@x+1)^(0+256),w
 12661  1F35  0021               	movlb	1	; select bank1
 12662  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12663  1F37  0022               	movlb	2	; select bank2
 12664  1F38  0840               	movf	(log@x+2)^(0+256),w
 12665  1F39  0021               	movlb	1	; select bank1
 12666  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12667  1F3B  3000               	movlw	0
 12668  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12669  1F3D  3000               	movlw	0
 12670  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12671  1F3F  3000               	movlw	0
 12672  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12673  1F41  31A2  2200  319F   	fcall	___ftge
 12674  1F44  1803               	btfsc	3,0
 12675  1F45  2F53               	goto	l8220
 12676  1F46  3021               	movlw	33
 12677  1F47  0024               	movlb	4	; select bank4
 12678  1F48  00CD               	movwf	_errno^(0+512)
 12679  1F49  3000               	movlw	0
 12680  1F4A  00CE               	movwf	(_errno^(0+512)+1)
 12681  1F4B  3000               	movlw	0
 12682  1F4C  0022               	movlb	2	; select bank2
 12683  1F4D  00BE               	movwf	?_log^(0+256)
 12684  1F4E  3000               	movlw	0
 12685  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12686  1F50  3000               	movlw	0
 12687  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12688  1F52  0008               	return
 12689  1F53                     l8220:	
 12690  1F53  0022               	movlb	2	; select bank2
 12691  1F54  0840               	movf	(log@x+2)^(0+256),w
 12692  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12693  1F56  043E               	iorwf	log@x^(0+256),w
 12694  1F57  1D03               	skipz
 12695  1F58  2F66               	goto	l8226
 12696  1F59  3022               	movlw	34
 12697  1F5A  0024               	movlb	4	; select bank4
 12698  1F5B  00CD               	movwf	_errno^(0+512)
 12699  1F5C  3000               	movlw	0
 12700  1F5D  00CE               	movwf	(_errno^(0+512)+1)
 12701  1F5E  3000               	movlw	0
 12702  1F5F  0022               	movlb	2	; select bank2
 12703  1F60  00BE               	movwf	?_log^(0+256)
 12704  1F61  3000               	movlw	0
 12705  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12706  1F63  3000               	movlw	0
 12707  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12708  1F65  0008               	return
 12709  1F66                     l8226:	
 12710  1F66  3000               	movlw	0
 12711  1F67  0021               	movlb	1	; select bank1
 12712  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12713  1F69  3080               	movlw	128
 12714  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12715  1F6B  30BF               	movlw	191
 12716  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12717  1F6D  3000               	movlw	0
 12718  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12719  1F6F  3000               	movlw	0
 12720  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12721  1F71  3040               	movlw	64
 12722  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12723  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12724  1F74  0022               	movlb	2	; select bank2
 12725  1F75  00C1               	movwf	??_log^(0+256)
 12726  1F76  0841               	movf	??_log^(0+256),w
 12727  1F77  0021               	movlb	1	; select bank1
 12728  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12729  1F79  0022               	movlb	2	; select bank2
 12730  1F7A  083E               	movf	log@x^(0+256),w
 12731  1F7B  0021               	movlb	1	; select bank1
 12732  1F7C  00A0               	movwf	frexp@value^(0+128)
 12733  1F7D  0022               	movlb	2	; select bank2
 12734  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12735  1F7F  0021               	movlb	1	; select bank1
 12736  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12737  1F81  0022               	movlb	2	; select bank2
 12738  1F82  0840               	movf	(log@x+2)^(0+256),w
 12739  1F83  0021               	movlb	1	; select bank1
 12740  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12741  1F85  31A2  22F3  319F   	fcall	_frexp
 12742  1F88  0021               	movlb	1	; select bank1
 12743  1F89  0820               	movf	?_frexp^(0+128),w
 12744  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12745  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12746  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12747  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12748  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12749  1F8F  3187  2740  319F   	fcall	___ftmul
 12750  1F92  0021               	movlb	1	; select bank1
 12751  1F93  082E               	movf	?___ftmul^(0+128),w
 12752  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12753  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12754  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12755  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12756  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12757  1F99  3190  201F  319F   	fcall	___ftadd
 12758  1F9C  0021               	movlb	1	; select bank1
 12759  1F9D  0841               	movf	?___ftadd^(0+128),w
 12760  1F9E  0022               	movlb	2	; select bank2
 12761  1F9F  00BE               	movwf	log@x^(0+256)
 12762  1FA0  0021               	movlb	1	; select bank1
 12763  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12764  1FA2  0022               	movlb	2	; select bank2
 12765  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12766  1FA4  0021               	movlb	1	; select bank1
 12767  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12768  1FA6  0022               	movlb	2	; select bank2
 12769  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12770  1FA8  30FF               	movlw	255
 12771  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12772  1FAA  30FF               	movlw	255
 12773  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12774  1FAC  083E               	movf	log@x^(0+256),w
 12775  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12776  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12777  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12778  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12779  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12780  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12781  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12782  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12783  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12784  1FB6  3008               	movlw	8
 12785  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12786  1FB8  3000               	movlw	0
 12787  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12788  1FBA  31A7  2718  319F   	fcall	_eval_poly
 12789  1FBD  0022               	movlb	2	; select bank2
 12790  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12791  1FBF  00BE               	movwf	log@x^(0+256)
 12792  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 12793  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 12794  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 12795  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 12796  1FC4  083E               	movf	log@x^(0+256),w
 12797  1FC5  0021               	movlb	1	; select bank1
 12798  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 12799  1FC7  0022               	movlb	2	; select bank2
 12800  1FC8  083F               	movf	(log@x+1)^(0+256),w
 12801  1FC9  0021               	movlb	1	; select bank1
 12802  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12803  1FCB  0022               	movlb	2	; select bank2
 12804  1FCC  0840               	movf	(log@x+2)^(0+256),w
 12805  1FCD  0021               	movlb	1	; select bank1
 12806  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12807  1FCF  3072               	movlw	114
 12808  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 12809  1FD1  3031               	movlw	49
 12810  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12811  1FD3  303F               	movlw	63
 12812  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12813  1FD5  0022               	movlb	2	; select bank2
 12814  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 12815  1FD7  0021               	movlb	1	; select bank1
 12816  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12817  1FD9  0022               	movlb	2	; select bank2
 12818  1FDA  0842               	movf	log@exponent^(0+256),w
 12819  1FDB  0021               	movlb	1	; select bank1
 12820  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 12821  1FDD  31AF  2767  319F   	fcall	___awtoft
 12822  1FE0  0021               	movlb	1	; select bank1
 12823  1FE1  0828               	movf	?___awtoft^(0+128),w
 12824  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 12825  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 12826  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12827  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 12828  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12829  1FE7  3187  2740  319F   	fcall	___ftmul
 12830  1FEA  0021               	movlb	1	; select bank1
 12831  1FEB  082E               	movf	?___ftmul^(0+128),w
 12832  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 12833  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 12834  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12835  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 12836  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12837  1FF1  3190  201F         	fcall	___ftadd
 12838  1FF3  0021               	movlb	1	; select bank1
 12839  1FF4  0841               	movf	?___ftadd^(0+128),w
 12840  1FF5  0022               	movlb	2	; select bank2
 12841  1FF6  00BE               	movwf	?_log^(0+256)
 12842  1FF7  0021               	movlb	1	; select bank1
 12843  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 12844  1FF9  0022               	movlb	2	; select bank2
 12845  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 12846  1FFB  0021               	movlb	1	; select bank1
 12847  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 12848  1FFD  0022               	movlb	2	; select bank2
 12849  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 12850  1FFF  0008               	return
 12851  2000                     __end_of_log:	
 12852                           
 12853                           	psect	text29
 12854  1351                     __ptext29:	
 12855 ;; *************** function _exp *****************
 12856 ;; Defined at:
 12857 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;  x               3   40[BANK2 ] int 
 12860 ;; Auto vars:     Size  Location     Type
 12861 ;;  exponent        2   50[BANK2 ] int 
 12862 ;;  sign            1   52[BANK2 ] unsigned char 
 12863 ;; Return value:  Size  Location     Type
 12864 ;;                  3   40[BANK2 ] unsigned char 
 12865 ;; Registers used:
 12866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12867 ;; Tracked objects:
 12868 ;;		On entry : 0/0
 12869 ;;		On exit  : 0/0
 12870 ;;		Unchanged: 0/0
 12871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12872 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12873 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12874 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12875 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12876 ;;Total ram usage:       13 bytes
 12877 ;; Hardware stack levels used:    1
 12878 ;; Hardware stack levels required when called:    6
 12879 ;; This function calls:
 12880 ;;		___awtoft
 12881 ;;		___ftdiv
 12882 ;;		___ftge
 12883 ;;		___ftmul
 12884 ;;		___ftneg
 12885 ;;		___ftsub
 12886 ;;		___fttol
 12887 ;;		_eval_poly
 12888 ;;		_floor
 12889 ;;		_ldexp
 12890 ;; This function is called by:
 12891 ;;		_pow
 12892 ;; This function uses a non-reentrant model
 12893 ;;
 12894                           
 12895                           
 12896                           ;psect for function _exp
 12897  1351                     _exp:	
 12898                           
 12899                           ;incstack = 0
 12900                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12901  1351  0022               	movlb	2	; select bank2
 12902  1352  084A               	movf	(exp@x+2)^(0+256),w
 12903  1353  0449               	iorwf	(exp@x+1)^(0+256),w
 12904  1354  0448               	iorwf	exp@x^(0+256),w
 12905  1355  1D03               	skipz
 12906  1356  2B5E               	goto	l8242
 12907  1357  3000               	movlw	0
 12908  1358  00C8               	movwf	?_exp^(0+256)
 12909  1359  3080               	movlw	128
 12910  135A  00C9               	movwf	(?_exp+1)^(0+256)
 12911  135B  303F               	movlw	63
 12912  135C  00CA               	movwf	(?_exp+2)^(0+256)
 12913  135D  0008               	return
 12914  135E                     l8242:	
 12915  135E  3072               	movlw	114
 12916  135F  0021               	movlb	1	; select bank1
 12917  1360  00A0               	movwf	___ftge@ff1^(0+128)
 12918  1361  3031               	movlw	49
 12919  1362  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12920  1363  3044               	movlw	68
 12921  1364  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12922  1365  0022               	movlb	2	; select bank2
 12923  1366  0848               	movf	exp@x^(0+256),w
 12924  1367  0021               	movlb	1	; select bank1
 12925  1368  00A3               	movwf	___ftge@ff2^(0+128)
 12926  1369  0022               	movlb	2	; select bank2
 12927  136A  0849               	movf	(exp@x+1)^(0+256),w
 12928  136B  0021               	movlb	1	; select bank1
 12929  136C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12930  136D  0022               	movlb	2	; select bank2
 12931  136E  084A               	movf	(exp@x+2)^(0+256),w
 12932  136F  0021               	movlb	1	; select bank1
 12933  1370  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12934  1371  31A2  2200  3193   	fcall	___ftge
 12935  1374  1803               	btfsc	3,0
 12936  1375  2B83               	goto	l8252
 12937  1376  3022               	movlw	34
 12938  1377  0024               	movlb	4	; select bank4
 12939  1378  00CD               	movwf	_errno^(0+512)
 12940  1379  3000               	movlw	0
 12941  137A  00CE               	movwf	(_errno^(0+512)+1)
 12942  137B  30FF               	movlw	255
 12943  137C  0022               	movlb	2	; select bank2
 12944  137D  00C8               	movwf	?_exp^(0+256)
 12945  137E  307F               	movlw	127
 12946  137F  00C9               	movwf	(?_exp+1)^(0+256)
 12947  1380  307F               	movlw	127
 12948  1381  00CA               	movwf	(?_exp+2)^(0+256)
 12949  1382  0008               	return
 12950  1383                     l8252:	
 12951  1383  0022               	movlb	2	; select bank2
 12952  1384  0848               	movf	exp@x^(0+256),w
 12953  1385  0021               	movlb	1	; select bank1
 12954  1386  00A0               	movwf	___ftge@ff1^(0+128)
 12955  1387  0022               	movlb	2	; select bank2
 12956  1388  0849               	movf	(exp@x+1)^(0+256),w
 12957  1389  0021               	movlb	1	; select bank1
 12958  138A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12959  138B  0022               	movlb	2	; select bank2
 12960  138C  084A               	movf	(exp@x+2)^(0+256),w
 12961  138D  0021               	movlb	1	; select bank1
 12962  138E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12963  138F  3049               	movlw	73
 12964  1390  00A3               	movwf	___ftge@ff2^(0+128)
 12965  1391  303A               	movlw	58
 12966  1392  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12967  1393  30C4               	movlw	196
 12968  1394  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12969  1395  31A2  2200  3193   	fcall	___ftge
 12970  1398  1803               	btfsc	3,0
 12971  1399  2BA7               	goto	l8258
 12972  139A  3022               	movlw	34
 12973  139B  0024               	movlb	4	; select bank4
 12974  139C  00CD               	movwf	_errno^(0+512)
 12975  139D  3000               	movlw	0
 12976  139E  00CE               	movwf	(_errno^(0+512)+1)
 12977  139F  3000               	movlw	0
 12978  13A0  0022               	movlb	2	; select bank2
 12979  13A1  00C8               	movwf	?_exp^(0+256)
 12980  13A2  3000               	movlw	0
 12981  13A3  00C9               	movwf	(?_exp+1)^(0+256)
 12982  13A4  3000               	movlw	0
 12983  13A5  00CA               	movwf	(?_exp+2)^(0+256)
 12984  13A6  0008               	return
 12985  13A7                     l8258:	
 12986  13A7  0022               	movlb	2	; select bank2
 12987  13A8  0848               	movf	exp@x^(0+256),w
 12988  13A9  0021               	movlb	1	; select bank1
 12989  13AA  00A0               	movwf	___ftge@ff1^(0+128)
 12990  13AB  0022               	movlb	2	; select bank2
 12991  13AC  0849               	movf	(exp@x+1)^(0+256),w
 12992  13AD  0021               	movlb	1	; select bank1
 12993  13AE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12994  13AF  0022               	movlb	2	; select bank2
 12995  13B0  084A               	movf	(exp@x+2)^(0+256),w
 12996  13B1  0021               	movlb	1	; select bank1
 12997  13B2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12998  13B3  3000               	movlw	0
 12999  13B4  00A3               	movwf	___ftge@ff2^(0+128)
 13000  13B5  3000               	movlw	0
 13001  13B6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13002  13B7  3000               	movlw	0
 13003  13B8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13004  13B9  31A2  2200  3193   	fcall	___ftge
 13005  13BC  1803               	btfsc	3,0
 13006  13BD  2BC0               	goto	u8690
 13007  13BE  3001               	movlw	1
 13008  13BF  2BC1               	goto	u8700
 13009  13C0                     u8690:	
 13010  13C0  3000               	movlw	0
 13011  13C1                     u8700:	
 13012  13C1  0022               	movlb	2	; select bank2
 13013  13C2  00CB               	movwf	??_exp^(0+256)
 13014  13C3  084B               	movf	??_exp^(0+256),w
 13015  13C4  00D4               	movwf	exp@sign^(0+256)
 13016  13C5  0854               	movf	exp@sign^(0+256),w
 13017  13C6  1903               	btfsc	3,2
 13018  13C7  2BE2               	goto	l8264
 13019  13C8  0848               	movf	exp@x^(0+256),w
 13020  13C9  0021               	movlb	1	; select bank1
 13021  13CA  00BE               	movwf	___ftneg@f1^(0+128)
 13022  13CB  0022               	movlb	2	; select bank2
 13023  13CC  0849               	movf	(exp@x+1)^(0+256),w
 13024  13CD  0021               	movlb	1	; select bank1
 13025  13CE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13026  13CF  0022               	movlb	2	; select bank2
 13027  13D0  084A               	movf	(exp@x+2)^(0+256),w
 13028  13D1  0021               	movlb	1	; select bank1
 13029  13D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13030  13D3  31AE  261F  3193   	fcall	___ftneg
 13031  13D6  0021               	movlb	1	; select bank1
 13032  13D7  083E               	movf	?___ftneg^(0+128),w
 13033  13D8  0022               	movlb	2	; select bank2
 13034  13D9  00C8               	movwf	exp@x^(0+256)
 13035  13DA  0021               	movlb	1	; select bank1
 13036  13DB  083F               	movf	(?___ftneg+1)^(0+128),w
 13037  13DC  0022               	movlb	2	; select bank2
 13038  13DD  00C9               	movwf	(exp@x+1)^(0+256)
 13039  13DE  0021               	movlb	1	; select bank1
 13040  13DF  0840               	movf	(?___ftneg+2)^(0+128),w
 13041  13E0  0022               	movlb	2	; select bank2
 13042  13E1  00CA               	movwf	(exp@x+2)^(0+256)
 13043  13E2                     l8264:	
 13044  13E2  30AA               	movlw	170
 13045  13E3  0021               	movlb	1	; select bank1
 13046  13E4  00AE               	movwf	___ftmul@f1^(0+128)
 13047  13E5  30B8               	movlw	184
 13048  13E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13049  13E7  303F               	movlw	63
 13050  13E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13051  13E9  0022               	movlb	2	; select bank2
 13052  13EA  0848               	movf	exp@x^(0+256),w
 13053  13EB  0021               	movlb	1	; select bank1
 13054  13EC  00B1               	movwf	___ftmul@f2^(0+128)
 13055  13ED  0022               	movlb	2	; select bank2
 13056  13EE  0849               	movf	(exp@x+1)^(0+256),w
 13057  13EF  0021               	movlb	1	; select bank1
 13058  13F0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13059  13F1  0022               	movlb	2	; select bank2
 13060  13F2  084A               	movf	(exp@x+2)^(0+256),w
 13061  13F3  0021               	movlb	1	; select bank1
 13062  13F4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13063  13F5  3187  2740  3193   	fcall	___ftmul
 13064  13F8  0021               	movlb	1	; select bank1
 13065  13F9  082E               	movf	?___ftmul^(0+128),w
 13066  13FA  0022               	movlb	2	; select bank2
 13067  13FB  00C8               	movwf	exp@x^(0+256)
 13068  13FC  0021               	movlb	1	; select bank1
 13069  13FD  082F               	movf	(?___ftmul+1)^(0+128),w
 13070  13FE  0022               	movlb	2	; select bank2
 13071  13FF  00C9               	movwf	(exp@x+1)^(0+256)
 13072  1400  0021               	movlb	1	; select bank1
 13073  1401  0830               	movf	(?___ftmul+2)^(0+128),w
 13074  1402  0022               	movlb	2	; select bank2
 13075  1403  00CA               	movwf	(exp@x+2)^(0+256)
 13076  1404  0848               	movf	exp@x^(0+256),w
 13077  1405  00AE               	movwf	floor@x^(0+256)
 13078  1406  0849               	movf	(exp@x+1)^(0+256),w
 13079  1407  00AF               	movwf	(floor@x+1)^(0+256)
 13080  1408  084A               	movf	(exp@x+2)^(0+256),w
 13081  1409  00B0               	movwf	(floor@x+2)^(0+256)
 13082  140A  319E  267C  3193   	fcall	_floor
 13083  140D  0022               	movlb	2	; select bank2
 13084  140E  082E               	movf	?_floor^(0+256),w
 13085  140F  00CC               	movwf	_exp$2854^(0+256)
 13086  1410  082F               	movf	(?_floor+1)^(0+256),w
 13087  1411  00CD               	movwf	(_exp$2854+1)^(0+256)
 13088  1412  0830               	movf	(?_floor+2)^(0+256),w
 13089  1413  00CE               	movwf	(_exp$2854+2)^(0+256)
 13090  1414  084C               	movf	_exp$2854^(0+256),w
 13091  1415  00A0               	movwf	___fttol@f1^(0+256)
 13092  1416  084D               	movf	(_exp$2854+1)^(0+256),w
 13093  1417  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13094  1418  084E               	movf	(_exp$2854+2)^(0+256),w
 13095  1419  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13096  141A  319A  2263  3193   	fcall	___fttol
 13097  141D  0022               	movlb	2	; select bank2
 13098  141E  0821               	movf	(?___fttol^(0+256)+1),w
 13099  141F  00D3               	movwf	(exp@exponent+1)^(0+256)
 13100  1420  0820               	movf	?___fttol^(0+256),w
 13101  1421  00D2               	movwf	exp@exponent^(0+256)
 13102  1422  0853               	movf	(exp@exponent+1)^(0+256),w
 13103  1423  0021               	movlb	1	; select bank1
 13104  1424  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13105  1425  0022               	movlb	2	; select bank2
 13106  1426  0852               	movf	exp@exponent^(0+256),w
 13107  1427  0021               	movlb	1	; select bank1
 13108  1428  00A8               	movwf	___awtoft@c^(0+128)
 13109  1429  31AF  2767  3193   	fcall	___awtoft
 13110  142C  0021               	movlb	1	; select bank1
 13111  142D  0828               	movf	?___awtoft^(0+128),w
 13112  142E  0022               	movlb	2	; select bank2
 13113  142F  00B7               	movwf	___ftsub@f2^(0+256)
 13114  1430  0021               	movlb	1	; select bank1
 13115  1431  0829               	movf	(?___awtoft+1)^(0+128),w
 13116  1432  0022               	movlb	2	; select bank2
 13117  1433  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 13118  1434  0021               	movlb	1	; select bank1
 13119  1435  082A               	movf	(?___awtoft+2)^(0+128),w
 13120  1436  0022               	movlb	2	; select bank2
 13121  1437  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 13122  1438  0848               	movf	exp@x^(0+256),w
 13123  1439  00BA               	movwf	___ftsub@f1^(0+256)
 13124  143A  0849               	movf	(exp@x+1)^(0+256),w
 13125  143B  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 13126  143C  084A               	movf	(exp@x+2)^(0+256),w
 13127  143D  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 13128  143E  31AF  27D2  3193   	fcall	___ftsub
 13129  1441  0022               	movlb	2	; select bank2
 13130  1442  0837               	movf	?___ftsub^(0+256),w
 13131  1443  00C8               	movwf	exp@x^(0+256)
 13132  1444  0838               	movf	(?___ftsub+1)^(0+256),w
 13133  1445  00C9               	movwf	(exp@x+1)^(0+256)
 13134  1446  0839               	movf	(?___ftsub+2)^(0+256),w
 13135  1447  00CA               	movwf	(exp@x+2)^(0+256)
 13136  1448  0848               	movf	exp@x^(0+256),w
 13137  1449  00B4               	movwf	eval_poly@x^(0+256)
 13138  144A  0849               	movf	(exp@x+1)^(0+256),w
 13139  144B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13140  144C  084A               	movf	(exp@x+2)^(0+256),w
 13141  144D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13142  144E  3000               	movlw	low (exp@coeff| (0+32768))
 13143  144F  00B7               	movwf	eval_poly@d^(0+256)
 13144  1450  30A8               	movlw	high (exp@coeff| (0+32768))
 13145  1451  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13146  1452  3009               	movlw	9
 13147  1453  00B9               	movwf	eval_poly@n^(0+256)
 13148  1454  3000               	movlw	0
 13149  1455  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13150  1456  31A7  2718  3193   	fcall	_eval_poly
 13151  1459  0022               	movlb	2	; select bank2
 13152  145A  0834               	movf	?_eval_poly^(0+256),w
 13153  145B  00BE               	movwf	ldexp@value^(0+256)
 13154  145C  0835               	movf	(?_eval_poly+1)^(0+256),w
 13155  145D  00BF               	movwf	(ldexp@value+1)^(0+256)
 13156  145E  0836               	movf	(?_eval_poly+2)^(0+256),w
 13157  145F  00C0               	movwf	(ldexp@value+2)^(0+256)
 13158  1460  0853               	movf	(exp@exponent+1)^(0+256),w
 13159  1461  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13160  1462  0852               	movf	exp@exponent^(0+256),w
 13161  1463  00C1               	movwf	ldexp@newexp^(0+256)
 13162  1464  319C  2491  3193   	fcall	_ldexp
 13163  1467  0022               	movlb	2	; select bank2
 13164  1468  083E               	movf	?_ldexp^(0+256),w
 13165  1469  00C8               	movwf	exp@x^(0+256)
 13166  146A  083F               	movf	(?_ldexp+1)^(0+256),w
 13167  146B  00C9               	movwf	(exp@x+1)^(0+256)
 13168  146C  0840               	movf	(?_ldexp+2)^(0+256),w
 13169  146D  00CA               	movwf	(exp@x+2)^(0+256)
 13170  146E  0854               	movf	exp@sign^(0+256),w
 13171  146F  1903               	btfsc	3,2
 13172  1470  0008               	return
 13173  1471  30FF               	movlw	255
 13174  1472  00CF               	movwf	_exp$2605^(0+256)
 13175  1473  307F               	movlw	127
 13176  1474  00D0               	movwf	(_exp$2605+1)^(0+256)
 13177  1475  307F               	movlw	127
 13178  1476  00D1               	movwf	(_exp$2605+2)^(0+256)
 13179  1477  084A               	movf	(exp@x+2)^(0+256),w
 13180  1478  0651               	xorwf	(_exp$2605+2)^(0+256),w
 13181  1479  1D03               	skipz
 13182  147A  2C81               	goto	u8735
 13183  147B  0849               	movf	(exp@x+1)^(0+256),w
 13184  147C  0650               	xorwf	(_exp$2605+1)^(0+256),w
 13185  147D  1D03               	skipz
 13186  147E  2C81               	goto	u8735
 13187  147F  0848               	movf	exp@x^(0+256),w
 13188  1480  064F               	xorwf	_exp$2605^(0+256),w
 13189  1481                     u8735:	
 13190  1481  1D03               	skipz
 13191  1482  2C8A               	goto	l8286
 13192  1483  3000               	movlw	0
 13193  1484  00C8               	movwf	?_exp^(0+256)
 13194  1485  3000               	movlw	0
 13195  1486  00C9               	movwf	(?_exp+1)^(0+256)
 13196  1487  3000               	movlw	0
 13197  1488  00CA               	movwf	(?_exp+2)^(0+256)
 13198  1489  0008               	return
 13199  148A                     l8286:	
 13200  148A  0848               	movf	exp@x^(0+256),w
 13201  148B  0021               	movlb	1	; select bank1
 13202  148C  00CE               	movwf	___ftdiv@f2^(0+128)
 13203  148D  0022               	movlb	2	; select bank2
 13204  148E  0849               	movf	(exp@x+1)^(0+256),w
 13205  148F  0021               	movlb	1	; select bank1
 13206  1490  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13207  1491  0022               	movlb	2	; select bank2
 13208  1492  084A               	movf	(exp@x+2)^(0+256),w
 13209  1493  0021               	movlb	1	; select bank1
 13210  1494  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13211  1495  3000               	movlw	0
 13212  1496  00D1               	movwf	___ftdiv@f1^(0+128)
 13213  1497  3080               	movlw	128
 13214  1498  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13215  1499  303F               	movlw	63
 13216  149A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13217  149B  319D  2528         	fcall	___ftdiv
 13218  149D  0021               	movlb	1	; select bank1
 13219  149E  084E               	movf	?___ftdiv^(0+128),w
 13220  149F  0022               	movlb	2	; select bank2
 13221  14A0  00C8               	movwf	?_exp^(0+256)
 13222  14A1  0021               	movlb	1	; select bank1
 13223  14A2  084F               	movf	(?___ftdiv+1)^(0+128),w
 13224  14A3  0022               	movlb	2	; select bank2
 13225  14A4  00C9               	movwf	(?_exp+1)^(0+256)
 13226  14A5  0021               	movlb	1	; select bank1
 13227  14A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 13228  14A7  0022               	movlb	2	; select bank2
 13229  14A8  00CA               	movwf	(?_exp+2)^(0+256)
 13230  14A9  0008               	return
 13231  14AA                     __end_of_exp:	
 13232                           
 13233                           	psect	text30
 13234  1C91                     __ptext30:	
 13235 ;; *************** function _ldexp *****************
 13236 ;; Defined at:
 13237 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13238 ;; Parameters:    Size  Location     Type
 13239 ;;  value           3   30[BANK2 ] unsigned char 
 13240 ;;  newexp          2   33[BANK2 ] int 
 13241 ;; Auto vars:     Size  Location     Type
 13242 ;;		None
 13243 ;; Return value:  Size  Location     Type
 13244 ;;                  3   30[BANK2 ] int 
 13245 ;; Registers used:
 13246 ;;		wreg, status,2, status,0, pclath, cstack
 13247 ;; Tracked objects:
 13248 ;;		On entry : 0/0
 13249 ;;		On exit  : 0/0
 13250 ;;		Unchanged: 0/0
 13251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13252 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13253 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13254 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13255 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13256 ;;Total ram usage:       10 bytes
 13257 ;; Hardware stack levels used:    1
 13258 ;; Hardware stack levels required when called:    4
 13259 ;; This function calls:
 13260 ;;		___ftge
 13261 ;;		___ftneg
 13262 ;; This function is called by:
 13263 ;;		_exp
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           
 13268                           ;psect for function _ldexp
 13269  1C91                     _ldexp:	
 13270                           
 13271                           ;incstack = 0
 13272                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13273  1C91  0022               	movlb	2	; select bank2
 13274  1C92  0840               	movf	(ldexp@value+2)^(0+256),w
 13275  1C93  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13276  1C94  043E               	iorwf	ldexp@value^(0+256),w
 13277  1C95  1D03               	skipz
 13278  1C96  2C9E               	goto	l8090
 13279  1C97  3000               	movlw	0
 13280  1C98  00BE               	movwf	?_ldexp^(0+256)
 13281  1C99  3000               	movlw	0
 13282  1C9A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13283  1C9B  3000               	movlw	0
 13284  1C9C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13285  1C9D  0008               	return
 13286  1C9E                     l8090:	
 13287  1C9E  0840               	movf	(ldexp@value^(0+256)+2),w
 13288  1C9F  397F               	andlw	127
 13289  1CA0  00C3               	movwf	??_ldexp^(0+256)
 13290  1CA1  01C4               	clrf	(??_ldexp^(0+256)+1)
 13291  1CA2  35C3               	lslf	??_ldexp^(0+256),f
 13292  1CA3  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13293  1CA4  0843               	movf	??_ldexp^(0+256),w
 13294  1CA5  07C1               	addwf	ldexp@newexp^(0+256),f
 13295  1CA6  0844               	movf	(??_ldexp+1)^(0+256),w
 13296  1CA7  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13297  1CA8  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13298  1CA9  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13299  1CAA  3901               	andlw	1
 13300  1CAB  00C3               	movwf	??_ldexp^(0+256)
 13301  1CAC  01C4               	clrf	(??_ldexp^(0+256)+1)
 13302  1CAD  0843               	movf	??_ldexp^(0+256),w
 13303  1CAE  07C1               	addwf	ldexp@newexp^(0+256),f
 13304  1CAF  0844               	movf	(??_ldexp+1)^(0+256),w
 13305  1CB0  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13306  1CB1  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13307  1CB2  2CC0               	goto	l8100
 13308  1CB3  3022               	movlw	34
 13309  1CB4  0024               	movlb	4	; select bank4
 13310  1CB5  00CD               	movwf	_errno^(0+512)
 13311  1CB6  3000               	movlw	0
 13312  1CB7  00CE               	movwf	(_errno^(0+512)+1)
 13313  1CB8  3000               	movlw	0
 13314  1CB9  0022               	movlb	2	; select bank2
 13315  1CBA  00BE               	movwf	?_ldexp^(0+256)
 13316  1CBB  3000               	movlw	0
 13317  1CBC  00BF               	movwf	(?_ldexp+1)^(0+256)
 13318  1CBD  3000               	movlw	0
 13319  1CBE  00C0               	movwf	(?_ldexp+2)^(0+256)
 13320  1CBF  0008               	return
 13321  1CC0                     l8100:	
 13322  1CC0  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13323  1CC1  3A80               	xorlw	128
 13324  1CC2  00C3               	movwf	??_ldexp^(0+256)
 13325  1CC3  3081               	movlw	129
 13326  1CC4  0243               	subwf	??_ldexp^(0+256),w
 13327  1CC5  1D03               	skipz
 13328  1CC6  2CC9               	goto	u8565
 13329  1CC7  3000               	movlw	0
 13330  1CC8  0241               	subwf	ldexp@newexp^(0+256),w
 13331  1CC9                     u8565:	
 13332  1CC9  1C03               	skipc
 13333  1CCA  2D10               	goto	l8124
 13334  1CCB  3022               	movlw	34
 13335  1CCC  0024               	movlb	4	; select bank4
 13336  1CCD  00CD               	movwf	_errno^(0+512)
 13337  1CCE  3000               	movlw	0
 13338  1CCF  00CE               	movwf	(_errno^(0+512)+1)
 13339  1CD0  0022               	movlb	2	; select bank2
 13340  1CD1  083E               	movf	ldexp@value^(0+256),w
 13341  1CD2  0021               	movlb	1	; select bank1
 13342  1CD3  00A0               	movwf	___ftge@ff1^(0+128)
 13343  1CD4  0022               	movlb	2	; select bank2
 13344  1CD5  083F               	movf	(ldexp@value+1)^(0+256),w
 13345  1CD6  0021               	movlb	1	; select bank1
 13346  1CD7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13347  1CD8  0022               	movlb	2	; select bank2
 13348  1CD9  0840               	movf	(ldexp@value+2)^(0+256),w
 13349  1CDA  0021               	movlb	1	; select bank1
 13350  1CDB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13351  1CDC  3000               	movlw	0
 13352  1CDD  00A3               	movwf	___ftge@ff2^(0+128)
 13353  1CDE  3000               	movlw	0
 13354  1CDF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13355  1CE0  3000               	movlw	0
 13356  1CE1  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13357  1CE2  31A2  2200  319C   	fcall	___ftge
 13358  1CE5  1803               	btfsc	3,0
 13359  1CE6  2D08               	goto	l8120
 13360  1CE7  30FF               	movlw	255
 13361  1CE8  0022               	movlb	2	; select bank2
 13362  1CE9  00C5               	movwf	_ldexp$2642^(0+256)
 13363  1CEA  307F               	movlw	127
 13364  1CEB  00C6               	movwf	(_ldexp$2642+1)^(0+256)
 13365  1CEC  307F               	movlw	127
 13366  1CED  00C7               	movwf	(_ldexp$2642+2)^(0+256)
 13367  1CEE  0845               	movf	_ldexp$2642^(0+256),w
 13368  1CEF  0021               	movlb	1	; select bank1
 13369  1CF0  00BE               	movwf	___ftneg@f1^(0+128)
 13370  1CF1  0022               	movlb	2	; select bank2
 13371  1CF2  0846               	movf	(_ldexp$2642+1)^(0+256),w
 13372  1CF3  0021               	movlb	1	; select bank1
 13373  1CF4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13374  1CF5  0022               	movlb	2	; select bank2
 13375  1CF6  0847               	movf	(_ldexp$2642+2)^(0+256),w
 13376  1CF7  0021               	movlb	1	; select bank1
 13377  1CF8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13378  1CF9  31AE  261F         	fcall	___ftneg
 13379  1CFB  0021               	movlb	1	; select bank1
 13380  1CFC  083E               	movf	?___ftneg^(0+128),w
 13381  1CFD  0022               	movlb	2	; select bank2
 13382  1CFE  00BE               	movwf	?_ldexp^(0+256)
 13383  1CFF  0021               	movlb	1	; select bank1
 13384  1D00  083F               	movf	(?___ftneg+1)^(0+128),w
 13385  1D01  0022               	movlb	2	; select bank2
 13386  1D02  00BF               	movwf	(?_ldexp+1)^(0+256)
 13387  1D03  0021               	movlb	1	; select bank1
 13388  1D04  0840               	movf	(?___ftneg+2)^(0+128),w
 13389  1D05  0022               	movlb	2	; select bank2
 13390  1D06  00C0               	movwf	(?_ldexp+2)^(0+256)
 13391  1D07  0008               	return
 13392  1D08                     l8120:	
 13393  1D08  30FF               	movlw	255
 13394  1D09  0022               	movlb	2	; select bank2
 13395  1D0A  00BE               	movwf	?_ldexp^(0+256)
 13396  1D0B  307F               	movlw	127
 13397  1D0C  00BF               	movwf	(?_ldexp+1)^(0+256)
 13398  1D0D  307F               	movlw	127
 13399  1D0E  00C0               	movwf	(?_ldexp+2)^(0+256)
 13400  1D0F  0008               	return
 13401  1D10                     l8124:	
 13402  1D10  0022               	movlb	2	; select bank2
 13403  1D11  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13404  1D12  00C4               	movwf	(??_ldexp^(0+256)+1)
 13405  1D13  0841               	movf	ldexp@newexp^(0+256),w
 13406  1D14  00C3               	movwf	??_ldexp^(0+256)
 13407  1D15  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13408  1D16  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13409  1D17  0CC3               	rrf	??_ldexp^(0+256),f
 13410  1D18  0840               	movf	(ldexp@value^(0+256)+2),w
 13411  1D19  0643               	xorwf	??_ldexp^(0+256),w
 13412  1D1A  3980               	andlw	-128
 13413  1D1B  0643               	xorwf	??_ldexp^(0+256),w
 13414  1D1C  00C0               	movwf	(ldexp@value^(0+256)+2)
 13415  1D1D  0841               	movf	ldexp@newexp^(0+256),w
 13416  1D1E  3901               	andlw	1
 13417  1D1F  00C3               	movwf	??_ldexp^(0+256)
 13418  1D20  0CC3               	rrf	??_ldexp^(0+256),f
 13419  1D21  0CC3               	rrf	??_ldexp^(0+256),f
 13420  1D22  083F               	movf	(ldexp@value^(0+256)+1),w
 13421  1D23  0643               	xorwf	??_ldexp^(0+256),w
 13422  1D24  397F               	andlw	-129
 13423  1D25  0643               	xorwf	??_ldexp^(0+256),w
 13424  1D26  00BF               	movwf	(ldexp@value^(0+256)+1)
 13425  1D27  0008               	return
 13426  1D28                     __end_of_ldexp:	
 13427                           
 13428                           	psect	text31
 13429  2002                     __ptext31:	
 13430 ;; *************** function ___lltoft *****************
 13431 ;; Defined at:
 13432 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13433 ;; Parameters:    Size  Location     Type
 13434 ;;  c               4    8[BANK1 ] unsigned long 
 13435 ;; Auto vars:     Size  Location     Type
 13436 ;;  exp             1   13[BANK1 ] unsigned char 
 13437 ;; Return value:  Size  Location     Type
 13438 ;;                  3    8[BANK1 ] float 
 13439 ;; Registers used:
 13440 ;;		wreg, status,2, status,0, pclath, cstack
 13441 ;; Tracked objects:
 13442 ;;		On entry : 0/0
 13443 ;;		On exit  : 0/0
 13444 ;;		Unchanged: 0/0
 13445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13446 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13447 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13448 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13449 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13450 ;;Total ram usage:        6 bytes
 13451 ;; Hardware stack levels used:    1
 13452 ;; Hardware stack levels required when called:    4
 13453 ;; This function calls:
 13454 ;;		___ftpack
 13455 ;; This function is called by:
 13456 ;;		_pow
 13457 ;; This function uses a non-reentrant model
 13458 ;;
 13459                           
 13460                           
 13461                           ;psect for function ___lltoft
 13462  2002                     ___lltoft:	
 13463                           
 13464                           ;incstack = 0
 13465                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13466  2002  308E               	movlw	142
 13467  2003  0021               	movlb	1	; select bank1
 13468  2004  00AC               	movwf	??___lltoft^(0+128)
 13469  2005  082C               	movf	??___lltoft^(0+128),w
 13470  2006  00AD               	movwf	___lltoft@exp^(0+128)
 13471  2007                     l8208:	
 13472  2007  30FF               	movlw	255
 13473  2008  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13474  2009  1903               	btfsc	3,2
 13475  200A  2817               	goto	l8210
 13476  200B  3001               	movlw	1
 13477  200C                     u8625:	
 13478  200C  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13479  200D  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13480  200E  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13481  200F  0CA8               	rrf	___lltoft@c^(0+128),f
 13482  2010  0B89               	decfsz	9,f
 13483  2011  280C               	goto	u8625
 13484  2012  3001               	movlw	1
 13485  2013  00AC               	movwf	??___lltoft^(0+128)
 13486  2014  082C               	movf	??___lltoft^(0+128),w
 13487  2015  07AD               	addwf	___lltoft@exp^(0+128),f
 13488  2016  2807               	goto	l8208
 13489  2017                     l8210:	
 13490  2017  0828               	movf	___lltoft@c^(0+128),w
 13491  2018  00A0               	movwf	___ftpack@arg^(0+128)
 13492  2019  0829               	movf	(___lltoft@c+1)^(0+128),w
 13493  201A  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13494  201B  082A               	movf	(___lltoft@c+2)^(0+128),w
 13495  201C  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13496  201D  082D               	movf	___lltoft@exp^(0+128),w
 13497  201E  00AC               	movwf	??___lltoft^(0+128)
 13498  201F  082C               	movf	??___lltoft^(0+128),w
 13499  2020  00A3               	movwf	___ftpack@exp^(0+128)
 13500  2021  01A4               	clrf	___ftpack@sign^(0+128)
 13501  2022  31A6  26B3         	fcall	___ftpack
 13502  2024  0021               	movlb	1	; select bank1
 13503  2025  0820               	movf	?___ftpack^(0+128),w
 13504  2026  00A8               	movwf	?___lltoft^(0+128)
 13505  2027  0821               	movf	(?___ftpack+1)^(0+128),w
 13506  2028  00A9               	movwf	(?___lltoft+1)^(0+128)
 13507  2029  0822               	movf	(?___ftpack+2)^(0+128),w
 13508  202A  00AA               	movwf	(?___lltoft+2)^(0+128)
 13509  202B  0008               	return
 13510  202C                     __end_of___lltoft:	
 13511                           
 13512                           	psect	text32
 13513  24CB                     __ptext32:	
 13514 ;; *************** function _read_top_tactile *****************
 13515 ;; Defined at:
 13516 ;;		line 50 in file "tactiles.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;		None
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;		None
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  1    wreg      void 
 13523 ;; Registers used:
 13524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13525 ;; Tracked objects:
 13526 ;;		On entry : 0/0
 13527 ;;		On exit  : 0/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13532 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13533 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13534 ;;Total ram usage:        1 bytes
 13535 ;; Hardware stack levels used:    1
 13536 ;; Hardware stack levels required when called:    5
 13537 ;; This function calls:
 13538 ;;		_set_leds_top
 13539 ;;		_wait_ms
 13540 ;; This function is called by:
 13541 ;;		_main
 13542 ;; This function uses a non-reentrant model
 13543 ;;
 13544                           
 13545                           
 13546                           ;psect for function _read_top_tactile
 13547  24CB                     _read_top_tactile:	
 13548                           
 13549                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13550                           
 13551                           ;incstack = 0
 13552                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13553  24CB  0020               	movlb	0	; select bank0
 13554  24CC  1A8F               	btfsc	15,5	;volatile
 13555  24CD  2CD5               	goto	l9052
 13556                           
 13557                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13558  24CE  0023               	movlb	3	; select bank3
 13559  24CF  0846               	movf	_topTactile_pressed^(0+384),w
 13560  24D0  1903               	btfsc	3,2
 13561  24D1  2CE0               	goto	l975
 13562                           
 13563                           ;tactiles.c: 62: topTactile_pressed--;
 13564  24D2  3001               	movlw	1
 13565  24D3  02C6               	subwf	_topTactile_pressed^(0+384),f
 13566                           
 13567                           ;tactiles.c: 63: }
 13568                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13569  24D4  2CE0               	goto	l975
 13570  24D5                     l9052:	
 13571  24D5  3019               	movlw	25
 13572  24D6  0023               	movlb	3	; select bank3
 13573  24D7  0246               	subwf	_topTactile_pressed^(0+384),w
 13574  24D8  1803               	skipnc
 13575  24D9  2CE0               	goto	l975
 13576                           
 13577                           ;tactiles.c: 65: topTactile_pressed++;
 13578  24DA  3001               	movlw	1
 13579  24DB  0021               	movlb	1	; select bank1
 13580  24DC  00B2               	movwf	??_read_top_tactile^(0+128)
 13581  24DD  0832               	movf	??_read_top_tactile^(0+128),w
 13582  24DE  0023               	movlb	3	; select bank3
 13583  24DF  07C6               	addwf	_topTactile_pressed^(0+384),f
 13584  24E0                     l975:	
 13585                           
 13586                           ;tactiles.c: 66: }
 13587                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13588  24E0  0846               	movf	_topTactile_pressed^(0+384),w
 13589  24E1  1D03               	btfss	3,2
 13590  24E2  0008               	return
 13591                           
 13592                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13593  24E3  0020               	movlb	0	; select bank0
 13594  24E4  085A               	movf	_top_push_state,w
 13595  24E5  3E01               	addlw	1
 13596  24E6  00DA               	movwf	_top_push_state
 13597  24E7  3000               	movlw	0
 13598  24E8  3D5B               	addwfc	_top_push_state+1,w
 13599  24E9  00DB               	movwf	_top_push_state+1
 13600                           
 13601                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13602  24EA  085B               	movf	_top_push_state+1,w
 13603  24EB  3A80               	xorlw	128
 13604  24EC  0021               	movlb	1	; select bank1
 13605  24ED  00B2               	movwf	??_read_top_tactile^(0+128)
 13606  24EE  3080               	movlw	128
 13607  24EF  0232               	subwf	??_read_top_tactile^(0+128),w
 13608  24F0  1D03               	skipz
 13609  24F1  2CF5               	goto	u10065
 13610  24F2  3007               	movlw	7
 13611  24F3  0020               	movlb	0	; select bank0
 13612  24F4  025A               	subwf	_top_push_state,w
 13613  24F5                     u10065:	
 13614  24F5  1C03               	skipc
 13615  24F6  2CFC               	goto	l9062
 13616                           
 13617                           ;tactiles.c: 75: top_push_state = 1;
 13618  24F7  3001               	movlw	1
 13619  24F8  0020               	movlb	0	; select bank0
 13620  24F9  00DA               	movwf	_top_push_state
 13621  24FA  3000               	movlw	0
 13622  24FB  00DB               	movwf	_top_push_state+1
 13623  24FC                     l9062:	
 13624                           
 13625                           ;tactiles.c: 76: }
 13626                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13627  24FC  0020               	movlb	0	; select bank0
 13628  24FD  085B               	movf	_top_push_state+1,w
 13629  24FE  0021               	movlb	1	; select bank1
 13630  24FF  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13631  2500  0020               	movlb	0	; select bank0
 13632  2501  085A               	movf	_top_push_state,w
 13633  2502  0021               	movlb	1	; select bank1
 13634  2503  00A0               	movwf	set_leds_top@x^(0+128)
 13635  2504  3001               	movlw	1
 13636  2505  00A2               	movwf	set_leds_top@ledState^(0+128)
 13637  2506  3000               	movlw	0
 13638  2507  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13639  2508  31A6  265F  31A4   	fcall	_set_leds_top
 13640                           
 13641                           ;tactiles.c: 78: mod_time_changed = 1;
 13642  250B  0023               	movlb	3	; select bank3
 13643  250C  01E4               	clrf	_mod_time_changed^(0+384)
 13644  250D  0AE4               	incf	_mod_time_changed^(0+384),f
 13645  250E                     l979:	
 13646                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13647                           
 13648  250E  0020               	movlb	0	; select bank0
 13649  250F  1E8F               	btfss	15,5	;volatile
 13650  2510  2D0E               	goto	l979
 13651                           
 13652                           ;tactiles.c: 82: }
 13653                           ;tactiles.c: 83: wait_ms(20);
 13654  2511  3014               	movlw	20
 13655  2512  0021               	movlb	1	; select bank1
 13656  2513  00AC               	movwf	wait_ms@timeSec^(0+128)
 13657  2514  3000               	movlw	0
 13658  2515  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13659  2516  31A0  20EB         	fcall	_wait_ms
 13660  2518  0008               	return
 13661  2519                     __end_of_read_top_tactile:	
 13662                           
 13663                           	psect	text33
 13664  2481                     __ptext33:	
 13665 ;; *************** function _read_bottom_tactile *****************
 13666 ;; Defined at:
 13667 ;;		line 18 in file "tactiles.c"
 13668 ;; Parameters:    Size  Location     Type
 13669 ;;		None
 13670 ;; Auto vars:     Size  Location     Type
 13671 ;;		None
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  1    wreg      void 
 13674 ;; Registers used:
 13675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13683 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13684 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13685 ;;Total ram usage:        1 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; Hardware stack levels required when called:    5
 13688 ;; This function calls:
 13689 ;;		_set_leds_bottom
 13690 ;;		_wait_ms
 13691 ;; This function is called by:
 13692 ;;		_main
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           
 13697                           ;psect for function _read_bottom_tactile
 13698  2481                     _read_bottom_tactile:	
 13699                           
 13700                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13701                           
 13702                           ;incstack = 0
 13703                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13704  2481  0020               	movlb	0	; select bank0
 13705  2482  1B0F               	btfsc	15,6	;volatile
 13706  2483  2C8B               	goto	l9030
 13707                           
 13708                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13709  2484  0023               	movlb	3	; select bank3
 13710  2485  083B               	movf	_bottomTactile_pressed^(0+384),w
 13711  2486  1903               	btfsc	3,2
 13712  2487  2C96               	goto	l963
 13713                           
 13714                           ;tactiles.c: 29: bottomTactile_pressed--;
 13715  2488  3001               	movlw	1
 13716  2489  02BB               	subwf	_bottomTactile_pressed^(0+384),f
 13717                           
 13718                           ;tactiles.c: 30: }
 13719                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13720  248A  2C96               	goto	l963
 13721  248B                     l9030:	
 13722  248B  3019               	movlw	25
 13723  248C  0023               	movlb	3	; select bank3
 13724  248D  023B               	subwf	_bottomTactile_pressed^(0+384),w
 13725  248E  1803               	skipnc
 13726  248F  2C96               	goto	l963
 13727                           
 13728                           ;tactiles.c: 32: bottomTactile_pressed++;
 13729  2490  3001               	movlw	1
 13730  2491  0021               	movlb	1	; select bank1
 13731  2492  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13732  2493  0832               	movf	??_read_bottom_tactile^(0+128),w
 13733  2494  0023               	movlb	3	; select bank3
 13734  2495  07BB               	addwf	_bottomTactile_pressed^(0+384),f
 13735  2496                     l963:	
 13736                           
 13737                           ;tactiles.c: 33: }
 13738                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13739  2496  083B               	movf	_bottomTactile_pressed^(0+384),w
 13740  2497  1D03               	btfss	3,2
 13741  2498  0008               	return
 13742                           
 13743                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13744  2499  0020               	movlb	0	; select bank0
 13745  249A  0856               	movf	_bottom_push_state,w
 13746  249B  3E01               	addlw	1
 13747  249C  00D6               	movwf	_bottom_push_state
 13748  249D  3000               	movlw	0
 13749  249E  3D57               	addwfc	_bottom_push_state+1,w
 13750  249F  00D7               	movwf	_bottom_push_state+1
 13751                           
 13752                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13753  24A0  0857               	movf	_bottom_push_state+1,w
 13754  24A1  3A80               	xorlw	128
 13755  24A2  0021               	movlb	1	; select bank1
 13756  24A3  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13757  24A4  3080               	movlw	128
 13758  24A5  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13759  24A6  1D03               	skipz
 13760  24A7  2CAB               	goto	u10005
 13761  24A8  3006               	movlw	6
 13762  24A9  0020               	movlb	0	; select bank0
 13763  24AA  0256               	subwf	_bottom_push_state,w
 13764  24AB                     u10005:	
 13765  24AB  1C03               	skipc
 13766  24AC  2CB2               	goto	l9040
 13767                           
 13768                           ;tactiles.c: 39: bottom_push_state = 1;
 13769  24AD  3001               	movlw	1
 13770  24AE  0020               	movlb	0	; select bank0
 13771  24AF  00D6               	movwf	_bottom_push_state
 13772  24B0  3000               	movlw	0
 13773  24B1  00D7               	movwf	_bottom_push_state+1
 13774  24B2                     l9040:	
 13775                           
 13776                           ;tactiles.c: 40: }
 13777                           ;tactiles.c: 41: modulation_changed = 1;
 13778  24B2  0023               	movlb	3	; select bank3
 13779  24B3  01C2               	clrf	_modulation_changed^(0+384)
 13780  24B4  0AC2               	incf	_modulation_changed^(0+384),f
 13781                           
 13782                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13783  24B5  0020               	movlb	0	; select bank0
 13784  24B6  0857               	movf	_bottom_push_state+1,w
 13785  24B7  0021               	movlb	1	; select bank1
 13786  24B8  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13787  24B9  0020               	movlb	0	; select bank0
 13788  24BA  0856               	movf	_bottom_push_state,w
 13789  24BB  0021               	movlb	1	; select bank1
 13790  24BC  00A0               	movwf	set_leds_bottom@x^(0+128)
 13791  24BD  31A1  21C5  31A4   	fcall	_set_leds_bottom
 13792  24C0                     l967:	
 13793                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13794                           
 13795  24C0  0020               	movlb	0	; select bank0
 13796  24C1  1F0F               	btfss	15,6	;volatile
 13797  24C2  2CC0               	goto	l967
 13798                           
 13799                           ;tactiles.c: 45: }
 13800                           ;tactiles.c: 46: wait_ms(20);
 13801  24C3  3014               	movlw	20
 13802  24C4  0021               	movlb	1	; select bank1
 13803  24C5  00AC               	movwf	wait_ms@timeSec^(0+128)
 13804  24C6  3000               	movlw	0
 13805  24C7  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13806  24C8  31A0  20EB         	fcall	_wait_ms
 13807  24CA  0008               	return
 13808  24CB                     __end_of_read_bottom_tactile:	
 13809                           
 13810                           	psect	text34
 13811  1AEA                     __ptext34:	
 13812 ;; *************** function _map *****************
 13813 ;; Defined at:
 13814 ;;		line 177 in file "user.c"
 13815 ;; Parameters:    Size  Location     Type
 13816 ;;  x               3   62[BANK1 ] float 
 13817 ;;  in_min          3   65[BANK1 ] float 
 13818 ;;  in_max          3   68[BANK1 ] float 
 13819 ;;  out_min         3   71[BANK1 ] float 
 13820 ;;  out_max         3   74[BANK1 ] float 
 13821 ;; Auto vars:     Size  Location     Type
 13822 ;;		None
 13823 ;; Return value:  Size  Location     Type
 13824 ;;                  3   62[BANK1 ] float 
 13825 ;; Registers used:
 13826 ;;		wreg, status,2, status,0, pclath, cstack
 13827 ;; Tracked objects:
 13828 ;;		On entry : 0/0
 13829 ;;		On exit  : 0/0
 13830 ;;		Unchanged: 0/0
 13831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13832 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13833 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13835 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13836 ;;Total ram usage:       18 bytes
 13837 ;; Hardware stack levels used:    1
 13838 ;; Hardware stack levels required when called:    5
 13839 ;; This function calls:
 13840 ;;		___ftadd
 13841 ;;		___ftdiv
 13842 ;;		___ftmul
 13843 ;;		___ftneg
 13844 ;; This function is called by:
 13845 ;;		_main
 13846 ;; This function uses a non-reentrant model
 13847 ;;
 13848                           
 13849                           
 13850                           ;psect for function _map
 13851  1AEA                     _map:	
 13852                           
 13853                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13854                           
 13855                           ;incstack = 0
 13856                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13857  1AEA  0021               	movlb	1	; select bank1
 13858  1AEB  0864               	movf	map@in_max^(0+128),w
 13859  1AEC  00C1               	movwf	___ftadd@f1^(0+128)
 13860  1AED  0865               	movf	(map@in_max+1)^(0+128),w
 13861  1AEE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13862  1AEF  0866               	movf	(map@in_max+2)^(0+128),w
 13863  1AF0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13864  1AF1  0861               	movf	map@in_min^(0+128),w
 13865  1AF2  00BE               	movwf	___ftneg@f1^(0+128)
 13866  1AF3  0862               	movf	(map@in_min+1)^(0+128),w
 13867  1AF4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13868  1AF5  0863               	movf	(map@in_min+2)^(0+128),w
 13869  1AF6  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13870  1AF7  31AE  261F  319A   	fcall	___ftneg
 13871  1AFA  0021               	movlb	1	; select bank1
 13872  1AFB  083E               	movf	?___ftneg^(0+128),w
 13873  1AFC  00C4               	movwf	___ftadd@f2^(0+128)
 13874  1AFD  083F               	movf	(?___ftneg+1)^(0+128),w
 13875  1AFE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13876  1AFF  0840               	movf	(?___ftneg+2)^(0+128),w
 13877  1B00  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13878  1B01  3190  201F  319A   	fcall	___ftadd
 13879  1B04  0021               	movlb	1	; select bank1
 13880  1B05  0841               	movf	?___ftadd^(0+128),w
 13881  1B06  00CE               	movwf	___ftdiv@f2^(0+128)
 13882  1B07  0842               	movf	(?___ftadd+1)^(0+128),w
 13883  1B08  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13884  1B09  0843               	movf	(?___ftadd+2)^(0+128),w
 13885  1B0A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13886  1B0B  086A               	movf	map@out_max^(0+128),w
 13887  1B0C  00C1               	movwf	___ftadd@f1^(0+128)
 13888  1B0D  086B               	movf	(map@out_max+1)^(0+128),w
 13889  1B0E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13890  1B0F  086C               	movf	(map@out_max+2)^(0+128),w
 13891  1B10  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13892  1B11  0867               	movf	map@out_min^(0+128),w
 13893  1B12  00BE               	movwf	___ftneg@f1^(0+128)
 13894  1B13  0868               	movf	(map@out_min+1)^(0+128),w
 13895  1B14  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13896  1B15  0869               	movf	(map@out_min+2)^(0+128),w
 13897  1B16  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13898  1B17  31AE  261F  319A   	fcall	___ftneg
 13899  1B1A  0021               	movlb	1	; select bank1
 13900  1B1B  083E               	movf	?___ftneg^(0+128),w
 13901  1B1C  00C4               	movwf	___ftadd@f2^(0+128)
 13902  1B1D  083F               	movf	(?___ftneg+1)^(0+128),w
 13903  1B1E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13904  1B1F  0840               	movf	(?___ftneg+2)^(0+128),w
 13905  1B20  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13906  1B21  3190  201F  319A   	fcall	___ftadd
 13907  1B24  0021               	movlb	1	; select bank1
 13908  1B25  0841               	movf	?___ftadd^(0+128),w
 13909  1B26  00AE               	movwf	___ftmul@f1^(0+128)
 13910  1B27  0842               	movf	(?___ftadd+1)^(0+128),w
 13911  1B28  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13912  1B29  0843               	movf	(?___ftadd+2)^(0+128),w
 13913  1B2A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13914  1B2B  085E               	movf	map@x^(0+128),w
 13915  1B2C  00C1               	movwf	___ftadd@f1^(0+128)
 13916  1B2D  085F               	movf	(map@x+1)^(0+128),w
 13917  1B2E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13918  1B2F  0860               	movf	(map@x+2)^(0+128),w
 13919  1B30  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13920  1B31  0861               	movf	map@in_min^(0+128),w
 13921  1B32  00BE               	movwf	___ftneg@f1^(0+128)
 13922  1B33  0862               	movf	(map@in_min+1)^(0+128),w
 13923  1B34  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13924  1B35  0863               	movf	(map@in_min+2)^(0+128),w
 13925  1B36  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13926  1B37  31AE  261F  319A   	fcall	___ftneg
 13927  1B3A  0021               	movlb	1	; select bank1
 13928  1B3B  083E               	movf	?___ftneg^(0+128),w
 13929  1B3C  00C4               	movwf	___ftadd@f2^(0+128)
 13930  1B3D  083F               	movf	(?___ftneg+1)^(0+128),w
 13931  1B3E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13932  1B3F  0840               	movf	(?___ftneg+2)^(0+128),w
 13933  1B40  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13934  1B41  3190  201F  319A   	fcall	___ftadd
 13935  1B44  0021               	movlb	1	; select bank1
 13936  1B45  0841               	movf	?___ftadd^(0+128),w
 13937  1B46  00B1               	movwf	___ftmul@f2^(0+128)
 13938  1B47  0842               	movf	(?___ftadd+1)^(0+128),w
 13939  1B48  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13940  1B49  0843               	movf	(?___ftadd+2)^(0+128),w
 13941  1B4A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13942  1B4B  3187  2740  319A   	fcall	___ftmul
 13943  1B4E  0021               	movlb	1	; select bank1
 13944  1B4F  082E               	movf	?___ftmul^(0+128),w
 13945  1B50  00D1               	movwf	___ftdiv@f1^(0+128)
 13946  1B51  082F               	movf	(?___ftmul+1)^(0+128),w
 13947  1B52  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13948  1B53  0830               	movf	(?___ftmul+2)^(0+128),w
 13949  1B54  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13950  1B55  319D  2528  319A   	fcall	___ftdiv
 13951  1B58  0021               	movlb	1	; select bank1
 13952  1B59  084E               	movf	?___ftdiv^(0+128),w
 13953  1B5A  00ED               	movwf	_map$2836^(0+128)
 13954  1B5B  084F               	movf	(?___ftdiv+1)^(0+128),w
 13955  1B5C  00EE               	movwf	(_map$2836+1)^(0+128)
 13956  1B5D  0850               	movf	(?___ftdiv+2)^(0+128),w
 13957  1B5E  00EF               	movwf	(_map$2836+2)^(0+128)
 13958                           
 13959                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13960  1B5F  0867               	movf	map@out_min^(0+128),w
 13961  1B60  00C1               	movwf	___ftadd@f1^(0+128)
 13962  1B61  0868               	movf	(map@out_min+1)^(0+128),w
 13963  1B62  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13964  1B63  0869               	movf	(map@out_min+2)^(0+128),w
 13965  1B64  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13966  1B65  086D               	movf	_map$2836^(0+128),w
 13967  1B66  00C4               	movwf	___ftadd@f2^(0+128)
 13968  1B67  086E               	movf	(_map$2836+1)^(0+128),w
 13969  1B68  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13970  1B69  086F               	movf	(_map$2836+2)^(0+128),w
 13971  1B6A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13972  1B6B  3190  201F         	fcall	___ftadd
 13973  1B6D  0021               	movlb	1	; select bank1
 13974  1B6E  0841               	movf	?___ftadd^(0+128),w
 13975  1B6F  00DE               	movwf	?_map^(0+128)
 13976  1B70  0842               	movf	(?___ftadd+1)^(0+128),w
 13977  1B71  00DF               	movwf	(?_map+1)^(0+128)
 13978  1B72  0843               	movf	(?___ftadd+2)^(0+128),w
 13979  1B73  00E0               	movwf	(?_map+2)^(0+128)
 13980  1B74  0008               	return
 13981  1B75                     __end_of_map:	
 13982                           
 13983                           	psect	text35
 13984  2E4C                     __ptext35:	
 13985 ;; *************** function _initSwitchBypass *****************
 13986 ;; Defined at:
 13987 ;;		line 29 in file "SwitchBypass.c"
 13988 ;; Parameters:    Size  Location     Type
 13989 ;;		None
 13990 ;; Auto vars:     Size  Location     Type
 13991 ;;  initState       2   26[BANK1 ] int 
 13992 ;; Return value:  Size  Location     Type
 13993 ;;                  1    wreg      void 
 13994 ;; Registers used:
 13995 ;;		wreg, status,2, status,0, pclath, cstack
 13996 ;; Tracked objects:
 13997 ;;		On entry : 0/0
 13998 ;;		On exit  : 0/0
 13999 ;;		Unchanged: 0/0
 14000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14002 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14004 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14005 ;;Total ram usage:        2 bytes
 14006 ;; Hardware stack levels used:    1
 14007 ;; Hardware stack levels required when called:    7
 14008 ;; This function calls:
 14009 ;;		_getSwitchBypassState
 14010 ;;		_setSwitchBypassState
 14011 ;; This function is called by:
 14012 ;;		_main
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           
 14017                           ;psect for function _initSwitchBypass
 14018  2E4C                     _initSwitchBypass:	
 14019                           
 14020                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14021                           
 14022                           ;incstack = 0
 14023                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14024  2E4C  31AE  260B  31AE   	fcall	_getSwitchBypassState
 14025  2E4F  0021               	movlb	1	; select bank1
 14026  2E50  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14027  2E51  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14028  2E52  0820               	movf	?_getSwitchBypassState^(0+128),w
 14029  2E53  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14030                           
 14031                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14032  2E54  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14033  2E55  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14034  2E56  083A               	movf	initSwitchBypass@initState^(0+128),w
 14035  2E57  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14036  2E58  31AE  26EA         	fcall	_setSwitchBypassState
 14037  2E5A  0008               	return
 14038  2E5B                     __end_of_initSwitchBypass:	
 14039                           
 14040                           	psect	text36
 14041  2EEA                     __ptext36:	
 14042 ;; *************** function _setSwitchBypassState *****************
 14043 ;; Defined at:
 14044 ;;		line 140 in file "SwitchBypass.c"
 14045 ;; Parameters:    Size  Location     Type
 14046 ;;  f_state         2   22[BANK1 ] int 
 14047 ;; Auto vars:     Size  Location     Type
 14048 ;;		None
 14049 ;; Return value:  Size  Location     Type
 14050 ;;                  1    wreg      void 
 14051 ;; Registers used:
 14052 ;;		wreg, status,2, status,0, pclath, cstack
 14053 ;; Tracked objects:
 14054 ;;		On entry : 0/0
 14055 ;;		On exit  : 0/0
 14056 ;;		Unchanged: 0/0
 14057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14058 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14060 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14061 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14062 ;;Total ram usage:        4 bytes
 14063 ;; Hardware stack levels used:    1
 14064 ;; Hardware stack levels required when called:    6
 14065 ;; This function calls:
 14066 ;;		_setSwitchBypassRelays
 14067 ;; This function is called by:
 14068 ;;		_initSwitchBypass
 14069 ;;		_updateSwitchBypass
 14070 ;; This function uses a non-reentrant model
 14071 ;;
 14072                           
 14073                           
 14074                           ;psect for function _setSwitchBypassState
 14075  2EEA                     _setSwitchBypassState:	
 14076                           
 14077                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 14078                           
 14079                           ;incstack = 0
 14080                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14081  2EEA  0020               	movlb	0	; select bank0
 14082  2EEB  085F               	movf	_switchBypass_state,w
 14083  2EEC  0021               	movlb	1	; select bank1
 14084  2EED  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14085  2EEE  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14086  2EEF  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14087  2EF0  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14088  2EF1  1D03               	skipz
 14089  2EF2  2EF5               	goto	u8825
 14090  2EF3  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14091  2EF4  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14092  2EF5                     u8825:	
 14093  2EF5  1903               	btfsc	3,2
 14094  2EF6  0008               	return
 14095                           
 14096                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 14097  2EF7  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14098  2EF8  0022               	movlb	2	; select bank2
 14099  2EF9  1C03               	skipc
 14100  2EFA  110D               	bcf	13,2	;volatile
 14101  2EFB  1803               	skipnc
 14102  2EFC  150D               	bsf	13,2	;volatile
 14103                           
 14104                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 14105  2EFD  118D               	bcf	13,3	;volatile
 14106                           
 14107                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 14108  2EFE  0021               	movlb	1	; select bank1
 14109  2EFF  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14110  2F00  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14111  2F01  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14112  2F02  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14113  2F03  31A1  211D         	fcall	_setSwitchBypassRelays
 14114  2F05  0008               	return
 14115  2F06                     __end_of_setSwitchBypassState:	
 14116                           
 14117                           	psect	text37
 14118  211D                     __ptext37:	
 14119 ;; *************** function _setSwitchBypassRelays *****************
 14120 ;; Defined at:
 14121 ;;		line 148 in file "SwitchBypass.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;  f_state         2   18[BANK1 ] int 
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;		None
 14126 ;; Return value:  Size  Location     Type
 14127 ;;                  1    wreg      void 
 14128 ;; Registers used:
 14129 ;;		wreg, status,2, status,0, pclath, cstack
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14135 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14137 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14138 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14139 ;;Total ram usage:        4 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:    5
 14142 ;; This function calls:
 14143 ;;		_updateSwitchBypassState
 14144 ;;		_wait_ms
 14145 ;; This function is called by:
 14146 ;;		_updateSwitchBypass
 14147 ;;		_setSwitchBypassState
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           
 14152                           ;psect for function _setSwitchBypassRelays
 14153  211D                     _setSwitchBypassRelays:	
 14154                           
 14155                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 14156                           
 14157                           ;incstack = 0
 14158                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14159  211D  0021               	movlb	1	; select bank1
 14160  211E  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14161  211F  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14162  2120  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14163  2121  0020               	movlb	0	; select bank0
 14164  2122  00DF               	movwf	_switchBypass_state
 14165                           
 14166                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 14167  2123  0021               	movlb	1	; select bank1
 14168  2124  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14169  2125  0027               	movlb	7	; select bank7
 14170  2126  1C03               	skipc
 14171  2127  110D               	bcf	13,2	;volatile
 14172  2128  1803               	skipnc
 14173  2129  150D               	bsf	13,2	;volatile
 14174                           
 14175                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 14176  212A  0021               	movlb	1	; select bank1
 14177  212B  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14178  212C  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14179  212D  1D03               	btfss	3,2
 14180  212E  2932               	goto	u8580
 14181  212F  0027               	movlb	7	; select bank7
 14182  2130  148D               	bsf	13,1	;volatile
 14183  2131  2934               	goto	l8168
 14184  2132                     u8580:	
 14185  2132  0027               	movlb	7	; select bank7
 14186  2133  108D               	bcf	13,1	;volatile
 14187  2134                     l8168:	
 14188                           
 14189                           ;SwitchBypass.c: 153: wait_ms(20);
 14190  2134  3014               	movlw	20
 14191  2135  0021               	movlb	1	; select bank1
 14192  2136  00AC               	movwf	wait_ms@timeSec^(0+128)
 14193  2137  3000               	movlw	0
 14194  2138  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14195  2139  31A0  20EB  31A1   	fcall	_wait_ms
 14196                           
 14197                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 14198  213C  0027               	movlb	7	; select bank7
 14199  213D  110D               	bcf	13,2	;volatile
 14200                           
 14201                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 14202  213E  108D               	bcf	13,1	;volatile
 14203                           
 14204                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 14205  213F  0020               	movlb	0	; select bank0
 14206  2140  085F               	movf	_switchBypass_state,w
 14207  2141  0021               	movlb	1	; select bank1
 14208  2142  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14209  2143  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14210  2144  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14211  2145  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14212  2146  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14213  2147  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14214  2148  3190  2001  31A1   	fcall	_updateSwitchBypassState
 14215                           
 14216                           ;SwitchBypass.c: 159: wait_ms(20);
 14217  214B  3014               	movlw	20
 14218  214C  0021               	movlb	1	; select bank1
 14219  214D  00AC               	movwf	wait_ms@timeSec^(0+128)
 14220  214E  3000               	movlw	0
 14221  214F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14222  2150  31A0  20EB         	fcall	_wait_ms
 14223  2152  0008               	return
 14224  2153                     __end_of_setSwitchBypassRelays:	
 14225                           
 14226                           	psect	text38
 14227  20EB                     __ptext38:	
 14228 ;; *************** function _wait_ms *****************
 14229 ;; Defined at:
 14230 ;;		line 23 in file "system.c"
 14231 ;; Parameters:    Size  Location     Type
 14232 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14233 ;; Auto vars:     Size  Location     Type
 14234 ;;  timemsl         4   14[BANK1 ] long 
 14235 ;; Return value:  Size  Location     Type
 14236 ;;                  1    wreg      void 
 14237 ;; Registers used:
 14238 ;;		wreg, status,2, status,0, pclath, cstack
 14239 ;; Tracked objects:
 14240 ;;		On entry : 0/0
 14241 ;;		On exit  : 0/0
 14242 ;;		Unchanged: 0/0
 14243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14244 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14245 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14247 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14248 ;;Total ram usage:        6 bytes
 14249 ;; Hardware stack levels used:    1
 14250 ;; Hardware stack levels required when called:    4
 14251 ;; This function calls:
 14252 ;;		___lmul
 14253 ;; This function is called by:
 14254 ;;		_ring_tactiles
 14255 ;;		_solidring_tactiles
 14256 ;;		_read_bottom_tactile
 14257 ;;		_read_top_tactile
 14258 ;;		_setSwitchBypassRelays
 14259 ;;		_setDoublePressState
 14260 ;;		_showError_Alternating
 14261 ;;		_show_error
 14262 ;;		_show_cancel
 14263 ;;		_star_tactiles
 14264 ;;		_initExpModeState
 14265 ;; This function uses a non-reentrant model
 14266 ;;
 14267                           
 14268                           
 14269                           ;psect for function _wait_ms
 14270  20EB                     _wait_ms:	
 14271                           
 14272                           ;system.c: 25: long timemsl = 0;
 14273                           
 14274                           ;incstack = 0
 14275                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14276  20EB  3000               	movlw	0
 14277  20EC  0021               	movlb	1	; select bank1
 14278  20ED  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14279  20EE  3000               	movlw	0
 14280  20EF  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14281  20F0  3000               	movlw	0
 14282  20F1  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14283  20F2  3000               	movlw	0
 14284  20F3  00AE               	movwf	wait_ms@timemsl^(0+128)
 14285                           
 14286                           ;system.c: 26: timemsl = timeSec * 1000l;
 14287  20F4  082C               	movf	wait_ms@timeSec^(0+128),w
 14288  20F5  00A0               	movwf	___lmul@multiplier^(0+128)
 14289  20F6  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14290  20F7  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14291  20F8  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14292  20F9  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14293  20FA  3000               	movlw	0
 14294  20FB  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14295  20FC  3000               	movlw	0
 14296  20FD  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14297  20FE  3003               	movlw	3
 14298  20FF  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14299  2100  30E8               	movlw	232
 14300  2101  00A4               	movwf	___lmul@multiplicand^(0+128)
 14301  2102  31A0  20BB  31A0   	fcall	___lmul
 14302  2105  0021               	movlb	1	; select bank1
 14303  2106  0823               	movf	(?___lmul+3)^(0+128),w
 14304  2107  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14305  2108  0822               	movf	(?___lmul+2)^(0+128),w
 14306  2109  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14307  210A  0821               	movf	(?___lmul+1)^(0+128),w
 14308  210B  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14309  210C  0820               	movf	?___lmul^(0+128),w
 14310  210D  00AE               	movwf	wait_ms@timemsl^(0+128)
 14311  210E                     l385:	
 14312                           ;system.c: 27: for( ; timemsl; timemsl--);
 14313                           
 14314  210E  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14315  210F  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14316  2110  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14317  2111  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14318  2112  1903               	btfsc	3,2
 14319  2113  0008               	return
 14320  2114  30FF               	movlw	255
 14321  2115  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14322  2116  30FF               	movlw	255
 14323  2117  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14324  2118  30FF               	movlw	255
 14325  2119  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14326  211A  30FF               	movlw	255
 14327  211B  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14328  211C  290E               	goto	l385
 14329  211D                     __end_of_wait_ms:	
 14330                           
 14331                           	psect	text39
 14332  20BB                     __ptext39:	
 14333 ;; *************** function ___lmul *****************
 14334 ;; Defined at:
 14335 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14336 ;; Parameters:    Size  Location     Type
 14337 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14338 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14339 ;; Auto vars:     Size  Location     Type
 14340 ;;  product         4    8[BANK1 ] unsigned long 
 14341 ;; Return value:  Size  Location     Type
 14342 ;;                  4    0[BANK1 ] unsigned long 
 14343 ;; Registers used:
 14344 ;;		wreg, status,2, status,0
 14345 ;; Tracked objects:
 14346 ;;		On entry : 0/0
 14347 ;;		On exit  : 0/0
 14348 ;;		Unchanged: 0/0
 14349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14350 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14351 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14353 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14354 ;;Total ram usage:       12 bytes
 14355 ;; Hardware stack levels used:    1
 14356 ;; Hardware stack levels required when called:    3
 14357 ;; This function calls:
 14358 ;;		Nothing
 14359 ;; This function is called by:
 14360 ;;		_wait_ms
 14361 ;; This function uses a non-reentrant model
 14362 ;;
 14363                           
 14364                           
 14365                           ;psect for function ___lmul
 14366  20BB                     ___lmul:	
 14367                           
 14368                           ;incstack = 0
 14369                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14370  20BB  3000               	movlw	0
 14371  20BC  0021               	movlb	1	; select bank1
 14372  20BD  00AB               	movwf	(___lmul@product+3)^(0+128)
 14373  20BE  3000               	movlw	0
 14374  20BF  00AA               	movwf	(___lmul@product+2)^(0+128)
 14375  20C0  3000               	movlw	0
 14376  20C1  00A9               	movwf	(___lmul@product+1)^(0+128)
 14377  20C2  3000               	movlw	0
 14378  20C3  00A8               	movwf	___lmul@product^(0+128)
 14379  20C4                     l7614:	
 14380  20C4  1C20               	btfss	___lmul@multiplier^(0+128),0
 14381  20C5  28CE               	goto	l7618
 14382  20C6  0824               	movf	___lmul@multiplicand^(0+128),w
 14383  20C7  07A8               	addwf	___lmul@product^(0+128),f
 14384  20C8  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14385  20C9  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14386  20CA  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14387  20CB  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14388  20CC  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14389  20CD  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14390  20CE                     l7618:	
 14391  20CE  3001               	movlw	1
 14392  20CF                     u7615:	
 14393  20CF  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14394  20D0  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14395  20D1  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14396  20D2  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14397  20D3  0B89               	decfsz	9,f
 14398  20D4  28CF               	goto	u7615
 14399  20D5  3001               	movlw	1
 14400  20D6                     u7625:	
 14401  20D6  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14402  20D7  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14403  20D8  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14404  20D9  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14405  20DA  0B89               	decfsz	9,f
 14406  20DB  28D6               	goto	u7625
 14407  20DC  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14408  20DD  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14409  20DE  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14410  20DF  0420               	iorwf	___lmul@multiplier^(0+128),w
 14411  20E0  1D03               	skipz
 14412  20E1  28C4               	goto	l7614
 14413  20E2  082B               	movf	(___lmul@product+3)^(0+128),w
 14414  20E3  00A3               	movwf	(?___lmul+3)^(0+128)
 14415  20E4  082A               	movf	(___lmul@product+2)^(0+128),w
 14416  20E5  00A2               	movwf	(?___lmul+2)^(0+128)
 14417  20E6  0829               	movf	(___lmul@product+1)^(0+128),w
 14418  20E7  00A1               	movwf	(?___lmul+1)^(0+128)
 14419  20E8  0828               	movf	___lmul@product^(0+128),w
 14420  20E9  00A0               	movwf	?___lmul^(0+128)
 14421  20EA  0008               	return
 14422  20EB                     __end_of___lmul:	
 14423                           
 14424                           	psect	text40
 14425  1001                     __ptext40:	
 14426 ;; *************** function _updateSwitchBypassState *****************
 14427 ;; Defined at:
 14428 ;;		line 96 in file "state_manager.c"
 14429 ;; Parameters:    Size  Location     Type
 14430 ;;  state           2    0[BANK1 ] int 
 14431 ;; Auto vars:     Size  Location     Type
 14432 ;;		None
 14433 ;; Return value:  Size  Location     Type
 14434 ;;                  1    wreg      void 
 14435 ;; Registers used:
 14436 ;;		None
 14437 ;; Tracked objects:
 14438 ;;		On entry : 0/0
 14439 ;;		On exit  : 0/0
 14440 ;;		Unchanged: 0/0
 14441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14442 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14445 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14446 ;;Total ram usage:        2 bytes
 14447 ;; Hardware stack levels used:    1
 14448 ;; Hardware stack levels required when called:    3
 14449 ;; This function calls:
 14450 ;;		Nothing
 14451 ;; This function is called by:
 14452 ;;		_setSwitchBypassRelays
 14453 ;; This function uses a non-reentrant model
 14454 ;;
 14455                           
 14456                           
 14457                           ;psect for function _updateSwitchBypassState
 14458  1001                     _updateSwitchBypassState:	
 14459                           
 14460                           ;incstack = 0
 14461                           ; Regs used in _updateSwitchBypassState: []
 14462  1001  0008               	return
 14463  1002                     __end_of_updateSwitchBypassState:	
 14464                           
 14465                           	psect	text41
 14466  2E0B                     __ptext41:	
 14467 ;; *************** function _getSwitchBypassState *****************
 14468 ;; Defined at:
 14469 ;;		line 103 in file "state_manager.c"
 14470 ;; Parameters:    Size  Location     Type
 14471 ;;		None
 14472 ;; Auto vars:     Size  Location     Type
 14473 ;;		None
 14474 ;; Return value:  Size  Location     Type
 14475 ;;                  2    0[BANK1 ] int 
 14476 ;; Registers used:
 14477 ;;		status,2
 14478 ;; Tracked objects:
 14479 ;;		On entry : 0/0
 14480 ;;		On exit  : 0/0
 14481 ;;		Unchanged: 0/0
 14482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14483 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14486 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14487 ;;Total ram usage:        2 bytes
 14488 ;; Hardware stack levels used:    1
 14489 ;; Hardware stack levels required when called:    3
 14490 ;; This function calls:
 14491 ;;		Nothing
 14492 ;; This function is called by:
 14493 ;;		_initSwitchBypass
 14494 ;; This function uses a non-reentrant model
 14495 ;;
 14496                           
 14497                           
 14498                           ;psect for function _getSwitchBypassState
 14499  2E0B                     _getSwitchBypassState:	
 14500                           
 14501                           ;state_manager.c: 108: return 0;
 14502                           
 14503                           ;incstack = 0
 14504                           ; Regs used in _getSwitchBypassState: [status,2]
 14505  2E0B  0021               	movlb	1	; select bank1
 14506  2E0C  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14507  2E0D  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14508  2E0E  0008               	return
 14509  2E0F                     __end_of_getSwitchBypassState:	
 14510                           
 14511                           	psect	text42
 14512  260C                     __ptext42:	
 14513 ;; *************** function _getModulationDelayTime *****************
 14514 ;; Defined at:
 14515 ;;		line 35 in file "modulation.c"
 14516 ;; Parameters:    Size  Location     Type
 14517 ;;		None
 14518 ;; Auto vars:     Size  Location     Type
 14519 ;;  subDiv          2   14[BANK2 ] int 
 14520 ;; Return value:  Size  Location     Type
 14521 ;;                  1    wreg      void 
 14522 ;; Registers used:
 14523 ;;		wreg, status,2, status,0, pclath, cstack
 14524 ;; Tracked objects:
 14525 ;;		On entry : 0/0
 14526 ;;		On exit  : 0/0
 14527 ;;		Unchanged: 0/0
 14528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14530 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14532 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14533 ;;Total ram usage:        2 bytes
 14534 ;; Hardware stack levels used:    1
 14535 ;; Hardware stack levels required when called:    5
 14536 ;; This function calls:
 14537 ;;		___altoft
 14538 ;;		___awtoft
 14539 ;;		___ftdiv
 14540 ;;		___fttol
 14541 ;;		_getModulationSubdivision
 14542 ;; This function is called by:
 14543 ;;		_main
 14544 ;; This function uses a non-reentrant model
 14545 ;;
 14546                           
 14547                           
 14548                           ;psect for function _getModulationDelayTime
 14549  260C                     _getModulationDelayTime:	
 14550                           
 14551                           ;modulation.c: 36: adjust_mod_delay = 0;
 14552                           
 14553                           ;incstack = 0
 14554                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14555  260C  0023               	movlb	3	; select bank3
 14556  260D  01BA               	clrf	_adjust_mod_delay^(0+384)
 14557                           
 14558                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14559  260E  31A0  208B  31A6   	fcall	_getModulationSubdivision
 14560  2611  0021               	movlb	1	; select bank1
 14561  2612  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14562  2613  0022               	movlb	2	; select bank2
 14563  2614  00AF               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14564  2615  0021               	movlb	1	; select bank1
 14565  2616  0820               	movf	?_getModulationSubdivision^(0+128),w
 14566  2617  0022               	movlb	2	; select bank2
 14567  2618  00AE               	movwf	getModulationDelayTime@subDiv^(0+256)
 14568                           
 14569                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14570  2619  0020               	movlb	0	; select bank0
 14571  261A  0855               	movf	_delay_time+3,w	;volatile
 14572  261B  0021               	movlb	1	; select bank1
 14573  261C  00AB               	movwf	(___altoft@c+3)^(0+128)
 14574  261D  0020               	movlb	0	; select bank0
 14575  261E  0854               	movf	_delay_time+2,w	;volatile
 14576  261F  0021               	movlb	1	; select bank1
 14577  2620  00AA               	movwf	(___altoft@c+2)^(0+128)
 14578  2621  0020               	movlb	0	; select bank0
 14579  2622  0853               	movf	_delay_time+1,w	;volatile
 14580  2623  0021               	movlb	1	; select bank1
 14581  2624  00A9               	movwf	(___altoft@c+1)^(0+128)
 14582  2625  0020               	movlb	0	; select bank0
 14583  2626  0852               	movf	_delay_time,w	;volatile
 14584  2627  0021               	movlb	1	; select bank1
 14585  2628  00A8               	movwf	___altoft@c^(0+128)
 14586  2629  31A2  223C  31A6   	fcall	___altoft
 14587  262C  0021               	movlb	1	; select bank1
 14588  262D  0828               	movf	?___altoft^(0+128),w
 14589  262E  00D1               	movwf	___ftdiv@f1^(0+128)
 14590  262F  0829               	movf	(?___altoft+1)^(0+128),w
 14591  2630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14592  2631  082A               	movf	(?___altoft+2)^(0+128),w
 14593  2632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14594  2633  0022               	movlb	2	; select bank2
 14595  2634  082F               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14596  2635  0021               	movlb	1	; select bank1
 14597  2636  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14598  2637  0022               	movlb	2	; select bank2
 14599  2638  082E               	movf	getModulationDelayTime@subDiv^(0+256),w
 14600  2639  0021               	movlb	1	; select bank1
 14601  263A  00A8               	movwf	___awtoft@c^(0+128)
 14602  263B  31AF  2767  31A6   	fcall	___awtoft
 14603  263E  0021               	movlb	1	; select bank1
 14604  263F  0828               	movf	?___awtoft^(0+128),w
 14605  2640  00CE               	movwf	___ftdiv@f2^(0+128)
 14606  2641  0829               	movf	(?___awtoft+1)^(0+128),w
 14607  2642  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14608  2643  082A               	movf	(?___awtoft+2)^(0+128),w
 14609  2644  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14610  2645  319D  2528  31A6   	fcall	___ftdiv
 14611  2648  0021               	movlb	1	; select bank1
 14612  2649  084E               	movf	?___ftdiv^(0+128),w
 14613  264A  0022               	movlb	2	; select bank2
 14614  264B  00A0               	movwf	___fttol@f1^(0+256)
 14615  264C  0021               	movlb	1	; select bank1
 14616  264D  084F               	movf	(?___ftdiv+1)^(0+128),w
 14617  264E  0022               	movlb	2	; select bank2
 14618  264F  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14619  2650  0021               	movlb	1	; select bank1
 14620  2651  0850               	movf	(?___ftdiv+2)^(0+128),w
 14621  2652  0022               	movlb	2	; select bank2
 14622  2653  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14623  2654  319A  2263         	fcall	___fttol
 14624  2656  0022               	movlb	2	; select bank2
 14625  2657  0821               	movf	(?___fttol^(0+256)+1),w
 14626  2658  0023               	movlb	3	; select bank3
 14627  2659  00DA               	movwf	(_mod_delay_time+1)^(0+384)
 14628  265A  0022               	movlb	2	; select bank2
 14629  265B  0820               	movf	?___fttol^(0+256),w
 14630  265C  0023               	movlb	3	; select bank3
 14631  265D  00D9               	movwf	_mod_delay_time^(0+384)
 14632  265E  0008               	return
 14633  265F                     __end_of_getModulationDelayTime:	
 14634                           
 14635                           	psect	text43
 14636  208B                     __ptext43:	
 14637 ;; *************** function _getModulationSubdivision *****************
 14638 ;; Defined at:
 14639 ;;		line 26 in file "modulation.c"
 14640 ;; Parameters:    Size  Location     Type
 14641 ;;		None
 14642 ;; Auto vars:     Size  Location     Type
 14643 ;;		None
 14644 ;; Return value:  Size  Location     Type
 14645 ;;                  2    0[BANK1 ] int 
 14646 ;; Registers used:
 14647 ;;		wreg, status,2, status,0
 14648 ;; Tracked objects:
 14649 ;;		On entry : 0/0
 14650 ;;		On exit  : 0/0
 14651 ;;		Unchanged: 0/0
 14652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14653 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14656 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14657 ;;Total ram usage:        2 bytes
 14658 ;; Hardware stack levels used:    1
 14659 ;; Hardware stack levels required when called:    3
 14660 ;; This function calls:
 14661 ;;		Nothing
 14662 ;; This function is called by:
 14663 ;;		_getModulationDelayTime
 14664 ;;		_updateModulationArray
 14665 ;; This function uses a non-reentrant model
 14666 ;;
 14667                           
 14668                           
 14669                           ;psect for function _getModulationSubdivision
 14670  208B                     _getModulationSubdivision:	
 14671                           
 14672                           ;modulation.c: 27: if (delay_time >= 2400) {
 14673                           
 14674                           ;incstack = 0
 14675                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14676  208B  0020               	movlb	0	; select bank0
 14677  208C  1BD5               	btfsc	_delay_time+3,7	;volatile
 14678  208D  28A0               	goto	l8298
 14679  208E  0855               	movf	_delay_time+3,w	;volatile
 14680  208F  1D03               	btfss	3,2
 14681  2090  289A               	goto	l8292
 14682  2091  0854               	movf	_delay_time+2,w	;volatile
 14683  2092  1D03               	btfss	3,2
 14684  2093  289A               	goto	l8292
 14685  2094  3060               	movlw	96
 14686  2095  0252               	subwf	_delay_time,w	;volatile
 14687  2096  3009               	movlw	9
 14688  2097  3B53               	subwfb	_delay_time+1,w	;volatile
 14689  2098  1C03               	btfss	3,0
 14690  2099  28A0               	goto	l8298
 14691  209A                     l8292:	
 14692                           
 14693                           ;modulation.c: 28: return 120;
 14694  209A  3078               	movlw	120
 14695  209B  0021               	movlb	1	; select bank1
 14696  209C  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14697  209D  3000               	movlw	0
 14698  209E  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14699                           
 14700                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14701  209F  0008               	return
 14702  20A0                     l8298:	
 14703  20A0  0020               	movlb	0	; select bank0
 14704  20A1  1BD5               	btfsc	_delay_time+3,7	;volatile
 14705  20A2  28B5               	goto	l8306
 14706  20A3  0855               	movf	_delay_time+3,w	;volatile
 14707  20A4  1D03               	btfss	3,2
 14708  20A5  28AF               	goto	l8300
 14709  20A6  0854               	movf	_delay_time+2,w	;volatile
 14710  20A7  1D03               	btfss	3,2
 14711  20A8  28AF               	goto	l8300
 14712  20A9  3058               	movlw	88
 14713  20AA  0252               	subwf	_delay_time,w	;volatile
 14714  20AB  3002               	movlw	2
 14715  20AC  3B53               	subwfb	_delay_time+1,w	;volatile
 14716  20AD  1C03               	btfss	3,0
 14717  20AE  28B5               	goto	l8306
 14718  20AF                     l8300:	
 14719                           
 14720                           ;modulation.c: 30: return 60;
 14721  20AF  303C               	movlw	60
 14722  20B0  0021               	movlb	1	; select bank1
 14723  20B1  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14724  20B2  3000               	movlw	0
 14725  20B3  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14726                           
 14727                           ;modulation.c: 31: } else {
 14728  20B4  0008               	return
 14729  20B5                     l8306:	
 14730                           
 14731                           ;modulation.c: 32: return 30;
 14732  20B5  301E               	movlw	30
 14733  20B6  0021               	movlb	1	; select bank1
 14734  20B7  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14735  20B8  3000               	movlw	0
 14736  20B9  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14737  20BA  0008               	return
 14738  20BB                     __end_of_getModulationSubdivision:	
 14739                           
 14740                           	psect	text44
 14741  1859                     __ptext44:	
 14742 ;; *************** function _calcSinArray *****************
 14743 ;; Defined at:
 14744 ;;		line 18 in file "modulation.c"
 14745 ;; Parameters:    Size  Location     Type
 14746 ;;		None
 14747 ;; Auto vars:     Size  Location     Type
 14748 ;;  tmpVal          3   48[BANK2 ] int 
 14749 ;;  iAngle          1   51[BANK2 ] unsigned char 
 14750 ;; Return value:  Size  Location     Type
 14751 ;;                  1    wreg      void 
 14752 ;; Registers used:
 14753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14754 ;; Tracked objects:
 14755 ;;		On entry : 0/0
 14756 ;;		On exit  : 0/0
 14757 ;;		Unchanged: 0/0
 14758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14760 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14761 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14762 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14763 ;;Total ram usage:        8 bytes
 14764 ;; Hardware stack levels used:    1
 14765 ;; Hardware stack levels required when called:    7
 14766 ;; This function calls:
 14767 ;;		___awtoft
 14768 ;;		___ftdiv
 14769 ;;		___ftmul
 14770 ;;		___wmul
 14771 ;;		_sin
 14772 ;; This function is called by:
 14773 ;;		_main
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           
 14778                           ;psect for function _calcSinArray
 14779  1859                     _calcSinArray:	
 14780                           
 14781                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14782                           
 14783                           ;incstack = 0
 14784                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14785  1859  0022               	movlb	2	; select bank2
 14786  185A  01D3               	clrf	calcSinArray@iAngle^(0+256)
 14787  185B                     L18:	
 14788  185B  3078               	movlw	120
 14789  185C  0253               	subwf	calcSinArray@iAngle^(0+256),w
 14790  185D  1803               	btfsc	3,0
 14791  185E  0008               	return
 14792                           
 14793                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14794  185F  3000               	movlw	0
 14795  1860  0021               	movlb	1	; select bank1
 14796  1861  00CE               	movwf	___ftdiv@f2^(0+128)
 14797  1862  3034               	movlw	52
 14798  1863  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14799  1864  3043               	movlw	67
 14800  1865  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14801  1866  3010               	movlw	16
 14802  1867  00AE               	movwf	___ftmul@f1^(0+128)
 14803  1868  3049               	movlw	73
 14804  1869  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14805  186A  3040               	movlw	64
 14806  186B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14807  186C  0022               	movlb	2	; select bank2
 14808  186D  0853               	movf	calcSinArray@iAngle^(0+256),w
 14809  186E  00CC               	movwf	??_calcSinArray^(0+256)
 14810  186F  01CD               	clrf	(??_calcSinArray^(0+256)+1)
 14811  1870  084C               	movf	??_calcSinArray^(0+256),w
 14812  1871  00AE               	movwf	___wmul@multiplier^(0+256)
 14813  1872  084D               	movf	(??_calcSinArray+1)^(0+256),w
 14814  1873  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14815  1874  3003               	movlw	3
 14816  1875  00B0               	movwf	___wmul@multiplicand^(0+256)
 14817  1876  3000               	movlw	0
 14818  1877  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14819  1878  31AE  26CE  3198   	fcall	___wmul
 14820  187B  0022               	movlb	2	; select bank2
 14821  187C  082F               	movf	(?___wmul+1)^(0+256),w
 14822  187D  0021               	movlb	1	; select bank1
 14823  187E  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14824  187F  0022               	movlb	2	; select bank2
 14825  1880  082E               	movf	?___wmul^(0+256),w
 14826  1881  0021               	movlb	1	; select bank1
 14827  1882  00A8               	movwf	___awtoft@c^(0+128)
 14828  1883  31AF  2767  3198   	fcall	___awtoft
 14829  1886  0021               	movlb	1	; select bank1
 14830  1887  0828               	movf	?___awtoft^(0+128),w
 14831  1888  00B1               	movwf	___ftmul@f2^(0+128)
 14832  1889  0829               	movf	(?___awtoft+1)^(0+128),w
 14833  188A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14834  188B  082A               	movf	(?___awtoft+2)^(0+128),w
 14835  188C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14836  188D  3187  2740  3198   	fcall	___ftmul
 14837  1890  0021               	movlb	1	; select bank1
 14838  1891  082E               	movf	?___ftmul^(0+128),w
 14839  1892  00D1               	movwf	___ftdiv@f1^(0+128)
 14840  1893  082F               	movf	(?___ftmul+1)^(0+128),w
 14841  1894  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14842  1895  0830               	movf	(?___ftmul+2)^(0+128),w
 14843  1896  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14844  1897  319D  2528  3198   	fcall	___ftdiv
 14845  189A  0021               	movlb	1	; select bank1
 14846  189B  084E               	movf	?___ftdiv^(0+128),w
 14847  189C  0022               	movlb	2	; select bank2
 14848  189D  00D0               	movwf	calcSinArray@tmpVal^(0+256)
 14849  189E  0021               	movlb	1	; select bank1
 14850  189F  084F               	movf	(?___ftdiv+1)^(0+128),w
 14851  18A0  0022               	movlb	2	; select bank2
 14852  18A1  00D1               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14853  18A2  0021               	movlb	1	; select bank1
 14854  18A3  0850               	movf	(?___ftdiv+2)^(0+128),w
 14855  18A4  0022               	movlb	2	; select bank2
 14856  18A5  00D2               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14857                           
 14858                           ;modulation.c: 21: tmpVal = sin(tmpVal);
 14859  18A6  0850               	movf	calcSinArray@tmpVal^(0+256),w
 14860  18A7  00BE               	movwf	sin@f^(0+256)
 14861  18A8  0851               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14862  18A9  00BF               	movwf	(sin@f+1)^(0+256)
 14863  18AA  0852               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14864  18AB  00C0               	movwf	(sin@f+2)^(0+256)
 14865  18AC  3188  202C  3198   	fcall	_sin
 14866  18AF  0022               	movlb	2	; select bank2
 14867  18B0  083E               	movf	?_sin^(0+256),w
 14868  18B1  00D0               	movwf	calcSinArray@tmpVal^(0+256)
 14869  18B2  083F               	movf	(?_sin+1)^(0+256),w
 14870  18B3  00D1               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14871  18B4  0840               	movf	(?_sin+2)^(0+256),w
 14872  18B5  00D2               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14873                           
 14874                           ;modulation.c: 22: sinArray[iAngle] = tmpVal;
 14875  18B6  0853               	movf	calcSinArray@iAngle^(0+256),w
 14876  18B7  00CC               	movwf	??_calcSinArray^(0+256)
 14877  18B8  01CD               	clrf	(??_calcSinArray^(0+256)+1)
 14878  18B9  084C               	movf	??_calcSinArray^(0+256),w
 14879  18BA  00AE               	movwf	___wmul@multiplier^(0+256)
 14880  18BB  084D               	movf	(??_calcSinArray+1)^(0+256),w
 14881  18BC  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14882  18BD  3003               	movlw	3
 14883  18BE  00B0               	movwf	___wmul@multiplicand^(0+256)
 14884  18BF  3000               	movlw	0
 14885  18C0  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14886  18C1  31AE  26CE  3198   	fcall	___wmul
 14887  18C4  3082               	movlw	130
 14888  18C5  0022               	movlb	2	; select bank2
 14889  18C6  00CE               	movwf	(??_calcSinArray+2)^(0+256)
 14890  18C7  3024               	movlw	36
 14891  18C8  00CF               	movwf	((??_calcSinArray+2)^(0+256)+1)
 14892  18C9  082E               	movf	?___wmul^(0+256),w
 14893  18CA  074E               	addwf	(??_calcSinArray+2)^(0+256),w
 14894  18CB  0086               	movwf	6
 14895  18CC  082F               	movf	(?___wmul+1)^(0+256),w
 14896  18CD  3D4F               	addwfc	(??_calcSinArray+3)^(0+256),w
 14897  18CE  0087               	movwf	7
 14898  18CF  0850               	movf	calcSinArray@tmpVal^(0+256),w
 14899  18D0  3FC0               	movwi [0]fsr1
 14900  18D1  0851               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14901  18D2  3FC1               	movwi [1]fsr1
 14902  18D3  0852               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14903  18D4  3FC2               	movwi [2]fsr1
 14904  18D5  3001               	movlw	1
 14905  18D6  00CC               	movwf	??_calcSinArray^(0+256)
 14906  18D7  084C               	movf	??_calcSinArray^(0+256),w
 14907  18D8  07D3               	addwf	calcSinArray@iAngle^(0+256),f
 14908  18D9  285B               	goto	L18
 14909  18DA                     __end_of_calcSinArray:	
 14910                           
 14911                           	psect	text45
 14912  082C                     __ptext45:	
 14913 ;; *************** function _sin *****************
 14914 ;; Defined at:
 14915 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 14916 ;; Parameters:    Size  Location     Type
 14917 ;;  f               3   30[BANK2 ] void 
 14918 ;; Auto vars:     Size  Location     Type
 14919 ;;  x2              3   40[BANK2 ] void 
 14920 ;;  y               3   34[BANK2 ] void 
 14921 ;;  sgn             1   43[BANK2 ] unsigned char 
 14922 ;; Return value:  Size  Location     Type
 14923 ;;                  3   30[BANK2 ] unsigned char 
 14924 ;; Registers used:
 14925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14926 ;; Tracked objects:
 14927 ;;		On entry : 0/0
 14928 ;;		On exit  : 0/0
 14929 ;;		Unchanged: 0/0
 14930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14931 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14932 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14933 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14934 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14935 ;;Total ram usage:       14 bytes
 14936 ;; Hardware stack levels used:    1
 14937 ;; Hardware stack levels required when called:    6
 14938 ;; This function calls:
 14939 ;;		___ftadd
 14940 ;;		___ftdiv
 14941 ;;		___ftge
 14942 ;;		___ftmul
 14943 ;;		___ftneg
 14944 ;;		___ftsub
 14945 ;;		_eval_poly
 14946 ;;		_floor
 14947 ;; This function is called by:
 14948 ;;		_calcSinArray
 14949 ;; This function uses a non-reentrant model
 14950 ;;
 14951                           
 14952                           
 14953                           ;psect for function _sin
 14954  082C                     _sin:	
 14955                           
 14956                           ;incstack = 0
 14957                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14958  082C  0022               	movlb	2	; select bank2
 14959  082D  01CB               	clrf	sin@sgn^(0+256)
 14960  082E  083E               	movf	sin@f^(0+256),w
 14961  082F  0021               	movlb	1	; select bank1
 14962  0830  00A0               	movwf	___ftge@ff1^(0+128)
 14963  0831  0022               	movlb	2	; select bank2
 14964  0832  083F               	movf	(sin@f+1)^(0+256),w
 14965  0833  0021               	movlb	1	; select bank1
 14966  0834  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14967  0835  0022               	movlb	2	; select bank2
 14968  0836  0840               	movf	(sin@f+2)^(0+256),w
 14969  0837  0021               	movlb	1	; select bank1
 14970  0838  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14971  0839  3000               	movlw	0
 14972  083A  00A3               	movwf	___ftge@ff2^(0+128)
 14973  083B  3000               	movlw	0
 14974  083C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14975  083D  3000               	movlw	0
 14976  083E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14977  083F  31A2  2200  3188   	fcall	___ftge
 14978  0842  1803               	btfsc	3,0
 14979  0843  2861               	goto	l8468
 14980  0844  0022               	movlb	2	; select bank2
 14981  0845  083E               	movf	sin@f^(0+256),w
 14982  0846  0021               	movlb	1	; select bank1
 14983  0847  00BE               	movwf	___ftneg@f1^(0+128)
 14984  0848  0022               	movlb	2	; select bank2
 14985  0849  083F               	movf	(sin@f+1)^(0+256),w
 14986  084A  0021               	movlb	1	; select bank1
 14987  084B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14988  084C  0022               	movlb	2	; select bank2
 14989  084D  0840               	movf	(sin@f+2)^(0+256),w
 14990  084E  0021               	movlb	1	; select bank1
 14991  084F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14992  0850  31AE  261F  3188   	fcall	___ftneg
 14993  0853  0021               	movlb	1	; select bank1
 14994  0854  083E               	movf	?___ftneg^(0+128),w
 14995  0855  0022               	movlb	2	; select bank2
 14996  0856  00BE               	movwf	sin@f^(0+256)
 14997  0857  0021               	movlb	1	; select bank1
 14998  0858  083F               	movf	(?___ftneg+1)^(0+128),w
 14999  0859  0022               	movlb	2	; select bank2
 15000  085A  00BF               	movwf	(sin@f+1)^(0+256)
 15001  085B  0021               	movlb	1	; select bank1
 15002  085C  0840               	movf	(?___ftneg+2)^(0+128),w
 15003  085D  0022               	movlb	2	; select bank2
 15004  085E  00C0               	movwf	(sin@f+2)^(0+256)
 15005  085F  01CB               	clrf	sin@sgn^(0+256)
 15006  0860  0ACB               	incf	sin@sgn^(0+256),f
 15007  0861                     l8468:	
 15008  0861  30FA               	movlw	250
 15009  0862  0021               	movlb	1	; select bank1
 15010  0863  00AE               	movwf	___ftmul@f1^(0+128)
 15011  0864  3022               	movlw	34
 15012  0865  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15013  0866  303E               	movlw	62
 15014  0867  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15015  0868  0022               	movlb	2	; select bank2
 15016  0869  083E               	movf	sin@f^(0+256),w
 15017  086A  0021               	movlb	1	; select bank1
 15018  086B  00B1               	movwf	___ftmul@f2^(0+128)
 15019  086C  0022               	movlb	2	; select bank2
 15020  086D  083F               	movf	(sin@f+1)^(0+256),w
 15021  086E  0021               	movlb	1	; select bank1
 15022  086F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15023  0870  0022               	movlb	2	; select bank2
 15024  0871  0840               	movf	(sin@f+2)^(0+256),w
 15025  0872  0021               	movlb	1	; select bank1
 15026  0873  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15027  0874  3187  2740  3188   	fcall	___ftmul
 15028  0877  0021               	movlb	1	; select bank1
 15029  0878  082E               	movf	?___ftmul^(0+128),w
 15030  0879  0022               	movlb	2	; select bank2
 15031  087A  00BE               	movwf	sin@f^(0+256)
 15032  087B  0021               	movlb	1	; select bank1
 15033  087C  082F               	movf	(?___ftmul+1)^(0+128),w
 15034  087D  0022               	movlb	2	; select bank2
 15035  087E  00BF               	movwf	(sin@f+1)^(0+256)
 15036  087F  0021               	movlb	1	; select bank1
 15037  0880  0830               	movf	(?___ftmul+2)^(0+128),w
 15038  0881  0022               	movlb	2	; select bank2
 15039  0882  00C0               	movwf	(sin@f+2)^(0+256)
 15040  0883  083E               	movf	sin@f^(0+256),w
 15041  0884  00AE               	movwf	floor@x^(0+256)
 15042  0885  083F               	movf	(sin@f+1)^(0+256),w
 15043  0886  00AF               	movwf	(floor@x+1)^(0+256)
 15044  0887  0840               	movf	(sin@f+2)^(0+256),w
 15045  0888  00B0               	movwf	(floor@x+2)^(0+256)
 15046  0889  319E  267C  3188   	fcall	_floor
 15047  088C  0022               	movlb	2	; select bank2
 15048  088D  082E               	movf	?_floor^(0+256),w
 15049  088E  00B7               	movwf	___ftsub@f2^(0+256)
 15050  088F  082F               	movf	(?_floor+1)^(0+256),w
 15051  0890  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15052  0891  0830               	movf	(?_floor+2)^(0+256),w
 15053  0892  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15054  0893  083E               	movf	sin@f^(0+256),w
 15055  0894  00BA               	movwf	___ftsub@f1^(0+256)
 15056  0895  083F               	movf	(sin@f+1)^(0+256),w
 15057  0896  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15058  0897  0840               	movf	(sin@f+2)^(0+256),w
 15059  0898  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15060  0899  31AF  27D2  3188   	fcall	___ftsub
 15061  089C  0022               	movlb	2	; select bank2
 15062  089D  0837               	movf	?___ftsub^(0+256),w
 15063  089E  00BE               	movwf	sin@f^(0+256)
 15064  089F  0838               	movf	(?___ftsub+1)^(0+256),w
 15065  08A0  00BF               	movwf	(sin@f+1)^(0+256)
 15066  08A1  0839               	movf	(?___ftsub+2)^(0+256),w
 15067  08A2  00C0               	movwf	(sin@f+2)^(0+256)
 15068  08A3  3000               	movlw	0
 15069  08A4  0021               	movlb	1	; select bank1
 15070  08A5  00AE               	movwf	___ftmul@f1^(0+128)
 15071  08A6  3080               	movlw	128
 15072  08A7  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15073  08A8  3040               	movlw	64
 15074  08A9  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15075  08AA  0022               	movlb	2	; select bank2
 15076  08AB  083E               	movf	sin@f^(0+256),w
 15077  08AC  0021               	movlb	1	; select bank1
 15078  08AD  00B1               	movwf	___ftmul@f2^(0+128)
 15079  08AE  0022               	movlb	2	; select bank2
 15080  08AF  083F               	movf	(sin@f+1)^(0+256),w
 15081  08B0  0021               	movlb	1	; select bank1
 15082  08B1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15083  08B2  0022               	movlb	2	; select bank2
 15084  08B3  0840               	movf	(sin@f+2)^(0+256),w
 15085  08B4  0021               	movlb	1	; select bank1
 15086  08B5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15087  08B6  3187  2740  3188   	fcall	___ftmul
 15088  08B9  0021               	movlb	1	; select bank1
 15089  08BA  082E               	movf	?___ftmul^(0+128),w
 15090  08BB  0022               	movlb	2	; select bank2
 15091  08BC  00BE               	movwf	sin@f^(0+256)
 15092  08BD  0021               	movlb	1	; select bank1
 15093  08BE  082F               	movf	(?___ftmul+1)^(0+128),w
 15094  08BF  0022               	movlb	2	; select bank2
 15095  08C0  00BF               	movwf	(sin@f+1)^(0+256)
 15096  08C1  0021               	movlb	1	; select bank1
 15097  08C2  0830               	movf	(?___ftmul+2)^(0+128),w
 15098  08C3  0022               	movlb	2	; select bank2
 15099  08C4  00C0               	movwf	(sin@f+2)^(0+256)
 15100  08C5  3000               	movlw	0
 15101  08C6  0021               	movlb	1	; select bank1
 15102  08C7  00A0               	movwf	___ftge@ff1^(0+128)
 15103  08C8  3000               	movlw	0
 15104  08C9  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15105  08CA  3040               	movlw	64
 15106  08CB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15107  08CC  0022               	movlb	2	; select bank2
 15108  08CD  083E               	movf	sin@f^(0+256),w
 15109  08CE  0021               	movlb	1	; select bank1
 15110  08CF  00A3               	movwf	___ftge@ff2^(0+128)
 15111  08D0  0022               	movlb	2	; select bank2
 15112  08D1  083F               	movf	(sin@f+1)^(0+256),w
 15113  08D2  0021               	movlb	1	; select bank1
 15114  08D3  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15115  08D4  0022               	movlb	2	; select bank2
 15116  08D5  0840               	movf	(sin@f+2)^(0+256),w
 15117  08D6  0021               	movlb	1	; select bank1
 15118  08D7  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15119  08D8  31A2  2200  3188   	fcall	___ftge
 15120  08DB  1803               	btfsc	3,0
 15121  08DC  28FD               	goto	l8480
 15122  08DD  3000               	movlw	0
 15123  08DE  0022               	movlb	2	; select bank2
 15124  08DF  00B7               	movwf	___ftsub@f2^(0+256)
 15125  08E0  3000               	movlw	0
 15126  08E1  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15127  08E2  3040               	movlw	64
 15128  08E3  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15129  08E4  083E               	movf	sin@f^(0+256),w
 15130  08E5  00BA               	movwf	___ftsub@f1^(0+256)
 15131  08E6  083F               	movf	(sin@f+1)^(0+256),w
 15132  08E7  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15133  08E8  0840               	movf	(sin@f+2)^(0+256),w
 15134  08E9  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15135  08EA  31AF  27D2  3188   	fcall	___ftsub
 15136  08ED  0022               	movlb	2	; select bank2
 15137  08EE  0837               	movf	?___ftsub^(0+256),w
 15138  08EF  00BE               	movwf	sin@f^(0+256)
 15139  08F0  0838               	movf	(?___ftsub+1)^(0+256),w
 15140  08F1  00BF               	movwf	(sin@f+1)^(0+256)
 15141  08F2  0839               	movf	(?___ftsub+2)^(0+256),w
 15142  08F3  00C0               	movwf	(sin@f+2)^(0+256)
 15143  08F4  084B               	movf	sin@sgn^(0+256),w
 15144  08F5  1D03               	btfss	3,2
 15145  08F6  28F9               	goto	u8910
 15146  08F7  3001               	movlw	1
 15147  08F8  28FA               	goto	u8920
 15148  08F9                     u8910:	
 15149  08F9  3000               	movlw	0
 15150  08FA                     u8920:	
 15151  08FA  00C1               	movwf	??_sin^(0+256)
 15152  08FB  0841               	movf	??_sin^(0+256),w
 15153  08FC  00CB               	movwf	sin@sgn^(0+256)
 15154  08FD                     l8480:	
 15155  08FD  3000               	movlw	0
 15156  08FE  0021               	movlb	1	; select bank1
 15157  08FF  00A0               	movwf	___ftge@ff1^(0+128)
 15158  0900  3080               	movlw	128
 15159  0901  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15160  0902  303F               	movlw	63
 15161  0903  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15162  0904  0022               	movlb	2	; select bank2
 15163  0905  083E               	movf	sin@f^(0+256),w
 15164  0906  0021               	movlb	1	; select bank1
 15165  0907  00A3               	movwf	___ftge@ff2^(0+128)
 15166  0908  0022               	movlb	2	; select bank2
 15167  0909  083F               	movf	(sin@f+1)^(0+256),w
 15168  090A  0021               	movlb	1	; select bank1
 15169  090B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15170  090C  0022               	movlb	2	; select bank2
 15171  090D  0840               	movf	(sin@f+2)^(0+256),w
 15172  090E  0021               	movlb	1	; select bank1
 15173  090F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15174  0910  31A2  2200  3188   	fcall	___ftge
 15175  0913  1803               	btfsc	3,0
 15176  0914  2941               	goto	l2342
 15177  0915  3000               	movlw	0
 15178  0916  0021               	movlb	1	; select bank1
 15179  0917  00C1               	movwf	___ftadd@f1^(0+128)
 15180  0918  3000               	movlw	0
 15181  0919  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15182  091A  3040               	movlw	64
 15183  091B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15184  091C  0022               	movlb	2	; select bank2
 15185  091D  083E               	movf	sin@f^(0+256),w
 15186  091E  0021               	movlb	1	; select bank1
 15187  091F  00BE               	movwf	___ftneg@f1^(0+128)
 15188  0920  0022               	movlb	2	; select bank2
 15189  0921  083F               	movf	(sin@f+1)^(0+256),w
 15190  0922  0021               	movlb	1	; select bank1
 15191  0923  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15192  0924  0022               	movlb	2	; select bank2
 15193  0925  0840               	movf	(sin@f+2)^(0+256),w
 15194  0926  0021               	movlb	1	; select bank1
 15195  0927  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15196  0928  31AE  261F  3188   	fcall	___ftneg
 15197  092B  0021               	movlb	1	; select bank1
 15198  092C  083E               	movf	?___ftneg^(0+128),w
 15199  092D  00C4               	movwf	___ftadd@f2^(0+128)
 15200  092E  083F               	movf	(?___ftneg+1)^(0+128),w
 15201  092F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15202  0930  0840               	movf	(?___ftneg+2)^(0+128),w
 15203  0931  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15204  0932  3190  201F  3188   	fcall	___ftadd
 15205  0935  0021               	movlb	1	; select bank1
 15206  0936  0841               	movf	?___ftadd^(0+128),w
 15207  0937  0022               	movlb	2	; select bank2
 15208  0938  00BE               	movwf	sin@f^(0+256)
 15209  0939  0021               	movlb	1	; select bank1
 15210  093A  0842               	movf	(?___ftadd+1)^(0+128),w
 15211  093B  0022               	movlb	2	; select bank2
 15212  093C  00BF               	movwf	(sin@f+1)^(0+256)
 15213  093D  0021               	movlb	1	; select bank1
 15214  093E  0843               	movf	(?___ftadd+2)^(0+128),w
 15215  093F  0022               	movlb	2	; select bank2
 15216  0940  00C0               	movwf	(sin@f+2)^(0+256)
 15217  0941                     l2342:	
 15218  0941  0022               	movlb	2	; select bank2
 15219  0942  083E               	movf	sin@f^(0+256),w
 15220  0943  0021               	movlb	1	; select bank1
 15221  0944  00AE               	movwf	___ftmul@f1^(0+128)
 15222  0945  0022               	movlb	2	; select bank2
 15223  0946  083F               	movf	(sin@f+1)^(0+256),w
 15224  0947  0021               	movlb	1	; select bank1
 15225  0948  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15226  0949  0022               	movlb	2	; select bank2
 15227  094A  0840               	movf	(sin@f+2)^(0+256),w
 15228  094B  0021               	movlb	1	; select bank1
 15229  094C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15230  094D  0022               	movlb	2	; select bank2
 15231  094E  083E               	movf	sin@f^(0+256),w
 15232  094F  0021               	movlb	1	; select bank1
 15233  0950  00B1               	movwf	___ftmul@f2^(0+128)
 15234  0951  0022               	movlb	2	; select bank2
 15235  0952  083F               	movf	(sin@f+1)^(0+256),w
 15236  0953  0021               	movlb	1	; select bank1
 15237  0954  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15238  0955  0022               	movlb	2	; select bank2
 15239  0956  0840               	movf	(sin@f+2)^(0+256),w
 15240  0957  0021               	movlb	1	; select bank1
 15241  0958  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15242  0959  3187  2740  3188   	fcall	___ftmul
 15243  095C  0021               	movlb	1	; select bank1
 15244  095D  082E               	movf	?___ftmul^(0+128),w
 15245  095E  0022               	movlb	2	; select bank2
 15246  095F  00C8               	movwf	sin@x2^(0+256)
 15247  0960  0021               	movlb	1	; select bank1
 15248  0961  082F               	movf	(?___ftmul+1)^(0+128),w
 15249  0962  0022               	movlb	2	; select bank2
 15250  0963  00C9               	movwf	(sin@x2+1)^(0+256)
 15251  0964  0021               	movlb	1	; select bank1
 15252  0965  0830               	movf	(?___ftmul+2)^(0+128),w
 15253  0966  0022               	movlb	2	; select bank2
 15254  0967  00CA               	movwf	(sin@x2+2)^(0+256)
 15255  0968  0848               	movf	sin@x2^(0+256),w
 15256  0969  00B4               	movwf	eval_poly@x^(0+256)
 15257  096A  0849               	movf	(sin@x2+1)^(0+256),w
 15258  096B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15259  096C  084A               	movf	(sin@x2+2)^(0+256),w
 15260  096D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15261  096E  3048               	movlw	low (sin@coeff_b| (0+32768))
 15262  096F  00B7               	movwf	eval_poly@d^(0+256)
 15263  0970  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15264  0971  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15265  0972  3003               	movlw	3
 15266  0973  00B9               	movwf	eval_poly@n^(0+256)
 15267  0974  3000               	movlw	0
 15268  0975  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15269  0976  31A7  2718  3188   	fcall	_eval_poly
 15270  0979  0022               	movlb	2	; select bank2
 15271  097A  0834               	movf	?_eval_poly^(0+256),w
 15272  097B  00C2               	movwf	sin@y^(0+256)
 15273  097C  0835               	movf	(?_eval_poly+1)^(0+256),w
 15274  097D  00C3               	movwf	(sin@y+1)^(0+256)
 15275  097E  0836               	movf	(?_eval_poly+2)^(0+256),w
 15276  097F  00C4               	movwf	(sin@y+2)^(0+256)
 15277  0980  3004               	movlw	4
 15278  0981  00B9               	movwf	eval_poly@n^(0+256)
 15279  0982  3000               	movlw	0
 15280  0983  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15281  0984  3039               	movlw	low (sin@coeff_a| (0+32768))
 15282  0985  00B7               	movwf	eval_poly@d^(0+256)
 15283  0986  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15284  0987  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15285  0988  0848               	movf	sin@x2^(0+256),w
 15286  0989  00B4               	movwf	eval_poly@x^(0+256)
 15287  098A  0849               	movf	(sin@x2+1)^(0+256),w
 15288  098B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15289  098C  084A               	movf	(sin@x2+2)^(0+256),w
 15290  098D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15291  098E  31A7  2718  3188   	fcall	_eval_poly
 15292  0991  0022               	movlb	2	; select bank2
 15293  0992  0834               	movf	?_eval_poly^(0+256),w
 15294  0993  0021               	movlb	1	; select bank1
 15295  0994  00D1               	movwf	___ftdiv@f1^(0+128)
 15296  0995  0022               	movlb	2	; select bank2
 15297  0996  0835               	movf	(?_eval_poly+1)^(0+256),w
 15298  0997  0021               	movlb	1	; select bank1
 15299  0998  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15300  0999  0022               	movlb	2	; select bank2
 15301  099A  0836               	movf	(?_eval_poly+2)^(0+256),w
 15302  099B  0021               	movlb	1	; select bank1
 15303  099C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15304  099D  0022               	movlb	2	; select bank2
 15305  099E  0842               	movf	sin@y^(0+256),w
 15306  099F  0021               	movlb	1	; select bank1
 15307  09A0  00CE               	movwf	___ftdiv@f2^(0+128)
 15308  09A1  0022               	movlb	2	; select bank2
 15309  09A2  0843               	movf	(sin@y+1)^(0+256),w
 15310  09A3  0021               	movlb	1	; select bank1
 15311  09A4  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15312  09A5  0022               	movlb	2	; select bank2
 15313  09A6  0844               	movf	(sin@y+2)^(0+256),w
 15314  09A7  0021               	movlb	1	; select bank1
 15315  09A8  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15316  09A9  319D  2528  3188   	fcall	___ftdiv
 15317  09AC  0021               	movlb	1	; select bank1
 15318  09AD  084E               	movf	?___ftdiv^(0+128),w
 15319  09AE  0022               	movlb	2	; select bank2
 15320  09AF  00C5               	movwf	_sin$2853^(0+256)
 15321  09B0  0021               	movlb	1	; select bank1
 15322  09B1  084F               	movf	(?___ftdiv+1)^(0+128),w
 15323  09B2  0022               	movlb	2	; select bank2
 15324  09B3  00C6               	movwf	(_sin$2853+1)^(0+256)
 15325  09B4  0021               	movlb	1	; select bank1
 15326  09B5  0850               	movf	(?___ftdiv+2)^(0+128),w
 15327  09B6  0022               	movlb	2	; select bank2
 15328  09B7  00C7               	movwf	(_sin$2853+2)^(0+256)
 15329  09B8  0845               	movf	_sin$2853^(0+256),w
 15330  09B9  0021               	movlb	1	; select bank1
 15331  09BA  00AE               	movwf	___ftmul@f1^(0+128)
 15332  09BB  0022               	movlb	2	; select bank2
 15333  09BC  0846               	movf	(_sin$2853+1)^(0+256),w
 15334  09BD  0021               	movlb	1	; select bank1
 15335  09BE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15336  09BF  0022               	movlb	2	; select bank2
 15337  09C0  0847               	movf	(_sin$2853+2)^(0+256),w
 15338  09C1  0021               	movlb	1	; select bank1
 15339  09C2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15340  09C3  0022               	movlb	2	; select bank2
 15341  09C4  083E               	movf	sin@f^(0+256),w
 15342  09C5  0021               	movlb	1	; select bank1
 15343  09C6  00B1               	movwf	___ftmul@f2^(0+128)
 15344  09C7  0022               	movlb	2	; select bank2
 15345  09C8  083F               	movf	(sin@f+1)^(0+256),w
 15346  09C9  0021               	movlb	1	; select bank1
 15347  09CA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15348  09CB  0022               	movlb	2	; select bank2
 15349  09CC  0840               	movf	(sin@f+2)^(0+256),w
 15350  09CD  0021               	movlb	1	; select bank1
 15351  09CE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15352  09CF  3187  2740  3188   	fcall	___ftmul
 15353  09D2  0021               	movlb	1	; select bank1
 15354  09D3  082E               	movf	?___ftmul^(0+128),w
 15355  09D4  0022               	movlb	2	; select bank2
 15356  09D5  00BE               	movwf	sin@f^(0+256)
 15357  09D6  0021               	movlb	1	; select bank1
 15358  09D7  082F               	movf	(?___ftmul+1)^(0+128),w
 15359  09D8  0022               	movlb	2	; select bank2
 15360  09D9  00BF               	movwf	(sin@f+1)^(0+256)
 15361  09DA  0021               	movlb	1	; select bank1
 15362  09DB  0830               	movf	(?___ftmul+2)^(0+128),w
 15363  09DC  0022               	movlb	2	; select bank2
 15364  09DD  00C0               	movwf	(sin@f+2)^(0+256)
 15365  09DE  084B               	movf	sin@sgn^(0+256),w
 15366  09DF  1903               	btfsc	3,2
 15367  09E0  0008               	return
 15368  09E1  083E               	movf	sin@f^(0+256),w
 15369  09E2  0021               	movlb	1	; select bank1
 15370  09E3  00BE               	movwf	___ftneg@f1^(0+128)
 15371  09E4  0022               	movlb	2	; select bank2
 15372  09E5  083F               	movf	(sin@f+1)^(0+256),w
 15373  09E6  0021               	movlb	1	; select bank1
 15374  09E7  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15375  09E8  0022               	movlb	2	; select bank2
 15376  09E9  0840               	movf	(sin@f+2)^(0+256),w
 15377  09EA  0021               	movlb	1	; select bank1
 15378  09EB  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15379  09EC  31AE  261F         	fcall	___ftneg
 15380  09EE  0021               	movlb	1	; select bank1
 15381  09EF  083E               	movf	?___ftneg^(0+128),w
 15382  09F0  0022               	movlb	2	; select bank2
 15383  09F1  00BE               	movwf	?_sin^(0+256)
 15384  09F2  0021               	movlb	1	; select bank1
 15385  09F3  083F               	movf	(?___ftneg+1)^(0+128),w
 15386  09F4  0022               	movlb	2	; select bank2
 15387  09F5  00BF               	movwf	(?_sin+1)^(0+256)
 15388  09F6  0021               	movlb	1	; select bank1
 15389  09F7  0840               	movf	(?___ftneg+2)^(0+128),w
 15390  09F8  0022               	movlb	2	; select bank2
 15391  09F9  00C0               	movwf	(?_sin+2)^(0+256)
 15392  09FA  0008               	return
 15393  09FB                     __end_of_sin:	
 15394                           
 15395                           	psect	text46
 15396  1E7C                     __ptext46:	
 15397 ;; *************** function _floor *****************
 15398 ;; Defined at:
 15399 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15400 ;; Parameters:    Size  Location     Type
 15401 ;;  x               3   14[BANK2 ] unsigned char 
 15402 ;; Auto vars:     Size  Location     Type
 15403 ;;  i               3   18[BANK2 ] unsigned char 
 15404 ;;  expon           2   21[BANK2 ] int 
 15405 ;; Return value:  Size  Location     Type
 15406 ;;                  3   14[BANK2 ] int 
 15407 ;; Registers used:
 15408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15409 ;; Tracked objects:
 15410 ;;		On entry : 0/0
 15411 ;;		On exit  : 0/0
 15412 ;;		Unchanged: 0/0
 15413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15414 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15415 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15416 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15417 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15418 ;;Total ram usage:        9 bytes
 15419 ;; Hardware stack levels used:    1
 15420 ;; Hardware stack levels required when called:    5
 15421 ;; This function calls:
 15422 ;;		___altoft
 15423 ;;		___ftadd
 15424 ;;		___ftge
 15425 ;;		___fttol
 15426 ;;		_frexp
 15427 ;; This function is called by:
 15428 ;;		_sin
 15429 ;;		_exp
 15430 ;; This function uses a non-reentrant model
 15431 ;;
 15432                           
 15433                           
 15434                           ;psect for function _floor
 15435  1E7C                     _floor:	
 15436                           
 15437                           ;incstack = 0
 15438                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15439  1E7C  0022               	movlb	2	; select bank2
 15440  1E7D  082E               	movf	floor@x^(0+256),w
 15441  1E7E  0021               	movlb	1	; select bank1
 15442  1E7F  00A0               	movwf	frexp@value^(0+128)
 15443  1E80  0022               	movlb	2	; select bank2
 15444  1E81  082F               	movf	(floor@x+1)^(0+256),w
 15445  1E82  0021               	movlb	1	; select bank1
 15446  1E83  00A1               	movwf	(frexp@value+1)^(0+128)
 15447  1E84  0022               	movlb	2	; select bank2
 15448  1E85  0830               	movf	(floor@x+2)^(0+256),w
 15449  1E86  0021               	movlb	1	; select bank1
 15450  1E87  00A2               	movwf	(frexp@value+2)^(0+128)
 15451  1E88  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15452  1E89  0022               	movlb	2	; select bank2
 15453  1E8A  00B1               	movwf	??_floor^(0+256)
 15454  1E8B  0831               	movf	??_floor^(0+256),w
 15455  1E8C  0021               	movlb	1	; select bank1
 15456  1E8D  00A3               	movwf	frexp@eptr^(0+128)
 15457  1E8E  31A2  22F3  319E   	fcall	_frexp
 15458  1E91  0022               	movlb	2	; select bank2
 15459  1E92  1FB6               	btfss	(floor@expon+1)^(0+256),7
 15460  1E93  2EBA               	goto	l8060
 15461  1E94  082E               	movf	floor@x^(0+256),w
 15462  1E95  0021               	movlb	1	; select bank1
 15463  1E96  00A0               	movwf	___ftge@ff1^(0+128)
 15464  1E97  0022               	movlb	2	; select bank2
 15465  1E98  082F               	movf	(floor@x+1)^(0+256),w
 15466  1E99  0021               	movlb	1	; select bank1
 15467  1E9A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15468  1E9B  0022               	movlb	2	; select bank2
 15469  1E9C  0830               	movf	(floor@x+2)^(0+256),w
 15470  1E9D  0021               	movlb	1	; select bank1
 15471  1E9E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15472  1E9F  3000               	movlw	0
 15473  1EA0  00A3               	movwf	___ftge@ff2^(0+128)
 15474  1EA1  3000               	movlw	0
 15475  1EA2  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15476  1EA3  3000               	movlw	0
 15477  1EA4  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15478  1EA5  31A2  2200  319E   	fcall	___ftge
 15479  1EA8  1803               	btfsc	3,0
 15480  1EA9  2EB2               	goto	l8056
 15481  1EAA  3000               	movlw	0
 15482  1EAB  0022               	movlb	2	; select bank2
 15483  1EAC  00AE               	movwf	?_floor^(0+256)
 15484  1EAD  3080               	movlw	128
 15485  1EAE  00AF               	movwf	(?_floor+1)^(0+256)
 15486  1EAF  30BF               	movlw	191
 15487  1EB0  00B0               	movwf	(?_floor+2)^(0+256)
 15488  1EB1  0008               	return
 15489  1EB2                     l8056:	
 15490  1EB2  3000               	movlw	0
 15491  1EB3  0022               	movlb	2	; select bank2
 15492  1EB4  00AE               	movwf	?_floor^(0+256)
 15493  1EB5  3000               	movlw	0
 15494  1EB6  00AF               	movwf	(?_floor+1)^(0+256)
 15495  1EB7  3000               	movlw	0
 15496  1EB8  00B0               	movwf	(?_floor+2)^(0+256)
 15497  1EB9  0008               	return
 15498  1EBA                     l8060:	
 15499  1EBA  3000               	movlw	0
 15500  1EBB  0236               	subwf	(floor@expon+1)^(0+256),w
 15501  1EBC  3015               	movlw	21
 15502  1EBD  1903               	skipnz
 15503  1EBE  0235               	subwf	floor@expon^(0+256),w
 15504  1EBF  1803               	btfsc	3,0
 15505  1EC0  0008               	return
 15506  1EC1  082E               	movf	floor@x^(0+256),w
 15507  1EC2  00A0               	movwf	___fttol@f1^(0+256)
 15508  1EC3  082F               	movf	(floor@x+1)^(0+256),w
 15509  1EC4  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15510  1EC5  0830               	movf	(floor@x+2)^(0+256),w
 15511  1EC6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15512  1EC7  319A  2263  319E   	fcall	___fttol
 15513  1ECA  0022               	movlb	2	; select bank2
 15514  1ECB  0823               	movf	(?___fttol+3)^(0+256),w
 15515  1ECC  0021               	movlb	1	; select bank1
 15516  1ECD  00AB               	movwf	(___altoft@c+3)^(0+128)
 15517  1ECE  0022               	movlb	2	; select bank2
 15518  1ECF  0822               	movf	(?___fttol+2)^(0+256),w
 15519  1ED0  0021               	movlb	1	; select bank1
 15520  1ED1  00AA               	movwf	(___altoft@c+2)^(0+128)
 15521  1ED2  0022               	movlb	2	; select bank2
 15522  1ED3  0821               	movf	(?___fttol+1)^(0+256),w
 15523  1ED4  0021               	movlb	1	; select bank1
 15524  1ED5  00A9               	movwf	(___altoft@c+1)^(0+128)
 15525  1ED6  0022               	movlb	2	; select bank2
 15526  1ED7  0820               	movf	?___fttol^(0+256),w
 15527  1ED8  0021               	movlb	1	; select bank1
 15528  1ED9  00A8               	movwf	___altoft@c^(0+128)
 15529  1EDA  31A2  223C  319E   	fcall	___altoft
 15530  1EDD  0021               	movlb	1	; select bank1
 15531  1EDE  0828               	movf	?___altoft^(0+128),w
 15532  1EDF  0022               	movlb	2	; select bank2
 15533  1EE0  00B2               	movwf	floor@i^(0+256)
 15534  1EE1  0021               	movlb	1	; select bank1
 15535  1EE2  0829               	movf	(?___altoft+1)^(0+128),w
 15536  1EE3  0022               	movlb	2	; select bank2
 15537  1EE4  00B3               	movwf	(floor@i+1)^(0+256)
 15538  1EE5  0021               	movlb	1	; select bank1
 15539  1EE6  082A               	movf	(?___altoft+2)^(0+128),w
 15540  1EE7  0022               	movlb	2	; select bank2
 15541  1EE8  00B4               	movwf	(floor@i+2)^(0+256)
 15542  1EE9  082E               	movf	floor@x^(0+256),w
 15543  1EEA  0021               	movlb	1	; select bank1
 15544  1EEB  00A0               	movwf	___ftge@ff1^(0+128)
 15545  1EEC  0022               	movlb	2	; select bank2
 15546  1EED  082F               	movf	(floor@x+1)^(0+256),w
 15547  1EEE  0021               	movlb	1	; select bank1
 15548  1EEF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15549  1EF0  0022               	movlb	2	; select bank2
 15550  1EF1  0830               	movf	(floor@x+2)^(0+256),w
 15551  1EF2  0021               	movlb	1	; select bank1
 15552  1EF3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15553  1EF4  0022               	movlb	2	; select bank2
 15554  1EF5  0832               	movf	floor@i^(0+256),w
 15555  1EF6  0021               	movlb	1	; select bank1
 15556  1EF7  00A3               	movwf	___ftge@ff2^(0+128)
 15557  1EF8  0022               	movlb	2	; select bank2
 15558  1EF9  0833               	movf	(floor@i+1)^(0+256),w
 15559  1EFA  0021               	movlb	1	; select bank1
 15560  1EFB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15561  1EFC  0022               	movlb	2	; select bank2
 15562  1EFD  0834               	movf	(floor@i+2)^(0+256),w
 15563  1EFE  0021               	movlb	1	; select bank1
 15564  1EFF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15565  1F00  31A2  2200  319E   	fcall	___ftge
 15566  1F03  1803               	btfsc	3,0
 15567  1F04  2F27               	goto	l8070
 15568  1F05  3000               	movlw	0
 15569  1F06  0021               	movlb	1	; select bank1
 15570  1F07  00C1               	movwf	___ftadd@f1^(0+128)
 15571  1F08  3080               	movlw	128
 15572  1F09  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15573  1F0A  30BF               	movlw	191
 15574  1F0B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15575  1F0C  0022               	movlb	2	; select bank2
 15576  1F0D  0832               	movf	floor@i^(0+256),w
 15577  1F0E  0021               	movlb	1	; select bank1
 15578  1F0F  00C4               	movwf	___ftadd@f2^(0+128)
 15579  1F10  0022               	movlb	2	; select bank2
 15580  1F11  0833               	movf	(floor@i+1)^(0+256),w
 15581  1F12  0021               	movlb	1	; select bank1
 15582  1F13  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15583  1F14  0022               	movlb	2	; select bank2
 15584  1F15  0834               	movf	(floor@i+2)^(0+256),w
 15585  1F16  0021               	movlb	1	; select bank1
 15586  1F17  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15587  1F18  3190  201F         	fcall	___ftadd
 15588  1F1A  0021               	movlb	1	; select bank1
 15589  1F1B  0841               	movf	?___ftadd^(0+128),w
 15590  1F1C  0022               	movlb	2	; select bank2
 15591  1F1D  00AE               	movwf	?_floor^(0+256)
 15592  1F1E  0021               	movlb	1	; select bank1
 15593  1F1F  0842               	movf	(?___ftadd+1)^(0+128),w
 15594  1F20  0022               	movlb	2	; select bank2
 15595  1F21  00AF               	movwf	(?_floor+1)^(0+256)
 15596  1F22  0021               	movlb	1	; select bank1
 15597  1F23  0843               	movf	(?___ftadd+2)^(0+128),w
 15598  1F24  0022               	movlb	2	; select bank2
 15599  1F25  00B0               	movwf	(?_floor+2)^(0+256)
 15600  1F26  0008               	return
 15601  1F27                     l8070:	
 15602  1F27  0022               	movlb	2	; select bank2
 15603  1F28  0832               	movf	floor@i^(0+256),w
 15604  1F29  00AE               	movwf	?_floor^(0+256)
 15605  1F2A  0833               	movf	(floor@i+1)^(0+256),w
 15606  1F2B  00AF               	movwf	(?_floor+1)^(0+256)
 15607  1F2C  0834               	movf	(floor@i+2)^(0+256),w
 15608  1F2D  00B0               	movwf	(?_floor+2)^(0+256)
 15609  1F2E  0008               	return
 15610  1F2F                     __end_of_floor:	
 15611                           
 15612                           	psect	text47
 15613  22F3                     __ptext47:	
 15614 ;; *************** function _frexp *****************
 15615 ;; Defined at:
 15616 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15617 ;; Parameters:    Size  Location     Type
 15618 ;;  value           3    0[BANK1 ] int 
 15619 ;;  eptr            1    3[BANK1 ] PTR int 
 15620 ;;		 -> log@exponent(2), floor@expon(2), 
 15621 ;; Auto vars:     Size  Location     Type
 15622 ;;		None
 15623 ;; Return value:  Size  Location     Type
 15624 ;;                  3    0[BANK1 ] PTR int 
 15625 ;; Registers used:
 15626 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15627 ;; Tracked objects:
 15628 ;;		On entry : 0/0
 15629 ;;		On exit  : 0/0
 15630 ;;		Unchanged: 0/0
 15631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15632 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15634 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15635 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15636 ;;Total ram usage:        6 bytes
 15637 ;; Hardware stack levels used:    1
 15638 ;; Hardware stack levels required when called:    3
 15639 ;; This function calls:
 15640 ;;		Nothing
 15641 ;; This function is called by:
 15642 ;;		_floor
 15643 ;;		_log
 15644 ;; This function uses a non-reentrant model
 15645 ;;
 15646                           
 15647                           
 15648                           ;psect for function _frexp
 15649  22F3                     _frexp:	
 15650                           
 15651                           ;incstack = 0
 15652                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15653  22F3  0021               	movlb	1	; select bank1
 15654  22F4  0822               	movf	(frexp@value+2)^(0+128),w
 15655  22F5  0421               	iorwf	(frexp@value+1)^(0+128),w
 15656  22F6  0420               	iorwf	frexp@value^(0+128),w
 15657  22F7  1D03               	skipz
 15658  22F8  2B07               	goto	l7922
 15659  22F9  0823               	movf	frexp@eptr^(0+128),w
 15660  22FA  0086               	movwf	6
 15661  22FB  3001               	movlw	1	; select bank2/3
 15662  22FC  0087               	movwf	7
 15663  22FD  3000               	movlw	0
 15664  22FE  3FC0               	movwi [0]fsr1
 15665  22FF  3FC1               	movwi [1]fsr1
 15666  2300  3000               	movlw	0
 15667  2301  00A0               	movwf	?_frexp^(0+128)
 15668  2302  3000               	movlw	0
 15669  2303  00A1               	movwf	(?_frexp+1)^(0+128)
 15670  2304  3000               	movlw	0
 15671  2305  00A2               	movwf	(?_frexp+2)^(0+128)
 15672  2306  0008               	return
 15673  2307                     l7922:	
 15674  2307  0822               	movf	(frexp@value^(0+128)+2),w
 15675  2308  397F               	andlw	127
 15676  2309  00A4               	movwf	??_frexp^(0+128)
 15677  230A  01A5               	clrf	(??_frexp^(0+128)+1)
 15678  230B  35A4               	lslf	??_frexp^(0+128),f
 15679  230C  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15680  230D  0823               	movf	frexp@eptr^(0+128),w
 15681  230E  0086               	movwf	6
 15682  230F  3001               	movlw	1	; select bank2/3
 15683  2310  0087               	movwf	7
 15684  2311  0824               	movf	??_frexp^(0+128),w
 15685  2312  3FC0               	movwi [0]fsr1
 15686  2313  0825               	movf	(??_frexp+1)^(0+128),w
 15687  2314  3FC1               	movwi [1]fsr1
 15688  2315  0D21               	rlf	(frexp@value^(0+128)+1),w
 15689  2316  0D21               	rlf	(frexp@value^(0+128)+1),w
 15690  2317  3901               	andlw	1
 15691  2318  00A4               	movwf	??_frexp^(0+128)
 15692  2319  01A5               	clrf	(??_frexp^(0+128)+1)
 15693  231A  0823               	movf	frexp@eptr^(0+128),w
 15694  231B  0086               	movwf	6
 15695  231C  3001               	movlw	1	; select bank2/3
 15696  231D  0087               	movwf	7
 15697  231E  0824               	movf	??_frexp^(0+128),w
 15698  231F  0481               	iorwf	1,f
 15699  2320  3141               	addfsr 1,1
 15700  2321  0825               	movf	(??_frexp+1)^(0+128),w
 15701  2322  0481               	iorwf	1,f
 15702  2323  0823               	movf	frexp@eptr^(0+128),w
 15703  2324  0086               	movwf	6
 15704  2325  3001               	movlw	1	; select bank2/3
 15705  2326  0087               	movwf	7
 15706  2327  3082               	movlw	130
 15707  2328  0781               	addwf	1,f
 15708  2329  3141               	addfsr 1,1
 15709  232A  30FF               	movlw	255
 15710  232B  3D81               	addwfc	1,f
 15711  232C  317F               	addfsr 1,-1
 15712  232D  0822               	movf	(frexp@value^(0+128)+2),w
 15713  232E  3980               	andlw	-128
 15714  232F  383F               	iorlw	63
 15715  2330  00A2               	movwf	(frexp@value^(0+128)+2)
 15716  2331  13A1               	bcf	(frexp@value^(0+128)+1),7
 15717  2332  0008               	return
 15718  2333                     __end_of_frexp:	
 15719                           
 15720                           	psect	text48
 15721  1A63                     __ptext48:	
 15722 ;; *************** function ___fttol *****************
 15723 ;; Defined at:
 15724 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15725 ;; Parameters:    Size  Location     Type
 15726 ;;  f1              3    0[BANK2 ] float 
 15727 ;; Auto vars:     Size  Location     Type
 15728 ;;  lval            4    9[BANK2 ] unsigned long 
 15729 ;;  exp1            1   13[BANK2 ] unsigned char 
 15730 ;;  sign1           1    8[BANK2 ] unsigned char 
 15731 ;; Return value:  Size  Location     Type
 15732 ;;                  4    0[BANK2 ] long 
 15733 ;; Registers used:
 15734 ;;		wreg, status,2, status,0
 15735 ;; Tracked objects:
 15736 ;;		On entry : 0/0
 15737 ;;		On exit  : 0/0
 15738 ;;		Unchanged: 0/0
 15739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15740 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15741 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15742 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15743 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15744 ;;Total ram usage:       14 bytes
 15745 ;; Hardware stack levels used:    1
 15746 ;; Hardware stack levels required when called:    3
 15747 ;; This function calls:
 15748 ;;		Nothing
 15749 ;; This function is called by:
 15750 ;;		_main
 15751 ;;		_set_subdivision
 15752 ;;		_scaleA100kPot
 15753 ;;		_scaleA10kPot
 15754 ;;		_scaleiA10kPot
 15755 ;;		_getModulationDelayTime
 15756 ;;		_modSin
 15757 ;;		_modTri
 15758 ;;		_modSaw
 15759 ;;		_pow
 15760 ;;		_exp
 15761 ;;		_floor
 15762 ;;		_scaleiA100kPot
 15763 ;; This function uses a non-reentrant model
 15764 ;;
 15765                           
 15766                           
 15767                           ;psect for function ___fttol
 15768  1A63                     ___fttol:	
 15769                           
 15770                           ;incstack = 0
 15771                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15772  1A63  0022               	movlb	2	; select bank2
 15773  1A64  0820               	movf	___fttol@f1^(0+256),w
 15774  1A65  00A4               	movwf	??___fttol^(0+256)
 15775  1A66  0821               	movf	(___fttol@f1+1)^(0+256),w
 15776  1A67  00A5               	movwf	(??___fttol^(0+256)+1)
 15777  1A68  0822               	movf	(___fttol@f1+2)^(0+256),w
 15778  1A69  00A6               	movwf	(??___fttol^(0+256)+2)
 15779  1A6A  1003               	clrc
 15780  1A6B  0D25               	rlf	(??___fttol^(0+256)+1),w
 15781  1A6C  0D26               	rlf	(??___fttol^(0+256)+2),w
 15782  1A6D  00A7               	movwf	(??___fttol+3)^(0+256)
 15783  1A6E  0827               	movf	(??___fttol+3)^(0+256),w
 15784  1A6F  00AD               	movwf	___fttol@exp1^(0+256)
 15785  1A70  082D               	movf	___fttol@exp1^(0+256),w
 15786  1A71  1D03               	btfss	3,2
 15787  1A72  2A7C               	goto	l7878
 15788  1A73  3000               	movlw	0
 15789  1A74  00A3               	movwf	(?___fttol+3)^(0+256)
 15790  1A75  3000               	movlw	0
 15791  1A76  00A2               	movwf	(?___fttol+2)^(0+256)
 15792  1A77  3000               	movlw	0
 15793  1A78  00A1               	movwf	(?___fttol+1)^(0+256)
 15794  1A79  3000               	movlw	0
 15795  1A7A  00A0               	movwf	?___fttol^(0+256)
 15796  1A7B  0008               	return
 15797  1A7C                     l7878:	
 15798  1A7C  0820               	movf	___fttol@f1^(0+256),w
 15799  1A7D  00A4               	movwf	??___fttol^(0+256)
 15800  1A7E  0821               	movf	(___fttol@f1+1)^(0+256),w
 15801  1A7F  00A5               	movwf	(??___fttol^(0+256)+1)
 15802  1A80  0822               	movf	(___fttol@f1+2)^(0+256),w
 15803  1A81  00A6               	movwf	(??___fttol^(0+256)+2)
 15804  1A82  3017               	movlw	23
 15805  1A83                     u8245:	
 15806  1A83  36A6               	lsrf	(??___fttol^(0+256)+2),f
 15807  1A84  0CA5               	rrf	(??___fttol^(0+256)+1),f
 15808  1A85  0CA4               	rrf	??___fttol^(0+256),f
 15809  1A86  0B89               	decfsz	9,f
 15810  1A87  2A83               	goto	u8245
 15811  1A88  0824               	movf	??___fttol^(0+256),w
 15812  1A89  00A7               	movwf	(??___fttol+3)^(0+256)
 15813  1A8A  0827               	movf	(??___fttol+3)^(0+256),w
 15814  1A8B  00A8               	movwf	___fttol@sign1^(0+256)
 15815  1A8C  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 15816  1A8D  30FF               	movlw	255
 15817  1A8E  05A0               	andwf	___fttol@f1^(0+256),f
 15818  1A8F  30FF               	movlw	255
 15819  1A90  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 15820  1A91  3000               	movlw	0
 15821  1A92  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 15822  1A93  0820               	movf	___fttol@f1^(0+256),w
 15823  1A94  00A9               	movwf	___fttol@lval^(0+256)
 15824  1A95  0821               	movf	(___fttol@f1+1)^(0+256),w
 15825  1A96  00AA               	movwf	(___fttol@lval^(0+256)+1)
 15826  1A97  0822               	movf	(___fttol@f1+2)^(0+256),w
 15827  1A98  00AB               	movwf	(___fttol@lval^(0+256)+2)
 15828  1A99  01AC               	clrf	(___fttol@lval^(0+256)+3)
 15829  1A9A  308E               	movlw	142
 15830  1A9B  02AD               	subwf	___fttol@exp1^(0+256),f
 15831  1A9C  1FAD               	btfss	___fttol@exp1^(0+256),7
 15832  1A9D  2ABA               	goto	l7898
 15833  1A9E  082D               	movf	___fttol@exp1^(0+256),w
 15834  1A9F  3A80               	xorlw	128
 15835  1AA0  3E8F               	addlw	143
 15836  1AA1  1803               	skipnc
 15837  1AA2  2AAC               	goto	l7896
 15838  1AA3  3000               	movlw	0
 15839  1AA4  00A3               	movwf	(?___fttol+3)^(0+256)
 15840  1AA5  3000               	movlw	0
 15841  1AA6  00A2               	movwf	(?___fttol+2)^(0+256)
 15842  1AA7  3000               	movlw	0
 15843  1AA8  00A1               	movwf	(?___fttol+1)^(0+256)
 15844  1AA9  3000               	movlw	0
 15845  1AAA  00A0               	movwf	?___fttol^(0+256)
 15846  1AAB  0008               	return
 15847  1AAC                     l7896:	
 15848  1AAC  3001               	movlw	1
 15849  1AAD                     u8275:	
 15850  1AAD  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 15851  1AAE  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 15852  1AAF  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 15853  1AB0  0CA9               	rrf	___fttol@lval^(0+256),f
 15854  1AB1  0B89               	decfsz	9,f
 15855  1AB2  2AAD               	goto	u8275
 15856  1AB3  3001               	movlw	1
 15857  1AB4  00A4               	movwf	??___fttol^(0+256)
 15858  1AB5  0824               	movf	??___fttol^(0+256),w
 15859  1AB6  07AD               	addwf	___fttol@exp1^(0+256),f
 15860  1AB7  1903               	btfsc	3,2
 15861  1AB8  2AD3               	goto	l7906
 15862  1AB9  2AAC               	goto	l7896
 15863  1ABA                     l7898:	
 15864  1ABA  3018               	movlw	24
 15865  1ABB  022D               	subwf	___fttol@exp1^(0+256),w
 15866  1ABC  1C03               	skipc
 15867  1ABD  2AD0               	goto	l2212
 15868  1ABE  3000               	movlw	0
 15869  1ABF  00A3               	movwf	(?___fttol+3)^(0+256)
 15870  1AC0  3000               	movlw	0
 15871  1AC1  00A2               	movwf	(?___fttol+2)^(0+256)
 15872  1AC2  3000               	movlw	0
 15873  1AC3  00A1               	movwf	(?___fttol+1)^(0+256)
 15874  1AC4  3000               	movlw	0
 15875  1AC5  00A0               	movwf	?___fttol^(0+256)
 15876  1AC6  0008               	return
 15877  1AC7                     l7904:	
 15878  1AC7  3001               	movlw	1
 15879  1AC8                     u8305:	
 15880  1AC8  35A9               	lslf	___fttol@lval^(0+256),f
 15881  1AC9  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 15882  1ACA  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 15883  1ACB  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 15884  1ACC  0B89               	decfsz	9,f
 15885  1ACD  2AC8               	goto	u8305
 15886  1ACE  3001               	movlw	1
 15887  1ACF  02AD               	subwf	___fttol@exp1^(0+256),f
 15888  1AD0                     l2212:	
 15889  1AD0  082D               	movf	___fttol@exp1^(0+256),w
 15890  1AD1  1D03               	btfss	3,2
 15891  1AD2  2AC7               	goto	l7904
 15892  1AD3                     l7906:	
 15893  1AD3  0828               	movf	___fttol@sign1^(0+256),w
 15894  1AD4  1903               	btfsc	3,2
 15895  1AD5  2AE1               	goto	l7910
 15896  1AD6  09A9               	comf	___fttol@lval^(0+256),f
 15897  1AD7  09AA               	comf	(___fttol@lval+1)^(0+256),f
 15898  1AD8  09AB               	comf	(___fttol@lval+2)^(0+256),f
 15899  1AD9  09AC               	comf	(___fttol@lval+3)^(0+256),f
 15900  1ADA  0AA9               	incf	___fttol@lval^(0+256),f
 15901  1ADB  1903               	skipnz
 15902  1ADC  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 15903  1ADD  1903               	skipnz
 15904  1ADE  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 15905  1ADF  1903               	skipnz
 15906  1AE0  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 15907  1AE1                     l7910:	
 15908  1AE1  082C               	movf	(___fttol@lval+3)^(0+256),w
 15909  1AE2  00A3               	movwf	(?___fttol+3)^(0+256)
 15910  1AE3  082B               	movf	(___fttol@lval+2)^(0+256),w
 15911  1AE4  00A2               	movwf	(?___fttol+2)^(0+256)
 15912  1AE5  082A               	movf	(___fttol@lval+1)^(0+256),w
 15913  1AE6  00A1               	movwf	(?___fttol+1)^(0+256)
 15914  1AE7  0829               	movf	___fttol@lval^(0+256),w
 15915  1AE8  00A0               	movwf	?___fttol^(0+256)
 15916  1AE9  0008               	return
 15917  1AEA                     __end_of___fttol:	
 15918                           
 15919                           	psect	text49
 15920  2200                     __ptext49:	
 15921 ;; *************** function ___ftge *****************
 15922 ;; Defined at:
 15923 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 15924 ;; Parameters:    Size  Location     Type
 15925 ;;  ff1             3    0[BANK1 ] float 
 15926 ;;  ff2             3    3[BANK1 ] float 
 15927 ;; Auto vars:     Size  Location     Type
 15928 ;;		None
 15929 ;; Return value:  Size  Location     Type
 15930 ;;		None               void
 15931 ;; Registers used:
 15932 ;;		wreg, status,2, status,0
 15933 ;; Tracked objects:
 15934 ;;		On entry : 0/0
 15935 ;;		On exit  : 0/0
 15936 ;;		Unchanged: 0/0
 15937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15938 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15940 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15941 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15942 ;;Total ram usage:        9 bytes
 15943 ;; Hardware stack levels used:    1
 15944 ;; Hardware stack levels required when called:    3
 15945 ;; This function calls:
 15946 ;;		Nothing
 15947 ;; This function is called by:
 15948 ;;		_modSin
 15949 ;;		_modTri
 15950 ;;		_modSaw
 15951 ;;		_modSquare
 15952 ;;		_pow
 15953 ;;		_sin
 15954 ;;		_exp
 15955 ;;		_floor
 15956 ;;		_ldexp
 15957 ;;		_log
 15958 ;; This function uses a non-reentrant model
 15959 ;;
 15960                           
 15961                           
 15962                           ;psect for function ___ftge
 15963  2200                     ___ftge:	
 15964                           
 15965                           ;incstack = 0
 15966                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 15967  2200  0021               	movlb	1	; select bank1
 15968  2201  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 15969  2202  2A17               	goto	l7798
 15970  2203  0920               	comf	___ftge@ff1^(0+128),w
 15971  2204  00A6               	movwf	??___ftge^(0+128)
 15972  2205  0921               	comf	(___ftge@ff1+1)^(0+128),w
 15973  2206  00A7               	movwf	(??___ftge^(0+128)+1)
 15974  2207  0922               	comf	(___ftge@ff1+2)^(0+128),w
 15975  2208  00A8               	movwf	(??___ftge^(0+128)+2)
 15976  2209  0AA6               	incf	??___ftge^(0+128),f
 15977  220A  1903               	skipnz
 15978  220B  0AA7               	incf	(??___ftge^(0+128)+1),f
 15979  220C  1903               	skipnz
 15980  220D  0AA8               	incf	(??___ftge^(0+128)+2),f
 15981  220E  3000               	movlw	0
 15982  220F  0726               	addwf	??___ftge^(0+128),w
 15983  2210  00A0               	movwf	___ftge@ff1^(0+128)
 15984  2211  3000               	movlw	0
 15985  2212  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15986  2213  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15987  2214  3080               	movlw	128
 15988  2215  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15989  2216  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15990  2217                     l7798:	
 15991  2217  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 15992  2218  2A2D               	goto	l7802
 15993  2219  0923               	comf	___ftge@ff2^(0+128),w
 15994  221A  00A6               	movwf	??___ftge^(0+128)
 15995  221B  0924               	comf	(___ftge@ff2+1)^(0+128),w
 15996  221C  00A7               	movwf	(??___ftge^(0+128)+1)
 15997  221D  0925               	comf	(___ftge@ff2+2)^(0+128),w
 15998  221E  00A8               	movwf	(??___ftge^(0+128)+2)
 15999  221F  0AA6               	incf	??___ftge^(0+128),f
 16000  2220  1903               	skipnz
 16001  2221  0AA7               	incf	(??___ftge^(0+128)+1),f
 16002  2222  1903               	skipnz
 16003  2223  0AA8               	incf	(??___ftge^(0+128)+2),f
 16004  2224  3000               	movlw	0
 16005  2225  0726               	addwf	??___ftge^(0+128),w
 16006  2226  00A3               	movwf	___ftge@ff2^(0+128)
 16007  2227  3000               	movlw	0
 16008  2228  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16009  2229  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16010  222A  3080               	movlw	128
 16011  222B  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16012  222C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16013  222D                     l7802:	
 16014  222D  3080               	movlw	128
 16015  222E  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16016  222F  3080               	movlw	128
 16017  2230  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16018  2231  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16019  2232  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16020  2233  1D03               	skipz
 16021  2234  0008               	return
 16022  2235  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16023  2236  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16024  2237  1D03               	skipz
 16025  2238  0008               	return
 16026  2239  0823               	movf	___ftge@ff2^(0+128),w
 16027  223A  0220               	subwf	___ftge@ff1^(0+128),w
 16028  223B  0008               	return
 16029  223C                     __end_of___ftge:	
 16030                           
 16031                           	psect	text50
 16032  223C                     __ptext50:	
 16033 ;; *************** function ___altoft *****************
 16034 ;; Defined at:
 16035 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16036 ;; Parameters:    Size  Location     Type
 16037 ;;  c               4    8[BANK1 ] long 
 16038 ;; Auto vars:     Size  Location     Type
 16039 ;;  sign            1   15[BANK1 ] unsigned char 
 16040 ;;  exp             1   14[BANK1 ] unsigned char 
 16041 ;; Return value:  Size  Location     Type
 16042 ;;                  3    8[BANK1 ] float 
 16043 ;; Registers used:
 16044 ;;		wreg, status,2, status,0, pclath, cstack
 16045 ;; Tracked objects:
 16046 ;;		On entry : 0/0
 16047 ;;		On exit  : 0/0
 16048 ;;		Unchanged: 0/0
 16049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16050 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16051 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16052 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16053 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16054 ;;Total ram usage:        8 bytes
 16055 ;; Hardware stack levels used:    1
 16056 ;; Hardware stack levels required when called:    4
 16057 ;; This function calls:
 16058 ;;		___ftpack
 16059 ;; This function is called by:
 16060 ;;		_getModulationDelayTime
 16061 ;;		_floor
 16062 ;; This function uses a non-reentrant model
 16063 ;;
 16064                           
 16065                           
 16066                           ;psect for function ___altoft
 16067  223C                     ___altoft:	
 16068                           
 16069                           ;incstack = 0
 16070                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16071  223C  0021               	movlb	1	; select bank1
 16072  223D  01AF               	clrf	___altoft@sign^(0+128)
 16073  223E  308E               	movlw	142
 16074  223F  00AC               	movwf	??___altoft^(0+128)
 16075  2240  082C               	movf	??___altoft^(0+128),w
 16076  2241  00AE               	movwf	___altoft@exp^(0+128)
 16077  2242  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 16078  2243  2A51               	goto	l7718
 16079  2244  09A8               	comf	___altoft@c^(0+128),f
 16080  2245  09A9               	comf	(___altoft@c+1)^(0+128),f
 16081  2246  09AA               	comf	(___altoft@c+2)^(0+128),f
 16082  2247  09AB               	comf	(___altoft@c+3)^(0+128),f
 16083  2248  0AA8               	incf	___altoft@c^(0+128),f
 16084  2249  1903               	skipnz
 16085  224A  0AA9               	incf	(___altoft@c+1)^(0+128),f
 16086  224B  1903               	skipnz
 16087  224C  0AAA               	incf	(___altoft@c+2)^(0+128),f
 16088  224D  1903               	skipnz
 16089  224E  0AAB               	incf	(___altoft@c+3)^(0+128),f
 16090  224F  01AF               	clrf	___altoft@sign^(0+128)
 16091  2250  0AAF               	incf	___altoft@sign^(0+128),f
 16092  2251                     l7718:	
 16093  2251  30FF               	movlw	255
 16094  2252  052B               	andwf	(___altoft@c+3)^(0+128),w
 16095  2253  1903               	btfsc	3,2
 16096  2254  2A61               	goto	l7720
 16097  2255  3001               	movlw	1
 16098  2256                     u7825:	
 16099  2256  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 16100  2257  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 16101  2258  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 16102  2259  0CA8               	rrf	___altoft@c^(0+128),f
 16103  225A  0B89               	decfsz	9,f
 16104  225B  2A56               	goto	u7825
 16105  225C  3001               	movlw	1
 16106  225D  00AC               	movwf	??___altoft^(0+128)
 16107  225E  082C               	movf	??___altoft^(0+128),w
 16108  225F  07AE               	addwf	___altoft@exp^(0+128),f
 16109  2260  2A51               	goto	l7718
 16110  2261                     l7720:	
 16111  2261  0828               	movf	___altoft@c^(0+128),w
 16112  2262  00A0               	movwf	___ftpack@arg^(0+128)
 16113  2263  0829               	movf	(___altoft@c+1)^(0+128),w
 16114  2264  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16115  2265  082A               	movf	(___altoft@c+2)^(0+128),w
 16116  2266  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16117  2267  082E               	movf	___altoft@exp^(0+128),w
 16118  2268  00AC               	movwf	??___altoft^(0+128)
 16119  2269  082C               	movf	??___altoft^(0+128),w
 16120  226A  00A3               	movwf	___ftpack@exp^(0+128)
 16121  226B  082F               	movf	___altoft@sign^(0+128),w
 16122  226C  00AD               	movwf	(??___altoft+1)^(0+128)
 16123  226D  082D               	movf	(??___altoft+1)^(0+128),w
 16124  226E  00A4               	movwf	___ftpack@sign^(0+128)
 16125  226F  31A6  26B3         	fcall	___ftpack
 16126  2271  0021               	movlb	1	; select bank1
 16127  2272  0820               	movf	?___ftpack^(0+128),w
 16128  2273  00A8               	movwf	?___altoft^(0+128)
 16129  2274  0821               	movf	(?___ftpack+1)^(0+128),w
 16130  2275  00A9               	movwf	(?___altoft+1)^(0+128)
 16131  2276  0822               	movf	(?___ftpack+2)^(0+128),w
 16132  2277  00AA               	movwf	(?___altoft+2)^(0+128)
 16133  2278  0008               	return
 16134  2279                     __end_of___altoft:	
 16135                           
 16136                           	psect	text51
 16137  2718                     __ptext51:	
 16138 ;; *************** function _eval_poly *****************
 16139 ;; Defined at:
 16140 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16141 ;; Parameters:    Size  Location     Type
 16142 ;;  x               3   20[BANK2 ] float 
 16143 ;;  d               2   23[BANK2 ] PTR const 
 16144 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16145 ;;  n               2   25[BANK2 ] int 
 16146 ;; Auto vars:     Size  Location     Type
 16147 ;;  res             3   27[BANK2 ] int 
 16148 ;; Return value:  Size  Location     Type
 16149 ;;                  3   20[BANK2 ] int 
 16150 ;; Registers used:
 16151 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16152 ;; Tracked objects:
 16153 ;;		On entry : 0/0
 16154 ;;		On exit  : 0/0
 16155 ;;		Unchanged: 0/0
 16156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16157 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16158 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16160 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16161 ;;Total ram usage:       10 bytes
 16162 ;; Hardware stack levels used:    1
 16163 ;; Hardware stack levels required when called:    5
 16164 ;; This function calls:
 16165 ;;		___ftadd
 16166 ;;		___ftmul
 16167 ;;		___wmul
 16168 ;; This function is called by:
 16169 ;;		_sin
 16170 ;;		_exp
 16171 ;;		_log
 16172 ;; This function uses a non-reentrant model
 16173 ;;
 16174                           
 16175                           
 16176                           ;psect for function _eval_poly
 16177  2718                     _eval_poly:	
 16178                           
 16179                           ;incstack = 0
 16180                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16181  2718  0022               	movlb	2	; select bank2
 16182  2719  083A               	movf	(eval_poly@n+1)^(0+256),w
 16183  271A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16184  271B  0839               	movf	eval_poly@n^(0+256),w
 16185  271C  00AE               	movwf	___wmul@multiplier^(0+256)
 16186  271D  3003               	movlw	3
 16187  271E  00B0               	movwf	___wmul@multiplicand^(0+256)
 16188  271F  3000               	movlw	0
 16189  2720  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16190  2721  31AE  26CE  31A7   	fcall	___wmul
 16191  2724  0022               	movlb	2	; select bank2
 16192  2725  0837               	movf	eval_poly@d^(0+256),w
 16193  2726  072E               	addwf	?___wmul^(0+256),w
 16194  2727  0084               	movwf	4
 16195  2728  0838               	movf	(eval_poly@d+1)^(0+256),w
 16196  2729  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16197  272A  0085               	movwf	5
 16198  272B  3F00               	moviw [0]fsr0
 16199  272C  00BB               	movwf	eval_poly@res^(0+256)
 16200  272D  3F01               	moviw [1]fsr0
 16201  272E  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16202  272F  3F02               	moviw [2]fsr0
 16203  2730                     L20:	
 16204  2730  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16205  2731  0839               	movf	eval_poly@n^(0+256),w
 16206  2732  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16207  2733  1903               	btfsc	3,2
 16208  2734  2F83               	goto	l8080
 16209  2735  30FF               	movlw	255
 16210  2736  07B9               	addwf	eval_poly@n^(0+256),f
 16211  2737  30FF               	movlw	255
 16212  2738  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16213  2739  083A               	movf	(eval_poly@n+1)^(0+256),w
 16214  273A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16215  273B  0839               	movf	eval_poly@n^(0+256),w
 16216  273C  00AE               	movwf	___wmul@multiplier^(0+256)
 16217  273D  3003               	movlw	3
 16218  273E  00B0               	movwf	___wmul@multiplicand^(0+256)
 16219  273F  3000               	movlw	0
 16220  2740  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16221  2741  31AE  26CE  31A7   	fcall	___wmul
 16222  2744  0022               	movlb	2	; select bank2
 16223  2745  0837               	movf	eval_poly@d^(0+256),w
 16224  2746  072E               	addwf	?___wmul^(0+256),w
 16225  2747  0084               	movwf	4
 16226  2748  0838               	movf	(eval_poly@d+1)^(0+256),w
 16227  2749  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16228  274A  0085               	movwf	5
 16229  274B  3F00               	moviw [0]fsr0
 16230  274C  0021               	movlb	1	; select bank1
 16231  274D  00C1               	movwf	___ftadd@f1^(0+128)
 16232  274E  3F01               	moviw [1]fsr0
 16233  274F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16234  2750  3F02               	moviw [2]fsr0
 16235  2751  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16236  2752  0022               	movlb	2	; select bank2
 16237  2753  083B               	movf	eval_poly@res^(0+256),w
 16238  2754  0021               	movlb	1	; select bank1
 16239  2755  00AE               	movwf	___ftmul@f1^(0+128)
 16240  2756  0022               	movlb	2	; select bank2
 16241  2757  083C               	movf	(eval_poly@res+1)^(0+256),w
 16242  2758  0021               	movlb	1	; select bank1
 16243  2759  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16244  275A  0022               	movlb	2	; select bank2
 16245  275B  083D               	movf	(eval_poly@res+2)^(0+256),w
 16246  275C  0021               	movlb	1	; select bank1
 16247  275D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16248  275E  0022               	movlb	2	; select bank2
 16249  275F  0834               	movf	eval_poly@x^(0+256),w
 16250  2760  0021               	movlb	1	; select bank1
 16251  2761  00B1               	movwf	___ftmul@f2^(0+128)
 16252  2762  0022               	movlb	2	; select bank2
 16253  2763  0835               	movf	(eval_poly@x+1)^(0+256),w
 16254  2764  0021               	movlb	1	; select bank1
 16255  2765  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16256  2766  0022               	movlb	2	; select bank2
 16257  2767  0836               	movf	(eval_poly@x+2)^(0+256),w
 16258  2768  0021               	movlb	1	; select bank1
 16259  2769  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16260  276A  3187  2740  31A7   	fcall	___ftmul
 16261  276D  0021               	movlb	1	; select bank1
 16262  276E  082E               	movf	?___ftmul^(0+128),w
 16263  276F  00C4               	movwf	___ftadd@f2^(0+128)
 16264  2770  082F               	movf	(?___ftmul+1)^(0+128),w
 16265  2771  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16266  2772  0830               	movf	(?___ftmul+2)^(0+128),w
 16267  2773  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16268  2774  3190  201F  31A7   	fcall	___ftadd
 16269  2777  0021               	movlb	1	; select bank1
 16270  2778  0841               	movf	?___ftadd^(0+128),w
 16271  2779  0022               	movlb	2	; select bank2
 16272  277A  00BB               	movwf	eval_poly@res^(0+256)
 16273  277B  0021               	movlb	1	; select bank1
 16274  277C  0842               	movf	(?___ftadd+1)^(0+128),w
 16275  277D  0022               	movlb	2	; select bank2
 16276  277E  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16277  277F  0021               	movlb	1	; select bank1
 16278  2780  0843               	movf	(?___ftadd+2)^(0+128),w
 16279  2781  0022               	movlb	2	; select bank2
 16280  2782  2F30               	goto	L20
 16281  2783                     l8080:	
 16282  2783  083B               	movf	eval_poly@res^(0+256),w
 16283  2784  00B4               	movwf	?_eval_poly^(0+256)
 16284  2785  083C               	movf	(eval_poly@res+1)^(0+256),w
 16285  2786  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16286  2787  083D               	movf	(eval_poly@res+2)^(0+256),w
 16287  2788  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16288  2789  0008               	return
 16289  278A                     __end_of_eval_poly:	
 16290                           
 16291                           	psect	text52
 16292  2ECE                     __ptext52:	
 16293 ;; *************** function ___wmul *****************
 16294 ;; Defined at:
 16295 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16296 ;; Parameters:    Size  Location     Type
 16297 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16298 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16299 ;; Auto vars:     Size  Location     Type
 16300 ;;  product         2   18[BANK2 ] unsigned int 
 16301 ;; Return value:  Size  Location     Type
 16302 ;;                  2   14[BANK2 ] unsigned int 
 16303 ;; Registers used:
 16304 ;;		wreg, status,2, status,0
 16305 ;; Tracked objects:
 16306 ;;		On entry : 0/0
 16307 ;;		On exit  : 0/0
 16308 ;;		Unchanged: 0/0
 16309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16310 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16311 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16313 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16314 ;;Total ram usage:        6 bytes
 16315 ;; Hardware stack levels used:    1
 16316 ;; Hardware stack levels required when called:    3
 16317 ;; This function calls:
 16318 ;;		Nothing
 16319 ;; This function is called by:
 16320 ;;		_calcSinArray
 16321 ;;		_updateModulationArray
 16322 ;;		_modSin
 16323 ;;		_eval_poly
 16324 ;; This function uses a non-reentrant model
 16325 ;;
 16326                           
 16327                           
 16328                           ;psect for function ___wmul
 16329  2ECE                     ___wmul:	
 16330                           
 16331                           ;incstack = 0
 16332                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16333  2ECE  0022               	movlb	2	; select bank2
 16334  2ECF  01B2               	clrf	___wmul@product^(0+256)
 16335  2ED0  01B3               	clrf	(___wmul@product+1)^(0+256)
 16336  2ED1                     l7696:	
 16337  2ED1  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16338  2ED2  2ED7               	goto	l1960
 16339  2ED3  0830               	movf	___wmul@multiplicand^(0+256),w
 16340  2ED4  07B2               	addwf	___wmul@product^(0+256),f
 16341  2ED5  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16342  2ED6  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16343  2ED7                     l1960:	
 16344  2ED7  3001               	movlw	1
 16345  2ED8                     u7785:	
 16346  2ED8  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16347  2ED9  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16348  2EDA  0B89               	decfsz	9,f
 16349  2EDB  2ED8               	goto	u7785
 16350  2EDC  3001               	movlw	1
 16351  2EDD                     u7795:	
 16352  2EDD  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16353  2EDE  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16354  2EDF  0B89               	decfsz	9,f
 16355  2EE0  2EDD               	goto	u7795
 16356  2EE1  082E               	movf	___wmul@multiplier^(0+256),w
 16357  2EE2  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16358  2EE3  1D03               	btfss	3,2
 16359  2EE4  2ED1               	goto	l7696
 16360  2EE5  0833               	movf	(___wmul@product+1)^(0+256),w
 16361  2EE6  00AF               	movwf	(?___wmul+1)^(0+256)
 16362  2EE7  0832               	movf	___wmul@product^(0+256),w
 16363  2EE8  00AE               	movwf	?___wmul^(0+256)
 16364  2EE9  0008               	return
 16365  2EEA                     __end_of___wmul:	
 16366                           
 16367                           	psect	text53
 16368  0740                     __ptext53:	
 16369 ;; *************** function ___ftmul *****************
 16370 ;; Defined at:
 16371 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16372 ;; Parameters:    Size  Location     Type
 16373 ;;  f1              3   14[BANK1 ] float 
 16374 ;;  f2              3   17[BANK1 ] float 
 16375 ;; Auto vars:     Size  Location     Type
 16376 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16377 ;;  sign            1   29[BANK1 ] unsigned char 
 16378 ;;  cntr            1   28[BANK1 ] unsigned char 
 16379 ;;  exp             1   24[BANK1 ] unsigned char 
 16380 ;; Return value:  Size  Location     Type
 16381 ;;                  3   14[BANK1 ] float 
 16382 ;; Registers used:
 16383 ;;		wreg, status,2, status,0, pclath, cstack
 16384 ;; Tracked objects:
 16385 ;;		On entry : 0/0
 16386 ;;		On exit  : 0/0
 16387 ;;		Unchanged: 0/0
 16388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16389 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16390 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16391 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16392 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16393 ;;Total ram usage:       16 bytes
 16394 ;; Hardware stack levels used:    1
 16395 ;; Hardware stack levels required when called:    4
 16396 ;; This function calls:
 16397 ;;		___ftpack
 16398 ;; This function is called by:
 16399 ;;		_set_subdivision
 16400 ;;		_map
 16401 ;;		_scaleA100kPot
 16402 ;;		_scaleA10kPot
 16403 ;;		_scaleiA10kPot
 16404 ;;		_calcSinArray
 16405 ;;		_modSin
 16406 ;;		_modTri
 16407 ;;		_modSaw
 16408 ;;		_pow
 16409 ;;		_sin
 16410 ;;		_eval_poly
 16411 ;;		_exp
 16412 ;;		_log
 16413 ;;		_scalePotValue
 16414 ;;		_scaleiA100kPot
 16415 ;; This function uses a non-reentrant model
 16416 ;;
 16417                           
 16418                           
 16419                           ;psect for function ___ftmul
 16420  0740                     ___ftmul:	
 16421                           
 16422                           ;incstack = 0
 16423                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16424  0740  0021               	movlb	1	; select bank1
 16425  0741  082E               	movf	___ftmul@f1^(0+128),w
 16426  0742  00B4               	movwf	??___ftmul^(0+128)
 16427  0743  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16428  0744  00B5               	movwf	(??___ftmul^(0+128)+1)
 16429  0745  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16430  0746  00B6               	movwf	(??___ftmul^(0+128)+2)
 16431  0747  1003               	clrc
 16432  0748  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16433  0749  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16434  074A  00B7               	movwf	(??___ftmul+3)^(0+128)
 16435  074B  0837               	movf	(??___ftmul+3)^(0+128),w
 16436  074C  00B8               	movwf	___ftmul@exp^(0+128)
 16437  074D  0838               	movf	___ftmul@exp^(0+128),w
 16438  074E  1D03               	btfss	3,2
 16439  074F  2F57               	goto	l7820
 16440  0750  3000               	movlw	0
 16441  0751  00AE               	movwf	?___ftmul^(0+128)
 16442  0752  3000               	movlw	0
 16443  0753  00AF               	movwf	(?___ftmul+1)^(0+128)
 16444  0754  3000               	movlw	0
 16445  0755  00B0               	movwf	(?___ftmul+2)^(0+128)
 16446  0756  0008               	return
 16447  0757                     l7820:	
 16448  0757  0831               	movf	___ftmul@f2^(0+128),w
 16449  0758  00B4               	movwf	??___ftmul^(0+128)
 16450  0759  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16451  075A  00B5               	movwf	(??___ftmul^(0+128)+1)
 16452  075B  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16453  075C  00B6               	movwf	(??___ftmul^(0+128)+2)
 16454  075D  1003               	clrc
 16455  075E  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16456  075F  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16457  0760  00B7               	movwf	(??___ftmul+3)^(0+128)
 16458  0761  0837               	movf	(??___ftmul+3)^(0+128),w
 16459  0762  00BD               	movwf	___ftmul@sign^(0+128)
 16460  0763  083D               	movf	___ftmul@sign^(0+128),w
 16461  0764  1D03               	btfss	3,2
 16462  0765  2F6D               	goto	l7826
 16463  0766  3000               	movlw	0
 16464  0767  00AE               	movwf	?___ftmul^(0+128)
 16465  0768  3000               	movlw	0
 16466  0769  00AF               	movwf	(?___ftmul+1)^(0+128)
 16467  076A  3000               	movlw	0
 16468  076B  00B0               	movwf	(?___ftmul+2)^(0+128)
 16469  076C  0008               	return
 16470  076D                     l7826:	
 16471  076D  083D               	movf	___ftmul@sign^(0+128),w
 16472  076E  3E7B               	addlw	123
 16473  076F  00B4               	movwf	??___ftmul^(0+128)
 16474  0770  0834               	movf	??___ftmul^(0+128),w
 16475  0771  07B8               	addwf	___ftmul@exp^(0+128),f
 16476  0772  082E               	movf	___ftmul@f1^(0+128),w
 16477  0773  00B4               	movwf	??___ftmul^(0+128)
 16478  0774  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16479  0775  00B5               	movwf	(??___ftmul^(0+128)+1)
 16480  0776  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16481  0777  00B6               	movwf	(??___ftmul^(0+128)+2)
 16482  0778  3010               	movlw	16
 16483  0779                     u8125:	
 16484  0779  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16485  077A  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16486  077B  0CB4               	rrf	??___ftmul^(0+128),f
 16487  077C  0B89               	decfsz	9,f
 16488  077D  2F79               	goto	u8125
 16489  077E  0834               	movf	??___ftmul^(0+128),w
 16490  077F  00B7               	movwf	(??___ftmul+3)^(0+128)
 16491  0780  0837               	movf	(??___ftmul+3)^(0+128),w
 16492  0781  00BD               	movwf	___ftmul@sign^(0+128)
 16493  0782  0831               	movf	___ftmul@f2^(0+128),w
 16494  0783  00B4               	movwf	??___ftmul^(0+128)
 16495  0784  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16496  0785  00B5               	movwf	(??___ftmul^(0+128)+1)
 16497  0786  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16498  0787  00B6               	movwf	(??___ftmul^(0+128)+2)
 16499  0788  3010               	movlw	16
 16500  0789                     u8135:	
 16501  0789  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16502  078A  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16503  078B  0CB4               	rrf	??___ftmul^(0+128),f
 16504  078C  0B89               	decfsz	9,f
 16505  078D  2F89               	goto	u8135
 16506  078E  0834               	movf	??___ftmul^(0+128),w
 16507  078F  00B7               	movwf	(??___ftmul+3)^(0+128)
 16508  0790  0837               	movf	(??___ftmul+3)^(0+128),w
 16509  0791  06BD               	xorwf	___ftmul@sign^(0+128),f
 16510  0792  3080               	movlw	128
 16511  0793  00B4               	movwf	??___ftmul^(0+128)
 16512  0794  0834               	movf	??___ftmul^(0+128),w
 16513  0795  05BD               	andwf	___ftmul@sign^(0+128),f
 16514  0796  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16515  0797  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16516  0798  30FF               	movlw	255
 16517  0799  05B1               	andwf	___ftmul@f2^(0+128),f
 16518  079A  30FF               	movlw	255
 16519  079B  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16520  079C  3000               	movlw	0
 16521  079D  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16522  079E  3000               	movlw	0
 16523  079F  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16524  07A0  3000               	movlw	0
 16525  07A1  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16526  07A2  3000               	movlw	0
 16527  07A3  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16528  07A4  3007               	movlw	7
 16529  07A5  00B4               	movwf	??___ftmul^(0+128)
 16530  07A6  0834               	movf	??___ftmul^(0+128),w
 16531  07A7  00BC               	movwf	___ftmul@cntr^(0+128)
 16532  07A8                     l7838:	
 16533  07A8  1C2E               	btfss	___ftmul@f1^(0+128),0
 16534  07A9  2FB0               	goto	l7842
 16535  07AA  0831               	movf	___ftmul@f2^(0+128),w
 16536  07AB  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16537  07AC  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16538  07AD  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16539  07AE  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16540  07AF  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16541  07B0                     l7842:	
 16542  07B0  3001               	movlw	1
 16543  07B1                     u8155:	
 16544  07B1  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16545  07B2  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16546  07B3  0CAE               	rrf	___ftmul@f1^(0+128),f
 16547  07B4  0B89               	decfsz	9,f
 16548  07B5  2FB1               	goto	u8155
 16549  07B6  3001               	movlw	1
 16550  07B7                     u8165:	
 16551  07B7  35B1               	lslf	___ftmul@f2^(0+128),f
 16552  07B8  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16553  07B9  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16554  07BA  0B89               	decfsz	9,f
 16555  07BB  2FB7               	goto	u8165
 16556  07BC  3001               	movlw	1
 16557  07BD  02BC               	subwf	___ftmul@cntr^(0+128),f
 16558  07BE  1D03               	btfss	3,2
 16559  07BF  2FA8               	goto	l7838
 16560  07C0  3009               	movlw	9
 16561  07C1  00B4               	movwf	??___ftmul^(0+128)
 16562  07C2  0834               	movf	??___ftmul^(0+128),w
 16563  07C3  00BC               	movwf	___ftmul@cntr^(0+128)
 16564  07C4                     l7850:	
 16565  07C4  1C2E               	btfss	___ftmul@f1^(0+128),0
 16566  07C5  2FCC               	goto	l7854
 16567  07C6  0831               	movf	___ftmul@f2^(0+128),w
 16568  07C7  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16569  07C8  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16570  07C9  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16571  07CA  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16572  07CB  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16573  07CC                     l7854:	
 16574  07CC  3001               	movlw	1
 16575  07CD                     u8195:	
 16576  07CD  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16577  07CE  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16578  07CF  0CAE               	rrf	___ftmul@f1^(0+128),f
 16579  07D0  0B89               	decfsz	9,f
 16580  07D1  2FCD               	goto	u8195
 16581  07D2  3001               	movlw	1
 16582  07D3                     u8205:	
 16583  07D3  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16584  07D4  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16585  07D5  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16586  07D6  0B89               	decfsz	9,f
 16587  07D7  2FD3               	goto	u8205
 16588  07D8  3001               	movlw	1
 16589  07D9  02BC               	subwf	___ftmul@cntr^(0+128),f
 16590  07DA  1D03               	btfss	3,2
 16591  07DB  2FC4               	goto	l7850
 16592  07DC  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16593  07DD  00A0               	movwf	___ftpack@arg^(0+128)
 16594  07DE  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16595  07DF  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16596  07E0  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16597  07E1  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16598  07E2  0838               	movf	___ftmul@exp^(0+128),w
 16599  07E3  00B4               	movwf	??___ftmul^(0+128)
 16600  07E4  0834               	movf	??___ftmul^(0+128),w
 16601  07E5  00A3               	movwf	___ftpack@exp^(0+128)
 16602  07E6  083D               	movf	___ftmul@sign^(0+128),w
 16603  07E7  00B5               	movwf	(??___ftmul+1)^(0+128)
 16604  07E8  0835               	movf	(??___ftmul+1)^(0+128),w
 16605  07E9  00A4               	movwf	___ftpack@sign^(0+128)
 16606  07EA  31A6  26B3         	fcall	___ftpack
 16607  07EC  0021               	movlb	1	; select bank1
 16608  07ED  0820               	movf	?___ftpack^(0+128),w
 16609  07EE  00AE               	movwf	?___ftmul^(0+128)
 16610  07EF  0821               	movf	(?___ftpack+1)^(0+128),w
 16611  07F0  00AF               	movwf	(?___ftmul+1)^(0+128)
 16612  07F1  0822               	movf	(?___ftpack+2)^(0+128),w
 16613  07F2  00B0               	movwf	(?___ftmul+2)^(0+128)
 16614  07F3  0008               	return
 16615  07F4                     __end_of___ftmul:	
 16616                           
 16617                           	psect	text54
 16618  2FD2                     __ptext54:	
 16619 ;; *************** function ___ftsub *****************
 16620 ;; Defined at:
 16621 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16622 ;; Parameters:    Size  Location     Type
 16623 ;;  f2              3   23[BANK2 ] float 
 16624 ;;  f1              3   26[BANK2 ] float 
 16625 ;; Auto vars:     Size  Location     Type
 16626 ;;		None
 16627 ;; Return value:  Size  Location     Type
 16628 ;;                  3   23[BANK2 ] float 
 16629 ;; Registers used:
 16630 ;;		wreg, status,2, status,0, pclath, cstack
 16631 ;; Tracked objects:
 16632 ;;		On entry : 0/0
 16633 ;;		On exit  : 0/0
 16634 ;;		Unchanged: 0/0
 16635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16636 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16639 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16640 ;;Total ram usage:        6 bytes
 16641 ;; Hardware stack levels used:    1
 16642 ;; Hardware stack levels required when called:    5
 16643 ;; This function calls:
 16644 ;;		___ftadd
 16645 ;; This function is called by:
 16646 ;;		_sin
 16647 ;;		_exp
 16648 ;; This function uses a non-reentrant model
 16649 ;;
 16650                           
 16651                           
 16652                           ;psect for function ___ftsub
 16653  2FD2                     ___ftsub:	
 16654                           
 16655                           ;incstack = 0
 16656                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16657  2FD2  0022               	movlb	2	; select bank2
 16658  2FD3  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16659  2FD4  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 16660  2FD5  0437               	iorwf	___ftsub@f2^(0+256),w
 16661  2FD6  1903               	skipnz
 16662  2FD7  2FDA               	goto	l8042
 16663  2FD8  3080               	movlw	128
 16664  2FD9  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 16665  2FDA                     l8042:	
 16666  2FDA  083A               	movf	___ftsub@f1^(0+256),w
 16667  2FDB  0021               	movlb	1	; select bank1
 16668  2FDC  00C1               	movwf	___ftadd@f1^(0+128)
 16669  2FDD  0022               	movlb	2	; select bank2
 16670  2FDE  083B               	movf	(___ftsub@f1+1)^(0+256),w
 16671  2FDF  0021               	movlb	1	; select bank1
 16672  2FE0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16673  2FE1  0022               	movlb	2	; select bank2
 16674  2FE2  083C               	movf	(___ftsub@f1+2)^(0+256),w
 16675  2FE3  0021               	movlb	1	; select bank1
 16676  2FE4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16677  2FE5  0022               	movlb	2	; select bank2
 16678  2FE6  0837               	movf	___ftsub@f2^(0+256),w
 16679  2FE7  0021               	movlb	1	; select bank1
 16680  2FE8  00C4               	movwf	___ftadd@f2^(0+128)
 16681  2FE9  0022               	movlb	2	; select bank2
 16682  2FEA  0838               	movf	(___ftsub@f2+1)^(0+256),w
 16683  2FEB  0021               	movlb	1	; select bank1
 16684  2FEC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16685  2FED  0022               	movlb	2	; select bank2
 16686  2FEE  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16687  2FEF  0021               	movlb	1	; select bank1
 16688  2FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16689  2FF1  3190  201F         	fcall	___ftadd
 16690  2FF3  0021               	movlb	1	; select bank1
 16691  2FF4  0841               	movf	?___ftadd^(0+128),w
 16692  2FF5  0022               	movlb	2	; select bank2
 16693  2FF6  00B7               	movwf	?___ftsub^(0+256)
 16694  2FF7  0021               	movlb	1	; select bank1
 16695  2FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 16696  2FF9  0022               	movlb	2	; select bank2
 16697  2FFA  00B8               	movwf	(?___ftsub+1)^(0+256)
 16698  2FFB  0021               	movlb	1	; select bank1
 16699  2FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 16700  2FFD  0022               	movlb	2	; select bank2
 16701  2FFE  00B9               	movwf	(?___ftsub+2)^(0+256)
 16702  2FFF  0008               	return
 16703  3000                     __end_of___ftsub:	
 16704                           
 16705                           	psect	text55
 16706  101F                     __ptext55:	
 16707 ;; *************** function ___ftadd *****************
 16708 ;; Defined at:
 16709 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16710 ;; Parameters:    Size  Location     Type
 16711 ;;  f1              3   33[BANK1 ] float 
 16712 ;;  f2              3   36[BANK1 ] float 
 16713 ;; Auto vars:     Size  Location     Type
 16714 ;;  exp1            1   45[BANK1 ] unsigned char 
 16715 ;;  exp2            1   44[BANK1 ] unsigned char 
 16716 ;;  sign            1   43[BANK1 ] unsigned char 
 16717 ;; Return value:  Size  Location     Type
 16718 ;;                  3   33[BANK1 ] float 
 16719 ;; Registers used:
 16720 ;;		wreg, status,2, status,0, pclath, cstack
 16721 ;; Tracked objects:
 16722 ;;		On entry : 0/0
 16723 ;;		On exit  : 0/0
 16724 ;;		Unchanged: 0/0
 16725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16726 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16727 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16728 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16729 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16730 ;;Total ram usage:       13 bytes
 16731 ;; Hardware stack levels used:    1
 16732 ;; Hardware stack levels required when called:    4
 16733 ;; This function calls:
 16734 ;;		___ftpack
 16735 ;; This function is called by:
 16736 ;;		_map
 16737 ;;		_scaleiA10kPot
 16738 ;;		_modSin
 16739 ;;		_modTri
 16740 ;;		_modSaw
 16741 ;;		___ftsub
 16742 ;;		_sin
 16743 ;;		_eval_poly
 16744 ;;		_floor
 16745 ;;		_log
 16746 ;;		_scalePotValue
 16747 ;; This function uses a non-reentrant model
 16748 ;;
 16749                           
 16750                           
 16751                           ;psect for function ___ftadd
 16752  101F                     ___ftadd:	
 16753                           
 16754                           ;incstack = 0
 16755                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16756  101F  0021               	movlb	1	; select bank1
 16757  1020  0841               	movf	___ftadd@f1^(0+128),w
 16758  1021  00C7               	movwf	??___ftadd^(0+128)
 16759  1022  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16760  1023  00C8               	movwf	(??___ftadd^(0+128)+1)
 16761  1024  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16762  1025  00C9               	movwf	(??___ftadd^(0+128)+2)
 16763  1026  1003               	clrc
 16764  1027  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16765  1028  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16766  1029  00CA               	movwf	(??___ftadd+3)^(0+128)
 16767  102A  084A               	movf	(??___ftadd+3)^(0+128),w
 16768  102B  00CD               	movwf	___ftadd@exp1^(0+128)
 16769  102C  0844               	movf	___ftadd@f2^(0+128),w
 16770  102D  00C7               	movwf	??___ftadd^(0+128)
 16771  102E  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16772  102F  00C8               	movwf	(??___ftadd^(0+128)+1)
 16773  1030  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16774  1031  00C9               	movwf	(??___ftadd^(0+128)+2)
 16775  1032  1003               	clrc
 16776  1033  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16777  1034  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16778  1035  00CA               	movwf	(??___ftadd+3)^(0+128)
 16779  1036  084A               	movf	(??___ftadd+3)^(0+128),w
 16780  1037  00CC               	movwf	___ftadd@exp2^(0+128)
 16781  1038  084D               	movf	___ftadd@exp1^(0+128),w
 16782  1039  1903               	btfsc	3,2
 16783  103A  2847               	goto	l7730
 16784  103B  084C               	movf	___ftadd@exp2^(0+128),w
 16785  103C  024D               	subwf	___ftadd@exp1^(0+128),w
 16786  103D  1803               	skipnc
 16787  103E  284E               	goto	l7734
 16788  103F  034D               	decf	___ftadd@exp1^(0+128),w
 16789  1040  3AFF               	xorlw	255
 16790  1041  074C               	addwf	___ftadd@exp2^(0+128),w
 16791  1042  00C7               	movwf	??___ftadd^(0+128)
 16792  1043  3019               	movlw	25
 16793  1044  0247               	subwf	??___ftadd^(0+128),w
 16794  1045  1C03               	skipc
 16795  1046  284E               	goto	l7734
 16796  1047                     l7730:	
 16797  1047  0844               	movf	___ftadd@f2^(0+128),w
 16798  1048  00C1               	movwf	?___ftadd^(0+128)
 16799  1049  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16800  104A  00C2               	movwf	(?___ftadd+1)^(0+128)
 16801  104B  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16802  104C  00C3               	movwf	(?___ftadd+2)^(0+128)
 16803  104D  0008               	return
 16804  104E                     l7734:	
 16805  104E  084C               	movf	___ftadd@exp2^(0+128),w
 16806  104F  1903               	btfsc	3,2
 16807  1050  0008               	return
 16808  1051  084D               	movf	___ftadd@exp1^(0+128),w
 16809  1052  024C               	subwf	___ftadd@exp2^(0+128),w
 16810  1053  1803               	skipnc
 16811  1054  285D               	goto	l7740
 16812  1055  034C               	decf	___ftadd@exp2^(0+128),w
 16813  1056  3AFF               	xorlw	255
 16814  1057  074D               	addwf	___ftadd@exp1^(0+128),w
 16815  1058  00C7               	movwf	??___ftadd^(0+128)
 16816  1059  3019               	movlw	25
 16817  105A  0247               	subwf	??___ftadd^(0+128),w
 16818  105B  1803               	btfsc	3,0
 16819  105C  0008               	return
 16820  105D                     l7740:	
 16821  105D  3006               	movlw	6
 16822  105E  00C7               	movwf	??___ftadd^(0+128)
 16823  105F  0847               	movf	??___ftadd^(0+128),w
 16824  1060  00CB               	movwf	___ftadd@sign^(0+128)
 16825  1061  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 16826  1062  17CB               	bsf	___ftadd@sign^(0+128),7
 16827  1063  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 16828  1064  174B               	bsf	___ftadd@sign^(0+128),6
 16829  1065  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 16830  1066  30FF               	movlw	255
 16831  1067  05C1               	andwf	___ftadd@f1^(0+128),f
 16832  1068  30FF               	movlw	255
 16833  1069  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 16834  106A  3000               	movlw	0
 16835  106B  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 16836  106C  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 16837  106D  30FF               	movlw	255
 16838  106E  05C4               	andwf	___ftadd@f2^(0+128),f
 16839  106F  30FF               	movlw	255
 16840  1070  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 16841  1071  3000               	movlw	0
 16842  1072  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 16843  1073  084C               	movf	___ftadd@exp2^(0+128),w
 16844  1074  024D               	subwf	___ftadd@exp1^(0+128),w
 16845  1075  1803               	skipnc
 16846  1076  2899               	goto	l7762
 16847  1077                     l7752:	
 16848  1077  3001               	movlw	1
 16849  1078                     u7935:	
 16850  1078  35C4               	lslf	___ftadd@f2^(0+128),f
 16851  1079  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 16852  107A  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 16853  107B  0B89               	decfsz	9,f
 16854  107C  2878               	goto	u7935
 16855  107D  3001               	movlw	1
 16856  107E  02CC               	subwf	___ftadd@exp2^(0+128),f
 16857  107F  084C               	movf	___ftadd@exp2^(0+128),w
 16858  1080  064D               	xorwf	___ftadd@exp1^(0+128),w
 16859  1081  1903               	skipnz
 16860  1082  2894               	goto	l7760
 16861  1083  3001               	movlw	1
 16862  1084  02CB               	subwf	___ftadd@sign^(0+128),f
 16863  1085  084B               	movf	___ftadd@sign^(0+128),w
 16864  1086  3907               	andlw	7
 16865  1087  1903               	btfsc	3,2
 16866  1088  2894               	goto	l7760
 16867  1089  2877               	goto	l7752
 16868  108A                     l7758:	
 16869  108A  3001               	movlw	1
 16870  108B                     u7965:	
 16871  108B  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 16872  108C  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 16873  108D  0CC1               	rrf	___ftadd@f1^(0+128),f
 16874  108E  0B89               	decfsz	9,f
 16875  108F  288B               	goto	u7965
 16876  1090  3001               	movlw	1
 16877  1091  00C7               	movwf	??___ftadd^(0+128)
 16878  1092  0847               	movf	??___ftadd^(0+128),w
 16879  1093  07CD               	addwf	___ftadd@exp1^(0+128),f
 16880  1094                     l7760:	
 16881  1094  084D               	movf	___ftadd@exp1^(0+128),w
 16882  1095  064C               	xorwf	___ftadd@exp2^(0+128),w
 16883  1096  1903               	btfsc	3,2
 16884  1097  28BE               	goto	l2152
 16885  1098  288A               	goto	l7758
 16886  1099                     l7762:	
 16887  1099  084D               	movf	___ftadd@exp1^(0+128),w
 16888  109A  024C               	subwf	___ftadd@exp2^(0+128),w
 16889  109B  1803               	skipnc
 16890  109C  28BE               	goto	l2152
 16891  109D                     l7764:	
 16892  109D  3001               	movlw	1
 16893  109E                     u7995:	
 16894  109E  35C1               	lslf	___ftadd@f1^(0+128),f
 16895  109F  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 16896  10A0  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 16897  10A1  0B89               	decfsz	9,f
 16898  10A2  289E               	goto	u7995
 16899  10A3  3001               	movlw	1
 16900  10A4  02CD               	subwf	___ftadd@exp1^(0+128),f
 16901  10A5  084C               	movf	___ftadd@exp2^(0+128),w
 16902  10A6  064D               	xorwf	___ftadd@exp1^(0+128),w
 16903  10A7  1903               	skipnz
 16904  10A8  28BA               	goto	l7772
 16905  10A9  3001               	movlw	1
 16906  10AA  02CB               	subwf	___ftadd@sign^(0+128),f
 16907  10AB  084B               	movf	___ftadd@sign^(0+128),w
 16908  10AC  3907               	andlw	7
 16909  10AD  1903               	btfsc	3,2
 16910  10AE  28BA               	goto	l7772
 16911  10AF  289D               	goto	l7764
 16912  10B0                     l7770:	
 16913  10B0  3001               	movlw	1
 16914  10B1                     u8025:	
 16915  10B1  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 16916  10B2  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 16917  10B3  0CC4               	rrf	___ftadd@f2^(0+128),f
 16918  10B4  0B89               	decfsz	9,f
 16919  10B5  28B1               	goto	u8025
 16920  10B6  3001               	movlw	1
 16921  10B7  00C7               	movwf	??___ftadd^(0+128)
 16922  10B8  0847               	movf	??___ftadd^(0+128),w
 16923  10B9  07CC               	addwf	___ftadd@exp2^(0+128),f
 16924  10BA                     l7772:	
 16925  10BA  084D               	movf	___ftadd@exp1^(0+128),w
 16926  10BB  064C               	xorwf	___ftadd@exp2^(0+128),w
 16927  10BC  1D03               	skipz
 16928  10BD  28B0               	goto	l7770
 16929  10BE                     l2152:	
 16930  10BE  1FCB               	btfss	___ftadd@sign^(0+128),7
 16931  10BF  28D0               	goto	l7776
 16932  10C0  30FF               	movlw	255
 16933  10C1  06C1               	xorwf	___ftadd@f1^(0+128),f
 16934  10C2  30FF               	movlw	255
 16935  10C3  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 16936  10C4  30FF               	movlw	255
 16937  10C5  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 16938  10C6  3001               	movlw	1
 16939  10C7  07C1               	addwf	___ftadd@f1^(0+128),f
 16940  10C8  3000               	movlw	0
 16941  10C9  1803               	skipnc
 16942  10CA  3001               	movlw	1
 16943  10CB  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 16944  10CC  3000               	movlw	0
 16945  10CD  1803               	skipnc
 16946  10CE  3001               	movlw	1
 16947  10CF  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 16948  10D0                     l7776:	
 16949  10D0  1F4B               	btfss	___ftadd@sign^(0+128),6
 16950  10D1  28E2               	goto	l7780
 16951  10D2  30FF               	movlw	255
 16952  10D3  06C4               	xorwf	___ftadd@f2^(0+128),f
 16953  10D4  30FF               	movlw	255
 16954  10D5  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16955  10D6  30FF               	movlw	255
 16956  10D7  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16957  10D8  3001               	movlw	1
 16958  10D9  07C4               	addwf	___ftadd@f2^(0+128),f
 16959  10DA  3000               	movlw	0
 16960  10DB  1803               	skipnc
 16961  10DC  3001               	movlw	1
 16962  10DD  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16963  10DE  3000               	movlw	0
 16964  10DF  1803               	skipnc
 16965  10E0  3001               	movlw	1
 16966  10E1  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16967  10E2                     l7780:	
 16968  10E2  01CB               	clrf	___ftadd@sign^(0+128)
 16969  10E3  0841               	movf	___ftadd@f1^(0+128),w
 16970  10E4  07C4               	addwf	___ftadd@f2^(0+128),f
 16971  10E5  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16972  10E6  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 16973  10E7  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16974  10E8  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 16975  10E9  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 16976  10EA  28FD               	goto	l7790
 16977  10EB  30FF               	movlw	255
 16978  10EC  06C4               	xorwf	___ftadd@f2^(0+128),f
 16979  10ED  30FF               	movlw	255
 16980  10EE  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16981  10EF  30FF               	movlw	255
 16982  10F0  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16983  10F1  3001               	movlw	1
 16984  10F2  07C4               	addwf	___ftadd@f2^(0+128),f
 16985  10F3  3000               	movlw	0
 16986  10F4  1803               	skipnc
 16987  10F5  3001               	movlw	1
 16988  10F6  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16989  10F7  3000               	movlw	0
 16990  10F8  1803               	skipnc
 16991  10F9  3001               	movlw	1
 16992  10FA  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16993  10FB  01CB               	clrf	___ftadd@sign^(0+128)
 16994  10FC  0ACB               	incf	___ftadd@sign^(0+128),f
 16995  10FD                     l7790:	
 16996  10FD  0844               	movf	___ftadd@f2^(0+128),w
 16997  10FE  00A0               	movwf	___ftpack@arg^(0+128)
 16998  10FF  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16999  1100  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17000  1101  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17001  1102  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17002  1103  084D               	movf	___ftadd@exp1^(0+128),w
 17003  1104  00C7               	movwf	??___ftadd^(0+128)
 17004  1105  0847               	movf	??___ftadd^(0+128),w
 17005  1106  00A3               	movwf	___ftpack@exp^(0+128)
 17006  1107  084B               	movf	___ftadd@sign^(0+128),w
 17007  1108  00C8               	movwf	(??___ftadd+1)^(0+128)
 17008  1109  0848               	movf	(??___ftadd+1)^(0+128),w
 17009  110A  00A4               	movwf	___ftpack@sign^(0+128)
 17010  110B  31A6  26B3         	fcall	___ftpack
 17011  110D  0021               	movlb	1	; select bank1
 17012  110E  0820               	movf	?___ftpack^(0+128),w
 17013  110F  00C1               	movwf	?___ftadd^(0+128)
 17014  1110  0821               	movf	(?___ftpack+1)^(0+128),w
 17015  1111  00C2               	movwf	(?___ftadd+1)^(0+128)
 17016  1112  0822               	movf	(?___ftpack+2)^(0+128),w
 17017  1113  00C3               	movwf	(?___ftadd+2)^(0+128)
 17018  1114  0008               	return
 17019  1115                     __end_of___ftadd:	
 17020                           
 17021                           	psect	text56
 17022  2E1F                     __ptext56:	
 17023 ;; *************** function ___ftneg *****************
 17024 ;; Defined at:
 17025 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17026 ;; Parameters:    Size  Location     Type
 17027 ;;  f1              3   30[BANK1 ] float 
 17028 ;; Auto vars:     Size  Location     Type
 17029 ;;		None
 17030 ;; Return value:  Size  Location     Type
 17031 ;;                  3   30[BANK1 ] float 
 17032 ;; Registers used:
 17033 ;;		wreg
 17034 ;; Tracked objects:
 17035 ;;		On entry : 0/0
 17036 ;;		On exit  : 0/0
 17037 ;;		Unchanged: 0/0
 17038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17039 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17042 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17043 ;;Total ram usage:        3 bytes
 17044 ;; Hardware stack levels used:    1
 17045 ;; Hardware stack levels required when called:    3
 17046 ;; This function calls:
 17047 ;;		Nothing
 17048 ;; This function is called by:
 17049 ;;		_map
 17050 ;;		_scaleiA10kPot
 17051 ;;		_modSin
 17052 ;;		_modTri
 17053 ;;		_modSaw
 17054 ;;		_pow
 17055 ;;		_sin
 17056 ;;		_exp
 17057 ;;		_ldexp
 17058 ;;		_scalePotValue
 17059 ;; This function uses a non-reentrant model
 17060 ;;
 17061                           
 17062                           
 17063                           ;psect for function ___ftneg
 17064  2E1F                     ___ftneg:	
 17065                           
 17066                           ;incstack = 0
 17067                           ; Regs used in ___ftneg: [wreg]
 17068  2E1F  0021               	movlb	1	; select bank1
 17069  2E20  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17070  2E21  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17071  2E22  043E               	iorwf	___ftneg@f1^(0+128),w
 17072  2E23  1903               	skipnz
 17073  2E24  0008               	return
 17074  2E25  3080               	movlw	128
 17075  2E26  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17076  2E27  0008               	return
 17077  2E28                     __end_of___ftneg:	
 17078                           
 17079                           	psect	text57
 17080  1D28                     __ptext57:	
 17081 ;; *************** function ___ftdiv *****************
 17082 ;; Defined at:
 17083 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17084 ;; Parameters:    Size  Location     Type
 17085 ;;  f2              3   46[BANK1 ] float 
 17086 ;;  f1              3   49[BANK1 ] float 
 17087 ;; Auto vars:     Size  Location     Type
 17088 ;;  f3              3   57[BANK1 ] float 
 17089 ;;  sign            1   61[BANK1 ] unsigned char 
 17090 ;;  exp             1   60[BANK1 ] unsigned char 
 17091 ;;  cntr            1   56[BANK1 ] unsigned char 
 17092 ;; Return value:  Size  Location     Type
 17093 ;;                  3   46[BANK1 ] float 
 17094 ;; Registers used:
 17095 ;;		wreg, status,2, status,0, pclath, cstack
 17096 ;; Tracked objects:
 17097 ;;		On entry : 0/0
 17098 ;;		On exit  : 0/0
 17099 ;;		Unchanged: 0/0
 17100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17101 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17102 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17103 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17104 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17105 ;;Total ram usage:       16 bytes
 17106 ;; Hardware stack levels used:    1
 17107 ;; Hardware stack levels required when called:    4
 17108 ;; This function calls:
 17109 ;;		___ftpack
 17110 ;; This function is called by:
 17111 ;;		_map
 17112 ;;		_scaleA100kPot
 17113 ;;		_scaleA10kPot
 17114 ;;		_scaleiA10kPot
 17115 ;;		_calcSinArray
 17116 ;;		_getModulationDelayTime
 17117 ;;		_modSin
 17118 ;;		_modTri
 17119 ;;		_modSaw
 17120 ;;		_sin
 17121 ;;		_exp
 17122 ;;		_scalePotValue
 17123 ;;		_scaleiA100kPot
 17124 ;; This function uses a non-reentrant model
 17125 ;;
 17126                           
 17127                           
 17128                           ;psect for function ___ftdiv
 17129  1D28                     ___ftdiv:	
 17130                           
 17131                           ;incstack = 0
 17132                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17133  1D28  0021               	movlb	1	; select bank1
 17134  1D29  0851               	movf	___ftdiv@f1^(0+128),w
 17135  1D2A  00D4               	movwf	??___ftdiv^(0+128)
 17136  1D2B  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17137  1D2C  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17138  1D2D  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17139  1D2E  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17140  1D2F  1003               	clrc
 17141  1D30  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17142  1D31  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17143  1D32  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17144  1D33  0857               	movf	(??___ftdiv+3)^(0+128),w
 17145  1D34  00DC               	movwf	___ftdiv@exp^(0+128)
 17146  1D35  085C               	movf	___ftdiv@exp^(0+128),w
 17147  1D36  1D03               	btfss	3,2
 17148  1D37  2D3F               	goto	l8002
 17149  1D38  3000               	movlw	0
 17150  1D39  00CE               	movwf	?___ftdiv^(0+128)
 17151  1D3A  3000               	movlw	0
 17152  1D3B  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17153  1D3C  3000               	movlw	0
 17154  1D3D  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17155  1D3E  0008               	return
 17156  1D3F                     l8002:	
 17157  1D3F  084E               	movf	___ftdiv@f2^(0+128),w
 17158  1D40  00D4               	movwf	??___ftdiv^(0+128)
 17159  1D41  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17160  1D42  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17161  1D43  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17162  1D44  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17163  1D45  1003               	clrc
 17164  1D46  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17165  1D47  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17166  1D48  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17167  1D49  0857               	movf	(??___ftdiv+3)^(0+128),w
 17168  1D4A  00DD               	movwf	___ftdiv@sign^(0+128)
 17169  1D4B  085D               	movf	___ftdiv@sign^(0+128),w
 17170  1D4C  1D03               	btfss	3,2
 17171  1D4D  2D55               	goto	l8008
 17172  1D4E  3000               	movlw	0
 17173  1D4F  00CE               	movwf	?___ftdiv^(0+128)
 17174  1D50  3000               	movlw	0
 17175  1D51  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17176  1D52  3000               	movlw	0
 17177  1D53  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17178  1D54  0008               	return
 17179  1D55                     l8008:	
 17180  1D55  3000               	movlw	0
 17181  1D56  00D9               	movwf	___ftdiv@f3^(0+128)
 17182  1D57  3000               	movlw	0
 17183  1D58  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17184  1D59  3000               	movlw	0
 17185  1D5A  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17186  1D5B  3089               	movlw	137
 17187  1D5C  075D               	addwf	___ftdiv@sign^(0+128),w
 17188  1D5D  00D4               	movwf	??___ftdiv^(0+128)
 17189  1D5E  0854               	movf	??___ftdiv^(0+128),w
 17190  1D5F  02DC               	subwf	___ftdiv@exp^(0+128),f
 17191  1D60  0851               	movf	___ftdiv@f1^(0+128),w
 17192  1D61  00D4               	movwf	??___ftdiv^(0+128)
 17193  1D62  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17194  1D63  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17195  1D64  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17196  1D65  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17197  1D66  3010               	movlw	16
 17198  1D67                     u8425:	
 17199  1D67  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17200  1D68  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17201  1D69  0CD4               	rrf	??___ftdiv^(0+128),f
 17202  1D6A  0B89               	decfsz	9,f
 17203  1D6B  2D67               	goto	u8425
 17204  1D6C  0854               	movf	??___ftdiv^(0+128),w
 17205  1D6D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17206  1D6E  0857               	movf	(??___ftdiv+3)^(0+128),w
 17207  1D6F  00DD               	movwf	___ftdiv@sign^(0+128)
 17208  1D70  084E               	movf	___ftdiv@f2^(0+128),w
 17209  1D71  00D4               	movwf	??___ftdiv^(0+128)
 17210  1D72  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17211  1D73  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17212  1D74  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17213  1D75  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17214  1D76  3010               	movlw	16
 17215  1D77                     u8435:	
 17216  1D77  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17217  1D78  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17218  1D79  0CD4               	rrf	??___ftdiv^(0+128),f
 17219  1D7A  0B89               	decfsz	9,f
 17220  1D7B  2D77               	goto	u8435
 17221  1D7C  0854               	movf	??___ftdiv^(0+128),w
 17222  1D7D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17223  1D7E  0857               	movf	(??___ftdiv+3)^(0+128),w
 17224  1D7F  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17225  1D80  3080               	movlw	128
 17226  1D81  00D4               	movwf	??___ftdiv^(0+128)
 17227  1D82  0854               	movf	??___ftdiv^(0+128),w
 17228  1D83  05DD               	andwf	___ftdiv@sign^(0+128),f
 17229  1D84  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17230  1D85  30FF               	movlw	255
 17231  1D86  05D1               	andwf	___ftdiv@f1^(0+128),f
 17232  1D87  30FF               	movlw	255
 17233  1D88  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17234  1D89  3000               	movlw	0
 17235  1D8A  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17236  1D8B  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17237  1D8C  30FF               	movlw	255
 17238  1D8D  05CE               	andwf	___ftdiv@f2^(0+128),f
 17239  1D8E  30FF               	movlw	255
 17240  1D8F  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17241  1D90  3000               	movlw	0
 17242  1D91  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17243  1D92  3018               	movlw	24
 17244  1D93  00D4               	movwf	??___ftdiv^(0+128)
 17245  1D94  0854               	movf	??___ftdiv^(0+128),w
 17246  1D95  00D8               	movwf	___ftdiv@cntr^(0+128)
 17247  1D96                     l8022:	
 17248  1D96  3001               	movlw	1
 17249  1D97                     u8445:	
 17250  1D97  35D9               	lslf	___ftdiv@f3^(0+128),f
 17251  1D98  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17252  1D99  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17253  1D9A  0B89               	decfsz	9,f
 17254  1D9B  2D97               	goto	u8445
 17255  1D9C  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17256  1D9D  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17257  1D9E  1D03               	skipz
 17258  1D9F  2DA6               	goto	u8455
 17259  1DA0  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17260  1DA1  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17261  1DA2  1D03               	skipz
 17262  1DA3  2DA6               	goto	u8455
 17263  1DA4  084E               	movf	___ftdiv@f2^(0+128),w
 17264  1DA5  0251               	subwf	___ftdiv@f1^(0+128),w
 17265  1DA6                     u8455:	
 17266  1DA6  1C03               	skipc
 17267  1DA7  2DAF               	goto	l8030
 17268  1DA8  084E               	movf	___ftdiv@f2^(0+128),w
 17269  1DA9  02D1               	subwf	___ftdiv@f1^(0+128),f
 17270  1DAA  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17271  1DAB  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17272  1DAC  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17273  1DAD  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17274  1DAE  1459               	bsf	___ftdiv@f3^(0+128),0
 17275  1DAF                     l8030:	
 17276  1DAF  3001               	movlw	1
 17277  1DB0                     u8465:	
 17278  1DB0  35D1               	lslf	___ftdiv@f1^(0+128),f
 17279  1DB1  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17280  1DB2  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17281  1DB3  0B89               	decfsz	9,f
 17282  1DB4  2DB0               	goto	u8465
 17283  1DB5  3001               	movlw	1
 17284  1DB6  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17285  1DB7  1D03               	btfss	3,2
 17286  1DB8  2D96               	goto	l8022
 17287  1DB9  0859               	movf	___ftdiv@f3^(0+128),w
 17288  1DBA  00A0               	movwf	___ftpack@arg^(0+128)
 17289  1DBB  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17290  1DBC  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17291  1DBD  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17292  1DBE  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17293  1DBF  085C               	movf	___ftdiv@exp^(0+128),w
 17294  1DC0  00D4               	movwf	??___ftdiv^(0+128)
 17295  1DC1  0854               	movf	??___ftdiv^(0+128),w
 17296  1DC2  00A3               	movwf	___ftpack@exp^(0+128)
 17297  1DC3  085D               	movf	___ftdiv@sign^(0+128),w
 17298  1DC4  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17299  1DC5  0855               	movf	(??___ftdiv+1)^(0+128),w
 17300  1DC6  00A4               	movwf	___ftpack@sign^(0+128)
 17301  1DC7  31A6  26B3         	fcall	___ftpack
 17302  1DC9  0021               	movlb	1	; select bank1
 17303  1DCA  0820               	movf	?___ftpack^(0+128),w
 17304  1DCB  00CE               	movwf	?___ftdiv^(0+128)
 17305  1DCC  0821               	movf	(?___ftpack+1)^(0+128),w
 17306  1DCD  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17307  1DCE  0822               	movf	(?___ftpack+2)^(0+128),w
 17308  1DCF  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17309  1DD0  0008               	return
 17310  1DD1                     __end_of___ftdiv:	
 17311                           
 17312                           	psect	text58
 17313  2F67                     __ptext58:	
 17314 ;; *************** function ___awtoft *****************
 17315 ;; Defined at:
 17316 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17317 ;; Parameters:    Size  Location     Type
 17318 ;;  c               2    8[BANK1 ] int 
 17319 ;; Auto vars:     Size  Location     Type
 17320 ;;  sign            1   13[BANK1 ] unsigned char 
 17321 ;; Return value:  Size  Location     Type
 17322 ;;                  3    8[BANK1 ] float 
 17323 ;; Registers used:
 17324 ;;		wreg, status,2, status,0, pclath, cstack
 17325 ;; Tracked objects:
 17326 ;;		On entry : 0/0
 17327 ;;		On exit  : 0/0
 17328 ;;		Unchanged: 0/0
 17329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17330 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17331 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17332 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17333 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17334 ;;Total ram usage:        6 bytes
 17335 ;; Hardware stack levels used:    1
 17336 ;; Hardware stack levels required when called:    4
 17337 ;; This function calls:
 17338 ;;		___ftpack
 17339 ;; This function is called by:
 17340 ;;		_main
 17341 ;;		_set_subdivision
 17342 ;;		_calcSinArray
 17343 ;;		_getModulationDelayTime
 17344 ;;		_updateModulationArray
 17345 ;;		_exp
 17346 ;;		_log
 17347 ;; This function uses a non-reentrant model
 17348 ;;
 17349                           
 17350                           
 17351                           ;psect for function ___awtoft
 17352  2F67                     ___awtoft:	
 17353                           
 17354                           ;incstack = 0
 17355                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17356  2F67  0021               	movlb	1	; select bank1
 17357  2F68  01AD               	clrf	___awtoft@sign^(0+128)
 17358  2F69  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17359  2F6A  2F72               	goto	l7992
 17360  2F6B  09A8               	comf	___awtoft@c^(0+128),f
 17361  2F6C  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17362  2F6D  0AA8               	incf	___awtoft@c^(0+128),f
 17363  2F6E  1903               	skipnz
 17364  2F6F  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17365  2F70  01AD               	clrf	___awtoft@sign^(0+128)
 17366  2F71  0AAD               	incf	___awtoft@sign^(0+128),f
 17367  2F72                     l7992:	
 17368  2F72  0828               	movf	___awtoft@c^(0+128),w
 17369  2F73  00A0               	movwf	___ftpack@arg^(0+128)
 17370  2F74  0829               	movf	(___awtoft@c+1)^(0+128),w
 17371  2F75  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17372  2F76  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17373  2F77  308E               	movlw	142
 17374  2F78  00AB               	movwf	??___awtoft^(0+128)
 17375  2F79  082B               	movf	??___awtoft^(0+128),w
 17376  2F7A  00A3               	movwf	___ftpack@exp^(0+128)
 17377  2F7B  082D               	movf	___awtoft@sign^(0+128),w
 17378  2F7C  00AC               	movwf	(??___awtoft+1)^(0+128)
 17379  2F7D  082C               	movf	(??___awtoft+1)^(0+128),w
 17380  2F7E  00A4               	movwf	___ftpack@sign^(0+128)
 17381  2F7F  31A6  26B3         	fcall	___ftpack
 17382  2F81  0021               	movlb	1	; select bank1
 17383  2F82  0820               	movf	?___ftpack^(0+128),w
 17384  2F83  00A8               	movwf	?___awtoft^(0+128)
 17385  2F84  0821               	movf	(?___ftpack+1)^(0+128),w
 17386  2F85  00A9               	movwf	(?___awtoft+1)^(0+128)
 17387  2F86  0822               	movf	(?___ftpack+2)^(0+128),w
 17388  2F87  00AA               	movwf	(?___awtoft+2)^(0+128)
 17389  2F88  0008               	return
 17390  2F89                     __end_of___awtoft:	
 17391                           
 17392                           	psect	text59
 17393  26B3                     __ptext59:	
 17394 ;; *************** function ___ftpack *****************
 17395 ;; Defined at:
 17396 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17397 ;; Parameters:    Size  Location     Type
 17398 ;;  arg             3    0[BANK1 ] unsigned um
 17399 ;;  exp             1    3[BANK1 ] unsigned char 
 17400 ;;  sign            1    4[BANK1 ] unsigned char 
 17401 ;; Auto vars:     Size  Location     Type
 17402 ;;		None
 17403 ;; Return value:  Size  Location     Type
 17404 ;;                  3    0[BANK1 ] float 
 17405 ;; Registers used:
 17406 ;;		wreg, status,2, status,0
 17407 ;; Tracked objects:
 17408 ;;		On entry : 0/0
 17409 ;;		On exit  : 0/0
 17410 ;;		Unchanged: 0/0
 17411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17412 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17414 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17415 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17416 ;;Total ram usage:        8 bytes
 17417 ;; Hardware stack levels used:    1
 17418 ;; Hardware stack levels required when called:    3
 17419 ;; This function calls:
 17420 ;;		Nothing
 17421 ;; This function is called by:
 17422 ;;		___altoft
 17423 ;;		___awtoft
 17424 ;;		___ftadd
 17425 ;;		___ftdiv
 17426 ;;		___ftmul
 17427 ;;		___lltoft
 17428 ;; This function uses a non-reentrant model
 17429 ;;
 17430                           
 17431                           
 17432                           ;psect for function ___ftpack
 17433  26B3                     ___ftpack:	
 17434                           
 17435                           ;incstack = 0
 17436                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17437  26B3  0021               	movlb	1	; select bank1
 17438  26B4  0823               	movf	___ftpack@exp^(0+128),w
 17439  26B5  1903               	btfsc	3,2
 17440  26B6  2EBC               	goto	l7630
 17441  26B7  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17442  26B8  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17443  26B9  0420               	iorwf	___ftpack@arg^(0+128),w
 17444  26BA  1D03               	skipz
 17445  26BB  2ECD               	goto	l7636
 17446  26BC                     l7630:	
 17447  26BC  3000               	movlw	0
 17448  26BD  00A0               	movwf	?___ftpack^(0+128)
 17449  26BE  3000               	movlw	0
 17450  26BF  00A1               	movwf	(?___ftpack+1)^(0+128)
 17451  26C0  3000               	movlw	0
 17452  26C1  00A2               	movwf	(?___ftpack+2)^(0+128)
 17453  26C2  0008               	return
 17454  26C3                     l7634:	
 17455  26C3  3001               	movlw	1
 17456  26C4  00A5               	movwf	??___ftpack^(0+128)
 17457  26C5  0825               	movf	??___ftpack^(0+128),w
 17458  26C6  07A3               	addwf	___ftpack@exp^(0+128),f
 17459  26C7  3001               	movlw	1
 17460  26C8                     u7665:	
 17461  26C8  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17462  26C9  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17463  26CA  0CA0               	rrf	___ftpack@arg^(0+128),f
 17464  26CB  0B89               	decfsz	9,f
 17465  26CC  2EC8               	goto	u7665
 17466  26CD                     l7636:	
 17467  26CD  30FE               	movlw	254
 17468  26CE  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17469  26CF  1903               	btfsc	3,2
 17470  26D0  2EE6               	goto	l2121
 17471  26D1  2EC3               	goto	l7634
 17472  26D2                     l7638:	
 17473  26D2  3001               	movlw	1
 17474  26D3  00A5               	movwf	??___ftpack^(0+128)
 17475  26D4  0825               	movf	??___ftpack^(0+128),w
 17476  26D5  07A3               	addwf	___ftpack@exp^(0+128),f
 17477  26D6  3001               	movlw	1
 17478  26D7  07A0               	addwf	___ftpack@arg^(0+128),f
 17479  26D8  3000               	movlw	0
 17480  26D9  1803               	skipnc
 17481  26DA  3001               	movlw	1
 17482  26DB  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17483  26DC  3000               	movlw	0
 17484  26DD  1803               	skipnc
 17485  26DE  3001               	movlw	1
 17486  26DF  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17487  26E0  3001               	movlw	1
 17488  26E1                     u7685:	
 17489  26E1  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17490  26E2  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17491  26E3  0CA0               	rrf	___ftpack@arg^(0+128),f
 17492  26E4  0B89               	decfsz	9,f
 17493  26E5  2EE1               	goto	u7685
 17494  26E6                     l2121:	
 17495  26E6  30FF               	movlw	255
 17496  26E7  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17497  26E8  1903               	btfsc	3,2
 17498  26E9  2EF3               	goto	l7646
 17499  26EA  2ED2               	goto	l7638
 17500  26EB                     l7644:	
 17501  26EB  3001               	movlw	1
 17502  26EC  02A3               	subwf	___ftpack@exp^(0+128),f
 17503  26ED  3001               	movlw	1
 17504  26EE                     u7705:	
 17505  26EE  35A0               	lslf	___ftpack@arg^(0+128),f
 17506  26EF  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17507  26F0  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17508  26F1  0B89               	decfsz	9,f
 17509  26F2  2EEE               	goto	u7705
 17510  26F3                     l7646:	
 17511  26F3  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17512  26F4  2EF9               	goto	l2128
 17513  26F5  3002               	movlw	2
 17514  26F6  0223               	subwf	___ftpack@exp^(0+128),w
 17515  26F7  1803               	skipnc
 17516  26F8  2EEB               	goto	l7644
 17517  26F9                     l2128:	
 17518  26F9  1823               	btfsc	___ftpack@exp^(0+128),0
 17519  26FA  2F01               	goto	l2129
 17520  26FB  30FF               	movlw	255
 17521  26FC  05A0               	andwf	___ftpack@arg^(0+128),f
 17522  26FD  307F               	movlw	127
 17523  26FE  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17524  26FF  30FF               	movlw	255
 17525  2700  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17526  2701                     l2129:	
 17527  2701  1003               	clrc
 17528  2702  0CA3               	rrf	___ftpack@exp^(0+128),f
 17529  2703  0823               	movf	___ftpack@exp^(0+128),w
 17530  2704  00A5               	movwf	??___ftpack^(0+128)
 17531  2705  01A6               	clrf	(??___ftpack^(0+128)+1)
 17532  2706  01A7               	clrf	(??___ftpack^(0+128)+2)
 17533  2707  3010               	movlw	16
 17534  2708                     u7745:	
 17535  2708  35A5               	lslf	??___ftpack^(0+128),f
 17536  2709  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17537  270A  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17538  270B  0B89               	decfsz	9,f
 17539  270C  2F08               	goto	u7745
 17540  270D  0825               	movf	??___ftpack^(0+128),w
 17541  270E  04A0               	iorwf	___ftpack@arg^(0+128),f
 17542  270F  0826               	movf	(??___ftpack+1)^(0+128),w
 17543  2710  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17544  2711  0827               	movf	(??___ftpack+2)^(0+128),w
 17545  2712  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17546  2713  0824               	movf	___ftpack@sign^(0+128),w
 17547  2714  1903               	btfsc	3,2
 17548  2715  0008               	return
 17549  2716  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17550  2717  0008               	return
 17551  2718                     __end_of___ftpack:	
 17552                           
 17553                           	psect	text60
 17554  2E5B                     __ptext60:	
 17555 ;; *************** function _adc_convert *****************
 17556 ;; Defined at:
 17557 ;;		line 122 in file "user.c"
 17558 ;; Parameters:    Size  Location     Type
 17559 ;;  channel         1    wreg     unsigned char 
 17560 ;; Auto vars:     Size  Location     Type
 17561 ;;  channel         1    3[BANK1 ] unsigned char 
 17562 ;; Return value:  Size  Location     Type
 17563 ;;                  2    0[BANK1 ] unsigned int 
 17564 ;; Registers used:
 17565 ;;		wreg, status,2, status,0
 17566 ;; Tracked objects:
 17567 ;;		On entry : 0/0
 17568 ;;		On exit  : 0/0
 17569 ;;		Unchanged: 0/0
 17570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17571 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17572 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17573 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17574 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17575 ;;Total ram usage:        4 bytes
 17576 ;; Hardware stack levels used:    1
 17577 ;; Hardware stack levels required when called:    3
 17578 ;; This function calls:
 17579 ;;		Nothing
 17580 ;; This function is called by:
 17581 ;;		_main
 17582 ;; This function uses a non-reentrant model
 17583 ;;
 17584                           
 17585                           
 17586                           ;psect for function _adc_convert
 17587  2E5B                     _adc_convert:	
 17588                           
 17589                           ;incstack = 0
 17590                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17591                           ;adc_convert@channel stored from wreg
 17592  2E5B  0021               	movlb	1	; select bank1
 17593  2E5C  00A3               	movwf	adc_convert@channel^(0+128)
 17594                           
 17595                           ;user.c: 123: ADCON0bits.CHS = channel;
 17596  2E5D  0823               	movf	adc_convert@channel^(0+128),w
 17597  2E5E  00A2               	movwf	??_adc_convert^(0+128)
 17598  2E5F  0DA2               	rlf	??_adc_convert^(0+128),f
 17599  2E60  0DA2               	rlf	??_adc_convert^(0+128),f
 17600  2E61  081D               	movf	29,w	;volatile
 17601  2E62  0622               	xorwf	??_adc_convert^(0+128),w
 17602  2E63  3983               	andlw	-125
 17603  2E64  0622               	xorwf	??_adc_convert^(0+128),w
 17604  2E65  009D               	movwf	29	;volatile
 17605                           
 17606                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17607  2E66  149D               	bsf	29,1	;volatile
 17608  2E67                     l587:	
 17609                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17610                           
 17611  2E67  189D               	btfsc	29,1	;volatile
 17612  2E68  2E67               	goto	l587
 17613                           
 17614                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17615  2E69  081C               	movf	28,w	;volatile
 17616  2E6A  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17617  2E6B  081B               	movf	27,w	;volatile
 17618  2E6C  00A0               	movwf	?_adc_convert^(0+128)
 17619  2E6D  0008               	return
 17620  2E6E                     __end_of_adc_convert:	
 17621                           
 17622                           	psect	text61
 17623  23F5                     __ptext61:	
 17624 ;; *************** function _USARTInit *****************
 17625 ;; Defined at:
 17626 ;;		line 31 in file "usart_pic16.c"
 17627 ;; Parameters:    Size  Location     Type
 17628 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17629 ;; Auto vars:     Size  Location     Type
 17630 ;;		None
 17631 ;; Return value:  Size  Location     Type
 17632 ;;                  1    wreg      void 
 17633 ;; Registers used:
 17634 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17635 ;; Tracked objects:
 17636 ;;		On entry : 0/0
 17637 ;;		On exit  : 0/0
 17638 ;;		Unchanged: 0/0
 17639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17640 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17642 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17643 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17644 ;;Total ram usage:        3 bytes
 17645 ;; Hardware stack levels used:    1
 17646 ;; Hardware stack levels required when called:    3
 17647 ;; This function calls:
 17648 ;;		Nothing
 17649 ;; This function is called by:
 17650 ;;		_main
 17651 ;; This function uses a non-reentrant model
 17652 ;;
 17653                           
 17654                           
 17655                           ;psect for function _USARTInit
 17656  23F5                     _USARTInit:	
 17657                           
 17658                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17659                           
 17660                           ;incstack = 0
 17661                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17662  23F5  30FF               	movlw	255
 17663  23F6  0020               	movlb	0	; select bank0
 17664  23F7  00CC               	movwf	_UQEnd	;volatile
 17665  23F8  0021               	movlb	1	; select bank1
 17666  23F9  00A2               	movwf	??_USARTInit^(0+128)
 17667  23FA  0822               	movf	??_USARTInit^(0+128),w
 17668  23FB  0020               	movlb	0	; select bank0
 17669  23FC  00CD               	movwf	_UQFront	;volatile
 17670                           
 17671                           ;usart_pic16.c: 37: switch(baud_rate)
 17672  23FD  2C08               	goto	l8636
 17673  23FE                     l8626:	
 17674                           ;usart_pic16.c: 38: {
 17675                           ;usart_pic16.c: 39: case 9600:
 17676                           
 17677                           
 17678                           ;usart_pic16.c: 40: SPBRG=103;
 17679  23FE  3067               	movlw	103
 17680  23FF  2C05               	goto	L23
 17681  2400                     l8628:	
 17682                           ;usart_pic16.c: 42: case 19200:
 17683                           
 17684                           ;usart_pic16.c: 41: break;
 17685                           
 17686                           
 17687                           ;usart_pic16.c: 43: SPBRG=51;
 17688  2400  3033               	movlw	51
 17689  2401  2C05               	goto	L23
 17690  2402                     l8630:	
 17691                           ;usart_pic16.c: 45: case 31250:
 17692                           
 17693                           ;usart_pic16.c: 44: break;
 17694                           
 17695                           
 17696                           ;usart_pic16.c: 46: SPBRG = 31;
 17697  2402  301F               	movlw	31
 17698  2403  2C05               	goto	L23
 17699  2404                     l8632:	
 17700                           ;usart_pic16.c: 48: case 38400:
 17701                           
 17702                           ;usart_pic16.c: 47: break;
 17703                           
 17704                           
 17705                           ;usart_pic16.c: 49: SPBRG=25;
 17706  2404  3019               	movlw	25
 17707  2405                     L23:	
 17708  2405  0023               	movlb	3	; select bank3
 17709  2406  009B               	movwf	27	;volatile
 17710                           
 17711                           ;usart_pic16.c: 51: }
 17712                           
 17713                           ;usart_pic16.c: 50: break;
 17714  2407  2C2B               	goto	l1713
 17715  2408                     l8636:	
 17716                           
 17717                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17718                           ; Switch size 1, requested type "space"
 17719                           ; Number of cases is 4, Range of values is 37 to 150
 17720                           ; switch strategies available:
 17721                           ; Name         Instructions Cycles
 17722                           ; simple_byte           13     7 (average)
 17723                           ; direct_byte          237     9 (fixed)
 17724                           ; jumptable            263     9 (fixed)
 17725                           ;	Chosen strategy is simple_byte
 17726  2408  0021               	movlb	1	; select bank1
 17727  2409  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17728  240A  3A25               	xorlw	37	; case 37
 17729  240B  1903               	skipnz
 17730  240C  2C17               	goto	l9740
 17731  240D  3A6E               	xorlw	110	; case 75
 17732  240E  1903               	skipnz
 17733  240F  2C1C               	goto	l9742
 17734  2410  3A31               	xorlw	49	; case 122
 17735  2411  1903               	skipnz
 17736  2412  2C21               	goto	l9744
 17737  2413  3AEC               	xorlw	236	; case 150
 17738  2414  1903               	skipnz
 17739  2415  2C26               	goto	l9746
 17740  2416  2C2B               	goto	l1713
 17741  2417                     l9740:	
 17742                           
 17743                           ; Switch size 1, requested type "space"
 17744                           ; Number of cases is 1, Range of values is 128 to 128
 17745                           ; switch strategies available:
 17746                           ; Name         Instructions Cycles
 17747                           ; simple_byte            4     3 (average)
 17748                           ; direct_byte           11     9 (fixed)
 17749                           ; jumptable            263     9 (fixed)
 17750                           ;	Chosen strategy is simple_byte
 17751  2417  0820               	movf	USARTInit@baud_rate^(0+128),w
 17752  2418  3A80               	xorlw	128	; case 128
 17753  2419  1903               	skipnz
 17754  241A  2BFE               	goto	l8626
 17755  241B  2C2B               	goto	l1713
 17756  241C                     l9742:	
 17757                           
 17758                           ; Switch size 1, requested type "space"
 17759                           ; Number of cases is 1, Range of values is 0 to 0
 17760                           ; switch strategies available:
 17761                           ; Name         Instructions Cycles
 17762                           ; simple_byte            4     3 (average)
 17763                           ; direct_byte            8     6 (fixed)
 17764                           ; jumptable            260     6 (fixed)
 17765                           ;	Chosen strategy is simple_byte
 17766  241C  0820               	movf	USARTInit@baud_rate^(0+128),w
 17767  241D  3A00               	xorlw	0	; case 0
 17768  241E  1903               	skipnz
 17769  241F  2C00               	goto	l8628
 17770  2420  2C2B               	goto	l1713
 17771  2421                     l9744:	
 17772                           
 17773                           ; Switch size 1, requested type "space"
 17774                           ; Number of cases is 1, Range of values is 18 to 18
 17775                           ; switch strategies available:
 17776                           ; Name         Instructions Cycles
 17777                           ; simple_byte            4     3 (average)
 17778                           ; direct_byte           11     9 (fixed)
 17779                           ; jumptable            263     9 (fixed)
 17780                           ;	Chosen strategy is simple_byte
 17781  2421  0820               	movf	USARTInit@baud_rate^(0+128),w
 17782  2422  3A12               	xorlw	18	; case 18
 17783  2423  1903               	skipnz
 17784  2424  2C02               	goto	l8630
 17785  2425  2C2B               	goto	l1713
 17786  2426                     l9746:	
 17787                           
 17788                           ; Switch size 1, requested type "space"
 17789                           ; Number of cases is 1, Range of values is 0 to 0
 17790                           ; switch strategies available:
 17791                           ; Name         Instructions Cycles
 17792                           ; simple_byte            4     3 (average)
 17793                           ; direct_byte            8     6 (fixed)
 17794                           ; jumptable            260     6 (fixed)
 17795                           ;	Chosen strategy is simple_byte
 17796  2426  0820               	movf	USARTInit@baud_rate^(0+128),w
 17797  2427  3A00               	xorlw	0	; case 0
 17798  2428  1903               	skipnz
 17799  2429  2C04               	goto	l8632
 17800  242A  2C2B               	goto	l1713
 17801  242B                     l1713:	
 17802                           
 17803                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 17804  242B  0023               	movlb	3	; select bank3
 17805  242C  131E               	bcf	30,6	;volatile
 17806                           
 17807                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 17808  242D  169E               	bsf	30,5	;volatile
 17809                           
 17810                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 17811  242E  121E               	bcf	30,4	;volatile
 17812                           
 17813                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 17814  242F  151E               	bsf	30,2	;volatile
 17815                           
 17816                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 17817  2430  179D               	bsf	29,7	;volatile
 17818                           
 17819                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 17820  2431  131D               	bcf	29,6	;volatile
 17821                           
 17822                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 17823  2432  161D               	bsf	29,4	;volatile
 17824                           
 17825                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 17826  2433  119D               	bcf	29,3	;volatile
 17827                           
 17828                           ;usart_pic16.c: 65: RCIE=1;
 17829  2434  0021               	movlb	1	; select bank1
 17830  2435  1691               	bsf	17,5	;volatile
 17831                           
 17832                           ;usart_pic16.c: 66: PEIE=1;
 17833  2436  170B               	bsf	11,6	;volatile
 17834                           
 17835                           ;usart_pic16.c: 68: (GIE = 1);
 17836  2437  178B               	bsf	11,7	;volatile
 17837  2438  0008               	return
 17838  2439                     __end_of_USARTInit:	
 17839                           
 17840                           	psect	text62
 17841  278A                     __ptext62:	
 17842 ;; *************** function _ReadSavedSettings *****************
 17843 ;; Defined at:
 17844 ;;		line 234 in file "user.c"
 17845 ;; Parameters:    Size  Location     Type
 17846 ;;		None
 17847 ;; Auto vars:     Size  Location     Type
 17848 ;;		None
 17849 ;; Return value:  Size  Location     Type
 17850 ;;                  1    wreg      void 
 17851 ;; Registers used:
 17852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17853 ;; Tracked objects:
 17854 ;;		On entry : 0/0
 17855 ;;		On exit  : 0/0
 17856 ;;		Unchanged: 0/0
 17857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17860 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17861 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17862 ;;Total ram usage:        1 bytes
 17863 ;; Hardware stack levels used:    1
 17864 ;; Hardware stack levels required when called:    4
 17865 ;; This function calls:
 17866 ;;		_FLASH_ReadWord
 17867 ;;		_set_leds_bottom
 17868 ;;		_set_leds_top
 17869 ;; This function is called by:
 17870 ;;		_main
 17871 ;; This function uses a non-reentrant model
 17872 ;;
 17873                           
 17874                           
 17875                           ;psect for function _ReadSavedSettings
 17876  278A                     _ReadSavedSettings:	
 17877                           
 17878                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 17879                           
 17880                           ;incstack = 0
 17881                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17882  278A  3081               	movlw	129
 17883  278B  0021               	movlb	1	; select bank1
 17884  278C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17885  278D  301F               	movlw	31
 17886  278E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17887  278F  31AF  2706  31A7   	fcall	_FLASH_ReadWord
 17888  2792  0021               	movlb	1	; select bank1
 17889  2793  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17890  2794  0020               	movlb	0	; select bank0
 17891  2795  00DB               	movwf	_top_push_state+1
 17892  2796  0021               	movlb	1	; select bank1
 17893  2797  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17894  2798  0020               	movlb	0	; select bank0
 17895  2799  00DA               	movwf	_top_push_state
 17896                           
 17897                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 17898  279A  3082               	movlw	130
 17899  279B  0021               	movlb	1	; select bank1
 17900  279C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17901  279D  301F               	movlw	31
 17902  279E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17903  279F  31AF  2706  31A7   	fcall	_FLASH_ReadWord
 17904  27A2  0021               	movlb	1	; select bank1
 17905  27A3  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17906  27A4  0020               	movlb	0	; select bank0
 17907  27A5  00D7               	movwf	_bottom_push_state+1
 17908  27A6  0021               	movlb	1	; select bank1
 17909  27A7  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17910  27A8  0020               	movlb	0	; select bank0
 17911  27A9  00D6               	movwf	_bottom_push_state
 17912                           
 17913                           ;user.c: 239: if (top_push_state > 6) {
 17914  27AA  085B               	movf	_top_push_state+1,w
 17915  27AB  3A80               	xorlw	128
 17916  27AC  0021               	movlb	1	; select bank1
 17917  27AD  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17918  27AE  3080               	movlw	128
 17919  27AF  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17920  27B0  1D03               	skipz
 17921  27B1  2FB5               	goto	u9245
 17922  27B2  3007               	movlw	7
 17923  27B3  0020               	movlb	0	; select bank0
 17924  27B4  025A               	subwf	_top_push_state,w
 17925  27B5                     u9245:	
 17926  27B5  1C03               	skipc
 17927  27B6  2FBC               	goto	l634
 17928                           
 17929                           ;user.c: 241: top_push_state = 6;
 17930  27B7  3006               	movlw	6
 17931  27B8  0020               	movlb	0	; select bank0
 17932  27B9  00DA               	movwf	_top_push_state
 17933  27BA  3000               	movlw	0
 17934  27BB  00DB               	movwf	_top_push_state+1
 17935  27BC                     l634:	
 17936                           
 17937                           ;user.c: 242: }
 17938                           ;user.c: 243: if (bottom_push_state > 5) {
 17939  27BC  0020               	movlb	0	; select bank0
 17940  27BD  0857               	movf	_bottom_push_state+1,w
 17941  27BE  3A80               	xorlw	128
 17942  27BF  0021               	movlb	1	; select bank1
 17943  27C0  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17944  27C1  3080               	movlw	128
 17945  27C2  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17946  27C3  1D03               	skipz
 17947  27C4  2FC8               	goto	u9255
 17948  27C5  3006               	movlw	6
 17949  27C6  0020               	movlb	0	; select bank0
 17950  27C7  0256               	subwf	_bottom_push_state,w
 17951  27C8                     u9255:	
 17952  27C8  1C03               	skipc
 17953  27C9  2FCF               	goto	l8690
 17954                           
 17955                           ;user.c: 245: bottom_push_state = 1;
 17956  27CA  3001               	movlw	1
 17957  27CB  0020               	movlb	0	; select bank0
 17958  27CC  00D6               	movwf	_bottom_push_state
 17959  27CD  3000               	movlw	0
 17960  27CE  00D7               	movwf	_bottom_push_state+1
 17961  27CF                     l8690:	
 17962                           
 17963                           ;user.c: 246: }
 17964                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 17965  27CF  0020               	movlb	0	; select bank0
 17966  27D0  085F               	movf	_switchBypass_state,w
 17967  27D1  1D03               	btfss	3,2
 17968  27D2  2FD6               	goto	u9260
 17969  27D3  0027               	movlb	7	; select bank7
 17970  27D4  148D               	bsf	13,1	;volatile
 17971  27D5  2FD8               	goto	l8692
 17972  27D6                     u9260:	
 17973  27D6  0027               	movlb	7	; select bank7
 17974  27D7  108D               	bcf	13,1	;volatile
 17975  27D8                     l8692:	
 17976                           
 17977                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 17978  27D8  0020               	movlb	0	; select bank0
 17979  27D9  0C5F               	rrf	_switchBypass_state,w
 17980  27DA  0027               	movlb	7	; select bank7
 17981  27DB  1C03               	skipc
 17982  27DC  110D               	bcf	13,2	;volatile
 17983  27DD  1803               	skipnc
 17984  27DE  150D               	bsf	13,2	;volatile
 17985                           
 17986                           ;user.c: 251: LATBbits.LATB2 = 0;
 17987  27DF  0022               	movlb	2	; select bank2
 17988  27E0  110D               	bcf	13,2	;volatile
 17989                           
 17990                           ;user.c: 252: LATBbits.LATB3 = 0;
 17991  27E1  118D               	bcf	13,3	;volatile
 17992                           
 17993                           ;user.c: 254: LATBbits.LATB4 = 0;
 17994  27E2  120D               	bcf	13,4	;volatile
 17995                           
 17996                           ;user.c: 255: LATBbits.LATB5 = 0;
 17997  27E3  128D               	bcf	13,5	;volatile
 17998                           
 17999                           ;user.c: 257: LATBbits.LATB1 = 0;
 18000  27E4  108D               	bcf	13,1	;volatile
 18001                           
 18002                           ;user.c: 258: LATBbits.LATB0 = 0;
 18003  27E5  100D               	bcf	13,0	;volatile
 18004                           
 18005                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18006  27E6  0020               	movlb	0	; select bank0
 18007  27E7  085B               	movf	_top_push_state+1,w
 18008  27E8  0021               	movlb	1	; select bank1
 18009  27E9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18010  27EA  0020               	movlb	0	; select bank0
 18011  27EB  085A               	movf	_top_push_state,w
 18012  27EC  0021               	movlb	1	; select bank1
 18013  27ED  00A0               	movwf	set_leds_top@x^(0+128)
 18014  27EE  3001               	movlw	1
 18015  27EF  00A2               	movwf	set_leds_top@ledState^(0+128)
 18016  27F0  3000               	movlw	0
 18017  27F1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18018  27F2  31A6  265F  31A7   	fcall	_set_leds_top
 18019                           
 18020                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18021  27F5  0020               	movlb	0	; select bank0
 18022  27F6  0857               	movf	_bottom_push_state+1,w
 18023  27F7  0021               	movlb	1	; select bank1
 18024  27F8  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18025  27F9  0020               	movlb	0	; select bank0
 18026  27FA  0856               	movf	_bottom_push_state,w
 18027  27FB  0021               	movlb	1	; select bank1
 18028  27FC  00A0               	movwf	set_leds_bottom@x^(0+128)
 18029  27FD  31A1  21C5         	fcall	_set_leds_bottom
 18030  27FF  0008               	return
 18031  2800                     __end_of_ReadSavedSettings:	
 18032                           
 18033                           	psect	text63
 18034  265F                     __ptext63:	
 18035 ;; *************** function _set_leds_top *****************
 18036 ;; Defined at:
 18037 ;;		line 16 in file "LEDs.c"
 18038 ;; Parameters:    Size  Location     Type
 18039 ;;  x               2    0[BANK1 ] int 
 18040 ;;  ledState        2    2[BANK1 ] int 
 18041 ;; Auto vars:     Size  Location     Type
 18042 ;;		None
 18043 ;; Return value:  Size  Location     Type
 18044 ;;                  1    wreg      void 
 18045 ;; Registers used:
 18046 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18047 ;; Tracked objects:
 18048 ;;		On entry : 0/0
 18049 ;;		On exit  : 0/0
 18050 ;;		Unchanged: 0/0
 18051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18052 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18055 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18056 ;;Total ram usage:        4 bytes
 18057 ;; Hardware stack levels used:    1
 18058 ;; Hardware stack levels required when called:    3
 18059 ;; This function calls:
 18060 ;;		Nothing
 18061 ;; This function is called by:
 18062 ;;		_ReadSavedSettings
 18063 ;;		_ring_tactiles
 18064 ;;		_solidring_tactiles
 18065 ;;		_read_top_tactile
 18066 ;;		_setPresetDisplay
 18067 ;;		_resetRingLEDs
 18068 ;;		_setExpressionDisplay
 18069 ;;		_star_tactiles
 18070 ;; This function uses a non-reentrant model
 18071 ;;
 18072                           
 18073                           
 18074                           ;psect for function _set_leds_top
 18075  265F                     _set_leds_top:	
 18076                           
 18077                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18078                           
 18079                           ;incstack = 0
 18080                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18081  265F  0027               	movlb	7	; select bank7
 18082  2660  100C               	bcf	12,0	;volatile
 18083                           
 18084                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18085  2661  108C               	bcf	12,1	;volatile
 18086                           
 18087                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18088  2662  110C               	bcf	12,2	;volatile
 18089                           
 18090                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18091  2663  118C               	bcf	12,3	;volatile
 18092                           
 18093                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18094  2664  120C               	bcf	12,4	;volatile
 18095                           
 18096                           ;LEDs.c: 22: switch (x) {
 18097  2665  2E95               	goto	l7672
 18098  2666                     l7660:	
 18099                           ;LEDs.c: 23: case 1:
 18100                           
 18101                           
 18102                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18103  2666  0021               	movlb	1	; select bank1
 18104  2667  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18105  2668  0027               	movlb	7	; select bank7
 18106  2669  1C03               	skipc
 18107  266A  100C               	bcf	12,0	;volatile
 18108  266B  1803               	skipnc
 18109  266C  140C               	bsf	12,0	;volatile
 18110                           
 18111                           ;LEDs.c: 25: break;
 18112  266D  0008               	return
 18113  266E                     l7662:	
 18114                           ;LEDs.c: 26: case 2:
 18115                           
 18116                           
 18117                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18118  266E  0021               	movlb	1	; select bank1
 18119  266F  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18120  2670  0027               	movlb	7	; select bank7
 18121  2671  1C03               	skipc
 18122  2672  108C               	bcf	12,1	;volatile
 18123  2673  1803               	skipnc
 18124  2674  148C               	bsf	12,1	;volatile
 18125                           
 18126                           ;LEDs.c: 28: break;
 18127  2675  0008               	return
 18128  2676                     l7664:	
 18129                           ;LEDs.c: 29: case 3:
 18130                           
 18131                           
 18132                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18133  2676  0021               	movlb	1	; select bank1
 18134  2677  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18135  2678  0027               	movlb	7	; select bank7
 18136  2679  1C03               	skipc
 18137  267A  110C               	bcf	12,2	;volatile
 18138  267B  1803               	skipnc
 18139  267C  150C               	bsf	12,2	;volatile
 18140                           
 18141                           ;LEDs.c: 31: break;
 18142  267D  0008               	return
 18143  267E                     l7666:	
 18144                           ;LEDs.c: 32: case 4:
 18145                           
 18146                           
 18147                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18148  267E  0021               	movlb	1	; select bank1
 18149  267F  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18150  2680  0027               	movlb	7	; select bank7
 18151  2681  1C03               	skipc
 18152  2682  118C               	bcf	12,3	;volatile
 18153  2683  1803               	skipnc
 18154  2684  158C               	bsf	12,3	;volatile
 18155                           
 18156                           ;LEDs.c: 34: break;
 18157  2685  0008               	return
 18158  2686                     l7668:	
 18159                           ;LEDs.c: 35: case 5:
 18160                           
 18161                           
 18162                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18163  2686  0021               	movlb	1	; select bank1
 18164  2687  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18165  2688  0027               	movlb	7	; select bank7
 18166  2689  1C03               	skipc
 18167  268A  120C               	bcf	12,4	;volatile
 18168  268B  1803               	skipnc
 18169  268C  160C               	bsf	12,4	;volatile
 18170                           
 18171                           ;LEDs.c: 39: break;
 18172                           
 18173                           ;LEDs.c: 38: case 6:
 18174                           
 18175                           ;LEDs.c: 37: break;
 18176  268D  0008               	return
 18177  268E                     l793:	
 18178                           ;LEDs.c: 40: case 100:
 18179                           
 18180                           
 18181                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18182  268E  0027               	movlb	7	; select bank7
 18183  268F  140C               	bsf	12,0	;volatile
 18184                           
 18185                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18186  2690  148C               	bsf	12,1	;volatile
 18187                           
 18188                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18189  2691  150C               	bsf	12,2	;volatile
 18190                           
 18191                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18192  2692  158C               	bsf	12,3	;volatile
 18193                           
 18194                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18195  2693  160C               	bsf	12,4	;volatile
 18196                           
 18197                           ;LEDs.c: 47: }
 18198                           
 18199                           ;LEDs.c: 46: break;
 18200  2694  0008               	return
 18201  2695                     l7672:	
 18202                           
 18203                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18204                           ; Switch size 1, requested type "space"
 18205                           ; Number of cases is 1, Range of values is 0 to 0
 18206                           ; switch strategies available:
 18207                           ; Name         Instructions Cycles
 18208                           ; simple_byte            4     3 (average)
 18209                           ; direct_byte            8     6 (fixed)
 18210                           ; jumptable            260     6 (fixed)
 18211                           ;	Chosen strategy is simple_byte
 18212  2695  0021               	movlb	1	; select bank1
 18213  2696  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18214  2697  3A00               	xorlw	0	; case 0
 18215  2698  1903               	skipnz
 18216  2699  2E9B               	goto	l9748
 18217  269A  2EB2               	goto	l794
 18218  269B                     l9748:	
 18219                           
 18220                           ; Switch size 1, requested type "space"
 18221                           ; Number of cases is 7, Range of values is 1 to 100
 18222                           ; switch strategies available:
 18223                           ; Name         Instructions Cycles
 18224                           ; simple_byte           22    12 (average)
 18225                           ; direct_byte          209     9 (fixed)
 18226                           ; jumptable            263     9 (fixed)
 18227                           ;	Chosen strategy is simple_byte
 18228  269B  0820               	movf	set_leds_top@x^(0+128),w
 18229  269C  3A01               	xorlw	1	; case 1
 18230  269D  1903               	skipnz
 18231  269E  2E66               	goto	l7660
 18232  269F  3A03               	xorlw	3	; case 2
 18233  26A0  1903               	skipnz
 18234  26A1  2E6E               	goto	l7662
 18235  26A2  3A01               	xorlw	1	; case 3
 18236  26A3  1903               	skipnz
 18237  26A4  2E76               	goto	l7664
 18238  26A5  3A07               	xorlw	7	; case 4
 18239  26A6  1903               	skipnz
 18240  26A7  2E7E               	goto	l7666
 18241  26A8  3A01               	xorlw	1	; case 5
 18242  26A9  1903               	skipnz
 18243  26AA  2E86               	goto	l7668
 18244  26AB  3A03               	xorlw	3	; case 6
 18245  26AC  1903               	skipnz
 18246  26AD  2EB2               	goto	l794
 18247  26AE  3A62               	xorlw	98	; case 100
 18248  26AF  1903               	skipnz
 18249  26B0  2E8E               	goto	l793
 18250  26B1  2EB2               	goto	l794
 18251  26B2                     l794:	
 18252  26B2  0008               	return
 18253  26B3                     __end_of_set_leds_top:	
 18254                           
 18255                           	psect	text64
 18256  21C5                     __ptext64:	
 18257 ;; *************** function _set_leds_bottom *****************
 18258 ;; Defined at:
 18259 ;;		line 51 in file "LEDs.c"
 18260 ;; Parameters:    Size  Location     Type
 18261 ;;  x               2    0[BANK1 ] int 
 18262 ;; Auto vars:     Size  Location     Type
 18263 ;;		None
 18264 ;; Return value:  Size  Location     Type
 18265 ;;                  1    wreg      void 
 18266 ;; Registers used:
 18267 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18268 ;; Tracked objects:
 18269 ;;		On entry : 0/0
 18270 ;;		On exit  : 0/0
 18271 ;;		Unchanged: 0/0
 18272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18273 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18276 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18277 ;;Total ram usage:        2 bytes
 18278 ;; Hardware stack levels used:    1
 18279 ;; Hardware stack levels required when called:    3
 18280 ;; This function calls:
 18281 ;;		Nothing
 18282 ;; This function is called by:
 18283 ;;		_ReadSavedSettings
 18284 ;;		_ring_tactiles
 18285 ;;		_solidring_tactiles
 18286 ;;		_read_bottom_tactile
 18287 ;;		_setPresetDisplay
 18288 ;;		_resetRingLEDs
 18289 ;;		_setExpressionDisplay
 18290 ;;		_star_tactiles
 18291 ;; This function uses a non-reentrant model
 18292 ;;
 18293                           
 18294                           
 18295                           ;psect for function _set_leds_bottom
 18296  21C5                     _set_leds_bottom:	
 18297                           
 18298                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18299                           
 18300                           ;incstack = 0
 18301                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18302  21C5  0022               	movlb	2	; select bank2
 18303  21C6  100F               	bcf	15,0	;volatile
 18304                           
 18305                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18306  21C7  108F               	bcf	15,1	;volatile
 18307                           
 18308                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18309  21C8  110F               	bcf	15,2	;volatile
 18310                           
 18311                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18312  21C9  118F               	bcf	15,3	;volatile
 18313                           
 18314                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18315  21CA  120F               	bcf	15,4	;volatile
 18316                           
 18317                           ;LEDs.c: 57: switch (x) {
 18318  21CB  29E2               	goto	l7688
 18319  21CC                     l798:	
 18320                           ;LEDs.c: 58: case 1:
 18321                           
 18322                           
 18323                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18324  21CC  0022               	movlb	2	; select bank2
 18325  21CD  140F               	bsf	15,0	;volatile
 18326                           
 18327                           ;LEDs.c: 60: break;
 18328  21CE  0008               	return
 18329  21CF                     l800:	
 18330                           ;LEDs.c: 61: case 2:
 18331                           
 18332                           
 18333                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18334  21CF  0022               	movlb	2	; select bank2
 18335  21D0  148F               	bsf	15,1	;volatile
 18336                           
 18337                           ;LEDs.c: 63: break;
 18338  21D1  0008               	return
 18339  21D2                     l801:	
 18340                           ;LEDs.c: 64: case 3:
 18341                           
 18342                           
 18343                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18344  21D2  0022               	movlb	2	; select bank2
 18345  21D3  150F               	bsf	15,2	;volatile
 18346                           
 18347                           ;LEDs.c: 66: break;
 18348  21D4  0008               	return
 18349  21D5                     l802:	
 18350                           ;LEDs.c: 67: case 4:
 18351                           
 18352                           
 18353                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18354  21D5  0022               	movlb	2	; select bank2
 18355  21D6  158F               	bsf	15,3	;volatile
 18356                           
 18357                           ;LEDs.c: 69: break;
 18358  21D7  0008               	return
 18359  21D8                     l803:	
 18360                           ;LEDs.c: 70: case 5:
 18361                           
 18362                           
 18363                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18364  21D8  0022               	movlb	2	; select bank2
 18365  21D9  160F               	bsf	15,4	;volatile
 18366                           
 18367                           ;LEDs.c: 74: break;
 18368                           
 18369                           ;LEDs.c: 73: case 6:
 18370                           
 18371                           ;LEDs.c: 72: break;
 18372  21DA  0008               	return
 18373  21DB                     l805:	
 18374                           ;LEDs.c: 75: case 100:
 18375                           
 18376                           
 18377                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18378  21DB  0022               	movlb	2	; select bank2
 18379  21DC  140F               	bsf	15,0	;volatile
 18380                           
 18381                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18382  21DD  148F               	bsf	15,1	;volatile
 18383                           
 18384                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18385  21DE  150F               	bsf	15,2	;volatile
 18386                           
 18387                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18388  21DF  158F               	bsf	15,3	;volatile
 18389                           
 18390                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18391  21E0  160F               	bsf	15,4	;volatile
 18392                           
 18393                           ;LEDs.c: 82: }
 18394                           
 18395                           ;LEDs.c: 81: break;
 18396  21E1  0008               	return
 18397  21E2                     l7688:	
 18398                           
 18399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18400                           ; Switch size 1, requested type "space"
 18401                           ; Number of cases is 1, Range of values is 0 to 0
 18402                           ; switch strategies available:
 18403                           ; Name         Instructions Cycles
 18404                           ; simple_byte            4     3 (average)
 18405                           ; direct_byte            8     6 (fixed)
 18406                           ; jumptable            260     6 (fixed)
 18407                           ;	Chosen strategy is simple_byte
 18408  21E2  0021               	movlb	1	; select bank1
 18409  21E3  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18410  21E4  3A00               	xorlw	0	; case 0
 18411  21E5  1903               	skipnz
 18412  21E6  29E8               	goto	l9750
 18413  21E7  29FF               	goto	l806
 18414  21E8                     l9750:	
 18415                           
 18416                           ; Switch size 1, requested type "space"
 18417                           ; Number of cases is 7, Range of values is 1 to 100
 18418                           ; switch strategies available:
 18419                           ; Name         Instructions Cycles
 18420                           ; simple_byte           22    12 (average)
 18421                           ; direct_byte          209     9 (fixed)
 18422                           ; jumptable            263     9 (fixed)
 18423                           ;	Chosen strategy is simple_byte
 18424  21E8  0820               	movf	set_leds_bottom@x^(0+128),w
 18425  21E9  3A01               	xorlw	1	; case 1
 18426  21EA  1903               	skipnz
 18427  21EB  29CC               	goto	l798
 18428  21EC  3A03               	xorlw	3	; case 2
 18429  21ED  1903               	skipnz
 18430  21EE  29CF               	goto	l800
 18431  21EF  3A01               	xorlw	1	; case 3
 18432  21F0  1903               	skipnz
 18433  21F1  29D2               	goto	l801
 18434  21F2  3A07               	xorlw	7	; case 4
 18435  21F3  1903               	skipnz
 18436  21F4  29D5               	goto	l802
 18437  21F5  3A01               	xorlw	1	; case 5
 18438  21F6  1903               	skipnz
 18439  21F7  29D8               	goto	l803
 18440  21F8  3A03               	xorlw	3	; case 6
 18441  21F9  1903               	skipnz
 18442  21FA  29FF               	goto	l806
 18443  21FB  3A62               	xorlw	98	; case 100
 18444  21FC  1903               	skipnz
 18445  21FD  29DB               	goto	l805
 18446  21FE  29FF               	goto	l806
 18447  21FF                     l806:	
 18448  21FF  0008               	return
 18449  2200                     __end_of_set_leds_bottom:	
 18450                           
 18451                           	psect	text65
 18452  2F06                     __ptext65:	
 18453 ;; *************** function _FLASH_ReadWord *****************
 18454 ;; Defined at:
 18455 ;;		line 58 in file "memory.c"
 18456 ;; Parameters:    Size  Location     Type
 18457 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18458 ;; Auto vars:     Size  Location     Type
 18459 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18460 ;; Return value:  Size  Location     Type
 18461 ;;                  2    0[BANK1 ] unsigned int 
 18462 ;; Registers used:
 18463 ;;		wreg, status,2, status,0
 18464 ;; Tracked objects:
 18465 ;;		On entry : 0/0
 18466 ;;		On exit  : 0/0
 18467 ;;		Unchanged: 0/0
 18468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18469 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18470 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18472 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18473 ;;Total ram usage:        3 bytes
 18474 ;; Hardware stack levels used:    1
 18475 ;; Hardware stack levels required when called:    3
 18476 ;; This function calls:
 18477 ;;		Nothing
 18478 ;; This function is called by:
 18479 ;;		_ReadSavedSettings
 18480 ;;		_FLASH_WriteWord
 18481 ;; This function uses a non-reentrant model
 18482 ;;
 18483                           
 18484                           
 18485                           ;psect for function _FLASH_ReadWord
 18486  2F06                     _FLASH_ReadWord:	
 18487                           
 18488                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18489                           
 18490                           ;incstack = 0
 18491                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18492  2F06  3000               	movlw	0
 18493  2F07  1B8B               	btfsc	11,7	;volatile
 18494  2F08  3001               	movlw	1
 18495  2F09  0021               	movlb	1	; select bank1
 18496  2F0A  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18497                           
 18498                           ;memory.c: 61: INTCONbits.GIE = 0;
 18499  2F0B  138B               	bcf	11,7	;volatile
 18500                           
 18501                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18502  2F0C  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18503  2F0D  0023               	movlb	3	; select bank3
 18504  2F0E  0091               	movwf	17	;volatile
 18505                           
 18506                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18507  2F0F  0021               	movlb	1	; select bank1
 18508  2F10  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18509  2F11  0023               	movlb	3	; select bank3
 18510  2F12  0092               	movwf	18	;volatile
 18511                           
 18512                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18513  2F13  1315               	bcf	21,6	;volatile
 18514                           
 18515                           ;memory.c: 66: PMCON1bits.RD = 1;
 18516  2F14  1415               	bsf	21,0	;volatile
 18517                           
 18518                           ;memory.c: 67: __nop();
 18519  2F15  0000               	nop
 18520                           
 18521                           ;memory.c: 68: __nop();
 18522  2F16  0000               	nop
 18523                           
 18524                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18525  2F17  0021               	movlb	1	; select bank1
 18526  2F18  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18527  2F19  1C03               	skipc
 18528  2F1A  138B               	bcf	11,7	;volatile
 18529  2F1B  1803               	skipnc
 18530  2F1C  178B               	bsf	11,7	;volatile
 18531                           
 18532                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18533  2F1D  0023               	movlb	3	; select bank3
 18534  2F1E  0814               	movf	20,w	;volatile
 18535  2F1F  0021               	movlb	1	; select bank1
 18536  2F20  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18537  2F21  0023               	movlb	3	; select bank3
 18538  2F22  0813               	movf	19,w	;volatile
 18539  2F23  0021               	movlb	1	; select bank1
 18540  2F24  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18541  2F25  0008               	return
 18542  2F26                     __end_of_FLASH_ReadWord:	
 18543                           
 18544                           	psect	text66
 18545  2FAC                     __ptext66:	
 18546 ;; *************** function _InitializeTaps *****************
 18547 ;; Defined at:
 18548 ;;		line 228 in file "user.c"
 18549 ;; Parameters:    Size  Location     Type
 18550 ;;		None
 18551 ;; Auto vars:     Size  Location     Type
 18552 ;;  itap            2    1[BANK1 ] int 
 18553 ;; Return value:  Size  Location     Type
 18554 ;;                  1    wreg      void 
 18555 ;; Registers used:
 18556 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18557 ;; Tracked objects:
 18558 ;;		On entry : 0/0
 18559 ;;		On exit  : 0/0
 18560 ;;		Unchanged: 0/0
 18561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18563 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18564 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18565 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18566 ;;Total ram usage:        3 bytes
 18567 ;; Hardware stack levels used:    1
 18568 ;; Hardware stack levels required when called:    3
 18569 ;; This function calls:
 18570 ;;		Nothing
 18571 ;; This function is called by:
 18572 ;;		_main
 18573 ;; This function uses a non-reentrant model
 18574 ;;
 18575                           
 18576                           
 18577                           ;psect for function _InitializeTaps
 18578  2FAC                     _InitializeTaps:	
 18579                           
 18580                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18581                           
 18582                           ;incstack = 0
 18583                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18584  2FAC  0021               	movlb	1	; select bank1
 18585  2FAD  01A1               	clrf	InitializeTaps@itap^(0+128)
 18586  2FAE  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18587  2FAF                     L24:	
 18588  2FAF  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18589  2FB0  3A80               	xorlw	128
 18590  2FB1  00A0               	movwf	??_InitializeTaps^(0+128)
 18591  2FB2  3080               	movlw	128
 18592  2FB3  0220               	subwf	??_InitializeTaps^(0+128),w
 18593  2FB4  1D03               	skipz
 18594  2FB5  2FB8               	goto	u9215
 18595  2FB6  300C               	movlw	12
 18596  2FB7  0221               	subwf	InitializeTaps@itap^(0+128),w
 18597  2FB8                     u9215:	
 18598  2FB8  1803               	btfsc	3,0
 18599  2FB9  0008               	return
 18600                           
 18601                           ;user.c: 230: tap[itap] = 0;
 18602  2FBA  0021               	movlb	1	; select bank1
 18603  2FBB  0821               	movf	InitializeTaps@itap^(0+128),w
 18604  2FBC  00A0               	movwf	??_InitializeTaps^(0+128)
 18605  2FBD  3001               	movlw	1
 18606  2FBE                     u9225:	
 18607  2FBE  35A0               	lslf	??_InitializeTaps^(0+128),f
 18608  2FBF  3EFF               	addlw	-1
 18609  2FC0  1D03               	skipz
 18610  2FC1  2FBE               	goto	u9225
 18611  2FC2  3520               	lslf	??_InitializeTaps^(0+128),w
 18612  2FC3  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18613  2FC4  0086               	movwf	6
 18614  2FC5  3002               	movlw	2	; select bank5/6
 18615  2FC6  0087               	movwf	7
 18616  2FC7  3000               	movlw	0
 18617  2FC8  3FC0               	movwi [0]fsr1
 18618  2FC9  3000               	movlw	0
 18619  2FCA  3FC1               	movwi [1]fsr1
 18620  2FCB  3FC2               	movwi [2]fsr1
 18621  2FCC  3FC3               	movwi [3]fsr1
 18622  2FCD  3001               	movlw	1
 18623  2FCE  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18624  2FCF  3000               	movlw	0
 18625  2FD0  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18626  2FD1  2FAF               	goto	L24
 18627  2FD2                     __end_of_InitializeTaps:	
 18628                           
 18629                           	psect	text67
 18630  205B                     __ptext67:	
 18631 ;; *************** function _InitApp *****************
 18632 ;; Defined at:
 18633 ;;		line 23 in file "user.c"
 18634 ;; Parameters:    Size  Location     Type
 18635 ;;		None
 18636 ;; Auto vars:     Size  Location     Type
 18637 ;;		None
 18638 ;; Return value:  Size  Location     Type
 18639 ;;                  1    wreg      void 
 18640 ;; Registers used:
 18641 ;;		wreg, status,2, status,0, pclath, cstack
 18642 ;; Tracked objects:
 18643 ;;		On entry : 0/0
 18644 ;;		On exit  : 0/0
 18645 ;;		Unchanged: 0/0
 18646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18651 ;;Total ram usage:        0 bytes
 18652 ;; Hardware stack levels used:    1
 18653 ;; Hardware stack levels required when called:    5
 18654 ;; This function calls:
 18655 ;;		_init_adc
 18656 ;;		_init_pwm
 18657 ;; This function is called by:
 18658 ;;		_main
 18659 ;; This function uses a non-reentrant model
 18660 ;;
 18661                           
 18662                           
 18663                           ;psect for function _InitApp
 18664  205B                     _InitApp:	
 18665                           
 18666                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18667                           
 18668                           ;incstack = 0
 18669                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18670  205B  0021               	movlb	1	; select bank1
 18671  205C  100D               	bcf	13,0	;volatile
 18672                           
 18673                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18674  205D  108D               	bcf	13,1	;volatile
 18675                           
 18676                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18677  205E  110D               	bcf	13,2	;volatile
 18678                           
 18679                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18680  205F  118D               	bcf	13,3	;volatile
 18681                           
 18682                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18683  2060  120D               	bcf	13,4	;volatile
 18684                           
 18685                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18686  2061  128D               	bcf	13,5	;volatile
 18687                           
 18688                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18689  2062  140E               	bsf	14,0	;volatile
 18690                           
 18691                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18692  2063  120E               	bcf	14,4	;volatile
 18693                           
 18694                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18695  2064  128E               	bcf	14,5	;volatile
 18696                           
 18697                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18698  2065  100F               	bcf	15,0	;volatile
 18699                           
 18700                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18701  2066  108F               	bcf	15,1	;volatile
 18702                           
 18703                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18704  2067  110F               	bcf	15,2	;volatile
 18705                           
 18706                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18707  2068  118F               	bcf	15,3	;volatile
 18708                           
 18709                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18710  2069  120F               	bcf	15,4	;volatile
 18711                           
 18712                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18713  206A  168F               	bsf	15,5	;volatile
 18714                           
 18715                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18716  206B  170F               	bsf	15,6	;volatile
 18717                           
 18718                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18719  206C  178F               	bsf	15,7	;volatile
 18720                           
 18721                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18722  206D  1410               	bsf	16,0	;volatile
 18723                           
 18724                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18725  206E  1490               	bsf	16,1	;volatile
 18726                           
 18727                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18728  206F  0023               	movlb	3	; select bank3
 18729  2070  1010               	bcf	16,0	;volatile
 18730                           
 18731                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18732  2071  1090               	bcf	16,1	;volatile
 18733                           
 18734                           ;user.c: 53: PORTEbits.RE0 = 0;
 18735  2072  0020               	movlb	0	; select bank0
 18736  2073  1010               	bcf	16,0	;volatile
 18737                           
 18738                           ;user.c: 54: PORTEbits.RE1 = 0;
 18739  2074  1090               	bcf	16,1	;volatile
 18740                           
 18741                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18742  2075  0026               	movlb	6	; select bank6
 18743  2076  100C               	bcf	12,0	;volatile
 18744                           
 18745                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18746  2077  108C               	bcf	12,1	;volatile
 18747                           
 18748                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18749  2078  110C               	bcf	12,2	;volatile
 18750                           
 18751                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18752  2079  118C               	bcf	12,3	;volatile
 18753                           
 18754                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18755  207A  120C               	bcf	12,4	;volatile
 18756                           
 18757                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18758  207B  128C               	bcf	12,5	;volatile
 18759                           
 18760                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18761  207C  170C               	bsf	12,6	;volatile
 18762                           
 18763                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18764  207D  0028               	movlb	8	; select bank8
 18765  207E  130C               	bcf	12,6	;volatile
 18766                           
 18767                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18768  207F  0026               	movlb	6	; select bank6
 18769  2080  108D               	bcf	13,1	;volatile
 18770                           
 18771                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18772  2081  110D               	bcf	13,2	;volatile
 18773                           
 18774                           ;user.c: 68: init_adc();
 18775  2082  31AE  2628  31A0   	fcall	_init_adc
 18776                           
 18777                           ;user.c: 69: init_pwm();
 18778  2085  31A3  23B4         	fcall	_init_pwm
 18779                           
 18780                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18781  2087  178B               	bsf	11,7	;volatile
 18782                           
 18783                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18784  2088  168B               	bsf	11,5	;volatile
 18785                           
 18786                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18787  2089  110B               	bcf	11,2	;volatile
 18788  208A  0008               	return
 18789  208B                     __end_of_InitApp:	
 18790                           
 18791                           	psect	text68
 18792  23B4                     __ptext68:	
 18793 ;; *************** function _init_pwm *****************
 18794 ;; Defined at:
 18795 ;;		line 129 in file "user.c"
 18796 ;; Parameters:    Size  Location     Type
 18797 ;;		None
 18798 ;; Auto vars:     Size  Location     Type
 18799 ;;		None
 18800 ;; Return value:  Size  Location     Type
 18801 ;;                  1    wreg      void 
 18802 ;; Registers used:
 18803 ;;		wreg, status,2, status,0, pclath, cstack
 18804 ;; Tracked objects:
 18805 ;;		On entry : 0/0
 18806 ;;		On exit  : 0/0
 18807 ;;		Unchanged: 0/0
 18808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18813 ;;Total ram usage:        0 bytes
 18814 ;; Hardware stack levels used:    1
 18815 ;; Hardware stack levels required when called:    4
 18816 ;; This function calls:
 18817 ;;		_init_timer0
 18818 ;;		_init_timer2
 18819 ;; This function is called by:
 18820 ;;		_InitApp
 18821 ;; This function uses a non-reentrant model
 18822 ;;
 18823                           
 18824                           
 18825                           ;psect for function _init_pwm
 18826  23B4                     _init_pwm:	
 18827                           
 18828                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 18829                           
 18830                           ;incstack = 0
 18831                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 18832  23B4  0022               	movlb	2	; select bank2
 18833  23B5  101D               	bcf	29,0	;volatile
 18834                           
 18835                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 18836  23B6  0021               	movlb	1	; select bank1
 18837  23B7  110E               	bcf	14,2	;volatile
 18838                           
 18839                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 18840  23B8  108E               	bcf	14,1	;volatile
 18841                           
 18842                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 18843  23B9  0026               	movlb	6	; select bank6
 18844  23BA  100D               	bcf	13,0	;volatile
 18845                           
 18846                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 18847  23BB  118D               	bcf	13,3	;volatile
 18848                           
 18849                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 18850  23BC  120D               	bcf	13,4	;volatile
 18851                           
 18852                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 18853  23BD  0021               	movlb	1	; select bank1
 18854  23BE  1310               	bcf	16,6	;volatile
 18855                           
 18856                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 18857  23BF  1290               	bcf	16,5	;volatile
 18858                           
 18859                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 18860  23C0  1210               	bcf	16,4	;volatile
 18861                           
 18862                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 18863  23C1  1190               	bcf	16,3	;volatile
 18864                           
 18865                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 18866  23C2  1110               	bcf	16,2	;volatile
 18867                           
 18868                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 18869  23C3  300F               	movlw	15
 18870  23C4  0025               	movlb	5	; select bank5
 18871  23C5  0493               	iorwf	19,f	;volatile
 18872                           
 18873                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 18874  23C6  300F               	movlw	15
 18875  23C7  049A               	iorwf	26,f	;volatile
 18876                           
 18877                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 18878  23C8  300F               	movlw	15
 18879  23C9  0026               	movlb	6	; select bank6
 18880  23CA  0493               	iorwf	19,f	;volatile
 18881                           
 18882                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 18883  23CB  300F               	movlw	15
 18884  23CC  049A               	iorwf	26,f	;volatile
 18885                           
 18886                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 18887  23CD  300F               	movlw	15
 18888  23CE  049E               	iorwf	30,f	;volatile
 18889                           
 18890                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 18891  23CF  300F               	movlw	15
 18892  23D0  002C               	movlb	12	; select bank12
 18893  23D1  0493               	iorwf	19,f	;volatile
 18894                           
 18895                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 18896  23D2  300F               	movlw	15
 18897  23D3  0496               	iorwf	22,f	;volatile
 18898                           
 18899                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 18900  23D4  300F               	movlw	15
 18901  23D5  0499               	iorwf	25,f	;volatile
 18902                           
 18903                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 18904  23D6  300F               	movlw	15
 18905  23D7  049C               	iorwf	28,f	;volatile
 18906                           
 18907                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 18908  23D8  300F               	movlw	15
 18909  23D9  049F               	iorwf	31,f	;volatile
 18910                           
 18911                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 18912  23DA  0025               	movlb	5	; select bank5
 18913  23DB  019D               	clrf	29	;volatile
 18914                           
 18915                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 18916  23DC  019E               	clrf	30	;volatile
 18917                           
 18918                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 18919  23DD  019F               	clrf	31	;volatile
 18920                           
 18921                           ;user.c: 154: CCPR1 = 50;
 18922  23DE  3000               	movlw	0
 18923  23DF  0092               	movwf	18	;volatile
 18924  23E0  3032               	movlw	50
 18925  23E1  0091               	movwf	17	;volatile
 18926                           
 18927                           ;user.c: 155: CCPR2 = 100;
 18928  23E2  3000               	movlw	0
 18929  23E3  0099               	movwf	25	;volatile
 18930  23E4  3064               	movlw	100
 18931  23E5  0098               	movwf	24	;volatile
 18932                           
 18933                           ;user.c: 156: CCPR3 = 150;
 18934  23E6  3000               	movlw	0
 18935  23E7  0026               	movlb	6	; select bank6
 18936  23E8  0092               	movwf	18	;volatile
 18937  23E9  3096               	movlw	150
 18938  23EA  0091               	movwf	17	;volatile
 18939                           
 18940                           ;user.c: 157: CCPR4 = 200;
 18941  23EB  3000               	movlw	0
 18942  23EC  0099               	movwf	25	;volatile
 18943  23ED  30C8               	movlw	200
 18944  23EE  0098               	movwf	24	;volatile
 18945                           
 18946                           ;user.c: 158: init_timer2();
 18947  23EF  31AE  2616  31A3   	fcall	_init_timer2
 18948                           
 18949                           ;user.c: 159: init_timer0();
 18950  23F2  31AE  260F         	fcall	_init_timer0
 18951  23F4  0008               	return
 18952  23F5                     __end_of_init_pwm:	
 18953                           
 18954                           	psect	text69
 18955  2E16                     __ptext69:	
 18956 ;; *************** function _init_timer2 *****************
 18957 ;; Defined at:
 18958 ;;		line 162 in file "user.c"
 18959 ;; Parameters:    Size  Location     Type
 18960 ;;		None
 18961 ;; Auto vars:     Size  Location     Type
 18962 ;;		None
 18963 ;; Return value:  Size  Location     Type
 18964 ;;                  1    wreg      void 
 18965 ;; Registers used:
 18966 ;;		wreg, status,2, status,0
 18967 ;; Tracked objects:
 18968 ;;		On entry : 0/0
 18969 ;;		On exit  : 0/0
 18970 ;;		Unchanged: 0/0
 18971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18976 ;;Total ram usage:        0 bytes
 18977 ;; Hardware stack levels used:    1
 18978 ;; Hardware stack levels required when called:    3
 18979 ;; This function calls:
 18980 ;;		Nothing
 18981 ;; This function is called by:
 18982 ;;		_init_pwm
 18983 ;; This function uses a non-reentrant model
 18984 ;;
 18985                           
 18986                           
 18987                           ;psect for function _init_timer2
 18988  2E16                     _init_timer2:	
 18989                           
 18990                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 18991                           
 18992                           ;incstack = 0
 18993                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 18994  2E16  3087               	movlw	-121
 18995  2E17  0020               	movlb	0	; select bank0
 18996  2E18  059C               	andwf	28,f	;volatile
 18997                           
 18998                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 18999  2E19  30FC               	movlw	-4
 19000  2E1A  059C               	andwf	28,f	;volatile
 19001                           
 19002                           ;user.c: 165: PR2 = 0xFF;
 19003  2E1B  30FF               	movlw	255
 19004  2E1C  009B               	movwf	27	;volatile
 19005                           
 19006                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19007  2E1D  151C               	bsf	28,2	;volatile
 19008  2E1E  0008               	return
 19009  2E1F                     __end_of_init_timer2:	
 19010                           
 19011                           	psect	text70
 19012  2E0F                     __ptext70:	
 19013 ;; *************** function _init_timer0 *****************
 19014 ;; Defined at:
 19015 ;;		line 169 in file "user.c"
 19016 ;; Parameters:    Size  Location     Type
 19017 ;;		None
 19018 ;; Auto vars:     Size  Location     Type
 19019 ;;		None
 19020 ;; Return value:  Size  Location     Type
 19021 ;;                  1    wreg      void 
 19022 ;; Registers used:
 19023 ;;		None
 19024 ;; Tracked objects:
 19025 ;;		On entry : 0/0
 19026 ;;		On exit  : 0/0
 19027 ;;		Unchanged: 0/0
 19028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19033 ;;Total ram usage:        0 bytes
 19034 ;; Hardware stack levels used:    1
 19035 ;; Hardware stack levels required when called:    3
 19036 ;; This function calls:
 19037 ;;		Nothing
 19038 ;; This function is called by:
 19039 ;;		_init_pwm
 19040 ;; This function uses a non-reentrant model
 19041 ;;
 19042                           
 19043                           
 19044                           ;psect for function _init_timer0
 19045  2E0F                     _init_timer0:	
 19046                           
 19047                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19048                           
 19049                           ;incstack = 0
 19050                           ; Regs used in _init_timer0: []
 19051  2E0F  0021               	movlb	1	; select bank1
 19052  2E10  1295               	bcf	21,5	;volatile
 19053                           
 19054                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19055  2E11  1195               	bcf	21,3	;volatile
 19056                           
 19057                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19058  2E12  1015               	bcf	21,0	;volatile
 19059                           
 19060                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19061  2E13  1495               	bsf	21,1	;volatile
 19062                           
 19063                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19064  2E14  1115               	bcf	21,2	;volatile
 19065  2E15  0008               	return
 19066  2E16                     __end_of_init_timer0:	
 19067                           
 19068                           	psect	text71
 19069  2E28                     __ptext71:	
 19070 ;; *************** function _init_adc *****************
 19071 ;; Defined at:
 19072 ;;		line 115 in file "user.c"
 19073 ;; Parameters:    Size  Location     Type
 19074 ;;		None
 19075 ;; Auto vars:     Size  Location     Type
 19076 ;;		None
 19077 ;; Return value:  Size  Location     Type
 19078 ;;                  1    wreg      void 
 19079 ;; Registers used:
 19080 ;;		wreg, status,2, status,0
 19081 ;; Tracked objects:
 19082 ;;		On entry : 0/0
 19083 ;;		On exit  : 0/0
 19084 ;;		Unchanged: 0/0
 19085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19090 ;;Total ram usage:        0 bytes
 19091 ;; Hardware stack levels used:    1
 19092 ;; Hardware stack levels required when called:    3
 19093 ;; This function calls:
 19094 ;;		Nothing
 19095 ;; This function is called by:
 19096 ;;		_InitApp
 19097 ;; This function uses a non-reentrant model
 19098 ;;
 19099                           
 19100                           
 19101                           ;psect for function _init_adc
 19102  2E28                     _init_adc:	
 19103                           
 19104                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19105                           
 19106                           ;incstack = 0
 19107                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19108  2E28  0021               	movlb	1	; select bank1
 19109  2E29  179E               	bsf	30,7	;volatile
 19110                           
 19111                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19112  2E2A  081E               	movf	30,w	;volatile
 19113  2E2B  398F               	andlw	-113
 19114  2E2C  3860               	iorlw	96
 19115  2E2D  009E               	movwf	30	;volatile
 19116                           
 19117                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19118  2E2E  30FC               	movlw	-4
 19119  2E2F  059E               	andwf	30,f	;volatile
 19120                           
 19121                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19122  2E30  141D               	bsf	29,0	;volatile
 19123  2E31  0008               	return
 19124  2E32                     __end_of_init_adc:	
 19125                           
 19126                           	psect	text72
 19127  2E07                     __ptext72:	
 19128 ;; *************** function _ConfigureOscillator *****************
 19129 ;; Defined at:
 19130 ;;		line 18 in file "system.c"
 19131 ;; Parameters:    Size  Location     Type
 19132 ;;		None
 19133 ;; Auto vars:     Size  Location     Type
 19134 ;;		None
 19135 ;; Return value:  Size  Location     Type
 19136 ;;                  1    wreg      void 
 19137 ;; Registers used:
 19138 ;;		wreg, status,2, status,0
 19139 ;; Tracked objects:
 19140 ;;		On entry : 0/0
 19141 ;;		On exit  : 0/0
 19142 ;;		Unchanged: 0/0
 19143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19148 ;;Total ram usage:        0 bytes
 19149 ;; Hardware stack levels used:    1
 19150 ;; Hardware stack levels required when called:    3
 19151 ;; This function calls:
 19152 ;;		Nothing
 19153 ;; This function is called by:
 19154 ;;		_main
 19155 ;; This function uses a non-reentrant model
 19156 ;;
 19157                           
 19158                           
 19159                           ;psect for function _ConfigureOscillator
 19160  2E07                     _ConfigureOscillator:	
 19161                           
 19162                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19163                           
 19164                           ;incstack = 0
 19165                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19166  2E07  30FC               	movlw	-4
 19167  2E08  0021               	movlb	1	; select bank1
 19168  2E09  0599               	andwf	25,f	;volatile
 19169  2E0A  0008               	return
 19170  2E0B                     __end_of_ConfigureOscillator:	
 19171                           
 19172                           	psect	intentry
 19173  0004                     __pintentry:	
 19174 ;; *************** function _isr *****************
 19175 ;; Defined at:
 19176 ;;		line 28 in file "interrupts.c"
 19177 ;; Parameters:    Size  Location     Type
 19178 ;;		None
 19179 ;; Auto vars:     Size  Location     Type
 19180 ;;  subDiv          1   13[COMMON] unsigned char 
 19181 ;; Return value:  Size  Location     Type
 19182 ;;                  1    wreg      void 
 19183 ;; Registers used:
 19184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19185 ;; Tracked objects:
 19186 ;;		On entry : 0/0
 19187 ;;		On exit  : 0/0
 19188 ;;		Unchanged: 0/0
 19189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19192 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19193 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19194 ;;Total ram usage:        7 bytes
 19195 ;; Hardware stack levels used:    1
 19196 ;; Hardware stack levels required when called:    2
 19197 ;; This function calls:
 19198 ;;		_modulation
 19199 ;;		i1___awdiv
 19200 ;;		i1_getModulationSubdivision
 19201 ;;		i1_set_leds_top
 19202 ;; This function is called by:
 19203 ;;		Interrupt level 1
 19204 ;; This function uses a non-reentrant model
 19205 ;;
 19206                           
 19207  0004                     _isr:	
 19208                           
 19209                           ;incstack = 0
 19210                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19211  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19212  0005  3180               	pagesel	$
 19213  0006  0020               	movlb	0	; select bank0
 19214  0007  087F               	movf	127,w
 19215  0008  00BF               	movwf	??_isr+5
 19216                           
 19217                           ;interrupts.c: 31: extern char isInitialized;
 19218                           ;interrupts.c: 32: extern volatile long timer;
 19219                           ;interrupts.c: 33: extern volatile long sub_timer;
 19220                           ;interrupts.c: 34: extern volatile long tap_timer;
 19221                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19222                           ;interrupts.c: 36: extern int mod_delay_time;
 19223                           ;interrupts.c: 40: extern int top_push_state;
 19224                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19225                           ;interrupts.c: 42: extern volatile long mod_timer;
 19226                           ;interrupts.c: 43: extern volatile long delay_time;
 19227                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 19228  0009  1D0B               	btfss	11,2	;volatile
 19229  000A  2ADD               	goto	i1l135
 19230                           
 19231                           ;interrupts.c: 47: if (isInitialized == 0) {
 19232  000B  0023               	movlb	3	; select bank3
 19233  000C  083E               	movf	_isInitialized^(0+384),w
 19234  000D  1903               	btfsc	3,2
 19235  000E  2ADC               	goto	i1l6950
 19236                           
 19237                           ;interrupts.c: 52: }
 19238                           ;interrupts.c: 62: if (timer == 0) {
 19239                           
 19240                           ;interrupts.c: 51: return;
 19241                           
 19242                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 19243  000F  0020               	movlb	0	; select bank0
 19244  0010  084B               	movf	_timer+3,w	;volatile
 19245  0011  044A               	iorwf	_timer+2,w	;volatile
 19246  0012  0449               	iorwf	_timer+1,w	;volatile
 19247  0013  0448               	iorwf	_timer,w	;volatile
 19248  0014  1D03               	skipz
 19249  0015  281B               	goto	i1l136
 19250                           
 19251                           ;interrupts.c: 63: tmpModDelay = mod_delay_time;
 19252  0016  0023               	movlb	3	; select bank3
 19253  0017  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19254  0018  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19255  0019  0859               	movf	_mod_delay_time^(0+384),w
 19256  001A  00B8               	movwf	_tmpModDelay^(0+384)
 19257  001B                     i1l136:	
 19258                           
 19259                           ;interrupts.c: 64: }
 19260                           ;interrupts.c: 65: timer = timer + 1;
 19261  001B  3001               	movlw	1
 19262  001C  0020               	movlb	0	; select bank0
 19263  001D  00BA               	movwf	??_isr
 19264  001E  3000               	movlw	0
 19265  001F  00BB               	movwf	??_isr+1
 19266  0020  3000               	movlw	0
 19267  0021  00BC               	movwf	??_isr+2
 19268  0022  3000               	movlw	0
 19269  0023  00BD               	movwf	??_isr+3
 19270  0024  0848               	movf	_timer,w	;volatile
 19271  0025  07BA               	addwf	??_isr,f
 19272  0026  0849               	movf	_timer+1,w	;volatile
 19273  0027  3DBB               	addwfc	??_isr+1,f
 19274  0028  084A               	movf	_timer+2,w	;volatile
 19275  0029  3DBC               	addwfc	??_isr+2,f
 19276  002A  084B               	movf	_timer+3,w	;volatile
 19277  002B  3DBD               	addwfc	??_isr+3,f
 19278  002C  083D               	movf	??_isr+3,w
 19279  002D  00CB               	movwf	_timer+3	;volatile
 19280  002E  083C               	movf	??_isr+2,w
 19281  002F  00CA               	movwf	_timer+2	;volatile
 19282  0030  083B               	movf	??_isr+1,w
 19283  0031  00C9               	movwf	_timer+1	;volatile
 19284  0032  083A               	movf	??_isr,w
 19285  0033  00C8               	movwf	_timer	;volatile
 19286                           
 19287                           ;interrupts.c: 66: sub_timer = sub_timer + 1;
 19288  0034  3001               	movlw	1
 19289  0035  00BA               	movwf	??_isr
 19290  0036  3000               	movlw	0
 19291  0037  00BB               	movwf	??_isr+1
 19292  0038  3000               	movlw	0
 19293  0039  00BC               	movwf	??_isr+2
 19294  003A  3000               	movlw	0
 19295  003B  00BD               	movwf	??_isr+3
 19296  003C  0840               	movf	_sub_timer,w	;volatile
 19297  003D  07BA               	addwf	??_isr,f
 19298  003E  0841               	movf	_sub_timer+1,w	;volatile
 19299  003F  3DBB               	addwfc	??_isr+1,f
 19300  0040  0842               	movf	_sub_timer+2,w	;volatile
 19301  0041  3DBC               	addwfc	??_isr+2,f
 19302  0042  0843               	movf	_sub_timer+3,w	;volatile
 19303  0043  3DBD               	addwfc	??_isr+3,f
 19304  0044  083D               	movf	??_isr+3,w
 19305  0045  00C3               	movwf	_sub_timer+3	;volatile
 19306  0046  083C               	movf	??_isr+2,w
 19307  0047  00C2               	movwf	_sub_timer+2	;volatile
 19308  0048  083B               	movf	??_isr+1,w
 19309  0049  00C1               	movwf	_sub_timer+1	;volatile
 19310  004A  083A               	movf	??_isr,w
 19311  004B  00C0               	movwf	_sub_timer	;volatile
 19312                           
 19313                           ;interrupts.c: 67: tap_timer = tap_timer + 1;
 19314  004C  3001               	movlw	1
 19315  004D  00BA               	movwf	??_isr
 19316  004E  3000               	movlw	0
 19317  004F  00BB               	movwf	??_isr+1
 19318  0050  3000               	movlw	0
 19319  0051  00BC               	movwf	??_isr+2
 19320  0052  3000               	movlw	0
 19321  0053  00BD               	movwf	??_isr+3
 19322  0054  0844               	movf	_tap_timer,w	;volatile
 19323  0055  07BA               	addwf	??_isr,f
 19324  0056  0845               	movf	_tap_timer+1,w	;volatile
 19325  0057  3DBB               	addwfc	??_isr+1,f
 19326  0058  0846               	movf	_tap_timer+2,w	;volatile
 19327  0059  3DBC               	addwfc	??_isr+2,f
 19328  005A  0847               	movf	_tap_timer+3,w	;volatile
 19329  005B  3DBD               	addwfc	??_isr+3,f
 19330  005C  083D               	movf	??_isr+3,w
 19331  005D  00C7               	movwf	_tap_timer+3	;volatile
 19332  005E  083C               	movf	??_isr+2,w
 19333  005F  00C6               	movwf	_tap_timer+2	;volatile
 19334  0060  083B               	movf	??_isr+1,w
 19335  0061  00C5               	movwf	_tap_timer+1	;volatile
 19336  0062  083A               	movf	??_isr,w
 19337  0063  00C4               	movwf	_tap_timer	;volatile
 19338                           
 19339                           ;interrupts.c: 68: mod_timer = mod_timer + 1;
 19340  0064  3001               	movlw	1
 19341  0065  00BA               	movwf	??_isr
 19342  0066  3000               	movlw	0
 19343  0067  00BB               	movwf	??_isr+1
 19344  0068  3000               	movlw	0
 19345  0069  00BC               	movwf	??_isr+2
 19346  006A  3000               	movlw	0
 19347  006B  00BD               	movwf	??_isr+3
 19348  006C  0023               	movlb	3	; select bank3
 19349  006D  0824               	movf	_mod_timer^(0+384),w	;volatile
 19350  006E  0020               	movlb	0	; select bank0
 19351  006F  07BA               	addwf	??_isr,f
 19352  0070  0023               	movlb	3	; select bank3
 19353  0071  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19354  0072  0020               	movlb	0	; select bank0
 19355  0073  3DBB               	addwfc	??_isr+1,f
 19356  0074  0023               	movlb	3	; select bank3
 19357  0075  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19358  0076  0020               	movlb	0	; select bank0
 19359  0077  3DBC               	addwfc	??_isr+2,f
 19360  0078  0023               	movlb	3	; select bank3
 19361  0079  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19362  007A  0020               	movlb	0	; select bank0
 19363  007B  3DBD               	addwfc	??_isr+3,f
 19364  007C  083D               	movf	??_isr+3,w
 19365  007D  0023               	movlb	3	; select bank3
 19366  007E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19367  007F  0020               	movlb	0	; select bank0
 19368  0080  083C               	movf	??_isr+2,w
 19369  0081  0023               	movlb	3	; select bank3
 19370  0082  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19371  0083  0020               	movlb	0	; select bank0
 19372  0084  083B               	movf	??_isr+1,w
 19373  0085  0023               	movlb	3	; select bank3
 19374  0086  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19375  0087  0020               	movlb	0	; select bank0
 19376  0088  083A               	movf	??_isr,w
 19377  0089  0023               	movlb	3	; select bank3
 19378  008A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19379                           
 19380                           ;interrupts.c: 69: double_timer++;
 19381  008B  3001               	movlw	1
 19382  008C  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19383  008D  3000               	movlw	0
 19384  008E  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19385  008F  3000               	movlw	0
 19386  0090  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19387  0091  3000               	movlw	0
 19388  0092  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19389                           
 19390                           ;interrupts.c: 71: char subDiv = getModulationSubdivision();
 19391  0093  3188  2000  3180   	fcall	i1_getModulationSubdivision
 19392  0096  0870               	movf	?i1_getModulationSubdivision,w
 19393  0097  0020               	movlb	0	; select bank0
 19394  0098  00BA               	movwf	??_isr
 19395  0099  083A               	movf	??_isr,w
 19396  009A  00FD               	movwf	isr@subDiv
 19397                           
 19398                           ;interrupts.c: 76: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 19399  009B  0023               	movlb	3	; select bank3
 19400  009C  0838               	movf	_tmpModDelay^(0+384),w
 19401  009D  0020               	movlb	0	; select bank0
 19402  009E  00BA               	movwf	??_isr
 19403  009F  0023               	movlb	3	; select bank3
 19404  00A0  0839               	movf	(_tmpModDelay+1)^(0+384),w
 19405  00A1  0020               	movlb	0	; select bank0
 19406  00A2  00BB               	movwf	??_isr+1
 19407  00A3  3000               	movlw	0
 19408  00A4  1BBB               	btfsc	??_isr+1,7
 19409  00A5  30FF               	movlw	255
 19410  00A6  00BC               	movwf	??_isr+2
 19411  00A7  00BD               	movwf	??_isr+3
 19412  00A8  0023               	movlb	3	; select bank3
 19413  00A9  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19414  00AA  3A80               	xorlw	128
 19415  00AB  0020               	movlb	0	; select bank0
 19416  00AC  00BE               	movwf	??_isr+4
 19417  00AD  083D               	movf	??_isr+3,w
 19418  00AE  3A80               	xorlw	128
 19419  00AF  023E               	subwf	??_isr+4,w
 19420  00B0  0023               	movlb	3	; select bank3
 19421  00B1  1D03               	skipz
 19422  00B2  28C3               	goto	u670_23
 19423  00B3  0020               	movlb	0	; select bank0
 19424  00B4  083C               	movf	??_isr+2,w
 19425  00B5  0023               	movlb	3	; select bank3
 19426  00B6  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19427  00B7  1D03               	skipz
 19428  00B8  28C3               	goto	u670_23
 19429  00B9  0020               	movlb	0	; select bank0
 19430  00BA  083B               	movf	??_isr+1,w
 19431  00BB  0023               	movlb	3	; select bank3
 19432  00BC  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19433  00BD  1D03               	skipz
 19434  00BE  28C3               	goto	u670_23
 19435  00BF  0020               	movlb	0	; select bank0
 19436  00C0  083A               	movf	??_isr,w
 19437  00C1  0023               	movlb	3	; select bank3
 19438  00C2  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19439  00C3                     u670_23:	
 19440  00C3  1C03               	skipc
 19441  00C4  28EF               	goto	i1l137
 19442  00C5  087D               	movf	isr@subDiv,w
 19443  00C6  0020               	movlb	0	; select bank0
 19444  00C7  00BA               	movwf	??_isr
 19445  00C8  01BB               	clrf	??_isr+1
 19446  00C9  0023               	movlb	3	; select bank3
 19447  00CA  0858               	movf	(_mod_counter+1)^(0+384),w
 19448  00CB  0020               	movlb	0	; select bank0
 19449  00CC  063B               	xorwf	??_isr+1,w
 19450  00CD  1D03               	skipz
 19451  00CE  28D3               	goto	u671_25
 19452  00CF  0023               	movlb	3	; select bank3
 19453  00D0  0857               	movf	_mod_counter^(0+384),w
 19454  00D1  0020               	movlb	0	; select bank0
 19455  00D2  063A               	xorwf	??_isr,w
 19456  00D3                     u671_25:	
 19457  00D3  1D03               	skipz
 19458  00D4  28EF               	goto	i1l137
 19459  00D5  0023               	movlb	3	; select bank3
 19460  00D6  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19461  00D7  0639               	xorwf	(_tmpModDelay+1)^(0+384),w
 19462  00D8  1D03               	skipz
 19463  00D9  28DC               	goto	u672_25
 19464  00DA  0859               	movf	_mod_delay_time^(0+384),w
 19465  00DB  0638               	xorwf	_tmpModDelay^(0+384),w
 19466  00DC                     u672_25:	
 19467  00DC  1D03               	skipz
 19468  00DD  28EF               	goto	i1l137
 19469                           
 19470                           ;interrupts.c: 77: tmpModDelay = (delay_time - sub_timer);
 19471  00DE  0020               	movlb	0	; select bank0
 19472  00DF  0940               	comf	_sub_timer,w	;volatile
 19473  00E0  00BA               	movwf	??_isr
 19474  00E1  0941               	comf	_sub_timer+1,w	;volatile
 19475  00E2  00BB               	movwf	??_isr+1
 19476  00E3  0ABA               	incf	??_isr,f
 19477  00E4  1903               	skipnz
 19478  00E5  0ABB               	incf	??_isr+1,f
 19479  00E6  0852               	movf	_delay_time,w	;volatile
 19480  00E7  073A               	addwf	??_isr,w
 19481  00E8  0023               	movlb	3	; select bank3
 19482  00E9  00B8               	movwf	_tmpModDelay^(0+384)
 19483  00EA  0020               	movlb	0	; select bank0
 19484  00EB  0853               	movf	_delay_time+1,w	;volatile
 19485  00EC  3D3B               	addwfc	??_isr+1,w
 19486  00ED  0023               	movlb	3	; select bank3
 19487  00EE  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19488  00EF                     i1l137:	
 19489                           
 19490                           ;interrupts.c: 78: }
 19491                           ;interrupts.c: 80: if (longBypass_start == 1) {
 19492  00EF  0022               	movlb	2	; select bank2
 19493  00F0  036A               	decf	_longBypass_start^(0+256),w
 19494  00F1  1D03               	btfss	3,2
 19495  00F2  290A               	goto	i1l6852
 19496                           
 19497                           ;interrupts.c: 81: longBypass_timer++;
 19498  00F3  3001               	movlw	1
 19499  00F4  0023               	movlb	3	; select bank3
 19500  00F5  07B2               	addwf	_longBypass_timer^(0+384),f	;volatile
 19501  00F6  3000               	movlw	0
 19502  00F7  3DB3               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19503                           
 19504                           ;interrupts.c: 82: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19505  00F8  0833               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19506  00F9  0020               	movlb	0	; select bank0
 19507  00FA  0259               	subwf	_long_press_limit+1,w
 19508  00FB  1D03               	skipz
 19509  00FC  2901               	goto	u674_25
 19510  00FD  0023               	movlb	3	; select bank3
 19511  00FE  0832               	movf	_longBypass_timer^(0+384),w	;volatile
 19512  00FF  0020               	movlb	0	; select bank0
 19513  0100  0258               	subwf	_long_press_limit,w
 19514  0101                     u674_25:	
 19515  0101  1803               	skipnc
 19516  0102  290A               	goto	i1l6852
 19517  0103  0859               	movf	_long_press_limit+1,w
 19518  0104  0023               	movlb	3	; select bank3
 19519  0105  00B3               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19520  0106  0020               	movlb	0	; select bank0
 19521  0107  0858               	movf	_long_press_limit,w
 19522  0108  0023               	movlb	3	; select bank3
 19523  0109  00B2               	movwf	_longBypass_timer^(0+384)	;volatile
 19524  010A                     i1l6852:	
 19525                           
 19526                           ;interrupts.c: 83: }
 19527                           ;interrupts.c: 84: if (longTap_start == 1) {
 19528  010A  0022               	movlb	2	; select bank2
 19529  010B  036B               	decf	_longTap_start^(0+256),w
 19530  010C  1D03               	btfss	3,2
 19531  010D  2925               	goto	i1l6858
 19532                           
 19533                           ;interrupts.c: 85: longTap_timer++;
 19534  010E  3001               	movlw	1
 19535  010F  0023               	movlb	3	; select bank3
 19536  0110  07B4               	addwf	_longTap_timer^(0+384),f	;volatile
 19537  0111  3000               	movlw	0
 19538  0112  3DB5               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19539                           
 19540                           ;interrupts.c: 86: if (longTap_timer > long_press_limit) {
 19541  0113  0835               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19542  0114  0020               	movlb	0	; select bank0
 19543  0115  0259               	subwf	_long_press_limit+1,w
 19544  0116  1D03               	skipz
 19545  0117  291C               	goto	u676_25
 19546  0118  0023               	movlb	3	; select bank3
 19547  0119  0834               	movf	_longTap_timer^(0+384),w	;volatile
 19548  011A  0020               	movlb	0	; select bank0
 19549  011B  0258               	subwf	_long_press_limit,w
 19550  011C                     u676_25:	
 19551  011C  1803               	skipnc
 19552  011D  2925               	goto	i1l6858
 19553                           
 19554                           ;interrupts.c: 87: longTap_timer = long_press_limit;
 19555  011E  0859               	movf	_long_press_limit+1,w
 19556  011F  0023               	movlb	3	; select bank3
 19557  0120  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19558  0121  0020               	movlb	0	; select bank0
 19559  0122  0858               	movf	_long_press_limit,w
 19560  0123  0023               	movlb	3	; select bank3
 19561  0124  00B4               	movwf	_longTap_timer^(0+384)	;volatile
 19562  0125                     i1l6858:	
 19563                           
 19564                           ;interrupts.c: 88: }
 19565                           ;interrupts.c: 89: }
 19566                           ;interrupts.c: 91: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19567  0125  0020               	movlb	0	; select bank0
 19568  0126  085D               	movf	_longTap_state,w	;volatile
 19569  0127  1D03               	btfss	3,2
 19570  0128  2985               	goto	i1l6884
 19571  0129  084E               	movf	_doubleTap_state,w	;volatile
 19572  012A  1D03               	btfss	3,2
 19573  012B  2985               	goto	i1l6884
 19574  012C  0851               	movf	_presetSaveMode,w
 19575  012D  1D03               	btfss	3,2
 19576  012E  2985               	goto	i1l6884
 19577                           
 19578                           ;interrupts.c: 93: if (timer >= baseline_mod_time) {
 19579  012F  084B               	movf	_timer+3,w	;volatile
 19580  0130  3A80               	xorlw	128
 19581  0131  00BA               	movwf	??_isr
 19582  0132  0023               	movlb	3	; select bank3
 19583  0133  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
 19584  0134  3A80               	xorlw	128
 19585  0135  0020               	movlb	0	; select bank0
 19586  0136  023A               	subwf	??_isr,w
 19587  0137  1D03               	skipz
 19588  0138  2949               	goto	u680_23
 19589  0139  0023               	movlb	3	; select bank3
 19590  013A  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
 19591  013B  0020               	movlb	0	; select bank0
 19592  013C  024A               	subwf	_timer+2,w	;volatile
 19593  013D  1D03               	skipz
 19594  013E  2949               	goto	u680_23
 19595  013F  0023               	movlb	3	; select bank3
 19596  0140  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
 19597  0141  0020               	movlb	0	; select bank0
 19598  0142  0249               	subwf	_timer+1,w	;volatile
 19599  0143  1D03               	skipz
 19600  0144  2949               	goto	u680_23
 19601  0145  0023               	movlb	3	; select bank3
 19602  0146  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
 19603  0147  0020               	movlb	0	; select bank0
 19604  0148  0248               	subwf	_timer,w	;volatile
 19605  0149                     u680_23:	
 19606  0149  1C03               	skipc
 19607  014A  2973               	goto	i1l6880
 19608                           
 19609                           ;interrupts.c: 96: LATBbits.LATB4 = 1;
 19610  014B  0022               	movlb	2	; select bank2
 19611  014C  160D               	bsf	13,4	;volatile
 19612                           
 19613                           ;interrupts.c: 98: timer = 0;
 19614  014D  3000               	movlw	0
 19615  014E  0020               	movlb	0	; select bank0
 19616  014F  00CB               	movwf	_timer+3	;volatile
 19617  0150  3000               	movlw	0
 19618  0151  00CA               	movwf	_timer+2	;volatile
 19619  0152  3000               	movlw	0
 19620  0153  00C9               	movwf	_timer+1	;volatile
 19621  0154  3000               	movlw	0
 19622  0155  00C8               	movwf	_timer	;volatile
 19623                           
 19624                           ;interrupts.c: 100: if (modulation_changed == 1) {
 19625  0156  0023               	movlb	3	; select bank3
 19626  0157  0342               	decf	_modulation_changed^(0+384),w
 19627  0158  1D03               	btfss	3,2
 19628  0159  2973               	goto	i1l6880
 19629                           
 19630                           ;interrupts.c: 103: modulation_changed = 0;
 19631  015A  01C2               	clrf	_modulation_changed^(0+384)
 19632                           
 19633                           ;interrupts.c: 104: mod_time_changed = 0;
 19634  015B  01E4               	clrf	_mod_time_changed^(0+384)
 19635                           
 19636                           ;interrupts.c: 105: sub_timer = delay_time;
 19637  015C  0020               	movlb	0	; select bank0
 19638  015D  0855               	movf	_delay_time+3,w	;volatile
 19639  015E  00C3               	movwf	_sub_timer+3	;volatile
 19640  015F  0854               	movf	_delay_time+2,w	;volatile
 19641  0160  00C2               	movwf	_sub_timer+2	;volatile
 19642  0161  0853               	movf	_delay_time+1,w	;volatile
 19643  0162  00C1               	movwf	_sub_timer+1	;volatile
 19644  0163  0852               	movf	_delay_time,w	;volatile
 19645  0164  00C0               	movwf	_sub_timer	;volatile
 19646                           
 19647                           ;interrupts.c: 106: tmpModDelay = mod_delay_time;
 19648  0165  0023               	movlb	3	; select bank3
 19649  0166  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19650  0167  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19651  0168  0859               	movf	_mod_delay_time^(0+384),w
 19652  0169  00B8               	movwf	_tmpModDelay^(0+384)
 19653                           
 19654                           ;interrupts.c: 107: mod_timer = tmpModDelay;
 19655  016A  0838               	movf	_tmpModDelay^(0+384),w
 19656  016B  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19657  016C  0839               	movf	(_tmpModDelay+1)^(0+384),w
 19658  016D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19659  016E  0D89               	rlf	9,f
 19660  016F  3B89               	subwfb	9,f
 19661  0170  0989               	comf	9,f
 19662  0171  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19663  0172  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19664  0173                     i1l6880:	
 19665                           
 19666                           ;interrupts.c: 115: }
 19667                           ;interrupts.c: 116: }
 19668                           ;interrupts.c: 118: if (timer >= 30) {
 19669  0173  0020               	movlb	0	; select bank0
 19670  0174  1BCB               	btfsc	_timer+3,7	;volatile
 19671  0175  2985               	goto	i1l6884
 19672  0176  084B               	movf	_timer+3,w	;volatile
 19673  0177  1D03               	btfss	3,2
 19674  0178  2983               	goto	i1l6882
 19675  0179  084A               	movf	_timer+2,w	;volatile
 19676  017A  1D03               	btfss	3,2
 19677  017B  2983               	goto	i1l6882
 19678  017C  0849               	movf	_timer+1,w	;volatile
 19679  017D  1D03               	btfss	3,2
 19680  017E  2983               	goto	i1l6882
 19681  017F  301E               	movlw	30
 19682  0180  0248               	subwf	_timer,w	;volatile
 19683  0181  1C03               	btfss	3,0
 19684  0182  2985               	goto	i1l6884
 19685  0183                     i1l6882:	
 19686                           
 19687                           ;interrupts.c: 120: LATBbits.LATB4 = 0;
 19688  0183  0022               	movlb	2	; select bank2
 19689  0184  120D               	bcf	13,4	;volatile
 19690  0185                     i1l6884:	
 19691                           
 19692                           ;interrupts.c: 122: }
 19693                           ;interrupts.c: 123: }
 19694                           ;interrupts.c: 132: if (presetSaveMode < 1 && mode2_state == 0) {
 19695  0185  0020               	movlb	0	; select bank0
 19696  0186  0851               	movf	_presetSaveMode,w
 19697  0187  1D03               	btfss	3,2
 19698  0188  29D7               	goto	i1l6902
 19699  0189  0850               	movf	_mode2_state,w
 19700  018A  1D03               	btfss	3,2
 19701  018B  29D7               	goto	i1l6902
 19702                           
 19703                           ;interrupts.c: 133: if (sub_timer >= delay_time ) {
 19704  018C  0843               	movf	_sub_timer+3,w	;volatile
 19705  018D  3A80               	xorlw	128
 19706  018E  00BA               	movwf	??_isr
 19707  018F  0855               	movf	_delay_time+3,w	;volatile
 19708  0190  3A80               	xorlw	128
 19709  0191  023A               	subwf	??_isr,w
 19710  0192  1D03               	skipz
 19711  0193  299E               	goto	u685_23
 19712  0194  0854               	movf	_delay_time+2,w	;volatile
 19713  0195  0242               	subwf	_sub_timer+2,w	;volatile
 19714  0196  1D03               	skipz
 19715  0197  299E               	goto	u685_23
 19716  0198  0853               	movf	_delay_time+1,w	;volatile
 19717  0199  0241               	subwf	_sub_timer+1,w	;volatile
 19718  019A  1D03               	skipz
 19719  019B  299E               	goto	u685_23
 19720  019C  0852               	movf	_delay_time,w	;volatile
 19721  019D  0240               	subwf	_sub_timer,w	;volatile
 19722  019E                     u685_23:	
 19723  019E  1C03               	skipc
 19724  019F  29B9               	goto	i1l6896
 19725                           
 19726                           ;interrupts.c: 134: if (suspend_blink == 0) {
 19727  01A0  0022               	movlb	2	; select bank2
 19728  01A1  086D               	movf	_suspend_blink^(0+256),w	;volatile
 19729  01A2  1D03               	btfss	3,2
 19730  01A3  29B0               	goto	i1l6894
 19731                           
 19732                           ;interrupts.c: 135: set_leds_top(top_push_state, 1);
 19733  01A4  0020               	movlb	0	; select bank0
 19734  01A5  085B               	movf	_top_push_state+1,w
 19735  01A6  00F1               	movwf	i1set_leds_top@x+1
 19736  01A7  085A               	movf	_top_push_state,w
 19737  01A8  00F0               	movwf	i1set_leds_top@x
 19738  01A9  3001               	movlw	1
 19739  01AA  00F2               	movwf	i1set_leds_top@ledState
 19740  01AB  3000               	movlw	0
 19741  01AC  00F3               	movwf	i1set_leds_top@ledState+1
 19742  01AD  31A4  2439  3180   	fcall	i1_set_leds_top
 19743  01B0                     i1l6894:	
 19744                           
 19745                           ;interrupts.c: 136: }
 19746                           ;interrupts.c: 138: sub_timer = 0;
 19747  01B0  3000               	movlw	0
 19748  01B1  0020               	movlb	0	; select bank0
 19749  01B2  00C3               	movwf	_sub_timer+3	;volatile
 19750  01B3  3000               	movlw	0
 19751  01B4  00C2               	movwf	_sub_timer+2	;volatile
 19752  01B5  3000               	movlw	0
 19753  01B6  00C1               	movwf	_sub_timer+1	;volatile
 19754  01B7  3000               	movlw	0
 19755  01B8  00C0               	movwf	_sub_timer	;volatile
 19756  01B9                     i1l6896:	
 19757                           
 19758                           ;interrupts.c: 139: }
 19759                           ;interrupts.c: 141: if (sub_timer >= 20) {
 19760  01B9  1BC3               	btfsc	_sub_timer+3,7	;volatile
 19761  01BA  29D7               	goto	i1l6902
 19762  01BB  0843               	movf	_sub_timer+3,w	;volatile
 19763  01BC  1D03               	btfss	3,2
 19764  01BD  29C8               	goto	i1l6898
 19765  01BE  0842               	movf	_sub_timer+2,w	;volatile
 19766  01BF  1D03               	btfss	3,2
 19767  01C0  29C8               	goto	i1l6898
 19768  01C1  0841               	movf	_sub_timer+1,w	;volatile
 19769  01C2  1D03               	btfss	3,2
 19770  01C3  29C8               	goto	i1l6898
 19771  01C4  3014               	movlw	20
 19772  01C5  0240               	subwf	_sub_timer,w	;volatile
 19773  01C6  1C03               	btfss	3,0
 19774  01C7  29D7               	goto	i1l6902
 19775  01C8                     i1l6898:	
 19776                           
 19777                           ;interrupts.c: 142: if (suspend_blink == 0) {
 19778  01C8  0022               	movlb	2	; select bank2
 19779  01C9  086D               	movf	_suspend_blink^(0+256),w	;volatile
 19780  01CA  1D03               	btfss	3,2
 19781  01CB  29D7               	goto	i1l6902
 19782                           
 19783                           ;interrupts.c: 143: set_leds_top(top_push_state, 0);
 19784  01CC  0020               	movlb	0	; select bank0
 19785  01CD  085B               	movf	_top_push_state+1,w
 19786  01CE  00F1               	movwf	i1set_leds_top@x+1
 19787  01CF  085A               	movf	_top_push_state,w
 19788  01D0  00F0               	movwf	i1set_leds_top@x
 19789  01D1  3000               	movlw	0
 19790  01D2  00F2               	movwf	i1set_leds_top@ledState
 19791  01D3  00F3               	movwf	i1set_leds_top@ledState+1
 19792  01D4  31A4  2439  3180   	fcall	i1_set_leds_top
 19793  01D7                     i1l6902:	
 19794                           
 19795                           ;interrupts.c: 144: }
 19796                           ;interrupts.c: 145: }
 19797                           ;interrupts.c: 146: }
 19798                           ;interrupts.c: 151: if (presetSaveMode == 1) {
 19799  01D7  0020               	movlb	0	; select bank0
 19800  01D8  0351               	decf	_presetSaveMode,w
 19801  01D9  1D03               	btfss	3,2
 19802  01DA  2A07               	goto	i1l6914
 19803                           
 19804                           ;interrupts.c: 152: if (double_timer >= 250) {
 19805  01DB  0023               	movlb	3	; select bank3
 19806  01DC  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19807  01DD  29F6               	goto	i1l6910
 19808  01DE  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19809  01DF  1D03               	btfss	3,2
 19810  01E0  29EB               	goto	i1l6906
 19811  01E1  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19812  01E2  1D03               	btfss	3,2
 19813  01E3  29EB               	goto	i1l6906
 19814  01E4  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19815  01E5  1D03               	btfss	3,2
 19816  01E6  29EB               	goto	i1l6906
 19817  01E7  30FA               	movlw	250
 19818  01E8  0220               	subwf	_double_timer^(0+384),w	;volatile
 19819  01E9  1C03               	btfss	3,0
 19820  01EA  29F6               	goto	i1l6910
 19821  01EB                     i1l6906:	
 19822                           
 19823                           ;interrupts.c: 153: LATBbits.LATB0 = 1;
 19824  01EB  0022               	movlb	2	; select bank2
 19825  01EC  140D               	bsf	13,0	;volatile
 19826                           
 19827                           ;interrupts.c: 154: double_timer = 0;
 19828  01ED  3000               	movlw	0
 19829  01EE  0023               	movlb	3	; select bank3
 19830  01EF  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19831  01F0  3000               	movlw	0
 19832  01F1  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19833  01F2  3000               	movlw	0
 19834  01F3  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 19835  01F4  3000               	movlw	0
 19836  01F5  00A0               	movwf	_double_timer^(0+384)	;volatile
 19837  01F6                     i1l6910:	
 19838                           
 19839                           ;interrupts.c: 155: }
 19840                           ;interrupts.c: 156: if (double_timer >= 30) {
 19841  01F6  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19842  01F7  2A07               	goto	i1l6914
 19843  01F8  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19844  01F9  1D03               	btfss	3,2
 19845  01FA  2A05               	goto	i1l6912
 19846  01FB  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19847  01FC  1D03               	btfss	3,2
 19848  01FD  2A05               	goto	i1l6912
 19849  01FE  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19850  01FF  1D03               	btfss	3,2
 19851  0200  2A05               	goto	i1l6912
 19852  0201  301E               	movlw	30
 19853  0202  0220               	subwf	_double_timer^(0+384),w	;volatile
 19854  0203  1C03               	btfss	3,0
 19855  0204  2A07               	goto	i1l6914
 19856  0205                     i1l6912:	
 19857                           
 19858                           ;interrupts.c: 157: LATBbits.LATB0 = 0;
 19859  0205  0022               	movlb	2	; select bank2
 19860  0206  100D               	bcf	13,0	;volatile
 19861  0207                     i1l6914:	
 19862                           
 19863                           ;interrupts.c: 158: }
 19864                           ;interrupts.c: 159: }
 19865                           ;interrupts.c: 178: if (mod_timer >= tmpModDelay) {
 19866  0207  0023               	movlb	3	; select bank3
 19867  0208  0838               	movf	_tmpModDelay^(0+384),w
 19868  0209  0020               	movlb	0	; select bank0
 19869  020A  00BA               	movwf	??_isr
 19870  020B  0023               	movlb	3	; select bank3
 19871  020C  0839               	movf	(_tmpModDelay+1)^(0+384),w
 19872  020D  0020               	movlb	0	; select bank0
 19873  020E  00BB               	movwf	??_isr+1
 19874  020F  3000               	movlw	0
 19875  0210  1BBB               	btfsc	??_isr+1,7
 19876  0211  30FF               	movlw	255
 19877  0212  00BC               	movwf	??_isr+2
 19878  0213  00BD               	movwf	??_isr+3
 19879  0214  0023               	movlb	3	; select bank3
 19880  0215  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19881  0216  3A80               	xorlw	128
 19882  0217  0020               	movlb	0	; select bank0
 19883  0218  00BE               	movwf	??_isr+4
 19884  0219  083D               	movf	??_isr+3,w
 19885  021A  3A80               	xorlw	128
 19886  021B  023E               	subwf	??_isr+4,w
 19887  021C  0023               	movlb	3	; select bank3
 19888  021D  1D03               	skipz
 19889  021E  2A2F               	goto	u692_23
 19890  021F  0020               	movlb	0	; select bank0
 19891  0220  083C               	movf	??_isr+2,w
 19892  0221  0023               	movlb	3	; select bank3
 19893  0222  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19894  0223  1D03               	skipz
 19895  0224  2A2F               	goto	u692_23
 19896  0225  0020               	movlb	0	; select bank0
 19897  0226  083B               	movf	??_isr+1,w
 19898  0227  0023               	movlb	3	; select bank3
 19899  0228  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19900  0229  1D03               	skipz
 19901  022A  2A2F               	goto	u692_23
 19902  022B  0020               	movlb	0	; select bank0
 19903  022C  083A               	movf	??_isr,w
 19904  022D  0023               	movlb	3	; select bank3
 19905  022E  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19906  022F                     u692_23:	
 19907  022F  1C03               	skipc
 19908  0230  2AA4               	goto	i1l6932
 19909                           
 19910                           ;interrupts.c: 179: mod_timer = 0;
 19911  0231  3000               	movlw	0
 19912  0232  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19913  0233  3000               	movlw	0
 19914  0234  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19915  0235  3000               	movlw	0
 19916  0236  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19917  0237  3000               	movlw	0
 19918  0238  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19919                           
 19920                           ;interrupts.c: 181: if (mod_counter >= subDiv) {
 19921  0239  0858               	movf	(_mod_counter+1)^(0+384),w
 19922  023A  3A80               	xorlw	128
 19923  023B  0020               	movlb	0	; select bank0
 19924  023C  00BA               	movwf	??_isr
 19925  023D  3080               	movlw	128
 19926  023E  023A               	subwf	??_isr,w
 19927  023F  1D03               	skipz
 19928  0240  2A44               	goto	u693_25
 19929  0241  087D               	movf	isr@subDiv,w
 19930  0242  0023               	movlb	3	; select bank3
 19931  0243  0257               	subwf	_mod_counter^(0+384),w
 19932  0244                     u693_25:	
 19933  0244  1C03               	skipc
 19934  0245  2A50               	goto	i1l155
 19935                           
 19936                           ;interrupts.c: 182: mod_counter = 0;
 19937  0246  0023               	movlb	3	; select bank3
 19938  0247  01D7               	clrf	_mod_counter^(0+384)
 19939  0248  01D8               	clrf	(_mod_counter+1)^(0+384)
 19940                           
 19941                           ;interrupts.c: 183: tmpModDelay = mod_delay_time;
 19942  0249  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19943  024A  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19944  024B  0859               	movf	_mod_delay_time^(0+384),w
 19945  024C  00B8               	movwf	_tmpModDelay^(0+384)
 19946                           
 19947                           ;interrupts.c: 184: LATBbits.LATB0 = 1;
 19948  024D  0022               	movlb	2	; select bank2
 19949  024E  140D               	bsf	13,0	;volatile
 19950                           
 19951                           ;interrupts.c: 185: } else {
 19952  024F  2A52               	goto	i1l6924
 19953  0250                     i1l155:	
 19954                           
 19955                           ;interrupts.c: 186: LATBbits.LATB0 = 0;
 19956  0250  0022               	movlb	2	; select bank2
 19957  0251  100D               	bcf	13,0	;volatile
 19958  0252                     i1l6924:	
 19959                           
 19960                           ;interrupts.c: 187: }
 19961                           ;interrupts.c: 191: mod_value = modArray[mod_counter];
 19962  0252  0023               	movlb	3	; select bank3
 19963  0253  0858               	movf	(_mod_counter+1)^(0+384),w
 19964  0254  0020               	movlb	0	; select bank0
 19965  0255  00BB               	movwf	??_isr+1
 19966  0256  0023               	movlb	3	; select bank3
 19967  0257  0857               	movf	_mod_counter^(0+384),w
 19968  0258  0020               	movlb	0	; select bank0
 19969  0259  00BA               	movwf	??_isr
 19970  025A  35BA               	lslf	??_isr,f
 19971  025B  0DBB               	rlf	??_isr+1,f
 19972  025C  308A               	movlw	138
 19973  025D  00BC               	movwf	??_isr+2
 19974  025E  3023               	movlw	35
 19975  025F  00BD               	movwf	??_isr+3
 19976  0260  083A               	movf	??_isr,w
 19977  0261  073C               	addwf	??_isr+2,w
 19978  0262  0086               	movwf	6
 19979  0263  083B               	movf	??_isr+1,w
 19980  0264  3D3D               	addwfc	??_isr+3,w
 19981  0265  0087               	movwf	7
 19982  0266  3F40               	moviw [0]fsr1
 19983  0267  0024               	movlb	4	; select bank4
 19984  0268  00CF               	movwf	_mod_value^(0+512)
 19985  0269  3F41               	moviw [1]fsr1
 19986  026A  00D0               	movwf	(_mod_value+1)^(0+512)
 19987                           
 19988                           ;interrupts.c: 198: mod_value = modulation(mod_value, adjusted_pot_value);
 19989  026B  084F               	movf	_mod_value^(0+512),w
 19990  026C  0020               	movlb	0	; select bank0
 19991  026D  00AE               	movwf	modulation@x
 19992  026E  0024               	movlb	4	; select bank4
 19993  026F  0850               	movf	(_mod_value+1)^(0+512),w
 19994  0270  0020               	movlb	0	; select bank0
 19995  0271  00AF               	movwf	modulation@x+1
 19996  0272  0D89               	rlf	9,f
 19997  0273  3B89               	subwfb	9,f
 19998  0274  0989               	comf	9,f
 19999  0275  00B0               	movwf	modulation@x+2
 20000  0276  00B1               	movwf	modulation@x+3
 20001  0277  0024               	movlb	4	; select bank4
 20002  0278  0841               	movf	_adjusted_pot_value^(0+512),w
 20003  0279  0020               	movlb	0	; select bank0
 20004  027A  00B2               	movwf	modulation@y
 20005  027B  0024               	movlb	4	; select bank4
 20006  027C  0842               	movf	(_adjusted_pot_value+1)^(0+512),w
 20007  027D  0020               	movlb	0	; select bank0
 20008  027E  00B3               	movwf	modulation@y+1
 20009  027F  0D89               	rlf	9,f
 20010  0280  3B89               	subwfb	9,f
 20011  0281  0989               	comf	9,f
 20012  0282  00B4               	movwf	modulation@y+2
 20013  0283  00B5               	movwf	modulation@y+3
 20014  0284  31A3  2373  3180   	fcall	_modulation
 20015  0287  0020               	movlb	0	; select bank0
 20016  0288  082F               	movf	?_modulation+1,w
 20017  0289  0024               	movlb	4	; select bank4
 20018  028A  00D0               	movwf	(_mod_value+1)^(0+512)
 20019  028B  0020               	movlb	0	; select bank0
 20020  028C  082E               	movf	?_modulation,w
 20021  028D  0024               	movlb	4	; select bank4
 20022  028E  00CF               	movwf	_mod_value^(0+512)
 20023                           
 20024                           ;interrupts.c: 199: CCPR3 = mod_value / 2;
 20025  028F  3002               	movlw	2
 20026  0290  00F0               	movwf	i1___awdiv@divisor
 20027  0291  3000               	movlw	0
 20028  0292  00F1               	movwf	i1___awdiv@divisor+1
 20029  0293  0850               	movf	(_mod_value+1)^(0+512),w
 20030  0294  00F3               	movwf	i1___awdiv@dividend+1
 20031  0295  084F               	movf	_mod_value^(0+512),w
 20032  0296  00F2               	movwf	i1___awdiv@dividend
 20033  0297  31A5  2569  3180   	fcall	i1___awdiv
 20034  029A  0871               	movf	?i1___awdiv+1,w
 20035  029B  0026               	movlb	6	; select bank6
 20036  029C  0092               	movwf	18	;volatile
 20037  029D  0870               	movf	?i1___awdiv,w
 20038  029E  0091               	movwf	17	;volatile
 20039                           
 20040                           ;interrupts.c: 200: mod_counter++;
 20041  029F  3001               	movlw	1
 20042  02A0  0023               	movlb	3	; select bank3
 20043  02A1  07D7               	addwf	_mod_counter^(0+384),f
 20044  02A2  3000               	movlw	0
 20045  02A3  3DD8               	addwfc	(_mod_counter+1)^(0+384),f
 20046  02A4                     i1l6932:	
 20047                           
 20048                           ;interrupts.c: 202: }
 20049                           ;interrupts.c: 204: if (preset_programmning_on == 1) {
 20050  02A4  0343               	decf	_preset_programmning_on^(0+384),w
 20051  02A5  1D03               	btfss	3,2
 20052  02A6  2AD6               	goto	i1l6944
 20053                           
 20054                           ;interrupts.c: 205: preset_blink++;
 20055  02A7  3001               	movlw	1
 20056  02A8  0020               	movlb	0	; select bank0
 20057  02A9  00BA               	movwf	??_isr
 20058  02AA  083A               	movf	??_isr,w
 20059  02AB  0022               	movlb	2	; select bank2
 20060  02AC  07EC               	addwf	_preset_blink^(0+256),f
 20061                           
 20062                           ;interrupts.c: 207: if (preset_blink >= blink_delay) {
 20063  02AD  0023               	movlb	3	; select bank3
 20064  02AE  084C               	movf	(_blink_delay+1)^(0+384),w
 20065  02AF  3A80               	xorlw	128
 20066  02B0  3C80               	sublw	128
 20067  02B1  1D03               	skipz
 20068  02B2  2AB6               	goto	u695_25
 20069  02B3  084B               	movf	_blink_delay^(0+384),w
 20070  02B4  0022               	movlb	2	; select bank2
 20071  02B5  026C               	subwf	_preset_blink^(0+256),w
 20072  02B6                     u695_25:	
 20073  02B6  1C03               	skipc
 20074  02B7  2AD4               	goto	i1l158
 20075                           
 20076                           ;interrupts.c: 208: LATBbits.LATB1 = 1;
 20077  02B8  0022               	movlb	2	; select bank2
 20078  02B9  148D               	bsf	13,1	;volatile
 20079                           
 20080                           ;interrupts.c: 209: if (preset_blink > blink_delay*2) {
 20081  02BA  0023               	movlb	3	; select bank3
 20082  02BB  084C               	movf	(_blink_delay+1)^(0+384),w
 20083  02BC  0020               	movlb	0	; select bank0
 20084  02BD  00BB               	movwf	??_isr+1
 20085  02BE  0023               	movlb	3	; select bank3
 20086  02BF  084B               	movf	_blink_delay^(0+384),w
 20087  02C0  0020               	movlb	0	; select bank0
 20088  02C1  00BA               	movwf	??_isr
 20089  02C2  35BA               	lslf	??_isr,f
 20090  02C3  0DBB               	rlf	??_isr+1,f
 20091  02C4  083B               	movf	??_isr+1,w
 20092  02C5  3A80               	xorlw	128
 20093  02C6  00BC               	movwf	??_isr+2
 20094  02C7  3080               	movlw	128
 20095  02C8  023C               	subwf	??_isr+2,w
 20096  02C9  1D03               	skipz
 20097  02CA  2ACF               	goto	u696_25
 20098  02CB  0022               	movlb	2	; select bank2
 20099  02CC  086C               	movf	_preset_blink^(0+256),w
 20100  02CD  0020               	movlb	0	; select bank0
 20101  02CE  023A               	subwf	??_isr,w
 20102  02CF                     u696_25:	
 20103  02CF  1803               	skipnc
 20104  02D0  2ADC               	goto	i1l6950
 20105                           
 20106                           ;interrupts.c: 210: preset_blink = 0;
 20107  02D1  0022               	movlb	2	; select bank2
 20108  02D2  01EC               	clrf	_preset_blink^(0+256)
 20109                           
 20110                           ;interrupts.c: 211: }
 20111                           ;interrupts.c: 213: } else {
 20112  02D3  2ADC               	goto	i1l6950
 20113  02D4                     i1l158:	
 20114                           
 20115                           ;interrupts.c: 214: LATBbits.LATB1 = 0;
 20116  02D4  0022               	movlb	2	; select bank2
 20117  02D5  2ADB               	goto	i1l6948
 20118  02D6                     i1l6944:	
 20119                           ;interrupts.c: 215: }
 20120                           ;interrupts.c: 217: } else {
 20121                           
 20122                           
 20123                           ;interrupts.c: 218: if (preset_blink > 0) {
 20124  02D6  0022               	movlb	2	; select bank2
 20125  02D7  086C               	movf	_preset_blink^(0+256),w
 20126  02D8  1903               	btfsc	3,2
 20127  02D9  2ADC               	goto	i1l6950
 20128                           
 20129                           ;interrupts.c: 219: preset_blink = 0;
 20130  02DA  01EC               	clrf	_preset_blink^(0+256)
 20131  02DB                     i1l6948:	
 20132                           
 20133                           ;interrupts.c: 220: LATBbits.LATB1 = 0;
 20134  02DB  108D               	bcf	13,1	;volatile
 20135  02DC                     i1l6950:	
 20136                           
 20137                           ;interrupts.c: 221: }
 20138                           ;interrupts.c: 222: }
 20139                           ;interrupts.c: 226: INTCONbits.TMR0IF = 0;
 20140  02DC  110B               	bcf	11,2	;volatile
 20141  02DD                     i1l135:	
 20142  02DD  0020               	movlb	0	; select bank0
 20143  02DE  083F               	movf	??_isr+5,w
 20144  02DF  00FF               	movwf	127
 20145  02E0  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20146  02E1  0009               	retfie
 20147  02E2                     __end_of_isr:	
 20148                           
 20149                           	psect	text74
 20150  2439                     __ptext74:	
 20151 ;; *************** function i1_set_leds_top *****************
 20152 ;; Defined at:
 20153 ;;		line 16 in file "LEDs.c"
 20154 ;; Parameters:    Size  Location     Type
 20155 ;;  x               2    0[COMMON] int 
 20156 ;;  ledState        2    2[COMMON] int 
 20157 ;; Auto vars:     Size  Location     Type
 20158 ;;		None
 20159 ;; Return value:  Size  Location     Type
 20160 ;;                  1    wreg      void 
 20161 ;; Registers used:
 20162 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20163 ;; Tracked objects:
 20164 ;;		On entry : 0/0
 20165 ;;		On exit  : 0/0
 20166 ;;		Unchanged: 0/0
 20167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20168 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20171 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20172 ;;Total ram usage:        4 bytes
 20173 ;; Hardware stack levels used:    1
 20174 ;; This function calls:
 20175 ;;		Nothing
 20176 ;; This function is called by:
 20177 ;;		_isr
 20178 ;; This function uses a non-reentrant model
 20179 ;;
 20180                           
 20181                           
 20182                           ;psect for function i1_set_leds_top
 20183  2439                     i1_set_leds_top:	
 20184                           
 20185                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20186                           
 20187                           ;incstack = 0
 20188                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20189  2439  0027               	movlb	7	; select bank7
 20190  243A  100C               	bcf	12,0	;volatile
 20191                           
 20192                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20193  243B  108C               	bcf	12,1	;volatile
 20194                           
 20195                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20196  243C  110C               	bcf	12,2	;volatile
 20197                           
 20198                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20199  243D  118C               	bcf	12,3	;volatile
 20200                           
 20201                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20202  243E  120C               	bcf	12,4	;volatile
 20203                           
 20204                           ;LEDs.c: 22: switch (x) {
 20205  243F  2C64               	goto	i1l6758
 20206  2440                     i1l6746:	
 20207                           ;LEDs.c: 23: case 1:
 20208                           
 20209                           
 20210                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20211  2440  0C72               	rrf	i1set_leds_top@ledState,w
 20212  2441  1C03               	skipc
 20213  2442  100C               	bcf	12,0	;volatile
 20214  2443  1803               	skipnc
 20215  2444  140C               	bsf	12,0	;volatile
 20216                           
 20217                           ;LEDs.c: 25: break;
 20218  2445  0008               	return
 20219  2446                     i1l6748:	
 20220                           ;LEDs.c: 26: case 2:
 20221                           
 20222                           
 20223                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20224  2446  0C72               	rrf	i1set_leds_top@ledState,w
 20225  2447  1C03               	skipc
 20226  2448  108C               	bcf	12,1	;volatile
 20227  2449  1803               	skipnc
 20228  244A  148C               	bsf	12,1	;volatile
 20229                           
 20230                           ;LEDs.c: 28: break;
 20231  244B  0008               	return
 20232  244C                     i1l6750:	
 20233                           ;LEDs.c: 29: case 3:
 20234                           
 20235                           
 20236                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20237  244C  0C72               	rrf	i1set_leds_top@ledState,w
 20238  244D  1C03               	skipc
 20239  244E  110C               	bcf	12,2	;volatile
 20240  244F  1803               	skipnc
 20241  2450  150C               	bsf	12,2	;volatile
 20242                           
 20243                           ;LEDs.c: 31: break;
 20244  2451  0008               	return
 20245  2452                     i1l6752:	
 20246                           ;LEDs.c: 32: case 4:
 20247                           
 20248                           
 20249                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20250  2452  0C72               	rrf	i1set_leds_top@ledState,w
 20251  2453  1C03               	skipc
 20252  2454  118C               	bcf	12,3	;volatile
 20253  2455  1803               	skipnc
 20254  2456  158C               	bsf	12,3	;volatile
 20255                           
 20256                           ;LEDs.c: 34: break;
 20257  2457  0008               	return
 20258  2458                     i1l6754:	
 20259                           ;LEDs.c: 35: case 5:
 20260                           
 20261                           
 20262                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20263  2458  0C72               	rrf	i1set_leds_top@ledState,w
 20264  2459  1C03               	skipc
 20265  245A  120C               	bcf	12,4	;volatile
 20266  245B  1803               	skipnc
 20267  245C  160C               	bsf	12,4	;volatile
 20268                           
 20269                           ;LEDs.c: 39: break;
 20270                           
 20271                           ;LEDs.c: 38: case 6:
 20272                           
 20273                           ;LEDs.c: 37: break;
 20274  245D  0008               	return
 20275  245E                     i1l793:	
 20276                           ;LEDs.c: 40: case 100:
 20277                           
 20278                           
 20279                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20280  245E  140C               	bsf	12,0	;volatile
 20281                           
 20282                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20283  245F  148C               	bsf	12,1	;volatile
 20284                           
 20285                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20286  2460  150C               	bsf	12,2	;volatile
 20287                           
 20288                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20289  2461  158C               	bsf	12,3	;volatile
 20290                           
 20291                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20292  2462  160C               	bsf	12,4	;volatile
 20293                           
 20294                           ;LEDs.c: 47: }
 20295                           
 20296                           ;LEDs.c: 46: break;
 20297  2463  0008               	return
 20298  2464                     i1l6758:	
 20299                           
 20300                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20301                           ; Switch size 1, requested type "space"
 20302                           ; Number of cases is 1, Range of values is 0 to 0
 20303                           ; switch strategies available:
 20304                           ; Name         Instructions Cycles
 20305                           ; simple_byte            4     3 (average)
 20306                           ; direct_byte            8     6 (fixed)
 20307                           ; jumptable            260     6 (fixed)
 20308                           ;	Chosen strategy is simple_byte
 20309  2464  0871               	movf	i1set_leds_top@x+1,w
 20310  2465  3A00               	xorlw	0	; case 0
 20311  2466  1903               	skipnz
 20312  2467  2C69               	goto	i1l9752
 20313  2468  2C80               	goto	i1l794
 20314  2469                     i1l9752:	
 20315                           
 20316                           ; Switch size 1, requested type "space"
 20317                           ; Number of cases is 7, Range of values is 1 to 100
 20318                           ; switch strategies available:
 20319                           ; Name         Instructions Cycles
 20320                           ; simple_byte           22    12 (average)
 20321                           ; direct_byte          209     9 (fixed)
 20322                           ; jumptable            263     9 (fixed)
 20323                           ;	Chosen strategy is simple_byte
 20324  2469  0870               	movf	i1set_leds_top@x,w
 20325  246A  3A01               	xorlw	1	; case 1
 20326  246B  1903               	skipnz
 20327  246C  2C40               	goto	i1l6746
 20328  246D  3A03               	xorlw	3	; case 2
 20329  246E  1903               	skipnz
 20330  246F  2C46               	goto	i1l6748
 20331  2470  3A01               	xorlw	1	; case 3
 20332  2471  1903               	skipnz
 20333  2472  2C4C               	goto	i1l6750
 20334  2473  3A07               	xorlw	7	; case 4
 20335  2474  1903               	skipnz
 20336  2475  2C52               	goto	i1l6752
 20337  2476  3A01               	xorlw	1	; case 5
 20338  2477  1903               	skipnz
 20339  2478  2C58               	goto	i1l6754
 20340  2479  3A03               	xorlw	3	; case 6
 20341  247A  1903               	skipnz
 20342  247B  2C80               	goto	i1l794
 20343  247C  3A62               	xorlw	98	; case 100
 20344  247D  1903               	skipnz
 20345  247E  2C5E               	goto	i1l793
 20346  247F  2C80               	goto	i1l794
 20347  2480                     i1l794:	
 20348  2480  0008               	return
 20349  2481                     __end_ofi1_set_leds_top:	
 20350                           
 20351                           	psect	text75
 20352  0800                     __ptext75:	
 20353 ;; *************** function i1_getModulationSubdivision *****************
 20354 ;; Defined at:
 20355 ;;		line 26 in file "modulation.c"
 20356 ;; Parameters:    Size  Location     Type
 20357 ;;		None
 20358 ;; Auto vars:     Size  Location     Type
 20359 ;;		None
 20360 ;; Return value:  Size  Location     Type
 20361 ;;                  2    0[COMMON] int 
 20362 ;; Registers used:
 20363 ;;		wreg, status,2, status,0
 20364 ;; Tracked objects:
 20365 ;;		On entry : 0/0
 20366 ;;		On exit  : 0/0
 20367 ;;		Unchanged: 0/0
 20368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20369 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20372 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20373 ;;Total ram usage:        2 bytes
 20374 ;; Hardware stack levels used:    1
 20375 ;; This function calls:
 20376 ;;		Nothing
 20377 ;; This function is called by:
 20378 ;;		_isr
 20379 ;; This function uses a non-reentrant model
 20380 ;;
 20381                           
 20382                           
 20383                           ;psect for function i1_getModulationSubdivision
 20384  0800                     i1_getModulationSubdivision:	
 20385                           
 20386                           ;modulation.c: 27: if (delay_time >= 2400) {
 20387                           
 20388                           ;incstack = 0
 20389                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20390  0800  0020               	movlb	0	; select bank0
 20391  0801  1BD5               	btfsc	_delay_time+3,7	;volatile
 20392  0802  2814               	goto	i1l6772
 20393  0803  0855               	movf	_delay_time+3,w	;volatile
 20394  0804  1D03               	btfss	3,2
 20395  0805  280F               	goto	i1l6766
 20396  0806  0854               	movf	_delay_time+2,w	;volatile
 20397  0807  1D03               	btfss	3,2
 20398  0808  280F               	goto	i1l6766
 20399  0809  3060               	movlw	96
 20400  080A  0252               	subwf	_delay_time,w	;volatile
 20401  080B  3009               	movlw	9
 20402  080C  3B53               	subwfb	_delay_time+1,w	;volatile
 20403  080D  1C03               	btfss	3,0
 20404  080E  2814               	goto	i1l6772
 20405  080F                     i1l6766:	
 20406                           
 20407                           ;modulation.c: 28: return 120;
 20408  080F  3078               	movlw	120
 20409  0810  00F0               	movwf	?i1_getModulationSubdivision
 20410  0811  3000               	movlw	0
 20411  0812  00F1               	movwf	?i1_getModulationSubdivision+1
 20412                           
 20413                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20414  0813  0008               	return
 20415  0814                     i1l6772:	
 20416  0814  1BD5               	btfsc	_delay_time+3,7	;volatile
 20417  0815  2827               	goto	i1l6780
 20418  0816  0855               	movf	_delay_time+3,w	;volatile
 20419  0817  1D03               	btfss	3,2
 20420  0818  2822               	goto	i1l6774
 20421  0819  0854               	movf	_delay_time+2,w	;volatile
 20422  081A  1D03               	btfss	3,2
 20423  081B  2822               	goto	i1l6774
 20424  081C  3058               	movlw	88
 20425  081D  0252               	subwf	_delay_time,w	;volatile
 20426  081E  3002               	movlw	2
 20427  081F  3B53               	subwfb	_delay_time+1,w	;volatile
 20428  0820  1C03               	btfss	3,0
 20429  0821  2827               	goto	i1l6780
 20430  0822                     i1l6774:	
 20431                           
 20432                           ;modulation.c: 30: return 60;
 20433  0822  303C               	movlw	60
 20434  0823  00F0               	movwf	?i1_getModulationSubdivision
 20435  0824  3000               	movlw	0
 20436  0825  00F1               	movwf	?i1_getModulationSubdivision+1
 20437                           
 20438                           ;modulation.c: 31: } else {
 20439  0826  0008               	return
 20440  0827                     i1l6780:	
 20441                           
 20442                           ;modulation.c: 32: return 30;
 20443  0827  301E               	movlw	30
 20444  0828  00F0               	movwf	?i1_getModulationSubdivision
 20445  0829  3000               	movlw	0
 20446  082A  00F1               	movwf	?i1_getModulationSubdivision+1
 20447  082B  0008               	return
 20448  082C                     __end_ofi1_getModulationSubdivision:	
 20449                           
 20450                           	psect	text76
 20451  2569                     __ptext76:	
 20452 ;; *************** function i1___awdiv *****************
 20453 ;; Defined at:
 20454 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20455 ;; Parameters:    Size  Location     Type
 20456 ;;  divisor         2    0[COMMON] int 
 20457 ;;  dividend        2    2[COMMON] int 
 20458 ;; Auto vars:     Size  Location     Type
 20459 ;;  __awdiv         2    7[COMMON] int 
 20460 ;;  __awdiv         1    6[COMMON] unsigned char 
 20461 ;;  __awdiv         1    5[COMMON] unsigned char 
 20462 ;; Return value:  Size  Location     Type
 20463 ;;                  2    0[COMMON] int 
 20464 ;; Registers used:
 20465 ;;		wreg, status,2, status,0
 20466 ;; Tracked objects:
 20467 ;;		On entry : 0/0
 20468 ;;		On exit  : 0/0
 20469 ;;		Unchanged: 0/0
 20470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20471 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20472 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20474 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20475 ;;Total ram usage:        9 bytes
 20476 ;; Hardware stack levels used:    1
 20477 ;; This function calls:
 20478 ;;		Nothing
 20479 ;; This function is called by:
 20480 ;;		_isr
 20481 ;; This function uses a non-reentrant model
 20482 ;;
 20483                           
 20484                           
 20485                           ;psect for function i1___awdiv
 20486  2569                     i1___awdiv:	
 20487                           
 20488                           ;incstack = 0
 20489                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20490  2569  01F6               	clrf	i1___awdiv@sign
 20491  256A  1FF1               	btfss	i1___awdiv@divisor+1,7
 20492  256B  2D73               	goto	i1l6792
 20493  256C  09F0               	comf	i1___awdiv@divisor,f
 20494  256D  09F1               	comf	i1___awdiv@divisor+1,f
 20495  256E  0AF0               	incf	i1___awdiv@divisor,f
 20496  256F  1903               	skipnz
 20497  2570  0AF1               	incf	i1___awdiv@divisor+1,f
 20498  2571  01F6               	clrf	i1___awdiv@sign
 20499  2572  0AF6               	incf	i1___awdiv@sign,f
 20500  2573                     i1l6792:	
 20501  2573  1FF3               	btfss	i1___awdiv@dividend+1,7
 20502  2574  2D7E               	goto	i1l6798
 20503  2575  09F2               	comf	i1___awdiv@dividend,f
 20504  2576  09F3               	comf	i1___awdiv@dividend+1,f
 20505  2577  0AF2               	incf	i1___awdiv@dividend,f
 20506  2578  1903               	skipnz
 20507  2579  0AF3               	incf	i1___awdiv@dividend+1,f
 20508  257A  3001               	movlw	1
 20509  257B  00F4               	movwf	??i1___awdiv
 20510  257C  0874               	movf	??i1___awdiv,w
 20511  257D  06F6               	xorwf	i1___awdiv@sign,f
 20512  257E                     i1l6798:	
 20513  257E  01F7               	clrf	i1___awdiv@quotient
 20514  257F  01F8               	clrf	i1___awdiv@quotient+1
 20515  2580  0870               	movf	i1___awdiv@divisor,w
 20516  2581  0471               	iorwf	i1___awdiv@divisor+1,w
 20517  2582  1903               	btfsc	3,2
 20518  2583  2DAD               	goto	i1l6820
 20519  2584  01F5               	clrf	i1___awdiv@counter
 20520  2585  0AF5               	incf	i1___awdiv@counter,f
 20521  2586                     i1l6808:	
 20522  2586  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20523  2587  2D92               	goto	i1l6810
 20524  2588  3001               	movlw	1
 20525  2589                     u660_25:	
 20526  2589  35F0               	lslf	i1___awdiv@divisor,f
 20527  258A  0DF1               	rlf	i1___awdiv@divisor+1,f
 20528  258B  0B89               	decfsz	9,f
 20529  258C  2D89               	goto	u660_25
 20530  258D  3001               	movlw	1
 20531  258E  00F4               	movwf	??i1___awdiv
 20532  258F  0874               	movf	??i1___awdiv,w
 20533  2590  07F5               	addwf	i1___awdiv@counter,f
 20534  2591  2D86               	goto	i1l6808
 20535  2592                     i1l6810:	
 20536  2592  3001               	movlw	1
 20537  2593                     u662_25:	
 20538  2593  35F7               	lslf	i1___awdiv@quotient,f
 20539  2594  0DF8               	rlf	i1___awdiv@quotient+1,f
 20540  2595  0B89               	decfsz	9,f
 20541  2596  2D93               	goto	u662_25
 20542  2597  0871               	movf	i1___awdiv@divisor+1,w
 20543  2598  0273               	subwf	i1___awdiv@dividend+1,w
 20544  2599  1D03               	skipz
 20545  259A  2D9D               	goto	u663_25
 20546  259B  0870               	movf	i1___awdiv@divisor,w
 20547  259C  0272               	subwf	i1___awdiv@dividend,w
 20548  259D                     u663_25:	
 20549  259D  1C03               	skipc
 20550  259E  2DA4               	goto	i1l6816
 20551  259F  0870               	movf	i1___awdiv@divisor,w
 20552  25A0  02F2               	subwf	i1___awdiv@dividend,f
 20553  25A1  0871               	movf	i1___awdiv@divisor+1,w
 20554  25A2  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20555  25A3  1477               	bsf	i1___awdiv@quotient,0
 20556  25A4                     i1l6816:	
 20557  25A4  3001               	movlw	1
 20558  25A5                     u664_25:	
 20559  25A5  36F1               	lsrf	i1___awdiv@divisor+1,f
 20560  25A6  0CF0               	rrf	i1___awdiv@divisor,f
 20561  25A7  0B89               	decfsz	9,f
 20562  25A8  2DA5               	goto	u664_25
 20563  25A9  3001               	movlw	1
 20564  25AA  02F5               	subwf	i1___awdiv@counter,f
 20565  25AB  1D03               	btfss	3,2
 20566  25AC  2D92               	goto	i1l6810
 20567  25AD                     i1l6820:	
 20568  25AD  0876               	movf	i1___awdiv@sign,w
 20569  25AE  1903               	btfsc	3,2
 20570  25AF  2DB5               	goto	i1l6824
 20571  25B0  09F7               	comf	i1___awdiv@quotient,f
 20572  25B1  09F8               	comf	i1___awdiv@quotient+1,f
 20573  25B2  0AF7               	incf	i1___awdiv@quotient,f
 20574  25B3  1903               	skipnz
 20575  25B4  0AF8               	incf	i1___awdiv@quotient+1,f
 20576  25B5                     i1l6824:	
 20577  25B5  0878               	movf	i1___awdiv@quotient+1,w
 20578  25B6  00F1               	movwf	?i1___awdiv+1
 20579  25B7  0877               	movf	i1___awdiv@quotient,w
 20580  25B8  00F0               	movwf	?i1___awdiv
 20581  25B9  0008               	return
 20582  25BA                     __end_ofi1___awdiv:	
 20583                           
 20584                           	psect	text77
 20585  2373                     __ptext77:	
 20586 ;; *************** function _modulation *****************
 20587 ;; Defined at:
 20588 ;;		line 222 in file "user.c"
 20589 ;; Parameters:    Size  Location     Type
 20590 ;;  x               4   14[BANK0 ] long 
 20591 ;;  y               4   18[BANK0 ] long 
 20592 ;; Auto vars:     Size  Location     Type
 20593 ;;		None
 20594 ;; Return value:  Size  Location     Type
 20595 ;;                  4   14[BANK0 ] long 
 20596 ;; Registers used:
 20597 ;;		wreg, status,2, status,0, pclath, cstack
 20598 ;; Tracked objects:
 20599 ;;		On entry : 0/0
 20600 ;;		On exit  : 0/0
 20601 ;;		Unchanged: 0/0
 20602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20603 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20605 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20606 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20607 ;;Total ram usage:       12 bytes
 20608 ;; Hardware stack levels used:    1
 20609 ;; Hardware stack levels required when called:    1
 20610 ;; This function calls:
 20611 ;;		i1___aldiv
 20612 ;;		i1___lmul
 20613 ;; This function is called by:
 20614 ;;		_isr
 20615 ;; This function uses a non-reentrant model
 20616 ;;
 20617                           
 20618                           
 20619                           ;psect for function _modulation
 20620  2373                     _modulation:	
 20621                           
 20622                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 20623                           
 20624                           ;incstack = 0
 20625                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 20626  2373  3000               	movlw	0
 20627  2374  0020               	movlb	0	; select bank0
 20628  2375  00A3               	movwf	i1___aldiv@divisor+3
 20629  2376  3000               	movlw	0
 20630  2377  00A2               	movwf	i1___aldiv@divisor+2
 20631  2378  3003               	movlw	3
 20632  2379  00A1               	movwf	i1___aldiv@divisor+1
 20633  237A  30E8               	movlw	232
 20634  237B  00A0               	movwf	i1___aldiv@divisor
 20635  237C  300C               	movlw	12
 20636  237D  00B6               	movwf	??_modulation
 20637  237E  30F2               	movlw	242
 20638  237F  00B7               	movwf	??_modulation+1
 20639  2380  3001               	movlw	1
 20640  2381  00B8               	movwf	??_modulation+2
 20641  2382  3000               	movlw	0
 20642  2383  00B9               	movwf	??_modulation+3
 20643  2384  0835               	movf	modulation@y+3,w
 20644  2385  00F3               	movwf	i1___lmul@multiplier+3
 20645  2386  0834               	movf	modulation@y+2,w
 20646  2387  00F2               	movwf	i1___lmul@multiplier+2
 20647  2388  0833               	movf	modulation@y+1,w
 20648  2389  00F1               	movwf	i1___lmul@multiplier+1
 20649  238A  0832               	movf	modulation@y,w
 20650  238B  00F0               	movwf	i1___lmul@multiplier
 20651  238C  0831               	movf	modulation@x+3,w
 20652  238D  00F7               	movwf	i1___lmul@multiplicand+3
 20653  238E  0830               	movf	modulation@x+2,w
 20654  238F  00F6               	movwf	i1___lmul@multiplicand+2
 20655  2390  082F               	movf	modulation@x+1,w
 20656  2391  00F5               	movwf	i1___lmul@multiplicand+1
 20657  2392  082E               	movf	modulation@x,w
 20658  2393  00F4               	movwf	i1___lmul@multiplicand
 20659  2394  31A0  202C  31A3   	fcall	i1___lmul
 20660  2397  0870               	movf	?i1___lmul,w
 20661  2398  0020               	movlb	0	; select bank0
 20662  2399  07B6               	addwf	??_modulation,f
 20663  239A  0871               	movf	?i1___lmul+1,w
 20664  239B  3DB7               	addwfc	??_modulation+1,f
 20665  239C  0872               	movf	?i1___lmul+2,w
 20666  239D  3DB8               	addwfc	??_modulation+2,f
 20667  239E  0873               	movf	?i1___lmul+3,w
 20668  239F  3DB9               	addwfc	??_modulation+3,f
 20669  23A0  0839               	movf	??_modulation+3,w
 20670  23A1  00A7               	movwf	i1___aldiv@dividend+3
 20671  23A2  0838               	movf	??_modulation+2,w
 20672  23A3  00A6               	movwf	i1___aldiv@dividend+2
 20673  23A4  0837               	movf	??_modulation+1,w
 20674  23A5  00A5               	movwf	i1___aldiv@dividend+1
 20675  23A6  0836               	movf	??_modulation,w
 20676  23A7  00A4               	movwf	i1___aldiv@dividend
 20677  23A8  3198  20DA         	fcall	i1___aldiv
 20678  23AA  0020               	movlb	0	; select bank0
 20679  23AB  0823               	movf	?i1___aldiv+3,w
 20680  23AC  00B1               	movwf	?_modulation+3
 20681  23AD  0822               	movf	?i1___aldiv+2,w
 20682  23AE  00B0               	movwf	?_modulation+2
 20683  23AF  0821               	movf	?i1___aldiv+1,w
 20684  23B0  00AF               	movwf	?_modulation+1
 20685  23B1  0820               	movf	?i1___aldiv,w
 20686  23B2  00AE               	movwf	?_modulation
 20687  23B3  0008               	return
 20688  23B4                     __end_of_modulation:	
 20689                           
 20690                           	psect	text78
 20691  202C                     __ptext78:	
 20692 ;; *************** function i1___lmul *****************
 20693 ;; Defined at:
 20694 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 20695 ;; Parameters:    Size  Location     Type
 20696 ;;  multiplier      4    0[COMMON] unsigned long 
 20697 ;;  multiplicand    4    4[COMMON] unsigned long 
 20698 ;; Auto vars:     Size  Location     Type
 20699 ;;  __lmul          4    8[COMMON] unsigned long 
 20700 ;; Return value:  Size  Location     Type
 20701 ;;                  4    0[COMMON] unsigned long 
 20702 ;; Registers used:
 20703 ;;		wreg, status,2, status,0
 20704 ;; Tracked objects:
 20705 ;;		On entry : 0/0
 20706 ;;		On exit  : 0/0
 20707 ;;		Unchanged: 0/0
 20708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20709 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20710 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20712 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20713 ;;Total ram usage:       12 bytes
 20714 ;; Hardware stack levels used:    1
 20715 ;; This function calls:
 20716 ;;		Nothing
 20717 ;; This function is called by:
 20718 ;;		_modulation
 20719 ;; This function uses a non-reentrant model
 20720 ;;
 20721                           
 20722                           
 20723                           ;psect for function i1___lmul
 20724  202C                     i1___lmul:	
 20725                           
 20726                           ;incstack = 0
 20727                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 20728  202C  3000               	movlw	0
 20729  202D  00FB               	movwf	i1___lmul@product+3
 20730  202E  3000               	movlw	0
 20731  202F  00FA               	movwf	i1___lmul@product+2
 20732  2030  3000               	movlw	0
 20733  2031  00F9               	movwf	i1___lmul@product+1
 20734  2032  3000               	movlw	0
 20735  2033  00F8               	movwf	i1___lmul@product
 20736  2034                     i1l6058:	
 20737  2034  1C70               	btfss	i1___lmul@multiplier,0
 20738  2035  283E               	goto	i1l6062
 20739  2036  0874               	movf	i1___lmul@multiplicand,w
 20740  2037  07F8               	addwf	i1___lmul@product,f
 20741  2038  0875               	movf	i1___lmul@multiplicand+1,w
 20742  2039  3DF9               	addwfc	i1___lmul@product+1,f
 20743  203A  0876               	movf	i1___lmul@multiplicand+2,w
 20744  203B  3DFA               	addwfc	i1___lmul@product+2,f
 20745  203C  0877               	movf	i1___lmul@multiplicand+3,w
 20746  203D  3DFB               	addwfc	i1___lmul@product+3,f
 20747  203E                     i1l6062:	
 20748  203E  3001               	movlw	1
 20749  203F                     u538_25:	
 20750  203F  35F4               	lslf	i1___lmul@multiplicand,f
 20751  2040  0DF5               	rlf	i1___lmul@multiplicand+1,f
 20752  2041  0DF6               	rlf	i1___lmul@multiplicand+2,f
 20753  2042  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20754  2043  0B89               	decfsz	9,f
 20755  2044  283F               	goto	u538_25
 20756  2045  3001               	movlw	1
 20757  2046                     u539_25:	
 20758  2046  36F3               	lsrf	i1___lmul@multiplier+3,f
 20759  2047  0CF2               	rrf	i1___lmul@multiplier+2,f
 20760  2048  0CF1               	rrf	i1___lmul@multiplier+1,f
 20761  2049  0CF0               	rrf	i1___lmul@multiplier,f
 20762  204A  0B89               	decfsz	9,f
 20763  204B  2846               	goto	u539_25
 20764  204C  0873               	movf	i1___lmul@multiplier+3,w
 20765  204D  0472               	iorwf	i1___lmul@multiplier+2,w
 20766  204E  0471               	iorwf	i1___lmul@multiplier+1,w
 20767  204F  0470               	iorwf	i1___lmul@multiplier,w
 20768  2050  1D03               	skipz
 20769  2051  2834               	goto	i1l6058
 20770  2052  087B               	movf	i1___lmul@product+3,w
 20771  2053  00F3               	movwf	?i1___lmul+3
 20772  2054  087A               	movf	i1___lmul@product+2,w
 20773  2055  00F2               	movwf	?i1___lmul+2
 20774  2056  0879               	movf	i1___lmul@product+1,w
 20775  2057  00F1               	movwf	?i1___lmul+1
 20776  2058  0878               	movf	i1___lmul@product,w
 20777  2059  00F0               	movwf	?i1___lmul
 20778  205A  0008               	return
 20779  205B                     __end_ofi1___lmul:	
 20780                           
 20781                           	psect	text79
 20782  18DA                     __ptext79:	
 20783 ;; *************** function i1___aldiv *****************
 20784 ;; Defined at:
 20785 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 20786 ;; Parameters:    Size  Location     Type
 20787 ;;  divisor         4    0[BANK0 ] long 
 20788 ;;  dividend        4    4[BANK0 ] long 
 20789 ;; Auto vars:     Size  Location     Type
 20790 ;;  __aldiv         4   10[BANK0 ] long 
 20791 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 20792 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 20793 ;; Return value:  Size  Location     Type
 20794 ;;                  4    0[BANK0 ] long 
 20795 ;; Registers used:
 20796 ;;		wreg, status,2, status,0
 20797 ;; Tracked objects:
 20798 ;;		On entry : 0/0
 20799 ;;		On exit  : 0/0
 20800 ;;		Unchanged: 0/0
 20801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20802 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20803 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20804 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20805 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20806 ;;Total ram usage:       15 bytes
 20807 ;; Hardware stack levels used:    1
 20808 ;; This function calls:
 20809 ;;		Nothing
 20810 ;; This function is called by:
 20811 ;;		_modulation
 20812 ;; This function uses a non-reentrant model
 20813 ;;
 20814                           
 20815                           
 20816                           ;psect for function i1___aldiv
 20817  18DA                     i1___aldiv:	
 20818                           
 20819                           ;incstack = 0
 20820                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 20821  18DA  0020               	movlb	0	; select bank0
 20822  18DB  01A9               	clrf	i1___aldiv@sign
 20823  18DC  1FA3               	btfss	i1___aldiv@divisor+3,7
 20824  18DD  28EB               	goto	i1l2015
 20825  18DE  09A0               	comf	i1___aldiv@divisor,f
 20826  18DF  09A1               	comf	i1___aldiv@divisor+1,f
 20827  18E0  09A2               	comf	i1___aldiv@divisor+2,f
 20828  18E1  09A3               	comf	i1___aldiv@divisor+3,f
 20829  18E2  0AA0               	incf	i1___aldiv@divisor,f
 20830  18E3  1903               	skipnz
 20831  18E4  0AA1               	incf	i1___aldiv@divisor+1,f
 20832  18E5  1903               	skipnz
 20833  18E6  0AA2               	incf	i1___aldiv@divisor+2,f
 20834  18E7  1903               	skipnz
 20835  18E8  0AA3               	incf	i1___aldiv@divisor+3,f
 20836  18E9  01A9               	clrf	i1___aldiv@sign
 20837  18EA  0AA9               	incf	i1___aldiv@sign,f
 20838  18EB                     i1l2015:	
 20839  18EB  1FA7               	btfss	i1___aldiv@dividend+3,7
 20840  18EC  28FC               	goto	i1l6080
 20841  18ED  09A4               	comf	i1___aldiv@dividend,f
 20842  18EE  09A5               	comf	i1___aldiv@dividend+1,f
 20843  18EF  09A6               	comf	i1___aldiv@dividend+2,f
 20844  18F0  09A7               	comf	i1___aldiv@dividend+3,f
 20845  18F1  0AA4               	incf	i1___aldiv@dividend,f
 20846  18F2  1903               	skipnz
 20847  18F3  0AA5               	incf	i1___aldiv@dividend+1,f
 20848  18F4  1903               	skipnz
 20849  18F5  0AA6               	incf	i1___aldiv@dividend+2,f
 20850  18F6  1903               	skipnz
 20851  18F7  0AA7               	incf	i1___aldiv@dividend+3,f
 20852  18F8  3001               	movlw	1
 20853  18F9  00FC               	movwf	??i1___aldiv
 20854  18FA  087C               	movf	??i1___aldiv,w
 20855  18FB  06A9               	xorwf	i1___aldiv@sign,f
 20856  18FC                     i1l6080:	
 20857  18FC  3000               	movlw	0
 20858  18FD  00AD               	movwf	i1___aldiv@quotient+3
 20859  18FE  3000               	movlw	0
 20860  18FF  00AC               	movwf	i1___aldiv@quotient+2
 20861  1900  3000               	movlw	0
 20862  1901  00AB               	movwf	i1___aldiv@quotient+1
 20863  1902  3000               	movlw	0
 20864  1903  00AA               	movwf	i1___aldiv@quotient
 20865  1904  0823               	movf	i1___aldiv@divisor+3,w
 20866  1905  0422               	iorwf	i1___aldiv@divisor+2,w
 20867  1906  0421               	iorwf	i1___aldiv@divisor+1,w
 20868  1907  0420               	iorwf	i1___aldiv@divisor,w
 20869  1908  1903               	skipnz
 20870  1909  2945               	goto	i1l6102
 20871  190A  01A8               	clrf	i1___aldiv@counter
 20872  190B  0AA8               	incf	i1___aldiv@counter,f
 20873  190C                     i1l6088:	
 20874  190C  1BA3               	btfsc	i1___aldiv@divisor+3,7
 20875  190D  291A               	goto	i1l6090
 20876  190E  3001               	movlw	1
 20877  190F                     u544_25:	
 20878  190F  35A0               	lslf	i1___aldiv@divisor,f
 20879  1910  0DA1               	rlf	i1___aldiv@divisor+1,f
 20880  1911  0DA2               	rlf	i1___aldiv@divisor+2,f
 20881  1912  0DA3               	rlf	i1___aldiv@divisor+3,f
 20882  1913  0B89               	decfsz	9,f
 20883  1914  290F               	goto	u544_25
 20884  1915  3001               	movlw	1
 20885  1916  00FC               	movwf	??i1___aldiv
 20886  1917  087C               	movf	??i1___aldiv,w
 20887  1918  07A8               	addwf	i1___aldiv@counter,f
 20888  1919  290C               	goto	i1l6088
 20889  191A                     i1l6090:	
 20890  191A  3001               	movlw	1
 20891  191B                     u546_25:	
 20892  191B  35AA               	lslf	i1___aldiv@quotient,f
 20893  191C  0DAB               	rlf	i1___aldiv@quotient+1,f
 20894  191D  0DAC               	rlf	i1___aldiv@quotient+2,f
 20895  191E  0DAD               	rlf	i1___aldiv@quotient+3,f
 20896  191F  0B89               	decfsz	9,f
 20897  1920  291B               	goto	u546_25
 20898  1921  0823               	movf	i1___aldiv@divisor+3,w
 20899  1922  0227               	subwf	i1___aldiv@dividend+3,w
 20900  1923  1D03               	skipz
 20901  1924  292F               	goto	u547_25
 20902  1925  0822               	movf	i1___aldiv@divisor+2,w
 20903  1926  0226               	subwf	i1___aldiv@dividend+2,w
 20904  1927  1D03               	skipz
 20905  1928  292F               	goto	u547_25
 20906  1929  0821               	movf	i1___aldiv@divisor+1,w
 20907  192A  0225               	subwf	i1___aldiv@dividend+1,w
 20908  192B  1D03               	skipz
 20909  192C  292F               	goto	u547_25
 20910  192D  0820               	movf	i1___aldiv@divisor,w
 20911  192E  0224               	subwf	i1___aldiv@dividend,w
 20912  192F                     u547_25:	
 20913  192F  1C03               	skipc
 20914  1930  293A               	goto	i1l6098
 20915  1931  0820               	movf	i1___aldiv@divisor,w
 20916  1932  02A4               	subwf	i1___aldiv@dividend,f
 20917  1933  0821               	movf	i1___aldiv@divisor+1,w
 20918  1934  3BA5               	subwfb	i1___aldiv@dividend+1,f
 20919  1935  0822               	movf	i1___aldiv@divisor+2,w
 20920  1936  3BA6               	subwfb	i1___aldiv@dividend+2,f
 20921  1937  0823               	movf	i1___aldiv@divisor+3,w
 20922  1938  3BA7               	subwfb	i1___aldiv@dividend+3,f
 20923  1939  142A               	bsf	i1___aldiv@quotient,0
 20924  193A                     i1l6098:	
 20925  193A  3001               	movlw	1
 20926  193B                     u548_25:	
 20927  193B  36A3               	lsrf	i1___aldiv@divisor+3,f
 20928  193C  0CA2               	rrf	i1___aldiv@divisor+2,f
 20929  193D  0CA1               	rrf	i1___aldiv@divisor+1,f
 20930  193E  0CA0               	rrf	i1___aldiv@divisor,f
 20931  193F  0B89               	decfsz	9,f
 20932  1940  293B               	goto	u548_25
 20933  1941  3001               	movlw	1
 20934  1942  02A8               	subwf	i1___aldiv@counter,f
 20935  1943  1D03               	btfss	3,2
 20936  1944  291A               	goto	i1l6090
 20937  1945                     i1l6102:	
 20938  1945  0829               	movf	i1___aldiv@sign,w
 20939  1946  1903               	btfsc	3,2
 20940  1947  2953               	goto	i1l6106
 20941  1948  09AA               	comf	i1___aldiv@quotient,f
 20942  1949  09AB               	comf	i1___aldiv@quotient+1,f
 20943  194A  09AC               	comf	i1___aldiv@quotient+2,f
 20944  194B  09AD               	comf	i1___aldiv@quotient+3,f
 20945  194C  0AAA               	incf	i1___aldiv@quotient,f
 20946  194D  1903               	skipnz
 20947  194E  0AAB               	incf	i1___aldiv@quotient+1,f
 20948  194F  1903               	skipnz
 20949  1950  0AAC               	incf	i1___aldiv@quotient+2,f
 20950  1951  1903               	skipnz
 20951  1952  0AAD               	incf	i1___aldiv@quotient+3,f
 20952  1953                     i1l6106:	
 20953  1953  082D               	movf	i1___aldiv@quotient+3,w
 20954  1954  00A3               	movwf	?i1___aldiv+3
 20955  1955  082C               	movf	i1___aldiv@quotient+2,w
 20956  1956  00A2               	movwf	?i1___aldiv+2
 20957  1957  082B               	movf	i1___aldiv@quotient+1,w
 20958  1958  00A1               	movwf	?i1___aldiv+1
 20959  1959  082A               	movf	i1___aldiv@quotient,w
 20960  195A  00A0               	movwf	?i1___aldiv
 20961  195B  0008               	return
 20962  195C                     __end_ofi1___aldiv:	
 20963  007E                     btemp	set	126	;btemp
 20964  007E                     int$flags	set	126
 20965  007E                     wtemp	set	126
 20966  007E                     wtemp0	set	126
 20967  0080                     wtemp1	set	128
 20968  0082                     wtemp2	set	130
 20969  0084                     wtemp3	set	132
 20970  0086                     wtemp4	set	134
 20971  0088                     wtemp5	set	136
 20972  007F                     wtemp6	set	127
 20973  007E                     ttemp	set	126
 20974  007E                     ttemp0	set	126
 20975  0081                     ttemp1	set	129
 20976  0084                     ttemp2	set	132
 20977  0087                     ttemp3	set	135
 20978  007F                     ttemp4	set	127
 20979  007E                     ltemp	set	126
 20980  007E                     ltemp0	set	126
 20981  0082                     ltemp1	set	130
 20982  0086                     ltemp2	set	134
 20983  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         287
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      80
    BANK3            80      9      80
    BANK4            80     14      69
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modSin
    _modSin->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcSinArray->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  869117
                                              0 BANK4     14    14      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               11    11      0  160827
                                             48 BANK2     11    11      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modSaw
                          _modSawRev
                             _modSin
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29639
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   33974
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modSin
 ---------------------------------------------------------------------------------
 (3) _modSin                                              20    14      6   30723
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   29913
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   29697
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14064
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  161912
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  151570
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  151619
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  135651
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42179
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   75130
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   25792
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               2     2      0   15382
                                             14 BANK2      2     2      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         8     8      0   91314
                                             44 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   71601
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   16788
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18011
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8679
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8121
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modSin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      E      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     22F      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     22F      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Jan 14 20:49:44 2017

                        _update_mode 2153                         ___altoft@exp 00AE  
                        __CFG_CP$OFF 0000                        ___altoft@sign 00AF  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E7  
                       ___awdiv@sign 00A6                   _topTactile_pressed 01C6  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 09FB  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l365 05DF  
                                l800 21CF                                  l801 21D2  
                                l385 210E                                  l802 21D5  
                                l634 27BC                                  l803 21D8  
               __size_of_adc_convert 0013                                  l805 21DB  
                                l806 21FF                                  l587 2E67  
                                l793 268E                                  l794 26B2  
                                l963 2496                                  l798 21CC  
                                l990 2183                                  l967 24C0  
                                l975 24E0                                  l979 250E  
                                _GIE 005F                                  l998 2F8A  
                                _RB1 0069                                  _PR2 001B  
       solidring_tactiles@ring_delay 00B4                                  _map 1AEA  
                                _exp 1351                                  _log 1F2F  
                                _isr 0004                                  _tap 02A0  
                                _sin 082C                                  _pow 1115  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
                set_subdivision@tmpX 0135              __end_of_set_leds_bottom 2200  
                       __CFG_LVP$OFF 0000                       i1___aldiv@sign 0029  
                       ___ftdiv@cntr 00D8                         ___ftdiv@sign 00DD  
                               l1000 2F90                                 l1001 2F97  
                               l1002 2FAB                                 l1005 1807  
                               l1016 1851                                 l2015 196D  
                               l2121 26E6                                 l2212 1AD0  
                               l2128 26F9                                 l2152 10BE  
                               l2129 2701                                 l1433 0ACC  
                               l1419 0A12                                 l2324 1139  
                               l2342 0941                                 l1713 242B  
                               l1960 2ED7                                 l1939 0D9D  
                               ?_map 00DE                                 l8002 1D3F  
                               l8100 1CC0                                 l8030 1DAF  
                               l8022 1D96                                 l8008 1D55  
                               l8120 1D08                                 l9000 0B65  
                               l8042 2FDA                                 l8210 2017  
                               l8060 1EBA                                 l8300 20AF  
                               l8124 1D10                                 l8220 1F53  
                               l9004 0B8B                                 l9012 0BC8  
                               ?_exp 0148                                 ?_log 013E  
                               l8070 1F27                                 l9030 248B  
                               l9110 1DE9                                 l8080 2783  
                               l8056 1EB2                                 l9040 24B2  
                               l8208 2007                                 l9104 1DDA  
                               l8160 2F9F                                 l8306 20B5  
                               l8090 1C9E                                 l8242 135E  
                               l8226 1F66                                 l9052 24D5  
                               l8252 1383                                 l9124 19EA  
                               l8500 0C17                                 ?_isr 0070  
                               l7630 26BC                                 l7614 20C4  
                               l9062 24FC                                 l9150 1B91  
                               l9222 03A6                                 l9206 0387  
                               l7720 2261                                 l8168 2134  
                               l8264 13E2                                 l9152 1B95  
                               l9160 1BBB                                 l9144 1B83  
                               l8600 25FF                                 l8184 1689  
                               l8504 0D59                                 l9216 0397  
                               l7634 26C3                                 l7730 1047  
                               l7802 222D                                 l7618 20CE  
                               l8258 13A7                                 l8362 11A7  
                               l8354 114D                                 l9082 1C0B  
                               l9154 1B9B                                 l9146 1B89  
                               l8442 22E0                                 l8450 22EB  
                               l8434 22D0                                 l9306 0736  
                               l9250 04BF                                 l7660 2666  
                               l7644 26EB                                 l7636 26CD  
                               l7740 105D                                 l7820 0757  
                               l8292 209A                                 l8348 1141  
                               l9148 1B8D                                 l8604 2607  
                               l8516 22B0                                 l9260 0535  
                               l9236 0421                                 l7662 266E  
                               l8630 2402                                 l7646 26F3  
                               l7638 26D2                                 l7734 104E  
                               l7718 2251                                 l7910 1AE1  
                               l8286 148A                                 l8366 11C7  
                               l9166 1BFA                                 l9158 1BA2  
                               l8198 14DF                                 l8542 198E  
                               l8534 197E                                 l9246 047F  
                               l7664 2676                                 l7672 2695  
                               l8632 2404                                 l7760 1094  
                               l7752 1077                                 l7904 1AC7  
                               l8480 08FD                                 l9088 1C18  
                               l8720 0E20                                 l8560 19D5  
                               l8552 19BC                                 l8544 199C  
                               l9280 0621                                 l9264 0575  
                               l7666 267E                                 l8626 23FE  
                               l7770 10B0                                 l7762 1099  
                               l7850 07C4                                 l7842 07B0  
                               l7826 076D                                 l7906 1AD3  
                               l7922 2307                                 l8298 20A0  
                               l8730 0EE1                                 l8802 184D  
                               l9290 06B2                                 l7668 2686  
                               l8628 2400                                 l8636 2408  
                               l7780 10E2                                 l7772 10BA  
                               l7764 109D                                 l8468 0861  
                               l8572 25C5                                 l8732 0F27  
                               l8740 0FC7                                 l8812 1241  
                               l8556 19C7                                 l8804 1855  
                               l9276 05E1                                 ?_sin 013E  
                               l7790 10FD                                 l7758 108A  
                               l7854 07CC                                 l7838 07A8  
                               l8590 25E4                                 l8734 0F6D  
                               l8742 0FDE                                 l8726 0E55  
                               l8902 132E                                 l9294 06FC  
                               l9286 0672                                 l7688 21E2  
                               l7776 10D0                                 l7696 2ED1  
                               l8736 0FB3                                 l8728 0E9B  
                               l8744 0E37                                 l7960 254D  
                               l7952 2529                                 l8824 1262  
                               l8816 1254                                 l8690 27CF  
                               l8578 25D0                                 l8746 0FE4  
                               l8850 12AA                                 l8770 2180  
                               l8692 27D8                                 l9740 2417  
                               l8596 25F6                                 l8588 25D8  
                               l7980 21A7                                 l8908 133A  
                               l8844 1290                                 l8764 2176  
                               l8772 2187                                 ?_pow 0155  
                               l9750 21E8                                 l9742 241C  
                               l7798 2217                                 l7878 1A7C  
                               l8950 0A63                                 l8934 0A24  
                               l9744 2421                                 l7992 2F72  
                               l7896 1AAC                                 l9736 0FCD  
                               l8864 12C6                                 l8848 12A2  
                               l8928 0A07                                 l8792 1836  
                               l9746 2426                                 l7898 1ABA  
                               l9738 1BA7                                 l8970 0A95  
                               l8794 183B                                 l8786 182A  
                               l9748 269B                                 l8892 1314  
                               l8884 12FA                                 l8876 12DB  
                               l8956 0A6E                                 l8948 0A46  
                               l8972 0A9D                                 l8894 131A  
                               l8878 12DF                                 l8990 0B0F  
                               l8982 0AC4                                 l8974 0AAC  
                               l8998 0B1B                                 _PEIE 005E  
                               _RCIE 048D                                 u8025 10B1  
                               u8205 07D3                                 u8125 0779  
                               u8135 0789                                 u8305 1AC8  
                               u9025 1991                                 u8155 07B1  
                               u8165 07B7                                 u8245 1A83  
                               u9125 25DB                                 u9045 199D  
                               u9215 2FB8                                 u7615 20CF  
                               u9055 19B1                                 u9225 2FBE  
                               u7705 26EE                                 u8425 1D67  
                               u7625 20D6                                 u9145 25E5  
                               u9305 0E1E                                 u8345 2527  
                               u9065 19BD                                 u8435 1D77  
                               u8195 07CD                                 u8275 1AAD  
                               u9155 25EF                                 u9315 0E3E  
                               u8355 254B                                 u9260 27D6  
                               u8700 13C1                                 u9245 27B5  
                               u8445 1D97                                 u9165 25F7  
                               u9405 1819                                 u9255 27C8  
                               u8455 1DA6                                 u9335 2166  
                               u7745 2708                                 u7665 26C8  
                               u8465 1DB0                                 u7825 2256  
                               u8625 200C                                 u8580 2132  
                               u7685 26E1                                 u8565 1CC9  
                               u8805 1198                                 u9285 0DFA  
                               u9525 126C                                 u8910 08F9  
                               u7935 1078                                 u8735 1481  
                               u9295 0E0E                                 u8920 08FA  
                               u7785 2ED8                                 u8825 2EF5  
                               u8690 13C0                                 u7795 2EDD  
                               u8835 2F51                                 u9635 12EB  
                               u7965 108B                                 u8845 22C1  
                               u9485 123A                                 u9805 0A78  
                               u9495 124D                                 u9905 0B24  
                               u7995 109E                                 u9915 0B39  
                               u8885 2EBF                                 u9925 0B4D  
                               u9775 0A4F                                 u9945 0B6A  
                               u9885 0ADD                                 u9895 0AF4  
                 scaleA100kPot@input 0167                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                    _scaleA10kPot$2842 01EA  
                  _scaleA10kPot$2843 01ED                                 _iCnt 01BD  
                               _main 0363                         ___ftpack@arg 00A0  
                       ___ftpack@exp 00A3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 map@x 00DE  
                               btemp 007E                                 exp@x 0148  
                               log@x 013E                        __CFG_BOREN$ON 0000  
                               sin@f 013E                                 sin@y 0142  
                               ltemp 007E                                 pow@x 0155  
                               pow@y 0158                                 start 02E2  
                               ttemp 007E                                 wtemp 007E  
       __end_of_getSwitchBypassState 2E0F                      _expressModeCnst 01E2  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 2F06  
                    ?i1_set_leds_top 0070                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 00BC                         ___ftmul@sign 00BD  
                    __end_of_InitApp 208B                         ___fttol@exp1 012D  
                              ??_map 00ED                                ??_exp 014B  
                              ??_log 0141                         ___fttol@lval 0129  
                              ??_isr 003A                                ??_sin 0141  
                              ??_pow 015B                      _switchBypass_up 0263  
          __size_of_initSwitchBypass 000F                      __end_of___aldiv 19DE  
                              ?_main 0070                       i1___awdiv@sign 0076  
       getModulationDelayTime@subDiv 012E                      __end_of___awdiv 260C  
                    __end_of___ftadd 1115                                _CCPR1 0291  
                              _CCPR2 0298                                _CCPR3 0311  
                              _CCPR4 0318                                _CCPR5 031C  
                      __CFG_WDTE$OFF 0000                      __end_of___ftdiv 1DD1  
                    __end_of___ftneg 2E28                                u10005 24AB  
                              u10205 049D                                u10215 04BD  
                              u10065 24F5                                u10145 1BF5  
                              u10225 0553                                u10235 0573  
                    __end_of___ftmul 07F4                                u10245 05CC  
                              u10255 05DA                                u10265 05FF  
                              u10185 03FF                                u10275 061F  
                              u10195 041F                      ___awdiv@divisor 00A0  
                              u10285 0690                                u10295 06B0  
                    __end_of___ftsub 3000                      __end_of___fttol 1AEA  
                              i1l135 02DD                                i1l136 001B  
                              i1l137 00EF                                i1l155 0250  
                              i1l158 02D4                                i1l793 245E  
                              i1l794 2480                      ___awdiv@counter 00A5  
                              _RCREG 0199                                _SPBRG 019B  
                 __end_ofsin@coeff_a 2848                   __end_ofsin@coeff_b 2854  
                              _TXREG 019A                                _UQEnd 004C  
                _ConfigureOscillator 2E07          __size_of_setLongBypassState 0021  
                   _setPresetDisplay 218B                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                       ___lltoft@exp 00AD                __size_of_calcSinArray 0081  
                    _switchTap_state 01E6                    ??_setLongTapState 00A2  
                      ___awtoft@sign 00AD                                _floor 1E7C  
                              _ldexp 1C91                                _frexp 22F3  
                              _myBuf 03A0                                _errno 024D  
           _getModulationSubdivision 208B                        ___ftpack@sign 00A4  
                              _timer 0048                     __end_ofi1___lmul 205B  
                              sin@x2 0148                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                      __end_of_wait_ms 211D  
                              pow@yi 0163                      scaleA10kPot@pwm 01E7  
                 __size_of_USARTInit 0044                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003          __end_of_read_bottom_tactile 24CB  
                 __size_ofi1___aldiv 0082                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                 __size_ofi1___awdiv 0051                set_subdivision@scalar 0132  
     __size_of_setSwitchBypassRelays 0036        __end_of_setSwitchBypassRelays 2153  
                        exp@exponent 0152                 ?_ConfigureOscillator 0070  
                 _updateSwitchBypass 122B                          ldexp@newexp 0141  
            __end_of_updateSwitchTap 0BE2                      __initialization 02E4  
                        log@exponent 0142          updateModulationArray@iAngle 015A  
            _updateSwitchBypassState 1001                         __end_of_main 0740  
            __size_of_InitializeTaps 0026                  i1___lmul@multiplier 0070  
             __size_of_scaleA100kPot 0085                  ?_updateSwitchBypass 0070  
                     __CFG_LPBOR$OFF 0000               ring_tactiles@iLed_1532 00B5  
                    _set_subdivision 1B75                         _calcSinArray 1859  
        updateModulationArray@subDiv 0156                               ??_main 0255  
                      ___fttol@sign1 0128   __end_ofi1_getModulationSubdivision 082C  
         i1_getModulationSubdivision 0800                        ?_scaleA10kPot 0167  
            __size_of_FLASH_ReadWord 0020            setLongBypassState@f_state 00A0  
         __end_of_solidring_tactiles 2373                     ?_set_leds_bottom 00A0  
                             ?_floor 012E                               ?_ldexp 013E  
                             ?_frexp 00A0                     __end_of___altoft 2279  
                             _ADRESH 009C                               _ADRESL 009B  
                   ___awdiv@dividend 00A2                     __end_of___awtoft 2F89  
                   __end_of___ftpack 2718                 ??_updateSwitchBypass 00BC  
                   __end_of___lltoft 202C                               i1l2015 18EB  
                             i1l6102 1945                               i1l6106 1953  
                             i1l6062 203E                               i1l6080 18FC  
                             i1l6090 191A                               i1l6058 2034  
                             i1l6088 190C                               i1l6098 193A  
                             i1l6810 2592                               i1l6820 25AD  
                             i1l6750 244C                               i1l6910 01F6  
                             i1l6902 01D7                               i1l6824 25B5  
                             i1l6816 25A4                               i1l6808 2586  
                             i1l6752 2452                               i1l6912 0205  
                             i1l6754 2458                               i1l6746 2440  
                             i1l6906 01EB                               i1l6914 0207  
                             i1l6780 0827                               i1l6772 0814  
                             i1l6748 2446                               i1l6924 0252  
                             i1l6932 02A4                               i1l6852 010A  
                             i1l6774 0822                               i1l6766 080F  
                             i1l6758 2464                               i1l6950 02DC  
                             i1l6792 2573                               i1l6944 02D6  
                             i1l6880 0173                               i1l6882 0183  
                             i1l6858 0125                               i1l6948 02DB  
                             i1l6884 0185                               i1l6798 257E  
                             i1l6894 01B0                               i1l6896 01B9  
                             i1l6898 01C8                               i1l9752 2469  
                             _PMADRH 0192                               _PMADRL 0191  
                             _PMDATH 0194                               _PMDATL 0193  
                             _PMCON2 0196                               u544_25 190F  
                             u546_25 191B                               u538_25 203F  
                             u547_25 192F                               u539_25 2046  
                             u548_25 193B                               u660_25 2589  
                             u670_23 00C3                               u662_25 2593  
                             u663_25 259D                               u671_25 00D3  
                             u680_23 0149                               u664_25 25A5  
                             u672_25 00DC                               u674_25 0101  
                             u692_23 022F                               u676_25 011C  
                             u685_23 019E                               u693_25 0244  
                             u695_25 02B6                               u696_25 02CF  
                     _debounce_count 0245                          modSaw@angle 012E  
                     _debounce_mode1 0247                       _debounce_mode2 0249  
                        modSaw@shift 013F                               _URBuff 0320  
                          ??_InitApp 00A0                ??_ConfigureOscillator 00A0  
           __end_of_read_top_tactile 2519                          modSin@angle 0134  
            ?_getModulationDelayTime 0070                       __CFG_PWRTE$OFF 0000  
                        modSin@shift 013F                               ___ftge 2200  
                             ___lmul 20BB                            ??___aldiv 00A8  
                             ___wmul 2ECE                    _update_selectMode 1800  
                          ??___awdiv 00A4                            ??___ftadd 00C7  
                     __CFG_STVREN$ON 0000                            ??___ftdiv 00D4  
                          ??___ftneg 00C1                            ??___ftmul 00B4  
                          ??___ftsub 00F0                            ??___fttol 0124  
                        modTri@angle 012E                     __end_of_init_adc 2E32  
                             _modSaw 14AA                               _modSin 1654  
                             _modTri 0BE2                     __end_of_init_pwm 23F5  
                 ?_update_selectMode 0070                          modTri@shift 0137  
                   ___awdiv@quotient 00A7                __end_of_resetRingLEDs 2EB4  
                             _tmpVal 0253                    __end_of_USARTInit 2439  
                     ??_scaleA10kPot 00F0                    __end_ofi1___aldiv 195C  
                             floor@i 0132                               floor@x 012E  
              ___ftmul@f3_as_product 00B9                    __end_ofi1___awdiv 25BA  
            FLASH_ReadWord@flashAddr 00A0                               sin@sgn 014B  
                   __end_of_showSave 2E82                  ??_update_selectMode 00A7  
               _getSwitchBypassState 2E0B                            ??_wait_ms 00AE  
               _setSwitchBypassState 2EEA                        _scaleA100kPot 19DE  
       __end_of_setExpressionDisplay 2E9A               __size_of_scaleiA10kPot 00AB  
             setLongTapState@f_state 00A0                     modSin@inflection 0137  
                   __end_ofexp@coeff 281E                     __end_oflog@coeff 2839  
            __end_of__initialization 035F                           ___altoft@c 00A8  
     __end_of_getModulationDelayTime 265F                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 01BC  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 005A            ??_updateSwitchBypassState 00A2  
                         ___ftneg@f1 00BE                  _switchBypass_toggle 0251  
                         ___awtoft@c 00A8                __end_of_ring_tactiles 2569  
          __end_of_update_selectMode 1859              __end_of_set_subdivision 1C00  
                         ___ftmul@f1 00AE                           ___ftmul@f2 00B1  
                         ___ftsub@f1 013A                           ___ftsub@f2 0137  
                         ___fttol@f1 0120                     ?_updateSwitchTap 0070  
                       ?_update_mode 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 2E3E                         __pidataBANK2 1002  
                       __pidataBANK3 2F26                         __pidataBANK4 0002  
                         ___lltoft@c 00A8                        __end_of_floor 1F2F  
                      __end_of_ldexp 1D28                        __end_of_frexp 2333  
                   _initSwitchBypass 2E4C                            ?i1___lmul 0070  
              _updateModulationArray 0DDD                      _doubleTap_state 004E  
                     _OPTION_REGbits 0095                ?_getSwitchBypassState 00A0  
              ?_setSwitchBypassState 00B6                       ?_scaleA100kPot 0167  
                            ??_floor 0131                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                        ?_setPedalMode 0070  
                         __pbssBANK0 0040                           __pbssBANK2 016A  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pbssBANK5 02A0                           __pbssBANK6 0320  
                         __pbssBANK7 03A0                   __size_of_eval_poly 0072  
                   ??i1_set_leds_top 0074                      __CFG_VCAPEN$OFF 0000  
                 __size_of_modSawRev 001C                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 21C5                           _delay_time 0052  
                   _long_press_limit 0058         __size_of_setDoublePressState 003D  
                         _delayfound 024B                           __pmaintext 0363  
                     _InitializeTaps 2FAC                              ?___ftge 00A0  
                            ?___lmul 00A0                              ?___wmul 012E  
     updateModulationArray@thisAngle 0158                           __pintentry 0004  
                      _scaleiA10kPot 1DD1                           _blink_rate 005C  
                      ??_adc_convert 00A2                            ?___altoft 00A8  
                            ?_modSaw 012E                              ?_modSin 0134  
                            ?_modTri 012E                       ___lmul@product 00A8  
                    _setLongTapState 2EB4                            ?___awtoft 00A8  
                          ?___ftpack 00A0                  modSquare@inflection 014B  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                       _FLASH_ReadWord 2F06  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 1002  
                        modulation@x 002E                          modulation@y 0032  
                         _ldexp$2642 0145                      _debounce_bypass 0243  
                     ??_setPedalMode 00A7                   USARTWriteInt@F3536 0234  
                      _suspend_blink 016D         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 0142                              _UQFront 004D  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 01BA                              _InitApp 205B  
               __end_of_scaleA10kPot 1C91                         modSin@period 0142  
             __end_of_InitializeTaps 2FD2                         modSin@tmpVal 0145  
                      ?_set_leds_top 00A0                           _knob1_prev 01CD  
         __size_of_update_selectMode 0059                   i1___awdiv@quotient 0077  
                         _knob2_prev 01CF                           _knob3_prev 01D1  
                         _knob4_prev 01D3                           _knob5_prev 01D5  
                   ?_set_subdivision 012E                            ?_showSave 0070  
                            ___aldiv 195C                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 25BA  
                    __size_of___lmul 0030                              ___ftadd 101F  
                            ___ftdiv 1D28                              ___ftneg 2E1F  
                         _knob_1_pos 01A8                           _knob_2_pos 01AA  
                    __size_of___wmul 001C                              ___ftmul 0740  
                         _knob_3_pos 01AC                              ___ftsub 2FD2  
                            ___fttol 1A63                           _knob_4_pos 01AE  
                         _knob_5_pos 01B0                    _switchTap_pressed 016E  
                         ??___altoft 00AC                 _setExpressionDisplay 2E82  
             ?_updateModulationArray 0070               __end_of_FLASH_ReadWord 2F26  
                    __size_of_modSaw 01AA                      __size_of_modSin 01AC  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01FB                    __end_of_eval_poly 278A  
                 InitializeTaps@itap 00A1                           ??___lltoft 00AC  
                            __ptext1 1800                              __ptext2 2153  
                            __ptext3 09FB                              __ptext4 2EB4  
                            __ptext5 195C                              __ptext6 122B  
                            __ptext7 2F46                              __ptext8 22B6  
                            __ptext9 2E6E           __end_of_setLongBypassState 2F67  
        ?i1_getModulationSubdivision 0070               ??_getSwitchBypassState 00A2  
                  __end_of_modSawRev 101F                            _T2CONbits 001C  
                       __size_of_map 008B                         __size_of_exp 0159  
                       __size_of_log 00D1                         __size_of_isr 02DE  
             ??_setSwitchBypassState 00B8                         __size_of_sin 01CF  
                       __size_of_pow 0116                  __end_of_adc_convert 2E6E  
                       modTri@period 013A                    __end_of_modSquare 22B6  
                    ??_scaleA100kPot 00F0                     ___aldiv@dividend 00A4  
                       modTri@tmpVal 013D                              _wait_ms 20EB  
                            clrloop0 07F5                 end_of_initialization 035F  
                            exp@sign 0154                           _modulation 2373  
                            init_ram 2E32                           ??_init_adc 00A0  
                            initloop 2E33                           ??_init_pwm 00A0  
       updateSwitchBypassState@state 00A0                   _solidring_tactiles 2333  
                      _longTap_timer 01B4                        _longTap_state 005D  
                      _longTap_start 016B                       ??_set_leds_top 00A4  
                  ?_read_top_tactile 0070                      ?_InitializeTaps 0070  
                            pow@sign 0162                    scaleA10kPot@input 0167  
            __end_of_setLongTapState 2ECE                _setSwitchBypassRelays 211D  
             i1set_leds_top@ledState 0072                   ??_read_top_tactile 00B2  
                          _RCSTAbits 019D                           ??_showSave 00B7  
                   _mod_time_changed 01E4                     _longBypass_timer 01B2  
                   ___aldiv@quotient 00AB                     _longBypass_state 004F  
                   _longBypass_start 016A         __size_of_read_bottom_tactile 004A  
                ?_solidring_tactiles 0070                         __pstringtext 2800  
          FLASH_ReadWord@GIEBitValue 00A2                ?_setExpressionDisplay 0070  
               __size_of_update_mode 0038                      ?_FLASH_ReadWord 00A0  
                  _expressionChannel 01E3                            _PORTAbits 000C  
                          _PORTCbits 000E                            _PORTDbits 000F  
                          _PORTEbits 0010                            _USARTInit 23F5  
                          _TRISBbits 008D                            _TRISCbits 008E  
                          _TRISDbits 008F                            _TRISEbits 0090  
                          _TRISFbits 030C                            _TRISGbits 030D  
                          i1___aldiv 18DA                            i1___awdiv 2569  
               ??_solidring_tactiles 00B2          __end_of_ConfigureOscillator 2E0B  
                         map@out_max 00EA                           map@out_min 00E7  
        __size_of_updateSwitchBypass 0126             __end_of_initSwitchBypass 2E5B  
                        _CCP1CONbits 0293                          ___ftdiv@exp 00DC  
           __size_of_set_leds_bottom 003B                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                 _switchBypass_pressed 01B6  
                        _CCP3CONbits 0313                          _CCP4CONbits 031A  
                        _CCP5CONbits 031E                          _CCP6CONbits 0613  
                    ??_scaleiA10kPot 00F0                          _CCP7CONbits 0616  
                        ___ftmul@exp 00B8                   adc_convert@channel 00A3  
                        _CCP8CONbits 0619                          _CCP9CONbits 061C  
               set_leds_top@ledState 00A2                       __end_of___ftge 223C  
               __end_of_setPedalMode 2FAC                       __end_of___lmul 20EB  
                     __end_of___wmul 2EEA                         _double_timer 01A0  
                        _adc_convert 2E5B     __end_of_getModulationSubdivision 20BB  
                     _switchTap_down 01C5                       __end_of_modSaw 1654  
                     __end_of_modSin 1800                       __end_of_modTri 0DDD  
                     modSawRev@angle 0145                           floor@expon 0135  
              i1___lmul@multiplicand 0074                    __size_ofi1___lmul 002F  
                start_initialization 02E4                           ?_USARTInit 00A0  
                         eval_poly@d 0137                           eval_poly@n 0139  
                         eval_poly@x 0134                _bottomTactile_pressed 01BB  
                _setDoublePressState 22B6                           ldexp@value 013E  
                         ?i1___aldiv 0020                          __end_of_map 1B75  
                        __end_of_exp 14AA                          __end_of_log 2000  
                        __end_of_isr 02E2                           ?i1___awdiv 0070  
                        __end_of_sin 09FB                          __end_of_pow 122B  
              __size_of_scaleA10kPot 0091                   _adjusted_pot_value 0241  
                        ?_modulation 002E                   scaleiA10kPot@input 0167  
                         frexp@value 00A0               __size_of_resetRingLEDs 001A  
             ?_setSwitchBypassRelays 00B2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                             ??___ftge 00A6  
                           ??___lmul 00A8               ??_setExpressionDisplay 00A4  
                           ??___wmul 00F0                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 0052                          __pdataBANK2 016F  
                        __pdataBANK3 01C7                          __pdataBANK4 0263  
                           ??_modSaw 00F0                             ??_modSin 013A  
                 i1___aldiv@dividend 0024                             ??_modTri 00F0  
                      _tap_iteration 01DD             __size_of_updateSwitchTap 01E7  
                  __size_of___altoft 003D                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065                          __pbssBIGRAM 238A  
                       _scaleA10kPot 1C00                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
               __end_of_set_leds_top 26B3                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 005F  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01E7  
                      __pcstackBANK4 0255               __size_of_ring_tactiles 0050  
                     _expSwitchState 01E1                     i1___lmul@product 0078  
                   scaleiA10kPot@pwm 01E7             ?_updateSwitchBypassState 00A0  
                         sin@coeff_a 2839                           sin@coeff_b 2848  
                 i1___aldiv@quotient 002A                             ?_InitApp 0070  
              ??_setDoublePressState 00BA                    __size_of_init_adc 000A  
                  __size_of_init_pwm 0041                            _main$2833 025A  
                          _main$2834 025D                            _main$2835 0260  
            ??_updateModulationArray 0150                             ?___aldiv 00A0  
                  ??_set_leds_bottom 00A2                   _currentBypassState 01E0  
                           ?___awdiv 00A0                             ?___ftadd 00C1  
                           ?___ftdiv 00CE                             ?___ftneg 00BE  
                           ?___ftmul 00AE                             ?___ftsub 0137  
                           ?___fttol 0120                    __size_of_showSave 0014  
                 _modulation_changed 01C2                    i1___awdiv@divisor 0070  
                 _scaleA100kPot$2838 01EA                   _scaleA100kPot$2839 01ED  
                      ?_calcSinArray 0070                    i1___awdiv@counter 0075  
                        _blink_delay 01CB                  __size_of_modulation 0041  
                      _resetRingLEDs 2E9A                          _blink_state 01DF  
                          _eval_poly 2718                          ??_USARTInit 00A2  
                           _CCPTMRS0 029D                             _CCPTMRS1 029E  
                           _CCPTMRS2 029F                          ??i1___aldiv 007C  
                           ?_wait_ms 00AC                          ??i1___awdiv 0074  
                          _modSawRev 1003             ??_getModulationDelayTime 00F0  
                _read_bottom_tactile 2481                       __size_of_floor 00B3  
                     __size_of_ldexp 0097                       __size_of_frexp 0040  
                          _modSquare 2279                       _presetModeCnst 01E5  
                 _setLongBypassState 2F46                  __end_of_init_timer0 2E16  
                __end_of_init_timer2 2E1F                            _mod_value 024F  
                          _mod_timer 01A4                     ??_InitializeTaps 00A0  
                    ___aldiv@divisor 00A0    __size_of_getModulationSubdivision 0030  
                    ___aldiv@counter 00A9            ?_getModulationSubdivision 00A0  
                     _presetSaveMode 0051                       ___wmul@product 0132  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 01D9                            clear_ram0 07F4  
                          _tap_timer 0044                  ?_setLongBypassState 00A0  
                          _tap_total 023D                __size_of_setPedalMode 0023  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
                      _ring_tactiles 2519                      _longBypass_down 01BF  
                   ??_FLASH_ReadWord 00A2                      _longBypass_save 01C0  
               ?_read_bottom_tactile 0070              __size_ofi1_set_leds_top 0048  
                     ??_calcSinArray 014C            initSwitchBypass@initState 00BA  
                          map@in_max 00E4                            map@in_min 00E1  
                     ?_resetRingLEDs 0070                            _sub_timer 0040  
                         _ADCON0bits 009D                             i1___lmul 202C  
                         _ADCON1bits 009E             __size_of_set_subdivision 008B  
                  ___wmul@multiplier 012E                     set_subdivision@x 012E  
                   set_subdivision@y 0130            __size_of_read_top_tactile 004E  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0004        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0145                __end_of_scaleA100kPot 1A63  
                  ??_updateSwitchTap 00BC                    ___lmul@multiplier 00A0  
                         ?_modSquare 0148                      modSquare@tmpVal 014E  
                       _setPedalMode 2F89                    _ReadSavedSettings 278A  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                     wait_ms@timeSec 00AC                   ?_ReadSavedSettings 0070  
                        _modSaw$2850 013A                          _modSaw$2848 0134  
                        _modSaw$2849 0137                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                        _modSin$2846 013C                   ??_initSwitchBypass 00BA  
                   __size_of_InitApp 0030                       ?_ring_tactiles 0070  
                          modSaw@mod 013D                          _mode1_state 01C1  
                      ??_update_mode 00A7                          _mode2_state 0050  
                          isr@subDiv 007D                ??_read_bottom_tactile 00B2  
                        _modTri$2847 0134                  updateSwitchTap@iCnt 00C4  
                ??_ReadSavedSettings 00A4                           _APFCONbits 011D  
                   __size_of___aldiv 0082                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                       ?_adc_convert 00A0                     __size_of___ftneg 0009  
                           ___altoft 223C                     __size_of___ftmul 00B4  
                   __size_of___ftsub 002E                     __size_of___fttol 0087  
                           ___awtoft 2F67                __size_of_set_leds_top 0054  
                           ___ftpack 26B3                    _baseline_mod_time 01C7  
                           _map$2836 00ED                             ___lltoft 2002  
             _preset_programmning_on 01C3                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2605 014F  
                           _exp$2854 014C                          _init_timer0 2E0F  
                        _init_timer2 2E16           __end_of_updateSwitchBypass 1351  
                           __ptext10 2333                             __ptext11 2519  
                           __ptext20 1003                             __ptext12 2F89  
                           __ptext21 14AA                             __ptext13 218B  
                           __ptext30 1C91                             __ptext22 25BA  
                           __ptext14 2E82                             __ptext31 2002  
                           __ptext23 1B75                             __ptext15 2E9A  
                           __ptext40 1001                             __ptext32 24CB  
                           __ptext24 1DD1                             __ptext16 0DDD  
                           __ptext41 2E0B                             __ptext33 2481  
                           __ptext25 1C00                             __ptext17 0BE2  
                           __ptext50 223C                             __ptext42 260C  
                           __ptext34 1AEA                             __ptext26 19DE  
                           __ptext18 2279                             __ptext51 2718  
                           __ptext43 208B                             __ptext35 2E4C  
                           __ptext27 1115                             __ptext19 1654  
                           __ptext60 2E5B                             __ptext52 2ECE  
                           __ptext44 1859                             __ptext36 2EEA  
                           __ptext28 1F2F                             __ptext61 23F5  
                           __ptext53 0740                             __ptext45 082C  
                           __ptext37 211D                             __ptext29 1351  
                           __ptext70 2E0F                             __ptext62 278A  
                           __ptext54 2FD2                             __ptext46 1E7C  
                           __ptext38 20EB                             __ptext71 2E28  
                           __ptext63 265F                             __ptext55 101F  
                           __ptext47 22F3                             __ptext39 20BB  
                           __ptext72 2E07                             __ptext64 21C5  
                           __ptext56 2E1F                             __ptext48 1A63  
                           __ptext65 2F06                             __ptext57 1D28  
                           __ptext49 2200                             __ptext74 2439  
                           __ptext66 2FAC                             __ptext58 2F67  
                           __ptext75 0800                             __ptext67 205B  
                           __ptext59 26B3                             __ptext76 2569  
                           __ptext68 23B4                             __ptext77 2373  
                           __ptext69 2E16                             __ptext78 202C  
                           __ptext79 18DA                             _sin$2853 0145  
          __end_of_ReadSavedSettings 2800                     __size_of_wait_ms 0032  
        __size_of_solidring_tactiles 0040      __size_of_getModulationDelayTime 0053  
                           _ledState 0239                             _pow$2851 015C  
                           _pow$2852 015F                        _presetChannel 016F  
                       ??_modulation 0036                          _mod_counter 01D7  
                           _modArray 238A              ??_setSwitchBypassRelays 00B4  
                           _init_adc 2E28                        __size_of_main 03DD  
                           _init_pwm 23B4     updateModulationArray@angleFactor 0154  
                           _sinArray 2482         __size_of_ConfigureOscillator 0004  
                       _set_leds_top 265F                             _showSave 2E6E  
                           _num_taps 005E                __end_of_scaleiA10kPot 1E7C  
                           int$flags 007E                      ??_resetRingLEDs 00A4  
                    i1set_leds_top@x 0070                       modSquare@angle 0148  
                __end_of_update_mode 218B                             exp@coeff 2800  
                           _symmetry 01DB                  modSawRev@inflection 0148  
                           log@coeff 281E                   __end_of_modulation 23B4  
                 calcSinArray@iAngle 0153                           _INTCONbits 000B  
                        ??_eval_poly 00F0            __size_of_setPresetDisplay 003A  
                        _tap_history 0220                          ??_modSawRev 014B  
                  ??_set_subdivision 00F0                          ??_modSquare 00F0  
                 calcSinArray@tmpVal 0150                             intlevel1 0000  
               __end_of_calcSinArray 18DA                      _set_leds_bottom 21C5  
                         _PMCON1bits 0195                      ??_ring_tactiles 00B2  
                  __CFG_CLKOUTEN$OFF 0000                      _reset_sub_delay 01C4  
                         _OSCCONbits 0099                         _preset_blink 016C  
             _getModulationDelayTime 260C                       i1_set_leds_top 2439  
     __size_of_updateModulationArray 0223     __size_of_updateSwitchBypassState 0001  
      __end_of_updateModulationArray 1000                        _isInitialized 01BE  
      __size_of_setExpressionDisplay 0018                   _scaleiA10kPot$2844 01EA  
                 _scaleiA10kPot$2845 01ED             __size_of_setLongTapState 001A  
                        _tmpModDelay 01B8                     _read_top_tactile 24CB  
       ??i1_getModulationSubdivision 0072                         ___aldiv@sign 00AA  
         __size_of_ReadSavedSettings 0076          __end_of_setDoublePressState 22F3  
                       _CCP10CONbits 061F                    _bottom_push_state 0056  
         setPresetDisplay@ledChannel 00A6               __end_ofi1_set_leds_top 2481  
