

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Jan 15 18:30:04 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2
   110                           	dabs	1,0x920,80
   111                           	dabs	1,0x8A0,80
   112                           	dabs	1,0x820,80
   113                           	dabs	1,0x7A0,80
   114                           	dabs	1,0x742,46
   115                           	dabs	1,0x720,34
   116                           	dabs	1,0x6A0,80
   117                           	dabs	1,0x620,80
   118                           	dabs	1,0x5BA,54
   119                           	dabs	1,0x2482,0,_cosArray
   120                           	dabs	1,0x238A,0,_modArray
   121                           	dabs	1,0x7E,2
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  008F                     	;# 
   156  0090                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  0110                     	;# 
   176  0116                     	;# 
   177  0117                     	;# 
   178  011D                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  018F                     	;# 
   182  0190                     	;# 
   183  0191                     	;# 
   184  0191                     	;# 
   185  0192                     	;# 
   186  0193                     	;# 
   187  0193                     	;# 
   188  0194                     	;# 
   189  0195                     	;# 
   190  0196                     	;# 
   191  0197                     	;# 
   192  0199                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  019A                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019D                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019E                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  020D                     	;# 
   216  020F                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0213                     	;# 
   224  0214                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0219                     	;# 
   234  021A                     	;# 
   235  021B                     	;# 
   236  021C                     	;# 
   237  021D                     	;# 
   238  021E                     	;# 
   239  021F                     	;# 
   240  028C                     	;# 
   241  028D                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  029D                     	;# 
   251  029E                     	;# 
   252  029F                     	;# 
   253  030C                     	;# 
   254  030D                     	;# 
   255  0311                     	;# 
   256  0311                     	;# 
   257  0312                     	;# 
   258  0313                     	;# 
   259  0318                     	;# 
   260  0318                     	;# 
   261  0319                     	;# 
   262  031A                     	;# 
   263  031C                     	;# 
   264  031C                     	;# 
   265  031D                     	;# 
   266  031E                     	;# 
   267  038C                     	;# 
   268  038D                     	;# 
   269  0394                     	;# 
   270  0395                     	;# 
   271  0396                     	;# 
   272  040C                     	;# 
   273  040D                     	;# 
   274  0411                     	;# 
   275  0411                     	;# 
   276  0412                     	;# 
   277  0413                     	;# 
   278  0414                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  0418                     	;# 
   283  0418                     	;# 
   284  0419                     	;# 
   285  041A                     	;# 
   286  041B                     	;# 
   287  041C                     	;# 
   288  041D                     	;# 
   289  041E                     	;# 
   290  048D                     	;# 
   291  0491                     	;# 
   292  0491                     	;# 
   293  0492                     	;# 
   294  0492                     	;# 
   295  0493                     	;# 
   296  0493                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0494                     	;# 
   300  0495                     	;# 
   301  0495                     	;# 
   302  0496                     	;# 
   303  0496                     	;# 
   304  0497                     	;# 
   305  0497                     	;# 
   306  0595                     	;# 
   307  0596                     	;# 
   308  0597                     	;# 
   309  059C                     	;# 
   310  059D                     	;# 
   311  059E                     	;# 
   312  0611                     	;# 
   313  0611                     	;# 
   314  0612                     	;# 
   315  0613                     	;# 
   316  0614                     	;# 
   317  0614                     	;# 
   318  0615                     	;# 
   319  0616                     	;# 
   320  0617                     	;# 
   321  0617                     	;# 
   322  0618                     	;# 
   323  0619                     	;# 
   324  061A                     	;# 
   325  061A                     	;# 
   326  061B                     	;# 
   327  061C                     	;# 
   328  061D                     	;# 
   329  061D                     	;# 
   330  061E                     	;# 
   331  061F                     	;# 
   332  0FE4                     	;# 
   333  0FE5                     	;# 
   334  0FE6                     	;# 
   335  0FE7                     	;# 
   336  0FE8                     	;# 
   337  0FE9                     	;# 
   338  0FEA                     	;# 
   339  0FEB                     	;# 
   340  0FED                     	;# 
   341  0FEE                     	;# 
   342  0FEF                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0008                     	;# 
   352  0009                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008D                     	;# 
   375  008E                     	;# 
   376  008F                     	;# 
   377  0090                     	;# 
   378  0091                     	;# 
   379  0092                     	;# 
   380  0093                     	;# 
   381  0094                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0099                     	;# 
   386  009A                     	;# 
   387  009B                     	;# 
   388  009B                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  0110                     	;# 
   397  0116                     	;# 
   398  0117                     	;# 
   399  011D                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402  018F                     	;# 
   403  0190                     	;# 
   404  0191                     	;# 
   405  0191                     	;# 
   406  0192                     	;# 
   407  0193                     	;# 
   408  0193                     	;# 
   409  0194                     	;# 
   410  0195                     	;# 
   411  0196                     	;# 
   412  0197                     	;# 
   413  0199                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  019A                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019C                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  020D                     	;# 
   437  020F                     	;# 
   438  0210                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0216                     	;# 
   451  0216                     	;# 
   452  0217                     	;# 
   453  0217                     	;# 
   454  0219                     	;# 
   455  021A                     	;# 
   456  021B                     	;# 
   457  021C                     	;# 
   458  021D                     	;# 
   459  021E                     	;# 
   460  021F                     	;# 
   461  028C                     	;# 
   462  028D                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0298                     	;# 
   468  0298                     	;# 
   469  0299                     	;# 
   470  029A                     	;# 
   471  029D                     	;# 
   472  029E                     	;# 
   473  029F                     	;# 
   474  030C                     	;# 
   475  030D                     	;# 
   476  0311                     	;# 
   477  0311                     	;# 
   478  0312                     	;# 
   479  0313                     	;# 
   480  0318                     	;# 
   481  0318                     	;# 
   482  0319                     	;# 
   483  031A                     	;# 
   484  031C                     	;# 
   485  031C                     	;# 
   486  031D                     	;# 
   487  031E                     	;# 
   488  038C                     	;# 
   489  038D                     	;# 
   490  0394                     	;# 
   491  0395                     	;# 
   492  0396                     	;# 
   493  040C                     	;# 
   494  040D                     	;# 
   495  0411                     	;# 
   496  0411                     	;# 
   497  0412                     	;# 
   498  0413                     	;# 
   499  0414                     	;# 
   500  0415                     	;# 
   501  0416                     	;# 
   502  0417                     	;# 
   503  0418                     	;# 
   504  0418                     	;# 
   505  0419                     	;# 
   506  041A                     	;# 
   507  041B                     	;# 
   508  041C                     	;# 
   509  041D                     	;# 
   510  041E                     	;# 
   511  048D                     	;# 
   512  0491                     	;# 
   513  0491                     	;# 
   514  0492                     	;# 
   515  0492                     	;# 
   516  0493                     	;# 
   517  0493                     	;# 
   518  0493                     	;# 
   519  0494                     	;# 
   520  0494                     	;# 
   521  0495                     	;# 
   522  0495                     	;# 
   523  0496                     	;# 
   524  0496                     	;# 
   525  0497                     	;# 
   526  0497                     	;# 
   527  0595                     	;# 
   528  0596                     	;# 
   529  0597                     	;# 
   530  059C                     	;# 
   531  059D                     	;# 
   532  059E                     	;# 
   533  0611                     	;# 
   534  0611                     	;# 
   535  0612                     	;# 
   536  0613                     	;# 
   537  0614                     	;# 
   538  0614                     	;# 
   539  0615                     	;# 
   540  0616                     	;# 
   541  0617                     	;# 
   542  0617                     	;# 
   543  0618                     	;# 
   544  0619                     	;# 
   545  061A                     	;# 
   546  061A                     	;# 
   547  061B                     	;# 
   548  061C                     	;# 
   549  061D                     	;# 
   550  061D                     	;# 
   551  061E                     	;# 
   552  061F                     	;# 
   553  0FE4                     	;# 
   554  0FE5                     	;# 
   555  0FE6                     	;# 
   556  0FE7                     	;# 
   557  0FE8                     	;# 
   558  0FE9                     	;# 
   559  0FEA                     	;# 
   560  0FEB                     	;# 
   561  0FED                     	;# 
   562  0FEE                     	;# 
   563  0FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  008C                     	;# 
   595  008D                     	;# 
   596  008E                     	;# 
   597  008F                     	;# 
   598  0090                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0099                     	;# 
   607  009A                     	;# 
   608  009B                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  010E                     	;# 
   616  010F                     	;# 
   617  0110                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  011D                     	;# 
   621  018C                     	;# 
   622  018D                     	;# 
   623  018F                     	;# 
   624  0190                     	;# 
   625  0191                     	;# 
   626  0191                     	;# 
   627  0192                     	;# 
   628  0193                     	;# 
   629  0193                     	;# 
   630  0194                     	;# 
   631  0195                     	;# 
   632  0196                     	;# 
   633  0197                     	;# 
   634  0199                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  019A                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019F                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  020D                     	;# 
   658  020F                     	;# 
   659  0210                     	;# 
   660  0211                     	;# 
   661  0211                     	;# 
   662  0212                     	;# 
   663  0212                     	;# 
   664  0213                     	;# 
   665  0213                     	;# 
   666  0214                     	;# 
   667  0214                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0216                     	;# 
   672  0216                     	;# 
   673  0217                     	;# 
   674  0217                     	;# 
   675  0219                     	;# 
   676  021A                     	;# 
   677  021B                     	;# 
   678  021C                     	;# 
   679  021D                     	;# 
   680  021E                     	;# 
   681  021F                     	;# 
   682  028C                     	;# 
   683  028D                     	;# 
   684  0291                     	;# 
   685  0291                     	;# 
   686  0292                     	;# 
   687  0293                     	;# 
   688  0298                     	;# 
   689  0298                     	;# 
   690  0299                     	;# 
   691  029A                     	;# 
   692  029D                     	;# 
   693  029E                     	;# 
   694  029F                     	;# 
   695  030C                     	;# 
   696  030D                     	;# 
   697  0311                     	;# 
   698  0311                     	;# 
   699  0312                     	;# 
   700  0313                     	;# 
   701  0318                     	;# 
   702  0318                     	;# 
   703  0319                     	;# 
   704  031A                     	;# 
   705  031C                     	;# 
   706  031C                     	;# 
   707  031D                     	;# 
   708  031E                     	;# 
   709  038C                     	;# 
   710  038D                     	;# 
   711  0394                     	;# 
   712  0395                     	;# 
   713  0396                     	;# 
   714  040C                     	;# 
   715  040D                     	;# 
   716  0411                     	;# 
   717  0411                     	;# 
   718  0412                     	;# 
   719  0413                     	;# 
   720  0414                     	;# 
   721  0415                     	;# 
   722  0416                     	;# 
   723  0417                     	;# 
   724  0418                     	;# 
   725  0418                     	;# 
   726  0419                     	;# 
   727  041A                     	;# 
   728  041B                     	;# 
   729  041C                     	;# 
   730  041D                     	;# 
   731  041E                     	;# 
   732  048D                     	;# 
   733  0491                     	;# 
   734  0491                     	;# 
   735  0492                     	;# 
   736  0492                     	;# 
   737  0493                     	;# 
   738  0493                     	;# 
   739  0493                     	;# 
   740  0494                     	;# 
   741  0494                     	;# 
   742  0495                     	;# 
   743  0495                     	;# 
   744  0496                     	;# 
   745  0496                     	;# 
   746  0497                     	;# 
   747  0497                     	;# 
   748  0595                     	;# 
   749  0596                     	;# 
   750  0597                     	;# 
   751  059C                     	;# 
   752  059D                     	;# 
   753  059E                     	;# 
   754  0611                     	;# 
   755  0611                     	;# 
   756  0612                     	;# 
   757  0613                     	;# 
   758  0614                     	;# 
   759  0614                     	;# 
   760  0615                     	;# 
   761  0616                     	;# 
   762  0617                     	;# 
   763  0617                     	;# 
   764  0618                     	;# 
   765  0619                     	;# 
   766  061A                     	;# 
   767  061A                     	;# 
   768  061B                     	;# 
   769  061C                     	;# 
   770  061D                     	;# 
   771  061D                     	;# 
   772  061E                     	;# 
   773  061F                     	;# 
   774  0FE4                     	;# 
   775  0FE5                     	;# 
   776  0FE6                     	;# 
   777  0FE7                     	;# 
   778  0FE8                     	;# 
   779  0FE9                     	;# 
   780  0FEA                     	;# 
   781  0FEB                     	;# 
   782  0FED                     	;# 
   783  0FEE                     	;# 
   784  0FEF                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  000F                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0014                     	;# 
   806  0015                     	;# 
   807  0016                     	;# 
   808  0016                     	;# 
   809  0017                     	;# 
   810  0018                     	;# 
   811  0019                     	;# 
   812  001A                     	;# 
   813  001B                     	;# 
   814  001C                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  008F                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0095                     	;# 
   825  0096                     	;# 
   826  0097                     	;# 
   827  0099                     	;# 
   828  009A                     	;# 
   829  009B                     	;# 
   830  009B                     	;# 
   831  009C                     	;# 
   832  009D                     	;# 
   833  009E                     	;# 
   834  010C                     	;# 
   835  010D                     	;# 
   836  010E                     	;# 
   837  010F                     	;# 
   838  0110                     	;# 
   839  0116                     	;# 
   840  0117                     	;# 
   841  011D                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  018F                     	;# 
   845  0190                     	;# 
   846  0191                     	;# 
   847  0191                     	;# 
   848  0192                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0194                     	;# 
   852  0195                     	;# 
   853  0196                     	;# 
   854  0197                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020D                     	;# 
   879  020F                     	;# 
   880  0210                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0219                     	;# 
   897  021A                     	;# 
   898  021B                     	;# 
   899  021C                     	;# 
   900  021D                     	;# 
   901  021E                     	;# 
   902  021F                     	;# 
   903  028C                     	;# 
   904  028D                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0298                     	;# 
   910  0298                     	;# 
   911  0299                     	;# 
   912  029A                     	;# 
   913  029D                     	;# 
   914  029E                     	;# 
   915  029F                     	;# 
   916  030C                     	;# 
   917  030D                     	;# 
   918  0311                     	;# 
   919  0311                     	;# 
   920  0312                     	;# 
   921  0313                     	;# 
   922  0318                     	;# 
   923  0318                     	;# 
   924  0319                     	;# 
   925  031A                     	;# 
   926  031C                     	;# 
   927  031C                     	;# 
   928  031D                     	;# 
   929  031E                     	;# 
   930  038C                     	;# 
   931  038D                     	;# 
   932  0394                     	;# 
   933  0395                     	;# 
   934  0396                     	;# 
   935  040C                     	;# 
   936  040D                     	;# 
   937  0411                     	;# 
   938  0411                     	;# 
   939  0412                     	;# 
   940  0413                     	;# 
   941  0414                     	;# 
   942  0415                     	;# 
   943  0416                     	;# 
   944  0417                     	;# 
   945  0418                     	;# 
   946  0418                     	;# 
   947  0419                     	;# 
   948  041A                     	;# 
   949  041B                     	;# 
   950  041C                     	;# 
   951  041D                     	;# 
   952  041E                     	;# 
   953  048D                     	;# 
   954  0491                     	;# 
   955  0491                     	;# 
   956  0492                     	;# 
   957  0492                     	;# 
   958  0493                     	;# 
   959  0493                     	;# 
   960  0493                     	;# 
   961  0494                     	;# 
   962  0494                     	;# 
   963  0495                     	;# 
   964  0495                     	;# 
   965  0496                     	;# 
   966  0496                     	;# 
   967  0497                     	;# 
   968  0497                     	;# 
   969  0595                     	;# 
   970  0596                     	;# 
   971  0597                     	;# 
   972  059C                     	;# 
   973  059D                     	;# 
   974  059E                     	;# 
   975  0611                     	;# 
   976  0611                     	;# 
   977  0612                     	;# 
   978  0613                     	;# 
   979  0614                     	;# 
   980  0614                     	;# 
   981  0615                     	;# 
   982  0616                     	;# 
   983  0617                     	;# 
   984  0617                     	;# 
   985  0618                     	;# 
   986  0619                     	;# 
   987  061A                     	;# 
   988  061A                     	;# 
   989  061B                     	;# 
   990  061C                     	;# 
   991  061D                     	;# 
   992  061D                     	;# 
   993  061E                     	;# 
   994  061F                     	;# 
   995  0FE4                     	;# 
   996  0FE5                     	;# 
   997  0FE6                     	;# 
   998  0FE7                     	;# 
   999  0FE8                     	;# 
  1000  0FE9                     	;# 
  1001  0FEA                     	;# 
  1002  0FEB                     	;# 
  1003  0FED                     	;# 
  1004  0FEE                     	;# 
  1005  0FEF                     	;# 
  1006  0000                     	;# 
  1007  0001                     	;# 
  1008  0002                     	;# 
  1009  0003                     	;# 
  1010  0004                     	;# 
  1011  0005                     	;# 
  1012  0006                     	;# 
  1013  0007                     	;# 
  1014  0008                     	;# 
  1015  0009                     	;# 
  1016  000A                     	;# 
  1017  000B                     	;# 
  1018  000C                     	;# 
  1019  000D                     	;# 
  1020  000E                     	;# 
  1021  000F                     	;# 
  1022  0010                     	;# 
  1023  0011                     	;# 
  1024  0012                     	;# 
  1025  0013                     	;# 
  1026  0014                     	;# 
  1027  0015                     	;# 
  1028  0016                     	;# 
  1029  0016                     	;# 
  1030  0017                     	;# 
  1031  0018                     	;# 
  1032  0019                     	;# 
  1033  001A                     	;# 
  1034  001B                     	;# 
  1035  001C                     	;# 
  1036  008C                     	;# 
  1037  008D                     	;# 
  1038  008E                     	;# 
  1039  008F                     	;# 
  1040  0090                     	;# 
  1041  0091                     	;# 
  1042  0092                     	;# 
  1043  0093                     	;# 
  1044  0094                     	;# 
  1045  0095                     	;# 
  1046  0096                     	;# 
  1047  0097                     	;# 
  1048  0099                     	;# 
  1049  009A                     	;# 
  1050  009B                     	;# 
  1051  009B                     	;# 
  1052  009C                     	;# 
  1053  009D                     	;# 
  1054  009E                     	;# 
  1055  010C                     	;# 
  1056  010D                     	;# 
  1057  010E                     	;# 
  1058  010F                     	;# 
  1059  0110                     	;# 
  1060  0116                     	;# 
  1061  0117                     	;# 
  1062  011D                     	;# 
  1063  018C                     	;# 
  1064  018D                     	;# 
  1065  018F                     	;# 
  1066  0190                     	;# 
  1067  0191                     	;# 
  1068  0191                     	;# 
  1069  0192                     	;# 
  1070  0193                     	;# 
  1071  0193                     	;# 
  1072  0194                     	;# 
  1073  0195                     	;# 
  1074  0196                     	;# 
  1075  0197                     	;# 
  1076  0199                     	;# 
  1077  0199                     	;# 
  1078  0199                     	;# 
  1079  019A                     	;# 
  1080  019A                     	;# 
  1081  019A                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019D                     	;# 
  1091  019D                     	;# 
  1092  019D                     	;# 
  1093  019E                     	;# 
  1094  019E                     	;# 
  1095  019E                     	;# 
  1096  019F                     	;# 
  1097  019F                     	;# 
  1098  019F                     	;# 
  1099  020D                     	;# 
  1100  020F                     	;# 
  1101  0210                     	;# 
  1102  0211                     	;# 
  1103  0211                     	;# 
  1104  0212                     	;# 
  1105  0212                     	;# 
  1106  0213                     	;# 
  1107  0213                     	;# 
  1108  0214                     	;# 
  1109  0214                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0216                     	;# 
  1114  0216                     	;# 
  1115  0217                     	;# 
  1116  0217                     	;# 
  1117  0219                     	;# 
  1118  021A                     	;# 
  1119  021B                     	;# 
  1120  021C                     	;# 
  1121  021D                     	;# 
  1122  021E                     	;# 
  1123  021F                     	;# 
  1124  028C                     	;# 
  1125  028D                     	;# 
  1126  0291                     	;# 
  1127  0291                     	;# 
  1128  0292                     	;# 
  1129  0293                     	;# 
  1130  0298                     	;# 
  1131  0298                     	;# 
  1132  0299                     	;# 
  1133  029A                     	;# 
  1134  029D                     	;# 
  1135  029E                     	;# 
  1136  029F                     	;# 
  1137  030C                     	;# 
  1138  030D                     	;# 
  1139  0311                     	;# 
  1140  0311                     	;# 
  1141  0312                     	;# 
  1142  0313                     	;# 
  1143  0318                     	;# 
  1144  0318                     	;# 
  1145  0319                     	;# 
  1146  031A                     	;# 
  1147  031C                     	;# 
  1148  031C                     	;# 
  1149  031D                     	;# 
  1150  031E                     	;# 
  1151  038C                     	;# 
  1152  038D                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  040C                     	;# 
  1157  040D                     	;# 
  1158  0411                     	;# 
  1159  0411                     	;# 
  1160  0412                     	;# 
  1161  0413                     	;# 
  1162  0414                     	;# 
  1163  0415                     	;# 
  1164  0416                     	;# 
  1165  0417                     	;# 
  1166  0418                     	;# 
  1167  0418                     	;# 
  1168  0419                     	;# 
  1169  041A                     	;# 
  1170  041B                     	;# 
  1171  041C                     	;# 
  1172  041D                     	;# 
  1173  041E                     	;# 
  1174  048D                     	;# 
  1175  0491                     	;# 
  1176  0491                     	;# 
  1177  0492                     	;# 
  1178  0492                     	;# 
  1179  0493                     	;# 
  1180  0493                     	;# 
  1181  0493                     	;# 
  1182  0494                     	;# 
  1183  0494                     	;# 
  1184  0495                     	;# 
  1185  0495                     	;# 
  1186  0496                     	;# 
  1187  0496                     	;# 
  1188  0497                     	;# 
  1189  0497                     	;# 
  1190  0595                     	;# 
  1191  0596                     	;# 
  1192  0597                     	;# 
  1193  059C                     	;# 
  1194  059D                     	;# 
  1195  059E                     	;# 
  1196  0611                     	;# 
  1197  0611                     	;# 
  1198  0612                     	;# 
  1199  0613                     	;# 
  1200  0614                     	;# 
  1201  0614                     	;# 
  1202  0615                     	;# 
  1203  0616                     	;# 
  1204  0617                     	;# 
  1205  0617                     	;# 
  1206  0618                     	;# 
  1207  0619                     	;# 
  1208  061A                     	;# 
  1209  061A                     	;# 
  1210  061B                     	;# 
  1211  061C                     	;# 
  1212  061D                     	;# 
  1213  061D                     	;# 
  1214  061E                     	;# 
  1215  061F                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227  0000                     	;# 
  1228  0001                     	;# 
  1229  0002                     	;# 
  1230  0003                     	;# 
  1231  0004                     	;# 
  1232  0005                     	;# 
  1233  0006                     	;# 
  1234  0007                     	;# 
  1235  0008                     	;# 
  1236  0009                     	;# 
  1237  000A                     	;# 
  1238  000B                     	;# 
  1239  000C                     	;# 
  1240  000D                     	;# 
  1241  000E                     	;# 
  1242  000F                     	;# 
  1243  0010                     	;# 
  1244  0011                     	;# 
  1245  0012                     	;# 
  1246  0013                     	;# 
  1247  0014                     	;# 
  1248  0015                     	;# 
  1249  0016                     	;# 
  1250  0016                     	;# 
  1251  0017                     	;# 
  1252  0018                     	;# 
  1253  0019                     	;# 
  1254  001A                     	;# 
  1255  001B                     	;# 
  1256  001C                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  008F                     	;# 
  1261  0090                     	;# 
  1262  0091                     	;# 
  1263  0092                     	;# 
  1264  0093                     	;# 
  1265  0094                     	;# 
  1266  0095                     	;# 
  1267  0096                     	;# 
  1268  0097                     	;# 
  1269  0099                     	;# 
  1270  009A                     	;# 
  1271  009B                     	;# 
  1272  009B                     	;# 
  1273  009C                     	;# 
  1274  009D                     	;# 
  1275  009E                     	;# 
  1276  010C                     	;# 
  1277  010D                     	;# 
  1278  010E                     	;# 
  1279  010F                     	;# 
  1280  0110                     	;# 
  1281  0116                     	;# 
  1282  0117                     	;# 
  1283  011D                     	;# 
  1284  018C                     	;# 
  1285  018D                     	;# 
  1286  018F                     	;# 
  1287  0190                     	;# 
  1288  0191                     	;# 
  1289  0191                     	;# 
  1290  0192                     	;# 
  1291  0193                     	;# 
  1292  0193                     	;# 
  1293  0194                     	;# 
  1294  0195                     	;# 
  1295  0196                     	;# 
  1296  0197                     	;# 
  1297  0199                     	;# 
  1298  0199                     	;# 
  1299  0199                     	;# 
  1300  019A                     	;# 
  1301  019A                     	;# 
  1302  019A                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019D                     	;# 
  1312  019D                     	;# 
  1313  019D                     	;# 
  1314  019E                     	;# 
  1315  019E                     	;# 
  1316  019E                     	;# 
  1317  019F                     	;# 
  1318  019F                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  020F                     	;# 
  1322  0210                     	;# 
  1323  0211                     	;# 
  1324  0211                     	;# 
  1325  0212                     	;# 
  1326  0212                     	;# 
  1327  0213                     	;# 
  1328  0213                     	;# 
  1329  0214                     	;# 
  1330  0214                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0216                     	;# 
  1335  0216                     	;# 
  1336  0217                     	;# 
  1337  0217                     	;# 
  1338  0219                     	;# 
  1339  021A                     	;# 
  1340  021B                     	;# 
  1341  021C                     	;# 
  1342  021D                     	;# 
  1343  021E                     	;# 
  1344  021F                     	;# 
  1345  028C                     	;# 
  1346  028D                     	;# 
  1347  0291                     	;# 
  1348  0291                     	;# 
  1349  0292                     	;# 
  1350  0293                     	;# 
  1351  0298                     	;# 
  1352  0298                     	;# 
  1353  0299                     	;# 
  1354  029A                     	;# 
  1355  029D                     	;# 
  1356  029E                     	;# 
  1357  029F                     	;# 
  1358  030C                     	;# 
  1359  030D                     	;# 
  1360  0311                     	;# 
  1361  0311                     	;# 
  1362  0312                     	;# 
  1363  0313                     	;# 
  1364  0318                     	;# 
  1365  0318                     	;# 
  1366  0319                     	;# 
  1367  031A                     	;# 
  1368  031C                     	;# 
  1369  031C                     	;# 
  1370  031D                     	;# 
  1371  031E                     	;# 
  1372  038C                     	;# 
  1373  038D                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  040C                     	;# 
  1378  040D                     	;# 
  1379  0411                     	;# 
  1380  0411                     	;# 
  1381  0412                     	;# 
  1382  0413                     	;# 
  1383  0414                     	;# 
  1384  0415                     	;# 
  1385  0416                     	;# 
  1386  0417                     	;# 
  1387  0418                     	;# 
  1388  0418                     	;# 
  1389  0419                     	;# 
  1390  041A                     	;# 
  1391  041B                     	;# 
  1392  041C                     	;# 
  1393  041D                     	;# 
  1394  041E                     	;# 
  1395  048D                     	;# 
  1396  0491                     	;# 
  1397  0491                     	;# 
  1398  0492                     	;# 
  1399  0492                     	;# 
  1400  0493                     	;# 
  1401  0493                     	;# 
  1402  0493                     	;# 
  1403  0494                     	;# 
  1404  0494                     	;# 
  1405  0495                     	;# 
  1406  0495                     	;# 
  1407  0496                     	;# 
  1408  0496                     	;# 
  1409  0497                     	;# 
  1410  0497                     	;# 
  1411  0595                     	;# 
  1412  0596                     	;# 
  1413  0597                     	;# 
  1414  059C                     	;# 
  1415  059D                     	;# 
  1416  059E                     	;# 
  1417  0611                     	;# 
  1418  0611                     	;# 
  1419  0612                     	;# 
  1420  0613                     	;# 
  1421  0614                     	;# 
  1422  0614                     	;# 
  1423  0615                     	;# 
  1424  0616                     	;# 
  1425  0617                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061A                     	;# 
  1431  061B                     	;# 
  1432  061C                     	;# 
  1433  061D                     	;# 
  1434  061D                     	;# 
  1435  061E                     	;# 
  1436  061F                     	;# 
  1437  0FE4                     	;# 
  1438  0FE5                     	;# 
  1439  0FE6                     	;# 
  1440  0FE7                     	;# 
  1441  0FE8                     	;# 
  1442  0FE9                     	;# 
  1443  0FEA                     	;# 
  1444  0FEB                     	;# 
  1445  0FED                     	;# 
  1446  0FEE                     	;# 
  1447  0FEF                     	;# 
  1448  0000                     	;# 
  1449  0001                     	;# 
  1450  0002                     	;# 
  1451  0003                     	;# 
  1452  0004                     	;# 
  1453  0005                     	;# 
  1454  0006                     	;# 
  1455  0007                     	;# 
  1456  0008                     	;# 
  1457  0009                     	;# 
  1458  000A                     	;# 
  1459  000B                     	;# 
  1460  000C                     	;# 
  1461  000D                     	;# 
  1462  000E                     	;# 
  1463  000F                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001B                     	;# 
  1477  001C                     	;# 
  1478  008C                     	;# 
  1479  008D                     	;# 
  1480  008E                     	;# 
  1481  008F                     	;# 
  1482  0090                     	;# 
  1483  0091                     	;# 
  1484  0092                     	;# 
  1485  0093                     	;# 
  1486  0094                     	;# 
  1487  0095                     	;# 
  1488  0096                     	;# 
  1489  0097                     	;# 
  1490  0099                     	;# 
  1491  009A                     	;# 
  1492  009B                     	;# 
  1493  009B                     	;# 
  1494  009C                     	;# 
  1495  009D                     	;# 
  1496  009E                     	;# 
  1497  010C                     	;# 
  1498  010D                     	;# 
  1499  010E                     	;# 
  1500  010F                     	;# 
  1501  0110                     	;# 
  1502  0116                     	;# 
  1503  0117                     	;# 
  1504  011D                     	;# 
  1505  018C                     	;# 
  1506  018D                     	;# 
  1507  018F                     	;# 
  1508  0190                     	;# 
  1509  0191                     	;# 
  1510  0191                     	;# 
  1511  0192                     	;# 
  1512  0193                     	;# 
  1513  0193                     	;# 
  1514  0194                     	;# 
  1515  0195                     	;# 
  1516  0196                     	;# 
  1517  0197                     	;# 
  1518  0199                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019C                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019D                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019E                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  020D                     	;# 
  1542  020F                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0219                     	;# 
  1560  021A                     	;# 
  1561  021B                     	;# 
  1562  021C                     	;# 
  1563  021D                     	;# 
  1564  021E                     	;# 
  1565  021F                     	;# 
  1566  028C                     	;# 
  1567  028D                     	;# 
  1568  0291                     	;# 
  1569  0291                     	;# 
  1570  0292                     	;# 
  1571  0293                     	;# 
  1572  0298                     	;# 
  1573  0298                     	;# 
  1574  0299                     	;# 
  1575  029A                     	;# 
  1576  029D                     	;# 
  1577  029E                     	;# 
  1578  029F                     	;# 
  1579  030C                     	;# 
  1580  030D                     	;# 
  1581  0311                     	;# 
  1582  0311                     	;# 
  1583  0312                     	;# 
  1584  0313                     	;# 
  1585  0318                     	;# 
  1586  0318                     	;# 
  1587  0319                     	;# 
  1588  031A                     	;# 
  1589  031C                     	;# 
  1590  031C                     	;# 
  1591  031D                     	;# 
  1592  031E                     	;# 
  1593  038C                     	;# 
  1594  038D                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  040C                     	;# 
  1599  040D                     	;# 
  1600  0411                     	;# 
  1601  0411                     	;# 
  1602  0412                     	;# 
  1603  0413                     	;# 
  1604  0414                     	;# 
  1605  0415                     	;# 
  1606  0416                     	;# 
  1607  0417                     	;# 
  1608  0418                     	;# 
  1609  0418                     	;# 
  1610  0419                     	;# 
  1611  041A                     	;# 
  1612  041B                     	;# 
  1613  041C                     	;# 
  1614  041D                     	;# 
  1615  041E                     	;# 
  1616  048D                     	;# 
  1617  0491                     	;# 
  1618  0491                     	;# 
  1619  0492                     	;# 
  1620  0492                     	;# 
  1621  0493                     	;# 
  1622  0493                     	;# 
  1623  0493                     	;# 
  1624  0494                     	;# 
  1625  0494                     	;# 
  1626  0495                     	;# 
  1627  0495                     	;# 
  1628  0496                     	;# 
  1629  0496                     	;# 
  1630  0497                     	;# 
  1631  0497                     	;# 
  1632  0595                     	;# 
  1633  0596                     	;# 
  1634  0597                     	;# 
  1635  059C                     	;# 
  1636  059D                     	;# 
  1637  059E                     	;# 
  1638  0611                     	;# 
  1639  0611                     	;# 
  1640  0612                     	;# 
  1641  0613                     	;# 
  1642  0614                     	;# 
  1643  0614                     	;# 
  1644  0615                     	;# 
  1645  0616                     	;# 
  1646  0617                     	;# 
  1647  0617                     	;# 
  1648  0618                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061A                     	;# 
  1652  061B                     	;# 
  1653  061C                     	;# 
  1654  061D                     	;# 
  1655  061D                     	;# 
  1656  061E                     	;# 
  1657  061F                     	;# 
  1658  0FE4                     	;# 
  1659  0FE5                     	;# 
  1660  0FE6                     	;# 
  1661  0FE7                     	;# 
  1662  0FE8                     	;# 
  1663  0FE9                     	;# 
  1664  0FEA                     	;# 
  1665  0FEB                     	;# 
  1666  0FED                     	;# 
  1667  0FEE                     	;# 
  1668  0FEF                     	;# 
  1669  0000                     	;# 
  1670  0001                     	;# 
  1671  0002                     	;# 
  1672  0003                     	;# 
  1673  0004                     	;# 
  1674  0005                     	;# 
  1675  0006                     	;# 
  1676  0007                     	;# 
  1677  0008                     	;# 
  1678  0009                     	;# 
  1679  000A                     	;# 
  1680  000B                     	;# 
  1681  000C                     	;# 
  1682  000D                     	;# 
  1683  000E                     	;# 
  1684  000F                     	;# 
  1685  0010                     	;# 
  1686  0011                     	;# 
  1687  0012                     	;# 
  1688  0013                     	;# 
  1689  0014                     	;# 
  1690  0015                     	;# 
  1691  0016                     	;# 
  1692  0016                     	;# 
  1693  0017                     	;# 
  1694  0018                     	;# 
  1695  0019                     	;# 
  1696  001A                     	;# 
  1697  001B                     	;# 
  1698  001C                     	;# 
  1699  008C                     	;# 
  1700  008D                     	;# 
  1701  008E                     	;# 
  1702  008F                     	;# 
  1703  0090                     	;# 
  1704  0091                     	;# 
  1705  0092                     	;# 
  1706  0093                     	;# 
  1707  0094                     	;# 
  1708  0095                     	;# 
  1709  0096                     	;# 
  1710  0097                     	;# 
  1711  0099                     	;# 
  1712  009A                     	;# 
  1713  009B                     	;# 
  1714  009B                     	;# 
  1715  009C                     	;# 
  1716  009D                     	;# 
  1717  009E                     	;# 
  1718  010C                     	;# 
  1719  010D                     	;# 
  1720  010E                     	;# 
  1721  010F                     	;# 
  1722  0110                     	;# 
  1723  0116                     	;# 
  1724  0117                     	;# 
  1725  011D                     	;# 
  1726  018C                     	;# 
  1727  018D                     	;# 
  1728  018F                     	;# 
  1729  0190                     	;# 
  1730  0191                     	;# 
  1731  0191                     	;# 
  1732  0192                     	;# 
  1733  0193                     	;# 
  1734  0193                     	;# 
  1735  0194                     	;# 
  1736  0195                     	;# 
  1737  0196                     	;# 
  1738  0197                     	;# 
  1739  0199                     	;# 
  1740  0199                     	;# 
  1741  0199                     	;# 
  1742  019A                     	;# 
  1743  019A                     	;# 
  1744  019A                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019C                     	;# 
  1751  019C                     	;# 
  1752  019C                     	;# 
  1753  019D                     	;# 
  1754  019D                     	;# 
  1755  019D                     	;# 
  1756  019E                     	;# 
  1757  019E                     	;# 
  1758  019E                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  020D                     	;# 
  1763  020F                     	;# 
  1764  0210                     	;# 
  1765  0211                     	;# 
  1766  0211                     	;# 
  1767  0212                     	;# 
  1768  0212                     	;# 
  1769  0213                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0214                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021C                     	;# 
  1784  021D                     	;# 
  1785  021E                     	;# 
  1786  021F                     	;# 
  1787  028C                     	;# 
  1788  028D                     	;# 
  1789  0291                     	;# 
  1790  0291                     	;# 
  1791  0292                     	;# 
  1792  0293                     	;# 
  1793  0298                     	;# 
  1794  0298                     	;# 
  1795  0299                     	;# 
  1796  029A                     	;# 
  1797  029D                     	;# 
  1798  029E                     	;# 
  1799  029F                     	;# 
  1800  030C                     	;# 
  1801  030D                     	;# 
  1802  0311                     	;# 
  1803  0311                     	;# 
  1804  0312                     	;# 
  1805  0313                     	;# 
  1806  0318                     	;# 
  1807  0318                     	;# 
  1808  0319                     	;# 
  1809  031A                     	;# 
  1810  031C                     	;# 
  1811  031C                     	;# 
  1812  031D                     	;# 
  1813  031E                     	;# 
  1814  038C                     	;# 
  1815  038D                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  040C                     	;# 
  1820  040D                     	;# 
  1821  0411                     	;# 
  1822  0411                     	;# 
  1823  0412                     	;# 
  1824  0413                     	;# 
  1825  0414                     	;# 
  1826  0415                     	;# 
  1827  0416                     	;# 
  1828  0417                     	;# 
  1829  0418                     	;# 
  1830  0418                     	;# 
  1831  0419                     	;# 
  1832  041A                     	;# 
  1833  041B                     	;# 
  1834  041C                     	;# 
  1835  041D                     	;# 
  1836  041E                     	;# 
  1837  048D                     	;# 
  1838  0491                     	;# 
  1839  0491                     	;# 
  1840  0492                     	;# 
  1841  0492                     	;# 
  1842  0493                     	;# 
  1843  0493                     	;# 
  1844  0493                     	;# 
  1845  0494                     	;# 
  1846  0494                     	;# 
  1847  0495                     	;# 
  1848  0495                     	;# 
  1849  0496                     	;# 
  1850  0496                     	;# 
  1851  0497                     	;# 
  1852  0497                     	;# 
  1853  0595                     	;# 
  1854  0596                     	;# 
  1855  0597                     	;# 
  1856  059C                     	;# 
  1857  059D                     	;# 
  1858  059E                     	;# 
  1859  0611                     	;# 
  1860  0611                     	;# 
  1861  0612                     	;# 
  1862  0613                     	;# 
  1863  0614                     	;# 
  1864  0614                     	;# 
  1865  0615                     	;# 
  1866  0616                     	;# 
  1867  0617                     	;# 
  1868  0617                     	;# 
  1869  0618                     	;# 
  1870  0619                     	;# 
  1871  061A                     	;# 
  1872  061A                     	;# 
  1873  061B                     	;# 
  1874  061C                     	;# 
  1875  061D                     	;# 
  1876  061D                     	;# 
  1877  061E                     	;# 
  1878  061F                     	;# 
  1879  0FE4                     	;# 
  1880  0FE5                     	;# 
  1881  0FE6                     	;# 
  1882  0FE7                     	;# 
  1883  0FE8                     	;# 
  1884  0FE9                     	;# 
  1885  0FEA                     	;# 
  1886  0FEB                     	;# 
  1887  0FED                     	;# 
  1888  0FEE                     	;# 
  1889  0FEF                     	;# 
  1890  0000                     	;# 
  1891  0001                     	;# 
  1892  0002                     	;# 
  1893  0003                     	;# 
  1894  0004                     	;# 
  1895  0005                     	;# 
  1896  0006                     	;# 
  1897  0007                     	;# 
  1898  0008                     	;# 
  1899  0009                     	;# 
  1900  000A                     	;# 
  1901  000B                     	;# 
  1902  000C                     	;# 
  1903  000D                     	;# 
  1904  000E                     	;# 
  1905  000F                     	;# 
  1906  0010                     	;# 
  1907  0011                     	;# 
  1908  0012                     	;# 
  1909  0013                     	;# 
  1910  0014                     	;# 
  1911  0015                     	;# 
  1912  0016                     	;# 
  1913  0016                     	;# 
  1914  0017                     	;# 
  1915  0018                     	;# 
  1916  0019                     	;# 
  1917  001A                     	;# 
  1918  001B                     	;# 
  1919  001C                     	;# 
  1920  008C                     	;# 
  1921  008D                     	;# 
  1922  008E                     	;# 
  1923  008F                     	;# 
  1924  0090                     	;# 
  1925  0091                     	;# 
  1926  0092                     	;# 
  1927  0093                     	;# 
  1928  0094                     	;# 
  1929  0095                     	;# 
  1930  0096                     	;# 
  1931  0097                     	;# 
  1932  0099                     	;# 
  1933  009A                     	;# 
  1934  009B                     	;# 
  1935  009B                     	;# 
  1936  009C                     	;# 
  1937  009D                     	;# 
  1938  009E                     	;# 
  1939  010C                     	;# 
  1940  010D                     	;# 
  1941  010E                     	;# 
  1942  010F                     	;# 
  1943  0110                     	;# 
  1944  0116                     	;# 
  1945  0117                     	;# 
  1946  011D                     	;# 
  1947  018C                     	;# 
  1948  018D                     	;# 
  1949  018F                     	;# 
  1950  0190                     	;# 
  1951  0191                     	;# 
  1952  0191                     	;# 
  1953  0192                     	;# 
  1954  0193                     	;# 
  1955  0193                     	;# 
  1956  0194                     	;# 
  1957  0195                     	;# 
  1958  0196                     	;# 
  1959  0197                     	;# 
  1960  0199                     	;# 
  1961  0199                     	;# 
  1962  0199                     	;# 
  1963  019A                     	;# 
  1964  019A                     	;# 
  1965  019A                     	;# 
  1966  019B                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019C                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019D                     	;# 
  1975  019D                     	;# 
  1976  019D                     	;# 
  1977  019E                     	;# 
  1978  019E                     	;# 
  1979  019E                     	;# 
  1980  019F                     	;# 
  1981  019F                     	;# 
  1982  019F                     	;# 
  1983  020D                     	;# 
  1984  020F                     	;# 
  1985  0210                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0219                     	;# 
  2002  021A                     	;# 
  2003  021B                     	;# 
  2004  021C                     	;# 
  2005  021D                     	;# 
  2006  021E                     	;# 
  2007  021F                     	;# 
  2008  028C                     	;# 
  2009  028D                     	;# 
  2010  0291                     	;# 
  2011  0291                     	;# 
  2012  0292                     	;# 
  2013  0293                     	;# 
  2014  0298                     	;# 
  2015  0298                     	;# 
  2016  0299                     	;# 
  2017  029A                     	;# 
  2018  029D                     	;# 
  2019  029E                     	;# 
  2020  029F                     	;# 
  2021  030C                     	;# 
  2022  030D                     	;# 
  2023  0311                     	;# 
  2024  0311                     	;# 
  2025  0312                     	;# 
  2026  0313                     	;# 
  2027  0318                     	;# 
  2028  0318                     	;# 
  2029  0319                     	;# 
  2030  031A                     	;# 
  2031  031C                     	;# 
  2032  031C                     	;# 
  2033  031D                     	;# 
  2034  031E                     	;# 
  2035  038C                     	;# 
  2036  038D                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  040C                     	;# 
  2041  040D                     	;# 
  2042  0411                     	;# 
  2043  0411                     	;# 
  2044  0412                     	;# 
  2045  0413                     	;# 
  2046  0414                     	;# 
  2047  0415                     	;# 
  2048  0416                     	;# 
  2049  0417                     	;# 
  2050  0418                     	;# 
  2051  0418                     	;# 
  2052  0419                     	;# 
  2053  041A                     	;# 
  2054  041B                     	;# 
  2055  041C                     	;# 
  2056  041D                     	;# 
  2057  041E                     	;# 
  2058  048D                     	;# 
  2059  0491                     	;# 
  2060  0491                     	;# 
  2061  0492                     	;# 
  2062  0492                     	;# 
  2063  0493                     	;# 
  2064  0493                     	;# 
  2065  0493                     	;# 
  2066  0494                     	;# 
  2067  0494                     	;# 
  2068  0495                     	;# 
  2069  0495                     	;# 
  2070  0496                     	;# 
  2071  0496                     	;# 
  2072  0497                     	;# 
  2073  0497                     	;# 
  2074  0595                     	;# 
  2075  0596                     	;# 
  2076  0597                     	;# 
  2077  059C                     	;# 
  2078  059D                     	;# 
  2079  059E                     	;# 
  2080  0611                     	;# 
  2081  0611                     	;# 
  2082  0612                     	;# 
  2083  0613                     	;# 
  2084  0614                     	;# 
  2085  0614                     	;# 
  2086  0615                     	;# 
  2087  0616                     	;# 
  2088  0617                     	;# 
  2089  0617                     	;# 
  2090  0618                     	;# 
  2091  0619                     	;# 
  2092  061A                     	;# 
  2093  061A                     	;# 
  2094  061B                     	;# 
  2095  061C                     	;# 
  2096  061D                     	;# 
  2097  061D                     	;# 
  2098  061E                     	;# 
  2099  061F                     	;# 
  2100  0FE4                     	;# 
  2101  0FE5                     	;# 
  2102  0FE6                     	;# 
  2103  0FE7                     	;# 
  2104  0FE8                     	;# 
  2105  0FE9                     	;# 
  2106  0FEA                     	;# 
  2107  0FEB                     	;# 
  2108  0FED                     	;# 
  2109  0FEE                     	;# 
  2110  0FEF                     	;# 
  2111  0000                     	;# 
  2112  0001                     	;# 
  2113  0002                     	;# 
  2114  0003                     	;# 
  2115  0004                     	;# 
  2116  0005                     	;# 
  2117  0006                     	;# 
  2118  0007                     	;# 
  2119  0008                     	;# 
  2120  0009                     	;# 
  2121  000A                     	;# 
  2122  000B                     	;# 
  2123  000C                     	;# 
  2124  000D                     	;# 
  2125  000E                     	;# 
  2126  000F                     	;# 
  2127  0010                     	;# 
  2128  0011                     	;# 
  2129  0012                     	;# 
  2130  0013                     	;# 
  2131  0014                     	;# 
  2132  0015                     	;# 
  2133  0016                     	;# 
  2134  0016                     	;# 
  2135  0017                     	;# 
  2136  0018                     	;# 
  2137  0019                     	;# 
  2138  001A                     	;# 
  2139  001B                     	;# 
  2140  001C                     	;# 
  2141  008C                     	;# 
  2142  008D                     	;# 
  2143  008E                     	;# 
  2144  008F                     	;# 
  2145  0090                     	;# 
  2146  0091                     	;# 
  2147  0092                     	;# 
  2148  0093                     	;# 
  2149  0094                     	;# 
  2150  0095                     	;# 
  2151  0096                     	;# 
  2152  0097                     	;# 
  2153  0099                     	;# 
  2154  009A                     	;# 
  2155  009B                     	;# 
  2156  009B                     	;# 
  2157  009C                     	;# 
  2158  009D                     	;# 
  2159  009E                     	;# 
  2160  010C                     	;# 
  2161  010D                     	;# 
  2162  010E                     	;# 
  2163  010F                     	;# 
  2164  0110                     	;# 
  2165  0116                     	;# 
  2166  0117                     	;# 
  2167  011D                     	;# 
  2168  018C                     	;# 
  2169  018D                     	;# 
  2170  018F                     	;# 
  2171  0190                     	;# 
  2172  0191                     	;# 
  2173  0191                     	;# 
  2174  0192                     	;# 
  2175  0193                     	;# 
  2176  0193                     	;# 
  2177  0194                     	;# 
  2178  0195                     	;# 
  2179  0196                     	;# 
  2180  0197                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  020D                     	;# 
  2205  020F                     	;# 
  2206  0210                     	;# 
  2207  0211                     	;# 
  2208  0211                     	;# 
  2209  0212                     	;# 
  2210  0212                     	;# 
  2211  0213                     	;# 
  2212  0213                     	;# 
  2213  0214                     	;# 
  2214  0214                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0216                     	;# 
  2219  0216                     	;# 
  2220  0217                     	;# 
  2221  0217                     	;# 
  2222  0219                     	;# 
  2223  021A                     	;# 
  2224  021B                     	;# 
  2225  021C                     	;# 
  2226  021D                     	;# 
  2227  021E                     	;# 
  2228  021F                     	;# 
  2229  028C                     	;# 
  2230  028D                     	;# 
  2231  0291                     	;# 
  2232  0291                     	;# 
  2233  0292                     	;# 
  2234  0293                     	;# 
  2235  0298                     	;# 
  2236  0298                     	;# 
  2237  0299                     	;# 
  2238  029A                     	;# 
  2239  029D                     	;# 
  2240  029E                     	;# 
  2241  029F                     	;# 
  2242  030C                     	;# 
  2243  030D                     	;# 
  2244  0311                     	;# 
  2245  0311                     	;# 
  2246  0312                     	;# 
  2247  0313                     	;# 
  2248  0318                     	;# 
  2249  0318                     	;# 
  2250  0319                     	;# 
  2251  031A                     	;# 
  2252  031C                     	;# 
  2253  031C                     	;# 
  2254  031D                     	;# 
  2255  031E                     	;# 
  2256  038C                     	;# 
  2257  038D                     	;# 
  2258  0394                     	;# 
  2259  0395                     	;# 
  2260  0396                     	;# 
  2261  040C                     	;# 
  2262  040D                     	;# 
  2263  0411                     	;# 
  2264  0411                     	;# 
  2265  0412                     	;# 
  2266  0413                     	;# 
  2267  0414                     	;# 
  2268  0415                     	;# 
  2269  0416                     	;# 
  2270  0417                     	;# 
  2271  0418                     	;# 
  2272  0418                     	;# 
  2273  0419                     	;# 
  2274  041A                     	;# 
  2275  041B                     	;# 
  2276  041C                     	;# 
  2277  041D                     	;# 
  2278  041E                     	;# 
  2279  048D                     	;# 
  2280  0491                     	;# 
  2281  0491                     	;# 
  2282  0492                     	;# 
  2283  0492                     	;# 
  2284  0493                     	;# 
  2285  0493                     	;# 
  2286  0493                     	;# 
  2287  0494                     	;# 
  2288  0494                     	;# 
  2289  0495                     	;# 
  2290  0495                     	;# 
  2291  0496                     	;# 
  2292  0496                     	;# 
  2293  0497                     	;# 
  2294  0497                     	;# 
  2295  0595                     	;# 
  2296  0596                     	;# 
  2297  0597                     	;# 
  2298  059C                     	;# 
  2299  059D                     	;# 
  2300  059E                     	;# 
  2301  0611                     	;# 
  2302  0611                     	;# 
  2303  0612                     	;# 
  2304  0613                     	;# 
  2305  0614                     	;# 
  2306  0614                     	;# 
  2307  0615                     	;# 
  2308  0616                     	;# 
  2309  0617                     	;# 
  2310  0617                     	;# 
  2311  0618                     	;# 
  2312  0619                     	;# 
  2313  061A                     	;# 
  2314  061A                     	;# 
  2315  061B                     	;# 
  2316  061C                     	;# 
  2317  061D                     	;# 
  2318  061D                     	;# 
  2319  061E                     	;# 
  2320  061F                     	;# 
  2321  0FE4                     	;# 
  2322  0FE5                     	;# 
  2323  0FE6                     	;# 
  2324  0FE7                     	;# 
  2325  0FE8                     	;# 
  2326  0FE9                     	;# 
  2327  0FEA                     	;# 
  2328  0FEB                     	;# 
  2329  0FED                     	;# 
  2330  0FEE                     	;# 
  2331  0FEF                     	;# 
  2332  0000                     	;# 
  2333  0001                     	;# 
  2334  0002                     	;# 
  2335  0003                     	;# 
  2336  0004                     	;# 
  2337  0005                     	;# 
  2338  0006                     	;# 
  2339  0007                     	;# 
  2340  0008                     	;# 
  2341  0009                     	;# 
  2342  000A                     	;# 
  2343  000B                     	;# 
  2344  000C                     	;# 
  2345  000D                     	;# 
  2346  000E                     	;# 
  2347  000F                     	;# 
  2348  0010                     	;# 
  2349  0011                     	;# 
  2350  0012                     	;# 
  2351  0013                     	;# 
  2352  0014                     	;# 
  2353  0015                     	;# 
  2354  0016                     	;# 
  2355  0016                     	;# 
  2356  0017                     	;# 
  2357  0018                     	;# 
  2358  0019                     	;# 
  2359  001A                     	;# 
  2360  001B                     	;# 
  2361  001C                     	;# 
  2362  008C                     	;# 
  2363  008D                     	;# 
  2364  008E                     	;# 
  2365  008F                     	;# 
  2366  0090                     	;# 
  2367  0091                     	;# 
  2368  0092                     	;# 
  2369  0093                     	;# 
  2370  0094                     	;# 
  2371  0095                     	;# 
  2372  0096                     	;# 
  2373  0097                     	;# 
  2374  0099                     	;# 
  2375  009A                     	;# 
  2376  009B                     	;# 
  2377  009B                     	;# 
  2378  009C                     	;# 
  2379  009D                     	;# 
  2380  009E                     	;# 
  2381  010C                     	;# 
  2382  010D                     	;# 
  2383  010E                     	;# 
  2384  010F                     	;# 
  2385  0110                     	;# 
  2386  0116                     	;# 
  2387  0117                     	;# 
  2388  011D                     	;# 
  2389  018C                     	;# 
  2390  018D                     	;# 
  2391  018F                     	;# 
  2392  0190                     	;# 
  2393  0191                     	;# 
  2394  0191                     	;# 
  2395  0192                     	;# 
  2396  0193                     	;# 
  2397  0193                     	;# 
  2398  0194                     	;# 
  2399  0195                     	;# 
  2400  0196                     	;# 
  2401  0197                     	;# 
  2402  0199                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  019A                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019C                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019D                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019E                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019F                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  020D                     	;# 
  2426  020F                     	;# 
  2427  0210                     	;# 
  2428  0211                     	;# 
  2429  0211                     	;# 
  2430  0212                     	;# 
  2431  0212                     	;# 
  2432  0213                     	;# 
  2433  0213                     	;# 
  2434  0214                     	;# 
  2435  0214                     	;# 
  2436  0215                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0216                     	;# 
  2440  0216                     	;# 
  2441  0217                     	;# 
  2442  0217                     	;# 
  2443  0219                     	;# 
  2444  021A                     	;# 
  2445  021B                     	;# 
  2446  021C                     	;# 
  2447  021D                     	;# 
  2448  021E                     	;# 
  2449  021F                     	;# 
  2450  028C                     	;# 
  2451  028D                     	;# 
  2452  0291                     	;# 
  2453  0291                     	;# 
  2454  0292                     	;# 
  2455  0293                     	;# 
  2456  0298                     	;# 
  2457  0298                     	;# 
  2458  0299                     	;# 
  2459  029A                     	;# 
  2460  029D                     	;# 
  2461  029E                     	;# 
  2462  029F                     	;# 
  2463  030C                     	;# 
  2464  030D                     	;# 
  2465  0311                     	;# 
  2466  0311                     	;# 
  2467  0312                     	;# 
  2468  0313                     	;# 
  2469  0318                     	;# 
  2470  0318                     	;# 
  2471  0319                     	;# 
  2472  031A                     	;# 
  2473  031C                     	;# 
  2474  031C                     	;# 
  2475  031D                     	;# 
  2476  031E                     	;# 
  2477  038C                     	;# 
  2478  038D                     	;# 
  2479  0394                     	;# 
  2480  0395                     	;# 
  2481  0396                     	;# 
  2482  040C                     	;# 
  2483  040D                     	;# 
  2484  0411                     	;# 
  2485  0411                     	;# 
  2486  0412                     	;# 
  2487  0413                     	;# 
  2488  0414                     	;# 
  2489  0415                     	;# 
  2490  0416                     	;# 
  2491  0417                     	;# 
  2492  0418                     	;# 
  2493  0418                     	;# 
  2494  0419                     	;# 
  2495  041A                     	;# 
  2496  041B                     	;# 
  2497  041C                     	;# 
  2498  041D                     	;# 
  2499  041E                     	;# 
  2500  048D                     	;# 
  2501  0491                     	;# 
  2502  0491                     	;# 
  2503  0492                     	;# 
  2504  0492                     	;# 
  2505  0493                     	;# 
  2506  0493                     	;# 
  2507  0493                     	;# 
  2508  0494                     	;# 
  2509  0494                     	;# 
  2510  0495                     	;# 
  2511  0495                     	;# 
  2512  0496                     	;# 
  2513  0496                     	;# 
  2514  0497                     	;# 
  2515  0497                     	;# 
  2516  0595                     	;# 
  2517  0596                     	;# 
  2518  0597                     	;# 
  2519  059C                     	;# 
  2520  059D                     	;# 
  2521  059E                     	;# 
  2522  0611                     	;# 
  2523  0611                     	;# 
  2524  0612                     	;# 
  2525  0613                     	;# 
  2526  0614                     	;# 
  2527  0614                     	;# 
  2528  0615                     	;# 
  2529  0616                     	;# 
  2530  0617                     	;# 
  2531  0617                     	;# 
  2532  0618                     	;# 
  2533  0619                     	;# 
  2534  061A                     	;# 
  2535  061A                     	;# 
  2536  061B                     	;# 
  2537  061C                     	;# 
  2538  061D                     	;# 
  2539  061D                     	;# 
  2540  061E                     	;# 
  2541  061F                     	;# 
  2542  0FE4                     	;# 
  2543  0FE5                     	;# 
  2544  0FE6                     	;# 
  2545  0FE7                     	;# 
  2546  0FE8                     	;# 
  2547  0FE9                     	;# 
  2548  0FEA                     	;# 
  2549  0FEB                     	;# 
  2550  0FED                     	;# 
  2551  0FEE                     	;# 
  2552  0FEF                     	;# 
  2553  0000                     	;# 
  2554  0001                     	;# 
  2555  0002                     	;# 
  2556  0003                     	;# 
  2557  0004                     	;# 
  2558  0005                     	;# 
  2559  0006                     	;# 
  2560  0007                     	;# 
  2561  0008                     	;# 
  2562  0009                     	;# 
  2563  000A                     	;# 
  2564  000B                     	;# 
  2565  000C                     	;# 
  2566  000D                     	;# 
  2567  000E                     	;# 
  2568  000F                     	;# 
  2569  0010                     	;# 
  2570  0011                     	;# 
  2571  0012                     	;# 
  2572  0013                     	;# 
  2573  0014                     	;# 
  2574  0015                     	;# 
  2575  0016                     	;# 
  2576  0016                     	;# 
  2577  0017                     	;# 
  2578  0018                     	;# 
  2579  0019                     	;# 
  2580  001A                     	;# 
  2581  001B                     	;# 
  2582  001C                     	;# 
  2583  008C                     	;# 
  2584  008D                     	;# 
  2585  008E                     	;# 
  2586  008F                     	;# 
  2587  0090                     	;# 
  2588  0091                     	;# 
  2589  0092                     	;# 
  2590  0093                     	;# 
  2591  0094                     	;# 
  2592  0095                     	;# 
  2593  0096                     	;# 
  2594  0097                     	;# 
  2595  0099                     	;# 
  2596  009A                     	;# 
  2597  009B                     	;# 
  2598  009B                     	;# 
  2599  009C                     	;# 
  2600  009D                     	;# 
  2601  009E                     	;# 
  2602  010C                     	;# 
  2603  010D                     	;# 
  2604  010E                     	;# 
  2605  010F                     	;# 
  2606  0110                     	;# 
  2607  0116                     	;# 
  2608  0117                     	;# 
  2609  011D                     	;# 
  2610  018C                     	;# 
  2611  018D                     	;# 
  2612  018F                     	;# 
  2613  0190                     	;# 
  2614  0191                     	;# 
  2615  0191                     	;# 
  2616  0192                     	;# 
  2617  0193                     	;# 
  2618  0193                     	;# 
  2619  0194                     	;# 
  2620  0195                     	;# 
  2621  0196                     	;# 
  2622  0197                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  0199                     	;# 
  2626  019A                     	;# 
  2627  019A                     	;# 
  2628  019A                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019B                     	;# 
  2634  019C                     	;# 
  2635  019C                     	;# 
  2636  019C                     	;# 
  2637  019D                     	;# 
  2638  019D                     	;# 
  2639  019D                     	;# 
  2640  019E                     	;# 
  2641  019E                     	;# 
  2642  019E                     	;# 
  2643  019F                     	;# 
  2644  019F                     	;# 
  2645  019F                     	;# 
  2646  020D                     	;# 
  2647  020F                     	;# 
  2648  0210                     	;# 
  2649  0211                     	;# 
  2650  0211                     	;# 
  2651  0212                     	;# 
  2652  0212                     	;# 
  2653  0213                     	;# 
  2654  0213                     	;# 
  2655  0214                     	;# 
  2656  0214                     	;# 
  2657  0215                     	;# 
  2658  0215                     	;# 
  2659  0215                     	;# 
  2660  0216                     	;# 
  2661  0216                     	;# 
  2662  0217                     	;# 
  2663  0217                     	;# 
  2664  0219                     	;# 
  2665  021A                     	;# 
  2666  021B                     	;# 
  2667  021C                     	;# 
  2668  021D                     	;# 
  2669  021E                     	;# 
  2670  021F                     	;# 
  2671  028C                     	;# 
  2672  028D                     	;# 
  2673  0291                     	;# 
  2674  0291                     	;# 
  2675  0292                     	;# 
  2676  0293                     	;# 
  2677  0298                     	;# 
  2678  0298                     	;# 
  2679  0299                     	;# 
  2680  029A                     	;# 
  2681  029D                     	;# 
  2682  029E                     	;# 
  2683  029F                     	;# 
  2684  030C                     	;# 
  2685  030D                     	;# 
  2686  0311                     	;# 
  2687  0311                     	;# 
  2688  0312                     	;# 
  2689  0313                     	;# 
  2690  0318                     	;# 
  2691  0318                     	;# 
  2692  0319                     	;# 
  2693  031A                     	;# 
  2694  031C                     	;# 
  2695  031C                     	;# 
  2696  031D                     	;# 
  2697  031E                     	;# 
  2698  038C                     	;# 
  2699  038D                     	;# 
  2700  0394                     	;# 
  2701  0395                     	;# 
  2702  0396                     	;# 
  2703  040C                     	;# 
  2704  040D                     	;# 
  2705  0411                     	;# 
  2706  0411                     	;# 
  2707  0412                     	;# 
  2708  0413                     	;# 
  2709  0414                     	;# 
  2710  0415                     	;# 
  2711  0416                     	;# 
  2712  0417                     	;# 
  2713  0418                     	;# 
  2714  0418                     	;# 
  2715  0419                     	;# 
  2716  041A                     	;# 
  2717  041B                     	;# 
  2718  041C                     	;# 
  2719  041D                     	;# 
  2720  041E                     	;# 
  2721  048D                     	;# 
  2722  0491                     	;# 
  2723  0491                     	;# 
  2724  0492                     	;# 
  2725  0492                     	;# 
  2726  0493                     	;# 
  2727  0493                     	;# 
  2728  0493                     	;# 
  2729  0494                     	;# 
  2730  0494                     	;# 
  2731  0495                     	;# 
  2732  0495                     	;# 
  2733  0496                     	;# 
  2734  0496                     	;# 
  2735  0497                     	;# 
  2736  0497                     	;# 
  2737  0595                     	;# 
  2738  0596                     	;# 
  2739  0597                     	;# 
  2740  059C                     	;# 
  2741  059D                     	;# 
  2742  059E                     	;# 
  2743  0611                     	;# 
  2744  0611                     	;# 
  2745  0612                     	;# 
  2746  0613                     	;# 
  2747  0614                     	;# 
  2748  0614                     	;# 
  2749  0615                     	;# 
  2750  0616                     	;# 
  2751  0617                     	;# 
  2752  0617                     	;# 
  2753  0618                     	;# 
  2754  0619                     	;# 
  2755  061A                     	;# 
  2756  061A                     	;# 
  2757  061B                     	;# 
  2758  061C                     	;# 
  2759  061D                     	;# 
  2760  061D                     	;# 
  2761  061E                     	;# 
  2762  061F                     	;# 
  2763  0FE4                     	;# 
  2764  0FE5                     	;# 
  2765  0FE6                     	;# 
  2766  0FE7                     	;# 
  2767  0FE8                     	;# 
  2768  0FE9                     	;# 
  2769  0FEA                     	;# 
  2770  0FEB                     	;# 
  2771  0FED                     	;# 
  2772  0FEE                     	;# 
  2773  0FEF                     	;# 
  2774  0000                     	;# 
  2775  0001                     	;# 
  2776  0002                     	;# 
  2777  0003                     	;# 
  2778  0004                     	;# 
  2779  0005                     	;# 
  2780  0006                     	;# 
  2781  0007                     	;# 
  2782  0008                     	;# 
  2783  0009                     	;# 
  2784  000A                     	;# 
  2785  000B                     	;# 
  2786  000C                     	;# 
  2787  000D                     	;# 
  2788  000E                     	;# 
  2789  000F                     	;# 
  2790  0010                     	;# 
  2791  0011                     	;# 
  2792  0012                     	;# 
  2793  0013                     	;# 
  2794  0014                     	;# 
  2795  0015                     	;# 
  2796  0016                     	;# 
  2797  0016                     	;# 
  2798  0017                     	;# 
  2799  0018                     	;# 
  2800  0019                     	;# 
  2801  001A                     	;# 
  2802  001B                     	;# 
  2803  001C                     	;# 
  2804  008C                     	;# 
  2805  008D                     	;# 
  2806  008E                     	;# 
  2807  008F                     	;# 
  2808  0090                     	;# 
  2809  0091                     	;# 
  2810  0092                     	;# 
  2811  0093                     	;# 
  2812  0094                     	;# 
  2813  0095                     	;# 
  2814  0096                     	;# 
  2815  0097                     	;# 
  2816  0099                     	;# 
  2817  009A                     	;# 
  2818  009B                     	;# 
  2819  009B                     	;# 
  2820  009C                     	;# 
  2821  009D                     	;# 
  2822  009E                     	;# 
  2823  010C                     	;# 
  2824  010D                     	;# 
  2825  010E                     	;# 
  2826  010F                     	;# 
  2827  0110                     	;# 
  2828  0116                     	;# 
  2829  0117                     	;# 
  2830  011D                     	;# 
  2831  018C                     	;# 
  2832  018D                     	;# 
  2833  018F                     	;# 
  2834  0190                     	;# 
  2835  0191                     	;# 
  2836  0191                     	;# 
  2837  0192                     	;# 
  2838  0193                     	;# 
  2839  0193                     	;# 
  2840  0194                     	;# 
  2841  0195                     	;# 
  2842  0196                     	;# 
  2843  0197                     	;# 
  2844  0199                     	;# 
  2845  0199                     	;# 
  2846  0199                     	;# 
  2847  019A                     	;# 
  2848  019A                     	;# 
  2849  019A                     	;# 
  2850  019B                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019C                     	;# 
  2856  019C                     	;# 
  2857  019C                     	;# 
  2858  019D                     	;# 
  2859  019D                     	;# 
  2860  019D                     	;# 
  2861  019E                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  020D                     	;# 
  2868  020F                     	;# 
  2869  0210                     	;# 
  2870  0211                     	;# 
  2871  0211                     	;# 
  2872  0212                     	;# 
  2873  0212                     	;# 
  2874  0213                     	;# 
  2875  0213                     	;# 
  2876  0214                     	;# 
  2877  0214                     	;# 
  2878  0215                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0216                     	;# 
  2882  0216                     	;# 
  2883  0217                     	;# 
  2884  0217                     	;# 
  2885  0219                     	;# 
  2886  021A                     	;# 
  2887  021B                     	;# 
  2888  021C                     	;# 
  2889  021D                     	;# 
  2890  021E                     	;# 
  2891  021F                     	;# 
  2892  028C                     	;# 
  2893  028D                     	;# 
  2894  0291                     	;# 
  2895  0291                     	;# 
  2896  0292                     	;# 
  2897  0293                     	;# 
  2898  0298                     	;# 
  2899  0298                     	;# 
  2900  0299                     	;# 
  2901  029A                     	;# 
  2902  029D                     	;# 
  2903  029E                     	;# 
  2904  029F                     	;# 
  2905  030C                     	;# 
  2906  030D                     	;# 
  2907  0311                     	;# 
  2908  0311                     	;# 
  2909  0312                     	;# 
  2910  0313                     	;# 
  2911  0318                     	;# 
  2912  0318                     	;# 
  2913  0319                     	;# 
  2914  031A                     	;# 
  2915  031C                     	;# 
  2916  031C                     	;# 
  2917  031D                     	;# 
  2918  031E                     	;# 
  2919  038C                     	;# 
  2920  038D                     	;# 
  2921  0394                     	;# 
  2922  0395                     	;# 
  2923  0396                     	;# 
  2924  040C                     	;# 
  2925  040D                     	;# 
  2926  0411                     	;# 
  2927  0411                     	;# 
  2928  0412                     	;# 
  2929  0413                     	;# 
  2930  0414                     	;# 
  2931  0415                     	;# 
  2932  0416                     	;# 
  2933  0417                     	;# 
  2934  0418                     	;# 
  2935  0418                     	;# 
  2936  0419                     	;# 
  2937  041A                     	;# 
  2938  041B                     	;# 
  2939  041C                     	;# 
  2940  041D                     	;# 
  2941  041E                     	;# 
  2942  048D                     	;# 
  2943  0491                     	;# 
  2944  0491                     	;# 
  2945  0492                     	;# 
  2946  0492                     	;# 
  2947  0493                     	;# 
  2948  0493                     	;# 
  2949  0493                     	;# 
  2950  0494                     	;# 
  2951  0494                     	;# 
  2952  0495                     	;# 
  2953  0495                     	;# 
  2954  0496                     	;# 
  2955  0496                     	;# 
  2956  0497                     	;# 
  2957  0497                     	;# 
  2958  0595                     	;# 
  2959  0596                     	;# 
  2960  0597                     	;# 
  2961  059C                     	;# 
  2962  059D                     	;# 
  2963  059E                     	;# 
  2964  0611                     	;# 
  2965  0611                     	;# 
  2966  0612                     	;# 
  2967  0613                     	;# 
  2968  0614                     	;# 
  2969  0614                     	;# 
  2970  0615                     	;# 
  2971  0616                     	;# 
  2972  0617                     	;# 
  2973  0617                     	;# 
  2974  0618                     	;# 
  2975  0619                     	;# 
  2976  061A                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061D                     	;# 
  2981  061D                     	;# 
  2982  061E                     	;# 
  2983  061F                     	;# 
  2984  0FE4                     	;# 
  2985  0FE5                     	;# 
  2986  0FE6                     	;# 
  2987  0FE7                     	;# 
  2988  0FE8                     	;# 
  2989  0FE9                     	;# 
  2990  0FEA                     	;# 
  2991  0FEB                     	;# 
  2992  0FED                     	;# 
  2993  0FEE                     	;# 
  2994  0FEF                     	;# 
  2995  0000                     	;# 
  2996  0001                     	;# 
  2997  0002                     	;# 
  2998  0003                     	;# 
  2999  0004                     	;# 
  3000  0005                     	;# 
  3001  0006                     	;# 
  3002  0007                     	;# 
  3003  0008                     	;# 
  3004  0009                     	;# 
  3005  000A                     	;# 
  3006  000B                     	;# 
  3007  000C                     	;# 
  3008  000D                     	;# 
  3009  000E                     	;# 
  3010  000F                     	;# 
  3011  0010                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  008C                     	;# 
  3026  008D                     	;# 
  3027  008E                     	;# 
  3028  008F                     	;# 
  3029  0090                     	;# 
  3030  0091                     	;# 
  3031  0092                     	;# 
  3032  0093                     	;# 
  3033  0094                     	;# 
  3034  0095                     	;# 
  3035  0096                     	;# 
  3036  0097                     	;# 
  3037  0099                     	;# 
  3038  009A                     	;# 
  3039  009B                     	;# 
  3040  009B                     	;# 
  3041  009C                     	;# 
  3042  009D                     	;# 
  3043  009E                     	;# 
  3044  010C                     	;# 
  3045  010D                     	;# 
  3046  010E                     	;# 
  3047  010F                     	;# 
  3048  0110                     	;# 
  3049  0116                     	;# 
  3050  0117                     	;# 
  3051  011D                     	;# 
  3052  018C                     	;# 
  3053  018D                     	;# 
  3054  018F                     	;# 
  3055  0190                     	;# 
  3056  0191                     	;# 
  3057  0191                     	;# 
  3058  0192                     	;# 
  3059  0193                     	;# 
  3060  0193                     	;# 
  3061  0194                     	;# 
  3062  0195                     	;# 
  3063  0196                     	;# 
  3064  0197                     	;# 
  3065  0199                     	;# 
  3066  0199                     	;# 
  3067  0199                     	;# 
  3068  019A                     	;# 
  3069  019A                     	;# 
  3070  019A                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019C                     	;# 
  3077  019C                     	;# 
  3078  019C                     	;# 
  3079  019D                     	;# 
  3080  019D                     	;# 
  3081  019D                     	;# 
  3082  019E                     	;# 
  3083  019E                     	;# 
  3084  019E                     	;# 
  3085  019F                     	;# 
  3086  019F                     	;# 
  3087  019F                     	;# 
  3088  020D                     	;# 
  3089  020F                     	;# 
  3090  0210                     	;# 
  3091  0211                     	;# 
  3092  0211                     	;# 
  3093  0212                     	;# 
  3094  0212                     	;# 
  3095  0213                     	;# 
  3096  0213                     	;# 
  3097  0214                     	;# 
  3098  0214                     	;# 
  3099  0215                     	;# 
  3100  0215                     	;# 
  3101  0215                     	;# 
  3102  0216                     	;# 
  3103  0216                     	;# 
  3104  0217                     	;# 
  3105  0217                     	;# 
  3106  0219                     	;# 
  3107  021A                     	;# 
  3108  021B                     	;# 
  3109  021C                     	;# 
  3110  021D                     	;# 
  3111  021E                     	;# 
  3112  021F                     	;# 
  3113  028C                     	;# 
  3114  028D                     	;# 
  3115  0291                     	;# 
  3116  0291                     	;# 
  3117  0292                     	;# 
  3118  0293                     	;# 
  3119  0298                     	;# 
  3120  0298                     	;# 
  3121  0299                     	;# 
  3122  029A                     	;# 
  3123  029D                     	;# 
  3124  029E                     	;# 
  3125  029F                     	;# 
  3126  030C                     	;# 
  3127  030D                     	;# 
  3128  0311                     	;# 
  3129  0311                     	;# 
  3130  0312                     	;# 
  3131  0313                     	;# 
  3132  0318                     	;# 
  3133  0318                     	;# 
  3134  0319                     	;# 
  3135  031A                     	;# 
  3136  031C                     	;# 
  3137  031C                     	;# 
  3138  031D                     	;# 
  3139  031E                     	;# 
  3140  038C                     	;# 
  3141  038D                     	;# 
  3142  0394                     	;# 
  3143  0395                     	;# 
  3144  0396                     	;# 
  3145  040C                     	;# 
  3146  040D                     	;# 
  3147  0411                     	;# 
  3148  0411                     	;# 
  3149  0412                     	;# 
  3150  0413                     	;# 
  3151  0414                     	;# 
  3152  0415                     	;# 
  3153  0416                     	;# 
  3154  0417                     	;# 
  3155  0418                     	;# 
  3156  0418                     	;# 
  3157  0419                     	;# 
  3158  041A                     	;# 
  3159  041B                     	;# 
  3160  041C                     	;# 
  3161  041D                     	;# 
  3162  041E                     	;# 
  3163  048D                     	;# 
  3164  0491                     	;# 
  3165  0491                     	;# 
  3166  0492                     	;# 
  3167  0492                     	;# 
  3168  0493                     	;# 
  3169  0493                     	;# 
  3170  0493                     	;# 
  3171  0494                     	;# 
  3172  0494                     	;# 
  3173  0495                     	;# 
  3174  0495                     	;# 
  3175  0496                     	;# 
  3176  0496                     	;# 
  3177  0497                     	;# 
  3178  0497                     	;# 
  3179  0595                     	;# 
  3180  0596                     	;# 
  3181  0597                     	;# 
  3182  059C                     	;# 
  3183  059D                     	;# 
  3184  059E                     	;# 
  3185  0611                     	;# 
  3186  0611                     	;# 
  3187  0612                     	;# 
  3188  0613                     	;# 
  3189  0614                     	;# 
  3190  0614                     	;# 
  3191  0615                     	;# 
  3192  0616                     	;# 
  3193  0617                     	;# 
  3194  0617                     	;# 
  3195  0618                     	;# 
  3196  0619                     	;# 
  3197  061A                     	;# 
  3198  061A                     	;# 
  3199  061B                     	;# 
  3200  061C                     	;# 
  3201  061D                     	;# 
  3202  061D                     	;# 
  3203  061E                     	;# 
  3204  061F                     	;# 
  3205  0FE4                     	;# 
  3206  0FE5                     	;# 
  3207  0FE6                     	;# 
  3208  0FE7                     	;# 
  3209  0FE8                     	;# 
  3210  0FE9                     	;# 
  3211  0FEA                     	;# 
  3212  0FEB                     	;# 
  3213  0FED                     	;# 
  3214  0FEE                     	;# 
  3215  0FEF                     	;# 
  3216  0000                     	;# 
  3217  0001                     	;# 
  3218  0002                     	;# 
  3219  0003                     	;# 
  3220  0004                     	;# 
  3221  0005                     	;# 
  3222  0006                     	;# 
  3223  0007                     	;# 
  3224  0008                     	;# 
  3225  0009                     	;# 
  3226  000A                     	;# 
  3227  000B                     	;# 
  3228  000C                     	;# 
  3229  000D                     	;# 
  3230  000E                     	;# 
  3231  000F                     	;# 
  3232  0010                     	;# 
  3233  0011                     	;# 
  3234  0012                     	;# 
  3235  0013                     	;# 
  3236  0014                     	;# 
  3237  0015                     	;# 
  3238  0016                     	;# 
  3239  0016                     	;# 
  3240  0017                     	;# 
  3241  0018                     	;# 
  3242  0019                     	;# 
  3243  001A                     	;# 
  3244  001B                     	;# 
  3245  001C                     	;# 
  3246  008C                     	;# 
  3247  008D                     	;# 
  3248  008E                     	;# 
  3249  008F                     	;# 
  3250  0090                     	;# 
  3251  0091                     	;# 
  3252  0092                     	;# 
  3253  0093                     	;# 
  3254  0094                     	;# 
  3255  0095                     	;# 
  3256  0096                     	;# 
  3257  0097                     	;# 
  3258  0099                     	;# 
  3259  009A                     	;# 
  3260  009B                     	;# 
  3261  009B                     	;# 
  3262  009C                     	;# 
  3263  009D                     	;# 
  3264  009E                     	;# 
  3265  010C                     	;# 
  3266  010D                     	;# 
  3267  010E                     	;# 
  3268  010F                     	;# 
  3269  0110                     	;# 
  3270  0116                     	;# 
  3271  0117                     	;# 
  3272  011D                     	;# 
  3273  018C                     	;# 
  3274  018D                     	;# 
  3275  018F                     	;# 
  3276  0190                     	;# 
  3277  0191                     	;# 
  3278  0191                     	;# 
  3279  0192                     	;# 
  3280  0193                     	;# 
  3281  0193                     	;# 
  3282  0194                     	;# 
  3283  0195                     	;# 
  3284  0196                     	;# 
  3285  0197                     	;# 
  3286  0199                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  019A                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019B                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019C                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019D                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019E                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019F                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  020D                     	;# 
  3310  020F                     	;# 
  3311  0210                     	;# 
  3312  0211                     	;# 
  3313  0211                     	;# 
  3314  0212                     	;# 
  3315  0212                     	;# 
  3316  0213                     	;# 
  3317  0213                     	;# 
  3318  0214                     	;# 
  3319  0214                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0216                     	;# 
  3324  0216                     	;# 
  3325  0217                     	;# 
  3326  0217                     	;# 
  3327  0219                     	;# 
  3328  021A                     	;# 
  3329  021B                     	;# 
  3330  021C                     	;# 
  3331  021D                     	;# 
  3332  021E                     	;# 
  3333  021F                     	;# 
  3334  028C                     	;# 
  3335  028D                     	;# 
  3336  0291                     	;# 
  3337  0291                     	;# 
  3338  0292                     	;# 
  3339  0293                     	;# 
  3340  0298                     	;# 
  3341  0298                     	;# 
  3342  0299                     	;# 
  3343  029A                     	;# 
  3344  029D                     	;# 
  3345  029E                     	;# 
  3346  029F                     	;# 
  3347  030C                     	;# 
  3348  030D                     	;# 
  3349  0311                     	;# 
  3350  0311                     	;# 
  3351  0312                     	;# 
  3352  0313                     	;# 
  3353  0318                     	;# 
  3354  0318                     	;# 
  3355  0319                     	;# 
  3356  031A                     	;# 
  3357  031C                     	;# 
  3358  031C                     	;# 
  3359  031D                     	;# 
  3360  031E                     	;# 
  3361  038C                     	;# 
  3362  038D                     	;# 
  3363  0394                     	;# 
  3364  0395                     	;# 
  3365  0396                     	;# 
  3366  040C                     	;# 
  3367  040D                     	;# 
  3368  0411                     	;# 
  3369  0411                     	;# 
  3370  0412                     	;# 
  3371  0413                     	;# 
  3372  0414                     	;# 
  3373  0415                     	;# 
  3374  0416                     	;# 
  3375  0417                     	;# 
  3376  0418                     	;# 
  3377  0418                     	;# 
  3378  0419                     	;# 
  3379  041A                     	;# 
  3380  041B                     	;# 
  3381  041C                     	;# 
  3382  041D                     	;# 
  3383  041E                     	;# 
  3384  048D                     	;# 
  3385  0491                     	;# 
  3386  0491                     	;# 
  3387  0492                     	;# 
  3388  0492                     	;# 
  3389  0493                     	;# 
  3390  0493                     	;# 
  3391  0493                     	;# 
  3392  0494                     	;# 
  3393  0494                     	;# 
  3394  0495                     	;# 
  3395  0495                     	;# 
  3396  0496                     	;# 
  3397  0496                     	;# 
  3398  0497                     	;# 
  3399  0497                     	;# 
  3400  0595                     	;# 
  3401  0596                     	;# 
  3402  0597                     	;# 
  3403  059C                     	;# 
  3404  059D                     	;# 
  3405  059E                     	;# 
  3406  0611                     	;# 
  3407  0611                     	;# 
  3408  0612                     	;# 
  3409  0613                     	;# 
  3410  0614                     	;# 
  3411  0614                     	;# 
  3412  0615                     	;# 
  3413  0616                     	;# 
  3414  0617                     	;# 
  3415  0617                     	;# 
  3416  0618                     	;# 
  3417  0619                     	;# 
  3418  061A                     	;# 
  3419  061A                     	;# 
  3420  061B                     	;# 
  3421  061C                     	;# 
  3422  061D                     	;# 
  3423  061D                     	;# 
  3424  061E                     	;# 
  3425  061F                     	;# 
  3426  0FE4                     	;# 
  3427  0FE5                     	;# 
  3428  0FE6                     	;# 
  3429  0FE7                     	;# 
  3430  0FE8                     	;# 
  3431  0FE9                     	;# 
  3432  0FEA                     	;# 
  3433  0FEB                     	;# 
  3434  0FED                     	;# 
  3435  0FEE                     	;# 
  3436  0FEF                     	;_modArray
  3437                           
  3438                           	psect	idataBANK0
  3439  2001                     __pidataBANK0:	
  3440                           
  3441                           ;initializer for _delay_time
  3442  2001  34D0               	retlw	208
  3443  2002  3407               	retlw	7
  3444  2003  3400               	retlw	0
  3445  2004  3400               	retlw	0
  3446                           
  3447                           ;initializer for _bottom_push_state
  3448  2005  3401               	retlw	1
  3449  2006  3400               	retlw	0
  3450                           
  3451                           ;initializer for _long_press_limit
  3452  2007  34E8               	retlw	232
  3453  2008  3403               	retlw	3
  3454                           
  3455                           ;initializer for _top_push_state
  3456  2009  3406               	retlw	6
  3457  200A  3400               	retlw	0
  3458                           
  3459                           ;initializer for _blink_rate
  3460  200B  3414               	retlw	20
  3461                           
  3462                           ;initializer for _longTap_state
  3463  200C  34FF               	retlw	255
  3464                           
  3465                           ;initializer for _num_taps
  3466  200D  3404               	retlw	4
  3467                           
  3468                           ;initializer for _switchBypass_state
  3469  200E  34FF               	retlw	255
  3470                           
  3471                           	psect	idataBANK2
  3472  0003                     __pidataBANK2:	
  3473                           
  3474                           ;initializer for _presetChannel
  3475  0003  3401               	retlw	1
  3476                           
  3477                           	psect	idataBANK3
  3478  2EC2                     __pidataBANK3:	
  3479                           
  3480                           ;initializer for _baseline_mod_time
  3481  2EC2  34D0               	retlw	208
  3482  2EC3  3407               	retlw	7
  3483  2EC4  3400               	retlw	0
  3484  2EC5  3400               	retlw	0
  3485                           
  3486                           ;initializer for _blink_delay
  3487  2EC6  3464               	retlw	100
  3488  2EC7  3400               	retlw	0
  3489                           
  3490                           ;initializer for _knob1_prev
  3491  2EC8  34D0               	retlw	208
  3492  2EC9  3407               	retlw	7
  3493                           
  3494                           ;initializer for _knob2_prev
  3495  2ECA  34D0               	retlw	208
  3496  2ECB  3407               	retlw	7
  3497                           
  3498                           ;initializer for _knob3_prev
  3499  2ECC  34D0               	retlw	208
  3500  2ECD  3407               	retlw	7
  3501                           
  3502                           ;initializer for _knob4_prev
  3503  2ECE  34D0               	retlw	208
  3504  2ECF  3407               	retlw	7
  3505                           
  3506                           ;initializer for _knob5_prev
  3507  2ED0  34D0               	retlw	208
  3508  2ED1  3407               	retlw	7
  3509                           
  3510                           ;initializer for _mod_counter
  3511  2ED2  3401               	retlw	1
  3512  2ED3  3400               	retlw	0
  3513                           
  3514                           ;initializer for _mod_delay_time
  3515  2ED4  34D0               	retlw	208
  3516  2ED5  3407               	retlw	7
  3517                           
  3518                           ;initializer for _symmetry
  3519  2ED6  34B4               	retlw	180
  3520  2ED7  3400               	retlw	0
  3521                           
  3522                           ;initializer for _tap_iteration
  3523  2ED8  3401               	retlw	1
  3524  2ED9  3400               	retlw	0
  3525                           
  3526                           ;initializer for _blink_state
  3527  2EDA  3401               	retlw	1
  3528                           
  3529                           ;initializer for _currentBypassState
  3530  2EDB  34FF               	retlw	255
  3531                           
  3532                           ;initializer for _expSwitchState
  3533  2EDC  34FF               	retlw	255
  3534                           
  3535                           ;initializer for _expressModeCnst
  3536  2EDD  3402               	retlw	2
  3537                           
  3538                           ;initializer for _expressionChannel
  3539  2EDE  3401               	retlw	1
  3540                           
  3541                           ;initializer for _mod_time_changed
  3542  2EDF  3401               	retlw	1
  3543                           
  3544                           ;initializer for _presetModeCnst
  3545  2EE0  3401               	retlw	1
  3546                           
  3547                           ;initializer for _switchTap_state
  3548  2EE1  34FF               	retlw	255
  3549                           
  3550                           	psect	idataBANK4
  3551  07FE                     __pidataBANK4:	
  3552                           
  3553                           ;initializer for _switchBypass_up
  3554  07FE  3401               	retlw	1
  3555  07FF  3400               	retlw	0
  3556                           
  3557                           	psect	stringtext
  3558  2800                     __pstringtext:	
  3559  2800                     exp@coeff:	
  3560  2800  3400               	retlw	0
  3561  2801  3480               	retlw	128
  3562  2802  343F               	retlw	63
  3563  2803  3472               	retlw	114
  3564  2804  3431               	retlw	49
  3565  2805  343F               	retlw	63
  3566  2806  34FE               	retlw	254
  3567  2807  3475               	retlw	117
  3568  2808  343E               	retlw	62
  3569  2809  3458               	retlw	88
  3570  280A  3463               	retlw	99
  3571  280B  343D               	retlw	61
  3572  280C  3495               	retlw	149
  3573  280D  341D               	retlw	29
  3574  280E  343C               	retlw	60
  3575  280F  34C5               	retlw	197
  3576  2810  34AE               	retlw	174
  3577  2811  343A               	retlw	58
  3578  2812  3479               	retlw	121
  3579  2813  3421               	retlw	33
  3580  2814  3439               	retlw	57
  3581  2815  3494               	retlw	148
  3582  2816  3480               	retlw	128
  3583  2817  3437               	retlw	55
  3584  2818  3493               	retlw	147
  3585  2819  34A7               	retlw	167
  3586  281A  3435               	retlw	53
  3587  281B  3456               	retlw	86
  3588  281C  3415               	retlw	21
  3589  281D  3434               	retlw	52
  3590  281E                     __end_ofexp@coeff:	
  3591  281E                     log@coeff:	
  3592  281E  3400               	retlw	0
  3593  281F  3400               	retlw	0
  3594  2820  3400               	retlw	0
  3595  2821  3400               	retlw	0
  3596  2822  3480               	retlw	128
  3597  2823  343F               	retlw	63
  3598  2824  34F0               	retlw	240
  3599  2825  34FF               	retlw	255
  3600  2826  34BE               	retlw	190
  3601  2827  34E2               	retlw	226
  3602  2828  34A9               	retlw	169
  3603  2829  343E               	retlw	62
  3604  282A  3483               	retlw	131
  3605  282B  3476               	retlw	118
  3606  282C  34BE               	retlw	190
  3607  282D  34AE               	retlw	174
  3608  282E  342B               	retlw	43
  3609  282F  343E               	retlw	62
  3610  2830  343C               	retlw	60
  3611  2831  34C3               	retlw	195
  3612  2832  34BD               	retlw	189
  3613  2833  34D2               	retlw	210
  3614  2834  3413               	retlw	19
  3615  2835  343D               	retlw	61
  3616  2836  3478               	retlw	120
  3617  2837  34D3               	retlw	211
  3618  2838  34BB               	retlw	187
  3619  2839                     __end_oflog@coeff:	
  3620  2839                     sin@coeff_a:	
  3621  2839  34F4               	retlw	244
  3622  283A  344A               	retlw	74
  3623  283B  3448               	retlw	72
  3624  283C  3495               	retlw	149
  3625  283D  3495               	retlw	149
  3626  283E  34C7               	retlw	199
  3627  283F  34C1               	retlw	193
  3628  2840  34DC               	retlw	220
  3629  2841  3445               	retlw	69
  3630  2842  34DC               	retlw	220
  3631  2843  346D               	retlw	109
  3632  2844  34C3               	retlw	195
  3633  2845  34B3               	retlw	179
  3634  2846  3433               	retlw	51
  3635  2847  3440               	retlw	64
  3636  2848                     __end_ofsin@coeff_a:	
  3637  2848                     sin@coeff_b:	
  3638  2848  3434               	retlw	52
  3639  2849  3401               	retlw	1
  3640  284A  3448               	retlw	72
  3641  284B  349D               	retlw	157
  3642  284C  34B0               	retlw	176
  3643  284D  3445               	retlw	69
  3644  284E  3400               	retlw	0
  3645  284F  34DA               	retlw	218
  3646  2850  3442               	retlw	66
  3647  2851  3400               	retlw	0
  3648  2852  3480               	retlw	128
  3649  2853  343F               	retlw	63
  3650  2854                     __end_ofsin@coeff_b:	
  3651  000B                     _INTCONbits	set	11
  3652  0011                     _PIR1bits	set	17
  3653  000C                     _PORTAbits	set	12
  3654  000E                     _PORTCbits	set	14
  3655  000F                     _PORTDbits	set	15
  3656  0010                     _PORTEbits	set	16
  3657  001B                     _PR2	set	27
  3658  001C                     _T2CONbits	set	28
  3659  005F                     _GIE	set	95
  3660  005E                     _PEIE	set	94
  3661  0069                     _RB1	set	105
  3662  009D                     _ADCON0bits	set	157
  3663  009E                     _ADCON1bits	set	158
  3664  009C                     _ADRESH	set	156
  3665  009B                     _ADRESL	set	155
  3666  0095                     _OPTION_REGbits	set	149
  3667  0099                     _OSCCONbits	set	153
  3668  008D                     _TRISBbits	set	141
  3669  008E                     _TRISCbits	set	142
  3670  008F                     _TRISDbits	set	143
  3671  0090                     _TRISEbits	set	144
  3672  048D                     _RCIE	set	1165
  3673  011D                     _APFCONbits	set	285
  3674  010D                     _LATBbits	set	269
  3675  010F                     _LATDbits	set	271
  3676  0190                     _ANSELEbits	set	400
  3677  0192                     _PMADRH	set	402
  3678  0191                     _PMADRL	set	401
  3679  0195                     _PMCON1bits	set	405
  3680  0196                     _PMCON2	set	406
  3681  0194                     _PMDATH	set	404
  3682  0193                     _PMDATL	set	403
  3683  0199                     _RCREG	set	409
  3684  019D                     _RCSTAbits	set	413
  3685  019B                     _SPBRG	set	411
  3686  019A                     _TXREG	set	410
  3687  019E                     _TXSTAbits	set	414
  3688  0291                     _CCPR1	set	657
  3689  0298                     _CCPR2	set	664
  3690  0293                     _CCP1CONbits	set	659
  3691  029A                     _CCP2CONbits	set	666
  3692  029D                     _CCPTMRS0	set	669
  3693  029E                     _CCPTMRS1	set	670
  3694  029F                     _CCPTMRS2	set	671
  3695  0311                     _CCPR3	set	785
  3696  0318                     _CCPR4	set	792
  3697  031C                     _CCPR5	set	796
  3698  0313                     _CCP3CONbits	set	787
  3699  031A                     _CCP4CONbits	set	794
  3700  031E                     _CCP5CONbits	set	798
  3701  030C                     _TRISFbits	set	780
  3702  030D                     _TRISGbits	set	781
  3703  038C                     _LATFbits	set	908
  3704  038D                     _LATGbits	set	909
  3705  040C                     _ANSELFbits	set	1036
  3706  061F                     _CCP10CONbits	set	1567
  3707  0613                     _CCP6CONbits	set	1555
  3708  0616                     _CCP7CONbits	set	1558
  3709  0619                     _CCP8CONbits	set	1561
  3710  061C                     _CCP9CONbits	set	1564
  3711                           
  3712                           ; #config settings
  3713  0000                     
  3714                           	psect	cinit
  3715  02DF                     start_initialization:	
  3716  02DF                     __initialization:		;BIGRAM
  3717                           
  3718                           ; Clear objects allocated to BIGRAM
  3719  02DF  308A               	movlw	low (0+9098)
  3720  02E0  0084               	movwf	4
  3721  02E1  3023               	movlw	high (0+9098)
  3722  02E2  0085               	movwf	5
  3723  02E3  3066               	movlw	102
  3724  02E4  00FE               	movwf	btemp
  3725  02E5  3002               	movlw	2
  3726  02E6  00FF               	movwf	btemp+1
  3727  02E7  31AD  25CF  3182   	fcall	clear_ram0
  3728                           
  3729                           ; Clear objects allocated to BANK0
  3730  02EA  3040               	movlw	low __pbssBANK0
  3731  02EB  0084               	movwf	4
  3732  02EC  3000               	movlw	high __pbssBANK0
  3733  02ED  0085               	movwf	5
  3734  02EE  3012               	movlw	18
  3735  02EF  00FE               	movwf	btemp
  3736  02F0  3000               	movlw	0
  3737  02F1  00FF               	movwf	btemp+1
  3738  02F2  31AD  25CF  3182   	fcall	clear_ram0
  3739                           
  3740                           ; Clear objects allocated to BANK2
  3741  02F5  0022               	movlb	2	; select bank2
  3742  02F6  01EA               	clrf	__pbssBANK2& (0+127)
  3743  02F7  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3744  02F8  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3745  02F9  01ED               	clrf	(__pbssBANK2+3)& (0+127)
  3746  02FA  01EE               	clrf	(__pbssBANK2+4)& (0+127)
  3747                           
  3748                           ; Clear objects allocated to BANK3
  3749  02FB  30A0               	movlw	low __pbssBANK3
  3750  02FC  0084               	movwf	4
  3751  02FD  3001               	movlw	high __pbssBANK3
  3752  02FE  0085               	movwf	5
  3753  02FF  3027               	movlw	39
  3754  0300  00FE               	movwf	btemp
  3755  0301  3000               	movlw	0
  3756  0302  00FF               	movwf	btemp+1
  3757  0303  31AD  25CF  3182   	fcall	clear_ram0
  3758                           
  3759                           ; Clear objects allocated to BANK4
  3760  0306  3020               	movlw	low __pbssBANK4
  3761  0307  0084               	movwf	4
  3762  0308  3002               	movlw	high __pbssBANK4
  3763  0309  0085               	movwf	5
  3764  030A  3035               	movlw	53
  3765  030B  00FE               	movwf	btemp
  3766  030C  3000               	movlw	0
  3767  030D  00FF               	movwf	btemp+1
  3768  030E  31AD  25CF  3182   	fcall	clear_ram0
  3769                           
  3770                           ; Clear objects allocated to BANK5
  3771  0311  30A0               	movlw	low __pbssBANK5
  3772  0312  0084               	movwf	4
  3773  0313  3002               	movlw	high __pbssBANK5
  3774  0314  0085               	movwf	5
  3775  0315  302C               	movlw	44
  3776  0316  00FE               	movwf	btemp
  3777  0317  3000               	movlw	0
  3778  0318  00FF               	movwf	btemp+1
  3779  0319  31AD  25CF  3182   	fcall	clear_ram0
  3780                           
  3781                           ; Clear objects allocated to BANK6
  3782  031C  3020               	movlw	low __pbssBANK6
  3783  031D  0084               	movwf	4
  3784  031E  3003               	movlw	high __pbssBANK6
  3785  031F  0085               	movwf	5
  3786  0320  3040               	movlw	64
  3787  0321  00FE               	movwf	btemp
  3788  0322  3000               	movlw	0
  3789  0323  00FF               	movwf	btemp+1
  3790  0324  31AD  25CF  3182   	fcall	clear_ram0
  3791                           
  3792                           ; Clear objects allocated to BANK7
  3793  0327  30A0               	movlw	low __pbssBANK7
  3794  0328  0084               	movwf	4
  3795  0329  3003               	movlw	high __pbssBANK7
  3796  032A  0085               	movwf	5
  3797  032B  3040               	movlw	64
  3798  032C  00FE               	movwf	btemp
  3799  032D  3000               	movlw	0
  3800  032E  00FF               	movwf	btemp+1
  3801  032F  31AD  25CF  3182   	fcall	clear_ram0
  3802                           
  3803                           ; Initialize objects allocated to BANK0
  3804  0332  3001               	movlw	low __pidataBANK0
  3805  0333  0084               	movwf	4
  3806  0334  30A0               	movlw	(high __pidataBANK0)| (0+128)
  3807  0335  0085               	movwf	5
  3808  0336  3052               	movlw	low __pdataBANK0
  3809  0337  0086               	movwf	6
  3810  0338  3000               	movlw	high __pdataBANK0
  3811  0339  0087               	movwf	7
  3812  033A  3000               	movlw	0
  3813  033B  00FF               	movwf	btemp+1
  3814  033C  300E               	movlw	14
  3815  033D  31AD  25C3  3182   	fcall	init_ram
  3816                           
  3817                           ; Initialize objects allocated to BANK2
  3818  0340  3180  2003  3182   	fcall	__pidataBANK2	;fetch initializer
  3819  0343  00EF               	movwf	__pdataBANK2& (0+127)
  3820                           
  3821                           ; Initialize objects allocated to BANK3
  3822  0344  30C2               	movlw	low __pidataBANK3
  3823  0345  0084               	movwf	4
  3824  0346  30AE               	movlw	(high __pidataBANK3)| (0+128)
  3825  0347  0085               	movwf	5
  3826  0348  30C7               	movlw	low __pdataBANK3
  3827  0349  0086               	movwf	6
  3828  034A  3001               	movlw	high __pdataBANK3
  3829  034B  0087               	movwf	7
  3830  034C  3000               	movlw	0
  3831  034D  00FF               	movwf	btemp+1
  3832  034E  3020               	movlw	32
  3833  034F  31AD  25C3  3182   	fcall	init_ram
  3834                           
  3835                           ; Initialize objects allocated to BANK4
  3836  0352  0024               	movlb	4	; select bank4
  3837  0353  3187  27FE  3182   	fcall	__pidataBANK4	;fetch initializer
  3838  0356  00E3               	movwf	__pdataBANK4& (0+127)
  3839  0357  3187  27FF         	fcall	__pidataBANK4+1	;fetch initializer
  3840  0359  00E4               	movwf	(__pdataBANK4+1)& (0+127)
  3841  035A                     end_of_initialization:	
  3842                           ;End of C runtime variable initialization code
  3843                           
  3844  035A                     __end_of__initialization:	
  3845  035A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3846  035B  0020               	movlb	0
  3847  035C  3183  2B5E         	ljmp	_main	;jump to C main() function
  3848                           
  3849                           	psect	bssBANK0
  3850  0040                     __pbssBANK0:	
  3851  0040                     _sub_timer:	
  3852  0040                     	ds	4
  3853  0044                     _tap_timer:	
  3854  0044                     	ds	4
  3855  0048                     _timer:	
  3856  0048                     	ds	4
  3857  004C                     _UQEnd:	
  3858  004C                     	ds	1
  3859  004D                     _UQFront:	
  3860  004D                     	ds	1
  3861  004E                     _doubleTap_state:	
  3862  004E                     	ds	1
  3863  004F                     _longBypass_state:	
  3864  004F                     	ds	1
  3865  0050                     _mode2_state:	
  3866  0050                     	ds	1
  3867  0051                     _presetSaveMode:	
  3868  0051                     	ds	1
  3869                           
  3870                           	psect	dataBANK0
  3871  0052                     __pdataBANK0:	
  3872  0052                     _delay_time:	
  3873  0052                     	ds	4
  3874  0056                     _bottom_push_state:	
  3875  0056                     	ds	2
  3876  0058                     _long_press_limit:	
  3877  0058                     	ds	2
  3878  005A                     _top_push_state:	
  3879  005A                     	ds	2
  3880  005C                     _blink_rate:	
  3881  005C                     	ds	1
  3882  005D                     _longTap_state:	
  3883  005D                     	ds	1
  3884  005E                     _num_taps:	
  3885  005E                     	ds	1
  3886  005F                     _switchBypass_state:	
  3887  005F                     	ds	1
  3888                           
  3889                           	psect	bssBANK2
  3890  016A                     __pbssBANK2:	
  3891  016A                     _longBypass_start:	
  3892  016A                     	ds	1
  3893  016B                     _longTap_start:	
  3894  016B                     	ds	1
  3895  016C                     _preset_blink:	
  3896  016C                     	ds	1
  3897  016D                     _suspend_blink:	
  3898  016D                     	ds	1
  3899  016E                     _switchTap_pressed:	
  3900  016E                     	ds	1
  3901                           
  3902                           	psect	dataBANK2
  3903  016F                     __pdataBANK2:	
  3904  016F                     _presetChannel:	
  3905  016F                     	ds	1
  3906                           
  3907                           	psect	bssBANK3
  3908  01A0                     __pbssBANK3:	
  3909  01A0                     _double_timer:	
  3910  01A0                     	ds	4
  3911  01A4                     _mod_timer:	
  3912  01A4                     	ds	4
  3913  01A8                     _knob_1_pos:	
  3914  01A8                     	ds	2
  3915  01AA                     _knob_2_pos:	
  3916  01AA                     	ds	2
  3917  01AC                     _knob_3_pos:	
  3918  01AC                     	ds	2
  3919  01AE                     _knob_4_pos:	
  3920  01AE                     	ds	2
  3921  01B0                     _knob_5_pos:	
  3922  01B0                     	ds	2
  3923  01B2                     _longBypass_timer:	
  3924  01B2                     	ds	2
  3925  01B4                     _longTap_timer:	
  3926  01B4                     	ds	2
  3927  01B6                     _switchBypass_pressed:	
  3928  01B6                     	ds	2
  3929  01B8                     _tmpModDelay:	
  3930  01B8                     	ds	2
  3931  01BA                     _adjust_mod_delay:	
  3932  01BA                     	ds	1
  3933  01BB                     _bottomTactile_pressed:	
  3934  01BB                     	ds	1
  3935  01BC                     _bypass_turning_on:	
  3936  01BC                     	ds	1
  3937  01BD                     _iCnt:	
  3938  01BD                     	ds	1
  3939  01BE                     _isInitialized:	
  3940  01BE                     	ds	1
  3941  01BF                     _longBypass_down:	
  3942  01BF                     	ds	1
  3943  01C0                     _longBypass_save:	
  3944  01C0                     	ds	1
  3945  01C1                     _mode1_state:	
  3946  01C1                     	ds	1
  3947  01C2                     _modulation_changed:	
  3948  01C2                     	ds	1
  3949  01C3                     _preset_programmning_on:	
  3950  01C3                     	ds	1
  3951  01C4                     _reset_sub_delay:	
  3952  01C4                     	ds	1
  3953  01C5                     _switchTap_down:	
  3954  01C5                     	ds	1
  3955  01C6                     _topTactile_pressed:	
  3956  01C6                     	ds	1
  3957                           
  3958                           	psect	dataBANK3
  3959  01C7                     __pdataBANK3:	
  3960  01C7                     _baseline_mod_time:	
  3961  01C7                     	ds	4
  3962  01CB                     _blink_delay:	
  3963  01CB                     	ds	2
  3964  01CD                     _knob1_prev:	
  3965  01CD                     	ds	2
  3966  01CF                     _knob2_prev:	
  3967  01CF                     	ds	2
  3968  01D1                     _knob3_prev:	
  3969  01D1                     	ds	2
  3970  01D3                     _knob4_prev:	
  3971  01D3                     	ds	2
  3972  01D5                     _knob5_prev:	
  3973  01D5                     	ds	2
  3974  01D7                     _mod_counter:	
  3975  01D7                     	ds	2
  3976  01D9                     _mod_delay_time:	
  3977  01D9                     	ds	2
  3978  01DB                     _symmetry:	
  3979  01DB                     	ds	2
  3980  01DD                     _tap_iteration:	
  3981  01DD                     	ds	2
  3982  01DF                     _blink_state:	
  3983  01DF                     	ds	1
  3984  01E0                     _currentBypassState:	
  3985  01E0                     	ds	1
  3986  01E1                     _expSwitchState:	
  3987  01E1                     	ds	1
  3988  01E2                     _expressModeCnst:	
  3989  01E2                     	ds	1
  3990  01E3                     _expressionChannel:	
  3991  01E3                     	ds	1
  3992  01E4                     _mod_time_changed:	
  3993  01E4                     	ds	1
  3994  01E5                     _presetModeCnst:	
  3995  01E5                     	ds	1
  3996  01E6                     _switchTap_state:	
  3997  01E6                     	ds	1
  3998                           
  3999                           	psect	bssBANK4
  4000  0220                     __pbssBANK4:	
  4001  0220                     _tap_history:	
  4002  0220                     	ds	20
  4003  0234                     USARTWriteInt@F3536:	
  4004  0234                     	ds	5
  4005  0239                     _ledState:	
  4006  0239                     	ds	4
  4007  023D                     _tap_total:	
  4008  023D                     	ds	4
  4009  0241                     _adjusted_pot_value:	
  4010  0241                     	ds	2
  4011  0243                     _debounce_bypass:	
  4012  0243                     	ds	2
  4013  0245                     _debounce_count:	
  4014  0245                     	ds	2
  4015  0247                     _debounce_mode1:	
  4016  0247                     	ds	2
  4017  0249                     _debounce_mode2:	
  4018  0249                     	ds	2
  4019  024B                     _delayfound:	
  4020  024B                     	ds	2
  4021  024D                     _errno:	
  4022  024D                     	ds	2
  4023  024F                     _mod_value:	
  4024  024F                     	ds	2
  4025  0251                     _switchBypass_toggle:	
  4026  0251                     	ds	2
  4027  0253                     _tmpVal:	
  4028  0253                     	ds	2
  4029                           
  4030                           	psect	dataBANK4
  4031  0263                     __pdataBANK4:	
  4032  0263                     _switchBypass_up:	
  4033  0263                     	ds	2
  4034                           
  4035                           	psect	bssBANK5
  4036  02A0                     __pbssBANK5:	
  4037  02A0                     _tap:	
  4038  02A0                     	ds	44
  4039                           
  4040                           	psect	bssBANK6
  4041  0320                     __pbssBANK6:	
  4042  0320                     _URBuff:	
  4043  0320                     	ds	64
  4044                           
  4045                           	psect	bssBANK7
  4046  03A0                     __pbssBANK7:	
  4047  03A0                     _myBuf:	
  4048  03A0                     	ds	64
  4049                           
  4050                           	psect	clrtext
  4051  2DCF                     clear_ram0:	
  4052                           ;	Called with FSR0 containing the base address, and
  4053                           ;	btemp/btemp+1 has the size to clear
  4054                           
  4055  2DCF  0064               	clrwdt	;clear the watchdog before getting into this loop
  4056  2DD0                     clrloop0:	
  4057  2DD0  0180               	clrf	0	;clear RAM location pointed to by FSR
  4058  2DD1  3101               	addfsr 0,1
  4059  2DD2  3001               	movlw	1
  4060  2DD3  02FE               	subwf	126,f
  4061  2DD4  3000               	movlw	0
  4062  2DD5  3BFF               	subwfb	127,f
  4063  2DD6  087F               	movf	127,w
  4064  2DD7  047E               	iorwf	126,w
  4065  2DD8  1903               	btfsc	3,2
  4066  2DD9  3400               	retlw	0	;all done for this memory range, return
  4067  2DDA  2DD0               	goto	clrloop0	;have we reached the end yet?
  4068                           
  4069                           	psect	inittext
  4070  2DC3                     init_ram:	
  4071  2DC3  00FE               	movwf	126
  4072  2DC4                     initloop:	
  4073  2DC4  0012               	moviw fsr0++
  4074  2DC5  001E               	movwi fsr1++
  4075  2DC6  3001               	movlw	1
  4076  2DC7  02FE               	subwf	126,f
  4077  2DC8  3000               	movlw	0
  4078  2DC9  3BFF               	subwfb	127,f
  4079  2DCA  087F               	movf	127,w
  4080  2DCB  047E               	iorwf	126,w
  4081  2DCC  1903               	btfsc	3,2
  4082  2DCD  3400               	retlw	0
  4083  2DCE  2DC4               	goto	initloop
  4084                           
  4085                           	psect	cstackBANK4
  4086  0255                     __pcstackBANK4:	
  4087  0255                     ??_main:	
  4088                           
  4089                           ; 1 bytes @ 0x0
  4090  0255                     	ds	5
  4091  025A                     _main$2841:	
  4092                           
  4093                           ; 3 bytes @ 0x5
  4094  025A                     	ds	3
  4095  025D                     _main$2842:	
  4096                           
  4097                           ; 3 bytes @ 0x8
  4098  025D                     	ds	3
  4099  0260                     _main$2843:	
  4100                           
  4101                           ; 3 bytes @ 0xB
  4102  0260                     	ds	3
  4103                           
  4104                           	psect	cstackBANK3
  4105  01E7                     __pcstackBANK3:	
  4106  01E7                     scaleA100kPot@pwm:	
  4107  01E7                     scaleA10kPot@pwm:	
  4108                           ; 3 bytes @ 0x0
  4109                           
  4110  01E7                     scaleiA10kPot@pwm:	
  4111                           ; 3 bytes @ 0x0
  4112                           
  4113                           
  4114                           ; 3 bytes @ 0x0
  4115  01E7                     	ds	3
  4116  01EA                     _scaleA100kPot$2846:	
  4117  01EA                     _scaleA10kPot$2850:	
  4118                           ; 3 bytes @ 0x3
  4119                           
  4120  01EA                     _scaleiA10kPot$2852:	
  4121                           ; 3 bytes @ 0x3
  4122                           
  4123                           
  4124                           ; 3 bytes @ 0x3
  4125  01EA                     	ds	3
  4126  01ED                     _scaleA100kPot$2847:	
  4127  01ED                     _scaleA10kPot$2851:	
  4128                           ; 3 bytes @ 0x6
  4129                           
  4130  01ED                     _scaleiA10kPot$2853:	
  4131                           ; 3 bytes @ 0x6
  4132                           
  4133                           
  4134                           ; 3 bytes @ 0x6
  4135  01ED                     	ds	3
  4136                           
  4137                           	psect	cstackBANK2
  4138  0120                     __pcstackBANK2:	
  4139  0120                     ?___fttol:	
  4140  0120                     ___fttol@f1:	
  4141                           ; 4 bytes @ 0x0
  4142                           
  4143                           
  4144                           ; 3 bytes @ 0x0
  4145  0120                     	ds	4
  4146  0124                     ??___fttol:	
  4147                           
  4148                           ; 1 bytes @ 0x4
  4149  0124                     	ds	4
  4150  0128                     ___fttol@sign1:	
  4151                           
  4152                           ; 1 bytes @ 0x8
  4153  0128                     	ds	1
  4154  0129                     ___fttol@lval:	
  4155                           
  4156                           ; 4 bytes @ 0x9
  4157  0129                     	ds	4
  4158  012D                     ___fttol@exp1:	
  4159                           
  4160                           ; 1 bytes @ 0xD
  4161  012D                     	ds	1
  4162  012E                     ?_set_subdivision:	
  4163  012E                     ?_modTri:	
  4164                           ; 2 bytes @ 0xE
  4165                           
  4166  012E                     ?_modSaw:	
  4167                           ; 2 bytes @ 0xE
  4168                           
  4169  012E                     ?___wmul:	
  4170                           ; 2 bytes @ 0xE
  4171                           
  4172  012E                     ?_floor:	
  4173                           ; 2 bytes @ 0xE
  4174                           
  4175  012E                     set_subdivision@x:	
  4176                           ; 3 bytes @ 0xE
  4177                           
  4178  012E                     getModulationDelayTime@subDiv:	
  4179                           ; 2 bytes @ 0xE
  4180                           
  4181  012E                     ___wmul@multiplier:	
  4182                           ; 2 bytes @ 0xE
  4183                           
  4184  012E                     modTri@angle:	
  4185                           ; 2 bytes @ 0xE
  4186                           
  4187  012E                     modSaw@angle:	
  4188                           ; 3 bytes @ 0xE
  4189                           
  4190  012E                     floor@x:	
  4191                           ; 3 bytes @ 0xE
  4192                           
  4193                           
  4194                           ; 3 bytes @ 0xE
  4195  012E                     	ds	2
  4196  0130                     set_subdivision@y:	
  4197  0130                     ___wmul@multiplicand:	
  4198                           ; 2 bytes @ 0x10
  4199                           
  4200                           
  4201                           ; 2 bytes @ 0x10
  4202  0130                     	ds	1
  4203  0131                     ??_floor:	
  4204  0131                     modTri@inflection:	
  4205                           ; 1 bytes @ 0x11
  4206                           
  4207  0131                     modSaw@inflection:	
  4208                           ; 3 bytes @ 0x11
  4209                           
  4210                           
  4211                           ; 3 bytes @ 0x11
  4212  0131                     	ds	1
  4213  0132                     ___wmul@product:	
  4214  0132                     set_subdivision@scalar:	
  4215                           ; 2 bytes @ 0x12
  4216                           
  4217  0132                     floor@i:	
  4218                           ; 3 bytes @ 0x12
  4219                           
  4220                           
  4221                           ; 3 bytes @ 0x12
  4222  0132                     	ds	2
  4223  0134                     ?_modCos:	
  4224  0134                     ?_eval_poly:	
  4225                           ; 2 bytes @ 0x14
  4226                           
  4227  0134                     modCos@angle:	
  4228                           ; 3 bytes @ 0x14
  4229                           
  4230  0134                     eval_poly@x:	
  4231                           ; 3 bytes @ 0x14
  4232                           
  4233  0134                     _modTri$2855:	
  4234                           ; 3 bytes @ 0x14
  4235                           
  4236  0134                     _modSaw$2856:	
  4237                           ; 3 bytes @ 0x14
  4238                           
  4239                           
  4240                           ; 3 bytes @ 0x14
  4241  0134                     	ds	1
  4242  0135                     set_subdivision@tmpX:	
  4243  0135                     floor@expon:	
  4244                           ; 2 bytes @ 0x15
  4245                           
  4246                           
  4247                           ; 2 bytes @ 0x15
  4248  0135                     	ds	2
  4249  0137                     ?___ftsub:	
  4250  0137                     eval_poly@d:	
  4251                           ; 3 bytes @ 0x17
  4252                           
  4253  0137                     modCos@inflection:	
  4254                           ; 2 bytes @ 0x17
  4255                           
  4256  0137                     modTri@shift:	
  4257                           ; 3 bytes @ 0x17
  4258                           
  4259  0137                     ___ftsub@f2:	
  4260                           ; 3 bytes @ 0x17
  4261                           
  4262  0137                     _modSaw$2857:	
  4263                           ; 3 bytes @ 0x17
  4264                           
  4265                           
  4266                           ; 3 bytes @ 0x17
  4267  0137                     	ds	2
  4268  0139                     eval_poly@n:	
  4269                           
  4270                           ; 2 bytes @ 0x19
  4271  0139                     	ds	1
  4272  013A                     ??_modCos:	
  4273  013A                     modSaw@mod:	
  4274                           ; 1 bytes @ 0x1A
  4275                           
  4276  013A                     modTri@period:	
  4277                           ; 2 bytes @ 0x1A
  4278                           
  4279  013A                     ___ftsub@f1:	
  4280                           ; 3 bytes @ 0x1A
  4281                           
  4282                           
  4283                           ; 3 bytes @ 0x1A
  4284  013A                     	ds	1
  4285  013B                     eval_poly@res:	
  4286                           
  4287                           ; 3 bytes @ 0x1B
  4288  013B                     	ds	1
  4289  013C                     modSaw@shift:	
  4290  013C                     _modCos$2854:	
  4291                           ; 3 bytes @ 0x1C
  4292                           
  4293                           
  4294                           ; 3 bytes @ 0x1C
  4295  013C                     	ds	1
  4296  013D                     modTri@tmpVal:	
  4297                           
  4298                           ; 3 bytes @ 0x1D
  4299  013D                     	ds	1
  4300  013E                     ?_sin:	
  4301  013E                     ?_log:	
  4302                           ; 3 bytes @ 0x1E
  4303                           
  4304  013E                     ?_ldexp:	
  4305                           ; 3 bytes @ 0x1E
  4306                           
  4307  013E                     sin@f:	
  4308                           ; 3 bytes @ 0x1E
  4309                           
  4310  013E                     ldexp@value:	
  4311                           ; 3 bytes @ 0x1E
  4312                           
  4313  013E                     log@x:	
  4314                           ; 3 bytes @ 0x1E
  4315                           
  4316                           
  4317                           ; 3 bytes @ 0x1E
  4318  013E                     	ds	1
  4319  013F                     modCos@shift:	
  4320  013F                     modSaw@period:	
  4321                           ; 3 bytes @ 0x1F
  4322                           
  4323                           
  4324                           ; 3 bytes @ 0x1F
  4325  013F                     	ds	2
  4326  0141                     ??_sin:	
  4327  0141                     ??_log:	
  4328                           ; 1 bytes @ 0x21
  4329                           
  4330  0141                     ldexp@newexp:	
  4331                           ; 1 bytes @ 0x21
  4332                           
  4333                           
  4334                           ; 2 bytes @ 0x21
  4335  0141                     	ds	1
  4336  0142                     ?_modSawRev:	
  4337  0142                     log@exponent:	
  4338                           ; 2 bytes @ 0x22
  4339                           
  4340  0142                     modCos@period:	
  4341                           ; 2 bytes @ 0x22
  4342                           
  4343  0142                     modSawRev@angle:	
  4344                           ; 3 bytes @ 0x22
  4345                           
  4346  0142                     sin@y:	
  4347                           ; 3 bytes @ 0x22
  4348                           
  4349                           
  4350                           ; 3 bytes @ 0x22
  4351  0142                     	ds	1
  4352  0143                     ??_ldexp:	
  4353                           
  4354                           ; 1 bytes @ 0x23
  4355  0143                     	ds	2
  4356  0145                     modCos@tmpVal:	
  4357  0145                     modSawRev@inflection:	
  4358                           ; 3 bytes @ 0x25
  4359                           
  4360  0145                     _ldexp$2650:	
  4361                           ; 3 bytes @ 0x25
  4362                           
  4363  0145                     _sin$2861:	
  4364                           ; 3 bytes @ 0x25
  4365                           
  4366                           
  4367                           ; 3 bytes @ 0x25
  4368  0145                     	ds	3
  4369  0148                     ??_modSawRev:	
  4370  0148                     ?_modSquare:	
  4371                           ; 1 bytes @ 0x28
  4372                           
  4373  0148                     ?_exp:	
  4374                           ; 2 bytes @ 0x28
  4375                           
  4376  0148                     modSquare@angle:	
  4377                           ; 3 bytes @ 0x28
  4378                           
  4379  0148                     sin@x2:	
  4380                           ; 3 bytes @ 0x28
  4381                           
  4382  0148                     exp@x:	
  4383                           ; 3 bytes @ 0x28
  4384                           
  4385                           
  4386                           ; 3 bytes @ 0x28
  4387  0148                     	ds	3
  4388  014B                     ??_exp:	
  4389  014B                     sin@sgn:	
  4390                           ; 1 bytes @ 0x2B
  4391                           
  4392  014B                     modSquare@inflection:	
  4393                           ; 1 bytes @ 0x2B
  4394                           
  4395                           
  4396                           ; 3 bytes @ 0x2B
  4397  014B                     	ds	1
  4398  014C                     ?_cos:	
  4399  014C                     cos@f:	
  4400                           ; 3 bytes @ 0x2C
  4401                           
  4402  014C                     _exp$2862:	
  4403                           ; 3 bytes @ 0x2C
  4404                           
  4405                           
  4406                           ; 3 bytes @ 0x2C
  4407  014C                     	ds	2
  4408  014E                     modSquare@tmpVal:	
  4409                           
  4410                           ; 2 bytes @ 0x2E
  4411  014E                     	ds	1
  4412  014F                     _exp$2613:	
  4413  014F                     _cos$2858:	
  4414                           ; 3 bytes @ 0x2F
  4415                           
  4416                           
  4417                           ; 3 bytes @ 0x2F
  4418  014F                     	ds	1
  4419  0150                     ??_updateModulationArray:	
  4420                           
  4421                           ; 1 bytes @ 0x30
  4422  0150                     	ds	2
  4423  0152                     ??_calcCosArray:	
  4424  0152                     exp@exponent:	
  4425                           ; 1 bytes @ 0x32
  4426                           
  4427                           
  4428                           ; 2 bytes @ 0x32
  4429  0152                     	ds	2
  4430  0154                     exp@sign:	
  4431  0154                     updateModulationArray@angleFactor:	
  4432                           ; 1 bytes @ 0x34
  4433                           
  4434                           
  4435                           ; 2 bytes @ 0x34
  4436  0154                     	ds	1
  4437  0155                     ?_pow:	
  4438  0155                     pow@x:	
  4439                           ; 3 bytes @ 0x35
  4440                           
  4441                           
  4442                           ; 3 bytes @ 0x35
  4443  0155                     	ds	1
  4444  0156                     updateModulationArray@iAngle_2349:	
  4445  0156                     calcCosArray@tmpVal:	
  4446                           ; 1 bytes @ 0x36
  4447                           
  4448                           
  4449                           ; 3 bytes @ 0x36
  4450  0156                     	ds	1
  4451  0157                     updateModulationArray@subDiv:	
  4452                           
  4453                           ; 2 bytes @ 0x37
  4454  0157                     	ds	1
  4455  0158                     pow@y:	
  4456                           
  4457                           ; 3 bytes @ 0x38
  4458  0158                     	ds	1
  4459  0159                     calcCosArray@iAngle:	
  4460  0159                     updateModulationArray@thisAngle:	
  4461                           ; 1 bytes @ 0x39
  4462                           
  4463                           
  4464                           ; 2 bytes @ 0x39
  4465  0159                     	ds	2
  4466  015B                     ??_pow:	
  4467  015B                     updateModulationArray@iAngle:	
  4468                           ; 1 bytes @ 0x3B
  4469                           
  4470                           
  4471                           ; 1 bytes @ 0x3B
  4472  015B                     	ds	1
  4473  015C                     _pow$2859:	
  4474                           
  4475                           ; 3 bytes @ 0x3C
  4476  015C                     	ds	3
  4477  015F                     _pow$2860:	
  4478                           
  4479                           ; 3 bytes @ 0x3F
  4480  015F                     	ds	3
  4481  0162                     pow@sign:	
  4482                           
  4483                           ; 1 bytes @ 0x42
  4484  0162                     	ds	1
  4485  0163                     pow@yi:	
  4486                           
  4487                           ; 4 bytes @ 0x43
  4488  0163                     	ds	4
  4489  0167                     ?_scaleA10kPot:	
  4490  0167                     ?_scaleiA10kPot:	
  4491                           ; 2 bytes @ 0x47
  4492                           
  4493  0167                     ?_scaleA100kPot:	
  4494                           ; 2 bytes @ 0x47
  4495                           
  4496  0167                     scaleA100kPot@input:	
  4497                           ; 2 bytes @ 0x47
  4498                           
  4499  0167                     scaleA10kPot@input:	
  4500                           ; 3 bytes @ 0x47
  4501                           
  4502  0167                     scaleiA10kPot@input:	
  4503                           ; 3 bytes @ 0x47
  4504                           
  4505                           
  4506                           ; 3 bytes @ 0x47
  4507  0167                     	ds	3
  4508                           
  4509                           	psect	cstackBANK1
  4510  00A0                     __pcstackBANK1:	
  4511  00A0                     ?___ftge:	
  4512  00A0                     ?_set_leds_top:	
  4513                           ; 1 bit 
  4514                           
  4515  00A0                     ?_USARTInit:	
  4516                           ; 1 bytes @ 0x0
  4517                           
  4518  00A0                     ??_ConfigureOscillator:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  00A0                     ??_InitApp:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  00A0                     ??_InitializeTaps:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  00A0                     ??_init_adc:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  00A0                     ??_init_pwm:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  00A0                     ??_init_timer2:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  00A0                     ??_init_timer0:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  00A0                     ?_set_leds_bottom:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  00A0                     ?_setLongBypassState:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  00A0                     ?_setLongTapState:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  00A0                     ?_updateSwitchBypassState:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  00A0                     ?_getModulationSubdivision:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  00A0                     ?_adc_convert:	
  4555                           ; 2 bytes @ 0x0
  4556                           
  4557  00A0                     ?_FLASH_ReadWord:	
  4558                           ; 2 bytes @ 0x0
  4559                           
  4560  00A0                     ?_getSwitchBypassState:	
  4561                           ; 2 bytes @ 0x0
  4562                           
  4563  00A0                     ?___awdiv:	
  4564                           ; 2 bytes @ 0x0
  4565                           
  4566  00A0                     ?___ftpack:	
  4567                           ; 2 bytes @ 0x0
  4568                           
  4569  00A0                     ?_frexp:	
  4570                           ; 3 bytes @ 0x0
  4571                           
  4572  00A0                     ?___lmul:	
  4573                           ; 3 bytes @ 0x0
  4574                           
  4575  00A0                     ?___aldiv:	
  4576                           ; 4 bytes @ 0x0
  4577                           
  4578  00A0                     FLASH_ReadWord@flashAddr:	
  4579                           ; 4 bytes @ 0x0
  4580                           
  4581  00A0                     set_leds_top@x:	
  4582                           ; 2 bytes @ 0x0
  4583                           
  4584  00A0                     set_leds_bottom@x:	
  4585                           ; 2 bytes @ 0x0
  4586                           
  4587  00A0                     updateSwitchBypassState@state:	
  4588                           ; 2 bytes @ 0x0
  4589                           
  4590  00A0                     setLongBypassState@f_state:	
  4591                           ; 2 bytes @ 0x0
  4592                           
  4593  00A0                     setLongTapState@f_state:	
  4594                           ; 2 bytes @ 0x0
  4595                           
  4596  00A0                     USARTInit@baud_rate:	
  4597                           ; 2 bytes @ 0x0
  4598                           
  4599  00A0                     ___awdiv@divisor:	
  4600                           ; 2 bytes @ 0x0
  4601                           
  4602  00A0                     ___ftpack@arg:	
  4603                           ; 2 bytes @ 0x0
  4604                           
  4605  00A0                     ___ftge@ff1:	
  4606                           ; 3 bytes @ 0x0
  4607                           
  4608  00A0                     frexp@value:	
  4609                           ; 3 bytes @ 0x0
  4610                           
  4611  00A0                     ___lmul@multiplier:	
  4612                           ; 3 bytes @ 0x0
  4613                           
  4614  00A0                     ___aldiv@divisor:	
  4615                           ; 4 bytes @ 0x0
  4616                           
  4617                           
  4618                           ; 4 bytes @ 0x0
  4619  00A0                     	ds	1
  4620  00A1                     InitializeTaps@itap:	
  4621                           
  4622                           ; 2 bytes @ 0x1
  4623  00A1                     	ds	1
  4624  00A2                     ??_getModulationSubdivision:	
  4625  00A2                     ??_USARTInit:	
  4626                           ; 1 bytes @ 0x2
  4627                           
  4628  00A2                     ??_adc_convert:	
  4629                           ; 1 bytes @ 0x2
  4630                           
  4631  00A2                     ??_FLASH_ReadWord:	
  4632                           ; 1 bytes @ 0x2
  4633                           
  4634  00A2                     ??_set_leds_bottom:	
  4635                           ; 1 bytes @ 0x2
  4636                           
  4637  00A2                     ??_setLongBypassState:	
  4638                           ; 1 bytes @ 0x2
  4639                           
  4640  00A2                     ??_setLongTapState:	
  4641                           ; 1 bytes @ 0x2
  4642                           
  4643  00A2                     ??_updateSwitchBypassState:	
  4644                           ; 1 bytes @ 0x2
  4645                           
  4646  00A2                     ??_getSwitchBypassState:	
  4647                           ; 1 bytes @ 0x2
  4648                           
  4649  00A2                     FLASH_ReadWord@GIEBitValue:	
  4650                           ; 1 bytes @ 0x2
  4651                           
  4652  00A2                     set_leds_top@ledState:	
  4653                           ; 1 bytes @ 0x2
  4654                           
  4655  00A2                     ___awdiv@dividend:	
  4656                           ; 2 bytes @ 0x2
  4657                           
  4658                           
  4659                           ; 2 bytes @ 0x2
  4660  00A2                     	ds	1
  4661  00A3                     adc_convert@channel:	
  4662  00A3                     ___ftpack@exp:	
  4663                           ; 1 bytes @ 0x3
  4664                           
  4665  00A3                     frexp@eptr:	
  4666                           ; 1 bytes @ 0x3
  4667                           
  4668  00A3                     ___ftge@ff2:	
  4669                           ; 1 bytes @ 0x3
  4670                           
  4671                           
  4672                           ; 3 bytes @ 0x3
  4673  00A3                     	ds	1
  4674  00A4                     ??_set_leds_top:	
  4675  00A4                     ??_ReadSavedSettings:	
  4676                           ; 1 bytes @ 0x4
  4677                           
  4678  00A4                     ??_resetRingLEDs:	
  4679                           ; 1 bytes @ 0x4
  4680                           
  4681  00A4                     ??_setPresetDisplay:	
  4682                           ; 1 bytes @ 0x4
  4683                           
  4684  00A4                     ??_setExpressionDisplay:	
  4685                           ; 1 bytes @ 0x4
  4686                           
  4687  00A4                     ??_frexp:	
  4688                           ; 1 bytes @ 0x4
  4689                           
  4690  00A4                     ??___awdiv:	
  4691                           ; 1 bytes @ 0x4
  4692                           
  4693  00A4                     ___ftpack@sign:	
  4694                           ; 1 bytes @ 0x4
  4695                           
  4696  00A4                     ___lmul@multiplicand:	
  4697                           ; 1 bytes @ 0x4
  4698                           
  4699  00A4                     ___aldiv@dividend:	
  4700                           ; 4 bytes @ 0x4
  4701                           
  4702                           
  4703                           ; 4 bytes @ 0x4
  4704  00A4                     	ds	1
  4705  00A5                     ??___ftpack:	
  4706  00A5                     ___awdiv@counter:	
  4707                           ; 1 bytes @ 0x5
  4708                           
  4709                           
  4710                           ; 1 bytes @ 0x5
  4711  00A5                     	ds	1
  4712  00A6                     ??___ftge:	
  4713  00A6                     setPresetDisplay@ledChannel:	
  4714                           ; 1 bytes @ 0x6
  4715                           
  4716  00A6                     setExpressionDisplay@ledChannel:	
  4717                           ; 1 bytes @ 0x6
  4718                           
  4719  00A6                     ___awdiv@sign:	
  4720                           ; 1 bytes @ 0x6
  4721                           
  4722                           
  4723                           ; 1 bytes @ 0x6
  4724  00A6                     	ds	1
  4725  00A7                     ??_update_mode:	
  4726  00A7                     ??_update_selectMode:	
  4727                           ; 1 bytes @ 0x7
  4728                           
  4729  00A7                     ??_setPedalMode:	
  4730                           ; 1 bytes @ 0x7
  4731                           
  4732  00A7                     ___awdiv@quotient:	
  4733                           ; 1 bytes @ 0x7
  4734                           
  4735                           
  4736                           ; 2 bytes @ 0x7
  4737  00A7                     	ds	1
  4738  00A8                     ??___lmul:	
  4739  00A8                     ??___aldiv:	
  4740                           ; 1 bytes @ 0x8
  4741                           
  4742  00A8                     ?___altoft:	
  4743                           ; 1 bytes @ 0x8
  4744                           
  4745  00A8                     ?___awtoft:	
  4746                           ; 3 bytes @ 0x8
  4747                           
  4748  00A8                     ?___lltoft:	
  4749                           ; 3 bytes @ 0x8
  4750                           
  4751  00A8                     ___awtoft@c:	
  4752                           ; 3 bytes @ 0x8
  4753                           
  4754  00A8                     ___lmul@product:	
  4755                           ; 2 bytes @ 0x8
  4756                           
  4757  00A8                     ___altoft@c:	
  4758                           ; 4 bytes @ 0x8
  4759                           
  4760  00A8                     ___lltoft@c:	
  4761                           ; 4 bytes @ 0x8
  4762                           
  4763                           
  4764                           ; 4 bytes @ 0x8
  4765  00A8                     	ds	1
  4766  00A9                     ___aldiv@counter:	
  4767                           
  4768                           ; 1 bytes @ 0x9
  4769  00A9                     	ds	1
  4770  00AA                     ___aldiv@sign:	
  4771                           
  4772                           ; 1 bytes @ 0xA
  4773  00AA                     	ds	1
  4774  00AB                     ??___awtoft:	
  4775  00AB                     ___aldiv@quotient:	
  4776                           ; 1 bytes @ 0xB
  4777                           
  4778                           
  4779                           ; 4 bytes @ 0xB
  4780  00AB                     	ds	1
  4781  00AC                     ?_wait_ms:	
  4782  00AC                     ??___altoft:	
  4783                           ; 1 bytes @ 0xC
  4784                           
  4785  00AC                     ??___lltoft:	
  4786                           ; 1 bytes @ 0xC
  4787                           
  4788  00AC                     wait_ms@timeSec:	
  4789                           ; 1 bytes @ 0xC
  4790                           
  4791                           
  4792                           ; 2 bytes @ 0xC
  4793  00AC                     	ds	1
  4794  00AD                     ___awtoft@sign:	
  4795  00AD                     ___lltoft@exp:	
  4796                           ; 1 bytes @ 0xD
  4797                           
  4798                           
  4799                           ; 1 bytes @ 0xD
  4800  00AD                     	ds	1
  4801  00AE                     ??_wait_ms:	
  4802  00AE                     ?___ftmul:	
  4803                           ; 1 bytes @ 0xE
  4804                           
  4805  00AE                     ___altoft@exp:	
  4806                           ; 3 bytes @ 0xE
  4807                           
  4808  00AE                     ___ftmul@f1:	
  4809                           ; 1 bytes @ 0xE
  4810                           
  4811  00AE                     wait_ms@timemsl:	
  4812                           ; 3 bytes @ 0xE
  4813                           
  4814                           
  4815                           ; 4 bytes @ 0xE
  4816  00AE                     	ds	1
  4817  00AF                     ___altoft@sign:	
  4818                           
  4819                           ; 1 bytes @ 0xF
  4820  00AF                     	ds	2
  4821  00B1                     ___ftmul@f2:	
  4822                           
  4823                           ; 3 bytes @ 0x11
  4824  00B1                     	ds	1
  4825  00B2                     ??_read_bottom_tactile:	
  4826  00B2                     ??_read_top_tactile:	
  4827                           ; 1 bytes @ 0x12
  4828                           
  4829  00B2                     ??_solidring_tactiles:	
  4830                           ; 1 bytes @ 0x12
  4831                           
  4832  00B2                     ??_ring_tactiles:	
  4833                           ; 1 bytes @ 0x12
  4834                           
  4835  00B2                     ?_setSwitchBypassRelays:	
  4836                           ; 1 bytes @ 0x12
  4837                           
  4838  00B2                     setSwitchBypassRelays@f_state:	
  4839                           ; 1 bytes @ 0x12
  4840                           
  4841                           
  4842                           ; 2 bytes @ 0x12
  4843  00B2                     	ds	1
  4844  00B3                     ring_tactiles@iLed:	
  4845                           
  4846                           ; 2 bytes @ 0x13
  4847  00B3                     	ds	1
  4848  00B4                     ??_setSwitchBypassRelays:	
  4849  00B4                     ??___ftmul:	
  4850                           ; 1 bytes @ 0x14
  4851                           
  4852  00B4                     solidring_tactiles@ring_delay:	
  4853                           ; 1 bytes @ 0x14
  4854                           
  4855                           
  4856                           ; 1 bytes @ 0x14
  4857  00B4                     	ds	1
  4858  00B5                     ring_tactiles@iLed_1532:	
  4859                           
  4860                           ; 2 bytes @ 0x15
  4861  00B5                     	ds	1
  4862  00B6                     ?_setSwitchBypassState:	
  4863  00B6                     setSwitchBypassState@f_state:	
  4864                           ; 1 bytes @ 0x16
  4865                           
  4866                           
  4867                           ; 2 bytes @ 0x16
  4868  00B6                     	ds	1
  4869  00B7                     ??_showSave:	
  4870                           
  4871                           ; 1 bytes @ 0x17
  4872  00B7                     	ds	1
  4873  00B8                     ??_setSwitchBypassState:	
  4874  00B8                     ?_setDoublePressState:	
  4875                           ; 1 bytes @ 0x18
  4876                           
  4877  00B8                     ___ftmul@exp:	
  4878                           ; 1 bytes @ 0x18
  4879                           
  4880  00B8                     setDoublePressState@f_state:	
  4881                           ; 1 bytes @ 0x18
  4882                           
  4883                           
  4884                           ; 2 bytes @ 0x18
  4885  00B8                     	ds	1
  4886  00B9                     ___ftmul@f3_as_product:	
  4887                           
  4888                           ; 3 bytes @ 0x19
  4889  00B9                     	ds	1
  4890  00BA                     ??_initSwitchBypass:	
  4891  00BA                     ??_setDoublePressState:	
  4892                           ; 1 bytes @ 0x1A
  4893                           
  4894  00BA                     initSwitchBypass@initState:	
  4895                           ; 1 bytes @ 0x1A
  4896                           
  4897                           
  4898                           ; 2 bytes @ 0x1A
  4899  00BA                     	ds	2
  4900  00BC                     ??_updateSwitchBypass:	
  4901  00BC                     ??_updateSwitchTap:	
  4902                           ; 1 bytes @ 0x1C
  4903                           
  4904  00BC                     ___ftmul@cntr:	
  4905                           ; 1 bytes @ 0x1C
  4906                           
  4907                           
  4908                           ; 1 bytes @ 0x1C
  4909  00BC                     	ds	1
  4910  00BD                     ___ftmul@sign:	
  4911                           
  4912                           ; 1 bytes @ 0x1D
  4913  00BD                     	ds	1
  4914  00BE                     ?___ftneg:	
  4915  00BE                     ___ftneg@f1:	
  4916                           ; 3 bytes @ 0x1E
  4917                           
  4918                           
  4919                           ; 3 bytes @ 0x1E
  4920  00BE                     	ds	3
  4921  00C1                     ??___ftneg:	
  4922  00C1                     ?___ftadd:	
  4923                           ; 1 bytes @ 0x21
  4924                           
  4925  00C1                     ___ftadd@f1:	
  4926                           ; 3 bytes @ 0x21
  4927                           
  4928                           
  4929                           ; 3 bytes @ 0x21
  4930  00C1                     	ds	1
  4931  00C2                     updateSwitchTap@tapCntDivisor:	
  4932                           
  4933                           ; 2 bytes @ 0x22
  4934  00C2                     	ds	2
  4935  00C4                     updateSwitchTap@iCnt:	
  4936  00C4                     ___ftadd@f2:	
  4937                           ; 1 bytes @ 0x24
  4938                           
  4939                           
  4940                           ; 3 bytes @ 0x24
  4941  00C4                     	ds	3
  4942  00C7                     ??___ftadd:	
  4943                           
  4944                           ; 1 bytes @ 0x27
  4945  00C7                     	ds	4
  4946  00CB                     ___ftadd@sign:	
  4947                           
  4948                           ; 1 bytes @ 0x2B
  4949  00CB                     	ds	1
  4950  00CC                     ___ftadd@exp2:	
  4951                           
  4952                           ; 1 bytes @ 0x2C
  4953  00CC                     	ds	1
  4954  00CD                     ___ftadd@exp1:	
  4955                           
  4956                           ; 1 bytes @ 0x2D
  4957  00CD                     	ds	1
  4958  00CE                     ?___ftdiv:	
  4959  00CE                     ___ftdiv@f2:	
  4960                           ; 3 bytes @ 0x2E
  4961                           
  4962                           
  4963                           ; 3 bytes @ 0x2E
  4964  00CE                     	ds	3
  4965  00D1                     ___ftdiv@f1:	
  4966                           
  4967                           ; 3 bytes @ 0x31
  4968  00D1                     	ds	3
  4969  00D4                     ??___ftdiv:	
  4970                           
  4971                           ; 1 bytes @ 0x34
  4972  00D4                     	ds	4
  4973  00D8                     ___ftdiv@cntr:	
  4974                           
  4975                           ; 1 bytes @ 0x38
  4976  00D8                     	ds	1
  4977  00D9                     ___ftdiv@f3:	
  4978                           
  4979                           ; 3 bytes @ 0x39
  4980  00D9                     	ds	3
  4981  00DC                     ___ftdiv@exp:	
  4982                           
  4983                           ; 1 bytes @ 0x3C
  4984  00DC                     	ds	1
  4985  00DD                     ___ftdiv@sign:	
  4986                           
  4987                           ; 1 bytes @ 0x3D
  4988  00DD                     	ds	1
  4989  00DE                     ?_map:	
  4990  00DE                     map@x:	
  4991                           ; 3 bytes @ 0x3E
  4992                           
  4993                           
  4994                           ; 3 bytes @ 0x3E
  4995  00DE                     	ds	3
  4996  00E1                     map@in_min:	
  4997                           
  4998                           ; 3 bytes @ 0x41
  4999  00E1                     	ds	3
  5000  00E4                     map@in_max:	
  5001                           
  5002                           ; 3 bytes @ 0x44
  5003  00E4                     	ds	3
  5004  00E7                     map@out_min:	
  5005                           
  5006                           ; 3 bytes @ 0x47
  5007  00E7                     	ds	3
  5008  00EA                     map@out_max:	
  5009                           
  5010                           ; 3 bytes @ 0x4A
  5011  00EA                     	ds	3
  5012  00ED                     ??_map:	
  5013  00ED                     _map$2844:	
  5014                           ; 1 bytes @ 0x4D
  5015                           
  5016                           
  5017                           ; 3 bytes @ 0x4D
  5018  00ED                     	ds	3
  5019  00F0                     ??_scaleA10kPot:	
  5020  00F0                     ??_scaleiA10kPot:	
  5021                           ; 1 bytes @ 0x50
  5022                           
  5023  00F0                     ??_scaleA100kPot:	
  5024                           ; 1 bytes @ 0x50
  5025                           
  5026  00F0                     ??_set_subdivision:	
  5027                           ; 1 bytes @ 0x50
  5028                           
  5029  00F0                     ??_getModulationDelayTime:	
  5030                           ; 1 bytes @ 0x50
  5031                           
  5032  00F0                     ??_cos:	
  5033                           ; 1 bytes @ 0x50
  5034                           
  5035  00F0                     ??_modTri:	
  5036                           ; 1 bytes @ 0x50
  5037                           
  5038  00F0                     ??_modSquare:	
  5039                           ; 1 bytes @ 0x50
  5040                           
  5041  00F0                     ??_modSaw:	
  5042                           ; 1 bytes @ 0x50
  5043                           
  5044  00F0                     ??_eval_poly:	
  5045                           ; 1 bytes @ 0x50
  5046                           
  5047  00F0                     ??___wmul:	
  5048                           ; 1 bytes @ 0x50
  5049                           
  5050  00F0                     ??___ftsub:	
  5051                           ; 1 bytes @ 0x50
  5052                           
  5053                           
  5054                           	psect	cstackCOMMON
  5055  0070                     __pcstackCOMMON:	
  5056                           ; 1 bytes @ 0x50
  5057                           
  5058  0070                     ?_calcCosArray:	
  5059  0070                     ?_ConfigureOscillator:	
  5060                           ; 1 bytes @ 0x0
  5061                           
  5062  0070                     ?_InitApp:	
  5063                           ; 1 bytes @ 0x0
  5064                           
  5065  0070                     ?_InitializeTaps:	
  5066                           ; 1 bytes @ 0x0
  5067                           
  5068  0070                     ?_initSwitchBypass:	
  5069                           ; 1 bytes @ 0x0
  5070                           
  5071  0070                     ?_ReadSavedSettings:	
  5072                           ; 1 bytes @ 0x0
  5073                           
  5074  0070                     ?_updateModulationArray:	
  5075                           ; 1 bytes @ 0x0
  5076                           
  5077  0070                     ?_update_mode:	
  5078                           ; 1 bytes @ 0x0
  5079                           
  5080  0070                     ?_update_selectMode:	
  5081                           ; 1 bytes @ 0x0
  5082                           
  5083  0070                     ?_updateSwitchBypass:	
  5084                           ; 1 bytes @ 0x0
  5085                           
  5086  0070                     ?_updateSwitchTap:	
  5087                           ; 1 bytes @ 0x0
  5088                           
  5089  0070                     ?_read_bottom_tactile:	
  5090                           ; 1 bytes @ 0x0
  5091                           
  5092  0070                     ?_read_top_tactile:	
  5093                           ; 1 bytes @ 0x0
  5094                           
  5095  0070                     ?_getModulationDelayTime:	
  5096                           ; 1 bytes @ 0x0
  5097                           
  5098  0070                     ?_init_adc:	
  5099                           ; 1 bytes @ 0x0
  5100                           
  5101  0070                     ?_init_pwm:	
  5102                           ; 1 bytes @ 0x0
  5103                           
  5104  0070                     ?_init_timer2:	
  5105                           ; 1 bytes @ 0x0
  5106                           
  5107  0070                     ?_init_timer0:	
  5108                           ; 1 bytes @ 0x0
  5109                           
  5110  0070                     ?_solidring_tactiles:	
  5111                           ; 1 bytes @ 0x0
  5112                           
  5113  0070                     ?_ring_tactiles:	
  5114                           ; 1 bytes @ 0x0
  5115                           
  5116  0070                     ?_resetRingLEDs:	
  5117                           ; 1 bytes @ 0x0
  5118                           
  5119  0070                     ?_setPedalMode:	
  5120                           ; 1 bytes @ 0x0
  5121                           
  5122  0070                     ?_setPresetDisplay:	
  5123                           ; 1 bytes @ 0x0
  5124                           
  5125  0070                     ?_setExpressionDisplay:	
  5126                           ; 1 bytes @ 0x0
  5127                           
  5128  0070                     ?_isr:	
  5129                           ; 1 bytes @ 0x0
  5130                           
  5131  0070                     ?_main:	
  5132                           ; 1 bytes @ 0x0
  5133                           
  5134  0070                     ?_showSave:	
  5135                           ; 1 bytes @ 0x0
  5136                           
  5137  0070                     ?i1_set_leds_top:	
  5138                           ; 1 bytes @ 0x0
  5139                           
  5140  0070                     ?i1_getModulationSubdivision:	
  5141                           ; 1 bytes @ 0x0
  5142                           
  5143  0070                     ?i1___awdiv:	
  5144                           ; 2 bytes @ 0x0
  5145                           
  5146  0070                     ?i1___lmul:	
  5147                           ; 2 bytes @ 0x0
  5148                           
  5149  0070                     i1set_leds_top@x:	
  5150                           ; 4 bytes @ 0x0
  5151                           
  5152  0070                     i1___awdiv@divisor:	
  5153                           ; 2 bytes @ 0x0
  5154                           
  5155  0070                     i1___lmul@multiplier:	
  5156                           ; 2 bytes @ 0x0
  5157                           
  5158                           
  5159                           ; 4 bytes @ 0x0
  5160  0070                     	ds	2
  5161  0072                     ??i1_getModulationSubdivision:	
  5162  0072                     i1set_leds_top@ledState:	
  5163                           ; 1 bytes @ 0x2
  5164                           
  5165  0072                     i1___awdiv@dividend:	
  5166                           ; 2 bytes @ 0x2
  5167                           
  5168                           
  5169                           ; 2 bytes @ 0x2
  5170  0072                     	ds	2
  5171  0074                     ??i1_set_leds_top:	
  5172  0074                     ??i1___awdiv:	
  5173                           ; 1 bytes @ 0x4
  5174                           
  5175  0074                     i1___lmul@multiplicand:	
  5176                           ; 1 bytes @ 0x4
  5177                           
  5178                           
  5179                           ; 4 bytes @ 0x4
  5180  0074                     	ds	1
  5181  0075                     i1___awdiv@counter:	
  5182                           
  5183                           ; 1 bytes @ 0x5
  5184  0075                     	ds	1
  5185  0076                     i1___awdiv@sign:	
  5186                           
  5187                           ; 1 bytes @ 0x6
  5188  0076                     	ds	1
  5189  0077                     i1___awdiv@quotient:	
  5190                           
  5191                           ; 2 bytes @ 0x7
  5192  0077                     	ds	1
  5193  0078                     ??i1___lmul:	
  5194  0078                     i1___lmul@product:	
  5195                           ; 1 bytes @ 0x8
  5196                           
  5197                           
  5198                           ; 4 bytes @ 0x8
  5199  0078                     	ds	4
  5200  007C                     ??i1___aldiv:	
  5201                           
  5202                           ; 1 bytes @ 0xC
  5203  007C                     	ds	1
  5204  007D                     isr@subDiv:	
  5205                           
  5206                           ; 1 bytes @ 0xD
  5207  007D                     	ds	1
  5208                           
  5209                           	psect	cstackBANK0
  5210  0020                     __pcstackBANK0:	
  5211  0020                     ?i1___aldiv:	
  5212  0020                     i1___aldiv@divisor:	
  5213                           ; 4 bytes @ 0x0
  5214                           
  5215                           
  5216                           ; 4 bytes @ 0x0
  5217  0020                     	ds	4
  5218  0024                     i1___aldiv@dividend:	
  5219                           
  5220                           ; 4 bytes @ 0x4
  5221  0024                     	ds	4
  5222  0028                     i1___aldiv@counter:	
  5223                           
  5224                           ; 1 bytes @ 0x8
  5225  0028                     	ds	1
  5226  0029                     i1___aldiv@sign:	
  5227                           
  5228                           ; 1 bytes @ 0x9
  5229  0029                     	ds	1
  5230  002A                     i1___aldiv@quotient:	
  5231                           
  5232                           ; 4 bytes @ 0xA
  5233  002A                     	ds	4
  5234  002E                     ?_modulation:	
  5235  002E                     modulation@x:	
  5236                           ; 4 bytes @ 0xE
  5237                           
  5238                           
  5239                           ; 4 bytes @ 0xE
  5240  002E                     	ds	4
  5241  0032                     modulation@y:	
  5242                           
  5243                           ; 4 bytes @ 0x12
  5244  0032                     	ds	4
  5245  0036                     ??_modulation:	
  5246                           
  5247                           ; 1 bytes @ 0x16
  5248  0036                     	ds	4
  5249  003A                     ??_isr:	
  5250                           
  5251                           ; 1 bytes @ 0x1A
  5252  003A                     	ds	6
  5253                           
  5254                           	psect	maintext
  5255  035E                     __pmaintext:	
  5256 ;;
  5257 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5258 ;;
  5259 ;; *************** function _main *****************
  5260 ;; Defined at:
  5261 ;;		line 68 in file "main.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : B1F/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5278 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5279 ;;Total ram usage:       14 bytes
  5280 ;; Hardware stack levels required when called:    9
  5281 ;; This function calls:
  5282 ;;		_ConfigureOscillator
  5283 ;;		_InitApp
  5284 ;;		_InitializeTaps
  5285 ;;		_ReadSavedSettings
  5286 ;;		_USARTInit
  5287 ;;		___awtoft
  5288 ;;		___fttol
  5289 ;;		_adc_convert
  5290 ;;		_calcCosArray
  5291 ;;		_getModulationDelayTime
  5292 ;;		_initSwitchBypass
  5293 ;;		_map
  5294 ;;		_read_bottom_tactile
  5295 ;;		_read_top_tactile
  5296 ;;		_scaleA100kPot
  5297 ;;		_scaleA10kPot
  5298 ;;		_scaleiA10kPot
  5299 ;;		_set_subdivision
  5300 ;;		_updateModulationArray
  5301 ;;		_updateSwitchBypass
  5302 ;;		_updateSwitchTap
  5303 ;;		_update_mode
  5304 ;;		_update_selectMode
  5305 ;; This function is called by:
  5306 ;;		Startup code after reset
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           
  5311                           ;psect for function _main
  5312  035E                     _main:	
  5313                           
  5314                           ;main.c: 70: calcCosArray();
  5315                           
  5316                           ;incstack = 0
  5317                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5318  035E  3198  2059  3183   	fcall	_calcCosArray
  5319                           
  5320                           ;main.c: 84: USARTInit(31250);
  5321  0361  3012               	movlw	18
  5322  0362  0021               	movlb	1	; select bank1
  5323  0363  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5324  0364  307A               	movlw	122
  5325  0365  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5326  0366  31A3  2379  3183   	fcall	_USARTInit
  5327                           
  5328                           ;main.c: 85: ConfigureOscillator();
  5329  0369  31AD  2598  3183   	fcall	_ConfigureOscillator
  5330                           
  5331                           ;main.c: 86: InitApp();
  5332  036C  31A0  200F  3183   	fcall	_InitApp
  5333                           
  5334                           ;main.c: 88: PORTEbits.RE0 = 1;
  5335  036F  0020               	movlb	0	; select bank0
  5336  0370  1410               	bsf	16,0	;volatile
  5337                           
  5338                           ;main.c: 89: PORTEbits.RE1 = 1;
  5339  0371  1490               	bsf	16,1	;volatile
  5340                           
  5341                           ;main.c: 90: PORTDbits.RD6 = 1;
  5342  0372  170F               	bsf	15,6	;volatile
  5343                           
  5344                           ;main.c: 91: PORTDbits.RD5 = 1;
  5345  0373  168F               	bsf	15,5	;volatile
  5346                           
  5347                           ;main.c: 92: PORTCbits.RC0 = 1;
  5348  0374  140E               	bsf	14,0	;volatile
  5349                           
  5350                           ;main.c: 93: PORTDbits.RD7 = 1;
  5351  0375  178F               	bsf	15,7	;volatile
  5352                           
  5353                           ;main.c: 95: InitializeTaps();
  5354  0376  31AF  2727  3183   	fcall	_InitializeTaps
  5355                           
  5356                           ;main.c: 96: initSwitchBypass();
  5357  0379  3187  27EF  3183   	fcall	_initSwitchBypass
  5358                           
  5359                           ;main.c: 99: ReadSavedSettings();
  5360  037C  31A7  270E  3183   	fcall	_ReadSavedSettings
  5361                           
  5362                           ;main.c: 100: updateModulationArray();
  5363  037F  318D  25BA  3183   	fcall	_updateModulationArray
  5364  0382                     l9274:	
  5365                           ;main.c: 101: while (1) {
  5366                           
  5367                           
  5368                           ;main.c: 104: update_mode();
  5369  0382  31A0  20D7  3183   	fcall	_update_mode
  5370                           
  5371                           ;main.c: 105: update_selectMode();
  5372  0385  3198  2000  3183   	fcall	_update_selectMode
  5373                           
  5374                           ;main.c: 108: updateSwitchBypass();
  5375  0388  3192  223D  3183   	fcall	_updateSwitchBypass
  5376                           
  5377                           ;main.c: 109: if (presetSaveMode != 1) {
  5378  038B  0020               	movlb	0	; select bank0
  5379  038C  0351               	decf	_presetSaveMode,w
  5380  038D  1903               	btfsc	3,2
  5381  038E  2B92               	goto	l9284
  5382                           
  5383                           ;main.c: 110: updateSwitchTap();
  5384  038F  318B  23D3  3183   	fcall	_updateSwitchTap
  5385  0392                     l9284:	
  5386                           
  5387                           ;main.c: 111: }
  5388                           ;main.c: 113: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5389  0392  0020               	movlb	0	; select bank0
  5390  0393  0351               	decf	_presetSaveMode,w
  5391  0394  1903               	btfsc	3,2
  5392  0395  2BA1               	goto	l9290
  5393  0396  0850               	movf	_mode2_state,w
  5394  0397  0023               	movlb	3	; select bank3
  5395  0398  0665               	xorwf	_presetModeCnst^(0+384),w
  5396  0399  1903               	skipnz
  5397  039A  2BA1               	goto	l9290
  5398                           
  5399                           ;main.c: 114: read_bottom_tactile();
  5400  039B  31A4  2405  3183   	fcall	_read_bottom_tactile
  5401                           
  5402                           ;main.c: 115: read_top_tactile();
  5403  039E  31A4  244F  3183   	fcall	_read_top_tactile
  5404  03A1                     l9290:	
  5405                           
  5406                           ;main.c: 116: }
  5407                           ;main.c: 119: knob_1_pos = adc_convert(0);
  5408  03A1  3000               	movlw	0
  5409  03A2  31AD  25DB  3183   	fcall	_adc_convert
  5410  03A5  0021               	movlb	1	; select bank1
  5411  03A6  0821               	movf	(?_adc_convert+1)^(0+128),w
  5412  03A7  0023               	movlb	3	; select bank3
  5413  03A8  00A9               	movwf	(_knob_1_pos+1)^(0+384)
  5414  03A9  0021               	movlb	1	; select bank1
  5415  03AA  0820               	movf	?_adc_convert^(0+128),w
  5416  03AB  0023               	movlb	3	; select bank3
  5417  03AC  00A8               	movwf	_knob_1_pos^(0+384)
  5418                           
  5419                           ;main.c: 120: knob_2_pos = adc_convert(1);
  5420  03AD  3001               	movlw	1
  5421  03AE  31AD  25DB  3183   	fcall	_adc_convert
  5422  03B1  0021               	movlb	1	; select bank1
  5423  03B2  0821               	movf	(?_adc_convert+1)^(0+128),w
  5424  03B3  0023               	movlb	3	; select bank3
  5425  03B4  00AB               	movwf	(_knob_2_pos+1)^(0+384)
  5426  03B5  0021               	movlb	1	; select bank1
  5427  03B6  0820               	movf	?_adc_convert^(0+128),w
  5428  03B7  0023               	movlb	3	; select bank3
  5429  03B8  00AA               	movwf	_knob_2_pos^(0+384)
  5430                           
  5431                           ;main.c: 121: knob_3_pos = adc_convert(2);
  5432  03B9  3002               	movlw	2
  5433  03BA  31AD  25DB  3183   	fcall	_adc_convert
  5434  03BD  0021               	movlb	1	; select bank1
  5435  03BE  0821               	movf	(?_adc_convert+1)^(0+128),w
  5436  03BF  0023               	movlb	3	; select bank3
  5437  03C0  00AD               	movwf	(_knob_3_pos+1)^(0+384)
  5438  03C1  0021               	movlb	1	; select bank1
  5439  03C2  0820               	movf	?_adc_convert^(0+128),w
  5440  03C3  0023               	movlb	3	; select bank3
  5441  03C4  00AC               	movwf	_knob_3_pos^(0+384)
  5442                           
  5443                           ;main.c: 122: knob_4_pos = adc_convert(3);
  5444  03C5  3003               	movlw	3
  5445  03C6  31AD  25DB  3183   	fcall	_adc_convert
  5446  03C9  0021               	movlb	1	; select bank1
  5447  03CA  0821               	movf	(?_adc_convert+1)^(0+128),w
  5448  03CB  0023               	movlb	3	; select bank3
  5449  03CC  00AF               	movwf	(_knob_4_pos+1)^(0+384)
  5450  03CD  0021               	movlb	1	; select bank1
  5451  03CE  0820               	movf	?_adc_convert^(0+128),w
  5452  03CF  0023               	movlb	3	; select bank3
  5453  03D0  00AE               	movwf	_knob_4_pos^(0+384)
  5454                           
  5455                           ;main.c: 123: knob_5_pos = adc_convert(4);
  5456  03D1  3004               	movlw	4
  5457  03D2  31AD  25DB  3183   	fcall	_adc_convert
  5458  03D5  0021               	movlb	1	; select bank1
  5459  03D6  0821               	movf	(?_adc_convert+1)^(0+128),w
  5460  03D7  0023               	movlb	3	; select bank3
  5461  03D8  00B1               	movwf	(_knob_5_pos+1)^(0+384)
  5462  03D9  0021               	movlb	1	; select bank1
  5463  03DA  0820               	movf	?_adc_convert^(0+128),w
  5464  03DB  0023               	movlb	3	; select bank3
  5465  03DC  00B0               	movwf	_knob_5_pos^(0+384)
  5466                           
  5467                           ;main.c: 127: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5468  03DD  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5469  03DE  0024               	movlb	4	; select bank4
  5470  03DF  00D5               	movwf	??_main^(0+512)
  5471  03E0  0023               	movlb	3	; select bank3
  5472  03E1  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5473  03E2  0024               	movlb	4	; select bank4
  5474  03E3  00D6               	movwf	(??_main^(0+512)+1)
  5475  03E4  0AD5               	incf	??_main^(0+512),f
  5476  03E5  1903               	skipnz
  5477  03E6  0AD6               	incf	(??_main^(0+512)+1),f
  5478  03E7  0023               	movlb	3	; select bank3
  5479  03E8  0828               	movf	_knob_1_pos^(0+384),w
  5480  03E9  0024               	movlb	4	; select bank4
  5481  03EA  0755               	addwf	??_main^(0+512),w
  5482  03EB  00D7               	movwf	(??_main+2)^(0+512)
  5483  03EC  0023               	movlb	3	; select bank3
  5484  03ED  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5485  03EE  0024               	movlb	4	; select bank4
  5486  03EF  3D56               	addwfc	(??_main+1)^(0+512),w
  5487  03F0  00D8               	movwf	(??_main+3)^(0+512)
  5488  03F1  0858               	movf	(??_main+3)^(0+512),w
  5489  03F2  3A80               	xorlw	128
  5490  03F3  00D9               	movwf	(??_main+4)^(0+512)
  5491  03F4  3080               	movlw	128
  5492  03F5  0259               	subwf	(??_main+4)^(0+512),w
  5493  03F6  1D03               	skipz
  5494  03F7  2BFA               	goto	u10245
  5495  03F8  3004               	movlw	4
  5496  03F9  0257               	subwf	(??_main+2)^(0+512),w
  5497  03FA                     u10245:	
  5498  03FA  1803               	skipnc
  5499  03FB  2C1C               	goto	l9304
  5500  03FC  0023               	movlb	3	; select bank3
  5501  03FD  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5502  03FE  0024               	movlb	4	; select bank4
  5503  03FF  00D5               	movwf	??_main^(0+512)
  5504  0400  0023               	movlb	3	; select bank3
  5505  0401  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5506  0402  0024               	movlb	4	; select bank4
  5507  0403  00D6               	movwf	(??_main^(0+512)+1)
  5508  0404  0AD5               	incf	??_main^(0+512),f
  5509  0405  1903               	skipnz
  5510  0406  0AD6               	incf	(??_main^(0+512)+1),f
  5511  0407  0023               	movlb	3	; select bank3
  5512  0408  0828               	movf	_knob_1_pos^(0+384),w
  5513  0409  0024               	movlb	4	; select bank4
  5514  040A  0755               	addwf	??_main^(0+512),w
  5515  040B  00D7               	movwf	(??_main+2)^(0+512)
  5516  040C  0023               	movlb	3	; select bank3
  5517  040D  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5518  040E  0024               	movlb	4	; select bank4
  5519  040F  3D56               	addwfc	(??_main+1)^(0+512),w
  5520  0410  00D8               	movwf	(??_main+3)^(0+512)
  5521  0411  0858               	movf	(??_main+3)^(0+512),w
  5522  0412  3A80               	xorlw	128
  5523  0413  00D9               	movwf	(??_main+4)^(0+512)
  5524  0414  307F               	movlw	127
  5525  0415  0259               	subwf	(??_main+4)^(0+512),w
  5526  0416  1D03               	skipz
  5527  0417  2C1A               	goto	u10255
  5528  0418  30FD               	movlw	253
  5529  0419  0257               	subwf	(??_main+2)^(0+512),w
  5530  041A                     u10255:	
  5531  041A  1803               	skipnc
  5532  041B  2C7A               	goto	l9314
  5533  041C                     l9304:	
  5534                           
  5535                           ;main.c: 128: knob1_prev = knob_1_pos;
  5536  041C  0023               	movlb	3	; select bank3
  5537  041D  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5538  041E  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5539  041F  0828               	movf	_knob_1_pos^(0+384),w
  5540  0420  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5541                           
  5542                           ;main.c: 129: CCPR4 = scaleA10kPot(knob1_prev);
  5543  0421  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5544  0422  0021               	movlb	1	; select bank1
  5545  0423  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5546  0424  0023               	movlb	3	; select bank3
  5547  0425  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5548  0426  0021               	movlb	1	; select bank1
  5549  0427  00A8               	movwf	___awtoft@c^(0+128)
  5550  0428  31AE  26E2  3183   	fcall	___awtoft
  5551  042B  0021               	movlb	1	; select bank1
  5552  042C  0828               	movf	?___awtoft^(0+128),w
  5553  042D  0024               	movlb	4	; select bank4
  5554  042E  00DA               	movwf	_main$2841^(0+512)
  5555  042F  0021               	movlb	1	; select bank1
  5556  0430  0829               	movf	(?___awtoft+1)^(0+128),w
  5557  0431  0024               	movlb	4	; select bank4
  5558  0432  00DB               	movwf	(_main$2841+1)^(0+512)
  5559  0433  0021               	movlb	1	; select bank1
  5560  0434  082A               	movf	(?___awtoft+2)^(0+128),w
  5561  0435  0024               	movlb	4	; select bank4
  5562  0436  00DC               	movwf	(_main$2841+2)^(0+512)
  5563                           
  5564                           ;main.c: 129: CCPR4 = scaleA10kPot(knob1_prev);
  5565  0437  085A               	movf	_main$2841^(0+512),w
  5566  0438  0022               	movlb	2	; select bank2
  5567  0439  00E7               	movwf	scaleA10kPot@input^(0+256)
  5568  043A  0024               	movlb	4	; select bank4
  5569  043B  085B               	movf	(_main$2841+1)^(0+512),w
  5570  043C  0022               	movlb	2	; select bank2
  5571  043D  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5572  043E  0024               	movlb	4	; select bank4
  5573  043F  085C               	movf	(_main$2841+2)^(0+512),w
  5574  0440  0022               	movlb	2	; select bank2
  5575  0441  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5576  0442  319C  2400  3183   	fcall	_scaleA10kPot
  5577  0445  0022               	movlb	2	; select bank2
  5578  0446  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5579  0447  0026               	movlb	6	; select bank6
  5580  0448  0099               	movwf	25	;volatile
  5581  0449  0022               	movlb	2	; select bank2
  5582  044A  0867               	movf	?_scaleA10kPot^(0+256),w
  5583  044B  0026               	movlb	6	; select bank6
  5584  044C  0098               	movwf	24	;volatile
  5585                           
  5586                           ;main.c: 130: CCPR5 = scaleiA10kPot(knob1_prev);
  5587  044D  0023               	movlb	3	; select bank3
  5588  044E  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5589  044F  0021               	movlb	1	; select bank1
  5590  0450  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5591  0451  0023               	movlb	3	; select bank3
  5592  0452  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5593  0453  0021               	movlb	1	; select bank1
  5594  0454  00A8               	movwf	___awtoft@c^(0+128)
  5595  0455  31AE  26E2  3183   	fcall	___awtoft
  5596  0458  0021               	movlb	1	; select bank1
  5597  0459  0828               	movf	?___awtoft^(0+128),w
  5598  045A  0024               	movlb	4	; select bank4
  5599  045B  00DD               	movwf	_main$2842^(0+512)
  5600  045C  0021               	movlb	1	; select bank1
  5601  045D  0829               	movf	(?___awtoft+1)^(0+128),w
  5602  045E  0024               	movlb	4	; select bank4
  5603  045F  00DE               	movwf	(_main$2842+1)^(0+512)
  5604  0460  0021               	movlb	1	; select bank1
  5605  0461  082A               	movf	(?___awtoft+2)^(0+128),w
  5606  0462  0024               	movlb	4	; select bank4
  5607  0463  00DF               	movwf	(_main$2842+2)^(0+512)
  5608                           
  5609                           ;main.c: 130: CCPR5 = scaleiA10kPot(knob1_prev);
  5610  0464  085D               	movf	_main$2842^(0+512),w
  5611  0465  0022               	movlb	2	; select bank2
  5612  0466  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5613  0467  0024               	movlb	4	; select bank4
  5614  0468  085E               	movf	(_main$2842+1)^(0+512),w
  5615  0469  0022               	movlb	2	; select bank2
  5616  046A  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5617  046B  0024               	movlb	4	; select bank4
  5618  046C  085F               	movf	(_main$2842+2)^(0+512),w
  5619  046D  0022               	movlb	2	; select bank2
  5620  046E  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5621  046F  319D  25D1  3183   	fcall	_scaleiA10kPot
  5622  0472  0022               	movlb	2	; select bank2
  5623  0473  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5624  0474  0026               	movlb	6	; select bank6
  5625  0475  009D               	movwf	29	;volatile
  5626  0476  0022               	movlb	2	; select bank2
  5627  0477  0867               	movf	?_scaleiA10kPot^(0+256),w
  5628  0478  0026               	movlb	6	; select bank6
  5629  0479  009C               	movwf	28	;volatile
  5630  047A                     l9314:	
  5631                           
  5632                           ;main.c: 132: }
  5633                           ;main.c: 136: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5634  047A  0023               	movlb	3	; select bank3
  5635  047B  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5636  047C  0024               	movlb	4	; select bank4
  5637  047D  00D5               	movwf	??_main^(0+512)
  5638  047E  0023               	movlb	3	; select bank3
  5639  047F  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5640  0480  0024               	movlb	4	; select bank4
  5641  0481  00D6               	movwf	(??_main^(0+512)+1)
  5642  0482  0AD5               	incf	??_main^(0+512),f
  5643  0483  1903               	skipnz
  5644  0484  0AD6               	incf	(??_main^(0+512)+1),f
  5645  0485  0023               	movlb	3	; select bank3
  5646  0486  082A               	movf	_knob_2_pos^(0+384),w
  5647  0487  0024               	movlb	4	; select bank4
  5648  0488  0755               	addwf	??_main^(0+512),w
  5649  0489  00D7               	movwf	(??_main+2)^(0+512)
  5650  048A  0023               	movlb	3	; select bank3
  5651  048B  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5652  048C  0024               	movlb	4	; select bank4
  5653  048D  3D56               	addwfc	(??_main+1)^(0+512),w
  5654  048E  00D8               	movwf	(??_main+3)^(0+512)
  5655  048F  0858               	movf	(??_main+3)^(0+512),w
  5656  0490  3A80               	xorlw	128
  5657  0491  00D9               	movwf	(??_main+4)^(0+512)
  5658  0492  3080               	movlw	128
  5659  0493  0259               	subwf	(??_main+4)^(0+512),w
  5660  0494  1D03               	skipz
  5661  0495  2C98               	goto	u10265
  5662  0496  3004               	movlw	4
  5663  0497  0257               	subwf	(??_main+2)^(0+512),w
  5664  0498                     u10265:	
  5665  0498  1803               	skipnc
  5666  0499  2CBA               	goto	l9318
  5667  049A  0023               	movlb	3	; select bank3
  5668  049B  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5669  049C  0024               	movlb	4	; select bank4
  5670  049D  00D5               	movwf	??_main^(0+512)
  5671  049E  0023               	movlb	3	; select bank3
  5672  049F  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5673  04A0  0024               	movlb	4	; select bank4
  5674  04A1  00D6               	movwf	(??_main^(0+512)+1)
  5675  04A2  0AD5               	incf	??_main^(0+512),f
  5676  04A3  1903               	skipnz
  5677  04A4  0AD6               	incf	(??_main^(0+512)+1),f
  5678  04A5  0023               	movlb	3	; select bank3
  5679  04A6  082A               	movf	_knob_2_pos^(0+384),w
  5680  04A7  0024               	movlb	4	; select bank4
  5681  04A8  0755               	addwf	??_main^(0+512),w
  5682  04A9  00D7               	movwf	(??_main+2)^(0+512)
  5683  04AA  0023               	movlb	3	; select bank3
  5684  04AB  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5685  04AC  0024               	movlb	4	; select bank4
  5686  04AD  3D56               	addwfc	(??_main+1)^(0+512),w
  5687  04AE  00D8               	movwf	(??_main+3)^(0+512)
  5688  04AF  0858               	movf	(??_main+3)^(0+512),w
  5689  04B0  3A80               	xorlw	128
  5690  04B1  00D9               	movwf	(??_main+4)^(0+512)
  5691  04B2  307F               	movlw	127
  5692  04B3  0259               	subwf	(??_main+4)^(0+512),w
  5693  04B4  1D03               	skipz
  5694  04B5  2CB8               	goto	u10275
  5695  04B6  30FD               	movlw	253
  5696  04B7  0257               	subwf	(??_main+2)^(0+512),w
  5697  04B8                     u10275:	
  5698  04B8  1803               	skipnc
  5699  04B9  2D30               	goto	l9328
  5700  04BA                     l9318:	
  5701                           
  5702                           ;main.c: 137: knob2_prev = knob_2_pos;
  5703  04BA  0023               	movlb	3	; select bank3
  5704  04BB  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5705  04BC  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5706  04BD  082A               	movf	_knob_2_pos^(0+384),w
  5707  04BE  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5708                           
  5709                           ;main.c: 138: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5710  04BF  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5711  04C0  0024               	movlb	4	; select bank4
  5712  04C1  00D5               	movwf	??_main^(0+512)
  5713  04C2  0023               	movlb	3	; select bank3
  5714  04C3  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5715  04C4  0024               	movlb	4	; select bank4
  5716  04C5  00D6               	movwf	(??_main^(0+512)+1)
  5717  04C6  0AD5               	incf	??_main^(0+512),f
  5718  04C7  1903               	skipnz
  5719  04C8  0AD6               	incf	(??_main^(0+512)+1),f
  5720  04C9  0855               	movf	??_main^(0+512),w
  5721  04CA  3EFF               	addlw	255
  5722  04CB  0021               	movlb	1	; select bank1
  5723  04CC  00A8               	movwf	___awtoft@c^(0+128)
  5724  04CD  3003               	movlw	3
  5725  04CE  0024               	movlb	4	; select bank4
  5726  04CF  3D56               	addwfc	(??_main+1)^(0+512),w
  5727  04D0  0021               	movlb	1	; select bank1
  5728  04D1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5729  04D2  31AE  26E2  3183   	fcall	___awtoft
  5730  04D5  0021               	movlb	1	; select bank1
  5731  04D6  0828               	movf	?___awtoft^(0+128),w
  5732  04D7  0024               	movlb	4	; select bank4
  5733  04D8  00E0               	movwf	_main$2843^(0+512)
  5734  04D9  0021               	movlb	1	; select bank1
  5735  04DA  0829               	movf	(?___awtoft+1)^(0+128),w
  5736  04DB  0024               	movlb	4	; select bank4
  5737  04DC  00E1               	movwf	(_main$2843+1)^(0+512)
  5738  04DD  0021               	movlb	1	; select bank1
  5739  04DE  082A               	movf	(?___awtoft+2)^(0+128),w
  5740  04DF  0024               	movlb	4	; select bank4
  5741  04E0  00E2               	movwf	(_main$2843+2)^(0+512)
  5742                           
  5743                           ;main.c: 138: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5744  04E1  0860               	movf	_main$2843^(0+512),w
  5745  04E2  0022               	movlb	2	; select bank2
  5746  04E3  00E7               	movwf	scaleA100kPot@input^(0+256)
  5747  04E4  0024               	movlb	4	; select bank4
  5748  04E5  0861               	movf	(_main$2843+1)^(0+512),w
  5749  04E6  0022               	movlb	2	; select bank2
  5750  04E7  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5751  04E8  0024               	movlb	4	; select bank4
  5752  04E9  0862               	movf	(_main$2843+2)^(0+512),w
  5753  04EA  0022               	movlb	2	; select bank2
  5754  04EB  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5755  04EC  3199  21DE  3183   	fcall	_scaleA100kPot
  5756  04EF  0022               	movlb	2	; select bank2
  5757  04F0  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5758  04F1  0025               	movlb	5	; select bank5
  5759  04F2  0092               	movwf	18	;volatile
  5760  04F3  0022               	movlb	2	; select bank2
  5761  04F4  0867               	movf	?_scaleA100kPot^(0+256),w
  5762  04F5  0025               	movlb	5	; select bank5
  5763  04F6  0091               	movwf	17	;volatile
  5764                           
  5765                           ;main.c: 139: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5766  04F7  0023               	movlb	3	; select bank3
  5767  04F8  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5768  04F9  0024               	movlb	4	; select bank4
  5769  04FA  00D5               	movwf	??_main^(0+512)
  5770  04FB  0023               	movlb	3	; select bank3
  5771  04FC  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5772  04FD  0024               	movlb	4	; select bank4
  5773  04FE  00D6               	movwf	(??_main^(0+512)+1)
  5774  04FF  0AD5               	incf	??_main^(0+512),f
  5775  0500  1903               	skipnz
  5776  0501  0AD6               	incf	(??_main^(0+512)+1),f
  5777  0502  0855               	movf	??_main^(0+512),w
  5778  0503  3EFF               	addlw	255
  5779  0504  0021               	movlb	1	; select bank1
  5780  0505  00A8               	movwf	___awtoft@c^(0+128)
  5781  0506  3003               	movlw	3
  5782  0507  0024               	movlb	4	; select bank4
  5783  0508  3D56               	addwfc	(??_main+1)^(0+512),w
  5784  0509  0021               	movlb	1	; select bank1
  5785  050A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5786  050B  31AE  26E2  3183   	fcall	___awtoft
  5787  050E  0021               	movlb	1	; select bank1
  5788  050F  0828               	movf	?___awtoft^(0+128),w
  5789  0510  0024               	movlb	4	; select bank4
  5790  0511  00E0               	movwf	_main$2843^(0+512)
  5791  0512  0021               	movlb	1	; select bank1
  5792  0513  0829               	movf	(?___awtoft+1)^(0+128),w
  5793  0514  0024               	movlb	4	; select bank4
  5794  0515  00E1               	movwf	(_main$2843+1)^(0+512)
  5795  0516  0021               	movlb	1	; select bank1
  5796  0517  082A               	movf	(?___awtoft+2)^(0+128),w
  5797  0518  0024               	movlb	4	; select bank4
  5798  0519  00E2               	movwf	(_main$2843+2)^(0+512)
  5799                           
  5800                           ;main.c: 139: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5801  051A  0860               	movf	_main$2843^(0+512),w
  5802  051B  0022               	movlb	2	; select bank2
  5803  051C  00E7               	movwf	scaleA100kPot@input^(0+256)
  5804  051D  0024               	movlb	4	; select bank4
  5805  051E  0861               	movf	(_main$2843+1)^(0+512),w
  5806  051F  0022               	movlb	2	; select bank2
  5807  0520  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5808  0521  0024               	movlb	4	; select bank4
  5809  0522  0862               	movf	(_main$2843+2)^(0+512),w
  5810  0523  0022               	movlb	2	; select bank2
  5811  0524  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5812  0525  3199  21DE  3183   	fcall	_scaleA100kPot
  5813  0528  0022               	movlb	2	; select bank2
  5814  0529  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5815  052A  0025               	movlb	5	; select bank5
  5816  052B  0099               	movwf	25	;volatile
  5817  052C  0022               	movlb	2	; select bank2
  5818  052D  0867               	movf	?_scaleA100kPot^(0+256),w
  5819  052E  0025               	movlb	5	; select bank5
  5820  052F  0098               	movwf	24	;volatile
  5821  0530                     l9328:	
  5822                           
  5823                           ;main.c: 140: }
  5824                           ;main.c: 150: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5825  0530  0023               	movlb	3	; select bank3
  5826  0531  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5827  0532  0024               	movlb	4	; select bank4
  5828  0533  00D5               	movwf	??_main^(0+512)
  5829  0534  0023               	movlb	3	; select bank3
  5830  0535  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5831  0536  0024               	movlb	4	; select bank4
  5832  0537  00D6               	movwf	(??_main^(0+512)+1)
  5833  0538  0AD5               	incf	??_main^(0+512),f
  5834  0539  1903               	skipnz
  5835  053A  0AD6               	incf	(??_main^(0+512)+1),f
  5836  053B  0023               	movlb	3	; select bank3
  5837  053C  082C               	movf	_knob_3_pos^(0+384),w
  5838  053D  0024               	movlb	4	; select bank4
  5839  053E  0755               	addwf	??_main^(0+512),w
  5840  053F  00D7               	movwf	(??_main+2)^(0+512)
  5841  0540  0023               	movlb	3	; select bank3
  5842  0541  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5843  0542  0024               	movlb	4	; select bank4
  5844  0543  3D56               	addwfc	(??_main+1)^(0+512),w
  5845  0544  00D8               	movwf	(??_main+3)^(0+512)
  5846  0545  0858               	movf	(??_main+3)^(0+512),w
  5847  0546  3A80               	xorlw	128
  5848  0547  00D9               	movwf	(??_main+4)^(0+512)
  5849  0548  3080               	movlw	128
  5850  0549  0259               	subwf	(??_main+4)^(0+512),w
  5851  054A  1D03               	skipz
  5852  054B  2D4E               	goto	u10285
  5853  054C  3004               	movlw	4
  5854  054D  0257               	subwf	(??_main+2)^(0+512),w
  5855  054E                     u10285:	
  5856  054E  1803               	skipnc
  5857  054F  2D70               	goto	l9332
  5858  0550  0023               	movlb	3	; select bank3
  5859  0551  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5860  0552  0024               	movlb	4	; select bank4
  5861  0553  00D5               	movwf	??_main^(0+512)
  5862  0554  0023               	movlb	3	; select bank3
  5863  0555  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5864  0556  0024               	movlb	4	; select bank4
  5865  0557  00D6               	movwf	(??_main^(0+512)+1)
  5866  0558  0AD5               	incf	??_main^(0+512),f
  5867  0559  1903               	skipnz
  5868  055A  0AD6               	incf	(??_main^(0+512)+1),f
  5869  055B  0023               	movlb	3	; select bank3
  5870  055C  082C               	movf	_knob_3_pos^(0+384),w
  5871  055D  0024               	movlb	4	; select bank4
  5872  055E  0755               	addwf	??_main^(0+512),w
  5873  055F  00D7               	movwf	(??_main+2)^(0+512)
  5874  0560  0023               	movlb	3	; select bank3
  5875  0561  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5876  0562  0024               	movlb	4	; select bank4
  5877  0563  3D56               	addwfc	(??_main+1)^(0+512),w
  5878  0564  00D8               	movwf	(??_main+3)^(0+512)
  5879  0565  0858               	movf	(??_main+3)^(0+512),w
  5880  0566  3A80               	xorlw	128
  5881  0567  00D9               	movwf	(??_main+4)^(0+512)
  5882  0568  307F               	movlw	127
  5883  0569  0259               	subwf	(??_main+4)^(0+512),w
  5884  056A  1D03               	skipz
  5885  056B  2D6E               	goto	u10295
  5886  056C  30FD               	movlw	253
  5887  056D  0257               	subwf	(??_main+2)^(0+512),w
  5888  056E                     u10295:	
  5889  056E  1803               	skipnc
  5890  056F  2DDC               	goto	l9344
  5891  0570                     l9332:	
  5892                           
  5893                           ;main.c: 151: knob3_prev = knob_3_pos;
  5894  0570  0023               	movlb	3	; select bank3
  5895  0571  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5896  0572  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5897  0573  082C               	movf	_knob_3_pos^(0+384),w
  5898  0574  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5899                           
  5900                           ;main.c: 152: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5901  0575  3080               	movlw	128
  5902  0576  0021               	movlb	1	; select bank1
  5903  0577  00EA               	movwf	map@out_max^(0+128)
  5904  0578  309D               	movlw	157
  5905  0579  00EB               	movwf	(map@out_max+1)^(0+128)
  5906  057A  3043               	movlw	67
  5907  057B  00EC               	movwf	(map@out_max+2)^(0+128)
  5908  057C  3000               	movlw	0
  5909  057D  00E7               	movwf	map@out_min^(0+128)
  5910  057E  3034               	movlw	52
  5911  057F  00E8               	movwf	(map@out_min+1)^(0+128)
  5912  0580  3042               	movlw	66
  5913  0581  00E9               	movwf	(map@out_min+2)^(0+128)
  5914  0582  30C0               	movlw	192
  5915  0583  00E4               	movwf	map@in_max^(0+128)
  5916  0584  307F               	movlw	127
  5917  0585  00E5               	movwf	(map@in_max+1)^(0+128)
  5918  0586  3044               	movlw	68
  5919  0587  00E6               	movwf	(map@in_max+2)^(0+128)
  5920  0588  3000               	movlw	0
  5921  0589  00E1               	movwf	map@in_min^(0+128)
  5922  058A  3000               	movlw	0
  5923  058B  00E2               	movwf	(map@in_min+1)^(0+128)
  5924  058C  3000               	movlw	0
  5925  058D  00E3               	movwf	(map@in_min+2)^(0+128)
  5926  058E  0023               	movlb	3	; select bank3
  5927  058F  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5928  0590  0021               	movlb	1	; select bank1
  5929  0591  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5930  0592  0023               	movlb	3	; select bank3
  5931  0593  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5932  0594  0021               	movlb	1	; select bank1
  5933  0595  00A8               	movwf	___awtoft@c^(0+128)
  5934  0596  31AE  26E2  3183   	fcall	___awtoft
  5935  0599  0021               	movlb	1	; select bank1
  5936  059A  0828               	movf	?___awtoft^(0+128),w
  5937  059B  00DE               	movwf	map@x^(0+128)
  5938  059C  0829               	movf	(?___awtoft+1)^(0+128),w
  5939  059D  00DF               	movwf	(map@x+1)^(0+128)
  5940  059E  082A               	movf	(?___awtoft+2)^(0+128),w
  5941  059F  00E0               	movwf	(map@x+2)^(0+128)
  5942  05A0  319A  22EA  3183   	fcall	_map
  5943  05A3  0021               	movlb	1	; select bank1
  5944  05A4  085E               	movf	?_map^(0+128),w
  5945  05A5  0022               	movlb	2	; select bank2
  5946  05A6  00A0               	movwf	___fttol@f1^(0+256)
  5947  05A7  0021               	movlb	1	; select bank1
  5948  05A8  085F               	movf	(?_map+1)^(0+128),w
  5949  05A9  0022               	movlb	2	; select bank2
  5950  05AA  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5951  05AB  0021               	movlb	1	; select bank1
  5952  05AC  0860               	movf	(?_map+2)^(0+128),w
  5953  05AD  0022               	movlb	2	; select bank2
  5954  05AE  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5955  05AF  319A  2263  3183   	fcall	___fttol
  5956  05B2  0022               	movlb	2	; select bank2
  5957  05B3  0821               	movf	(?___fttol^(0+256)+1),w
  5958  05B4  0023               	movlb	3	; select bank3
  5959  05B5  00DC               	movwf	(_symmetry+1)^(0+384)
  5960  05B6  0022               	movlb	2	; select bank2
  5961  05B7  0820               	movf	?___fttol^(0+256),w
  5962  05B8  0023               	movlb	3	; select bank3
  5963  05B9  00DB               	movwf	_symmetry^(0+384)
  5964                           
  5965                           ;main.c: 154: modulation_changed = 1;
  5966  05BA  01C2               	clrf	_modulation_changed^(0+384)
  5967  05BB  0AC2               	incf	_modulation_changed^(0+384),f
  5968                           
  5969                           ;main.c: 155: if (symmetry > 174 && symmetry < 185) {
  5970  05BC  085C               	movf	(_symmetry+1)^(0+384),w
  5971  05BD  3A80               	xorlw	128
  5972  05BE  0024               	movlb	4	; select bank4
  5973  05BF  00D5               	movwf	??_main^(0+512)
  5974  05C0  3080               	movlw	128
  5975  05C1  0255               	subwf	??_main^(0+512),w
  5976  05C2  1D03               	skipz
  5977  05C3  2DC7               	goto	u10305
  5978  05C4  30AF               	movlw	175
  5979  05C5  0023               	movlb	3	; select bank3
  5980  05C6  025B               	subwf	_symmetry^(0+384),w
  5981  05C7                     u10305:	
  5982  05C7  1C03               	skipc
  5983  05C8  2DDA               	goto	l364
  5984  05C9  0023               	movlb	3	; select bank3
  5985  05CA  085C               	movf	(_symmetry+1)^(0+384),w
  5986  05CB  3A80               	xorlw	128
  5987  05CC  0024               	movlb	4	; select bank4
  5988  05CD  00D5               	movwf	??_main^(0+512)
  5989  05CE  3080               	movlw	128
  5990  05CF  0255               	subwf	??_main^(0+512),w
  5991  05D0  1D03               	skipz
  5992  05D1  2DD5               	goto	u10315
  5993  05D2  30B9               	movlw	185
  5994  05D3  0023               	movlb	3	; select bank3
  5995  05D4  025B               	subwf	_symmetry^(0+384),w
  5996  05D5                     u10315:	
  5997  05D5  1803               	skipnc
  5998  05D6  2DDA               	goto	l364
  5999                           
  6000                           ;main.c: 156: LATBbits.LATB1 = 1;
  6001  05D7  0022               	movlb	2	; select bank2
  6002  05D8  148D               	bsf	13,1	;volatile
  6003                           
  6004                           ;main.c: 157: } else {
  6005  05D9  2DDC               	goto	l9344
  6006  05DA                     l364:	
  6007                           
  6008                           ;main.c: 158: LATBbits.LATB1 = 0;
  6009  05DA  0022               	movlb	2	; select bank2
  6010  05DB  108D               	bcf	13,1	;volatile
  6011  05DC                     l9344:	
  6012                           
  6013                           ;main.c: 159: }
  6014                           ;main.c: 160: }
  6015                           ;main.c: 169: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6016  05DC  0023               	movlb	3	; select bank3
  6017  05DD  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6018  05DE  0024               	movlb	4	; select bank4
  6019  05DF  00D5               	movwf	??_main^(0+512)
  6020  05E0  0023               	movlb	3	; select bank3
  6021  05E1  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6022  05E2  0024               	movlb	4	; select bank4
  6023  05E3  00D6               	movwf	(??_main^(0+512)+1)
  6024  05E4  0AD5               	incf	??_main^(0+512),f
  6025  05E5  1903               	skipnz
  6026  05E6  0AD6               	incf	(??_main^(0+512)+1),f
  6027  05E7  0023               	movlb	3	; select bank3
  6028  05E8  082E               	movf	_knob_4_pos^(0+384),w
  6029  05E9  0024               	movlb	4	; select bank4
  6030  05EA  0755               	addwf	??_main^(0+512),w
  6031  05EB  00D7               	movwf	(??_main+2)^(0+512)
  6032  05EC  0023               	movlb	3	; select bank3
  6033  05ED  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6034  05EE  0024               	movlb	4	; select bank4
  6035  05EF  3D56               	addwfc	(??_main+1)^(0+512),w
  6036  05F0  00D8               	movwf	(??_main+3)^(0+512)
  6037  05F1  0858               	movf	(??_main+3)^(0+512),w
  6038  05F2  3A80               	xorlw	128
  6039  05F3  00D9               	movwf	(??_main+4)^(0+512)
  6040  05F4  3080               	movlw	128
  6041  05F5  0259               	subwf	(??_main+4)^(0+512),w
  6042  05F6  1D03               	skipz
  6043  05F7  2DFA               	goto	u10325
  6044  05F8  3004               	movlw	4
  6045  05F9  0257               	subwf	(??_main+2)^(0+512),w
  6046  05FA                     u10325:	
  6047  05FA  1803               	skipnc
  6048  05FB  2E1C               	goto	l9348
  6049  05FC  0023               	movlb	3	; select bank3
  6050  05FD  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6051  05FE  0024               	movlb	4	; select bank4
  6052  05FF  00D5               	movwf	??_main^(0+512)
  6053  0600  0023               	movlb	3	; select bank3
  6054  0601  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6055  0602  0024               	movlb	4	; select bank4
  6056  0603  00D6               	movwf	(??_main^(0+512)+1)
  6057  0604  0AD5               	incf	??_main^(0+512),f
  6058  0605  1903               	skipnz
  6059  0606  0AD6               	incf	(??_main^(0+512)+1),f
  6060  0607  0023               	movlb	3	; select bank3
  6061  0608  082E               	movf	_knob_4_pos^(0+384),w
  6062  0609  0024               	movlb	4	; select bank4
  6063  060A  0755               	addwf	??_main^(0+512),w
  6064  060B  00D7               	movwf	(??_main+2)^(0+512)
  6065  060C  0023               	movlb	3	; select bank3
  6066  060D  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6067  060E  0024               	movlb	4	; select bank4
  6068  060F  3D56               	addwfc	(??_main+1)^(0+512),w
  6069  0610  00D8               	movwf	(??_main+3)^(0+512)
  6070  0611  0858               	movf	(??_main+3)^(0+512),w
  6071  0612  3A80               	xorlw	128
  6072  0613  00D9               	movwf	(??_main+4)^(0+512)
  6073  0614  307F               	movlw	127
  6074  0615  0259               	subwf	(??_main+4)^(0+512),w
  6075  0616  1D03               	skipz
  6076  0617  2E1A               	goto	u10335
  6077  0618  30FD               	movlw	253
  6078  0619  0257               	subwf	(??_main+2)^(0+512),w
  6079  061A                     u10335:	
  6080  061A  1803               	skipnc
  6081  061B  2E6D               	goto	l9354
  6082  061C                     l9348:	
  6083                           
  6084                           ;main.c: 170: knob4_prev = knob_4_pos;
  6085  061C  0023               	movlb	3	; select bank3
  6086  061D  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6087  061E  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6088  061F  082E               	movf	_knob_4_pos^(0+384),w
  6089  0620  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6090                           
  6091                           ;main.c: 171: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6092  0621  3040               	movlw	64
  6093  0622  0021               	movlb	1	; select bank1
  6094  0623  00EA               	movwf	map@out_max^(0+128)
  6095  0624  3030               	movlw	48
  6096  0625  00EB               	movwf	(map@out_max+1)^(0+128)
  6097  0626  3045               	movlw	69
  6098  0627  00EC               	movwf	(map@out_max+2)^(0+128)
  6099  0628  3000               	movlw	0
  6100  0629  00E7               	movwf	map@out_min^(0+128)
  6101  062A  3034               	movlw	52
  6102  062B  00E8               	movwf	(map@out_min+1)^(0+128)
  6103  062C  3043               	movlw	67
  6104  062D  00E9               	movwf	(map@out_min+2)^(0+128)
  6105  062E  30C0               	movlw	192
  6106  062F  00E4               	movwf	map@in_max^(0+128)
  6107  0630  307F               	movlw	127
  6108  0631  00E5               	movwf	(map@in_max+1)^(0+128)
  6109  0632  3044               	movlw	68
  6110  0633  00E6               	movwf	(map@in_max+2)^(0+128)
  6111  0634  3000               	movlw	0
  6112  0635  00E1               	movwf	map@in_min^(0+128)
  6113  0636  3000               	movlw	0
  6114  0637  00E2               	movwf	(map@in_min+1)^(0+128)
  6115  0638  3000               	movlw	0
  6116  0639  00E3               	movwf	(map@in_min+2)^(0+128)
  6117  063A  0023               	movlb	3	; select bank3
  6118  063B  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6119  063C  0021               	movlb	1	; select bank1
  6120  063D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6121  063E  0023               	movlb	3	; select bank3
  6122  063F  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6123  0640  0021               	movlb	1	; select bank1
  6124  0641  00A8               	movwf	___awtoft@c^(0+128)
  6125  0642  31AE  26E2  3183   	fcall	___awtoft
  6126  0645  0021               	movlb	1	; select bank1
  6127  0646  0828               	movf	?___awtoft^(0+128),w
  6128  0647  00DE               	movwf	map@x^(0+128)
  6129  0648  0829               	movf	(?___awtoft+1)^(0+128),w
  6130  0649  00DF               	movwf	(map@x+1)^(0+128)
  6131  064A  082A               	movf	(?___awtoft+2)^(0+128),w
  6132  064B  00E0               	movwf	(map@x+2)^(0+128)
  6133  064C  319A  22EA  3183   	fcall	_map
  6134  064F  0021               	movlb	1	; select bank1
  6135  0650  085E               	movf	?_map^(0+128),w
  6136  0651  0022               	movlb	2	; select bank2
  6137  0652  00A0               	movwf	___fttol@f1^(0+256)
  6138  0653  0021               	movlb	1	; select bank1
  6139  0654  085F               	movf	(?_map+1)^(0+128),w
  6140  0655  0022               	movlb	2	; select bank2
  6141  0656  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6142  0657  0021               	movlb	1	; select bank1
  6143  0658  0860               	movf	(?_map+2)^(0+128),w
  6144  0659  0022               	movlb	2	; select bank2
  6145  065A  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6146  065B  319A  2263  3183   	fcall	___fttol
  6147  065E  0022               	movlb	2	; select bank2
  6148  065F  0820               	movf	?___fttol^(0+256),w
  6149  0660  0023               	movlb	3	; select bank3
  6150  0661  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  6151  0662  0022               	movlb	2	; select bank2
  6152  0663  0821               	movf	(?___fttol^(0+256)+1),w
  6153  0664  0023               	movlb	3	; select bank3
  6154  0665  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6155  0666  0D89               	rlf	9,f
  6156  0667  3B89               	subwfb	9,f
  6157  0668  0989               	comf	9,f
  6158  0669  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6159  066A  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6160                           
  6161                           ;main.c: 172: mod_time_changed = 1;
  6162  066B  01E4               	clrf	_mod_time_changed^(0+384)
  6163  066C  0AE4               	incf	_mod_time_changed^(0+384),f
  6164  066D                     l9354:	
  6165                           
  6166                           ;main.c: 174: }
  6167                           ;main.c: 177: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6168  066D  0023               	movlb	3	; select bank3
  6169  066E  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6170  066F  0024               	movlb	4	; select bank4
  6171  0670  00D5               	movwf	??_main^(0+512)
  6172  0671  0023               	movlb	3	; select bank3
  6173  0672  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6174  0673  0024               	movlb	4	; select bank4
  6175  0674  00D6               	movwf	(??_main^(0+512)+1)
  6176  0675  0AD5               	incf	??_main^(0+512),f
  6177  0676  1903               	skipnz
  6178  0677  0AD6               	incf	(??_main^(0+512)+1),f
  6179  0678  0023               	movlb	3	; select bank3
  6180  0679  0830               	movf	_knob_5_pos^(0+384),w
  6181  067A  0024               	movlb	4	; select bank4
  6182  067B  0755               	addwf	??_main^(0+512),w
  6183  067C  00D7               	movwf	(??_main+2)^(0+512)
  6184  067D  0023               	movlb	3	; select bank3
  6185  067E  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6186  067F  0024               	movlb	4	; select bank4
  6187  0680  3D56               	addwfc	(??_main+1)^(0+512),w
  6188  0681  00D8               	movwf	(??_main+3)^(0+512)
  6189  0682  0858               	movf	(??_main+3)^(0+512),w
  6190  0683  3A80               	xorlw	128
  6191  0684  00D9               	movwf	(??_main+4)^(0+512)
  6192  0685  3080               	movlw	128
  6193  0686  0259               	subwf	(??_main+4)^(0+512),w
  6194  0687  1D03               	skipz
  6195  0688  2E8B               	goto	u10345
  6196  0689  3004               	movlw	4
  6197  068A  0257               	subwf	(??_main+2)^(0+512),w
  6198  068B                     u10345:	
  6199  068B  1803               	skipnc
  6200  068C  2EAD               	goto	l9358
  6201  068D  0023               	movlb	3	; select bank3
  6202  068E  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6203  068F  0024               	movlb	4	; select bank4
  6204  0690  00D5               	movwf	??_main^(0+512)
  6205  0691  0023               	movlb	3	; select bank3
  6206  0692  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6207  0693  0024               	movlb	4	; select bank4
  6208  0694  00D6               	movwf	(??_main^(0+512)+1)
  6209  0695  0AD5               	incf	??_main^(0+512),f
  6210  0696  1903               	skipnz
  6211  0697  0AD6               	incf	(??_main^(0+512)+1),f
  6212  0698  0023               	movlb	3	; select bank3
  6213  0699  0830               	movf	_knob_5_pos^(0+384),w
  6214  069A  0024               	movlb	4	; select bank4
  6215  069B  0755               	addwf	??_main^(0+512),w
  6216  069C  00D7               	movwf	(??_main+2)^(0+512)
  6217  069D  0023               	movlb	3	; select bank3
  6218  069E  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6219  069F  0024               	movlb	4	; select bank4
  6220  06A0  3D56               	addwfc	(??_main+1)^(0+512),w
  6221  06A1  00D8               	movwf	(??_main+3)^(0+512)
  6222  06A2  0858               	movf	(??_main+3)^(0+512),w
  6223  06A3  3A80               	xorlw	128
  6224  06A4  00D9               	movwf	(??_main+4)^(0+512)
  6225  06A5  307F               	movlw	127
  6226  06A6  0259               	subwf	(??_main+4)^(0+512),w
  6227  06A7  1D03               	skipz
  6228  06A8  2EAB               	goto	u10355
  6229  06A9  30FD               	movlw	253
  6230  06AA  0257               	subwf	(??_main+2)^(0+512),w
  6231  06AB                     u10355:	
  6232  06AB  1803               	skipnc
  6233  06AC  2EF7               	goto	l9362
  6234  06AD                     l9358:	
  6235                           
  6236                           ;main.c: 178: knob5_prev = knob_5_pos;
  6237  06AD  0023               	movlb	3	; select bank3
  6238  06AE  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6239  06AF  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6240  06B0  0830               	movf	_knob_5_pos^(0+384),w
  6241  06B1  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6242                           
  6243                           ;main.c: 179: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6244  06B2  3000               	movlw	0
  6245  06B3  0021               	movlb	1	; select bank1
  6246  06B4  00EA               	movwf	map@out_max^(0+128)
  6247  06B5  3000               	movlw	0
  6248  06B6  00EB               	movwf	(map@out_max+1)^(0+128)
  6249  06B7  3000               	movlw	0
  6250  06B8  00EC               	movwf	(map@out_max+2)^(0+128)
  6251  06B9  3060               	movlw	96
  6252  06BA  00E7               	movwf	map@out_min^(0+128)
  6253  06BB  309F               	movlw	159
  6254  06BC  00E8               	movwf	(map@out_min+1)^(0+128)
  6255  06BD  3044               	movlw	68
  6256  06BE  00E9               	movwf	(map@out_min+2)^(0+128)
  6257  06BF  30C0               	movlw	192
  6258  06C0  00E4               	movwf	map@in_max^(0+128)
  6259  06C1  307F               	movlw	127
  6260  06C2  00E5               	movwf	(map@in_max+1)^(0+128)
  6261  06C3  3044               	movlw	68
  6262  06C4  00E6               	movwf	(map@in_max+2)^(0+128)
  6263  06C5  3000               	movlw	0
  6264  06C6  00E1               	movwf	map@in_min^(0+128)
  6265  06C7  3000               	movlw	0
  6266  06C8  00E2               	movwf	(map@in_min+1)^(0+128)
  6267  06C9  3000               	movlw	0
  6268  06CA  00E3               	movwf	(map@in_min+2)^(0+128)
  6269  06CB  0023               	movlb	3	; select bank3
  6270  06CC  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6271  06CD  0021               	movlb	1	; select bank1
  6272  06CE  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6273  06CF  0023               	movlb	3	; select bank3
  6274  06D0  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6275  06D1  0021               	movlb	1	; select bank1
  6276  06D2  00A8               	movwf	___awtoft@c^(0+128)
  6277  06D3  31AE  26E2  3183   	fcall	___awtoft
  6278  06D6  0021               	movlb	1	; select bank1
  6279  06D7  0828               	movf	?___awtoft^(0+128),w
  6280  06D8  00DE               	movwf	map@x^(0+128)
  6281  06D9  0829               	movf	(?___awtoft+1)^(0+128),w
  6282  06DA  00DF               	movwf	(map@x+1)^(0+128)
  6283  06DB  082A               	movf	(?___awtoft+2)^(0+128),w
  6284  06DC  00E0               	movwf	(map@x+2)^(0+128)
  6285  06DD  319A  22EA  3183   	fcall	_map
  6286  06E0  0021               	movlb	1	; select bank1
  6287  06E1  085E               	movf	?_map^(0+128),w
  6288  06E2  0022               	movlb	2	; select bank2
  6289  06E3  00A0               	movwf	___fttol@f1^(0+256)
  6290  06E4  0021               	movlb	1	; select bank1
  6291  06E5  085F               	movf	(?_map+1)^(0+128),w
  6292  06E6  0022               	movlb	2	; select bank2
  6293  06E7  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6294  06E8  0021               	movlb	1	; select bank1
  6295  06E9  0860               	movf	(?_map+2)^(0+128),w
  6296  06EA  0022               	movlb	2	; select bank2
  6297  06EB  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6298  06EC  319A  2263  3183   	fcall	___fttol
  6299  06EF  0022               	movlb	2	; select bank2
  6300  06F0  0821               	movf	(?___fttol^(0+256)+1),w
  6301  06F1  0024               	movlb	4	; select bank4
  6302  06F2  00C2               	movwf	(_adjusted_pot_value+1)^(0+512)
  6303  06F3  0022               	movlb	2	; select bank2
  6304  06F4  0820               	movf	?___fttol^(0+256),w
  6305  06F5  0024               	movlb	4	; select bank4
  6306  06F6  00C1               	movwf	_adjusted_pot_value^(0+512)
  6307  06F7                     l9362:	
  6308                           
  6309                           ;main.c: 180: }
  6310                           ;main.c: 185: if (mod_time_changed == 1) {
  6311  06F7  0023               	movlb	3	; select bank3
  6312  06F8  0364               	decf	_mod_time_changed^(0+384),w
  6313  06F9  1D03               	btfss	3,2
  6314  06FA  2F31               	goto	l9374
  6315                           
  6316                           ;main.c: 187: delay_time = baseline_mod_time;
  6317  06FB  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
  6318  06FC  0020               	movlb	0	; select bank0
  6319  06FD  00D5               	movwf	_delay_time+3	;volatile
  6320  06FE  0023               	movlb	3	; select bank3
  6321  06FF  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
  6322  0700  0020               	movlb	0	; select bank0
  6323  0701  00D4               	movwf	_delay_time+2	;volatile
  6324  0702  0023               	movlb	3	; select bank3
  6325  0703  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6326  0704  0020               	movlb	0	; select bank0
  6327  0705  00D3               	movwf	_delay_time+1	;volatile
  6328  0706  0023               	movlb	3	; select bank3
  6329  0707  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6330  0708  0020               	movlb	0	; select bank0
  6331  0709  00D2               	movwf	_delay_time	;volatile
  6332                           
  6333                           ;main.c: 188: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6334  070A  0023               	movlb	3	; select bank3
  6335  070B  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6336  070C  0022               	movlb	2	; select bank2
  6337  070D  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6338  070E  0023               	movlb	3	; select bank3
  6339  070F  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6340  0710  0022               	movlb	2	; select bank2
  6341  0711  00AE               	movwf	set_subdivision@x^(0+256)
  6342  0712  0020               	movlb	0	; select bank0
  6343  0713  085B               	movf	_top_push_state+1,w
  6344  0714  0022               	movlb	2	; select bank2
  6345  0715  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6346  0716  0020               	movlb	0	; select bank0
  6347  0717  085A               	movf	_top_push_state,w
  6348  0718  0022               	movlb	2	; select bank2
  6349  0719  00B0               	movwf	set_subdivision@y^(0+256)
  6350  071A  319B  2375  3183   	fcall	_set_subdivision
  6351  071D  0022               	movlb	2	; select bank2
  6352  071E  082E               	movf	?_set_subdivision^(0+256),w
  6353  071F  0020               	movlb	0	; select bank0
  6354  0720  00D2               	movwf	_delay_time	;volatile
  6355  0721  0022               	movlb	2	; select bank2
  6356  0722  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6357  0723  0020               	movlb	0	; select bank0
  6358  0724  00D3               	movwf	_delay_time+1	;volatile
  6359  0725  0D89               	rlf	9,f
  6360  0726  3B89               	subwfb	9,f
  6361  0727  0989               	comf	9,f
  6362  0728  00D4               	movwf	_delay_time+2	;volatile
  6363  0729  00D5               	movwf	_delay_time+3	;volatile
  6364                           
  6365                           ;main.c: 189: getModulationDelayTime();
  6366  072A  31A5  2590  3183   	fcall	_getModulationDelayTime
  6367                           
  6368                           ;main.c: 190: modulation_changed = 1;
  6369  072D  0023               	movlb	3	; select bank3
  6370  072E  01C2               	clrf	_modulation_changed^(0+384)
  6371  072F  0AC2               	incf	_modulation_changed^(0+384),f
  6372                           
  6373                           ;main.c: 191: mod_time_changed = 0;
  6374  0730  01E4               	clrf	_mod_time_changed^(0+384)
  6375  0731                     l9374:	
  6376                           
  6377                           ;main.c: 192: }
  6378                           ;main.c: 195: if (modulation_changed == 1) {
  6379  0731  0342               	decf	_modulation_changed^(0+384),w
  6380  0732  1D03               	btfss	3,2
  6381  0733  2B82               	goto	l9274
  6382                           
  6383                           ;main.c: 196: updateModulationArray();
  6384  0734  318D  25BA  3183   	fcall	_updateModulationArray
  6385                           
  6386                           ;main.c: 197: isInitialized = 1;
  6387  0737  0023               	movlb	3	; select bank3
  6388  0738  01BE               	clrf	_isInitialized^(0+384)
  6389  0739  0ABE               	incf	_isInitialized^(0+384),f
  6390  073A  2B82               	goto	l9274
  6391  073B                     __end_of_main:	
  6392                           
  6393                           	psect	text1
  6394  1800                     __ptext1:	
  6395 ;; *************** function _update_selectMode *****************
  6396 ;; Defined at:
  6397 ;;		line 139 in file "tactiles.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  1    wreg      void 
  6404 ;; Registers used:
  6405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6413 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6414 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6415 ;;Total ram usage:        1 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    5
  6418 ;; This function calls:
  6419 ;;		_setExpressionDisplay
  6420 ;;		_setPresetDisplay
  6421 ;; This function is called by:
  6422 ;;		_main
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           
  6427                           ;psect for function _update_selectMode
  6428  1800                     _update_selectMode:	
  6429                           
  6430                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6431                           
  6432                           ;incstack = 0
  6433                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6434  1800  0020               	movlb	0	; select bank0
  6435  1801  0850               	movf	_mode2_state,w
  6436  1802  1D03               	btfss	3,2
  6437  1803  2807               	goto	l1004
  6438  1804  0351               	decf	_presetSaveMode,w
  6439  1805  1D03               	btfss	3,2
  6440  1806  0008               	return
  6441  1807                     l1004:	
  6442                           ;tactiles.c: 142: return;
  6443                           
  6444                           
  6445                           ;tactiles.c: 143: }
  6446                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6447  1807  1B8F               	btfsc	15,7	;volatile
  6448  1808  2855               	goto	l8872
  6449                           
  6450                           ;tactiles.c: 145: debounce_mode1++;
  6451  1809  3001               	movlw	1
  6452  180A  0024               	movlb	4	; select bank4
  6453  180B  07C7               	addwf	_debounce_mode1^(0+512),f
  6454  180C  3000               	movlw	0
  6455  180D  3DC8               	addwfc	(_debounce_mode1+1)^(0+512),f
  6456                           
  6457                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6458  180E  0848               	movf	(_debounce_mode1+1)^(0+512),w
  6459  180F  3A80               	xorlw	128
  6460  1810  0021               	movlb	1	; select bank1
  6461  1811  00A7               	movwf	??_update_selectMode^(0+128)
  6462  1812  3080               	movlw	128
  6463  1813  0227               	subwf	??_update_selectMode^(0+128),w
  6464  1814  1D03               	skipz
  6465  1815  2819               	goto	u9465
  6466  1816  301A               	movlw	26
  6467  1817  0024               	movlb	4	; select bank4
  6468  1818  0247               	subwf	_debounce_mode1^(0+512),w
  6469  1819                     u9465:	
  6470  1819  1C03               	skipc
  6471  181A  0008               	return
  6472                           
  6473                           ;tactiles.c: 147: debounce_mode1 = 25;
  6474  181B  3019               	movlw	25
  6475  181C  0024               	movlb	4	; select bank4
  6476  181D  00C7               	movwf	_debounce_mode1^(0+512)
  6477  181E  3000               	movlw	0
  6478  181F  00C8               	movwf	(_debounce_mode1^(0+512)+1)
  6479                           
  6480                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6481  1820  0020               	movlb	0	; select bank0
  6482  1821  0850               	movf	_mode2_state,w
  6483  1822  0023               	movlb	3	; select bank3
  6484  1823  0665               	xorwf	_presetModeCnst^(0+384),w
  6485  1824  1903               	skipnz
  6486  1825  282A               	goto	l8854
  6487  1826  0020               	movlb	0	; select bank0
  6488  1827  0351               	decf	_presetSaveMode,w
  6489  1828  1D03               	btfss	3,2
  6490  1829  283B               	goto	l8862
  6491  182A                     l8854:	
  6492                           
  6493                           ;tactiles.c: 149: presetChannel++;
  6494  182A  3001               	movlw	1
  6495  182B  0021               	movlb	1	; select bank1
  6496  182C  00A7               	movwf	??_update_selectMode^(0+128)
  6497  182D  0827               	movf	??_update_selectMode^(0+128),w
  6498  182E  0022               	movlb	2	; select bank2
  6499  182F  07EF               	addwf	_presetChannel^(0+256),f
  6500                           
  6501                           ;tactiles.c: 150: if (presetChannel > 10) {
  6502  1830  300B               	movlw	11
  6503  1831  026F               	subwf	_presetChannel^(0+256),w
  6504  1832  1C03               	skipc
  6505  1833  2836               	goto	l8860
  6506                           
  6507                           ;tactiles.c: 151: presetChannel = 1;
  6508  1834  01EF               	clrf	_presetChannel^(0+256)
  6509  1835  0AEF               	incf	_presetChannel^(0+256),f
  6510  1836                     l8860:	
  6511                           
  6512                           ;tactiles.c: 152: }
  6513                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6514  1836  086F               	movf	_presetChannel^(0+256),w
  6515  1837  31A1  210F  3198   	fcall	_setPresetDisplay
  6516                           
  6517                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6518  183A  2851               	goto	l1015
  6519  183B                     l8862:	
  6520  183B  0020               	movlb	0	; select bank0
  6521  183C  0850               	movf	_mode2_state,w
  6522  183D  0023               	movlb	3	; select bank3
  6523  183E  0662               	xorwf	_expressModeCnst^(0+384),w
  6524  183F  1D03               	skipz
  6525  1840  2851               	goto	l1015
  6526                           
  6527                           ;tactiles.c: 155: expressionChannel++;
  6528  1841  3001               	movlw	1
  6529  1842  0021               	movlb	1	; select bank1
  6530  1843  00A7               	movwf	??_update_selectMode^(0+128)
  6531  1844  0827               	movf	??_update_selectMode^(0+128),w
  6532  1845  0023               	movlb	3	; select bank3
  6533  1846  07E3               	addwf	_expressionChannel^(0+384),f
  6534                           
  6535                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6536  1847  3006               	movlw	6
  6537  1848  0263               	subwf	_expressionChannel^(0+384),w
  6538  1849  1C03               	skipc
  6539  184A  284D               	goto	l8870
  6540                           
  6541                           ;tactiles.c: 157: expressionChannel = 1;
  6542  184B  01E3               	clrf	_expressionChannel^(0+384)
  6543  184C  0AE3               	incf	_expressionChannel^(0+384),f
  6544  184D                     l8870:	
  6545                           
  6546                           ;tactiles.c: 158: }
  6547                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6548  184D  0863               	movf	_expressionChannel^(0+384),w
  6549  184E  31AE  2602  3198   	fcall	_setExpressionDisplay
  6550  1851                     l1015:	
  6551                           ;tactiles.c: 160: }
  6552                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6553                           
  6554  1851  0020               	movlb	0	; select bank0
  6555  1852  1B8F               	btfsc	15,7	;volatile
  6556  1853  0008               	return
  6557  1854  2851               	goto	l1015
  6558  1855                     l8872:	
  6559                           ;tactiles.c: 168: }
  6560                           ;tactiles.c: 169: }
  6561                           ;tactiles.c: 170: } else {
  6562                           
  6563                           
  6564                           ;tactiles.c: 171: debounce_mode1 = 0;
  6565  1855  0024               	movlb	4	; select bank4
  6566  1856  01C7               	clrf	_debounce_mode1^(0+512)
  6567  1857  01C8               	clrf	(_debounce_mode1+1)^(0+512)
  6568  1858  0008               	return
  6569  1859                     __end_of_update_selectMode:	
  6570                           
  6571                           	psect	text2
  6572  20D7                     __ptext2:	
  6573 ;; *************** function _update_mode *****************
  6574 ;; Defined at:
  6575 ;;		line 87 in file "tactiles.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;		None
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;		None
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  1    wreg      void 
  6582 ;; Registers used:
  6583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6591 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6592 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6593 ;;Total ram usage:        1 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    6
  6596 ;; This function calls:
  6597 ;;		_resetRingLEDs
  6598 ;;		_setPedalMode
  6599 ;; This function is called by:
  6600 ;;		_main
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           
  6605                           ;psect for function _update_mode
  6606  20D7                     _update_mode:	
  6607                           
  6608                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6609                           
  6610                           ;incstack = 0
  6611                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6612  20D7  0020               	movlb	0	; select bank0
  6613  20D8  180E               	btfsc	14,0	;volatile
  6614  20D9  290B               	goto	l8840
  6615                           
  6616                           ;tactiles.c: 95: debounce_mode2++;
  6617  20DA  3001               	movlw	1
  6618  20DB  0024               	movlb	4	; select bank4
  6619  20DC  07C9               	addwf	_debounce_mode2^(0+512),f
  6620  20DD  3000               	movlw	0
  6621  20DE  3DCA               	addwfc	(_debounce_mode2+1)^(0+512),f
  6622                           
  6623                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6624  20DF  084A               	movf	(_debounce_mode2+1)^(0+512),w
  6625  20E0  3A80               	xorlw	128
  6626  20E1  0021               	movlb	1	; select bank1
  6627  20E2  00A7               	movwf	??_update_mode^(0+128)
  6628  20E3  3080               	movlw	128
  6629  20E4  0227               	subwf	??_update_mode^(0+128),w
  6630  20E5  1D03               	skipz
  6631  20E6  28EA               	goto	u9395
  6632  20E7  301A               	movlw	26
  6633  20E8  0024               	movlb	4	; select bank4
  6634  20E9  0249               	subwf	_debounce_mode2^(0+512),w
  6635  20EA                     u9395:	
  6636  20EA  1C03               	skipc
  6637  20EB  0008               	return
  6638                           
  6639                           ;tactiles.c: 97: debounce_mode2 = 25;
  6640  20EC  3019               	movlw	25
  6641  20ED  0024               	movlb	4	; select bank4
  6642  20EE  00C9               	movwf	_debounce_mode2^(0+512)
  6643  20EF  3000               	movlw	0
  6644  20F0  00CA               	movwf	(_debounce_mode2^(0+512)+1)
  6645                           
  6646                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6647  20F1  0020               	movlb	0	; select bank0
  6648  20F2  0351               	decf	_presetSaveMode,w
  6649  20F3  1D03               	btfss	3,2
  6650  20F4  28FA               	goto	l8832
  6651                           
  6652                           ;tactiles.c: 100: presetSaveMode = 0;
  6653  20F5  01D1               	clrf	_presetSaveMode
  6654                           
  6655                           ;tactiles.c: 101: resetRingLEDs();
  6656  20F6  31AE  261A  31A0   	fcall	_resetRingLEDs
  6657                           
  6658                           ;tactiles.c: 102: } else {
  6659  20F9  2904               	goto	l8838
  6660  20FA                     l8832:	
  6661                           
  6662                           ;tactiles.c: 103: mode2_state++;
  6663  20FA  3001               	movlw	1
  6664  20FB  0021               	movlb	1	; select bank1
  6665  20FC  00A7               	movwf	??_update_mode^(0+128)
  6666  20FD  0827               	movf	??_update_mode^(0+128),w
  6667  20FE  0020               	movlb	0	; select bank0
  6668  20FF  07D0               	addwf	_mode2_state,f
  6669                           
  6670                           ;tactiles.c: 104: if (mode2_state > 2) {
  6671  2100  3003               	movlw	3
  6672  2101  0250               	subwf	_mode2_state,w
  6673  2102  1803               	btfsc	3,0
  6674                           
  6675                           ;tactiles.c: 105: mode2_state = 0;
  6676  2103  01D0               	clrf	_mode2_state
  6677  2104                     l8838:	
  6678                           
  6679                           ;tactiles.c: 106: }
  6680                           ;tactiles.c: 107: }
  6681                           ;tactiles.c: 109: setPedalMode();
  6682  2104  31AF  2704  31A0   	fcall	_setPedalMode
  6683  2107                     l989:	
  6684                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6685                           
  6686  2107  0020               	movlb	0	; select bank0
  6687  2108  180E               	btfsc	14,0	;volatile
  6688  2109  0008               	return
  6689  210A  2907               	goto	l989
  6690  210B                     l8840:	
  6691                           ;tactiles.c: 111: }
  6692                           ;tactiles.c: 112: }
  6693                           ;tactiles.c: 113: } else {
  6694                           
  6695                           
  6696                           ;tactiles.c: 114: debounce_mode2 = 0;
  6697  210B  0024               	movlb	4	; select bank4
  6698  210C  01C9               	clrf	_debounce_mode2^(0+512)
  6699  210D  01CA               	clrf	(_debounce_mode2+1)^(0+512)
  6700  210E  0008               	return
  6701  210F                     __end_of_update_mode:	
  6702                           
  6703                           	psect	text3
  6704  0BD3                     __ptext3:	
  6705 ;; *************** function _updateSwitchTap *****************
  6706 ;; Defined at:
  6707 ;;		line 48 in file "SwitchTap.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6712 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  1    wreg      void 
  6715 ;; Registers used:
  6716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6723 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6724 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6725 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6726 ;;Total ram usage:        9 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    8
  6729 ;; This function calls:
  6730 ;;		___aldiv
  6731 ;;		_setDoublePressState
  6732 ;;		_setLongTapState
  6733 ;; This function is called by:
  6734 ;;		_main
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           
  6739                           ;psect for function _updateSwitchTap
  6740  0BD3                     _updateSwitchTap:	
  6741                           
  6742                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6743                           
  6744                           ;incstack = 0
  6745                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6746  0BD3  0021               	movlb	1	; select bank1
  6747  0BD4  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6748                           
  6749                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6750  0BD5  0020               	movlb	0	; select bank0
  6751  0BD6  1810               	btfsc	16,0	;volatile
  6752  0BD7  2BDF               	goto	l8996
  6753                           
  6754                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6755  0BD8  0022               	movlb	2	; select bank2
  6756  0BD9  086E               	movf	_switchTap_pressed^(0+256),w
  6757  0BDA  1903               	btfsc	3,2
  6758  0BDB  2BEA               	goto	l1418
  6759                           
  6760                           ;SwitchTap.c: 59: switchTap_pressed--;
  6761  0BDC  3001               	movlw	1
  6762  0BDD  02EE               	subwf	_switchTap_pressed^(0+256),f
  6763                           
  6764                           ;SwitchTap.c: 60: }
  6765                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6766  0BDE  2BEA               	goto	l1418
  6767  0BDF                     l8996:	
  6768  0BDF  3019               	movlw	25
  6769  0BE0  0022               	movlb	2	; select bank2
  6770  0BE1  026E               	subwf	_switchTap_pressed^(0+256),w
  6771  0BE2  1803               	skipnc
  6772  0BE3  2BEA               	goto	l1418
  6773                           
  6774                           ;SwitchTap.c: 62: switchTap_pressed++;
  6775  0BE4  3001               	movlw	1
  6776  0BE5  0021               	movlb	1	; select bank1
  6777  0BE6  00BC               	movwf	??_updateSwitchTap^(0+128)
  6778  0BE7  083C               	movf	??_updateSwitchTap^(0+128),w
  6779  0BE8  0022               	movlb	2	; select bank2
  6780  0BE9  07EE               	addwf	_switchTap_pressed^(0+256),f
  6781  0BEA                     l1418:	
  6782                           
  6783                           ;SwitchTap.c: 63: }
  6784                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6785  0BEA  086E               	movf	_switchTap_pressed^(0+256),w
  6786  0BEB  1D03               	btfss	3,2
  6787  0BEC  2DA0               	goto	l9080
  6788                           
  6789                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6790  0BED  0020               	movlb	0	; select bank0
  6791  0BEE  1BC7               	btfsc	_tap_timer+3,7	;volatile
  6792  0BEF  2C75               	goto	l9040
  6793  0BF0  0847               	movf	_tap_timer+3,w	;volatile
  6794  0BF1  1D03               	btfss	3,2
  6795  0BF2  2BFC               	goto	l9002
  6796  0BF3  0846               	movf	_tap_timer+2,w	;volatile
  6797  0BF4  1D03               	btfss	3,2
  6798  0BF5  2BFC               	goto	l9002
  6799  0BF6  301B               	movlw	27
  6800  0BF7  0244               	subwf	_tap_timer,w	;volatile
  6801  0BF8  3006               	movlw	6
  6802  0BF9  3B45               	subwfb	_tap_timer+1,w	;volatile
  6803  0BFA  1C03               	btfss	3,0
  6804  0BFB  2C75               	goto	l9040
  6805  0BFC                     l9002:	
  6806                           
  6807                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6808  0BFC  0023               	movlb	3	; select bank3
  6809  0BFD  0345               	decf	_switchTap_down^(0+384),w
  6810  0BFE  1903               	btfsc	3,2
  6811  0BFF  2C3B               	goto	l9018
  6812                           
  6813                           ;SwitchTap.c: 78: switchTap_down = 1;
  6814  0C00  01C5               	clrf	_switchTap_down^(0+384)
  6815  0C01  0AC5               	incf	_switchTap_down^(0+384),f
  6816                           
  6817                           ;SwitchTap.c: 79: tap_timer = 0;
  6818  0C02  3000               	movlw	0
  6819  0C03  0020               	movlb	0	; select bank0
  6820  0C04  00C7               	movwf	_tap_timer+3	;volatile
  6821  0C05  3000               	movlw	0
  6822  0C06  00C6               	movwf	_tap_timer+2	;volatile
  6823  0C07  3000               	movlw	0
  6824  0C08  00C5               	movwf	_tap_timer+1	;volatile
  6825  0C09  3000               	movlw	0
  6826  0C0A  00C4               	movwf	_tap_timer	;volatile
  6827                           
  6828                           ;SwitchTap.c: 80: tap_iteration = 1;
  6829  0C0B  3001               	movlw	1
  6830  0C0C  0023               	movlb	3	; select bank3
  6831  0C0D  00DD               	movwf	_tap_iteration^(0+384)
  6832  0C0E  3000               	movlw	0
  6833  0C0F  00DE               	movwf	(_tap_iteration^(0+384)+1)
  6834                           
  6835                           ;SwitchTap.c: 81: tap_total = 0;
  6836  0C10  3000               	movlw	0
  6837  0C11  0024               	movlb	4	; select bank4
  6838  0C12  00C0               	movwf	(_tap_total+3)^(0+512)
  6839  0C13  3000               	movlw	0
  6840  0C14  00BF               	movwf	(_tap_total+2)^(0+512)
  6841  0C15  3000               	movlw	0
  6842  0C16  00BE               	movwf	(_tap_total+1)^(0+512)
  6843  0C17  3000               	movlw	0
  6844  0C18  00BD               	movwf	_tap_total^(0+512)
  6845                           
  6846                           ;SwitchTap.c: 82: mod_time_changed = 0;
  6847  0C19  0023               	movlb	3	; select bank3
  6848  0C1A  01E4               	clrf	_mod_time_changed^(0+384)
  6849                           
  6850                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6851  0C1B  0021               	movlb	1	; select bank1
  6852  0C1C  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6853  0C1D  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6854  0C1E                     l9016:	
  6855  0C1E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6856  0C1F  0020               	movlb	0	; select bank0
  6857  0C20  025E               	subwf	_num_taps,w
  6858  0C21  1C03               	btfss	3,0
  6859  0C22  2C3B               	goto	l9018
  6860                           
  6861                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6862  0C23  0021               	movlb	1	; select bank1
  6863  0C24  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6864  0C25  00BC               	movwf	??_updateSwitchTap^(0+128)
  6865  0C26  3001               	movlw	1
  6866  0C27                     u9835:	
  6867  0C27  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6868  0C28  3EFF               	addlw	-1
  6869  0C29  1D03               	skipz
  6870  0C2A  2C27               	goto	u9835
  6871  0C2B  353C               	lslf	??_updateSwitchTap^(0+128),w
  6872  0C2C  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6873  0C2D  0086               	movwf	6
  6874  0C2E  3002               	movlw	2	; select bank4/5
  6875  0C2F  0087               	movwf	7
  6876  0C30  3000               	movlw	0
  6877  0C31  3FC0               	movwi [0]fsr1
  6878  0C32  3000               	movlw	0
  6879  0C33  3FC1               	movwi [1]fsr1
  6880  0C34  3FC2               	movwi [2]fsr1
  6881  0C35  3FC3               	movwi [3]fsr1
  6882  0C36  3001               	movlw	1
  6883  0C37  00BC               	movwf	??_updateSwitchTap^(0+128)
  6884  0C38  083C               	movf	??_updateSwitchTap^(0+128),w
  6885  0C39  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6886  0C3A  2C1E               	goto	l9016
  6887  0C3B                     l9018:	
  6888                           
  6889                           ;SwitchTap.c: 86: }
  6890                           ;SwitchTap.c: 87: }
  6891                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6892  0C3B  0022               	movlb	2	; select bank2
  6893  0C3C  086B               	movf	_longTap_start^(0+256),w
  6894  0C3D  1D03               	btfss	3,2
  6895  0C3E  2C46               	goto	l9024
  6896                           
  6897                           ;SwitchTap.c: 91: longTap_start = 1;
  6898  0C3F  01EB               	clrf	_longTap_start^(0+256)
  6899  0C40  0AEB               	incf	_longTap_start^(0+256),f
  6900                           
  6901                           ;SwitchTap.c: 92: longTap_state = 0;
  6902  0C41  0020               	movlb	0	; select bank0
  6903  0C42  01DD               	clrf	_longTap_state	;volatile
  6904                           
  6905                           ;SwitchTap.c: 93: longTap_timer = 0;
  6906  0C43  0023               	movlb	3	; select bank3
  6907  0C44  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  6908  0C45  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6909  0C46                     l9024:	
  6910                           
  6911                           ;SwitchTap.c: 94: }
  6912                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6913  0C46  0020               	movlb	0	; select bank0
  6914  0C47  0859               	movf	_long_press_limit+1,w
  6915  0C48  0023               	movlb	3	; select bank3
  6916  0C49  0235               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6917  0C4A  1D03               	skipz
  6918  0C4B  2C50               	goto	u9865
  6919  0C4C  0020               	movlb	0	; select bank0
  6920  0C4D  0858               	movf	_long_press_limit,w
  6921  0C4E  0023               	movlb	3	; select bank3
  6922  0C4F  0234               	subwf	_longTap_timer^(0+384),w	;volatile
  6923  0C50                     u9865:	
  6924  0C50  1C03               	skipc
  6925  0C51  0008               	return
  6926  0C52  0020               	movlb	0	; select bank0
  6927  0C53  085D               	movf	_longTap_state,w	;volatile
  6928  0C54  1D03               	btfss	3,2
  6929  0C55  0008               	return
  6930  0C56  084E               	movf	_doubleTap_state,w	;volatile
  6931  0C57  1D03               	btfss	3,2
  6932  0C58  0008               	return
  6933                           
  6934                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6935  0C59  0859               	movf	_long_press_limit+1,w
  6936  0C5A  0023               	movlb	3	; select bank3
  6937  0C5B  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6938  0C5C  0020               	movlb	0	; select bank0
  6939  0C5D  0858               	movf	_long_press_limit,w
  6940  0C5E  0023               	movlb	3	; select bank3
  6941  0C5F  00B4               	movwf	_longTap_timer^(0+384)	;volatile
  6942                           
  6943                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6944  0C60  0022               	movlb	2	; select bank2
  6945  0C61  120D               	bcf	13,4	;volatile
  6946                           
  6947                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6948  0C62  036A               	decf	_longBypass_start^(0+256),w
  6949  0C63  1903               	btfsc	3,2
  6950  0C64  2C6D               	goto	l9038
  6951                           
  6952                           ;SwitchTap.c: 104: setLongTapState(1);
  6953  0C65  3001               	movlw	1
  6954  0C66  0021               	movlb	1	; select bank1
  6955  0C67  00A0               	movwf	setLongTapState@f_state^(0+128)
  6956  0C68  3000               	movlw	0
  6957  0C69  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6958  0C6A  31AE  2634         	fcall	_setLongTapState
  6959                           
  6960                           ;SwitchTap.c: 105: } else {
  6961  0C6C  0008               	return
  6962  0C6D                     l9038:	
  6963                           
  6964                           ;SwitchTap.c: 106: setDoublePressState(1);
  6965  0C6D  3001               	movlw	1
  6966  0C6E  0021               	movlb	1	; select bank1
  6967  0C6F  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6968  0C70  3000               	movlw	0
  6969  0C71  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6970  0C72  31A2  223A         	fcall	_setDoublePressState
  6971                           
  6972                           ;SwitchTap.c: 107: }
  6973                           ;SwitchTap.c: 108: }
  6974                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6975  0C74  0008               	return
  6976  0C75                     l9040:	
  6977  0C75  0020               	movlb	0	; select bank0
  6978  0C76  1BC7               	btfsc	_tap_timer+3,7	;volatile
  6979  0C77  2C84               	goto	l9042
  6980  0C78  0847               	movf	_tap_timer+3,w	;volatile
  6981  0C79  1D03               	btfss	3,2
  6982  0C7A  0008               	return
  6983  0C7B  0846               	movf	_tap_timer+2,w	;volatile
  6984  0C7C  1D03               	btfss	3,2
  6985  0C7D  0008               	return
  6986  0C7E  301B               	movlw	27
  6987  0C7F  0244               	subwf	_tap_timer,w	;volatile
  6988  0C80  3006               	movlw	6
  6989  0C81  3B45               	subwfb	_tap_timer+1,w	;volatile
  6990  0C82  1803               	btfsc	3,0
  6991  0C83  0008               	return
  6992  0C84                     l9042:	
  6993  0C84  085D               	movf	_longTap_state,w	;volatile
  6994  0C85  1D03               	btfss	3,2
  6995  0C86  0008               	return
  6996  0C87  0023               	movlb	3	; select bank3
  6997  0C88  0345               	decf	_switchTap_down^(0+384),w
  6998  0C89  1903               	btfsc	3,2
  6999  0C8A  0008               	return
  7000                           
  7001                           ;SwitchTap.c: 112: switchTap_down = 1;
  7002  0C8B  01C5               	clrf	_switchTap_down^(0+384)
  7003  0C8C  0AC5               	incf	_switchTap_down^(0+384),f
  7004                           
  7005                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7006  0C8D  0020               	movlb	0	; select bank0
  7007  0C8E  1BC7               	btfsc	_tap_timer+3,7	;volatile
  7008  0C8F  2CA4               	goto	l1432
  7009  0C90  0847               	movf	_tap_timer+3,w	;volatile
  7010  0C91  1D03               	btfss	3,2
  7011  0C92  2C9C               	goto	l9050
  7012  0C93  0846               	movf	_tap_timer+2,w	;volatile
  7013  0C94  1D03               	btfss	3,2
  7014  0C95  2C9C               	goto	l9050
  7015  0C96  3094               	movlw	148
  7016  0C97  0244               	subwf	_tap_timer,w	;volatile
  7017  0C98  3004               	movlw	4
  7018  0C99  3B45               	subwfb	_tap_timer+1,w	;volatile
  7019  0C9A  1C03               	btfss	3,0
  7020  0C9B  2CA4               	goto	l1432
  7021  0C9C                     l9050:	
  7022                           
  7023                           ;SwitchTap.c: 114: tap_timer = 1172;
  7024  0C9C  3000               	movlw	0
  7025  0C9D  00C7               	movwf	_tap_timer+3	;volatile
  7026  0C9E  3000               	movlw	0
  7027  0C9F  00C6               	movwf	_tap_timer+2	;volatile
  7028  0CA0  3004               	movlw	4
  7029  0CA1  00C5               	movwf	_tap_timer+1	;volatile
  7030  0CA2  3094               	movlw	148
  7031  0CA3  00C4               	movwf	_tap_timer	;volatile
  7032  0CA4                     l1432:	
  7033                           
  7034                           ;SwitchTap.c: 115: }
  7035                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7036  0CA4  085E               	movf	_num_taps,w
  7037  0CA5  0021               	movlb	1	; select bank1
  7038  0CA6  00BC               	movwf	??_updateSwitchTap^(0+128)
  7039  0CA7  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7040  0CA8  083C               	movf	??_updateSwitchTap^(0+128),w
  7041  0CA9  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7042  0CAA  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7043  0CAB  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7044                           
  7045                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7046  0CAC  0023               	movlb	3	; select bank3
  7047  0CAD  085E               	movf	(_tap_iteration+1)^(0+384),w
  7048  0CAE  3A80               	xorlw	128
  7049  0CAF  3C80               	sublw	128
  7050  0CB0  1D03               	skipz
  7051  0CB1  2CB5               	goto	u9945
  7052  0CB2  085D               	movf	_tap_iteration^(0+384),w
  7053  0CB3  0020               	movlb	0	; select bank0
  7054  0CB4  025E               	subwf	_num_taps,w
  7055  0CB5                     u9945:	
  7056  0CB5  1C03               	skipc
  7057  0CB6  2CE7               	goto	l9058
  7058                           
  7059                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7060  0CB7  0020               	movlb	0	; select bank0
  7061  0CB8  0844               	movf	_tap_timer,w	;volatile
  7062  0CB9  0024               	movlb	4	; select bank4
  7063  0CBA  07BD               	addwf	_tap_total^(0+512),f
  7064  0CBB  0020               	movlb	0	; select bank0
  7065  0CBC  0845               	movf	_tap_timer+1,w	;volatile
  7066  0CBD  0024               	movlb	4	; select bank4
  7067  0CBE  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7068  0CBF  0020               	movlb	0	; select bank0
  7069  0CC0  0846               	movf	_tap_timer+2,w	;volatile
  7070  0CC1  0024               	movlb	4	; select bank4
  7071  0CC2  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7072  0CC3  0020               	movlb	0	; select bank0
  7073  0CC4  0847               	movf	_tap_timer+3,w	;volatile
  7074  0CC5  0024               	movlb	4	; select bank4
  7075  0CC6  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7076                           
  7077                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7078  0CC7  0023               	movlb	3	; select bank3
  7079  0CC8  085D               	movf	_tap_iteration^(0+384),w
  7080  0CC9  0021               	movlb	1	; select bank1
  7081  0CCA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7082  0CCB  3001               	movlw	1
  7083  0CCC                     u9955:	
  7084  0CCC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7085  0CCD  3EFF               	addlw	-1
  7086  0CCE  1D03               	skipz
  7087  0CCF  2CCC               	goto	u9955
  7088  0CD0  353C               	lslf	??_updateSwitchTap^(0+128),w
  7089  0CD1  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7090  0CD2  0086               	movwf	6
  7091  0CD3  3002               	movlw	2	; select bank4/5
  7092  0CD4  0087               	movwf	7
  7093  0CD5  0020               	movlb	0	; select bank0
  7094  0CD6  0844               	movf	_tap_timer,w	;volatile
  7095  0CD7  3FC0               	movwi [0]fsr1
  7096  0CD8  0845               	movf	_tap_timer+1,w	;volatile
  7097  0CD9  3FC1               	movwi [1]fsr1
  7098  0CDA  0846               	movf	_tap_timer+2,w	;volatile
  7099  0CDB  3FC2               	movwi [2]fsr1
  7100  0CDC  0847               	movf	_tap_timer+3,w	;volatile
  7101  0CDD  3FC3               	movwi [3]fsr1
  7102                           
  7103                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7104  0CDE  0023               	movlb	3	; select bank3
  7105  0CDF  085E               	movf	(_tap_iteration+1)^(0+384),w
  7106  0CE0  0021               	movlb	1	; select bank1
  7107  0CE1  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7108  0CE2  0023               	movlb	3	; select bank3
  7109  0CE3  085D               	movf	_tap_iteration^(0+384),w
  7110  0CE4  0021               	movlb	1	; select bank1
  7111  0CE5  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7112                           
  7113                           ;SwitchTap.c: 122: } else {
  7114  0CE6  2D63               	goto	l9072
  7115  0CE7                     l9058:	
  7116                           
  7117                           ;SwitchTap.c: 123: tap_total = 0;
  7118  0CE7  3000               	movlw	0
  7119  0CE8  0024               	movlb	4	; select bank4
  7120  0CE9  00C0               	movwf	(_tap_total+3)^(0+512)
  7121  0CEA  3000               	movlw	0
  7122  0CEB  00BF               	movwf	(_tap_total+2)^(0+512)
  7123  0CEC  3000               	movlw	0
  7124  0CED  00BE               	movwf	(_tap_total+1)^(0+512)
  7125  0CEE  3000               	movlw	0
  7126  0CEF  00BD               	movwf	_tap_total^(0+512)
  7127                           
  7128                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7129  0CF0  0021               	movlb	1	; select bank1
  7130  0CF1  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7131  0CF2  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7132  0CF3                     l9066:	
  7133  0CF3  0020               	movlb	0	; select bank0
  7134  0CF4  085E               	movf	_num_taps,w
  7135  0CF5  0021               	movlb	1	; select bank1
  7136  0CF6  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7137  0CF7  1803               	btfsc	3,0
  7138  0CF8  2D3D               	goto	l9068
  7139                           
  7140                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7141  0CF9  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7142  0CFA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7143  0CFB  3001               	movlw	1
  7144  0CFC                     u9965:	
  7145  0CFC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7146  0CFD  3EFF               	addlw	-1
  7147  0CFE  1D03               	skipz
  7148  0CFF  2CFC               	goto	u9965
  7149  0D00  353C               	lslf	??_updateSwitchTap^(0+128),w
  7150  0D01  3E04               	addlw	4
  7151  0D02  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7152  0D03  0086               	movwf	6
  7153  0D04  3002               	movlw	2	; select bank4/5
  7154  0D05  0087               	movwf	7
  7155  0D06  3F40               	moviw [0]fsr1
  7156  0D07  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7157  0D08  3F41               	moviw [1]fsr1
  7158  0D09  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7159  0D0A  3F42               	moviw [2]fsr1
  7160  0D0B  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7161  0D0C  3F43               	moviw [3]fsr1
  7162  0D0D  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7163  0D0E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7164  0D0F  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7165  0D10  3001               	movlw	1
  7166  0D11                     u9975:	
  7167  0D11  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7168  0D12  3EFF               	addlw	-1
  7169  0D13  1D03               	skipz
  7170  0D14  2D11               	goto	u9975
  7171  0D15  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7172  0D16  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7173  0D17  0086               	movwf	6
  7174  0D18  3002               	movlw	2	; select bank4/5
  7175  0D19  0087               	movwf	7
  7176  0D1A  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7177  0D1B  3FC0               	movwi [0]fsr1
  7178  0D1C  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7179  0D1D  3FC1               	movwi [1]fsr1
  7180  0D1E  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7181  0D1F  3FC2               	movwi [2]fsr1
  7182  0D20  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7183  0D21  3FC3               	movwi [3]fsr1
  7184                           
  7185                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7186  0D22  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7187  0D23  00BC               	movwf	??_updateSwitchTap^(0+128)
  7188  0D24  3001               	movlw	1
  7189  0D25                     u9985:	
  7190  0D25  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7191  0D26  3EFF               	addlw	-1
  7192  0D27  1D03               	skipz
  7193  0D28  2D25               	goto	u9985
  7194  0D29  353C               	lslf	??_updateSwitchTap^(0+128),w
  7195  0D2A  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7196  0D2B  0086               	movwf	6
  7197  0D2C  3002               	movlw	2	; select bank4/5
  7198  0D2D  0087               	movwf	7
  7199  0D2E  3F40               	moviw [0]fsr1
  7200  0D2F  0024               	movlb	4	; select bank4
  7201  0D30  07BD               	addwf	_tap_total^(0+512),f
  7202  0D31  3F41               	moviw [1]fsr1
  7203  0D32  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7204  0D33  3F42               	moviw [2]fsr1
  7205  0D34  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7206  0D35  3F43               	moviw [3]fsr1
  7207  0D36  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7208  0D37  3001               	movlw	1
  7209  0D38  0021               	movlb	1	; select bank1
  7210  0D39  00BC               	movwf	??_updateSwitchTap^(0+128)
  7211  0D3A  083C               	movf	??_updateSwitchTap^(0+128),w
  7212  0D3B  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7213  0D3C  2CF3               	goto	l9066
  7214  0D3D                     l9068:	
  7215                           
  7216                           ;SwitchTap.c: 127: }
  7217                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7218  0D3D  0020               	movlb	0	; select bank0
  7219  0D3E  085E               	movf	_num_taps,w
  7220  0D3F  0021               	movlb	1	; select bank1
  7221  0D40  00BC               	movwf	??_updateSwitchTap^(0+128)
  7222  0D41  3001               	movlw	1
  7223  0D42                     u10005:	
  7224  0D42  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7225  0D43  3EFF               	addlw	-1
  7226  0D44  1D03               	skipz
  7227  0D45  2D42               	goto	u10005
  7228  0D46  353C               	lslf	??_updateSwitchTap^(0+128),w
  7229  0D47  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7230  0D48  0086               	movwf	6
  7231  0D49  3002               	movlw	2	; select bank4/5
  7232  0D4A  0087               	movwf	7
  7233  0D4B  0020               	movlb	0	; select bank0
  7234  0D4C  0844               	movf	_tap_timer,w	;volatile
  7235  0D4D  3FC0               	movwi [0]fsr1
  7236  0D4E  0845               	movf	_tap_timer+1,w	;volatile
  7237  0D4F  3FC1               	movwi [1]fsr1
  7238  0D50  0846               	movf	_tap_timer+2,w	;volatile
  7239  0D51  3FC2               	movwi [2]fsr1
  7240  0D52  0847               	movf	_tap_timer+3,w	;volatile
  7241  0D53  3FC3               	movwi [3]fsr1
  7242                           
  7243                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7244  0D54  0844               	movf	_tap_timer,w	;volatile
  7245  0D55  0024               	movlb	4	; select bank4
  7246  0D56  07BD               	addwf	_tap_total^(0+512),f
  7247  0D57  0020               	movlb	0	; select bank0
  7248  0D58  0845               	movf	_tap_timer+1,w	;volatile
  7249  0D59  0024               	movlb	4	; select bank4
  7250  0D5A  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7251  0D5B  0020               	movlb	0	; select bank0
  7252  0D5C  0846               	movf	_tap_timer+2,w	;volatile
  7253  0D5D  0024               	movlb	4	; select bank4
  7254  0D5E  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7255  0D5F  0020               	movlb	0	; select bank0
  7256  0D60  0847               	movf	_tap_timer+3,w	;volatile
  7257  0D61  0024               	movlb	4	; select bank4
  7258  0D62  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7259  0D63                     l9072:	
  7260                           
  7261                           ;SwitchTap.c: 130: }
  7262                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7263  0D63  0021               	movlb	1	; select bank1
  7264  0D64  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7265  0D65  00A0               	movwf	___aldiv@divisor^(0+128)
  7266  0D66  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7267  0D67  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7268  0D68  0D89               	rlf	9,f
  7269  0D69  3B89               	subwfb	9,f
  7270  0D6A  0989               	comf	9,f
  7271  0D6B  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7272  0D6C  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7273  0D6D  0024               	movlb	4	; select bank4
  7274  0D6E  0840               	movf	(_tap_total+3)^(0+512),w
  7275  0D6F  0021               	movlb	1	; select bank1
  7276  0D70  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7277  0D71  0024               	movlb	4	; select bank4
  7278  0D72  083F               	movf	(_tap_total+2)^(0+512),w
  7279  0D73  0021               	movlb	1	; select bank1
  7280  0D74  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7281  0D75  0024               	movlb	4	; select bank4
  7282  0D76  083E               	movf	(_tap_total+1)^(0+512),w
  7283  0D77  0021               	movlb	1	; select bank1
  7284  0D78  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7285  0D79  0024               	movlb	4	; select bank4
  7286  0D7A  083D               	movf	_tap_total^(0+512),w
  7287  0D7B  0021               	movlb	1	; select bank1
  7288  0D7C  00A4               	movwf	___aldiv@dividend^(0+128)
  7289  0D7D  3199  215C         	fcall	___aldiv
  7290  0D7F  0021               	movlb	1	; select bank1
  7291  0D80  0823               	movf	(?___aldiv+3)^(0+128),w
  7292  0D81  0023               	movlb	3	; select bank3
  7293  0D82  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  7294  0D83  0021               	movlb	1	; select bank1
  7295  0D84  0822               	movf	(?___aldiv+2)^(0+128),w
  7296  0D85  0023               	movlb	3	; select bank3
  7297  0D86  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  7298  0D87  0021               	movlb	1	; select bank1
  7299  0D88  0821               	movf	(?___aldiv+1)^(0+128),w
  7300  0D89  0023               	movlb	3	; select bank3
  7301  0D8A  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  7302  0D8B  0021               	movlb	1	; select bank1
  7303  0D8C  0820               	movf	?___aldiv^(0+128),w
  7304  0D8D  0023               	movlb	3	; select bank3
  7305  0D8E  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  7306                           
  7307                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7308  0D8F  01E4               	clrf	_mod_time_changed^(0+384)
  7309  0D90  0AE4               	incf	_mod_time_changed^(0+384),f
  7310                           
  7311                           ;SwitchTap.c: 134: tap_timer = 0;
  7312  0D91  3000               	movlw	0
  7313  0D92  0020               	movlb	0	; select bank0
  7314  0D93  00C7               	movwf	_tap_timer+3	;volatile
  7315  0D94  3000               	movlw	0
  7316  0D95  00C6               	movwf	_tap_timer+2	;volatile
  7317  0D96  3000               	movlw	0
  7318  0D97  00C5               	movwf	_tap_timer+1	;volatile
  7319  0D98  3000               	movlw	0
  7320  0D99  00C4               	movwf	_tap_timer	;volatile
  7321                           
  7322                           ;SwitchTap.c: 136: tap_iteration++;
  7323  0D9A  3001               	movlw	1
  7324  0D9B  0023               	movlb	3	; select bank3
  7325  0D9C  07DD               	addwf	_tap_iteration^(0+384),f
  7326  0D9D  3000               	movlw	0
  7327  0D9E  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7328                           
  7329                           ;SwitchTap.c: 137: }
  7330                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7331  0D9F  0008               	return
  7332  0DA0                     l9080:	
  7333  0DA0  3019               	movlw	25
  7334  0DA1  0022               	movlb	2	; select bank2
  7335  0DA2  026E               	subwf	_switchTap_pressed^(0+256),w
  7336  0DA3  1C03               	skipc
  7337  0DA4  0008               	return
  7338                           
  7339                           ;SwitchTap.c: 140: switchTap_down = 0;
  7340  0DA5  0023               	movlb	3	; select bank3
  7341  0DA6  01C5               	clrf	_switchTap_down^(0+384)
  7342                           
  7343                           ;SwitchTap.c: 141: switchTap_state = 0;
  7344  0DA7  01E6               	clrf	_switchTap_state^(0+384)
  7345                           
  7346                           ;SwitchTap.c: 147: setLongTapState(0);
  7347  0DA8  3000               	movlw	0
  7348  0DA9  0021               	movlb	1	; select bank1
  7349  0DAA  00A0               	movwf	setLongTapState@f_state^(0+128)
  7350  0DAB  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7351  0DAC  31AE  2634         	fcall	_setLongTapState
  7352                           
  7353                           ;SwitchTap.c: 149: longTap_timer = 0;
  7354  0DAE  0023               	movlb	3	; select bank3
  7355  0DAF  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  7356  0DB0  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7357                           
  7358                           ;SwitchTap.c: 150: longTap_start = 0;
  7359  0DB1  0022               	movlb	2	; select bank2
  7360  0DB2  01EB               	clrf	_longTap_start^(0+256)
  7361                           
  7362                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7363  0DB3  3019               	movlw	25
  7364  0DB4  0021               	movlb	1	; select bank1
  7365  0DB5  00BC               	movwf	??_updateSwitchTap^(0+128)
  7366  0DB6  083C               	movf	??_updateSwitchTap^(0+128),w
  7367  0DB7  0022               	movlb	2	; select bank2
  7368  0DB8  00EE               	movwf	_switchTap_pressed^(0+256)
  7369  0DB9  0008               	return
  7370  0DBA                     __end_of_updateSwitchTap:	
  7371                           
  7372                           	psect	text4
  7373  2E34                     __ptext4:	
  7374 ;; *************** function _setLongTapState *****************
  7375 ;; Defined at:
  7376 ;;		line 167 in file "SwitchTap.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  f_state         2    0[BANK1 ] int 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;		None
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  1    wreg      void 
  7383 ;; Registers used:
  7384 ;;		wreg, status,0
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7390 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7392 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7393 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7394 ;;Total ram usage:        4 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    3
  7397 ;; This function calls:
  7398 ;;		Nothing
  7399 ;; This function is called by:
  7400 ;;		_updateSwitchTap
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function _setLongTapState
  7406  2E34                     _setLongTapState:	
  7407                           
  7408                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7409                           
  7410                           ;incstack = 0
  7411                           ; Regs used in _setLongTapState: [wreg+status,0]
  7412  2E34  0020               	movlb	0	; select bank0
  7413  2E35  085D               	movf	_longTap_state,w	;volatile
  7414  2E36  0021               	movlb	1	; select bank1
  7415  2E37  00A2               	movwf	??_setLongTapState^(0+128)
  7416  2E38  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7417  2E39  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7418  2E3A  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7419  2E3B  1D03               	skipz
  7420  2E3C  2E3F               	goto	u8985
  7421  2E3D  0820               	movf	setLongTapState@f_state^(0+128),w
  7422  2E3E  0622               	xorwf	??_setLongTapState^(0+128),w
  7423  2E3F                     u8985:	
  7424  2E3F  1903               	btfsc	3,2
  7425  2E40  0008               	return
  7426                           
  7427                           ;SwitchTap.c: 169: longTap_state = f_state;
  7428  2E41  0820               	movf	setLongTapState@f_state^(0+128),w
  7429  2E42  00A2               	movwf	??_setLongTapState^(0+128)
  7430  2E43  0822               	movf	??_setLongTapState^(0+128),w
  7431  2E44  0020               	movlb	0	; select bank0
  7432  2E45  00DD               	movwf	_longTap_state	;volatile
  7433                           
  7434                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7435  2E46  0021               	movlb	1	; select bank1
  7436  2E47  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7437  2E48  0022               	movlb	2	; select bank2
  7438  2E49  1C03               	skipc
  7439  2E4A  128D               	bcf	13,5	;volatile
  7440  2E4B  1803               	skipnc
  7441  2E4C  168D               	bsf	13,5	;volatile
  7442  2E4D  0008               	return
  7443  2E4E                     __end_of_setLongTapState:	
  7444                           
  7445                           	psect	text5
  7446  195C                     __ptext5:	
  7447 ;; *************** function ___aldiv *****************
  7448 ;; Defined at:
  7449 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  divisor         4    0[BANK1 ] long 
  7452 ;;  dividend        4    4[BANK1 ] long 
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;  quotient        4   11[BANK1 ] long 
  7455 ;;  sign            1   10[BANK1 ] unsigned char 
  7456 ;;  counter         1    9[BANK1 ] unsigned char 
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  4    0[BANK1 ] long 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7466 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7467 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7468 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7469 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7470 ;;Total ram usage:       15 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    3
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_updateSwitchTap
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function ___aldiv
  7482  195C                     ___aldiv:	
  7483                           
  7484                           ;incstack = 0
  7485                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7486  195C  0021               	movlb	1	; select bank1
  7487  195D  01AA               	clrf	___aldiv@sign^(0+128)
  7488  195E  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7489  195F  296D               	goto	l2015
  7490  1960  09A0               	comf	___aldiv@divisor^(0+128),f
  7491  1961  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7492  1962  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7493  1963  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7494  1964  0AA0               	incf	___aldiv@divisor^(0+128),f
  7495  1965  1903               	skipnz
  7496  1966  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7497  1967  1903               	skipnz
  7498  1968  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7499  1969  1903               	skipnz
  7500  196A  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7501  196B  01AA               	clrf	___aldiv@sign^(0+128)
  7502  196C  0AAA               	incf	___aldiv@sign^(0+128),f
  7503  196D                     l2015:	
  7504  196D  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7505  196E  297E               	goto	l8592
  7506  196F  09A4               	comf	___aldiv@dividend^(0+128),f
  7507  1970  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7508  1971  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7509  1972  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7510  1973  0AA4               	incf	___aldiv@dividend^(0+128),f
  7511  1974  1903               	skipnz
  7512  1975  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7513  1976  1903               	skipnz
  7514  1977  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7515  1978  1903               	skipnz
  7516  1979  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7517  197A  3001               	movlw	1
  7518  197B  00A8               	movwf	??___aldiv^(0+128)
  7519  197C  0828               	movf	??___aldiv^(0+128),w
  7520  197D  06AA               	xorwf	___aldiv@sign^(0+128),f
  7521  197E                     l8592:	
  7522  197E  3000               	movlw	0
  7523  197F  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7524  1980  3000               	movlw	0
  7525  1981  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7526  1982  3000               	movlw	0
  7527  1983  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7528  1984  3000               	movlw	0
  7529  1985  00AB               	movwf	___aldiv@quotient^(0+128)
  7530  1986  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7531  1987  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7532  1988  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7533  1989  0420               	iorwf	___aldiv@divisor^(0+128),w
  7534  198A  1903               	skipnz
  7535  198B  29C7               	goto	l8614
  7536  198C  01A9               	clrf	___aldiv@counter^(0+128)
  7537  198D  0AA9               	incf	___aldiv@counter^(0+128),f
  7538  198E                     l8600:	
  7539  198E  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7540  198F  299C               	goto	l8602
  7541  1990  3001               	movlw	1
  7542  1991                     u9065:	
  7543  1991  35A0               	lslf	___aldiv@divisor^(0+128),f
  7544  1992  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7545  1993  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7546  1994  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7547  1995  0B89               	decfsz	9,f
  7548  1996  2991               	goto	u9065
  7549  1997  3001               	movlw	1
  7550  1998  00A8               	movwf	??___aldiv^(0+128)
  7551  1999  0828               	movf	??___aldiv^(0+128),w
  7552  199A  07A9               	addwf	___aldiv@counter^(0+128),f
  7553  199B  298E               	goto	l8600
  7554  199C                     l8602:	
  7555  199C  3001               	movlw	1
  7556  199D                     u9085:	
  7557  199D  35AB               	lslf	___aldiv@quotient^(0+128),f
  7558  199E  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7559  199F  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7560  19A0  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7561  19A1  0B89               	decfsz	9,f
  7562  19A2  299D               	goto	u9085
  7563  19A3  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7564  19A4  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7565  19A5  1D03               	skipz
  7566  19A6  29B1               	goto	u9095
  7567  19A7  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7568  19A8  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7569  19A9  1D03               	skipz
  7570  19AA  29B1               	goto	u9095
  7571  19AB  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7572  19AC  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7573  19AD  1D03               	skipz
  7574  19AE  29B1               	goto	u9095
  7575  19AF  0820               	movf	___aldiv@divisor^(0+128),w
  7576  19B0  0224               	subwf	___aldiv@dividend^(0+128),w
  7577  19B1                     u9095:	
  7578  19B1  1C03               	skipc
  7579  19B2  29BC               	goto	l8610
  7580  19B3  0820               	movf	___aldiv@divisor^(0+128),w
  7581  19B4  02A4               	subwf	___aldiv@dividend^(0+128),f
  7582  19B5  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7583  19B6  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7584  19B7  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7585  19B8  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7586  19B9  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7587  19BA  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7588  19BB  142B               	bsf	___aldiv@quotient^(0+128),0
  7589  19BC                     l8610:	
  7590  19BC  3001               	movlw	1
  7591  19BD                     u9105:	
  7592  19BD  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7593  19BE  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7594  19BF  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7595  19C0  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7596  19C1  0B89               	decfsz	9,f
  7597  19C2  29BD               	goto	u9105
  7598  19C3  3001               	movlw	1
  7599  19C4  02A9               	subwf	___aldiv@counter^(0+128),f
  7600  19C5  1D03               	btfss	3,2
  7601  19C6  299C               	goto	l8602
  7602  19C7                     l8614:	
  7603  19C7  082A               	movf	___aldiv@sign^(0+128),w
  7604  19C8  1903               	btfsc	3,2
  7605  19C9  29D5               	goto	l8618
  7606  19CA  09AB               	comf	___aldiv@quotient^(0+128),f
  7607  19CB  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7608  19CC  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7609  19CD  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7610  19CE  0AAB               	incf	___aldiv@quotient^(0+128),f
  7611  19CF  1903               	skipnz
  7612  19D0  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7613  19D1  1903               	skipnz
  7614  19D2  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7615  19D3  1903               	skipnz
  7616  19D4  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7617  19D5                     l8618:	
  7618  19D5  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7619  19D6  00A3               	movwf	(?___aldiv+3)^(0+128)
  7620  19D7  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7621  19D8  00A2               	movwf	(?___aldiv+2)^(0+128)
  7622  19D9  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7623  19DA  00A1               	movwf	(?___aldiv+1)^(0+128)
  7624  19DB  082B               	movf	___aldiv@quotient^(0+128),w
  7625  19DC  00A0               	movwf	?___aldiv^(0+128)
  7626  19DD  0008               	return
  7627  19DE                     __end_of___aldiv:	
  7628                           
  7629                           	psect	text6
  7630  123D                     __ptext6:	
  7631 ;; *************** function _updateSwitchBypass *****************
  7632 ;; Defined at:
  7633 ;;		line 34 in file "SwitchBypass.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;		None
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;		None
  7638 ;; Return value:  Size  Location     Type
  7639 ;;                  1    wreg      void 
  7640 ;; Registers used:
  7641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7649 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7650 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7651 ;;Total ram usage:        2 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    8
  7654 ;; This function calls:
  7655 ;;		_setDoublePressState
  7656 ;;		_setLongBypassState
  7657 ;;		_setSwitchBypassRelays
  7658 ;;		_setSwitchBypassState
  7659 ;; This function is called by:
  7660 ;;		_main
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _updateSwitchBypass
  7666  123D                     _updateSwitchBypass:	
  7667                           
  7668                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7669                           
  7670                           ;incstack = 0
  7671                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7672  123D  0020               	movlb	0	; select bank0
  7673  123E  1890               	btfsc	16,1	;volatile
  7674  123F  2A53               	goto	l8880
  7675                           
  7676                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7677  1240  0023               	movlb	3	; select bank3
  7678  1241  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7679  1242  3A80               	xorlw	128
  7680  1243  0021               	movlb	1	; select bank1
  7681  1244  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7682  1245  3080               	movlw	128
  7683  1246  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7684  1247  1D03               	skipz
  7685  1248  2A4C               	goto	u9545
  7686  1249  3001               	movlw	1
  7687  124A  0023               	movlb	3	; select bank3
  7688  124B  0236               	subwf	_switchBypass_pressed^(0+384),w
  7689  124C                     u9545:	
  7690  124C  1C03               	skipc
  7691  124D  2A66               	goto	l8884
  7692                           
  7693                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7694  124E  30FF               	movlw	255
  7695  124F  0023               	movlb	3	; select bank3
  7696  1250  07B6               	addwf	_switchBypass_pressed^(0+384),f
  7697  1251  30FF               	movlw	255
  7698  1252  2A65               	goto	L1
  7699  1253                     l8880:	
  7700                           ;SwitchBypass.c: 44: }
  7701                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7702                           
  7703  1253  0023               	movlb	3	; select bank3
  7704  1254  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7705  1255  3A80               	xorlw	128
  7706  1256  0021               	movlb	1	; select bank1
  7707  1257  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7708  1258  3080               	movlw	128
  7709  1259  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7710  125A  1D03               	skipz
  7711  125B  2A5F               	goto	u9555
  7712  125C  3019               	movlw	25
  7713  125D  0023               	movlb	3	; select bank3
  7714  125E  0236               	subwf	_switchBypass_pressed^(0+384),w
  7715  125F                     u9555:	
  7716  125F  1803               	skipnc
  7717  1260  2A66               	goto	l8884
  7718                           
  7719                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7720  1261  3001               	movlw	1
  7721  1262  0023               	movlb	3	; select bank3
  7722  1263  07B6               	addwf	_switchBypass_pressed^(0+384),f
  7723  1264  3000               	movlw	0
  7724  1265                     L1:	
  7725  1265  3DB7               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7726  1266                     l8884:	
  7727                           
  7728                           ;SwitchBypass.c: 47: }
  7729                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7730  1266  0023               	movlb	3	; select bank3
  7731  1267  0836               	movf	_switchBypass_pressed^(0+384),w
  7732  1268  0437               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7733  1269  1D03               	btfss	3,2
  7734  126A  2AF1               	goto	l8946
  7735                           
  7736                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7737  126B  0022               	movlb	2	; select bank2
  7738  126C  086A               	movf	_longBypass_start^(0+256),w
  7739  126D  1D03               	btfss	3,2
  7740  126E  2A74               	goto	l8892
  7741                           
  7742                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7743  126F  01EA               	clrf	_longBypass_start^(0+256)
  7744  1270  0AEA               	incf	_longBypass_start^(0+256),f
  7745                           
  7746                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7747  1271  0023               	movlb	3	; select bank3
  7748  1272  01B2               	clrf	_longBypass_timer^(0+384)	;volatile
  7749  1273  01B3               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7750  1274                     l8892:	
  7751                           
  7752                           ;SwitchBypass.c: 59: }
  7753                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7754  1274  0020               	movlb	0	; select bank0
  7755  1275  0859               	movf	_long_press_limit+1,w
  7756  1276  0023               	movlb	3	; select bank3
  7757  1277  0233               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7758  1278  1D03               	skipz
  7759  1279  2A7E               	goto	u9585
  7760  127A  0020               	movlb	0	; select bank0
  7761  127B  0858               	movf	_long_press_limit,w
  7762  127C  0023               	movlb	3	; select bank3
  7763  127D  0232               	subwf	_longBypass_timer^(0+384),w	;volatile
  7764  127E                     u9585:	
  7765  127E  1C03               	skipc
  7766  127F  2ABC               	goto	l8918
  7767  1280  083F               	movf	_longBypass_down^(0+384),w
  7768  1281  1D03               	btfss	3,2
  7769  1282  2ABC               	goto	l8918
  7770  1283  0020               	movlb	0	; select bank0
  7771  1284  084E               	movf	_doubleTap_state,w	;volatile
  7772  1285  1D03               	btfss	3,2
  7773  1286  2ABC               	goto	l8918
  7774                           
  7775                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7776  1287  0022               	movlb	2	; select bank2
  7777  1288  110D               	bcf	13,2	;volatile
  7778                           
  7779                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7780  1289  036B               	decf	_longTap_start^(0+256),w
  7781  128A  1903               	btfsc	3,2
  7782  128B  2AB4               	goto	l8916
  7783                           
  7784                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7785  128C  0020               	movlb	0	; select bank0
  7786  128D  035F               	decf	_switchBypass_state,w
  7787  128E  1D03               	btfss	3,2
  7788  128F  2ABC               	goto	l8918
  7789                           
  7790                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7791  1290  0023               	movlb	3	; select bank3
  7792  1291  01BF               	clrf	_longBypass_down^(0+384)
  7793  1292  0ABF               	incf	_longBypass_down^(0+384),f
  7794                           
  7795                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7796  1293  0020               	movlb	0	; select bank0
  7797  1294  084F               	movf	_longBypass_state,w	;volatile
  7798  1295  1D03               	btfss	3,2
  7799  1296  2AA2               	goto	l8912
  7800                           
  7801                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7802  1297  0022               	movlb	2	; select bank2
  7803  1298  110D               	bcf	13,2	;volatile
  7804                           
  7805                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7806  1299  3001               	movlw	1
  7807  129A  0021               	movlb	1	; select bank1
  7808  129B  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7809  129C  3000               	movlw	0
  7810  129D  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7811  129E  3188  2000  3192   	fcall	_setLongBypassState
  7812                           
  7813                           ;SwitchBypass.c: 71: } else {
  7814  12A1  2ABC               	goto	l8918
  7815  12A2                     l8912:	
  7816                           
  7817                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7818  12A2  3001               	movlw	1
  7819  12A3  0021               	movlb	1	; select bank1
  7820  12A4  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7821  12A5  3000               	movlw	0
  7822  12A6  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7823  12A7  31AE  266A  3192   	fcall	_setSwitchBypassState
  7824                           
  7825                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7826  12AA  3000               	movlw	0
  7827  12AB  0021               	movlb	1	; select bank1
  7828  12AC  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7829  12AD  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7830  12AE  3188  2000  3192   	fcall	_setLongBypassState
  7831                           
  7832                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7833  12B1  0022               	movlb	2	; select bank2
  7834  12B2  150D               	bsf	13,2	;volatile
  7835                           
  7836                           ;SwitchBypass.c: 75: }
  7837                           ;SwitchBypass.c: 76: }
  7838                           ;SwitchBypass.c: 77: } else {
  7839  12B3  2ABC               	goto	l8918
  7840  12B4                     l8916:	
  7841                           
  7842                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7843  12B4  3001               	movlw	1
  7844  12B5  0021               	movlb	1	; select bank1
  7845  12B6  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7846  12B7  3000               	movlw	0
  7847  12B8  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7848  12B9  31A2  223A  3192   	fcall	_setDoublePressState
  7849  12BC                     l8918:	
  7850                           
  7851                           ;SwitchBypass.c: 79: }
  7852                           ;SwitchBypass.c: 80: }
  7853                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  7854  12BC  0022               	movlb	2	; select bank2
  7855  12BD  120F               	bcf	15,4	;volatile
  7856                           
  7857                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  7858  12BE  0020               	movlb	0	; select bank0
  7859  12BF  084E               	movf	_doubleTap_state,w	;volatile
  7860  12C0  1D03               	btfss	3,2
  7861  12C1  2AED               	goto	l8944
  7862  12C2  0023               	movlb	3	; select bank3
  7863  12C3  083F               	movf	_longBypass_down^(0+384),w
  7864  12C4  1D03               	btfss	3,2
  7865  12C5  2AED               	goto	l8944
  7866                           
  7867                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7868  12C6  0020               	movlb	0	; select bank0
  7869  12C7  035F               	decf	_switchBypass_state,w
  7870  12C8  1D03               	btfss	3,2
  7871  12C9  2AD8               	goto	l8932
  7872                           
  7873                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7874  12CA  0024               	movlb	4	; select bank4
  7875  12CB  0363               	decf	_switchBypass_up^(0+512),w
  7876  12CC  0464               	iorwf	(_switchBypass_up+1)^(0+512),w
  7877  12CD  1D03               	btfss	3,2
  7878  12CE  2AED               	goto	l8944
  7879                           
  7880                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7881  12CF  0023               	movlb	3	; select bank3
  7882  12D0  01E0               	clrf	_currentBypassState^(0+384)
  7883  12D1  0AE0               	incf	_currentBypassState^(0+384),f
  7884                           
  7885                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7886  12D2  3001               	movlw	1
  7887  12D3  0024               	movlb	4	; select bank4
  7888  12D4  00D1               	movwf	_switchBypass_toggle^(0+512)
  7889  12D5  3000               	movlw	0
  7890  12D6  00D2               	movwf	(_switchBypass_toggle^(0+512)+1)
  7891                           
  7892                           ;SwitchBypass.c: 88: }
  7893                           ;SwitchBypass.c: 89: } else {
  7894  12D7  2AED               	goto	l8944
  7895  12D8                     l8932:	
  7896                           
  7897                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7898  12D8  0023               	movlb	3	; select bank3
  7899  12D9  033C               	decf	_bypass_turning_on^(0+384),w
  7900  12DA  1903               	btfsc	3,2
  7901  12DB  2AED               	goto	l8944
  7902                           
  7903                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7904  12DC  01E0               	clrf	_currentBypassState^(0+384)
  7905                           
  7906                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7907  12DD  01BC               	clrf	_bypass_turning_on^(0+384)
  7908  12DE  0ABC               	incf	_bypass_turning_on^(0+384),f
  7909                           
  7910                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7911  12DF  0024               	movlb	4	; select bank4
  7912  12E0  01D1               	clrf	_switchBypass_toggle^(0+512)
  7913  12E1  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  7914                           
  7915                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  7916  12E2  0020               	movlb	0	; select bank0
  7917  12E3  084F               	movf	_longBypass_state,w	;volatile
  7918  12E4  0021               	movlb	1	; select bank1
  7919  12E5  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7920  12E6  083C               	movf	??_updateSwitchBypass^(0+128),w
  7921  12E7  0023               	movlb	3	; select bank3
  7922  12E8  00C0               	movwf	_longBypass_save^(0+384)
  7923                           
  7924                           ;SwitchBypass.c: 98: longBypass_state = 0;
  7925  12E9  0020               	movlb	0	; select bank0
  7926  12EA  01CF               	clrf	_longBypass_state	;volatile
  7927                           
  7928                           ;SwitchBypass.c: 99: longBypass_start = 0;
  7929  12EB  0022               	movlb	2	; select bank2
  7930  12EC  01EA               	clrf	_longBypass_start^(0+256)
  7931  12ED                     l8944:	
  7932                           
  7933                           ;SwitchBypass.c: 100: }
  7934                           ;SwitchBypass.c: 101: }
  7935                           ;SwitchBypass.c: 103: }
  7936                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  7937  12ED  0024               	movlb	4	; select bank4
  7938  12EE  01E3               	clrf	_switchBypass_up^(0+512)
  7939  12EF  01E4               	clrf	(_switchBypass_up+1)^(0+512)
  7940                           
  7941                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  7942  12F0  0008               	return
  7943  12F1                     l8946:	
  7944  12F1  0023               	movlb	3	; select bank3
  7945  12F2  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7946  12F3  3A80               	xorlw	128
  7947  12F4  0021               	movlb	1	; select bank1
  7948  12F5  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7949  12F6  3080               	movlw	128
  7950  12F7  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7951  12F8  1D03               	skipz
  7952  12F9  2AFD               	goto	u9695
  7953  12FA  3019               	movlw	25
  7954  12FB  0023               	movlb	3	; select bank3
  7955  12FC  0236               	subwf	_switchBypass_pressed^(0+384),w
  7956  12FD                     u9695:	
  7957  12FD  1C03               	skipc
  7958  12FE  0008               	return
  7959                           
  7960                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  7961  12FF  0020               	movlb	0	; select bank0
  7962  1300  034E               	decf	_doubleTap_state,w	;volatile
  7963  1301  1D03               	btfss	3,2
  7964  1302  2B0C               	goto	l8952
  7965                           
  7966                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  7967  1303  0023               	movlb	3	; select bank3
  7968  1304  0860               	movf	_currentBypassState^(0+384),w
  7969  1305  0021               	movlb	1	; select bank1
  7970  1306  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7971  1307  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7972  1308  083C               	movf	??_updateSwitchBypass^(0+128),w
  7973  1309  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7974  130A  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7975  130B  2B3C               	goto	L2
  7976  130C                     l8952:	
  7977                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  7978                           
  7979  130C  0023               	movlb	3	; select bank3
  7980  130D  033C               	decf	_bypass_turning_on^(0+384),w
  7981  130E  1D03               	btfss	3,2
  7982  130F  2B2C               	goto	l8962
  7983                           
  7984                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  7985  1310  0340               	decf	_longBypass_save^(0+384),w
  7986  1311  1D03               	btfss	3,2
  7987  1312  2B26               	goto	l8960
  7988                           
  7989                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  7990  1313  0022               	movlb	2	; select bank2
  7991  1314  110D               	bcf	13,2	;volatile
  7992                           
  7993                           ;SwitchBypass.c: 112: setLongBypassState(1);
  7994  1315  3001               	movlw	1
  7995  1316  0021               	movlb	1	; select bank1
  7996  1317  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7997  1318  3000               	movlw	0
  7998  1319  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7999  131A  3188  2000  3192   	fcall	_setLongBypassState
  8000                           
  8001                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  8002  131D  3001               	movlw	1
  8003  131E  0021               	movlb	1	; select bank1
  8004  131F  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8005  1320  3000               	movlw	0
  8006  1321  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8007  1322  31A0  20A1  3192   	fcall	_setSwitchBypassRelays
  8008                           
  8009                           ;SwitchBypass.c: 114: } else {
  8010  1325  2B40               	goto	l8970
  8011  1326                     l8960:	
  8012                           
  8013                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  8014  1326  3001               	movlw	1
  8015  1327  0021               	movlb	1	; select bank1
  8016  1328  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8017  1329  3000               	movlw	0
  8018  132A  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8019  132B  2B3D               	goto	L3
  8020  132C                     l8962:	
  8021                           ;SwitchBypass.c: 116: }
  8022                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8023                           
  8024  132C  0024               	movlb	4	; select bank4
  8025  132D  0351               	decf	_switchBypass_toggle^(0+512),w
  8026  132E  0452               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8027  132F  1D03               	btfss	3,2
  8028  1330  2B40               	goto	l8970
  8029  1331  0023               	movlb	3	; select bank3
  8030  1332  083F               	movf	_longBypass_down^(0+384),w
  8031  1333  1D03               	btfss	3,2
  8032  1334  2B40               	goto	l8970
  8033  1335  0020               	movlb	0	; select bank0
  8034  1336  084E               	movf	_doubleTap_state,w	;volatile
  8035  1337  1D03               	btfss	3,2
  8036  1338  2B40               	goto	l8970
  8037                           
  8038                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  8039  1339  3000               	movlw	0
  8040  133A  0021               	movlb	1	; select bank1
  8041  133B  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8042  133C                     L2:	
  8043  133C  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8044  133D                     L3:	
  8045  133D  31AE  266A  3192   	fcall	_setSwitchBypassState
  8046  1340                     l8970:	
  8047                           
  8048                           ;SwitchBypass.c: 120: }
  8049                           ;SwitchBypass.c: 122: longBypass_down = 0;
  8050  1340  0023               	movlb	3	; select bank3
  8051  1341  01BF               	clrf	_longBypass_down^(0+384)
  8052                           
  8053                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  8054  1342  0020               	movlb	0	; select bank0
  8055  1343  084F               	movf	_longBypass_state,w	;volatile
  8056  1344  1D03               	btfss	3,2
  8057  1345  2B4C               	goto	l8976
  8058                           
  8059                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  8060  1346  0C5F               	rrf	_switchBypass_state,w
  8061  1347  0022               	movlb	2	; select bank2
  8062  1348  1C03               	skipc
  8063  1349  110D               	bcf	13,2	;volatile
  8064  134A  1803               	skipnc
  8065  134B  150D               	bsf	13,2	;volatile
  8066  134C                     l8976:	
  8067                           
  8068                           ;SwitchBypass.c: 125: }
  8069                           ;SwitchBypass.c: 127: setDoublePressState(0);
  8070  134C  3000               	movlw	0
  8071  134D  0021               	movlb	1	; select bank1
  8072  134E  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8073  134F  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8074  1350  31A2  223A         	fcall	_setDoublePressState
  8075                           
  8076                           ;SwitchBypass.c: 128: longBypass_start = 0;
  8077  1352  0022               	movlb	2	; select bank2
  8078  1353  01EA               	clrf	_longBypass_start^(0+256)
  8079                           
  8080                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  8081  1354  0023               	movlb	3	; select bank3
  8082  1355  01BC               	clrf	_bypass_turning_on^(0+384)
  8083                           
  8084                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  8085  1356  0024               	movlb	4	; select bank4
  8086  1357  01D1               	clrf	_switchBypass_toggle^(0+512)
  8087  1358  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  8088                           
  8089                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  8090  1359  3001               	movlw	1
  8091  135A  00E3               	movwf	_switchBypass_up^(0+512)
  8092  135B  3000               	movlw	0
  8093  135C  00E4               	movwf	(_switchBypass_up^(0+512)+1)
  8094                           
  8095                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  8096  135D  3019               	movlw	25
  8097  135E  0023               	movlb	3	; select bank3
  8098  135F  00B6               	movwf	_switchBypass_pressed^(0+384)
  8099  1360  3000               	movlw	0
  8100  1361  00B7               	movwf	(_switchBypass_pressed^(0+384)+1)
  8101  1362  0008               	return
  8102  1363                     __end_of_updateSwitchBypass:	
  8103                           
  8104                           	psect	text7
  8105  0800                     __ptext7:	
  8106 ;; *************** function _setLongBypassState *****************
  8107 ;; Defined at:
  8108 ;;		line 163 in file "SwitchBypass.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;  f_state         2    0[BANK1 ] int 
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      void 
  8115 ;; Registers used:
  8116 ;;		wreg, status,0
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8122 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8124 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8125 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8126 ;;Total ram usage:        4 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    3
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_updateSwitchBypass
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           
  8137                           ;psect for function _setLongBypassState
  8138  0800                     _setLongBypassState:	
  8139                           
  8140                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  8141                           
  8142                           ;incstack = 0
  8143                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8144  0800  0020               	movlb	0	; select bank0
  8145  0801  084F               	movf	_longBypass_state,w	;volatile
  8146  0802  0021               	movlb	1	; select bank1
  8147  0803  00A2               	movwf	??_setLongBypassState^(0+128)
  8148  0804  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8149  0805  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8150  0806  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8151  0807  1D03               	skipz
  8152  0808  280B               	goto	u8935
  8153  0809  0820               	movf	setLongBypassState@f_state^(0+128),w
  8154  080A  0622               	xorwf	??_setLongBypassState^(0+128),w
  8155  080B                     u8935:	
  8156  080B  1903               	btfsc	3,2
  8157  080C  0008               	return
  8158                           
  8159                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  8160  080D  0820               	movf	setLongBypassState@f_state^(0+128),w
  8161  080E  00A2               	movwf	??_setLongBypassState^(0+128)
  8162  080F  0822               	movf	??_setLongBypassState^(0+128),w
  8163  0810  0020               	movlb	0	; select bank0
  8164  0811  00CF               	movwf	_longBypass_state	;volatile
  8165                           
  8166                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  8167  0812  0021               	movlb	1	; select bank1
  8168  0813  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8169  0814  0022               	movlb	2	; select bank2
  8170  0815  1C03               	skipc
  8171  0816  118D               	bcf	13,3	;volatile
  8172  0817  1803               	skipnc
  8173  0818  158D               	bsf	13,3	;volatile
  8174                           
  8175                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  8176  0819  0021               	movlb	1	; select bank1
  8177  081A  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8178  081B  0020               	movlb	0	; select bank0
  8179  081C  1C03               	skipc
  8180  081D  120E               	bcf	14,4	;volatile
  8181  081E  1803               	skipnc
  8182  081F  160E               	bsf	14,4	;volatile
  8183  0820  0008               	return
  8184  0821                     __end_of_setLongBypassState:	
  8185                           
  8186                           	psect	text8
  8187  223A                     __ptext8:	
  8188 ;; *************** function _setDoublePressState *****************
  8189 ;; Defined at:
  8190 ;;		line 21 in file "preset_programming.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  f_state         2   24[BANK1 ] int 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      void 
  8197 ;; Registers used:
  8198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8204 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8206 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8207 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8208 ;;Total ram usage:        4 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    7
  8211 ;; This function calls:
  8212 ;;		_resetRingLEDs
  8213 ;;		_setPedalMode
  8214 ;;		_setPresetDisplay
  8215 ;;		_showSave
  8216 ;;		_wait_ms
  8217 ;; This function is called by:
  8218 ;;		_updateSwitchBypass
  8219 ;;		_updateSwitchTap
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           
  8224                           ;psect for function _setDoublePressState
  8225  223A                     _setDoublePressState:	
  8226                           
  8227                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8228                           
  8229                           ;incstack = 0
  8230                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8231  223A  0020               	movlb	0	; select bank0
  8232  223B  084E               	movf	_doubleTap_state,w	;volatile
  8233  223C  0021               	movlb	1	; select bank1
  8234  223D  00BA               	movwf	??_setDoublePressState^(0+128)
  8235  223E  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8236  223F  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8237  2240  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8238  2241  1D03               	skipz
  8239  2242  2A45               	goto	u8945
  8240  2243  0838               	movf	setDoublePressState@f_state^(0+128),w
  8241  2244  063A               	xorwf	??_setDoublePressState^(0+128),w
  8242  2245                     u8945:	
  8243  2245  1903               	btfsc	3,2
  8244  2246  0008               	return
  8245                           
  8246                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8247  2247  0838               	movf	setDoublePressState@f_state^(0+128),w
  8248  2248  00BA               	movwf	??_setDoublePressState^(0+128)
  8249  2249  083A               	movf	??_setDoublePressState^(0+128),w
  8250  224A  0020               	movlb	0	; select bank0
  8251  224B  00CE               	movwf	_doubleTap_state	;volatile
  8252                           
  8253                           ;preset_programming.c: 24: if (f_state == 1) {
  8254  224C  0021               	movlb	1	; select bank1
  8255  224D  0338               	decf	setDoublePressState@f_state^(0+128),w
  8256  224E  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8257  224F  1D03               	btfss	3,2
  8258  2250  2A54               	goto	l8514
  8259                           
  8260                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8261  2251  0022               	movlb	2	; select bank2
  8262  2252  120D               	bcf	13,4	;volatile
  8263                           
  8264                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8265  2253  128D               	bcf	13,5	;volatile
  8266  2254                     l8514:	
  8267                           
  8268                           ;preset_programming.c: 30: }
  8269                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8270  2254  0020               	movlb	0	; select bank0
  8271  2255  034E               	decf	_doubleTap_state,w	;volatile
  8272  2256  1D03               	btfss	3,2
  8273  2257  2A6F               	goto	l8530
  8274                           
  8275                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8276  2258  0851               	movf	_presetSaveMode,w
  8277  2259  1D03               	btfss	3,2
  8278  225A  2A64               	goto	l8522
  8279                           
  8280                           ;preset_programming.c: 34: presetSaveMode = 1;
  8281  225B  01D1               	clrf	_presetSaveMode
  8282  225C  0AD1               	incf	_presetSaveMode,f
  8283                           
  8284                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8285  225D  0022               	movlb	2	; select bank2
  8286  225E  108D               	bcf	13,1	;volatile
  8287                           
  8288                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8289  225F  086F               	movf	_presetChannel^(0+256),w
  8290  2260  31A1  210F  31A2   	fcall	_setPresetDisplay
  8291                           
  8292                           ;preset_programming.c: 37: } else {
  8293  2263  2A6F               	goto	l8530
  8294  2264                     l8522:	
  8295                           
  8296                           ;preset_programming.c: 39: presetSaveMode = 0;
  8297  2264  0020               	movlb	0	; select bank0
  8298  2265  01D1               	clrf	_presetSaveMode
  8299                           
  8300                           ;preset_programming.c: 40: setPedalMode();
  8301  2266  31AF  2704  31A2   	fcall	_setPedalMode
  8302                           
  8303                           ;preset_programming.c: 41: resetRingLEDs();
  8304  2269  31AE  261A  31A2   	fcall	_resetRingLEDs
  8305                           
  8306                           ;preset_programming.c: 42: showSave();
  8307  226C  31AD  25EE  31A2   	fcall	_showSave
  8308  226F                     l8530:	
  8309                           
  8310                           ;preset_programming.c: 44: }
  8311                           ;preset_programming.c: 45: }
  8312                           ;preset_programming.c: 47: wait_ms(20);
  8313  226F  3014               	movlw	20
  8314  2270  0021               	movlb	1	; select bank1
  8315  2271  00AC               	movwf	wait_ms@timeSec^(0+128)
  8316  2272  3000               	movlw	0
  8317  2273  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8318  2274  31A0  206F         	fcall	_wait_ms
  8319  2276  0008               	return
  8320  2277                     __end_of_setDoublePressState:	
  8321                           
  8322                           	psect	text9
  8323  2DEE                     __ptext9:	
  8324 ;; *************** function _showSave *****************
  8325 ;; Defined at:
  8326 ;;		line 112 in file "LEDs.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;		None
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;		None
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      void 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8342 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8343 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8344 ;;Total ram usage:        1 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    6
  8347 ;; This function calls:
  8348 ;;		_ring_tactiles
  8349 ;;		_solidring_tactiles
  8350 ;; This function is called by:
  8351 ;;		_setDoublePressState
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _showSave
  8357  2DEE                     _showSave:	
  8358                           
  8359                           ;LEDs.c: 113: suspend_blink = 1;
  8360                           
  8361                           ;incstack = 0
  8362                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8363  2DEE  3001               	movlw	1
  8364  2DEF  0021               	movlb	1	; select bank1
  8365  2DF0  00B7               	movwf	??_showSave^(0+128)
  8366  2DF1  0837               	movf	??_showSave^(0+128),w
  8367  2DF2  0022               	movlb	2	; select bank2
  8368  2DF3  00ED               	movwf	_suspend_blink^(0+256)	;volatile
  8369                           
  8370                           ;LEDs.c: 114: ring_tactiles();
  8371  2DF4  31A4  249D  31AD   	fcall	_ring_tactiles
  8372                           
  8373                           ;LEDs.c: 115: ring_tactiles();
  8374  2DF7  31A4  249D  31AD   	fcall	_ring_tactiles
  8375                           
  8376                           ;LEDs.c: 116: solidring_tactiles();
  8377  2DFA  31A2  22B7  31AD   	fcall	_solidring_tactiles
  8378                           
  8379                           ;LEDs.c: 117: solidring_tactiles();
  8380  2DFD  31A2  22B7         	fcall	_solidring_tactiles
  8381                           
  8382                           ;LEDs.c: 118: suspend_blink = 0;
  8383  2DFF  0022               	movlb	2	; select bank2
  8384  2E00  01ED               	clrf	_suspend_blink^(0+256)	;volatile
  8385  2E01  0008               	return
  8386  2E02                     __end_of_showSave:	
  8387                           
  8388                           	psect	text10
  8389  22B7                     __ptext10:	
  8390 ;; *************** function _solidring_tactiles *****************
  8391 ;; Defined at:
  8392 ;;		line 208 in file "LEDs.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;		None
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8407 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8408 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8409 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8410 ;;Total ram usage:        3 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    5
  8413 ;; This function calls:
  8414 ;;		_set_leds_bottom
  8415 ;;		_set_leds_top
  8416 ;;		_wait_ms
  8417 ;; This function is called by:
  8418 ;;		_showSave
  8419 ;;		_showBootSequence
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           
  8424                           ;psect for function _solidring_tactiles
  8425  22B7                     _solidring_tactiles:	
  8426                           
  8427                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8428                           
  8429                           ;incstack = 0
  8430                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8431  22B7  301E               	movlw	30
  8432  22B8  0021               	movlb	1	; select bank1
  8433  22B9  00B2               	movwf	??_solidring_tactiles^(0+128)
  8434  22BA  0832               	movf	??_solidring_tactiles^(0+128),w
  8435  22BB  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8436                           
  8437                           ;LEDs.c: 210: set_leds_top(100, 1);
  8438  22BC  3064               	movlw	100
  8439  22BD  00A0               	movwf	set_leds_top@x^(0+128)
  8440  22BE  3000               	movlw	0
  8441  22BF  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8442  22C0  3001               	movlw	1
  8443  22C1  00A2               	movwf	set_leds_top@ledState^(0+128)
  8444  22C2  3000               	movlw	0
  8445  22C3  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8446  22C4  31A5  25E3  31A2   	fcall	_set_leds_top
  8447                           
  8448                           ;LEDs.c: 211: set_leds_bottom(100);
  8449  22C7  3064               	movlw	100
  8450  22C8  0021               	movlb	1	; select bank1
  8451  22C9  00A0               	movwf	set_leds_bottom@x^(0+128)
  8452  22CA  3000               	movlw	0
  8453  22CB  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8454  22CC  31A1  2149  31A2   	fcall	_set_leds_bottom
  8455                           
  8456                           ;LEDs.c: 212: wait_ms(ring_delay);
  8457  22CF  0021               	movlb	1	; select bank1
  8458  22D0  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8459  22D1  00B2               	movwf	??_solidring_tactiles^(0+128)
  8460  22D2  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8461  22D3  0832               	movf	??_solidring_tactiles^(0+128),w
  8462  22D4  00AC               	movwf	wait_ms@timeSec^(0+128)
  8463  22D5  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8464  22D6  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8465  22D7  31A0  206F  31A2   	fcall	_wait_ms
  8466                           
  8467                           ;LEDs.c: 214: set_leds_top(0, 1);
  8468  22DA  3000               	movlw	0
  8469  22DB  0021               	movlb	1	; select bank1
  8470  22DC  00A0               	movwf	set_leds_top@x^(0+128)
  8471  22DD  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8472  22DE  3001               	movlw	1
  8473  22DF  00A2               	movwf	set_leds_top@ledState^(0+128)
  8474  22E0  3000               	movlw	0
  8475  22E1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8476  22E2  31A5  25E3  31A2   	fcall	_set_leds_top
  8477                           
  8478                           ;LEDs.c: 215: set_leds_bottom(0);
  8479  22E5  3000               	movlw	0
  8480  22E6  0021               	movlb	1	; select bank1
  8481  22E7  00A0               	movwf	set_leds_bottom@x^(0+128)
  8482  22E8  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8483  22E9  31A1  2149  31A2   	fcall	_set_leds_bottom
  8484                           
  8485                           ;LEDs.c: 216: wait_ms(ring_delay);
  8486  22EC  0021               	movlb	1	; select bank1
  8487  22ED  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8488  22EE  00B2               	movwf	??_solidring_tactiles^(0+128)
  8489  22EF  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8490  22F0  0832               	movf	??_solidring_tactiles^(0+128),w
  8491  22F1  00AC               	movwf	wait_ms@timeSec^(0+128)
  8492  22F2  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8493  22F3  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8494  22F4  31A0  206F         	fcall	_wait_ms
  8495  22F6  0008               	return
  8496  22F7                     __end_of_solidring_tactiles:	
  8497                           
  8498                           	psect	text11
  8499  249D                     __ptext11:	
  8500 ;; *************** function _ring_tactiles *****************
  8501 ;; Defined at:
  8502 ;;		line 196 in file "LEDs.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;		None
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;  iLed            2   21[BANK1 ] int 
  8507 ;;  iLed            2   19[BANK1 ] int 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  1    wreg      void 
  8510 ;; Registers used:
  8511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8518 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8519 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8520 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8521 ;;Total ram usage:        5 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    5
  8524 ;; This function calls:
  8525 ;;		_set_leds_bottom
  8526 ;;		_set_leds_top
  8527 ;;		_wait_ms
  8528 ;; This function is called by:
  8529 ;;		_showSave
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           
  8534                           ;psect for function _ring_tactiles
  8535  249D                     _ring_tactiles:	
  8536                           
  8537                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8538                           
  8539                           ;incstack = 0
  8540                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8541  249D  3001               	movlw	1
  8542  249E  0021               	movlb	1	; select bank1
  8543  249F  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8544  24A0  3000               	movlw	0
  8545  24A1  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8546  24A2  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8547  24A3  3A80               	xorlw	128
  8548  24A4  00B2               	movwf	??_ring_tactiles^(0+128)
  8549  24A5  3080               	movlw	128
  8550  24A6  0232               	subwf	??_ring_tactiles^(0+128),w
  8551  24A7  1D03               	skipz
  8552  24A8  2CAB               	goto	u8385
  8553  24A9  3007               	movlw	7
  8554  24AA  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8555  24AB                     u8385:	
  8556  24AB  1803               	btfsc	3,0
  8557  24AC  2CD1               	goto	l8006
  8558  24AD                     l7998:	
  8559                           
  8560                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8561  24AD  0021               	movlb	1	; select bank1
  8562  24AE  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8563  24AF  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8564  24B0  0833               	movf	ring_tactiles@iLed^(0+128),w
  8565  24B1  00A0               	movwf	set_leds_top@x^(0+128)
  8566  24B2  3001               	movlw	1
  8567  24B3  00A2               	movwf	set_leds_top@ledState^(0+128)
  8568  24B4  3000               	movlw	0
  8569  24B5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8570  24B6  31A5  25E3  31A4   	fcall	_set_leds_top
  8571                           
  8572                           ;LEDs.c: 199: wait_ms(5);
  8573  24B9  3005               	movlw	5
  8574  24BA  0021               	movlb	1	; select bank1
  8575  24BB  00AC               	movwf	wait_ms@timeSec^(0+128)
  8576  24BC  3000               	movlw	0
  8577  24BD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8578  24BE  31A0  206F  31A4   	fcall	_wait_ms
  8579  24C1  3001               	movlw	1
  8580  24C2  0021               	movlb	1	; select bank1
  8581  24C3  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8582  24C4  3000               	movlw	0
  8583  24C5  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8584  24C6  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8585  24C7  3A80               	xorlw	128
  8586  24C8  00B2               	movwf	??_ring_tactiles^(0+128)
  8587  24C9  3080               	movlw	128
  8588  24CA  0232               	subwf	??_ring_tactiles^(0+128),w
  8589  24CB  1D03               	skipz
  8590  24CC  2CCF               	goto	u8395
  8591  24CD  3007               	movlw	7
  8592  24CE  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8593  24CF                     u8395:	
  8594  24CF  1C03               	skipc
  8595  24D0  2CAD               	goto	l7998
  8596  24D1                     l8006:	
  8597                           
  8598                           ;LEDs.c: 200: }
  8599                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8600  24D1  3005               	movlw	5
  8601  24D2  0021               	movlb	1	; select bank1
  8602  24D3  00B5               	movwf	ring_tactiles@iLed_1532^(0+128)
  8603  24D4  3000               	movlw	0
  8604  24D5  00B6               	movwf	(ring_tactiles@iLed_1532^(0+128)+1)
  8605  24D6                     L4:	
  8606  24D6  1BB6               	btfsc	(ring_tactiles@iLed_1532+1)^(0+128),7
  8607  24D7  0008               	return
  8608                           
  8609                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8610  24D8  0836               	movf	(ring_tactiles@iLed_1532+1)^(0+128),w
  8611  24D9  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8612  24DA  0835               	movf	ring_tactiles@iLed_1532^(0+128),w
  8613  24DB  00A0               	movwf	set_leds_bottom@x^(0+128)
  8614  24DC  31A1  2149  31A4   	fcall	_set_leds_bottom
  8615                           
  8616                           ;LEDs.c: 203: wait_ms(5);
  8617  24DF  3005               	movlw	5
  8618  24E0  0021               	movlb	1	; select bank1
  8619  24E1  00AC               	movwf	wait_ms@timeSec^(0+128)
  8620  24E2  3000               	movlw	0
  8621  24E3  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8622  24E4  31A0  206F  31A4   	fcall	_wait_ms
  8623  24E7  30FF               	movlw	255
  8624  24E8  0021               	movlb	1	; select bank1
  8625  24E9  07B5               	addwf	ring_tactiles@iLed_1532^(0+128),f
  8626  24EA  30FF               	movlw	255
  8627  24EB  3DB6               	addwfc	(ring_tactiles@iLed_1532+1)^(0+128),f
  8628  24EC  2CD6               	goto	L4
  8629  24ED                     __end_of_ring_tactiles:	
  8630                           
  8631                           	psect	text12
  8632  2F04                     __ptext12:	
  8633 ;; *************** function _setPedalMode *****************
  8634 ;; Defined at:
  8635 ;;		line 119 in file "tactiles.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;		None
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      void 
  8642 ;; Registers used:
  8643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8653 ;;Total ram usage:        0 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    5
  8656 ;; This function calls:
  8657 ;;		_resetRingLEDs
  8658 ;;		_setExpressionDisplay
  8659 ;;		_setPresetDisplay
  8660 ;; This function is called by:
  8661 ;;		_update_mode
  8662 ;;		_setDoublePressState
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           
  8667                           ;psect for function _setPedalMode
  8668  2F04                     _setPedalMode:	
  8669                           
  8670                           ;tactiles.c: 120: switch (mode2_state) {
  8671                           
  8672                           ;incstack = 0
  8673                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8674  2F04  2F1A               	goto	l8206
  8675  2F05                     l997:	
  8676                           ;tactiles.c: 121: case 0:
  8677                           
  8678                           
  8679                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8680  2F05  0022               	movlb	2	; select bank2
  8681  2F06  108D               	bcf	13,1	;volatile
  8682                           
  8683                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8684  2F07  100D               	bcf	13,0	;volatile
  8685                           
  8686                           ;tactiles.c: 124: resetRingLEDs();
  8687  2F08  31AE  261A         	fcall	_resetRingLEDs
  8688                           
  8689                           ;tactiles.c: 125: break;
  8690  2F0A  0008               	return
  8691  2F0B                     l999:	
  8692                           ;tactiles.c: 126: case 1:
  8693                           
  8694                           
  8695                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8696  2F0B  0022               	movlb	2	; select bank2
  8697  2F0C  108D               	bcf	13,1	;volatile
  8698                           
  8699                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8700  2F0D  140D               	bsf	13,0	;volatile
  8701                           
  8702                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8703  2F0E  086F               	movf	_presetChannel^(0+256),w
  8704  2F0F  31A1  210F         	fcall	_setPresetDisplay
  8705                           
  8706                           ;tactiles.c: 130: break;
  8707  2F11  0008               	return
  8708  2F12                     l1000:	
  8709                           ;tactiles.c: 131: case 2:
  8710                           
  8711                           
  8712                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8713  2F12  0022               	movlb	2	; select bank2
  8714  2F13  148D               	bsf	13,1	;volatile
  8715                           
  8716                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8717  2F14  100D               	bcf	13,0	;volatile
  8718                           
  8719                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8720  2F15  0023               	movlb	3	; select bank3
  8721  2F16  0863               	movf	_expressionChannel^(0+384),w
  8722  2F17  31AE  2602         	fcall	_setExpressionDisplay
  8723                           
  8724                           ;tactiles.c: 136: }
  8725                           
  8726                           ;tactiles.c: 135: break;
  8727  2F19  0008               	return
  8728  2F1A                     l8206:	
  8729  2F1A  0020               	movlb	0	; select bank0
  8730  2F1B  0850               	movf	_mode2_state,w
  8731                           
  8732                           ; Switch size 1, requested type "space"
  8733                           ; Number of cases is 3, Range of values is 0 to 2
  8734                           ; switch strategies available:
  8735                           ; Name         Instructions Cycles
  8736                           ; simple_byte           10     6 (average)
  8737                           ; direct_byte           12     6 (fixed)
  8738                           ; jumptable            260     6 (fixed)
  8739                           ;	Chosen strategy is simple_byte
  8740  2F1C  3A00               	xorlw	0	; case 0
  8741  2F1D  1903               	skipnz
  8742  2F1E  2F05               	goto	l997
  8743  2F1F  3A01               	xorlw	1	; case 1
  8744  2F20  1903               	skipnz
  8745  2F21  2F0B               	goto	l999
  8746  2F22  3A03               	xorlw	3	; case 2
  8747  2F23  1903               	skipnz
  8748  2F24  2F12               	goto	l1000
  8749  2F25  2F26               	goto	l1001
  8750  2F26                     l1001:	
  8751  2F26  0008               	return
  8752  2F27                     __end_of_setPedalMode:	
  8753                           
  8754                           	psect	text13
  8755  210F                     __ptext13:	
  8756 ;; *************** function _setPresetDisplay *****************
  8757 ;; Defined at:
  8758 ;;		line 51 in file "preset_programming.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;  ledChannel      1    wreg     unsigned char 
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8763 ;; Return value:  Size  Location     Type
  8764 ;;                  1    wreg      void 
  8765 ;; Registers used:
  8766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8773 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8774 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8775 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8776 ;;Total ram usage:        3 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; Hardware stack levels required when called:    4
  8779 ;; This function calls:
  8780 ;;		_set_leds_bottom
  8781 ;;		_set_leds_top
  8782 ;; This function is called by:
  8783 ;;		_setPedalMode
  8784 ;;		_update_selectMode
  8785 ;;		_setDoublePressState
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           
  8790                           ;psect for function _setPresetDisplay
  8791  210F                     _setPresetDisplay:	
  8792                           
  8793                           ;incstack = 0
  8794                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8795                           ;setPresetDisplay@ledChannel stored from wreg
  8796  210F  0021               	movlb	1	; select bank1
  8797  2110  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8798                           
  8799                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8800  2111  3006               	movlw	6
  8801  2112  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8802  2113  1803               	skipnc
  8803  2114  292B               	goto	l8026
  8804                           
  8805                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8806  2115  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8807  2116  00A4               	movwf	??_setPresetDisplay^(0+128)
  8808  2117  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8809  2118  0824               	movf	??_setPresetDisplay^(0+128),w
  8810  2119  00A0               	movwf	set_leds_top@x^(0+128)
  8811  211A  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8812  211B  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8813  211C  3001               	movlw	1
  8814  211D  00A2               	movwf	set_leds_top@ledState^(0+128)
  8815  211E  3000               	movlw	0
  8816  211F  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8817  2120  31A5  25E3  31A1   	fcall	_set_leds_top
  8818                           
  8819                           ;preset_programming.c: 54: set_leds_bottom(6);
  8820  2123  3006               	movlw	6
  8821  2124  0021               	movlb	1	; select bank1
  8822  2125  00A0               	movwf	set_leds_bottom@x^(0+128)
  8823  2126  3000               	movlw	0
  8824  2127  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8825  2128  31A1  2149         	fcall	_set_leds_bottom
  8826                           
  8827                           ;preset_programming.c: 55: } else {
  8828  212A  0008               	return
  8829  212B                     l8026:	
  8830                           
  8831                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8832  212B  3006               	movlw	6
  8833  212C  0021               	movlb	1	; select bank1
  8834  212D  00A0               	movwf	set_leds_top@x^(0+128)
  8835  212E  3000               	movlw	0
  8836  212F  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8837  2130  3001               	movlw	1
  8838  2131  00A2               	movwf	set_leds_top@ledState^(0+128)
  8839  2132  3000               	movlw	0
  8840  2133  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8841  2134  31A5  25E3  31A1   	fcall	_set_leds_top
  8842                           
  8843                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8844  2137  0021               	movlb	1	; select bank1
  8845  2138  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8846  2139  00A4               	movwf	??_setPresetDisplay^(0+128)
  8847  213A  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8848  213B  09A4               	comf	??_setPresetDisplay^(0+128),f
  8849  213C  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8850  213D  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8851  213E  1903               	skipnz
  8852  213F  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8853  2140  0824               	movf	??_setPresetDisplay^(0+128),w
  8854  2141  3E0B               	addlw	11
  8855  2142  00A0               	movwf	set_leds_bottom@x^(0+128)
  8856  2143  3000               	movlw	0
  8857  2144  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8858  2145  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8859  2146  31A1  2149         	fcall	_set_leds_bottom
  8860  2148  0008               	return
  8861  2149                     __end_of_setPresetDisplay:	
  8862                           
  8863                           	psect	text14
  8864  2E02                     __ptext14:	
  8865 ;; *************** function _setExpressionDisplay *****************
  8866 ;; Defined at:
  8867 ;;		line 66 in file "preset_programming.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;  ledChannel      1    wreg     unsigned char 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  1    wreg      void 
  8874 ;; Registers used:
  8875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8882 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8883 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8884 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8885 ;;Total ram usage:        3 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    4
  8888 ;; This function calls:
  8889 ;;		_set_leds_bottom
  8890 ;;		_set_leds_top
  8891 ;; This function is called by:
  8892 ;;		_setPedalMode
  8893 ;;		_update_selectMode
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           
  8898                           ;psect for function _setExpressionDisplay
  8899  2E02                     _setExpressionDisplay:	
  8900                           
  8901                           ;incstack = 0
  8902                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8903                           ;setExpressionDisplay@ledChannel stored from wreg
  8904  2E02  0021               	movlb	1	; select bank1
  8905  2E03  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8906                           
  8907                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8908  2E04  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8909  2E05  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8910  2E06  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8911  2E07  0824               	movf	??_setExpressionDisplay^(0+128),w
  8912  2E08  00A0               	movwf	set_leds_top@x^(0+128)
  8913  2E09  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8914  2E0A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8915  2E0B  3001               	movlw	1
  8916  2E0C  00A2               	movwf	set_leds_top@ledState^(0+128)
  8917  2E0D  3000               	movlw	0
  8918  2E0E  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8919  2E0F  31A5  25E3  31AE   	fcall	_set_leds_top
  8920                           
  8921                           ;preset_programming.c: 68: set_leds_bottom(6);
  8922  2E12  3006               	movlw	6
  8923  2E13  0021               	movlb	1	; select bank1
  8924  2E14  00A0               	movwf	set_leds_bottom@x^(0+128)
  8925  2E15  3000               	movlw	0
  8926  2E16  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8927  2E17  31A1  2149         	fcall	_set_leds_bottom
  8928  2E19  0008               	return
  8929  2E1A                     __end_of_setExpressionDisplay:	
  8930                           
  8931                           	psect	text15
  8932  2E1A                     __ptext15:	
  8933 ;; *************** function _resetRingLEDs *****************
  8934 ;; Defined at:
  8935 ;;		line 61 in file "preset_programming.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  1    wreg      void 
  8942 ;; Registers used:
  8943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8953 ;;Total ram usage:        0 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    4
  8956 ;; This function calls:
  8957 ;;		_set_leds_bottom
  8958 ;;		_set_leds_top
  8959 ;; This function is called by:
  8960 ;;		_update_mode
  8961 ;;		_setPedalMode
  8962 ;;		_setDoublePressState
  8963 ;; This function uses a non-reentrant model
  8964 ;;
  8965                           
  8966                           
  8967                           ;psect for function _resetRingLEDs
  8968  2E1A                     _resetRingLEDs:	
  8969                           
  8970                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8971                           
  8972                           ;incstack = 0
  8973                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8974  2E1A  0020               	movlb	0	; select bank0
  8975  2E1B  085B               	movf	_top_push_state+1,w
  8976  2E1C  0021               	movlb	1	; select bank1
  8977  2E1D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8978  2E1E  0020               	movlb	0	; select bank0
  8979  2E1F  085A               	movf	_top_push_state,w
  8980  2E20  0021               	movlb	1	; select bank1
  8981  2E21  00A0               	movwf	set_leds_top@x^(0+128)
  8982  2E22  3001               	movlw	1
  8983  2E23  00A2               	movwf	set_leds_top@ledState^(0+128)
  8984  2E24  3000               	movlw	0
  8985  2E25  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8986  2E26  31A5  25E3  31AE   	fcall	_set_leds_top
  8987                           
  8988                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8989  2E29  0020               	movlb	0	; select bank0
  8990  2E2A  0857               	movf	_bottom_push_state+1,w
  8991  2E2B  0021               	movlb	1	; select bank1
  8992  2E2C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8993  2E2D  0020               	movlb	0	; select bank0
  8994  2E2E  0856               	movf	_bottom_push_state,w
  8995  2E2F  0021               	movlb	1	; select bank1
  8996  2E30  00A0               	movwf	set_leds_bottom@x^(0+128)
  8997  2E31  31A1  2149         	fcall	_set_leds_bottom
  8998  2E33  0008               	return
  8999  2E34                     __end_of_resetRingLEDs:	
  9000                           
  9001                           	psect	text16
  9002  0DBA                     __ptext16:	
  9003 ;; *************** function _updateModulationArray *****************
  9004 ;; Defined at:
  9005 ;;		line 44 in file "modulation.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;		None
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  thisAngle       2   57[BANK2 ] int 
  9010 ;;  iAngle          1   54[BANK2 ] unsigned char 
  9011 ;;  iAngle          1   59[BANK2 ] unsigned char 
  9012 ;;  subDiv          2   55[BANK2 ] int 
  9013 ;;  angleFactor     2   52[BANK2 ] int 
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      void 
  9016 ;; Registers used:
  9017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9024 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9025 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9026 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9027 ;;Total ram usage:       12 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    7
  9030 ;; This function calls:
  9031 ;;		___awdiv
  9032 ;;		___awtoft
  9033 ;;		___wmul
  9034 ;;		_getModulationSubdivision
  9035 ;;		_modCos
  9036 ;;		_modSaw
  9037 ;;		_modSawRev
  9038 ;;		_modSquare
  9039 ;;		_modTri
  9040 ;; This function is called by:
  9041 ;;		_main
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           
  9046                           ;psect for function _updateModulationArray
  9047  0DBA                     _updateModulationArray:	
  9048                           
  9049                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9050                           
  9051                           ;incstack = 0
  9052                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9053  0DBA  31A0  203F  318D   	fcall	_getModulationSubdivision
  9054  0DBD  0021               	movlb	1	; select bank1
  9055  0DBE  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9056  0DBF  0022               	movlb	2	; select bank2
  9057  0DC0  00D8               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9058  0DC1  0021               	movlb	1	; select bank1
  9059  0DC2  0820               	movf	?_getModulationSubdivision^(0+128),w
  9060  0DC3  0022               	movlb	2	; select bank2
  9061  0DC4  00D7               	movwf	updateModulationArray@subDiv^(0+256)
  9062                           
  9063                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9064  0DC5  307A               	movlw	122
  9065  0DC6  0086               	movwf	6
  9066  0DC7  3024               	movlw	36
  9067  0DC8  0087               	movwf	7
  9068  0DC9  3F40               	moviw [0]fsr1
  9069  0DCA  00D0               	movwf	??_updateModulationArray^(0+256)
  9070  0DCB  3F41               	moviw [1]fsr1
  9071  0DCC  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9072  0DCD  0020               	movlb	0	; select bank0
  9073  0DCE  0857               	movf	_bottom_push_state+1,w
  9074  0DCF  0022               	movlb	2	; select bank2
  9075  0DD0  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9076  0DD1  1D03               	skipz
  9077  0DD2  2DD7               	goto	u9325
  9078  0DD3  0020               	movlb	0	; select bank0
  9079  0DD4  0856               	movf	_bottom_push_state,w
  9080  0DD5  0022               	movlb	2	; select bank2
  9081  0DD6  0650               	xorwf	??_updateModulationArray^(0+256),w
  9082  0DD7                     u9325:	
  9083  0DD7  1D03               	skipz
  9084  0DD8  2DFD               	goto	l8778
  9085  0DD9  307C               	movlw	124
  9086  0DDA  0086               	movwf	6
  9087  0DDB  3024               	movlw	36
  9088  0DDC  0087               	movwf	7
  9089  0DDD  3F40               	moviw [0]fsr1
  9090  0DDE  00D0               	movwf	??_updateModulationArray^(0+256)
  9091  0DDF  3F41               	moviw [1]fsr1
  9092  0DE0  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9093  0DE1  0023               	movlb	3	; select bank3
  9094  0DE2  085C               	movf	(_symmetry+1)^(0+384),w
  9095  0DE3  0022               	movlb	2	; select bank2
  9096  0DE4  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9097  0DE5  1D03               	skipz
  9098  0DE6  2DEB               	goto	u9335
  9099  0DE7  0023               	movlb	3	; select bank3
  9100  0DE8  085B               	movf	_symmetry^(0+384),w
  9101  0DE9  0022               	movlb	2	; select bank2
  9102  0DEA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9103  0DEB                     u9335:	
  9104  0DEB  1D03               	skipz
  9105  0DEC  2DFD               	goto	l8778
  9106  0DED  307E               	movlw	126
  9107  0DEE  0086               	movwf	6
  9108  0DEF  3024               	movlw	36
  9109  0DF0  0087               	movwf	7
  9110  0DF1  3F40               	moviw [0]fsr1
  9111  0DF2  00D0               	movwf	??_updateModulationArray^(0+256)
  9112  0DF3  3F41               	moviw [1]fsr1
  9113  0DF4  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9114  0DF5  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9115  0DF6  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9116  0DF7  1D03               	skipz
  9117  0DF8  2DFB               	goto	u9345
  9118  0DF9  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9119  0DFA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9120  0DFB                     u9345:	
  9121  0DFB  1903               	btfsc	3,2
  9122  0DFC  0008               	return
  9123  0DFD                     l8778:	
  9124                           ;modulation.c: 48: return;
  9125                           
  9126                           
  9127                           ;modulation.c: 49: }
  9128                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9129  0DFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9130  0DFE  0021               	movlb	1	; select bank1
  9131  0DFF  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9132  0E00  0022               	movlb	2	; select bank2
  9133  0E01  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9134  0E02  0021               	movlb	1	; select bank1
  9135  0E03  00A0               	movwf	___awdiv@divisor^(0+128)
  9136  0E04  3068               	movlw	104
  9137  0E05  00A2               	movwf	___awdiv@dividend^(0+128)
  9138  0E06  3001               	movlw	1
  9139  0E07  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9140  0E08  31A5  253E  318D   	fcall	___awdiv
  9141  0E0B  0021               	movlb	1	; select bank1
  9142  0E0C  0821               	movf	(?___awdiv+1)^(0+128),w
  9143  0E0D  0022               	movlb	2	; select bank2
  9144  0E0E  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9145  0E0F  0021               	movlb	1	; select bank1
  9146  0E10  0820               	movf	?___awdiv^(0+128),w
  9147  0E11  0022               	movlb	2	; select bank2
  9148  0E12  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9149                           
  9150                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9151  0E13  01DB               	clrf	updateModulationArray@iAngle^(0+256)
  9152  0E14                     l8802:	
  9153  0E14  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9154  0E15  3A80               	xorlw	128
  9155  0E16  3C80               	sublw	128
  9156  0E17  1D03               	skipz
  9157  0E18  2E1B               	goto	u9355
  9158  0E19  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9159  0E1A  025B               	subwf	updateModulationArray@iAngle^(0+256),w
  9160  0E1B                     u9355:	
  9161  0E1B  1803               	btfsc	3,0
  9162  0E1C  2FC1               	goto	l8804
  9163                           
  9164                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9165  0E1D  0022               	movlb	2	; select bank2
  9166  0E1E  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9167  0E1F  00D0               	movwf	??_updateModulationArray^(0+256)
  9168  0E20  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9169  0E21  0850               	movf	??_updateModulationArray^(0+256),w
  9170  0E22  00AE               	movwf	___wmul@multiplier^(0+256)
  9171  0E23  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9172  0E24  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9173  0E25  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9174  0E26  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9175  0E27  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9176  0E28  00B0               	movwf	___wmul@multiplicand^(0+256)
  9177  0E29  31AE  264E  318D   	fcall	___wmul
  9178  0E2C  0022               	movlb	2	; select bank2
  9179  0E2D  082F               	movf	(?___wmul+1)^(0+256),w
  9180  0E2E  00DA               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9181  0E2F  082E               	movf	?___wmul^(0+256),w
  9182  0E30  00D9               	movwf	updateModulationArray@thisAngle^(0+256)
  9183                           
  9184                           ;modulation.c: 54: switch (bottom_push_state) {
  9185  0E31  2FA4               	goto	l8798
  9186  0E32                     l8784:	
  9187                           ;modulation.c: 55: case 1:
  9188                           
  9189                           
  9190                           ;modulation.c: 56: modArray[iAngle] = modCos(thisAngle, symmetry);
  9191  0E32  0022               	movlb	2	; select bank2
  9192  0E33  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9193  0E34  0021               	movlb	1	; select bank1
  9194  0E35  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9195  0E36  0022               	movlb	2	; select bank2
  9196  0E37  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9197  0E38  0021               	movlb	1	; select bank1
  9198  0E39  00A8               	movwf	___awtoft@c^(0+128)
  9199  0E3A  31AE  26E2  318D   	fcall	___awtoft
  9200  0E3D  0021               	movlb	1	; select bank1
  9201  0E3E  0828               	movf	?___awtoft^(0+128),w
  9202  0E3F  0022               	movlb	2	; select bank2
  9203  0E40  00B4               	movwf	modCos@angle^(0+256)
  9204  0E41  0021               	movlb	1	; select bank1
  9205  0E42  0829               	movf	(?___awtoft+1)^(0+128),w
  9206  0E43  0022               	movlb	2	; select bank2
  9207  0E44  00B5               	movwf	(modCos@angle+1)^(0+256)
  9208  0E45  0021               	movlb	1	; select bank1
  9209  0E46  082A               	movf	(?___awtoft+2)^(0+128),w
  9210  0E47  0022               	movlb	2	; select bank2
  9211  0E48  00B6               	movwf	(modCos@angle+2)^(0+256)
  9212  0E49  0023               	movlb	3	; select bank3
  9213  0E4A  085C               	movf	(_symmetry+1)^(0+384),w
  9214  0E4B  0021               	movlb	1	; select bank1
  9215  0E4C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9216  0E4D  0023               	movlb	3	; select bank3
  9217  0E4E  085B               	movf	_symmetry^(0+384),w
  9218  0E4F  0021               	movlb	1	; select bank1
  9219  0E50  00A8               	movwf	___awtoft@c^(0+128)
  9220  0E51  31AE  26E2  318D   	fcall	___awtoft
  9221  0E54  0021               	movlb	1	; select bank1
  9222  0E55  0828               	movf	?___awtoft^(0+128),w
  9223  0E56  0022               	movlb	2	; select bank2
  9224  0E57  00B7               	movwf	modCos@inflection^(0+256)
  9225  0E58  0021               	movlb	1	; select bank1
  9226  0E59  0829               	movf	(?___awtoft+1)^(0+128),w
  9227  0E5A  0022               	movlb	2	; select bank2
  9228  0E5B  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9229  0E5C  0021               	movlb	1	; select bank1
  9230  0E5D  082A               	movf	(?___awtoft+2)^(0+128),w
  9231  0E5E  0022               	movlb	2	; select bank2
  9232  0E5F  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9233  0E60  3196  2654  318D   	fcall	_modCos
  9234  0E63  0022               	movlb	2	; select bank2
  9235  0E64  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9236  0E65  00D0               	movwf	??_updateModulationArray^(0+256)
  9237  0E66  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9238  0E67  35D0               	lslf	??_updateModulationArray^(0+256),f
  9239  0E68  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9240  0E69  308A               	movlw	138
  9241  0E6A  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9242  0E6B  3023               	movlw	35
  9243  0E6C  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9244  0E6D  0850               	movf	??_updateModulationArray^(0+256),w
  9245  0E6E  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9246  0E6F  0086               	movwf	6
  9247  0E70  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9248  0E71  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9249  0E72  0087               	movwf	7
  9250  0E73  0834               	movf	?_modCos^(0+256),w
  9251  0E74  3FC0               	movwi [0]fsr1
  9252  0E75  0835               	movf	(?_modCos+1)^(0+256),w
  9253  0E76  3FC1               	movwi [1]fsr1
  9254                           
  9255                           ;modulation.c: 57: break;
  9256  0E77  2FBB               	goto	l8800
  9257  0E78                     l8786:	
  9258                           ;modulation.c: 58: case 2:
  9259                           
  9260                           
  9261                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9262  0E78  0022               	movlb	2	; select bank2
  9263  0E79  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9264  0E7A  0021               	movlb	1	; select bank1
  9265  0E7B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9266  0E7C  0022               	movlb	2	; select bank2
  9267  0E7D  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9268  0E7E  0021               	movlb	1	; select bank1
  9269  0E7F  00A8               	movwf	___awtoft@c^(0+128)
  9270  0E80  31AE  26E2  318D   	fcall	___awtoft
  9271  0E83  0021               	movlb	1	; select bank1
  9272  0E84  0828               	movf	?___awtoft^(0+128),w
  9273  0E85  0022               	movlb	2	; select bank2
  9274  0E86  00AE               	movwf	modTri@angle^(0+256)
  9275  0E87  0021               	movlb	1	; select bank1
  9276  0E88  0829               	movf	(?___awtoft+1)^(0+128),w
  9277  0E89  0022               	movlb	2	; select bank2
  9278  0E8A  00AF               	movwf	(modTri@angle+1)^(0+256)
  9279  0E8B  0021               	movlb	1	; select bank1
  9280  0E8C  082A               	movf	(?___awtoft+2)^(0+128),w
  9281  0E8D  0022               	movlb	2	; select bank2
  9282  0E8E  00B0               	movwf	(modTri@angle+2)^(0+256)
  9283  0E8F  0023               	movlb	3	; select bank3
  9284  0E90  085C               	movf	(_symmetry+1)^(0+384),w
  9285  0E91  0021               	movlb	1	; select bank1
  9286  0E92  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9287  0E93  0023               	movlb	3	; select bank3
  9288  0E94  085B               	movf	_symmetry^(0+384),w
  9289  0E95  0021               	movlb	1	; select bank1
  9290  0E96  00A8               	movwf	___awtoft@c^(0+128)
  9291  0E97  31AE  26E2  318D   	fcall	___awtoft
  9292  0E9A  0021               	movlb	1	; select bank1
  9293  0E9B  0828               	movf	?___awtoft^(0+128),w
  9294  0E9C  0022               	movlb	2	; select bank2
  9295  0E9D  00B1               	movwf	modTri@inflection^(0+256)
  9296  0E9E  0021               	movlb	1	; select bank1
  9297  0E9F  0829               	movf	(?___awtoft+1)^(0+128),w
  9298  0EA0  0022               	movlb	2	; select bank2
  9299  0EA1  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9300  0EA2  0021               	movlb	1	; select bank1
  9301  0EA3  082A               	movf	(?___awtoft+2)^(0+128),w
  9302  0EA4  0022               	movlb	2	; select bank2
  9303  0EA5  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9304  0EA6  3189  21F0  318D   	fcall	_modTri
  9305  0EA9  0022               	movlb	2	; select bank2
  9306  0EAA  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9307  0EAB  00D0               	movwf	??_updateModulationArray^(0+256)
  9308  0EAC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9309  0EAD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9310  0EAE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9311  0EAF  308A               	movlw	138
  9312  0EB0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9313  0EB1  3023               	movlw	35
  9314  0EB2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9315  0EB3  0850               	movf	??_updateModulationArray^(0+256),w
  9316  0EB4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9317  0EB5  0086               	movwf	6
  9318  0EB6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9319  0EB7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9320  0EB8  0087               	movwf	7
  9321  0EB9  082E               	movf	?_modTri^(0+256),w
  9322  0EBA  3FC0               	movwi [0]fsr1
  9323  0EBB  082F               	movf	(?_modTri+1)^(0+256),w
  9324  0EBC  3FC1               	movwi [1]fsr1
  9325                           
  9326                           ;modulation.c: 60: break;
  9327  0EBD  2FBB               	goto	l8800
  9328  0EBE                     l8788:	
  9329                           ;modulation.c: 61: case 3:
  9330                           
  9331                           
  9332                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9333  0EBE  0022               	movlb	2	; select bank2
  9334  0EBF  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9335  0EC0  0021               	movlb	1	; select bank1
  9336  0EC1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9337  0EC2  0022               	movlb	2	; select bank2
  9338  0EC3  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9339  0EC4  0021               	movlb	1	; select bank1
  9340  0EC5  00A8               	movwf	___awtoft@c^(0+128)
  9341  0EC6  31AE  26E2  318D   	fcall	___awtoft
  9342  0EC9  0021               	movlb	1	; select bank1
  9343  0ECA  0828               	movf	?___awtoft^(0+128),w
  9344  0ECB  0022               	movlb	2	; select bank2
  9345  0ECC  00C8               	movwf	modSquare@angle^(0+256)
  9346  0ECD  0021               	movlb	1	; select bank1
  9347  0ECE  0829               	movf	(?___awtoft+1)^(0+128),w
  9348  0ECF  0022               	movlb	2	; select bank2
  9349  0ED0  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9350  0ED1  0021               	movlb	1	; select bank1
  9351  0ED2  082A               	movf	(?___awtoft+2)^(0+128),w
  9352  0ED3  0022               	movlb	2	; select bank2
  9353  0ED4  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9354  0ED5  0023               	movlb	3	; select bank3
  9355  0ED6  085C               	movf	(_symmetry+1)^(0+384),w
  9356  0ED7  0021               	movlb	1	; select bank1
  9357  0ED8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9358  0ED9  0023               	movlb	3	; select bank3
  9359  0EDA  085B               	movf	_symmetry^(0+384),w
  9360  0EDB  0021               	movlb	1	; select bank1
  9361  0EDC  00A8               	movwf	___awtoft@c^(0+128)
  9362  0EDD  31AE  26E2  318D   	fcall	___awtoft
  9363  0EE0  0021               	movlb	1	; select bank1
  9364  0EE1  0828               	movf	?___awtoft^(0+128),w
  9365  0EE2  0022               	movlb	2	; select bank2
  9366  0EE3  00CB               	movwf	modSquare@inflection^(0+256)
  9367  0EE4  0021               	movlb	1	; select bank1
  9368  0EE5  0829               	movf	(?___awtoft+1)^(0+128),w
  9369  0EE6  0022               	movlb	2	; select bank2
  9370  0EE7  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9371  0EE8  0021               	movlb	1	; select bank1
  9372  0EE9  082A               	movf	(?___awtoft+2)^(0+128),w
  9373  0EEA  0022               	movlb	2	; select bank2
  9374  0EEB  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9375  0EEC  31A1  21FD  318D   	fcall	_modSquare
  9376  0EEF  0022               	movlb	2	; select bank2
  9377  0EF0  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9378  0EF1  00D0               	movwf	??_updateModulationArray^(0+256)
  9379  0EF2  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9380  0EF3  35D0               	lslf	??_updateModulationArray^(0+256),f
  9381  0EF4  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9382  0EF5  308A               	movlw	138
  9383  0EF6  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9384  0EF7  3023               	movlw	35
  9385  0EF8  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9386  0EF9  0850               	movf	??_updateModulationArray^(0+256),w
  9387  0EFA  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9388  0EFB  0086               	movwf	6
  9389  0EFC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9390  0EFD  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9391  0EFE  0087               	movwf	7
  9392  0EFF  0848               	movf	?_modSquare^(0+256),w
  9393  0F00  3FC0               	movwi [0]fsr1
  9394  0F01  0849               	movf	(?_modSquare+1)^(0+256),w
  9395  0F02  3FC1               	movwi [1]fsr1
  9396                           
  9397                           ;modulation.c: 63: break;
  9398  0F03  2FBB               	goto	l8800
  9399  0F04                     l8790:	
  9400                           ;modulation.c: 64: case 4:
  9401                           
  9402                           
  9403                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9404  0F04  0022               	movlb	2	; select bank2
  9405  0F05  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9406  0F06  0021               	movlb	1	; select bank1
  9407  0F07  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9408  0F08  0022               	movlb	2	; select bank2
  9409  0F09  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9410  0F0A  0021               	movlb	1	; select bank1
  9411  0F0B  00A8               	movwf	___awtoft@c^(0+128)
  9412  0F0C  31AE  26E2  318D   	fcall	___awtoft
  9413  0F0F  0021               	movlb	1	; select bank1
  9414  0F10  0828               	movf	?___awtoft^(0+128),w
  9415  0F11  0022               	movlb	2	; select bank2
  9416  0F12  00C2               	movwf	modSawRev@angle^(0+256)
  9417  0F13  0021               	movlb	1	; select bank1
  9418  0F14  0829               	movf	(?___awtoft+1)^(0+128),w
  9419  0F15  0022               	movlb	2	; select bank2
  9420  0F16  00C3               	movwf	(modSawRev@angle+1)^(0+256)
  9421  0F17  0021               	movlb	1	; select bank1
  9422  0F18  082A               	movf	(?___awtoft+2)^(0+128),w
  9423  0F19  0022               	movlb	2	; select bank2
  9424  0F1A  00C4               	movwf	(modSawRev@angle+2)^(0+256)
  9425  0F1B  0023               	movlb	3	; select bank3
  9426  0F1C  085C               	movf	(_symmetry+1)^(0+384),w
  9427  0F1D  0021               	movlb	1	; select bank1
  9428  0F1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9429  0F1F  0023               	movlb	3	; select bank3
  9430  0F20  085B               	movf	_symmetry^(0+384),w
  9431  0F21  0021               	movlb	1	; select bank1
  9432  0F22  00A8               	movwf	___awtoft@c^(0+128)
  9433  0F23  31AE  26E2  318D   	fcall	___awtoft
  9434  0F26  0021               	movlb	1	; select bank1
  9435  0F27  0828               	movf	?___awtoft^(0+128),w
  9436  0F28  0022               	movlb	2	; select bank2
  9437  0F29  00C5               	movwf	modSawRev@inflection^(0+256)
  9438  0F2A  0021               	movlb	1	; select bank1
  9439  0F2B  0829               	movf	(?___awtoft+1)^(0+128),w
  9440  0F2C  0022               	movlb	2	; select bank2
  9441  0F2D  00C6               	movwf	(modSawRev@inflection+1)^(0+256)
  9442  0F2E  0021               	movlb	1	; select bank1
  9443  0F2F  082A               	movf	(?___awtoft+2)^(0+128),w
  9444  0F30  0022               	movlb	2	; select bank2
  9445  0F31  00C7               	movwf	(modSawRev@inflection+2)^(0+256)
  9446  0F32  31AE  2686  318D   	fcall	_modSawRev
  9447  0F35  0022               	movlb	2	; select bank2
  9448  0F36  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9449  0F37  00D0               	movwf	??_updateModulationArray^(0+256)
  9450  0F38  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9451  0F39  35D0               	lslf	??_updateModulationArray^(0+256),f
  9452  0F3A  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9453  0F3B  308A               	movlw	138
  9454  0F3C  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9455  0F3D  3023               	movlw	35
  9456  0F3E  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9457  0F3F  0850               	movf	??_updateModulationArray^(0+256),w
  9458  0F40  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9459  0F41  0086               	movwf	6
  9460  0F42  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9461  0F43  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9462  0F44  0087               	movwf	7
  9463  0F45  0842               	movf	?_modSawRev^(0+256),w
  9464  0F46  3FC0               	movwi [0]fsr1
  9465  0F47  0843               	movf	(?_modSawRev+1)^(0+256),w
  9466  0F48  3FC1               	movwi [1]fsr1
  9467                           
  9468                           ;modulation.c: 66: break;
  9469  0F49  2FBB               	goto	l8800
  9470  0F4A                     l8792:	
  9471                           ;modulation.c: 67: case 5:
  9472                           
  9473                           
  9474                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9475  0F4A  0022               	movlb	2	; select bank2
  9476  0F4B  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9477  0F4C  0021               	movlb	1	; select bank1
  9478  0F4D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9479  0F4E  0022               	movlb	2	; select bank2
  9480  0F4F  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9481  0F50  0021               	movlb	1	; select bank1
  9482  0F51  00A8               	movwf	___awtoft@c^(0+128)
  9483  0F52  31AE  26E2  318D   	fcall	___awtoft
  9484  0F55  0021               	movlb	1	; select bank1
  9485  0F56  0828               	movf	?___awtoft^(0+128),w
  9486  0F57  0022               	movlb	2	; select bank2
  9487  0F58  00AE               	movwf	modSaw@angle^(0+256)
  9488  0F59  0021               	movlb	1	; select bank1
  9489  0F5A  0829               	movf	(?___awtoft+1)^(0+128),w
  9490  0F5B  0022               	movlb	2	; select bank2
  9491  0F5C  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9492  0F5D  0021               	movlb	1	; select bank1
  9493  0F5E  082A               	movf	(?___awtoft+2)^(0+128),w
  9494  0F5F  0022               	movlb	2	; select bank2
  9495  0F60  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9496  0F61  0023               	movlb	3	; select bank3
  9497  0F62  085C               	movf	(_symmetry+1)^(0+384),w
  9498  0F63  0021               	movlb	1	; select bank1
  9499  0F64  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9500  0F65  0023               	movlb	3	; select bank3
  9501  0F66  085B               	movf	_symmetry^(0+384),w
  9502  0F67  0021               	movlb	1	; select bank1
  9503  0F68  00A8               	movwf	___awtoft@c^(0+128)
  9504  0F69  31AE  26E2  318D   	fcall	___awtoft
  9505  0F6C  0021               	movlb	1	; select bank1
  9506  0F6D  0828               	movf	?___awtoft^(0+128),w
  9507  0F6E  0022               	movlb	2	; select bank2
  9508  0F6F  00B1               	movwf	modSaw@inflection^(0+256)
  9509  0F70  0021               	movlb	1	; select bank1
  9510  0F71  0829               	movf	(?___awtoft+1)^(0+128),w
  9511  0F72  0022               	movlb	2	; select bank2
  9512  0F73  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9513  0F74  0021               	movlb	1	; select bank1
  9514  0F75  082A               	movf	(?___awtoft+2)^(0+128),w
  9515  0F76  0022               	movlb	2	; select bank2
  9516  0F77  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9517  0F78  3194  24BC  318D   	fcall	_modSaw
  9518  0F7B  0022               	movlb	2	; select bank2
  9519  0F7C  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9520  0F7D  00D0               	movwf	??_updateModulationArray^(0+256)
  9521  0F7E  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9522  0F7F  35D0               	lslf	??_updateModulationArray^(0+256),f
  9523  0F80  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9524  0F81  308A               	movlw	138
  9525  0F82  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9526  0F83  3023               	movlw	35
  9527  0F84  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9528  0F85  0850               	movf	??_updateModulationArray^(0+256),w
  9529  0F86  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9530  0F87  0086               	movwf	6
  9531  0F88  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9532  0F89  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9533  0F8A  0087               	movwf	7
  9534  0F8B  082E               	movf	?_modSaw^(0+256),w
  9535  0F8C  3FC0               	movwi [0]fsr1
  9536  0F8D  082F               	movf	(?_modSaw+1)^(0+256),w
  9537  0F8E  3FC1               	movwi [1]fsr1
  9538                           
  9539                           ;modulation.c: 69: break;
  9540  0F8F  2FBB               	goto	l8800
  9541  0F90                     l8794:	
  9542                           ;modulation.c: 70: default:
  9543                           
  9544                           
  9545                           ;modulation.c: 71: modArray[iAngle] = 0;
  9546  0F90  0022               	movlb	2	; select bank2
  9547  0F91  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9548  0F92  00D0               	movwf	??_updateModulationArray^(0+256)
  9549  0F93  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9550  0F94  35D0               	lslf	??_updateModulationArray^(0+256),f
  9551  0F95  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9552  0F96  308A               	movlw	138
  9553  0F97  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9554  0F98  3023               	movlw	35
  9555  0F99  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9556  0F9A  0850               	movf	??_updateModulationArray^(0+256),w
  9557  0F9B  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9558  0F9C  0086               	movwf	6
  9559  0F9D  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9560  0F9E  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9561  0F9F  0087               	movwf	7
  9562  0FA0  3000               	movlw	0
  9563  0FA1  3FC0               	movwi [0]fsr1
  9564  0FA2  3FC1               	movwi [1]fsr1
  9565                           
  9566                           ;modulation.c: 73: }
  9567                           
  9568                           ;modulation.c: 72: break;
  9569  0FA3  2FBB               	goto	l8800
  9570  0FA4                     l8798:	
  9571                           
  9572                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9573                           ; Switch size 1, requested type "space"
  9574                           ; Number of cases is 1, Range of values is 0 to 0
  9575                           ; switch strategies available:
  9576                           ; Name         Instructions Cycles
  9577                           ; simple_byte            4     3 (average)
  9578                           ; direct_byte            8     6 (fixed)
  9579                           ; jumptable            260     6 (fixed)
  9580                           ;	Chosen strategy is simple_byte
  9581  0FA4  0020               	movlb	0	; select bank0
  9582  0FA5  0857               	movf	_bottom_push_state+1,w
  9583  0FA6  3A00               	xorlw	0	; case 0
  9584  0FA7  1903               	skipnz
  9585  0FA8  2FAA               	goto	l9804
  9586  0FA9  2F90               	goto	l8794
  9587  0FAA                     l9804:	
  9588                           
  9589                           ; Switch size 1, requested type "space"
  9590                           ; Number of cases is 5, Range of values is 1 to 5
  9591                           ; switch strategies available:
  9592                           ; Name         Instructions Cycles
  9593                           ; simple_byte           16     9 (average)
  9594                           ; direct_byte           19     9 (fixed)
  9595                           ; jumptable            263     9 (fixed)
  9596                           ;	Chosen strategy is simple_byte
  9597  0FAA  0856               	movf	_bottom_push_state,w
  9598  0FAB  3A01               	xorlw	1	; case 1
  9599  0FAC  1903               	skipnz
  9600  0FAD  2E32               	goto	l8784
  9601  0FAE  3A03               	xorlw	3	; case 2
  9602  0FAF  1903               	skipnz
  9603  0FB0  2E78               	goto	l8786
  9604  0FB1  3A01               	xorlw	1	; case 3
  9605  0FB2  1903               	skipnz
  9606  0FB3  2EBE               	goto	l8788
  9607  0FB4  3A07               	xorlw	7	; case 4
  9608  0FB5  1903               	skipnz
  9609  0FB6  2F04               	goto	l8790
  9610  0FB7  3A01               	xorlw	1	; case 5
  9611  0FB8  1903               	skipnz
  9612  0FB9  2F4A               	goto	l8792
  9613  0FBA  2F90               	goto	l8794
  9614  0FBB                     l8800:	
  9615  0FBB  3001               	movlw	1
  9616  0FBC  0022               	movlb	2	; select bank2
  9617  0FBD  00D0               	movwf	??_updateModulationArray^(0+256)
  9618  0FBE  0850               	movf	??_updateModulationArray^(0+256),w
  9619  0FBF  07DB               	addwf	updateModulationArray@iAngle^(0+256),f
  9620  0FC0  2E14               	goto	l8802
  9621  0FC1                     l8804:	
  9622                           
  9623                           ;modulation.c: 74: }
  9624                           ;modulation.c: 75: for (char iAngle = subDiv; iAngle < 120; iAngle++) {
  9625  0FC1  0022               	movlb	2	; select bank2
  9626  0FC2  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9627  0FC3  00D0               	movwf	??_updateModulationArray^(0+256)
  9628  0FC4  0850               	movf	??_updateModulationArray^(0+256),w
  9629  0FC5  00D6               	movwf	updateModulationArray@iAngle_2349^(0+256)
  9630  0FC6  3078               	movlw	120
  9631  0FC7  0256               	subwf	updateModulationArray@iAngle_2349^(0+256),w
  9632  0FC8  1803               	btfsc	3,0
  9633  0FC9  2FE4               	goto	l8814
  9634  0FCA                     l8808:	
  9635                           
  9636                           ;modulation.c: 76: modArray[iAngle] = 0 ;
  9637  0FCA  0856               	movf	updateModulationArray@iAngle_2349^(0+256),w
  9638  0FCB  00D0               	movwf	??_updateModulationArray^(0+256)
  9639  0FCC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9640  0FCD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9641  0FCE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9642  0FCF  308A               	movlw	138
  9643  0FD0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9644  0FD1  3023               	movlw	35
  9645  0FD2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9646  0FD3  0850               	movf	??_updateModulationArray^(0+256),w
  9647  0FD4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9648  0FD5  0086               	movwf	6
  9649  0FD6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9650  0FD7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9651  0FD8  0087               	movwf	7
  9652  0FD9  3000               	movlw	0
  9653  0FDA  3FC0               	movwi [0]fsr1
  9654  0FDB  3FC1               	movwi [1]fsr1
  9655  0FDC  3001               	movlw	1
  9656  0FDD  00D0               	movwf	??_updateModulationArray^(0+256)
  9657  0FDE  0850               	movf	??_updateModulationArray^(0+256),w
  9658  0FDF  07D6               	addwf	updateModulationArray@iAngle_2349^(0+256),f
  9659  0FE0  3078               	movlw	120
  9660  0FE1  0256               	subwf	updateModulationArray@iAngle_2349^(0+256),w
  9661  0FE2  1C03               	skipc
  9662  0FE3  2FCA               	goto	l8808
  9663  0FE4                     l8814:	
  9664                           
  9665                           ;modulation.c: 77: }
  9666                           ;modulation.c: 78: modArray[120] = bottom_push_state;
  9667  0FE4  307A               	movlw	122
  9668  0FE5  0086               	movwf	6
  9669  0FE6  3024               	movlw	36
  9670  0FE7  0087               	movwf	7
  9671  0FE8  0020               	movlb	0	; select bank0
  9672  0FE9  0856               	movf	_bottom_push_state,w
  9673  0FEA  3FC0               	movwi [0]fsr1
  9674  0FEB  0857               	movf	_bottom_push_state+1,w
  9675  0FEC  3FC1               	movwi [1]fsr1
  9676                           
  9677                           ;modulation.c: 79: modArray[121] = symmetry;
  9678  0FED  307C               	movlw	124
  9679  0FEE  0086               	movwf	6
  9680  0FEF  3024               	movlw	36
  9681  0FF0  0087               	movwf	7
  9682  0FF1  0023               	movlb	3	; select bank3
  9683  0FF2  085B               	movf	_symmetry^(0+384),w
  9684  0FF3  3FC0               	movwi [0]fsr1
  9685  0FF4  085C               	movf	(_symmetry+1)^(0+384),w
  9686  0FF5  3FC1               	movwi [1]fsr1
  9687                           
  9688                           ;modulation.c: 80: modArray[122] = subDiv;
  9689  0FF6  307E               	movlw	126
  9690  0FF7  0086               	movwf	6
  9691  0FF8  3024               	movlw	36
  9692  0FF9  0087               	movwf	7
  9693  0FFA  0022               	movlb	2	; select bank2
  9694  0FFB  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9695  0FFC  3FC0               	movwi [0]fsr1
  9696  0FFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9697  0FFE  3FC1               	movwi [1]fsr1
  9698  0FFF  0008               	return
  9699  1000                     __end_of_updateModulationArray:	
  9700                           
  9701                           	psect	text17
  9702  09F0                     __ptext17:	
  9703 ;; *************** function _modTri *****************
  9704 ;; Defined at:
  9705 ;;		line 99 in file "modulation.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;  angle           3   14[BANK2 ] void 
  9708 ;;  inflection      3   17[BANK2 ] void 
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;  tmpVal          3   29[BANK2 ] void 
  9711 ;;  period          3   26[BANK2 ] void 
  9712 ;;  shift           3   23[BANK2 ] void 
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  2   14[BANK2 ] int 
  9715 ;; Registers used:
  9716 ;;		wreg, status,2, status,0, pclath, cstack
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9722 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9723 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9725 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9726 ;;Total ram usage:       18 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    5
  9729 ;; This function calls:
  9730 ;;		___ftadd
  9731 ;;		___ftdiv
  9732 ;;		___ftge
  9733 ;;		___ftmul
  9734 ;;		___ftneg
  9735 ;;		___fttol
  9736 ;; This function is called by:
  9737 ;;		_updateModulationArray
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           
  9742                           ;psect for function _modTri
  9743  09F0                     _modTri:	
  9744                           
  9745                           ;modulation.c: 100: double period = 1.0;
  9746                           
  9747                           ;incstack = 0
  9748                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9749  09F0  3000               	movlw	0
  9750  09F1  0022               	movlb	2	; select bank2
  9751  09F2  00BA               	movwf	modTri@period^(0+256)
  9752  09F3  3080               	movlw	128
  9753  09F4  00BB               	movwf	(modTri@period+1)^(0+256)
  9754  09F5  303F               	movlw	63
  9755  09F6  00BC               	movwf	(modTri@period+2)^(0+256)
  9756                           
  9757                           ;modulation.c: 101: double shift = 0;
  9758  09F7  3000               	movlw	0
  9759  09F8  00B7               	movwf	modTri@shift^(0+256)
  9760  09F9  3000               	movlw	0
  9761  09FA  00B8               	movwf	(modTri@shift+1)^(0+256)
  9762  09FB  3000               	movlw	0
  9763  09FC  00B9               	movwf	(modTri@shift+2)^(0+256)
  9764                           
  9765                           ;modulation.c: 103: if(angle<=inflection) {
  9766  09FD  0831               	movf	modTri@inflection^(0+256),w
  9767  09FE  0021               	movlb	1	; select bank1
  9768  09FF  00A0               	movwf	___ftge@ff1^(0+128)
  9769  0A00  0022               	movlb	2	; select bank2
  9770  0A01  0832               	movf	(modTri@inflection+1)^(0+256),w
  9771  0A02  0021               	movlb	1	; select bank1
  9772  0A03  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9773  0A04  0022               	movlb	2	; select bank2
  9774  0A05  0833               	movf	(modTri@inflection+2)^(0+256),w
  9775  0A06  0021               	movlb	1	; select bank1
  9776  0A07  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9777  0A08  0022               	movlb	2	; select bank2
  9778  0A09  082E               	movf	modTri@angle^(0+256),w
  9779  0A0A  0021               	movlb	1	; select bank1
  9780  0A0B  00A3               	movwf	___ftge@ff2^(0+128)
  9781  0A0C  0022               	movlb	2	; select bank2
  9782  0A0D  082F               	movf	(modTri@angle+1)^(0+256),w
  9783  0A0E  0021               	movlb	1	; select bank1
  9784  0A0F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9785  0A10  0022               	movlb	2	; select bank2
  9786  0A11  0830               	movf	(modTri@angle+2)^(0+256),w
  9787  0A12  0021               	movlb	1	; select bank1
  9788  0A13  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9789  0A14  31A1  2184  3189   	fcall	___ftge
  9790  0A17  1C03               	btfss	3,0
  9791  0A18  2A25               	goto	l8560
  9792                           
  9793                           ;modulation.c: 104: period = 180.0/inflection;
  9794  0A19  0022               	movlb	2	; select bank2
  9795  0A1A  0831               	movf	modTri@inflection^(0+256),w
  9796  0A1B  0021               	movlb	1	; select bank1
  9797  0A1C  00CE               	movwf	___ftdiv@f2^(0+128)
  9798  0A1D  0022               	movlb	2	; select bank2
  9799  0A1E  0832               	movf	(modTri@inflection+1)^(0+256),w
  9800  0A1F  0021               	movlb	1	; select bank1
  9801  0A20  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9802  0A21  0022               	movlb	2	; select bank2
  9803  0A22  0833               	movf	(modTri@inflection+2)^(0+256),w
  9804  0A23  0021               	movlb	1	; select bank1
  9805  0A24  2AE0               	goto	L5
  9806  0A25                     l8560:	
  9807                           ;modulation.c: 105: } else {
  9808                           
  9809                           
  9810                           ;modulation.c: 106: shift = -(360-inflection*2)*(180/(360-inflection));
  9811  0A25  0022               	movlb	2	; select bank2
  9812  0A26  0831               	movf	modTri@inflection^(0+256),w
  9813  0A27  0021               	movlb	1	; select bank1
  9814  0A28  00B1               	movwf	___ftmul@f2^(0+128)
  9815  0A29  0022               	movlb	2	; select bank2
  9816  0A2A  0832               	movf	(modTri@inflection+1)^(0+256),w
  9817  0A2B  0021               	movlb	1	; select bank1
  9818  0A2C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9819  0A2D  0022               	movlb	2	; select bank2
  9820  0A2E  0833               	movf	(modTri@inflection+2)^(0+256),w
  9821  0A2F  0021               	movlb	1	; select bank1
  9822  0A30  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9823  0A31  3000               	movlw	0
  9824  0A32  00AE               	movwf	___ftmul@f1^(0+128)
  9825  0A33  3000               	movlw	0
  9826  0A34  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9827  0A35  3040               	movlw	64
  9828  0A36  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9829  0A37  3187  273B  3189   	fcall	___ftmul
  9830  0A3A  0021               	movlb	1	; select bank1
  9831  0A3B  082E               	movf	?___ftmul^(0+128),w
  9832  0A3C  00BE               	movwf	___ftneg@f1^(0+128)
  9833  0A3D  082F               	movf	(?___ftmul+1)^(0+128),w
  9834  0A3E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9835  0A3F  0830               	movf	(?___ftmul+2)^(0+128),w
  9836  0A40  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9837  0A41  31AD  25B0  3189   	fcall	___ftneg
  9838  0A44  0021               	movlb	1	; select bank1
  9839  0A45  083E               	movf	?___ftneg^(0+128),w
  9840  0A46  00C4               	movwf	___ftadd@f2^(0+128)
  9841  0A47  083F               	movf	(?___ftneg+1)^(0+128),w
  9842  0A48  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9843  0A49  0840               	movf	(?___ftneg+2)^(0+128),w
  9844  0A4A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9845  0A4B  3000               	movlw	0
  9846  0A4C  00C1               	movwf	___ftadd@f1^(0+128)
  9847  0A4D  30B4               	movlw	180
  9848  0A4E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9849  0A4F  3043               	movlw	67
  9850  0A50  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9851  0A51  3190  2031  3189   	fcall	___ftadd
  9852  0A54  0021               	movlb	1	; select bank1
  9853  0A55  0841               	movf	?___ftadd^(0+128),w
  9854  0A56  0022               	movlb	2	; select bank2
  9855  0A57  00B4               	movwf	_modTri$2855^(0+256)
  9856  0A58  0021               	movlb	1	; select bank1
  9857  0A59  0842               	movf	(?___ftadd+1)^(0+128),w
  9858  0A5A  0022               	movlb	2	; select bank2
  9859  0A5B  00B5               	movwf	(_modTri$2855+1)^(0+256)
  9860  0A5C  0021               	movlb	1	; select bank1
  9861  0A5D  0843               	movf	(?___ftadd+2)^(0+128),w
  9862  0A5E  0022               	movlb	2	; select bank2
  9863  0A5F  00B6               	movwf	(_modTri$2855+2)^(0+256)
  9864                           
  9865                           ;modulation.c: 106: shift = -(360-inflection*2)*(180/(360-inflection));
  9866  0A60  0834               	movf	_modTri$2855^(0+256),w
  9867  0A61  0021               	movlb	1	; select bank1
  9868  0A62  00BE               	movwf	___ftneg@f1^(0+128)
  9869  0A63  0022               	movlb	2	; select bank2
  9870  0A64  0835               	movf	(_modTri$2855+1)^(0+256),w
  9871  0A65  0021               	movlb	1	; select bank1
  9872  0A66  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9873  0A67  0022               	movlb	2	; select bank2
  9874  0A68  0836               	movf	(_modTri$2855+2)^(0+256),w
  9875  0A69  0021               	movlb	1	; select bank1
  9876  0A6A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9877  0A6B  31AD  25B0  3189   	fcall	___ftneg
  9878  0A6E  0021               	movlb	1	; select bank1
  9879  0A6F  083E               	movf	?___ftneg^(0+128),w
  9880  0A70  00AE               	movwf	___ftmul@f1^(0+128)
  9881  0A71  083F               	movf	(?___ftneg+1)^(0+128),w
  9882  0A72  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9883  0A73  0840               	movf	(?___ftneg+2)^(0+128),w
  9884  0A74  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9885  0A75  3000               	movlw	0
  9886  0A76  00C1               	movwf	___ftadd@f1^(0+128)
  9887  0A77  30B4               	movlw	180
  9888  0A78  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9889  0A79  3043               	movlw	67
  9890  0A7A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9891  0A7B  0022               	movlb	2	; select bank2
  9892  0A7C  0831               	movf	modTri@inflection^(0+256),w
  9893  0A7D  0021               	movlb	1	; select bank1
  9894  0A7E  00BE               	movwf	___ftneg@f1^(0+128)
  9895  0A7F  0022               	movlb	2	; select bank2
  9896  0A80  0832               	movf	(modTri@inflection+1)^(0+256),w
  9897  0A81  0021               	movlb	1	; select bank1
  9898  0A82  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9899  0A83  0022               	movlb	2	; select bank2
  9900  0A84  0833               	movf	(modTri@inflection+2)^(0+256),w
  9901  0A85  0021               	movlb	1	; select bank1
  9902  0A86  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9903  0A87  31AD  25B0  3189   	fcall	___ftneg
  9904  0A8A  0021               	movlb	1	; select bank1
  9905  0A8B  083E               	movf	?___ftneg^(0+128),w
  9906  0A8C  00C4               	movwf	___ftadd@f2^(0+128)
  9907  0A8D  083F               	movf	(?___ftneg+1)^(0+128),w
  9908  0A8E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9909  0A8F  0840               	movf	(?___ftneg+2)^(0+128),w
  9910  0A90  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9911  0A91  3190  2031  3189   	fcall	___ftadd
  9912  0A94  0021               	movlb	1	; select bank1
  9913  0A95  0841               	movf	?___ftadd^(0+128),w
  9914  0A96  00CE               	movwf	___ftdiv@f2^(0+128)
  9915  0A97  0842               	movf	(?___ftadd+1)^(0+128),w
  9916  0A98  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9917  0A99  0843               	movf	(?___ftadd+2)^(0+128),w
  9918  0A9A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9919  0A9B  3000               	movlw	0
  9920  0A9C  00D1               	movwf	___ftdiv@f1^(0+128)
  9921  0A9D  3034               	movlw	52
  9922  0A9E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9923  0A9F  3043               	movlw	67
  9924  0AA0  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9925  0AA1  319D  2528  3189   	fcall	___ftdiv
  9926  0AA4  0021               	movlb	1	; select bank1
  9927  0AA5  084E               	movf	?___ftdiv^(0+128),w
  9928  0AA6  00B1               	movwf	___ftmul@f2^(0+128)
  9929  0AA7  084F               	movf	(?___ftdiv+1)^(0+128),w
  9930  0AA8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9931  0AA9  0850               	movf	(?___ftdiv+2)^(0+128),w
  9932  0AAA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9933  0AAB  3187  273B  3189   	fcall	___ftmul
  9934  0AAE  0021               	movlb	1	; select bank1
  9935  0AAF  082E               	movf	?___ftmul^(0+128),w
  9936  0AB0  0022               	movlb	2	; select bank2
  9937  0AB1  00B7               	movwf	modTri@shift^(0+256)
  9938  0AB2  0021               	movlb	1	; select bank1
  9939  0AB3  082F               	movf	(?___ftmul+1)^(0+128),w
  9940  0AB4  0022               	movlb	2	; select bank2
  9941  0AB5  00B8               	movwf	(modTri@shift+1)^(0+256)
  9942  0AB6  0021               	movlb	1	; select bank1
  9943  0AB7  0830               	movf	(?___ftmul+2)^(0+128),w
  9944  0AB8  0022               	movlb	2	; select bank2
  9945  0AB9  00B9               	movwf	(modTri@shift+2)^(0+256)
  9946                           
  9947                           ;modulation.c: 107: period = 180/(360-inflection);
  9948  0ABA  3000               	movlw	0
  9949  0ABB  0021               	movlb	1	; select bank1
  9950  0ABC  00C1               	movwf	___ftadd@f1^(0+128)
  9951  0ABD  30B4               	movlw	180
  9952  0ABE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9953  0ABF  3043               	movlw	67
  9954  0AC0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9955  0AC1  0022               	movlb	2	; select bank2
  9956  0AC2  0831               	movf	modTri@inflection^(0+256),w
  9957  0AC3  0021               	movlb	1	; select bank1
  9958  0AC4  00BE               	movwf	___ftneg@f1^(0+128)
  9959  0AC5  0022               	movlb	2	; select bank2
  9960  0AC6  0832               	movf	(modTri@inflection+1)^(0+256),w
  9961  0AC7  0021               	movlb	1	; select bank1
  9962  0AC8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9963  0AC9  0022               	movlb	2	; select bank2
  9964  0ACA  0833               	movf	(modTri@inflection+2)^(0+256),w
  9965  0ACB  0021               	movlb	1	; select bank1
  9966  0ACC  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9967  0ACD  31AD  25B0  3189   	fcall	___ftneg
  9968  0AD0  0021               	movlb	1	; select bank1
  9969  0AD1  083E               	movf	?___ftneg^(0+128),w
  9970  0AD2  00C4               	movwf	___ftadd@f2^(0+128)
  9971  0AD3  083F               	movf	(?___ftneg+1)^(0+128),w
  9972  0AD4  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9973  0AD5  0840               	movf	(?___ftneg+2)^(0+128),w
  9974  0AD6  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9975  0AD7  3190  2031  3189   	fcall	___ftadd
  9976  0ADA  0021               	movlb	1	; select bank1
  9977  0ADB  0841               	movf	?___ftadd^(0+128),w
  9978  0ADC  00CE               	movwf	___ftdiv@f2^(0+128)
  9979  0ADD  0842               	movf	(?___ftadd+1)^(0+128),w
  9980  0ADE  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9981  0ADF  0843               	movf	(?___ftadd+2)^(0+128),w
  9982  0AE0                     L5:	
  9983  0AE0  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9984  0AE1  3000               	movlw	0
  9985  0AE2  00D1               	movwf	___ftdiv@f1^(0+128)
  9986  0AE3  3034               	movlw	52
  9987  0AE4  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9988  0AE5  3043               	movlw	67
  9989  0AE6  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9990  0AE7  319D  2528  3189   	fcall	___ftdiv
  9991  0AEA  0021               	movlb	1	; select bank1
  9992  0AEB  084E               	movf	?___ftdiv^(0+128),w
  9993  0AEC  0022               	movlb	2	; select bank2
  9994  0AED  00BA               	movwf	modTri@period^(0+256)
  9995  0AEE  0021               	movlb	1	; select bank1
  9996  0AEF  084F               	movf	(?___ftdiv+1)^(0+128),w
  9997  0AF0  0022               	movlb	2	; select bank2
  9998  0AF1  00BB               	movwf	(modTri@period+1)^(0+256)
  9999  0AF2  0021               	movlb	1	; select bank1
 10000  0AF3  0850               	movf	(?___ftdiv+2)^(0+128),w
 10001  0AF4  0022               	movlb	2	; select bank2
 10002  0AF5  00BC               	movwf	(modTri@period+2)^(0+256)
 10003                           
 10004                           ;modulation.c: 109: }
 10005                           ;modulation.c: 110: double tmpVal = (period*angle-shift) ;
 10006  0AF6  0837               	movf	modTri@shift^(0+256),w
 10007  0AF7  0021               	movlb	1	; select bank1
 10008  0AF8  00BE               	movwf	___ftneg@f1^(0+128)
 10009  0AF9  0022               	movlb	2	; select bank2
 10010  0AFA  0838               	movf	(modTri@shift+1)^(0+256),w
 10011  0AFB  0021               	movlb	1	; select bank1
 10012  0AFC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10013  0AFD  0022               	movlb	2	; select bank2
 10014  0AFE  0839               	movf	(modTri@shift+2)^(0+256),w
 10015  0AFF  0021               	movlb	1	; select bank1
 10016  0B00  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10017  0B01  31AD  25B0  3189   	fcall	___ftneg
 10018  0B04  0021               	movlb	1	; select bank1
 10019  0B05  083E               	movf	?___ftneg^(0+128),w
 10020  0B06  00C1               	movwf	___ftadd@f1^(0+128)
 10021  0B07  083F               	movf	(?___ftneg+1)^(0+128),w
 10022  0B08  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10023  0B09  0840               	movf	(?___ftneg+2)^(0+128),w
 10024  0B0A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10025  0B0B  0022               	movlb	2	; select bank2
 10026  0B0C  082E               	movf	modTri@angle^(0+256),w
 10027  0B0D  0021               	movlb	1	; select bank1
 10028  0B0E  00AE               	movwf	___ftmul@f1^(0+128)
 10029  0B0F  0022               	movlb	2	; select bank2
 10030  0B10  082F               	movf	(modTri@angle+1)^(0+256),w
 10031  0B11  0021               	movlb	1	; select bank1
 10032  0B12  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10033  0B13  0022               	movlb	2	; select bank2
 10034  0B14  0830               	movf	(modTri@angle+2)^(0+256),w
 10035  0B15  0021               	movlb	1	; select bank1
 10036  0B16  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10037  0B17  0022               	movlb	2	; select bank2
 10038  0B18  083A               	movf	modTri@period^(0+256),w
 10039  0B19  0021               	movlb	1	; select bank1
 10040  0B1A  00B1               	movwf	___ftmul@f2^(0+128)
 10041  0B1B  0022               	movlb	2	; select bank2
 10042  0B1C  083B               	movf	(modTri@period+1)^(0+256),w
 10043  0B1D  0021               	movlb	1	; select bank1
 10044  0B1E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10045  0B1F  0022               	movlb	2	; select bank2
 10046  0B20  083C               	movf	(modTri@period+2)^(0+256),w
 10047  0B21  0021               	movlb	1	; select bank1
 10048  0B22  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10049  0B23  3187  273B  3189   	fcall	___ftmul
 10050  0B26  0021               	movlb	1	; select bank1
 10051  0B27  082E               	movf	?___ftmul^(0+128),w
 10052  0B28  00C4               	movwf	___ftadd@f2^(0+128)
 10053  0B29  082F               	movf	(?___ftmul+1)^(0+128),w
 10054  0B2A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10055  0B2B  0830               	movf	(?___ftmul+2)^(0+128),w
 10056  0B2C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10057  0B2D  3190  2031  3189   	fcall	___ftadd
 10058  0B30  0021               	movlb	1	; select bank1
 10059  0B31  0841               	movf	?___ftadd^(0+128),w
 10060  0B32  0022               	movlb	2	; select bank2
 10061  0B33  00BD               	movwf	modTri@tmpVal^(0+256)
 10062  0B34  0021               	movlb	1	; select bank1
 10063  0B35  0842               	movf	(?___ftadd+1)^(0+128),w
 10064  0B36  0022               	movlb	2	; select bank2
 10065  0B37  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10066  0B38  0021               	movlb	1	; select bank1
 10067  0B39  0843               	movf	(?___ftadd+2)^(0+128),w
 10068  0B3A  0022               	movlb	2	; select bank2
 10069  0B3B  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10070                           
 10071                           ;modulation.c: 111: if (tmpVal > 180) {
 10072  0B3C  3000               	movlw	0
 10073  0B3D  0021               	movlb	1	; select bank1
 10074  0B3E  00A0               	movwf	___ftge@ff1^(0+128)
 10075  0B3F  3034               	movlw	52
 10076  0B40  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10077  0B41  3043               	movlw	67
 10078  0B42  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10079  0B43  0022               	movlb	2	; select bank2
 10080  0B44  083D               	movf	modTri@tmpVal^(0+256),w
 10081  0B45  0021               	movlb	1	; select bank1
 10082  0B46  00A3               	movwf	___ftge@ff2^(0+128)
 10083  0B47  0022               	movlb	2	; select bank2
 10084  0B48  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10085  0B49  0021               	movlb	1	; select bank1
 10086  0B4A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10087  0B4B  0022               	movlb	2	; select bank2
 10088  0B4C  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10089  0B4D  0021               	movlb	1	; select bank1
 10090  0B4E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10091  0B4F  31A1  2184  3189   	fcall	___ftge
 10092  0B52  1803               	btfsc	3,0
 10093  0B53  2B67               	goto	l8564
 10094                           
 10095                           ;modulation.c: 112: tmpVal = tmpVal - 270.0;
 10096  0B54  3000               	movlw	0
 10097  0B55  0021               	movlb	1	; select bank1
 10098  0B56  00C1               	movwf	___ftadd@f1^(0+128)
 10099  0B57  3087               	movlw	135
 10100  0B58  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10101  0B59  30C3               	movlw	195
 10102  0B5A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10103  0B5B  0022               	movlb	2	; select bank2
 10104  0B5C  083D               	movf	modTri@tmpVal^(0+256),w
 10105  0B5D  0021               	movlb	1	; select bank1
 10106  0B5E  00C4               	movwf	___ftadd@f2^(0+128)
 10107  0B5F  0022               	movlb	2	; select bank2
 10108  0B60  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10109  0B61  0021               	movlb	1	; select bank1
 10110  0B62  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10111  0B63  0022               	movlb	2	; select bank2
 10112  0B64  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10113  0B65  0021               	movlb	1	; select bank1
 10114  0B66  2B83               	goto	L6
 10115  0B67                     l8564:	
 10116                           ;modulation.c: 113: } else {
 10117                           
 10118                           
 10119                           ;modulation.c: 114: tmpVal = 90 - tmpVal;
 10120  0B67  3000               	movlw	0
 10121  0B68  0021               	movlb	1	; select bank1
 10122  0B69  00C1               	movwf	___ftadd@f1^(0+128)
 10123  0B6A  30B4               	movlw	180
 10124  0B6B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10125  0B6C  3042               	movlw	66
 10126  0B6D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10127  0B6E  0022               	movlb	2	; select bank2
 10128  0B6F  083D               	movf	modTri@tmpVal^(0+256),w
 10129  0B70  0021               	movlb	1	; select bank1
 10130  0B71  00BE               	movwf	___ftneg@f1^(0+128)
 10131  0B72  0022               	movlb	2	; select bank2
 10132  0B73  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10133  0B74  0021               	movlb	1	; select bank1
 10134  0B75  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10135  0B76  0022               	movlb	2	; select bank2
 10136  0B77  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10137  0B78  0021               	movlb	1	; select bank1
 10138  0B79  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10139  0B7A  31AD  25B0  3189   	fcall	___ftneg
 10140  0B7D  0021               	movlb	1	; select bank1
 10141  0B7E  083E               	movf	?___ftneg^(0+128),w
 10142  0B7F  00C4               	movwf	___ftadd@f2^(0+128)
 10143  0B80  083F               	movf	(?___ftneg+1)^(0+128),w
 10144  0B81  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10145  0B82  0840               	movf	(?___ftneg+2)^(0+128),w
 10146  0B83                     L6:	
 10147  0B83  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10148  0B84  3190  2031  3189   	fcall	___ftadd
 10149  0B87  0021               	movlb	1	; select bank1
 10150  0B88  0841               	movf	?___ftadd^(0+128),w
 10151  0B89  0022               	movlb	2	; select bank2
 10152  0B8A  00BD               	movwf	modTri@tmpVal^(0+256)
 10153  0B8B  0021               	movlb	1	; select bank1
 10154  0B8C  0842               	movf	(?___ftadd+1)^(0+128),w
 10155  0B8D  0022               	movlb	2	; select bank2
 10156  0B8E  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10157  0B8F  0021               	movlb	1	; select bank1
 10158  0B90  0843               	movf	(?___ftadd+2)^(0+128),w
 10159  0B91  0022               	movlb	2	; select bank2
 10160  0B92  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10161                           
 10162                           ;modulation.c: 115: }
 10163                           ;modulation.c: 116: tmpVal = tmpVal * -10/9;
 10164  0B93  3000               	movlw	0
 10165  0B94  0021               	movlb	1	; select bank1
 10166  0B95  00CE               	movwf	___ftdiv@f2^(0+128)
 10167  0B96  3010               	movlw	16
 10168  0B97  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10169  0B98  3041               	movlw	65
 10170  0B99  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10171  0B9A  3000               	movlw	0
 10172  0B9B  00AE               	movwf	___ftmul@f1^(0+128)
 10173  0B9C  3020               	movlw	32
 10174  0B9D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10175  0B9E  30C1               	movlw	193
 10176  0B9F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10177  0BA0  0022               	movlb	2	; select bank2
 10178  0BA1  083D               	movf	modTri@tmpVal^(0+256),w
 10179  0BA2  0021               	movlb	1	; select bank1
 10180  0BA3  00B1               	movwf	___ftmul@f2^(0+128)
 10181  0BA4  0022               	movlb	2	; select bank2
 10182  0BA5  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10183  0BA6  0021               	movlb	1	; select bank1
 10184  0BA7  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10185  0BA8  0022               	movlb	2	; select bank2
 10186  0BA9  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10187  0BAA  0021               	movlb	1	; select bank1
 10188  0BAB  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10189  0BAC  3187  273B  3189   	fcall	___ftmul
 10190  0BAF  0021               	movlb	1	; select bank1
 10191  0BB0  082E               	movf	?___ftmul^(0+128),w
 10192  0BB1  00D1               	movwf	___ftdiv@f1^(0+128)
 10193  0BB2  082F               	movf	(?___ftmul+1)^(0+128),w
 10194  0BB3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10195  0BB4  0830               	movf	(?___ftmul+2)^(0+128),w
 10196  0BB5  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10197  0BB6  319D  2528  3189   	fcall	___ftdiv
 10198  0BB9  0021               	movlb	1	; select bank1
 10199  0BBA  084E               	movf	?___ftdiv^(0+128),w
 10200  0BBB  0022               	movlb	2	; select bank2
 10201  0BBC  00BD               	movwf	modTri@tmpVal^(0+256)
 10202  0BBD  0021               	movlb	1	; select bank1
 10203  0BBE  084F               	movf	(?___ftdiv+1)^(0+128),w
 10204  0BBF  0022               	movlb	2	; select bank2
 10205  0BC0  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10206  0BC1  0021               	movlb	1	; select bank1
 10207  0BC2  0850               	movf	(?___ftdiv+2)^(0+128),w
 10208  0BC3  0022               	movlb	2	; select bank2
 10209  0BC4  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10210                           
 10211                           ;modulation.c: 118: return (int)(tmpVal);
 10212  0BC5  083D               	movf	modTri@tmpVal^(0+256),w
 10213  0BC6  00A0               	movwf	___fttol@f1^(0+256)
 10214  0BC7  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10215  0BC8  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10216  0BC9  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10217  0BCA  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10218  0BCB  319A  2263         	fcall	___fttol
 10219  0BCD  0022               	movlb	2	; select bank2
 10220  0BCE  0821               	movf	(?___fttol^(0+256)+1),w
 10221  0BCF  00AF               	movwf	(?_modTri+1)^(0+256)
 10222  0BD0  0820               	movf	?___fttol^(0+256),w
 10223  0BD1  00AE               	movwf	?_modTri^(0+256)
 10224  0BD2  0008               	return
 10225  0BD3                     __end_of_modTri:	
 10226                           
 10227                           	psect	text18
 10228  21FD                     __ptext18:	
 10229 ;; *************** function _modSquare *****************
 10230 ;; Defined at:
 10231 ;;		line 142 in file "modulation.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;  angle           3   40[BANK2 ] int 
 10234 ;;  inflection      3   43[BANK2 ] int 
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;  tmpVal          2   46[BANK2 ] int 
 10237 ;; Return value:  Size  Location     Type
 10238 ;;                  2   40[BANK2 ] int 
 10239 ;; Registers used:
 10240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10241 ;; Tracked objects:
 10242 ;;		On entry : 0/0
 10243 ;;		On exit  : 0/0
 10244 ;;		Unchanged: 0/0
 10245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10246 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10247 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10249 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10250 ;;Total ram usage:        8 bytes
 10251 ;; Hardware stack levels used:    1
 10252 ;; Hardware stack levels required when called:    6
 10253 ;; This function calls:
 10254 ;;		___ftge
 10255 ;;		_modCos
 10256 ;; This function is called by:
 10257 ;;		_updateModulationArray
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           
 10262                           ;psect for function _modSquare
 10263  21FD                     _modSquare:	
 10264                           
 10265                           ;modulation.c: 143: int tmpVal = modCos(angle, inflection);
 10266                           
 10267                           ;incstack = 0
 10268                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10269  21FD  0022               	movlb	2	; select bank2
 10270  21FE  0848               	movf	modSquare@angle^(0+256),w
 10271  21FF  00B4               	movwf	modCos@angle^(0+256)
 10272  2200  0849               	movf	(modSquare@angle+1)^(0+256),w
 10273  2201  00B5               	movwf	(modCos@angle+1)^(0+256)
 10274  2202  084A               	movf	(modSquare@angle+2)^(0+256),w
 10275  2203  00B6               	movwf	(modCos@angle+2)^(0+256)
 10276  2204  084B               	movf	modSquare@inflection^(0+256),w
 10277  2205  00B7               	movwf	modCos@inflection^(0+256)
 10278  2206  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10279  2207  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10280  2208  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10281  2209  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10282  220A  3196  2654  31A1   	fcall	_modCos
 10283  220D  0022               	movlb	2	; select bank2
 10284  220E  0835               	movf	(?_modCos+1)^(0+256),w
 10285  220F  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10286  2210  0834               	movf	?_modCos^(0+256),w
 10287  2211  00CE               	movwf	modSquare@tmpVal^(0+256)
 10288                           
 10289                           ;modulation.c: 144: return (angle <= inflection) ? -100 : 100;
 10290  2212  084B               	movf	modSquare@inflection^(0+256),w
 10291  2213  0021               	movlb	1	; select bank1
 10292  2214  00A0               	movwf	___ftge@ff1^(0+128)
 10293  2215  0022               	movlb	2	; select bank2
 10294  2216  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10295  2217  0021               	movlb	1	; select bank1
 10296  2218  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10297  2219  0022               	movlb	2	; select bank2
 10298  221A  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10299  221B  0021               	movlb	1	; select bank1
 10300  221C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10301  221D  0022               	movlb	2	; select bank2
 10302  221E  0848               	movf	modSquare@angle^(0+256),w
 10303  221F  0021               	movlb	1	; select bank1
 10304  2220  00A3               	movwf	___ftge@ff2^(0+128)
 10305  2221  0022               	movlb	2	; select bank2
 10306  2222  0849               	movf	(modSquare@angle+1)^(0+256),w
 10307  2223  0021               	movlb	1	; select bank1
 10308  2224  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10309  2225  0022               	movlb	2	; select bank2
 10310  2226  084A               	movf	(modSquare@angle+2)^(0+256),w
 10311  2227  0021               	movlb	1	; select bank1
 10312  2228  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10313  2229  31A1  2184  31A1   	fcall	___ftge
 10314  222C  1803               	btfsc	3,0
 10315  222D  2A34               	goto	l8574
 10316  222E  3064               	movlw	100
 10317  222F  0022               	movlb	2	; select bank2
 10318  2230  00C8               	movwf	?_modSquare^(0+256)
 10319  2231  3000               	movlw	0
 10320  2232  00C9               	movwf	(?_modSquare^(0+256)+1)
 10321  2233  0008               	return
 10322  2234                     l8574:	
 10323  2234  309C               	movlw	156
 10324  2235  0022               	movlb	2	; select bank2
 10325  2236  00C8               	movwf	?_modSquare^(0+256)
 10326  2237  30FF               	movlw	255
 10327  2238  00C9               	movwf	(?_modSquare^(0+256)+1)
 10328  2239  0008               	return
 10329  223A                     __end_of_modSquare:	
 10330                           
 10331                           	psect	text19
 10332  1654                     __ptext19:	
 10333 ;; *************** function _modCos *****************
 10334 ;; Defined at:
 10335 ;;		line 83 in file "modulation.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  angle           3   20[BANK2 ] int 
 10338 ;;  inflection      3   23[BANK2 ] int 
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;  tmpVal          3   37[BANK2 ] int 
 10341 ;;  period          3   34[BANK2 ] int 
 10342 ;;  shift           3   31[BANK2 ] int 
 10343 ;; Return value:  Size  Location     Type
 10344 ;;                  2   20[BANK2 ] int 
 10345 ;; Registers used:
 10346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10352 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10353 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10354 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10355 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10356 ;;Total ram usage:       20 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:    5
 10359 ;; This function calls:
 10360 ;;		___ftadd
 10361 ;;		___ftdiv
 10362 ;;		___ftge
 10363 ;;		___ftmul
 10364 ;;		___ftneg
 10365 ;;		___fttol
 10366 ;;		___wmul
 10367 ;; This function is called by:
 10368 ;;		_updateModulationArray
 10369 ;;		_modSquare
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           
 10374                           ;psect for function _modCos
 10375  1654                     _modCos:	
 10376                           
 10377                           ;modulation.c: 84: double period = 1.0;
 10378                           
 10379                           ;incstack = 0
 10380                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10381  1654  3000               	movlw	0
 10382  1655  0022               	movlb	2	; select bank2
 10383  1656  00C2               	movwf	modCos@period^(0+256)
 10384  1657  3080               	movlw	128
 10385  1658  00C3               	movwf	(modCos@period+1)^(0+256)
 10386  1659  303F               	movlw	63
 10387  165A  00C4               	movwf	(modCos@period+2)^(0+256)
 10388                           
 10389                           ;modulation.c: 85: double shift = 0.0;
 10390  165B  3000               	movlw	0
 10391  165C  00BF               	movwf	modCos@shift^(0+256)
 10392  165D  3000               	movlw	0
 10393  165E  00C0               	movwf	(modCos@shift+1)^(0+256)
 10394  165F  3000               	movlw	0
 10395  1660  00C1               	movwf	(modCos@shift+2)^(0+256)
 10396                           
 10397                           ;modulation.c: 87: if(angle<=inflection) {
 10398  1661  0837               	movf	modCos@inflection^(0+256),w
 10399  1662  0021               	movlb	1	; select bank1
 10400  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10401  1664  0022               	movlb	2	; select bank2
 10402  1665  0838               	movf	(modCos@inflection+1)^(0+256),w
 10403  1666  0021               	movlb	1	; select bank1
 10404  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10405  1668  0022               	movlb	2	; select bank2
 10406  1669  0839               	movf	(modCos@inflection+2)^(0+256),w
 10407  166A  0021               	movlb	1	; select bank1
 10408  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10409  166C  0022               	movlb	2	; select bank2
 10410  166D  0834               	movf	modCos@angle^(0+256),w
 10411  166E  0021               	movlb	1	; select bank1
 10412  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10413  1670  0022               	movlb	2	; select bank2
 10414  1671  0835               	movf	(modCos@angle+1)^(0+256),w
 10415  1672  0021               	movlb	1	; select bank1
 10416  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10417  1674  0022               	movlb	2	; select bank2
 10418  1675  0836               	movf	(modCos@angle+2)^(0+256),w
 10419  1676  0021               	movlb	1	; select bank1
 10420  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10421  1678  31A1  2184  3196   	fcall	___ftge
 10422  167B  1C03               	btfss	3,0
 10423  167C  2E89               	goto	l8230
 10424                           
 10425                           ;modulation.c: 88: period = 180.0/inflection;
 10426  167D  0022               	movlb	2	; select bank2
 10427  167E  0837               	movf	modCos@inflection^(0+256),w
 10428  167F  0021               	movlb	1	; select bank1
 10429  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10430  1681  0022               	movlb	2	; select bank2
 10431  1682  0838               	movf	(modCos@inflection+1)^(0+256),w
 10432  1683  0021               	movlb	1	; select bank1
 10433  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10434  1685  0022               	movlb	2	; select bank2
 10435  1686  0839               	movf	(modCos@inflection+2)^(0+256),w
 10436  1687  0021               	movlb	1	; select bank1
 10437  1688  2F44               	goto	L7
 10438  1689                     l8230:	
 10439                           ;modulation.c: 89: } else {
 10440                           
 10441                           
 10442                           ;modulation.c: 90: shift = -(360-inflection*2)*(180/(360-inflection));
 10443  1689  0022               	movlb	2	; select bank2
 10444  168A  0837               	movf	modCos@inflection^(0+256),w
 10445  168B  0021               	movlb	1	; select bank1
 10446  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10447  168D  0022               	movlb	2	; select bank2
 10448  168E  0838               	movf	(modCos@inflection+1)^(0+256),w
 10449  168F  0021               	movlb	1	; select bank1
 10450  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10451  1691  0022               	movlb	2	; select bank2
 10452  1692  0839               	movf	(modCos@inflection+2)^(0+256),w
 10453  1693  0021               	movlb	1	; select bank1
 10454  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10455  1695  3000               	movlw	0
 10456  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10457  1697  3000               	movlw	0
 10458  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10459  1699  3040               	movlw	64
 10460  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10461  169B  3187  273B  3196   	fcall	___ftmul
 10462  169E  0021               	movlb	1	; select bank1
 10463  169F  082E               	movf	?___ftmul^(0+128),w
 10464  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10465  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10466  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10467  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10468  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10469  16A5  31AD  25B0  3196   	fcall	___ftneg
 10470  16A8  0021               	movlb	1	; select bank1
 10471  16A9  083E               	movf	?___ftneg^(0+128),w
 10472  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10473  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10474  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10475  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10476  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10477  16AF  3000               	movlw	0
 10478  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10479  16B1  30B4               	movlw	180
 10480  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10481  16B3  3043               	movlw	67
 10482  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10483  16B5  3190  2031  3196   	fcall	___ftadd
 10484  16B8  0021               	movlb	1	; select bank1
 10485  16B9  0841               	movf	?___ftadd^(0+128),w
 10486  16BA  0022               	movlb	2	; select bank2
 10487  16BB  00BC               	movwf	_modCos$2854^(0+256)
 10488  16BC  0021               	movlb	1	; select bank1
 10489  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10490  16BE  0022               	movlb	2	; select bank2
 10491  16BF  00BD               	movwf	(_modCos$2854+1)^(0+256)
 10492  16C0  0021               	movlb	1	; select bank1
 10493  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10494  16C2  0022               	movlb	2	; select bank2
 10495  16C3  00BE               	movwf	(_modCos$2854+2)^(0+256)
 10496                           
 10497                           ;modulation.c: 90: shift = -(360-inflection*2)*(180/(360-inflection));
 10498  16C4  083C               	movf	_modCos$2854^(0+256),w
 10499  16C5  0021               	movlb	1	; select bank1
 10500  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10501  16C7  0022               	movlb	2	; select bank2
 10502  16C8  083D               	movf	(_modCos$2854+1)^(0+256),w
 10503  16C9  0021               	movlb	1	; select bank1
 10504  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10505  16CB  0022               	movlb	2	; select bank2
 10506  16CC  083E               	movf	(_modCos$2854+2)^(0+256),w
 10507  16CD  0021               	movlb	1	; select bank1
 10508  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10509  16CF  31AD  25B0  3196   	fcall	___ftneg
 10510  16D2  0021               	movlb	1	; select bank1
 10511  16D3  083E               	movf	?___ftneg^(0+128),w
 10512  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10513  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10514  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10515  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10516  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10517  16D9  3000               	movlw	0
 10518  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10519  16DB  30B4               	movlw	180
 10520  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10521  16DD  3043               	movlw	67
 10522  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10523  16DF  0022               	movlb	2	; select bank2
 10524  16E0  0837               	movf	modCos@inflection^(0+256),w
 10525  16E1  0021               	movlb	1	; select bank1
 10526  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10527  16E3  0022               	movlb	2	; select bank2
 10528  16E4  0838               	movf	(modCos@inflection+1)^(0+256),w
 10529  16E5  0021               	movlb	1	; select bank1
 10530  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10531  16E7  0022               	movlb	2	; select bank2
 10532  16E8  0839               	movf	(modCos@inflection+2)^(0+256),w
 10533  16E9  0021               	movlb	1	; select bank1
 10534  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10535  16EB  31AD  25B0  3196   	fcall	___ftneg
 10536  16EE  0021               	movlb	1	; select bank1
 10537  16EF  083E               	movf	?___ftneg^(0+128),w
 10538  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10539  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10540  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10541  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10542  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10543  16F5  3190  2031  3196   	fcall	___ftadd
 10544  16F8  0021               	movlb	1	; select bank1
 10545  16F9  0841               	movf	?___ftadd^(0+128),w
 10546  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10547  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10548  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10549  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10550  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10551  16FF  3000               	movlw	0
 10552  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10553  1701  3034               	movlw	52
 10554  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10555  1703  3043               	movlw	67
 10556  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10557  1705  319D  2528  3196   	fcall	___ftdiv
 10558  1708  0021               	movlb	1	; select bank1
 10559  1709  084E               	movf	?___ftdiv^(0+128),w
 10560  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10561  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10562  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10563  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10564  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10565  170F  3187  273B  3196   	fcall	___ftmul
 10566  1712  0021               	movlb	1	; select bank1
 10567  1713  082E               	movf	?___ftmul^(0+128),w
 10568  1714  0022               	movlb	2	; select bank2
 10569  1715  00BF               	movwf	modCos@shift^(0+256)
 10570  1716  0021               	movlb	1	; select bank1
 10571  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10572  1718  0022               	movlb	2	; select bank2
 10573  1719  00C0               	movwf	(modCos@shift+1)^(0+256)
 10574  171A  0021               	movlb	1	; select bank1
 10575  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10576  171C  0022               	movlb	2	; select bank2
 10577  171D  00C1               	movwf	(modCos@shift+2)^(0+256)
 10578                           
 10579                           ;modulation.c: 91: period = 180/(360-inflection);
 10580  171E  3000               	movlw	0
 10581  171F  0021               	movlb	1	; select bank1
 10582  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10583  1721  30B4               	movlw	180
 10584  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10585  1723  3043               	movlw	67
 10586  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10587  1725  0022               	movlb	2	; select bank2
 10588  1726  0837               	movf	modCos@inflection^(0+256),w
 10589  1727  0021               	movlb	1	; select bank1
 10590  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10591  1729  0022               	movlb	2	; select bank2
 10592  172A  0838               	movf	(modCos@inflection+1)^(0+256),w
 10593  172B  0021               	movlb	1	; select bank1
 10594  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10595  172D  0022               	movlb	2	; select bank2
 10596  172E  0839               	movf	(modCos@inflection+2)^(0+256),w
 10597  172F  0021               	movlb	1	; select bank1
 10598  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10599  1731  31AD  25B0  3196   	fcall	___ftneg
 10600  1734  0021               	movlb	1	; select bank1
 10601  1735  083E               	movf	?___ftneg^(0+128),w
 10602  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10603  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10604  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10605  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10606  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10607  173B  3190  2031  3196   	fcall	___ftadd
 10608  173E  0021               	movlb	1	; select bank1
 10609  173F  0841               	movf	?___ftadd^(0+128),w
 10610  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10611  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10612  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10613  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10614  1744                     L7:	
 10615  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10616  1745  3000               	movlw	0
 10617  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10618  1747  3034               	movlw	52
 10619  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10620  1749  3043               	movlw	67
 10621  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10622  174B  319D  2528  3196   	fcall	___ftdiv
 10623  174E  0021               	movlb	1	; select bank1
 10624  174F  084E               	movf	?___ftdiv^(0+128),w
 10625  1750  0022               	movlb	2	; select bank2
 10626  1751  00C2               	movwf	modCos@period^(0+256)
 10627  1752  0021               	movlb	1	; select bank1
 10628  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10629  1754  0022               	movlb	2	; select bank2
 10630  1755  00C3               	movwf	(modCos@period+1)^(0+256)
 10631  1756  0021               	movlb	1	; select bank1
 10632  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10633  1758  0022               	movlb	2	; select bank2
 10634  1759  00C4               	movwf	(modCos@period+2)^(0+256)
 10635                           
 10636                           ;modulation.c: 93: }
 10637                           ;modulation.c: 94: double tmpVal = (period*angle-shift) /3;
 10638  175A  3000               	movlw	0
 10639  175B  0021               	movlb	1	; select bank1
 10640  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10641  175D  3040               	movlw	64
 10642  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10643  175F  3040               	movlw	64
 10644  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10645  1761  0022               	movlb	2	; select bank2
 10646  1762  083F               	movf	modCos@shift^(0+256),w
 10647  1763  0021               	movlb	1	; select bank1
 10648  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10649  1765  0022               	movlb	2	; select bank2
 10650  1766  0840               	movf	(modCos@shift+1)^(0+256),w
 10651  1767  0021               	movlb	1	; select bank1
 10652  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10653  1769  0022               	movlb	2	; select bank2
 10654  176A  0841               	movf	(modCos@shift+2)^(0+256),w
 10655  176B  0021               	movlb	1	; select bank1
 10656  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10657  176D  31AD  25B0  3196   	fcall	___ftneg
 10658  1770  0021               	movlb	1	; select bank1
 10659  1771  083E               	movf	?___ftneg^(0+128),w
 10660  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10661  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10662  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10663  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10664  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10665  1777  0022               	movlb	2	; select bank2
 10666  1778  0834               	movf	modCos@angle^(0+256),w
 10667  1779  0021               	movlb	1	; select bank1
 10668  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10669  177B  0022               	movlb	2	; select bank2
 10670  177C  0835               	movf	(modCos@angle+1)^(0+256),w
 10671  177D  0021               	movlb	1	; select bank1
 10672  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10673  177F  0022               	movlb	2	; select bank2
 10674  1780  0836               	movf	(modCos@angle+2)^(0+256),w
 10675  1781  0021               	movlb	1	; select bank1
 10676  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10677  1783  0022               	movlb	2	; select bank2
 10678  1784  0842               	movf	modCos@period^(0+256),w
 10679  1785  0021               	movlb	1	; select bank1
 10680  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10681  1787  0022               	movlb	2	; select bank2
 10682  1788  0843               	movf	(modCos@period+1)^(0+256),w
 10683  1789  0021               	movlb	1	; select bank1
 10684  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10685  178B  0022               	movlb	2	; select bank2
 10686  178C  0844               	movf	(modCos@period+2)^(0+256),w
 10687  178D  0021               	movlb	1	; select bank1
 10688  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10689  178F  3187  273B  3196   	fcall	___ftmul
 10690  1792  0021               	movlb	1	; select bank1
 10691  1793  082E               	movf	?___ftmul^(0+128),w
 10692  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10693  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10694  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10695  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10696  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10697  1799  3190  2031  3196   	fcall	___ftadd
 10698  179C  0021               	movlb	1	; select bank1
 10699  179D  0841               	movf	?___ftadd^(0+128),w
 10700  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10701  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10702  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10703  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10704  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10705  17A3  319D  2528  3196   	fcall	___ftdiv
 10706  17A6  0021               	movlb	1	; select bank1
 10707  17A7  084E               	movf	?___ftdiv^(0+128),w
 10708  17A8  0022               	movlb	2	; select bank2
 10709  17A9  00C5               	movwf	modCos@tmpVal^(0+256)
 10710  17AA  0021               	movlb	1	; select bank1
 10711  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10712  17AC  0022               	movlb	2	; select bank2
 10713  17AD  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10714  17AE  0021               	movlb	1	; select bank1
 10715  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10716  17B0  0022               	movlb	2	; select bank2
 10717  17B1  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10718                           
 10719                           ;modulation.c: 95: tmpVal = cosArray[(int)(tmpVal)];
 10720  17B2  0845               	movf	modCos@tmpVal^(0+256),w
 10721  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10722  17B4  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10723  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10724  17B6  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10725  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10726  17B8  319A  2263  3196   	fcall	___fttol
 10727  17BB  0022               	movlb	2	; select bank2
 10728  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10729  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10730  17BE  0820               	movf	?___fttol^(0+256),w
 10731  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10732  17C0  3003               	movlw	3
 10733  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10734  17C2  3000               	movlw	0
 10735  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10736  17C4  31AE  264E  3196   	fcall	___wmul
 10737  17C7  3082               	movlw	130
 10738  17C8  0022               	movlb	2	; select bank2
 10739  17C9  00BA               	movwf	??_modCos^(0+256)
 10740  17CA  3024               	movlw	36
 10741  17CB  00BB               	movwf	(??_modCos^(0+256)+1)
 10742  17CC  082E               	movf	?___wmul^(0+256),w
 10743  17CD  073A               	addwf	??_modCos^(0+256),w
 10744  17CE  0086               	movwf	6
 10745  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10746  17D0  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 10747  17D1  0087               	movwf	7
 10748  17D2  3F40               	moviw [0]fsr1
 10749  17D3  00C5               	movwf	modCos@tmpVal^(0+256)
 10750  17D4  3F41               	moviw [1]fsr1
 10751  17D5  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10752  17D6  3F42               	moviw [2]fsr1
 10753  17D7  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10754                           
 10755                           ;modulation.c: 96: return (int)(-100.0 * tmpVal);
 10756  17D8  0845               	movf	modCos@tmpVal^(0+256),w
 10757  17D9  0021               	movlb	1	; select bank1
 10758  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10759  17DB  0022               	movlb	2	; select bank2
 10760  17DC  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10761  17DD  0021               	movlb	1	; select bank1
 10762  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10763  17DF  0022               	movlb	2	; select bank2
 10764  17E0  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10765  17E1  0021               	movlb	1	; select bank1
 10766  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10767  17E3  3000               	movlw	0
 10768  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10769  17E5  30C8               	movlw	200
 10770  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10771  17E7  30C2               	movlw	194
 10772  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10773  17E9  3187  273B  3196   	fcall	___ftmul
 10774  17EC  0021               	movlb	1	; select bank1
 10775  17ED  082E               	movf	?___ftmul^(0+128),w
 10776  17EE  0022               	movlb	2	; select bank2
 10777  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10778  17F0  0021               	movlb	1	; select bank1
 10779  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10780  17F2  0022               	movlb	2	; select bank2
 10781  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10782  17F4  0021               	movlb	1	; select bank1
 10783  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10784  17F6  0022               	movlb	2	; select bank2
 10785  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10786  17F8  319A  2263         	fcall	___fttol
 10787  17FA  0022               	movlb	2	; select bank2
 10788  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10789  17FC  00B5               	movwf	(?_modCos+1)^(0+256)
 10790  17FD  0820               	movf	?___fttol^(0+256),w
 10791  17FE  00B4               	movwf	?_modCos^(0+256)
 10792  17FF  0008               	return
 10793  1800                     __end_of_modCos:	
 10794                           
 10795                           	psect	text20
 10796  2E86                     __ptext20:	
 10797 ;; *************** function _modSawRev *****************
 10798 ;; Defined at:
 10799 ;;		line 137 in file "modulation.c"
 10800 ;; Parameters:    Size  Location     Type
 10801 ;;  angle           3   34[BANK2 ] int 
 10802 ;;  inflection      3   37[BANK2 ] int 
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;		None
 10805 ;; Return value:  Size  Location     Type
 10806 ;;                  2   34[BANK2 ] int 
 10807 ;; Registers used:
 10808 ;;		wreg, status,2, status,0, pclath, cstack
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10814 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10816 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10817 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10818 ;;Total ram usage:        8 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    6
 10821 ;; This function calls:
 10822 ;;		_modSaw
 10823 ;; This function is called by:
 10824 ;;		_updateModulationArray
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _modSawRev
 10830  2E86                     _modSawRev:	
 10831                           
 10832                           ;modulation.c: 138: return -1 * modSaw(angle, inflection);
 10833                           
 10834                           ;incstack = 0
 10835                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10836  2E86  0022               	movlb	2	; select bank2
 10837  2E87  0842               	movf	modSawRev@angle^(0+256),w
 10838  2E88  00AE               	movwf	modSaw@angle^(0+256)
 10839  2E89  0843               	movf	(modSawRev@angle+1)^(0+256),w
 10840  2E8A  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10841  2E8B  0844               	movf	(modSawRev@angle+2)^(0+256),w
 10842  2E8C  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10843  2E8D  0845               	movf	modSawRev@inflection^(0+256),w
 10844  2E8E  00B1               	movwf	modSaw@inflection^(0+256)
 10845  2E8F  0846               	movf	(modSawRev@inflection+1)^(0+256),w
 10846  2E90  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10847  2E91  0847               	movf	(modSawRev@inflection+2)^(0+256),w
 10848  2E92  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10849  2E93  3194  24BC         	fcall	_modSaw
 10850  2E95  0022               	movlb	2	; select bank2
 10851  2E96  092E               	comf	?_modSaw^(0+256),w
 10852  2E97  00C8               	movwf	??_modSawRev^(0+256)
 10853  2E98  092F               	comf	(?_modSaw+1)^(0+256),w
 10854  2E99  00C9               	movwf	(??_modSawRev^(0+256)+1)
 10855  2E9A  0AC8               	incf	??_modSawRev^(0+256),f
 10856  2E9B  1903               	skipnz
 10857  2E9C  0AC9               	incf	(??_modSawRev^(0+256)+1),f
 10858  2E9D  0848               	movf	??_modSawRev^(0+256),w
 10859  2E9E  00C2               	movwf	?_modSawRev^(0+256)
 10860  2E9F  0849               	movf	(??_modSawRev+1)^(0+256),w
 10861  2EA0  00C3               	movwf	(?_modSawRev+1)^(0+256)
 10862  2EA1  0008               	return
 10863  2EA2                     __end_of_modSawRev:	
 10864                           
 10865                           	psect	text21
 10866  14BC                     __ptext21:	
 10867 ;; *************** function _modSaw *****************
 10868 ;; Defined at:
 10869 ;;		line 122 in file "modulation.c"
 10870 ;; Parameters:    Size  Location     Type
 10871 ;;  angle           3   14[BANK2 ] int 
 10872 ;;  inflection      3   17[BANK2 ] int 
 10873 ;; Auto vars:     Size  Location     Type
 10874 ;;  period          3   31[BANK2 ] int 
 10875 ;;  shift           3   28[BANK2 ] int 
 10876 ;;  mod             2   26[BANK2 ] int 
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  2   14[BANK2 ] int 
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0, pclath, cstack
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10886 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10887 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10889 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10890 ;;Total ram usage:       20 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    5
 10893 ;; This function calls:
 10894 ;;		___ftadd
 10895 ;;		___ftdiv
 10896 ;;		___ftge
 10897 ;;		___ftmul
 10898 ;;		___ftneg
 10899 ;;		___fttol
 10900 ;; This function is called by:
 10901 ;;		_updateModulationArray
 10902 ;;		_modSawRev
 10903 ;; This function uses a non-reentrant model
 10904 ;;
 10905                           
 10906                           
 10907                           ;psect for function _modSaw
 10908  14BC                     _modSaw:	
 10909                           
 10910                           ;modulation.c: 123: double period = 1.0;
 10911                           
 10912                           ;incstack = 0
 10913                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10914  14BC  3000               	movlw	0
 10915  14BD  0022               	movlb	2	; select bank2
 10916  14BE  00BF               	movwf	modSaw@period^(0+256)
 10917  14BF  3080               	movlw	128
 10918  14C0  00C0               	movwf	(modSaw@period+1)^(0+256)
 10919  14C1  303F               	movlw	63
 10920  14C2  00C1               	movwf	(modSaw@period+2)^(0+256)
 10921                           
 10922                           ;modulation.c: 124: double shift = 0;
 10923  14C3  3000               	movlw	0
 10924  14C4  00BC               	movwf	modSaw@shift^(0+256)
 10925  14C5  3000               	movlw	0
 10926  14C6  00BD               	movwf	(modSaw@shift+1)^(0+256)
 10927  14C7  3000               	movlw	0
 10928  14C8  00BE               	movwf	(modSaw@shift+2)^(0+256)
 10929                           
 10930                           ;modulation.c: 126: if(angle<=inflection) {
 10931  14C9  0831               	movf	modSaw@inflection^(0+256),w
 10932  14CA  0021               	movlb	1	; select bank1
 10933  14CB  00A0               	movwf	___ftge@ff1^(0+128)
 10934  14CC  0022               	movlb	2	; select bank2
 10935  14CD  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10936  14CE  0021               	movlb	1	; select bank1
 10937  14CF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10938  14D0  0022               	movlb	2	; select bank2
 10939  14D1  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10940  14D2  0021               	movlb	1	; select bank1
 10941  14D3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10942  14D4  0022               	movlb	2	; select bank2
 10943  14D5  082E               	movf	modSaw@angle^(0+256),w
 10944  14D6  0021               	movlb	1	; select bank1
 10945  14D7  00A3               	movwf	___ftge@ff2^(0+128)
 10946  14D8  0022               	movlb	2	; select bank2
 10947  14D9  082F               	movf	(modSaw@angle+1)^(0+256),w
 10948  14DA  0021               	movlb	1	; select bank1
 10949  14DB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10950  14DC  0022               	movlb	2	; select bank2
 10951  14DD  0830               	movf	(modSaw@angle+2)^(0+256),w
 10952  14DE  0021               	movlb	1	; select bank1
 10953  14DF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10954  14E0  31A1  2184  3194   	fcall	___ftge
 10955  14E3  1C03               	btfss	3,0
 10956  14E4  2CF1               	goto	l8244
 10957                           
 10958                           ;modulation.c: 127: period = 180.0/inflection;
 10959  14E5  0022               	movlb	2	; select bank2
 10960  14E6  0831               	movf	modSaw@inflection^(0+256),w
 10961  14E7  0021               	movlb	1	; select bank1
 10962  14E8  00CE               	movwf	___ftdiv@f2^(0+128)
 10963  14E9  0022               	movlb	2	; select bank2
 10964  14EA  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10965  14EB  0021               	movlb	1	; select bank1
 10966  14EC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10967  14ED  0022               	movlb	2	; select bank2
 10968  14EE  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10969  14EF  0021               	movlb	1	; select bank1
 10970  14F0  2DAC               	goto	L8
 10971  14F1                     l8244:	
 10972                           ;modulation.c: 128: } else {
 10973                           
 10974                           
 10975                           ;modulation.c: 129: shift = -(360-inflection*2)*(180/(360-inflection));
 10976  14F1  0022               	movlb	2	; select bank2
 10977  14F2  0831               	movf	modSaw@inflection^(0+256),w
 10978  14F3  0021               	movlb	1	; select bank1
 10979  14F4  00B1               	movwf	___ftmul@f2^(0+128)
 10980  14F5  0022               	movlb	2	; select bank2
 10981  14F6  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10982  14F7  0021               	movlb	1	; select bank1
 10983  14F8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10984  14F9  0022               	movlb	2	; select bank2
 10985  14FA  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10986  14FB  0021               	movlb	1	; select bank1
 10987  14FC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10988  14FD  3000               	movlw	0
 10989  14FE  00AE               	movwf	___ftmul@f1^(0+128)
 10990  14FF  3000               	movlw	0
 10991  1500  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10992  1501  3040               	movlw	64
 10993  1502  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10994  1503  3187  273B  3194   	fcall	___ftmul
 10995  1506  0021               	movlb	1	; select bank1
 10996  1507  082E               	movf	?___ftmul^(0+128),w
 10997  1508  00BE               	movwf	___ftneg@f1^(0+128)
 10998  1509  082F               	movf	(?___ftmul+1)^(0+128),w
 10999  150A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11000  150B  0830               	movf	(?___ftmul+2)^(0+128),w
 11001  150C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11002  150D  31AD  25B0  3194   	fcall	___ftneg
 11003  1510  0021               	movlb	1	; select bank1
 11004  1511  083E               	movf	?___ftneg^(0+128),w
 11005  1512  00C4               	movwf	___ftadd@f2^(0+128)
 11006  1513  083F               	movf	(?___ftneg+1)^(0+128),w
 11007  1514  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11008  1515  0840               	movf	(?___ftneg+2)^(0+128),w
 11009  1516  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11010  1517  3000               	movlw	0
 11011  1518  00C1               	movwf	___ftadd@f1^(0+128)
 11012  1519  30B4               	movlw	180
 11013  151A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11014  151B  3043               	movlw	67
 11015  151C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11016  151D  3190  2031  3194   	fcall	___ftadd
 11017  1520  0021               	movlb	1	; select bank1
 11018  1521  0841               	movf	?___ftadd^(0+128),w
 11019  1522  0022               	movlb	2	; select bank2
 11020  1523  00B4               	movwf	_modSaw$2856^(0+256)
 11021  1524  0021               	movlb	1	; select bank1
 11022  1525  0842               	movf	(?___ftadd+1)^(0+128),w
 11023  1526  0022               	movlb	2	; select bank2
 11024  1527  00B5               	movwf	(_modSaw$2856+1)^(0+256)
 11025  1528  0021               	movlb	1	; select bank1
 11026  1529  0843               	movf	(?___ftadd+2)^(0+128),w
 11027  152A  0022               	movlb	2	; select bank2
 11028  152B  00B6               	movwf	(_modSaw$2856+2)^(0+256)
 11029                           
 11030                           ;modulation.c: 129: shift = -(360-inflection*2)*(180/(360-inflection));
 11031  152C  0834               	movf	_modSaw$2856^(0+256),w
 11032  152D  0021               	movlb	1	; select bank1
 11033  152E  00BE               	movwf	___ftneg@f1^(0+128)
 11034  152F  0022               	movlb	2	; select bank2
 11035  1530  0835               	movf	(_modSaw$2856+1)^(0+256),w
 11036  1531  0021               	movlb	1	; select bank1
 11037  1532  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11038  1533  0022               	movlb	2	; select bank2
 11039  1534  0836               	movf	(_modSaw$2856+2)^(0+256),w
 11040  1535  0021               	movlb	1	; select bank1
 11041  1536  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11042  1537  31AD  25B0  3194   	fcall	___ftneg
 11043  153A  0021               	movlb	1	; select bank1
 11044  153B  083E               	movf	?___ftneg^(0+128),w
 11045  153C  00AE               	movwf	___ftmul@f1^(0+128)
 11046  153D  083F               	movf	(?___ftneg+1)^(0+128),w
 11047  153E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11048  153F  0840               	movf	(?___ftneg+2)^(0+128),w
 11049  1540  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11050  1541  3000               	movlw	0
 11051  1542  00C1               	movwf	___ftadd@f1^(0+128)
 11052  1543  30B4               	movlw	180
 11053  1544  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11054  1545  3043               	movlw	67
 11055  1546  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11056  1547  0022               	movlb	2	; select bank2
 11057  1548  0831               	movf	modSaw@inflection^(0+256),w
 11058  1549  0021               	movlb	1	; select bank1
 11059  154A  00BE               	movwf	___ftneg@f1^(0+128)
 11060  154B  0022               	movlb	2	; select bank2
 11061  154C  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11062  154D  0021               	movlb	1	; select bank1
 11063  154E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11064  154F  0022               	movlb	2	; select bank2
 11065  1550  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11066  1551  0021               	movlb	1	; select bank1
 11067  1552  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11068  1553  31AD  25B0  3194   	fcall	___ftneg
 11069  1556  0021               	movlb	1	; select bank1
 11070  1557  083E               	movf	?___ftneg^(0+128),w
 11071  1558  00C4               	movwf	___ftadd@f2^(0+128)
 11072  1559  083F               	movf	(?___ftneg+1)^(0+128),w
 11073  155A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11074  155B  0840               	movf	(?___ftneg+2)^(0+128),w
 11075  155C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11076  155D  3190  2031  3194   	fcall	___ftadd
 11077  1560  0021               	movlb	1	; select bank1
 11078  1561  0841               	movf	?___ftadd^(0+128),w
 11079  1562  00CE               	movwf	___ftdiv@f2^(0+128)
 11080  1563  0842               	movf	(?___ftadd+1)^(0+128),w
 11081  1564  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11082  1565  0843               	movf	(?___ftadd+2)^(0+128),w
 11083  1566  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11084  1567  3000               	movlw	0
 11085  1568  00D1               	movwf	___ftdiv@f1^(0+128)
 11086  1569  3034               	movlw	52
 11087  156A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11088  156B  3043               	movlw	67
 11089  156C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11090  156D  319D  2528  3194   	fcall	___ftdiv
 11091  1570  0021               	movlb	1	; select bank1
 11092  1571  084E               	movf	?___ftdiv^(0+128),w
 11093  1572  00B1               	movwf	___ftmul@f2^(0+128)
 11094  1573  084F               	movf	(?___ftdiv+1)^(0+128),w
 11095  1574  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11096  1575  0850               	movf	(?___ftdiv+2)^(0+128),w
 11097  1576  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11098  1577  3187  273B  3194   	fcall	___ftmul
 11099  157A  0021               	movlb	1	; select bank1
 11100  157B  082E               	movf	?___ftmul^(0+128),w
 11101  157C  0022               	movlb	2	; select bank2
 11102  157D  00BC               	movwf	modSaw@shift^(0+256)
 11103  157E  0021               	movlb	1	; select bank1
 11104  157F  082F               	movf	(?___ftmul+1)^(0+128),w
 11105  1580  0022               	movlb	2	; select bank2
 11106  1581  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11107  1582  0021               	movlb	1	; select bank1
 11108  1583  0830               	movf	(?___ftmul+2)^(0+128),w
 11109  1584  0022               	movlb	2	; select bank2
 11110  1585  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11111                           
 11112                           ;modulation.c: 130: period = 180/(360-inflection);
 11113  1586  3000               	movlw	0
 11114  1587  0021               	movlb	1	; select bank1
 11115  1588  00C1               	movwf	___ftadd@f1^(0+128)
 11116  1589  30B4               	movlw	180
 11117  158A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11118  158B  3043               	movlw	67
 11119  158C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11120  158D  0022               	movlb	2	; select bank2
 11121  158E  0831               	movf	modSaw@inflection^(0+256),w
 11122  158F  0021               	movlb	1	; select bank1
 11123  1590  00BE               	movwf	___ftneg@f1^(0+128)
 11124  1591  0022               	movlb	2	; select bank2
 11125  1592  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11126  1593  0021               	movlb	1	; select bank1
 11127  1594  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11128  1595  0022               	movlb	2	; select bank2
 11129  1596  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11130  1597  0021               	movlb	1	; select bank1
 11131  1598  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11132  1599  31AD  25B0  3194   	fcall	___ftneg
 11133  159C  0021               	movlb	1	; select bank1
 11134  159D  083E               	movf	?___ftneg^(0+128),w
 11135  159E  00C4               	movwf	___ftadd@f2^(0+128)
 11136  159F  083F               	movf	(?___ftneg+1)^(0+128),w
 11137  15A0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11138  15A1  0840               	movf	(?___ftneg+2)^(0+128),w
 11139  15A2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11140  15A3  3190  2031  3194   	fcall	___ftadd
 11141  15A6  0021               	movlb	1	; select bank1
 11142  15A7  0841               	movf	?___ftadd^(0+128),w
 11143  15A8  00CE               	movwf	___ftdiv@f2^(0+128)
 11144  15A9  0842               	movf	(?___ftadd+1)^(0+128),w
 11145  15AA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11146  15AB  0843               	movf	(?___ftadd+2)^(0+128),w
 11147  15AC                     L8:	
 11148  15AC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11149  15AD  3000               	movlw	0
 11150  15AE  00D1               	movwf	___ftdiv@f1^(0+128)
 11151  15AF  3034               	movlw	52
 11152  15B0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11153  15B1  3043               	movlw	67
 11154  15B2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11155  15B3  319D  2528  3194   	fcall	___ftdiv
 11156  15B6  0021               	movlb	1	; select bank1
 11157  15B7  084E               	movf	?___ftdiv^(0+128),w
 11158  15B8  0022               	movlb	2	; select bank2
 11159  15B9  00BF               	movwf	modSaw@period^(0+256)
 11160  15BA  0021               	movlb	1	; select bank1
 11161  15BB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11162  15BC  0022               	movlb	2	; select bank2
 11163  15BD  00C0               	movwf	(modSaw@period+1)^(0+256)
 11164  15BE  0021               	movlb	1	; select bank1
 11165  15BF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11166  15C0  0022               	movlb	2	; select bank2
 11167  15C1  00C1               	movwf	(modSaw@period+2)^(0+256)
 11168                           
 11169                           ;modulation.c: 131: }
 11170                           ;modulation.c: 133: int mod = (int)((period*angle-shift-180)*5/9);
 11171  15C2  083F               	movf	modSaw@period^(0+256),w
 11172  15C3  0021               	movlb	1	; select bank1
 11173  15C4  00B1               	movwf	___ftmul@f2^(0+128)
 11174  15C5  0022               	movlb	2	; select bank2
 11175  15C6  0840               	movf	(modSaw@period+1)^(0+256),w
 11176  15C7  0021               	movlb	1	; select bank1
 11177  15C8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11178  15C9  0022               	movlb	2	; select bank2
 11179  15CA  0841               	movf	(modSaw@period+2)^(0+256),w
 11180  15CB  0021               	movlb	1	; select bank1
 11181  15CC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11182  15CD  0022               	movlb	2	; select bank2
 11183  15CE  082E               	movf	modSaw@angle^(0+256),w
 11184  15CF  0021               	movlb	1	; select bank1
 11185  15D0  00AE               	movwf	___ftmul@f1^(0+128)
 11186  15D1  0022               	movlb	2	; select bank2
 11187  15D2  082F               	movf	(modSaw@angle+1)^(0+256),w
 11188  15D3  0021               	movlb	1	; select bank1
 11189  15D4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11190  15D5  0022               	movlb	2	; select bank2
 11191  15D6  0830               	movf	(modSaw@angle+2)^(0+256),w
 11192  15D7  0021               	movlb	1	; select bank1
 11193  15D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11194  15D9  3187  273B  3194   	fcall	___ftmul
 11195  15DC  0021               	movlb	1	; select bank1
 11196  15DD  082E               	movf	?___ftmul^(0+128),w
 11197  15DE  00C4               	movwf	___ftadd@f2^(0+128)
 11198  15DF  082F               	movf	(?___ftmul+1)^(0+128),w
 11199  15E0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11200  15E1  0830               	movf	(?___ftmul+2)^(0+128),w
 11201  15E2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11202  15E3  0022               	movlb	2	; select bank2
 11203  15E4  083C               	movf	modSaw@shift^(0+256),w
 11204  15E5  0021               	movlb	1	; select bank1
 11205  15E6  00BE               	movwf	___ftneg@f1^(0+128)
 11206  15E7  0022               	movlb	2	; select bank2
 11207  15E8  083D               	movf	(modSaw@shift+1)^(0+256),w
 11208  15E9  0021               	movlb	1	; select bank1
 11209  15EA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11210  15EB  0022               	movlb	2	; select bank2
 11211  15EC  083E               	movf	(modSaw@shift+2)^(0+256),w
 11212  15ED  0021               	movlb	1	; select bank1
 11213  15EE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11214  15EF  31AD  25B0  3194   	fcall	___ftneg
 11215  15F2  0021               	movlb	1	; select bank1
 11216  15F3  083E               	movf	?___ftneg^(0+128),w
 11217  15F4  00C1               	movwf	___ftadd@f1^(0+128)
 11218  15F5  083F               	movf	(?___ftneg+1)^(0+128),w
 11219  15F6  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11220  15F7  0840               	movf	(?___ftneg+2)^(0+128),w
 11221  15F8  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11222  15F9  3190  2031  3194   	fcall	___ftadd
 11223  15FC  0021               	movlb	1	; select bank1
 11224  15FD  0841               	movf	?___ftadd^(0+128),w
 11225  15FE  0022               	movlb	2	; select bank2
 11226  15FF  00B7               	movwf	_modSaw$2857^(0+256)
 11227  1600  0021               	movlb	1	; select bank1
 11228  1601  0842               	movf	(?___ftadd+1)^(0+128),w
 11229  1602  0022               	movlb	2	; select bank2
 11230  1603  00B8               	movwf	(_modSaw$2857+1)^(0+256)
 11231  1604  0021               	movlb	1	; select bank1
 11232  1605  0843               	movf	(?___ftadd+2)^(0+128),w
 11233  1606  0022               	movlb	2	; select bank2
 11234  1607  00B9               	movwf	(_modSaw$2857+2)^(0+256)
 11235                           
 11236                           ;modulation.c: 131: }
 11237                           ;modulation.c: 133: int mod = (int)((period*angle-shift-180)*5/9);
 11238  1608  0837               	movf	_modSaw$2857^(0+256),w
 11239  1609  0021               	movlb	1	; select bank1
 11240  160A  00C4               	movwf	___ftadd@f2^(0+128)
 11241  160B  0022               	movlb	2	; select bank2
 11242  160C  0838               	movf	(_modSaw$2857+1)^(0+256),w
 11243  160D  0021               	movlb	1	; select bank1
 11244  160E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11245  160F  0022               	movlb	2	; select bank2
 11246  1610  0839               	movf	(_modSaw$2857+2)^(0+256),w
 11247  1611  0021               	movlb	1	; select bank1
 11248  1612  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11249  1613  3000               	movlw	0
 11250  1614  00C1               	movwf	___ftadd@f1^(0+128)
 11251  1615  3034               	movlw	52
 11252  1616  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11253  1617  30C3               	movlw	195
 11254  1618  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11255  1619  3190  2031  3194   	fcall	___ftadd
 11256  161C  0021               	movlb	1	; select bank1
 11257  161D  0841               	movf	?___ftadd^(0+128),w
 11258  161E  00B1               	movwf	___ftmul@f2^(0+128)
 11259  161F  0842               	movf	(?___ftadd+1)^(0+128),w
 11260  1620  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11261  1621  0843               	movf	(?___ftadd+2)^(0+128),w
 11262  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11263  1623  3000               	movlw	0
 11264  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11265  1625  30A0               	movlw	160
 11266  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11267  1627  3040               	movlw	64
 11268  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11269  1629  3187  273B  3194   	fcall	___ftmul
 11270  162C  0021               	movlb	1	; select bank1
 11271  162D  082E               	movf	?___ftmul^(0+128),w
 11272  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11273  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11274  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11275  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11276  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11277  1633  3000               	movlw	0
 11278  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11279  1635  3010               	movlw	16
 11280  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11281  1637  3041               	movlw	65
 11282  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11283  1639  319D  2528  3194   	fcall	___ftdiv
 11284  163C  0021               	movlb	1	; select bank1
 11285  163D  084E               	movf	?___ftdiv^(0+128),w
 11286  163E  0022               	movlb	2	; select bank2
 11287  163F  00A0               	movwf	___fttol@f1^(0+256)
 11288  1640  0021               	movlb	1	; select bank1
 11289  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11290  1642  0022               	movlb	2	; select bank2
 11291  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11292  1644  0021               	movlb	1	; select bank1
 11293  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11294  1646  0022               	movlb	2	; select bank2
 11295  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11296  1648  319A  2263         	fcall	___fttol
 11297  164A  0022               	movlb	2	; select bank2
 11298  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11299  164C  00BB               	movwf	(modSaw@mod+1)^(0+256)
 11300  164D  0820               	movf	?___fttol^(0+256),w
 11301  164E  00BA               	movwf	modSaw@mod^(0+256)
 11302                           
 11303                           ;modulation.c: 134: return mod;
 11304  164F  083B               	movf	(modSaw@mod+1)^(0+256),w
 11305  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11306  1651  083A               	movf	modSaw@mod^(0+256),w
 11307  1652  00AE               	movwf	?_modSaw^(0+256)
 11308  1653  0008               	return
 11309  1654                     __end_of_modSaw:	
 11310                           
 11311                           	psect	text22
 11312  253E                     __ptext22:	
 11313 ;; *************** function ___awdiv *****************
 11314 ;; Defined at:
 11315 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;  divisor         2    0[BANK1 ] int 
 11318 ;;  dividend        2    2[BANK1 ] int 
 11319 ;; Auto vars:     Size  Location     Type
 11320 ;;  quotient        2    7[BANK1 ] int 
 11321 ;;  sign            1    6[BANK1 ] unsigned char 
 11322 ;;  counter         1    5[BANK1 ] unsigned char 
 11323 ;; Return value:  Size  Location     Type
 11324 ;;                  2    0[BANK1 ] int 
 11325 ;; Registers used:
 11326 ;;		wreg, status,2, status,0
 11327 ;; Tracked objects:
 11328 ;;		On entry : 0/0
 11329 ;;		On exit  : 0/0
 11330 ;;		Unchanged: 0/0
 11331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11332 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11333 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11334 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11335 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11336 ;;Total ram usage:        9 bytes
 11337 ;; Hardware stack levels used:    1
 11338 ;; Hardware stack levels required when called:    3
 11339 ;; This function calls:
 11340 ;;		Nothing
 11341 ;; This function is called by:
 11342 ;;		_updateModulationArray
 11343 ;;		_USARTWriteInt
 11344 ;; This function uses a non-reentrant model
 11345 ;;
 11346                           
 11347                           
 11348                           ;psect for function ___awdiv
 11349  253E                     ___awdiv:	
 11350                           
 11351                           ;incstack = 0
 11352                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11353  253E  0021               	movlb	1	; select bank1
 11354  253F  01A6               	clrf	___awdiv@sign^(0+128)
 11355  2540  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11356  2541  2D49               	goto	l8630
 11357  2542  09A0               	comf	___awdiv@divisor^(0+128),f
 11358  2543  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11359  2544  0AA0               	incf	___awdiv@divisor^(0+128),f
 11360  2545  1903               	skipnz
 11361  2546  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11362  2547  01A6               	clrf	___awdiv@sign^(0+128)
 11363  2548  0AA6               	incf	___awdiv@sign^(0+128),f
 11364  2549                     l8630:	
 11365  2549  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11366  254A  2D54               	goto	l8636
 11367  254B  09A2               	comf	___awdiv@dividend^(0+128),f
 11368  254C  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11369  254D  0AA2               	incf	___awdiv@dividend^(0+128),f
 11370  254E  1903               	skipnz
 11371  254F  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11372  2550  3001               	movlw	1
 11373  2551  00A4               	movwf	??___awdiv^(0+128)
 11374  2552  0824               	movf	??___awdiv^(0+128),w
 11375  2553  06A6               	xorwf	___awdiv@sign^(0+128),f
 11376  2554                     l8636:	
 11377  2554  01A7               	clrf	___awdiv@quotient^(0+128)
 11378  2555  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11379  2556  0820               	movf	___awdiv@divisor^(0+128),w
 11380  2557  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11381  2558  1903               	btfsc	3,2
 11382  2559  2D83               	goto	l8658
 11383  255A  01A5               	clrf	___awdiv@counter^(0+128)
 11384  255B  0AA5               	incf	___awdiv@counter^(0+128),f
 11385  255C                     l8646:	
 11386  255C  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11387  255D  2D68               	goto	l8648
 11388  255E  3001               	movlw	1
 11389  255F                     u9165:	
 11390  255F  35A0               	lslf	___awdiv@divisor^(0+128),f
 11391  2560  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11392  2561  0B89               	decfsz	9,f
 11393  2562  2D5F               	goto	u9165
 11394  2563  3001               	movlw	1
 11395  2564  00A4               	movwf	??___awdiv^(0+128)
 11396  2565  0824               	movf	??___awdiv^(0+128),w
 11397  2566  07A5               	addwf	___awdiv@counter^(0+128),f
 11398  2567  2D5C               	goto	l8646
 11399  2568                     l8648:	
 11400  2568  3001               	movlw	1
 11401  2569                     u9185:	
 11402  2569  35A7               	lslf	___awdiv@quotient^(0+128),f
 11403  256A  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11404  256B  0B89               	decfsz	9,f
 11405  256C  2D69               	goto	u9185
 11406  256D  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11407  256E  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11408  256F  1D03               	skipz
 11409  2570  2D73               	goto	u9195
 11410  2571  0820               	movf	___awdiv@divisor^(0+128),w
 11411  2572  0222               	subwf	___awdiv@dividend^(0+128),w
 11412  2573                     u9195:	
 11413  2573  1C03               	skipc
 11414  2574  2D7A               	goto	l8654
 11415  2575  0820               	movf	___awdiv@divisor^(0+128),w
 11416  2576  02A2               	subwf	___awdiv@dividend^(0+128),f
 11417  2577  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11418  2578  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11419  2579  1427               	bsf	___awdiv@quotient^(0+128),0
 11420  257A                     l8654:	
 11421  257A  3001               	movlw	1
 11422  257B                     u9205:	
 11423  257B  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11424  257C  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11425  257D  0B89               	decfsz	9,f
 11426  257E  2D7B               	goto	u9205
 11427  257F  3001               	movlw	1
 11428  2580  02A5               	subwf	___awdiv@counter^(0+128),f
 11429  2581  1D03               	btfss	3,2
 11430  2582  2D68               	goto	l8648
 11431  2583                     l8658:	
 11432  2583  0826               	movf	___awdiv@sign^(0+128),w
 11433  2584  1903               	btfsc	3,2
 11434  2585  2D8B               	goto	l8662
 11435  2586  09A7               	comf	___awdiv@quotient^(0+128),f
 11436  2587  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11437  2588  0AA7               	incf	___awdiv@quotient^(0+128),f
 11438  2589  1903               	skipnz
 11439  258A  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11440  258B                     l8662:	
 11441  258B  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11442  258C  00A1               	movwf	(?___awdiv+1)^(0+128)
 11443  258D  0827               	movf	___awdiv@quotient^(0+128),w
 11444  258E  00A0               	movwf	?___awdiv^(0+128)
 11445  258F  0008               	return
 11446  2590                     __end_of___awdiv:	
 11447                           
 11448                           	psect	text23
 11449  1B75                     __ptext23:	
 11450 ;; *************** function _set_subdivision *****************
 11451 ;; Defined at:
 11452 ;;		line 77 in file "user.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;  x               2   14[BANK2 ] int 
 11455 ;;  y               2   16[BANK2 ] int 
 11456 ;; Auto vars:     Size  Location     Type
 11457 ;;  scalar          3   18[BANK2 ] float 
 11458 ;;  tmpX            2   21[BANK2 ] int 
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  2   14[BANK2 ] int 
 11461 ;; Registers used:
 11462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11468 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11469 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11471 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11472 ;;Total ram usage:        9 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    5
 11475 ;; This function calls:
 11476 ;;		___awtoft
 11477 ;;		___ftmul
 11478 ;;		___fttol
 11479 ;; This function is called by:
 11480 ;;		_main
 11481 ;; This function uses a non-reentrant model
 11482 ;;
 11483                           
 11484                           
 11485                           ;psect for function _set_subdivision
 11486  1B75                     _set_subdivision:	
 11487                           
 11488                           ;user.c: 81: adjust_mod_delay = 0;
 11489                           
 11490                           ;incstack = 0
 11491                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11492  1B75  0023               	movlb	3	; select bank3
 11493  1B76  01BA               	clrf	_adjust_mod_delay^(0+384)
 11494                           
 11495                           ;user.c: 82: int tmpX = x;
 11496  1B77  0022               	movlb	2	; select bank2
 11497  1B78  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11498  1B79  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11499  1B7A  082E               	movf	set_subdivision@x^(0+256),w
 11500  1B7B  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11501                           
 11502                           ;user.c: 83: float scalar = 1.0;
 11503  1B7C  3000               	movlw	0
 11504  1B7D  00B2               	movwf	set_subdivision@scalar^(0+256)
 11505  1B7E  3080               	movlw	128
 11506  1B7F  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11507  1B80  303F               	movlw	63
 11508  1B81  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11509                           
 11510                           ;user.c: 85: switch (y) {
 11511  1B82  2BA2               	goto	l9226
 11512  1B83                     l9212:	
 11513                           ;user.c: 86: case 1:
 11514                           
 11515                           
 11516                           ;user.c: 87: scalar = 2.0;
 11517  1B83  3000               	movlw	0
 11518  1B84  00B2               	movwf	set_subdivision@scalar^(0+256)
 11519  1B85  3000               	movlw	0
 11520  1B86  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11521  1B87  3040               	movlw	64
 11522  1B88  2BA0               	goto	L13
 11523  1B89                     l9214:	
 11524                           ;user.c: 89: case 2:
 11525                           
 11526                           ;user.c: 88: break;
 11527                           
 11528                           
 11529                           ;user.c: 90: scalar = 0.6666;
 11530  1B89  30A6               	movlw	166
 11531  1B8A  00B2               	movwf	set_subdivision@scalar^(0+256)
 11532  1B8B  302A               	movlw	42
 11533  1B8C  2B9E               	goto	L14
 11534  1B8D                     l9216:	
 11535                           ;user.c: 92: case 3:
 11536                           
 11537                           ;user.c: 91: break;
 11538                           
 11539                           
 11540                           ;user.c: 93: scalar = .5;
 11541  1B8D  3000               	movlw	0
 11542  1B8E  00B2               	movwf	set_subdivision@scalar^(0+256)
 11543  1B8F  3000               	movlw	0
 11544  1B90  2B9E               	goto	L14
 11545  1B91                     l9218:	
 11546                           ;user.c: 95: case 4:
 11547                           
 11548                           ;user.c: 94: break;
 11549                           
 11550                           
 11551                           ;user.c: 96: scalar = 0.3333;
 11552  1B91  30A6               	movlw	166
 11553  1B92  00B2               	movwf	set_subdivision@scalar^(0+256)
 11554  1B93  30AA               	movlw	170
 11555  1B94  2B98               	goto	L15
 11556  1B95                     l9220:	
 11557                           ;user.c: 98: case 5:
 11558                           
 11559                           ;user.c: 97: break;
 11560                           
 11561                           
 11562                           ;user.c: 99: scalar = 0.25;
 11563  1B95  3000               	movlw	0
 11564  1B96  00B2               	movwf	set_subdivision@scalar^(0+256)
 11565  1B97  3080               	movlw	128
 11566  1B98                     L15:	
 11567  1B98  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11568  1B99  303E               	movlw	62
 11569  1B9A  2BA0               	goto	L13
 11570  1B9B                     l9222:	
 11571                           ;user.c: 101: case 6:
 11572                           
 11573                           ;user.c: 100: break;
 11574                           
 11575                           
 11576                           ;user.c: 102: scalar = 1.0;
 11577  1B9B  3000               	movlw	0
 11578  1B9C  00B2               	movwf	set_subdivision@scalar^(0+256)
 11579  1B9D  3080               	movlw	128
 11580  1B9E                     L14:	
 11581  1B9E  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11582  1B9F  303F               	movlw	63
 11583  1BA0                     L13:	
 11584  1BA0  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11585                           
 11586                           ;user.c: 104: }
 11587                           
 11588                           ;user.c: 103: break;
 11589  1BA1  2BBB               	goto	l9228
 11590  1BA2                     l9226:	
 11591                           
 11592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11593                           ; Switch size 1, requested type "space"
 11594                           ; Number of cases is 1, Range of values is 0 to 0
 11595                           ; switch strategies available:
 11596                           ; Name         Instructions Cycles
 11597                           ; simple_byte            4     3 (average)
 11598                           ; direct_byte            8     6 (fixed)
 11599                           ; jumptable            260     6 (fixed)
 11600                           ;	Chosen strategy is simple_byte
 11601  1BA2  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11602  1BA3  3A00               	xorlw	0	; case 0
 11603  1BA4  1903               	skipnz
 11604  1BA5  2BA7               	goto	l9806
 11605  1BA6  2BBB               	goto	l9228
 11606  1BA7                     l9806:	
 11607                           
 11608                           ; Switch size 1, requested type "space"
 11609                           ; Number of cases is 6, Range of values is 1 to 6
 11610                           ; switch strategies available:
 11611                           ; Name         Instructions Cycles
 11612                           ; simple_byte           19    10 (average)
 11613                           ; direct_byte           21     9 (fixed)
 11614                           ; jumptable            263     9 (fixed)
 11615                           ;	Chosen strategy is simple_byte
 11616  1BA7  0830               	movf	set_subdivision@y^(0+256),w
 11617  1BA8  3A01               	xorlw	1	; case 1
 11618  1BA9  1903               	skipnz
 11619  1BAA  2B83               	goto	l9212
 11620  1BAB  3A03               	xorlw	3	; case 2
 11621  1BAC  1903               	skipnz
 11622  1BAD  2B89               	goto	l9214
 11623  1BAE  3A01               	xorlw	1	; case 3
 11624  1BAF  1903               	skipnz
 11625  1BB0  2B8D               	goto	l9216
 11626  1BB1  3A07               	xorlw	7	; case 4
 11627  1BB2  1903               	skipnz
 11628  1BB3  2B91               	goto	l9218
 11629  1BB4  3A01               	xorlw	1	; case 5
 11630  1BB5  1903               	skipnz
 11631  1BB6  2B95               	goto	l9220
 11632  1BB7  3A03               	xorlw	3	; case 6
 11633  1BB8  1903               	skipnz
 11634  1BB9  2B9B               	goto	l9222
 11635  1BBA  2BBB               	goto	l9228
 11636  1BBB                     l9228:	
 11637                           
 11638                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11639  1BBB  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11640  1BBC  0021               	movlb	1	; select bank1
 11641  1BBD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11642  1BBE  0022               	movlb	2	; select bank2
 11643  1BBF  0835               	movf	set_subdivision@tmpX^(0+256),w
 11644  1BC0  0021               	movlb	1	; select bank1
 11645  1BC1  00A8               	movwf	___awtoft@c^(0+128)
 11646  1BC2  31AE  26E2  319B   	fcall	___awtoft
 11647  1BC5  0021               	movlb	1	; select bank1
 11648  1BC6  0828               	movf	?___awtoft^(0+128),w
 11649  1BC7  00B1               	movwf	___ftmul@f2^(0+128)
 11650  1BC8  0829               	movf	(?___awtoft+1)^(0+128),w
 11651  1BC9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11652  1BCA  082A               	movf	(?___awtoft+2)^(0+128),w
 11653  1BCB  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11654  1BCC  0022               	movlb	2	; select bank2
 11655  1BCD  0832               	movf	set_subdivision@scalar^(0+256),w
 11656  1BCE  0021               	movlb	1	; select bank1
 11657  1BCF  00AE               	movwf	___ftmul@f1^(0+128)
 11658  1BD0  0022               	movlb	2	; select bank2
 11659  1BD1  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11660  1BD2  0021               	movlb	1	; select bank1
 11661  1BD3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11662  1BD4  0022               	movlb	2	; select bank2
 11663  1BD5  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11664  1BD6  0021               	movlb	1	; select bank1
 11665  1BD7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11666  1BD8  3187  273B  319B   	fcall	___ftmul
 11667  1BDB  0021               	movlb	1	; select bank1
 11668  1BDC  082E               	movf	?___ftmul^(0+128),w
 11669  1BDD  0022               	movlb	2	; select bank2
 11670  1BDE  00A0               	movwf	___fttol@f1^(0+256)
 11671  1BDF  0021               	movlb	1	; select bank1
 11672  1BE0  082F               	movf	(?___ftmul+1)^(0+128),w
 11673  1BE1  0022               	movlb	2	; select bank2
 11674  1BE2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11675  1BE3  0021               	movlb	1	; select bank1
 11676  1BE4  0830               	movf	(?___ftmul+2)^(0+128),w
 11677  1BE5  0022               	movlb	2	; select bank2
 11678  1BE6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11679  1BE7  319A  2263  319B   	fcall	___fttol
 11680  1BEA  0022               	movlb	2	; select bank2
 11681  1BEB  0821               	movf	(?___fttol^(0+256)+1),w
 11682  1BEC  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11683  1BED  0820               	movf	?___fttol^(0+256),w
 11684  1BEE  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11685                           
 11686                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11687  1BEF  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11688  1BF0  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11689  1BF1  1D03               	skipz
 11690  1BF2  2BF5               	goto	u10205
 11691  1BF3  0835               	movf	set_subdivision@tmpX^(0+256),w
 11692  1BF4  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11693  1BF5                     u10205:	
 11694  1BF5  1903               	skipnz
 11695  1BF6  2BFA               	goto	l9234
 11696                           
 11697                           ;user.c: 109: adjust_mod_delay = 1;
 11698  1BF7  0023               	movlb	3	; select bank3
 11699  1BF8  01BA               	clrf	_adjust_mod_delay^(0+384)
 11700  1BF9  0ABA               	incf	_adjust_mod_delay^(0+384),f
 11701  1BFA                     l9234:	
 11702                           
 11703                           ;user.c: 110: }
 11704                           ;user.c: 112: return tmpX;
 11705  1BFA  0022               	movlb	2	; select bank2
 11706  1BFB  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11707  1BFC  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11708  1BFD  0835               	movf	set_subdivision@tmpX^(0+256),w
 11709  1BFE  00AE               	movwf	?_set_subdivision^(0+256)
 11710  1BFF  0008               	return
 11711  1C00                     __end_of_set_subdivision:	
 11712                           
 11713                           	psect	text24
 11714  1DD1                     __ptext24:	
 11715 ;; *************** function _scaleiA10kPot *****************
 11716 ;; Defined at:
 11717 ;;		line 211 in file "user.c"
 11718 ;; Parameters:    Size  Location     Type
 11719 ;;  input           3   71[BANK2 ] int 
 11720 ;; Auto vars:     Size  Location     Type
 11721 ;;  pwm             3    0[BANK3 ] float 
 11722 ;; Return value:  Size  Location     Type
 11723 ;;                  2   71[BANK2 ] int 
 11724 ;; Registers used:
 11725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11726 ;; Tracked objects:
 11727 ;;		On entry : 0/0
 11728 ;;		On exit  : 0/0
 11729 ;;		Unchanged: 0/0
 11730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11731 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11732 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11734 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11735 ;;Total ram usage:       12 bytes
 11736 ;; Hardware stack levels used:    1
 11737 ;; Hardware stack levels required when called:    8
 11738 ;; This function calls:
 11739 ;;		___ftadd
 11740 ;;		___ftdiv
 11741 ;;		___ftmul
 11742 ;;		___ftneg
 11743 ;;		___fttol
 11744 ;;		_pow
 11745 ;; This function is called by:
 11746 ;;		_main
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           
 11751                           ;psect for function _scaleiA10kPot
 11752  1DD1                     _scaleiA10kPot:	
 11753                           
 11754                           ;user.c: 214: if (input == 0.0) {return 0;}
 11755                           
 11756                           ;incstack = 0
 11757                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11758  1DD1  0022               	movlb	2	; select bank2
 11759  1DD2  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11760  1DD3  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11761  1DD4  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11762  1DD5  1D03               	skipz
 11763  1DD6  2DDA               	goto	l9172
 11764  1DD7  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11765  1DD8  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11766  1DD9  0008               	return
 11767  1DDA                     l9172:	
 11768                           
 11769                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11770  1DDA  30C0               	movlw	192
 11771  1DDB  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11772  1DDC  307F               	movlw	127
 11773  1DDD  1903               	skipnz
 11774  1DDE  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11775  1DDF  3044               	movlw	68
 11776  1DE0  1903               	skipnz
 11777  1DE1  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11778  1DE2  1D03               	btfss	3,2
 11779  1DE3  2DE9               	goto	l9178
 11780  1DE4  30FF               	movlw	255
 11781  1DE5  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11782  1DE6  3000               	movlw	0
 11783  1DE7  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11784  1DE8  0008               	return
 11785  1DE9                     l9178:	
 11786                           
 11787                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11788  1DE9  3000               	movlw	0
 11789  1DEA  0021               	movlb	1	; select bank1
 11790  1DEB  00C1               	movwf	___ftadd@f1^(0+128)
 11791  1DEC  3080               	movlw	128
 11792  1DED  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11793  1DEE  303F               	movlw	63
 11794  1DEF  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11795  1DF0  0022               	movlb	2	; select bank2
 11796  1DF1  0867               	movf	scaleiA10kPot@input^(0+256),w
 11797  1DF2  0021               	movlb	1	; select bank1
 11798  1DF3  00D1               	movwf	___ftdiv@f1^(0+128)
 11799  1DF4  0022               	movlb	2	; select bank2
 11800  1DF5  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11801  1DF6  0021               	movlb	1	; select bank1
 11802  1DF7  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11803  1DF8  0022               	movlb	2	; select bank2
 11804  1DF9  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11805  1DFA  0021               	movlb	1	; select bank1
 11806  1DFB  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11807  1DFC  30C0               	movlw	192
 11808  1DFD  00CE               	movwf	___ftdiv@f2^(0+128)
 11809  1DFE  307F               	movlw	127
 11810  1DFF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11811  1E00  3044               	movlw	68
 11812  1E01  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11813  1E02  319D  2528  319D   	fcall	___ftdiv
 11814  1E05  0021               	movlb	1	; select bank1
 11815  1E06  084E               	movf	?___ftdiv^(0+128),w
 11816  1E07  00BE               	movwf	___ftneg@f1^(0+128)
 11817  1E08  084F               	movf	(?___ftdiv+1)^(0+128),w
 11818  1E09  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11819  1E0A  0850               	movf	(?___ftdiv+2)^(0+128),w
 11820  1E0B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11821  1E0C  31AD  25B0  319D   	fcall	___ftneg
 11822  1E0F  0021               	movlb	1	; select bank1
 11823  1E10  083E               	movf	?___ftneg^(0+128),w
 11824  1E11  00C4               	movwf	___ftadd@f2^(0+128)
 11825  1E12  083F               	movf	(?___ftneg+1)^(0+128),w
 11826  1E13  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11827  1E14  0840               	movf	(?___ftneg+2)^(0+128),w
 11828  1E15  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11829  1E16  3190  2031  319D   	fcall	___ftadd
 11830  1E19  0021               	movlb	1	; select bank1
 11831  1E1A  0841               	movf	?___ftadd^(0+128),w
 11832  1E1B  0023               	movlb	3	; select bank3
 11833  1E1C  00EA               	movwf	_scaleiA10kPot$2852^(0+384)
 11834  1E1D  0021               	movlb	1	; select bank1
 11835  1E1E  0842               	movf	(?___ftadd+1)^(0+128),w
 11836  1E1F  0023               	movlb	3	; select bank3
 11837  1E20  00EB               	movwf	(_scaleiA10kPot$2852+1)^(0+384)
 11838  1E21  0021               	movlb	1	; select bank1
 11839  1E22  0843               	movf	(?___ftadd+2)^(0+128),w
 11840  1E23  0023               	movlb	3	; select bank3
 11841  1E24  00EC               	movwf	(_scaleiA10kPot$2852+2)^(0+384)
 11842                           
 11843                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11844  1E25  306A               	movlw	106
 11845  1E26  0022               	movlb	2	; select bank2
 11846  1E27  00D8               	movwf	pow@y^(0+256)
 11847  1E28  309C               	movlw	156
 11848  1E29  00D9               	movwf	(pow@y+1)^(0+256)
 11849  1E2A  30BF               	movlw	191
 11850  1E2B  00DA               	movwf	(pow@y+2)^(0+256)
 11851  1E2C  0023               	movlb	3	; select bank3
 11852  1E2D  086A               	movf	_scaleiA10kPot$2852^(0+384),w
 11853  1E2E  0022               	movlb	2	; select bank2
 11854  1E2F  00D5               	movwf	pow@x^(0+256)
 11855  1E30  0023               	movlb	3	; select bank3
 11856  1E31  086B               	movf	(_scaleiA10kPot$2852+1)^(0+384),w
 11857  1E32  0022               	movlb	2	; select bank2
 11858  1E33  00D6               	movwf	(pow@x+1)^(0+256)
 11859  1E34  0023               	movlb	3	; select bank3
 11860  1E35  086C               	movf	(_scaleiA10kPot$2852+2)^(0+384),w
 11861  1E36  0022               	movlb	2	; select bank2
 11862  1E37  00D7               	movwf	(pow@x+2)^(0+256)
 11863  1E38  3191  2127  319D   	fcall	_pow
 11864  1E3B  0022               	movlb	2	; select bank2
 11865  1E3C  0855               	movf	?_pow^(0+256),w
 11866  1E3D  0023               	movlb	3	; select bank3
 11867  1E3E  00ED               	movwf	_scaleiA10kPot$2853^(0+384)
 11868  1E3F  0022               	movlb	2	; select bank2
 11869  1E40  0856               	movf	(?_pow+1)^(0+256),w
 11870  1E41  0023               	movlb	3	; select bank3
 11871  1E42  00EE               	movwf	(_scaleiA10kPot$2853+1)^(0+384)
 11872  1E43  0022               	movlb	2	; select bank2
 11873  1E44  0857               	movf	(?_pow+2)^(0+256),w
 11874  1E45  0023               	movlb	3	; select bank3
 11875  1E46  00EF               	movwf	(_scaleiA10kPot$2853+2)^(0+384)
 11876                           
 11877                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11878  1E47  30E3               	movlw	227
 11879  1E48  0021               	movlb	1	; select bank1
 11880  1E49  00AE               	movwf	___ftmul@f1^(0+128)
 11881  1E4A  300B               	movlw	11
 11882  1E4B  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11883  1E4C  3041               	movlw	65
 11884  1E4D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11885  1E4E  0023               	movlb	3	; select bank3
 11886  1E4F  086D               	movf	_scaleiA10kPot$2853^(0+384),w
 11887  1E50  0021               	movlb	1	; select bank1
 11888  1E51  00B1               	movwf	___ftmul@f2^(0+128)
 11889  1E52  0023               	movlb	3	; select bank3
 11890  1E53  086E               	movf	(_scaleiA10kPot$2853+1)^(0+384),w
 11891  1E54  0021               	movlb	1	; select bank1
 11892  1E55  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11893  1E56  0023               	movlb	3	; select bank3
 11894  1E57  086F               	movf	(_scaleiA10kPot$2853+2)^(0+384),w
 11895  1E58  0021               	movlb	1	; select bank1
 11896  1E59  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11897  1E5A  3187  273B  319D   	fcall	___ftmul
 11898  1E5D  0021               	movlb	1	; select bank1
 11899  1E5E  082E               	movf	?___ftmul^(0+128),w
 11900  1E5F  0023               	movlb	3	; select bank3
 11901  1E60  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 11902  1E61  0021               	movlb	1	; select bank1
 11903  1E62  082F               	movf	(?___ftmul+1)^(0+128),w
 11904  1E63  0023               	movlb	3	; select bank3
 11905  1E64  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 11906  1E65  0021               	movlb	1	; select bank1
 11907  1E66  0830               	movf	(?___ftmul+2)^(0+128),w
 11908  1E67  0023               	movlb	3	; select bank3
 11909  1E68  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 11910                           
 11911                           ;user.c: 219: return (int)(pwm);
 11912  1E69  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 11913  1E6A  0022               	movlb	2	; select bank2
 11914  1E6B  00A0               	movwf	___fttol@f1^(0+256)
 11915  1E6C  0023               	movlb	3	; select bank3
 11916  1E6D  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 11917  1E6E  0022               	movlb	2	; select bank2
 11918  1E6F  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11919  1E70  0023               	movlb	3	; select bank3
 11920  1E71  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 11921  1E72  0022               	movlb	2	; select bank2
 11922  1E73  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11923  1E74  319A  2263         	fcall	___fttol
 11924  1E76  0022               	movlb	2	; select bank2
 11925  1E77  0821               	movf	(?___fttol^(0+256)+1),w
 11926  1E78  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 11927  1E79  0820               	movf	?___fttol^(0+256),w
 11928  1E7A  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11929  1E7B  0008               	return
 11930  1E7C                     __end_of_scaleiA10kPot:	
 11931                           
 11932                           	psect	text25
 11933  1C00                     __ptext25:	
 11934 ;; *************** function _scaleA10kPot *****************
 11935 ;; Defined at:
 11936 ;;		line 202 in file "user.c"
 11937 ;; Parameters:    Size  Location     Type
 11938 ;;  input           3   71[BANK2 ] int 
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;  pwm             3    0[BANK3 ] float 
 11941 ;; Return value:  Size  Location     Type
 11942 ;;                  2   71[BANK2 ] int 
 11943 ;; Registers used:
 11944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11945 ;; Tracked objects:
 11946 ;;		On entry : 0/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11950 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11951 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11953 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11954 ;;Total ram usage:       12 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; Hardware stack levels required when called:    8
 11957 ;; This function calls:
 11958 ;;		___ftdiv
 11959 ;;		___ftmul
 11960 ;;		___fttol
 11961 ;;		_pow
 11962 ;; This function is called by:
 11963 ;;		_main
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           
 11968                           ;psect for function _scaleA10kPot
 11969  1C00                     _scaleA10kPot:	
 11970                           
 11971                           ;user.c: 204: if (input == 0.0) {return 255;}
 11972                           
 11973                           ;incstack = 0
 11974                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11975  1C00  0022               	movlb	2	; select bank2
 11976  1C01  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11977  1C02  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 11978  1C03  0467               	iorwf	scaleA10kPot@input^(0+256),w
 11979  1C04  1D03               	skipz
 11980  1C05  2C0B               	goto	l9150
 11981  1C06  30FF               	movlw	255
 11982  1C07  00E7               	movwf	?_scaleA10kPot^(0+256)
 11983  1C08  3000               	movlw	0
 11984  1C09  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 11985  1C0A  0008               	return
 11986  1C0B                     l9150:	
 11987                           
 11988                           ;user.c: 205: if (input == 1023.0) {return 0;}
 11989  1C0B  30C0               	movlw	192
 11990  1C0C  0667               	xorwf	scaleA10kPot@input^(0+256),w
 11991  1C0D  307F               	movlw	127
 11992  1C0E  1903               	skipnz
 11993  1C0F  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 11994  1C10  3044               	movlw	68
 11995  1C11  1903               	skipnz
 11996  1C12  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 11997  1C13  1D03               	btfss	3,2
 11998  1C14  2C18               	goto	l9156
 11999  1C15  01E7               	clrf	?_scaleA10kPot^(0+256)
 12000  1C16  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12001  1C17  0008               	return
 12002  1C18                     l9156:	
 12003                           
 12004                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12005  1C18  30C0               	movlw	192
 12006  1C19  0021               	movlb	1	; select bank1
 12007  1C1A  00CE               	movwf	___ftdiv@f2^(0+128)
 12008  1C1B  307F               	movlw	127
 12009  1C1C  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12010  1C1D  3044               	movlw	68
 12011  1C1E  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12012  1C1F  0022               	movlb	2	; select bank2
 12013  1C20  0867               	movf	scaleA10kPot@input^(0+256),w
 12014  1C21  0021               	movlb	1	; select bank1
 12015  1C22  00D1               	movwf	___ftdiv@f1^(0+128)
 12016  1C23  0022               	movlb	2	; select bank2
 12017  1C24  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12018  1C25  0021               	movlb	1	; select bank1
 12019  1C26  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12020  1C27  0022               	movlb	2	; select bank2
 12021  1C28  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12022  1C29  0021               	movlb	1	; select bank1
 12023  1C2A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12024  1C2B  319D  2528  319C   	fcall	___ftdiv
 12025  1C2E  0021               	movlb	1	; select bank1
 12026  1C2F  084E               	movf	?___ftdiv^(0+128),w
 12027  1C30  0023               	movlb	3	; select bank3
 12028  1C31  00EA               	movwf	_scaleA10kPot$2850^(0+384)
 12029  1C32  0021               	movlb	1	; select bank1
 12030  1C33  084F               	movf	(?___ftdiv+1)^(0+128),w
 12031  1C34  0023               	movlb	3	; select bank3
 12032  1C35  00EB               	movwf	(_scaleA10kPot$2850+1)^(0+384)
 12033  1C36  0021               	movlb	1	; select bank1
 12034  1C37  0850               	movf	(?___ftdiv+2)^(0+128),w
 12035  1C38  0023               	movlb	3	; select bank3
 12036  1C39  00EC               	movwf	(_scaleA10kPot$2850+2)^(0+384)
 12037                           
 12038                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12039  1C3A  306A               	movlw	106
 12040  1C3B  0022               	movlb	2	; select bank2
 12041  1C3C  00D8               	movwf	pow@y^(0+256)
 12042  1C3D  309C               	movlw	156
 12043  1C3E  00D9               	movwf	(pow@y+1)^(0+256)
 12044  1C3F  30BF               	movlw	191
 12045  1C40  00DA               	movwf	(pow@y+2)^(0+256)
 12046  1C41  0023               	movlb	3	; select bank3
 12047  1C42  086A               	movf	_scaleA10kPot$2850^(0+384),w
 12048  1C43  0022               	movlb	2	; select bank2
 12049  1C44  00D5               	movwf	pow@x^(0+256)
 12050  1C45  0023               	movlb	3	; select bank3
 12051  1C46  086B               	movf	(_scaleA10kPot$2850+1)^(0+384),w
 12052  1C47  0022               	movlb	2	; select bank2
 12053  1C48  00D6               	movwf	(pow@x+1)^(0+256)
 12054  1C49  0023               	movlb	3	; select bank3
 12055  1C4A  086C               	movf	(_scaleA10kPot$2850+2)^(0+384),w
 12056  1C4B  0022               	movlb	2	; select bank2
 12057  1C4C  00D7               	movwf	(pow@x+2)^(0+256)
 12058  1C4D  3191  2127  319C   	fcall	_pow
 12059  1C50  0022               	movlb	2	; select bank2
 12060  1C51  0855               	movf	?_pow^(0+256),w
 12061  1C52  0023               	movlb	3	; select bank3
 12062  1C53  00ED               	movwf	_scaleA10kPot$2851^(0+384)
 12063  1C54  0022               	movlb	2	; select bank2
 12064  1C55  0856               	movf	(?_pow+1)^(0+256),w
 12065  1C56  0023               	movlb	3	; select bank3
 12066  1C57  00EE               	movwf	(_scaleA10kPot$2851+1)^(0+384)
 12067  1C58  0022               	movlb	2	; select bank2
 12068  1C59  0857               	movf	(?_pow+2)^(0+256),w
 12069  1C5A  0023               	movlb	3	; select bank3
 12070  1C5B  00EF               	movwf	(_scaleA10kPot$2851+2)^(0+384)
 12071                           
 12072                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12073  1C5C  30E3               	movlw	227
 12074  1C5D  0021               	movlb	1	; select bank1
 12075  1C5E  00AE               	movwf	___ftmul@f1^(0+128)
 12076  1C5F  300B               	movlw	11
 12077  1C60  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12078  1C61  3041               	movlw	65
 12079  1C62  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12080  1C63  0023               	movlb	3	; select bank3
 12081  1C64  086D               	movf	_scaleA10kPot$2851^(0+384),w
 12082  1C65  0021               	movlb	1	; select bank1
 12083  1C66  00B1               	movwf	___ftmul@f2^(0+128)
 12084  1C67  0023               	movlb	3	; select bank3
 12085  1C68  086E               	movf	(_scaleA10kPot$2851+1)^(0+384),w
 12086  1C69  0021               	movlb	1	; select bank1
 12087  1C6A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12088  1C6B  0023               	movlb	3	; select bank3
 12089  1C6C  086F               	movf	(_scaleA10kPot$2851+2)^(0+384),w
 12090  1C6D  0021               	movlb	1	; select bank1
 12091  1C6E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12092  1C6F  3187  273B  319C   	fcall	___ftmul
 12093  1C72  0021               	movlb	1	; select bank1
 12094  1C73  082E               	movf	?___ftmul^(0+128),w
 12095  1C74  0023               	movlb	3	; select bank3
 12096  1C75  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 12097  1C76  0021               	movlb	1	; select bank1
 12098  1C77  082F               	movf	(?___ftmul+1)^(0+128),w
 12099  1C78  0023               	movlb	3	; select bank3
 12100  1C79  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12101  1C7A  0021               	movlb	1	; select bank1
 12102  1C7B  0830               	movf	(?___ftmul+2)^(0+128),w
 12103  1C7C  0023               	movlb	3	; select bank3
 12104  1C7D  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12105                           
 12106                           ;user.c: 207: return (int)(pwm);
 12107  1C7E  0867               	movf	scaleA10kPot@pwm^(0+384),w
 12108  1C7F  0022               	movlb	2	; select bank2
 12109  1C80  00A0               	movwf	___fttol@f1^(0+256)
 12110  1C81  0023               	movlb	3	; select bank3
 12111  1C82  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12112  1C83  0022               	movlb	2	; select bank2
 12113  1C84  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12114  1C85  0023               	movlb	3	; select bank3
 12115  1C86  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12116  1C87  0022               	movlb	2	; select bank2
 12117  1C88  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12118  1C89  319A  2263         	fcall	___fttol
 12119  1C8B  0022               	movlb	2	; select bank2
 12120  1C8C  0821               	movf	(?___fttol^(0+256)+1),w
 12121  1C8D  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12122  1C8E  0820               	movf	?___fttol^(0+256),w
 12123  1C8F  00E7               	movwf	?_scaleA10kPot^(0+256)
 12124  1C90  0008               	return
 12125  1C91                     __end_of_scaleA10kPot:	
 12126                           
 12127                           	psect	text26
 12128  19DE                     __ptext26:	
 12129 ;; *************** function _scaleA100kPot *****************
 12130 ;; Defined at:
 12131 ;;		line 188 in file "user.c"
 12132 ;; Parameters:    Size  Location     Type
 12133 ;;  input           3   71[BANK2 ] int 
 12134 ;; Auto vars:     Size  Location     Type
 12135 ;;  pwm             3    0[BANK3 ] float 
 12136 ;; Return value:  Size  Location     Type
 12137 ;;                  2   71[BANK2 ] int 
 12138 ;; Registers used:
 12139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12140 ;; Tracked objects:
 12141 ;;		On entry : 0/0
 12142 ;;		On exit  : 0/0
 12143 ;;		Unchanged: 0/0
 12144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12145 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12146 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12148 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12149 ;;Total ram usage:       12 bytes
 12150 ;; Hardware stack levels used:    1
 12151 ;; Hardware stack levels required when called:    8
 12152 ;; This function calls:
 12153 ;;		___ftdiv
 12154 ;;		___ftmul
 12155 ;;		___fttol
 12156 ;;		_pow
 12157 ;; This function is called by:
 12158 ;;		_main
 12159 ;; This function uses a non-reentrant model
 12160 ;;
 12161                           
 12162                           
 12163                           ;psect for function _scaleA100kPot
 12164  19DE                     _scaleA100kPot:	
 12165                           
 12166                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12167                           
 12168                           ;incstack = 0
 12169                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12170  19DE  0022               	movlb	2	; select bank2
 12171  19DF  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12172  19E0  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12173  19E1  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12174  19E2  1D03               	skipz
 12175  19E3  29EA               	goto	l9192
 12176  19E4  3000               	movlw	0
 12177  19E5  00E7               	movwf	scaleA100kPot@input^(0+256)
 12178  19E6  3080               	movlw	128
 12179  19E7  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12180  19E8  303F               	movlw	63
 12181  19E9  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12182  19EA                     l9192:	
 12183                           
 12184                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12185  19EA  30C0               	movlw	192
 12186  19EB  0021               	movlb	1	; select bank1
 12187  19EC  00CE               	movwf	___ftdiv@f2^(0+128)
 12188  19ED  307F               	movlw	127
 12189  19EE  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12190  19EF  3044               	movlw	68
 12191  19F0  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12192  19F1  0022               	movlb	2	; select bank2
 12193  19F2  0867               	movf	scaleA100kPot@input^(0+256),w
 12194  19F3  0021               	movlb	1	; select bank1
 12195  19F4  00D1               	movwf	___ftdiv@f1^(0+128)
 12196  19F5  0022               	movlb	2	; select bank2
 12197  19F6  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12198  19F7  0021               	movlb	1	; select bank1
 12199  19F8  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12200  19F9  0022               	movlb	2	; select bank2
 12201  19FA  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12202  19FB  0021               	movlb	1	; select bank1
 12203  19FC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12204  19FD  319D  2528  3199   	fcall	___ftdiv
 12205  1A00  0021               	movlb	1	; select bank1
 12206  1A01  084E               	movf	?___ftdiv^(0+128),w
 12207  1A02  0023               	movlb	3	; select bank3
 12208  1A03  00EA               	movwf	_scaleA100kPot$2846^(0+384)
 12209  1A04  0021               	movlb	1	; select bank1
 12210  1A05  084F               	movf	(?___ftdiv+1)^(0+128),w
 12211  1A06  0023               	movlb	3	; select bank3
 12212  1A07  00EB               	movwf	(_scaleA100kPot$2846+1)^(0+384)
 12213  1A08  0021               	movlb	1	; select bank1
 12214  1A09  0850               	movf	(?___ftdiv+2)^(0+128),w
 12215  1A0A  0023               	movlb	3	; select bank3
 12216  1A0B  00EC               	movwf	(_scaleA100kPot$2846+2)^(0+384)
 12217                           
 12218                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12219  1A0C  3056               	movlw	86
 12220  1A0D  0022               	movlb	2	; select bank2
 12221  1A0E  00D8               	movwf	pow@y^(0+256)
 12222  1A0F  308E               	movlw	142
 12223  1A10  00D9               	movwf	(pow@y+1)^(0+256)
 12224  1A11  30BF               	movlw	191
 12225  1A12  00DA               	movwf	(pow@y+2)^(0+256)
 12226  1A13  0023               	movlb	3	; select bank3
 12227  1A14  086A               	movf	_scaleA100kPot$2846^(0+384),w
 12228  1A15  0022               	movlb	2	; select bank2
 12229  1A16  00D5               	movwf	pow@x^(0+256)
 12230  1A17  0023               	movlb	3	; select bank3
 12231  1A18  086B               	movf	(_scaleA100kPot$2846+1)^(0+384),w
 12232  1A19  0022               	movlb	2	; select bank2
 12233  1A1A  00D6               	movwf	(pow@x+1)^(0+256)
 12234  1A1B  0023               	movlb	3	; select bank3
 12235  1A1C  086C               	movf	(_scaleA100kPot$2846+2)^(0+384),w
 12236  1A1D  0022               	movlb	2	; select bank2
 12237  1A1E  00D7               	movwf	(pow@x+2)^(0+256)
 12238  1A1F  3191  2127  3199   	fcall	_pow
 12239  1A22  0022               	movlb	2	; select bank2
 12240  1A23  0855               	movf	?_pow^(0+256),w
 12241  1A24  0023               	movlb	3	; select bank3
 12242  1A25  00ED               	movwf	_scaleA100kPot$2847^(0+384)
 12243  1A26  0022               	movlb	2	; select bank2
 12244  1A27  0856               	movf	(?_pow+1)^(0+256),w
 12245  1A28  0023               	movlb	3	; select bank3
 12246  1A29  00EE               	movwf	(_scaleA100kPot$2847+1)^(0+384)
 12247  1A2A  0022               	movlb	2	; select bank2
 12248  1A2B  0857               	movf	(?_pow+2)^(0+256),w
 12249  1A2C  0023               	movlb	3	; select bank3
 12250  1A2D  00EF               	movwf	(_scaleA100kPot$2847+2)^(0+384)
 12251                           
 12252                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12253  1A2E  309F               	movlw	159
 12254  1A2F  0021               	movlb	1	; select bank1
 12255  1A30  00AE               	movwf	___ftmul@f1^(0+128)
 12256  1A31  3068               	movlw	104
 12257  1A32  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12258  1A33  3040               	movlw	64
 12259  1A34  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12260  1A35  0023               	movlb	3	; select bank3
 12261  1A36  086D               	movf	_scaleA100kPot$2847^(0+384),w
 12262  1A37  0021               	movlb	1	; select bank1
 12263  1A38  00B1               	movwf	___ftmul@f2^(0+128)
 12264  1A39  0023               	movlb	3	; select bank3
 12265  1A3A  086E               	movf	(_scaleA100kPot$2847+1)^(0+384),w
 12266  1A3B  0021               	movlb	1	; select bank1
 12267  1A3C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12268  1A3D  0023               	movlb	3	; select bank3
 12269  1A3E  086F               	movf	(_scaleA100kPot$2847+2)^(0+384),w
 12270  1A3F  0021               	movlb	1	; select bank1
 12271  1A40  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12272  1A41  3187  273B  3199   	fcall	___ftmul
 12273  1A44  0021               	movlb	1	; select bank1
 12274  1A45  082E               	movf	?___ftmul^(0+128),w
 12275  1A46  0023               	movlb	3	; select bank3
 12276  1A47  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 12277  1A48  0021               	movlb	1	; select bank1
 12278  1A49  082F               	movf	(?___ftmul+1)^(0+128),w
 12279  1A4A  0023               	movlb	3	; select bank3
 12280  1A4B  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12281  1A4C  0021               	movlb	1	; select bank1
 12282  1A4D  0830               	movf	(?___ftmul+2)^(0+128),w
 12283  1A4E  0023               	movlb	3	; select bank3
 12284  1A4F  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12285                           
 12286                           ;user.c: 192: return (int)(pwm);
 12287  1A50  0867               	movf	scaleA100kPot@pwm^(0+384),w
 12288  1A51  0022               	movlb	2	; select bank2
 12289  1A52  00A0               	movwf	___fttol@f1^(0+256)
 12290  1A53  0023               	movlb	3	; select bank3
 12291  1A54  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12292  1A55  0022               	movlb	2	; select bank2
 12293  1A56  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12294  1A57  0023               	movlb	3	; select bank3
 12295  1A58  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12296  1A59  0022               	movlb	2	; select bank2
 12297  1A5A  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12298  1A5B  319A  2263         	fcall	___fttol
 12299  1A5D  0022               	movlb	2	; select bank2
 12300  1A5E  0821               	movf	(?___fttol^(0+256)+1),w
 12301  1A5F  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12302  1A60  0820               	movf	?___fttol^(0+256),w
 12303  1A61  00E7               	movwf	?_scaleA100kPot^(0+256)
 12304  1A62  0008               	return
 12305  1A63                     __end_of_scaleA100kPot:	
 12306                           
 12307                           	psect	text27
 12308  1127                     __ptext27:	
 12309 ;; *************** function _pow *****************
 12310 ;; Defined at:
 12311 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12312 ;; Parameters:    Size  Location     Type
 12313 ;;  x               3   53[BANK2 ] int 
 12314 ;;  y               3   56[BANK2 ] int 
 12315 ;; Auto vars:     Size  Location     Type
 12316 ;;  yi              4   67[BANK2 ] unsigned long 
 12317 ;;  sign            1   66[BANK2 ] unsigned char 
 12318 ;; Return value:  Size  Location     Type
 12319 ;;                  3   53[BANK2 ] unsigned char 
 12320 ;; Registers used:
 12321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12322 ;; Tracked objects:
 12323 ;;		On entry : 0/0
 12324 ;;		On exit  : 0/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12327 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12328 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12329 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12330 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12331 ;;Total ram usage:       18 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; Hardware stack levels required when called:    7
 12334 ;; This function calls:
 12335 ;;		___ftge
 12336 ;;		___ftmul
 12337 ;;		___ftneg
 12338 ;;		___fttol
 12339 ;;		___lltoft
 12340 ;;		_exp
 12341 ;;		_log
 12342 ;; This function is called by:
 12343 ;;		_scaleA100kPot
 12344 ;;		_scaleA10kPot
 12345 ;;		_scaleiA10kPot
 12346 ;;		_scaleiA100kPot
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           
 12351                           ;psect for function _pow
 12352  1127                     _pow:	
 12353                           
 12354                           ;incstack = 0
 12355                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12356  1127  0022               	movlb	2	; select bank2
 12357  1128  01E2               	clrf	pow@sign^(0+256)
 12358  1129  0857               	movf	(pow@x+2)^(0+256),w
 12359  112A  0456               	iorwf	(pow@x+1)^(0+256),w
 12360  112B  0455               	iorwf	pow@x^(0+256),w
 12361  112C  1D03               	skipz
 12362  112D  2953               	goto	l8428
 12363  112E  3000               	movlw	0
 12364  112F  0021               	movlb	1	; select bank1
 12365  1130  00A0               	movwf	___ftge@ff1^(0+128)
 12366  1131  3000               	movlw	0
 12367  1132  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12368  1133  3000               	movlw	0
 12369  1134  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12370  1135  0022               	movlb	2	; select bank2
 12371  1136  0858               	movf	pow@y^(0+256),w
 12372  1137  0021               	movlb	1	; select bank1
 12373  1138  00A3               	movwf	___ftge@ff2^(0+128)
 12374  1139  0022               	movlb	2	; select bank2
 12375  113A  0859               	movf	(pow@y+1)^(0+256),w
 12376  113B  0021               	movlb	1	; select bank1
 12377  113C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12378  113D  0022               	movlb	2	; select bank2
 12379  113E  085A               	movf	(pow@y+2)^(0+256),w
 12380  113F  0021               	movlb	1	; select bank1
 12381  1140  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12382  1141  31A1  2184  3191   	fcall	___ftge
 12383  1144  1C03               	btfss	3,0
 12384  1145  294B               	goto	l2330
 12385  1146  3021               	movlw	33
 12386  1147  0024               	movlb	4	; select bank4
 12387  1148  00CD               	movwf	_errno^(0+512)
 12388  1149  3000               	movlw	0
 12389  114A  00CE               	movwf	(_errno^(0+512)+1)
 12390  114B                     l2330:	
 12391  114B  3000               	movlw	0
 12392  114C  0022               	movlb	2	; select bank2
 12393  114D  00D5               	movwf	?_pow^(0+256)
 12394  114E  3000               	movlw	0
 12395  114F  00D6               	movwf	(?_pow+1)^(0+256)
 12396  1150  3000               	movlw	0
 12397  1151  00D7               	movwf	(?_pow+2)^(0+256)
 12398  1152  0008               	return
 12399  1153                     l8428:	
 12400  1153  085A               	movf	(pow@y+2)^(0+256),w
 12401  1154  0459               	iorwf	(pow@y+1)^(0+256),w
 12402  1155  0458               	iorwf	pow@y^(0+256),w
 12403  1156  1D03               	skipz
 12404  1157  295F               	goto	l8434
 12405  1158  3000               	movlw	0
 12406  1159  00D5               	movwf	?_pow^(0+256)
 12407  115A  3080               	movlw	128
 12408  115B  00D6               	movwf	(?_pow+1)^(0+256)
 12409  115C  303F               	movlw	63
 12410  115D  00D7               	movwf	(?_pow+2)^(0+256)
 12411  115E  0008               	return
 12412  115F                     l8434:	
 12413  115F  0855               	movf	pow@x^(0+256),w
 12414  1160  0021               	movlb	1	; select bank1
 12415  1161  00A0               	movwf	___ftge@ff1^(0+128)
 12416  1162  0022               	movlb	2	; select bank2
 12417  1163  0856               	movf	(pow@x+1)^(0+256),w
 12418  1164  0021               	movlb	1	; select bank1
 12419  1165  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12420  1166  0022               	movlb	2	; select bank2
 12421  1167  0857               	movf	(pow@x+2)^(0+256),w
 12422  1168  0021               	movlb	1	; select bank1
 12423  1169  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12424  116A  3000               	movlw	0
 12425  116B  00A3               	movwf	___ftge@ff2^(0+128)
 12426  116C  3000               	movlw	0
 12427  116D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12428  116E  3000               	movlw	0
 12429  116F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12430  1170  31A1  2184  3191   	fcall	___ftge
 12431  1173  1803               	btfsc	3,0
 12432  1174  29D9               	goto	l8446
 12433  1175  0022               	movlb	2	; select bank2
 12434  1176  0858               	movf	pow@y^(0+256),w
 12435  1177  00A0               	movwf	___fttol@f1^(0+256)
 12436  1178  0859               	movf	(pow@y+1)^(0+256),w
 12437  1179  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12438  117A  085A               	movf	(pow@y+2)^(0+256),w
 12439  117B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12440  117C  319A  2263  3191   	fcall	___fttol
 12441  117F  0022               	movlb	2	; select bank2
 12442  1180  0823               	movf	(?___fttol+3)^(0+256),w
 12443  1181  00E6               	movwf	(pow@yi+3)^(0+256)
 12444  1182  0822               	movf	(?___fttol+2)^(0+256),w
 12445  1183  00E5               	movwf	(pow@yi+2)^(0+256)
 12446  1184  0821               	movf	(?___fttol+1)^(0+256),w
 12447  1185  00E4               	movwf	(pow@yi+1)^(0+256)
 12448  1186  0820               	movf	?___fttol^(0+256),w
 12449  1187  00E3               	movwf	pow@yi^(0+256)
 12450  1188  0866               	movf	(pow@yi+3)^(0+256),w
 12451  1189  0021               	movlb	1	; select bank1
 12452  118A  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12453  118B  0022               	movlb	2	; select bank2
 12454  118C  0865               	movf	(pow@yi+2)^(0+256),w
 12455  118D  0021               	movlb	1	; select bank1
 12456  118E  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12457  118F  0022               	movlb	2	; select bank2
 12458  1190  0864               	movf	(pow@yi+1)^(0+256),w
 12459  1191  0021               	movlb	1	; select bank1
 12460  1192  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12461  1193  0022               	movlb	2	; select bank2
 12462  1194  0863               	movf	pow@yi^(0+256),w
 12463  1195  0021               	movlb	1	; select bank1
 12464  1196  00A8               	movwf	___lltoft@c^(0+128)
 12465  1197  31AF  274D  3191   	fcall	___lltoft
 12466  119A  0022               	movlb	2	; select bank2
 12467  119B  085A               	movf	(pow@y+2)^(0+256),w
 12468  119C  0021               	movlb	1	; select bank1
 12469  119D  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12470  119E  1D03               	skipz
 12471  119F  29AA               	goto	u8905
 12472  11A0  0022               	movlb	2	; select bank2
 12473  11A1  0859               	movf	(pow@y+1)^(0+256),w
 12474  11A2  0021               	movlb	1	; select bank1
 12475  11A3  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12476  11A4  1D03               	skipz
 12477  11A5  29AA               	goto	u8905
 12478  11A6  0022               	movlb	2	; select bank2
 12479  11A7  0858               	movf	pow@y^(0+256),w
 12480  11A8  0021               	movlb	1	; select bank1
 12481  11A9  0628               	xorwf	?___lltoft^(0+128),w
 12482  11AA                     u8905:	
 12483  11AA  1903               	skipnz
 12484  11AB  29B9               	goto	l8442
 12485  11AC  3021               	movlw	33
 12486  11AD  0024               	movlb	4	; select bank4
 12487  11AE  00CD               	movwf	_errno^(0+512)
 12488  11AF  3000               	movlw	0
 12489  11B0  00CE               	movwf	(_errno^(0+512)+1)
 12490  11B1  3000               	movlw	0
 12491  11B2  0022               	movlb	2	; select bank2
 12492  11B3  00D5               	movwf	?_pow^(0+256)
 12493  11B4  3000               	movlw	0
 12494  11B5  00D6               	movwf	(?_pow+1)^(0+256)
 12495  11B6  3000               	movlw	0
 12496  11B7  00D7               	movwf	(?_pow+2)^(0+256)
 12497  11B8  0008               	return
 12498  11B9                     l8442:	
 12499  11B9  0022               	movlb	2	; select bank2
 12500  11BA  0863               	movf	pow@yi^(0+256),w
 12501  11BB  3901               	andlw	1
 12502  11BC  00DB               	movwf	??_pow^(0+256)
 12503  11BD  085B               	movf	??_pow^(0+256),w
 12504  11BE  00E2               	movwf	pow@sign^(0+256)
 12505  11BF  0855               	movf	pow@x^(0+256),w
 12506  11C0  0021               	movlb	1	; select bank1
 12507  11C1  00BE               	movwf	___ftneg@f1^(0+128)
 12508  11C2  0022               	movlb	2	; select bank2
 12509  11C3  0856               	movf	(pow@x+1)^(0+256),w
 12510  11C4  0021               	movlb	1	; select bank1
 12511  11C5  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12512  11C6  0022               	movlb	2	; select bank2
 12513  11C7  0857               	movf	(pow@x+2)^(0+256),w
 12514  11C8  0021               	movlb	1	; select bank1
 12515  11C9  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12516  11CA  31AD  25B0  3191   	fcall	___ftneg
 12517  11CD  0021               	movlb	1	; select bank1
 12518  11CE  083E               	movf	?___ftneg^(0+128),w
 12519  11CF  0022               	movlb	2	; select bank2
 12520  11D0  00D5               	movwf	pow@x^(0+256)
 12521  11D1  0021               	movlb	1	; select bank1
 12522  11D2  083F               	movf	(?___ftneg+1)^(0+128),w
 12523  11D3  0022               	movlb	2	; select bank2
 12524  11D4  00D6               	movwf	(pow@x+1)^(0+256)
 12525  11D5  0021               	movlb	1	; select bank1
 12526  11D6  0840               	movf	(?___ftneg+2)^(0+128),w
 12527  11D7  0022               	movlb	2	; select bank2
 12528  11D8  00D7               	movwf	(pow@x+2)^(0+256)
 12529  11D9                     l8446:	
 12530  11D9  0022               	movlb	2	; select bank2
 12531  11DA  0855               	movf	pow@x^(0+256),w
 12532  11DB  00BE               	movwf	log@x^(0+256)
 12533  11DC  0856               	movf	(pow@x+1)^(0+256),w
 12534  11DD  00BF               	movwf	(log@x+1)^(0+256)
 12535  11DE  0857               	movf	(pow@x+2)^(0+256),w
 12536  11DF  00C0               	movwf	(log@x+2)^(0+256)
 12537  11E0  319F  272F  3191   	fcall	_log
 12538  11E3  0022               	movlb	2	; select bank2
 12539  11E4  083E               	movf	?_log^(0+256),w
 12540  11E5  00DC               	movwf	_pow$2859^(0+256)
 12541  11E6  083F               	movf	(?_log+1)^(0+256),w
 12542  11E7  00DD               	movwf	(_pow$2859+1)^(0+256)
 12543  11E8  0840               	movf	(?_log+2)^(0+256),w
 12544  11E9  00DE               	movwf	(_pow$2859+2)^(0+256)
 12545  11EA  0858               	movf	pow@y^(0+256),w
 12546  11EB  0021               	movlb	1	; select bank1
 12547  11EC  00AE               	movwf	___ftmul@f1^(0+128)
 12548  11ED  0022               	movlb	2	; select bank2
 12549  11EE  0859               	movf	(pow@y+1)^(0+256),w
 12550  11EF  0021               	movlb	1	; select bank1
 12551  11F0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12552  11F1  0022               	movlb	2	; select bank2
 12553  11F2  085A               	movf	(pow@y+2)^(0+256),w
 12554  11F3  0021               	movlb	1	; select bank1
 12555  11F4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12556  11F5  0022               	movlb	2	; select bank2
 12557  11F6  085C               	movf	_pow$2859^(0+256),w
 12558  11F7  0021               	movlb	1	; select bank1
 12559  11F8  00B1               	movwf	___ftmul@f2^(0+128)
 12560  11F9  0022               	movlb	2	; select bank2
 12561  11FA  085D               	movf	(_pow$2859+1)^(0+256),w
 12562  11FB  0021               	movlb	1	; select bank1
 12563  11FC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12564  11FD  0022               	movlb	2	; select bank2
 12565  11FE  085E               	movf	(_pow$2859+2)^(0+256),w
 12566  11FF  0021               	movlb	1	; select bank1
 12567  1200  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12568  1201  3187  273B  3191   	fcall	___ftmul
 12569  1204  0021               	movlb	1	; select bank1
 12570  1205  082E               	movf	?___ftmul^(0+128),w
 12571  1206  0022               	movlb	2	; select bank2
 12572  1207  00DF               	movwf	_pow$2860^(0+256)
 12573  1208  0021               	movlb	1	; select bank1
 12574  1209  082F               	movf	(?___ftmul+1)^(0+128),w
 12575  120A  0022               	movlb	2	; select bank2
 12576  120B  00E0               	movwf	(_pow$2860+1)^(0+256)
 12577  120C  0021               	movlb	1	; select bank1
 12578  120D  0830               	movf	(?___ftmul+2)^(0+128),w
 12579  120E  0022               	movlb	2	; select bank2
 12580  120F  00E1               	movwf	(_pow$2860+2)^(0+256)
 12581  1210  085F               	movf	_pow$2860^(0+256),w
 12582  1211  00C8               	movwf	exp@x^(0+256)
 12583  1212  0860               	movf	(_pow$2860+1)^(0+256),w
 12584  1213  00C9               	movwf	(exp@x+1)^(0+256)
 12585  1214  0861               	movf	(_pow$2860+2)^(0+256),w
 12586  1215  00CA               	movwf	(exp@x+2)^(0+256)
 12587  1216  3193  2363  3191   	fcall	_exp
 12588  1219  0022               	movlb	2	; select bank2
 12589  121A  0848               	movf	?_exp^(0+256),w
 12590  121B  00D5               	movwf	pow@x^(0+256)
 12591  121C  0849               	movf	(?_exp+1)^(0+256),w
 12592  121D  00D6               	movwf	(pow@x+1)^(0+256)
 12593  121E  084A               	movf	(?_exp+2)^(0+256),w
 12594  121F  00D7               	movwf	(pow@x+2)^(0+256)
 12595  1220  0862               	movf	pow@sign^(0+256),w
 12596  1221  1903               	btfsc	3,2
 12597  1222  0008               	return
 12598  1223  0855               	movf	pow@x^(0+256),w
 12599  1224  0021               	movlb	1	; select bank1
 12600  1225  00BE               	movwf	___ftneg@f1^(0+128)
 12601  1226  0022               	movlb	2	; select bank2
 12602  1227  0856               	movf	(pow@x+1)^(0+256),w
 12603  1228  0021               	movlb	1	; select bank1
 12604  1229  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12605  122A  0022               	movlb	2	; select bank2
 12606  122B  0857               	movf	(pow@x+2)^(0+256),w
 12607  122C  0021               	movlb	1	; select bank1
 12608  122D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12609  122E  31AD  25B0         	fcall	___ftneg
 12610  1230  0021               	movlb	1	; select bank1
 12611  1231  083E               	movf	?___ftneg^(0+128),w
 12612  1232  0022               	movlb	2	; select bank2
 12613  1233  00D5               	movwf	?_pow^(0+256)
 12614  1234  0021               	movlb	1	; select bank1
 12615  1235  083F               	movf	(?___ftneg+1)^(0+128),w
 12616  1236  0022               	movlb	2	; select bank2
 12617  1237  00D6               	movwf	(?_pow+1)^(0+256)
 12618  1238  0021               	movlb	1	; select bank1
 12619  1239  0840               	movf	(?___ftneg+2)^(0+128),w
 12620  123A  0022               	movlb	2	; select bank2
 12621  123B  00D7               	movwf	(?_pow+2)^(0+256)
 12622  123C  0008               	return
 12623  123D                     __end_of_pow:	
 12624                           
 12625                           	psect	text28
 12626  1F2F                     __ptext28:	
 12627 ;; *************** function _log *****************
 12628 ;; Defined at:
 12629 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;  x               3   30[BANK2 ] unsigned char 
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  exponent        2   34[BANK2 ] int 
 12634 ;; Return value:  Size  Location     Type
 12635 ;;                  3   30[BANK2 ] int 
 12636 ;; Registers used:
 12637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12643 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12644 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12645 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12646 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12647 ;;Total ram usage:        6 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; Hardware stack levels required when called:    6
 12650 ;; This function calls:
 12651 ;;		___awtoft
 12652 ;;		___ftadd
 12653 ;;		___ftge
 12654 ;;		___ftmul
 12655 ;;		_eval_poly
 12656 ;;		_frexp
 12657 ;; This function is called by:
 12658 ;;		_pow
 12659 ;; This function uses a non-reentrant model
 12660 ;;
 12661                           
 12662                           
 12663                           ;psect for function _log
 12664  1F2F                     _log:	
 12665                           
 12666                           ;incstack = 0
 12667                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12668  1F2F  0022               	movlb	2	; select bank2
 12669  1F30  083E               	movf	log@x^(0+256),w
 12670  1F31  0021               	movlb	1	; select bank1
 12671  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12672  1F33  0022               	movlb	2	; select bank2
 12673  1F34  083F               	movf	(log@x+1)^(0+256),w
 12674  1F35  0021               	movlb	1	; select bank1
 12675  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12676  1F37  0022               	movlb	2	; select bank2
 12677  1F38  0840               	movf	(log@x+2)^(0+256),w
 12678  1F39  0021               	movlb	1	; select bank1
 12679  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12680  1F3B  3000               	movlw	0
 12681  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12682  1F3D  3000               	movlw	0
 12683  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12684  1F3F  3000               	movlw	0
 12685  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12686  1F41  31A1  2184  319F   	fcall	___ftge
 12687  1F44  1803               	btfsc	3,0
 12688  1F45  2F53               	goto	l8300
 12689  1F46  3021               	movlw	33
 12690  1F47  0024               	movlb	4	; select bank4
 12691  1F48  00CD               	movwf	_errno^(0+512)
 12692  1F49  3000               	movlw	0
 12693  1F4A  00CE               	movwf	(_errno^(0+512)+1)
 12694  1F4B  3000               	movlw	0
 12695  1F4C  0022               	movlb	2	; select bank2
 12696  1F4D  00BE               	movwf	?_log^(0+256)
 12697  1F4E  3000               	movlw	0
 12698  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12699  1F50  3000               	movlw	0
 12700  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12701  1F52  0008               	return
 12702  1F53                     l8300:	
 12703  1F53  0022               	movlb	2	; select bank2
 12704  1F54  0840               	movf	(log@x+2)^(0+256),w
 12705  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12706  1F56  043E               	iorwf	log@x^(0+256),w
 12707  1F57  1D03               	skipz
 12708  1F58  2F66               	goto	l8306
 12709  1F59  3022               	movlw	34
 12710  1F5A  0024               	movlb	4	; select bank4
 12711  1F5B  00CD               	movwf	_errno^(0+512)
 12712  1F5C  3000               	movlw	0
 12713  1F5D  00CE               	movwf	(_errno^(0+512)+1)
 12714  1F5E  3000               	movlw	0
 12715  1F5F  0022               	movlb	2	; select bank2
 12716  1F60  00BE               	movwf	?_log^(0+256)
 12717  1F61  3000               	movlw	0
 12718  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12719  1F63  3000               	movlw	0
 12720  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12721  1F65  0008               	return
 12722  1F66                     l8306:	
 12723  1F66  3000               	movlw	0
 12724  1F67  0021               	movlb	1	; select bank1
 12725  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12726  1F69  3080               	movlw	128
 12727  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12728  1F6B  30BF               	movlw	191
 12729  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12730  1F6D  3000               	movlw	0
 12731  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12732  1F6F  3000               	movlw	0
 12733  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12734  1F71  3040               	movlw	64
 12735  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12736  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12737  1F74  0022               	movlb	2	; select bank2
 12738  1F75  00C1               	movwf	??_log^(0+256)
 12739  1F76  0841               	movf	??_log^(0+256),w
 12740  1F77  0021               	movlb	1	; select bank1
 12741  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12742  1F79  0022               	movlb	2	; select bank2
 12743  1F7A  083E               	movf	log@x^(0+256),w
 12744  1F7B  0021               	movlb	1	; select bank1
 12745  1F7C  00A0               	movwf	frexp@value^(0+128)
 12746  1F7D  0022               	movlb	2	; select bank2
 12747  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12748  1F7F  0021               	movlb	1	; select bank1
 12749  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12750  1F81  0022               	movlb	2	; select bank2
 12751  1F82  0840               	movf	(log@x+2)^(0+256),w
 12752  1F83  0021               	movlb	1	; select bank1
 12753  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12754  1F85  31A2  2277  319F   	fcall	_frexp
 12755  1F88  0021               	movlb	1	; select bank1
 12756  1F89  0820               	movf	?_frexp^(0+128),w
 12757  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12758  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12759  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12760  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12761  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12762  1F8F  3187  273B  319F   	fcall	___ftmul
 12763  1F92  0021               	movlb	1	; select bank1
 12764  1F93  082E               	movf	?___ftmul^(0+128),w
 12765  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12766  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12767  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12768  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12769  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12770  1F99  3190  2031  319F   	fcall	___ftadd
 12771  1F9C  0021               	movlb	1	; select bank1
 12772  1F9D  0841               	movf	?___ftadd^(0+128),w
 12773  1F9E  0022               	movlb	2	; select bank2
 12774  1F9F  00BE               	movwf	log@x^(0+256)
 12775  1FA0  0021               	movlb	1	; select bank1
 12776  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12777  1FA2  0022               	movlb	2	; select bank2
 12778  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12779  1FA4  0021               	movlb	1	; select bank1
 12780  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12781  1FA6  0022               	movlb	2	; select bank2
 12782  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12783  1FA8  30FF               	movlw	255
 12784  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12785  1FAA  30FF               	movlw	255
 12786  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12787  1FAC  083E               	movf	log@x^(0+256),w
 12788  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12789  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12790  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12791  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12792  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12793  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12794  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12795  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12796  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12797  1FB6  3008               	movlw	8
 12798  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12799  1FB8  3000               	movlw	0
 12800  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12801  1FBA  31A6  269C  319F   	fcall	_eval_poly
 12802  1FBD  0022               	movlb	2	; select bank2
 12803  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12804  1FBF  00BE               	movwf	log@x^(0+256)
 12805  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 12806  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 12807  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 12808  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 12809  1FC4  083E               	movf	log@x^(0+256),w
 12810  1FC5  0021               	movlb	1	; select bank1
 12811  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 12812  1FC7  0022               	movlb	2	; select bank2
 12813  1FC8  083F               	movf	(log@x+1)^(0+256),w
 12814  1FC9  0021               	movlb	1	; select bank1
 12815  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12816  1FCB  0022               	movlb	2	; select bank2
 12817  1FCC  0840               	movf	(log@x+2)^(0+256),w
 12818  1FCD  0021               	movlb	1	; select bank1
 12819  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12820  1FCF  3072               	movlw	114
 12821  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 12822  1FD1  3031               	movlw	49
 12823  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12824  1FD3  303F               	movlw	63
 12825  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12826  1FD5  0022               	movlb	2	; select bank2
 12827  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 12828  1FD7  0021               	movlb	1	; select bank1
 12829  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12830  1FD9  0022               	movlb	2	; select bank2
 12831  1FDA  0842               	movf	log@exponent^(0+256),w
 12832  1FDB  0021               	movlb	1	; select bank1
 12833  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 12834  1FDD  31AE  26E2  319F   	fcall	___awtoft
 12835  1FE0  0021               	movlb	1	; select bank1
 12836  1FE1  0828               	movf	?___awtoft^(0+128),w
 12837  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 12838  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 12839  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12840  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 12841  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12842  1FE7  3187  273B  319F   	fcall	___ftmul
 12843  1FEA  0021               	movlb	1	; select bank1
 12844  1FEB  082E               	movf	?___ftmul^(0+128),w
 12845  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 12846  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 12847  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12848  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 12849  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12850  1FF1  3190  2031         	fcall	___ftadd
 12851  1FF3  0021               	movlb	1	; select bank1
 12852  1FF4  0841               	movf	?___ftadd^(0+128),w
 12853  1FF5  0022               	movlb	2	; select bank2
 12854  1FF6  00BE               	movwf	?_log^(0+256)
 12855  1FF7  0021               	movlb	1	; select bank1
 12856  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 12857  1FF9  0022               	movlb	2	; select bank2
 12858  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 12859  1FFB  0021               	movlb	1	; select bank1
 12860  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 12861  1FFD  0022               	movlb	2	; select bank2
 12862  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 12863  1FFF  0008               	return
 12864  2000                     __end_of_log:	
 12865                           
 12866                           	psect	text29
 12867  1363                     __ptext29:	
 12868 ;; *************** function _exp *****************
 12869 ;; Defined at:
 12870 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 12871 ;; Parameters:    Size  Location     Type
 12872 ;;  x               3   40[BANK2 ] int 
 12873 ;; Auto vars:     Size  Location     Type
 12874 ;;  exponent        2   50[BANK2 ] int 
 12875 ;;  sign            1   52[BANK2 ] unsigned char 
 12876 ;; Return value:  Size  Location     Type
 12877 ;;                  3   40[BANK2 ] unsigned char 
 12878 ;; Registers used:
 12879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12880 ;; Tracked objects:
 12881 ;;		On entry : 0/0
 12882 ;;		On exit  : 0/0
 12883 ;;		Unchanged: 0/0
 12884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12885 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12886 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12887 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12888 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12889 ;;Total ram usage:       13 bytes
 12890 ;; Hardware stack levels used:    1
 12891 ;; Hardware stack levels required when called:    6
 12892 ;; This function calls:
 12893 ;;		___awtoft
 12894 ;;		___ftdiv
 12895 ;;		___ftge
 12896 ;;		___ftmul
 12897 ;;		___ftneg
 12898 ;;		___ftsub
 12899 ;;		___fttol
 12900 ;;		_eval_poly
 12901 ;;		_floor
 12902 ;;		_ldexp
 12903 ;; This function is called by:
 12904 ;;		_pow
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           
 12909                           ;psect for function _exp
 12910  1363                     _exp:	
 12911                           
 12912                           ;incstack = 0
 12913                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12914  1363  0022               	movlb	2	; select bank2
 12915  1364  084A               	movf	(exp@x+2)^(0+256),w
 12916  1365  0449               	iorwf	(exp@x+1)^(0+256),w
 12917  1366  0448               	iorwf	exp@x^(0+256),w
 12918  1367  1D03               	skipz
 12919  1368  2B70               	goto	l8322
 12920  1369  3000               	movlw	0
 12921  136A  00C8               	movwf	?_exp^(0+256)
 12922  136B  3080               	movlw	128
 12923  136C  00C9               	movwf	(?_exp+1)^(0+256)
 12924  136D  303F               	movlw	63
 12925  136E  00CA               	movwf	(?_exp+2)^(0+256)
 12926  136F  0008               	return
 12927  1370                     l8322:	
 12928  1370  3072               	movlw	114
 12929  1371  0021               	movlb	1	; select bank1
 12930  1372  00A0               	movwf	___ftge@ff1^(0+128)
 12931  1373  3031               	movlw	49
 12932  1374  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12933  1375  3044               	movlw	68
 12934  1376  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12935  1377  0022               	movlb	2	; select bank2
 12936  1378  0848               	movf	exp@x^(0+256),w
 12937  1379  0021               	movlb	1	; select bank1
 12938  137A  00A3               	movwf	___ftge@ff2^(0+128)
 12939  137B  0022               	movlb	2	; select bank2
 12940  137C  0849               	movf	(exp@x+1)^(0+256),w
 12941  137D  0021               	movlb	1	; select bank1
 12942  137E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12943  137F  0022               	movlb	2	; select bank2
 12944  1380  084A               	movf	(exp@x+2)^(0+256),w
 12945  1381  0021               	movlb	1	; select bank1
 12946  1382  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12947  1383  31A1  2184  3193   	fcall	___ftge
 12948  1386  1803               	btfsc	3,0
 12949  1387  2B95               	goto	l8332
 12950  1388  3022               	movlw	34
 12951  1389  0024               	movlb	4	; select bank4
 12952  138A  00CD               	movwf	_errno^(0+512)
 12953  138B  3000               	movlw	0
 12954  138C  00CE               	movwf	(_errno^(0+512)+1)
 12955  138D  30FF               	movlw	255
 12956  138E  0022               	movlb	2	; select bank2
 12957  138F  00C8               	movwf	?_exp^(0+256)
 12958  1390  307F               	movlw	127
 12959  1391  00C9               	movwf	(?_exp+1)^(0+256)
 12960  1392  307F               	movlw	127
 12961  1393  00CA               	movwf	(?_exp+2)^(0+256)
 12962  1394  0008               	return
 12963  1395                     l8332:	
 12964  1395  0022               	movlb	2	; select bank2
 12965  1396  0848               	movf	exp@x^(0+256),w
 12966  1397  0021               	movlb	1	; select bank1
 12967  1398  00A0               	movwf	___ftge@ff1^(0+128)
 12968  1399  0022               	movlb	2	; select bank2
 12969  139A  0849               	movf	(exp@x+1)^(0+256),w
 12970  139B  0021               	movlb	1	; select bank1
 12971  139C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12972  139D  0022               	movlb	2	; select bank2
 12973  139E  084A               	movf	(exp@x+2)^(0+256),w
 12974  139F  0021               	movlb	1	; select bank1
 12975  13A0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12976  13A1  3049               	movlw	73
 12977  13A2  00A3               	movwf	___ftge@ff2^(0+128)
 12978  13A3  303A               	movlw	58
 12979  13A4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12980  13A5  30C4               	movlw	196
 12981  13A6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12982  13A7  31A1  2184  3193   	fcall	___ftge
 12983  13AA  1803               	btfsc	3,0
 12984  13AB  2BB9               	goto	l8338
 12985  13AC  3022               	movlw	34
 12986  13AD  0024               	movlb	4	; select bank4
 12987  13AE  00CD               	movwf	_errno^(0+512)
 12988  13AF  3000               	movlw	0
 12989  13B0  00CE               	movwf	(_errno^(0+512)+1)
 12990  13B1  3000               	movlw	0
 12991  13B2  0022               	movlb	2	; select bank2
 12992  13B3  00C8               	movwf	?_exp^(0+256)
 12993  13B4  3000               	movlw	0
 12994  13B5  00C9               	movwf	(?_exp+1)^(0+256)
 12995  13B6  3000               	movlw	0
 12996  13B7  00CA               	movwf	(?_exp+2)^(0+256)
 12997  13B8  0008               	return
 12998  13B9                     l8338:	
 12999  13B9  0022               	movlb	2	; select bank2
 13000  13BA  0848               	movf	exp@x^(0+256),w
 13001  13BB  0021               	movlb	1	; select bank1
 13002  13BC  00A0               	movwf	___ftge@ff1^(0+128)
 13003  13BD  0022               	movlb	2	; select bank2
 13004  13BE  0849               	movf	(exp@x+1)^(0+256),w
 13005  13BF  0021               	movlb	1	; select bank1
 13006  13C0  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13007  13C1  0022               	movlb	2	; select bank2
 13008  13C2  084A               	movf	(exp@x+2)^(0+256),w
 13009  13C3  0021               	movlb	1	; select bank1
 13010  13C4  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13011  13C5  3000               	movlw	0
 13012  13C6  00A3               	movwf	___ftge@ff2^(0+128)
 13013  13C7  3000               	movlw	0
 13014  13C8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13015  13C9  3000               	movlw	0
 13016  13CA  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13017  13CB  31A1  2184  3193   	fcall	___ftge
 13018  13CE  1803               	btfsc	3,0
 13019  13CF  2BD2               	goto	u8790
 13020  13D0  3001               	movlw	1
 13021  13D1  2BD3               	goto	u8800
 13022  13D2                     u8790:	
 13023  13D2  3000               	movlw	0
 13024  13D3                     u8800:	
 13025  13D3  0022               	movlb	2	; select bank2
 13026  13D4  00CB               	movwf	??_exp^(0+256)
 13027  13D5  084B               	movf	??_exp^(0+256),w
 13028  13D6  00D4               	movwf	exp@sign^(0+256)
 13029  13D7  0854               	movf	exp@sign^(0+256),w
 13030  13D8  1903               	btfsc	3,2
 13031  13D9  2BF4               	goto	l8344
 13032  13DA  0848               	movf	exp@x^(0+256),w
 13033  13DB  0021               	movlb	1	; select bank1
 13034  13DC  00BE               	movwf	___ftneg@f1^(0+128)
 13035  13DD  0022               	movlb	2	; select bank2
 13036  13DE  0849               	movf	(exp@x+1)^(0+256),w
 13037  13DF  0021               	movlb	1	; select bank1
 13038  13E0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13039  13E1  0022               	movlb	2	; select bank2
 13040  13E2  084A               	movf	(exp@x+2)^(0+256),w
 13041  13E3  0021               	movlb	1	; select bank1
 13042  13E4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13043  13E5  31AD  25B0  3193   	fcall	___ftneg
 13044  13E8  0021               	movlb	1	; select bank1
 13045  13E9  083E               	movf	?___ftneg^(0+128),w
 13046  13EA  0022               	movlb	2	; select bank2
 13047  13EB  00C8               	movwf	exp@x^(0+256)
 13048  13EC  0021               	movlb	1	; select bank1
 13049  13ED  083F               	movf	(?___ftneg+1)^(0+128),w
 13050  13EE  0022               	movlb	2	; select bank2
 13051  13EF  00C9               	movwf	(exp@x+1)^(0+256)
 13052  13F0  0021               	movlb	1	; select bank1
 13053  13F1  0840               	movf	(?___ftneg+2)^(0+128),w
 13054  13F2  0022               	movlb	2	; select bank2
 13055  13F3  00CA               	movwf	(exp@x+2)^(0+256)
 13056  13F4                     l8344:	
 13057  13F4  30AA               	movlw	170
 13058  13F5  0021               	movlb	1	; select bank1
 13059  13F6  00AE               	movwf	___ftmul@f1^(0+128)
 13060  13F7  30B8               	movlw	184
 13061  13F8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13062  13F9  303F               	movlw	63
 13063  13FA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13064  13FB  0022               	movlb	2	; select bank2
 13065  13FC  0848               	movf	exp@x^(0+256),w
 13066  13FD  0021               	movlb	1	; select bank1
 13067  13FE  00B1               	movwf	___ftmul@f2^(0+128)
 13068  13FF  0022               	movlb	2	; select bank2
 13069  1400  0849               	movf	(exp@x+1)^(0+256),w
 13070  1401  0021               	movlb	1	; select bank1
 13071  1402  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13072  1403  0022               	movlb	2	; select bank2
 13073  1404  084A               	movf	(exp@x+2)^(0+256),w
 13074  1405  0021               	movlb	1	; select bank1
 13075  1406  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13076  1407  3187  273B  3193   	fcall	___ftmul
 13077  140A  0021               	movlb	1	; select bank1
 13078  140B  082E               	movf	?___ftmul^(0+128),w
 13079  140C  0022               	movlb	2	; select bank2
 13080  140D  00C8               	movwf	exp@x^(0+256)
 13081  140E  0021               	movlb	1	; select bank1
 13082  140F  082F               	movf	(?___ftmul+1)^(0+128),w
 13083  1410  0022               	movlb	2	; select bank2
 13084  1411  00C9               	movwf	(exp@x+1)^(0+256)
 13085  1412  0021               	movlb	1	; select bank1
 13086  1413  0830               	movf	(?___ftmul+2)^(0+128),w
 13087  1414  0022               	movlb	2	; select bank2
 13088  1415  00CA               	movwf	(exp@x+2)^(0+256)
 13089  1416  0848               	movf	exp@x^(0+256),w
 13090  1417  00AE               	movwf	floor@x^(0+256)
 13091  1418  0849               	movf	(exp@x+1)^(0+256),w
 13092  1419  00AF               	movwf	(floor@x+1)^(0+256)
 13093  141A  084A               	movf	(exp@x+2)^(0+256),w
 13094  141B  00B0               	movwf	(floor@x+2)^(0+256)
 13095  141C  319E  267C  3193   	fcall	_floor
 13096  141F  0022               	movlb	2	; select bank2
 13097  1420  082E               	movf	?_floor^(0+256),w
 13098  1421  00CC               	movwf	_exp$2862^(0+256)
 13099  1422  082F               	movf	(?_floor+1)^(0+256),w
 13100  1423  00CD               	movwf	(_exp$2862+1)^(0+256)
 13101  1424  0830               	movf	(?_floor+2)^(0+256),w
 13102  1425  00CE               	movwf	(_exp$2862+2)^(0+256)
 13103  1426  084C               	movf	_exp$2862^(0+256),w
 13104  1427  00A0               	movwf	___fttol@f1^(0+256)
 13105  1428  084D               	movf	(_exp$2862+1)^(0+256),w
 13106  1429  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13107  142A  084E               	movf	(_exp$2862+2)^(0+256),w
 13108  142B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13109  142C  319A  2263  3193   	fcall	___fttol
 13110  142F  0022               	movlb	2	; select bank2
 13111  1430  0821               	movf	(?___fttol^(0+256)+1),w
 13112  1431  00D3               	movwf	(exp@exponent+1)^(0+256)
 13113  1432  0820               	movf	?___fttol^(0+256),w
 13114  1433  00D2               	movwf	exp@exponent^(0+256)
 13115  1434  0853               	movf	(exp@exponent+1)^(0+256),w
 13116  1435  0021               	movlb	1	; select bank1
 13117  1436  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13118  1437  0022               	movlb	2	; select bank2
 13119  1438  0852               	movf	exp@exponent^(0+256),w
 13120  1439  0021               	movlb	1	; select bank1
 13121  143A  00A8               	movwf	___awtoft@c^(0+128)
 13122  143B  31AE  26E2  3193   	fcall	___awtoft
 13123  143E  0021               	movlb	1	; select bank1
 13124  143F  0828               	movf	?___awtoft^(0+128),w
 13125  1440  0022               	movlb	2	; select bank2
 13126  1441  00B7               	movwf	___ftsub@f2^(0+256)
 13127  1442  0021               	movlb	1	; select bank1
 13128  1443  0829               	movf	(?___awtoft+1)^(0+128),w
 13129  1444  0022               	movlb	2	; select bank2
 13130  1445  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 13131  1446  0021               	movlb	1	; select bank1
 13132  1447  082A               	movf	(?___awtoft+2)^(0+128),w
 13133  1448  0022               	movlb	2	; select bank2
 13134  1449  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 13135  144A  0848               	movf	exp@x^(0+256),w
 13136  144B  00BA               	movwf	___ftsub@f1^(0+256)
 13137  144C  0849               	movf	(exp@x+1)^(0+256),w
 13138  144D  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 13139  144E  084A               	movf	(exp@x+2)^(0+256),w
 13140  144F  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 13141  1450  31AF  27A3  3193   	fcall	___ftsub
 13142  1453  0022               	movlb	2	; select bank2
 13143  1454  0837               	movf	?___ftsub^(0+256),w
 13144  1455  00C8               	movwf	exp@x^(0+256)
 13145  1456  0838               	movf	(?___ftsub+1)^(0+256),w
 13146  1457  00C9               	movwf	(exp@x+1)^(0+256)
 13147  1458  0839               	movf	(?___ftsub+2)^(0+256),w
 13148  1459  00CA               	movwf	(exp@x+2)^(0+256)
 13149  145A  0848               	movf	exp@x^(0+256),w
 13150  145B  00B4               	movwf	eval_poly@x^(0+256)
 13151  145C  0849               	movf	(exp@x+1)^(0+256),w
 13152  145D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13153  145E  084A               	movf	(exp@x+2)^(0+256),w
 13154  145F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13155  1460  3000               	movlw	low (exp@coeff| (0+32768))
 13156  1461  00B7               	movwf	eval_poly@d^(0+256)
 13157  1462  30A8               	movlw	high (exp@coeff| (0+32768))
 13158  1463  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13159  1464  3009               	movlw	9
 13160  1465  00B9               	movwf	eval_poly@n^(0+256)
 13161  1466  3000               	movlw	0
 13162  1467  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13163  1468  31A6  269C  3193   	fcall	_eval_poly
 13164  146B  0022               	movlb	2	; select bank2
 13165  146C  0834               	movf	?_eval_poly^(0+256),w
 13166  146D  00BE               	movwf	ldexp@value^(0+256)
 13167  146E  0835               	movf	(?_eval_poly+1)^(0+256),w
 13168  146F  00BF               	movwf	(ldexp@value+1)^(0+256)
 13169  1470  0836               	movf	(?_eval_poly+2)^(0+256),w
 13170  1471  00C0               	movwf	(ldexp@value+2)^(0+256)
 13171  1472  0853               	movf	(exp@exponent+1)^(0+256),w
 13172  1473  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13173  1474  0852               	movf	exp@exponent^(0+256),w
 13174  1475  00C1               	movwf	ldexp@newexp^(0+256)
 13175  1476  319C  2491  3193   	fcall	_ldexp
 13176  1479  0022               	movlb	2	; select bank2
 13177  147A  083E               	movf	?_ldexp^(0+256),w
 13178  147B  00C8               	movwf	exp@x^(0+256)
 13179  147C  083F               	movf	(?_ldexp+1)^(0+256),w
 13180  147D  00C9               	movwf	(exp@x+1)^(0+256)
 13181  147E  0840               	movf	(?_ldexp+2)^(0+256),w
 13182  147F  00CA               	movwf	(exp@x+2)^(0+256)
 13183  1480  0854               	movf	exp@sign^(0+256),w
 13184  1481  1903               	btfsc	3,2
 13185  1482  0008               	return
 13186  1483  30FF               	movlw	255
 13187  1484  00CF               	movwf	_exp$2613^(0+256)
 13188  1485  307F               	movlw	127
 13189  1486  00D0               	movwf	(_exp$2613+1)^(0+256)
 13190  1487  307F               	movlw	127
 13191  1488  00D1               	movwf	(_exp$2613+2)^(0+256)
 13192  1489  084A               	movf	(exp@x+2)^(0+256),w
 13193  148A  0651               	xorwf	(_exp$2613+2)^(0+256),w
 13194  148B  1D03               	skipz
 13195  148C  2C93               	goto	u8835
 13196  148D  0849               	movf	(exp@x+1)^(0+256),w
 13197  148E  0650               	xorwf	(_exp$2613+1)^(0+256),w
 13198  148F  1D03               	skipz
 13199  1490  2C93               	goto	u8835
 13200  1491  0848               	movf	exp@x^(0+256),w
 13201  1492  064F               	xorwf	_exp$2613^(0+256),w
 13202  1493                     u8835:	
 13203  1493  1D03               	skipz
 13204  1494  2C9C               	goto	l8366
 13205  1495  3000               	movlw	0
 13206  1496  00C8               	movwf	?_exp^(0+256)
 13207  1497  3000               	movlw	0
 13208  1498  00C9               	movwf	(?_exp+1)^(0+256)
 13209  1499  3000               	movlw	0
 13210  149A  00CA               	movwf	(?_exp+2)^(0+256)
 13211  149B  0008               	return
 13212  149C                     l8366:	
 13213  149C  0848               	movf	exp@x^(0+256),w
 13214  149D  0021               	movlb	1	; select bank1
 13215  149E  00CE               	movwf	___ftdiv@f2^(0+128)
 13216  149F  0022               	movlb	2	; select bank2
 13217  14A0  0849               	movf	(exp@x+1)^(0+256),w
 13218  14A1  0021               	movlb	1	; select bank1
 13219  14A2  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13220  14A3  0022               	movlb	2	; select bank2
 13221  14A4  084A               	movf	(exp@x+2)^(0+256),w
 13222  14A5  0021               	movlb	1	; select bank1
 13223  14A6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13224  14A7  3000               	movlw	0
 13225  14A8  00D1               	movwf	___ftdiv@f1^(0+128)
 13226  14A9  3080               	movlw	128
 13227  14AA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13228  14AB  303F               	movlw	63
 13229  14AC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13230  14AD  319D  2528         	fcall	___ftdiv
 13231  14AF  0021               	movlb	1	; select bank1
 13232  14B0  084E               	movf	?___ftdiv^(0+128),w
 13233  14B1  0022               	movlb	2	; select bank2
 13234  14B2  00C8               	movwf	?_exp^(0+256)
 13235  14B3  0021               	movlb	1	; select bank1
 13236  14B4  084F               	movf	(?___ftdiv+1)^(0+128),w
 13237  14B5  0022               	movlb	2	; select bank2
 13238  14B6  00C9               	movwf	(?_exp+1)^(0+256)
 13239  14B7  0021               	movlb	1	; select bank1
 13240  14B8  0850               	movf	(?___ftdiv+2)^(0+128),w
 13241  14B9  0022               	movlb	2	; select bank2
 13242  14BA  00CA               	movwf	(?_exp+2)^(0+256)
 13243  14BB  0008               	return
 13244  14BC                     __end_of_exp:	
 13245                           
 13246                           	psect	text30
 13247  1C91                     __ptext30:	
 13248 ;; *************** function _ldexp *****************
 13249 ;; Defined at:
 13250 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13251 ;; Parameters:    Size  Location     Type
 13252 ;;  value           3   30[BANK2 ] unsigned char 
 13253 ;;  newexp          2   33[BANK2 ] int 
 13254 ;; Auto vars:     Size  Location     Type
 13255 ;;		None
 13256 ;; Return value:  Size  Location     Type
 13257 ;;                  3   30[BANK2 ] int 
 13258 ;; Registers used:
 13259 ;;		wreg, status,2, status,0, pclath, cstack
 13260 ;; Tracked objects:
 13261 ;;		On entry : 0/0
 13262 ;;		On exit  : 0/0
 13263 ;;		Unchanged: 0/0
 13264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13265 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13266 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13267 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13268 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13269 ;;Total ram usage:       10 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; Hardware stack levels required when called:    4
 13272 ;; This function calls:
 13273 ;;		___ftge
 13274 ;;		___ftneg
 13275 ;; This function is called by:
 13276 ;;		_exp
 13277 ;; This function uses a non-reentrant model
 13278 ;;
 13279                           
 13280                           
 13281                           ;psect for function _ldexp
 13282  1C91                     _ldexp:	
 13283                           
 13284                           ;incstack = 0
 13285                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13286  1C91  0022               	movlb	2	; select bank2
 13287  1C92  0840               	movf	(ldexp@value+2)^(0+256),w
 13288  1C93  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13289  1C94  043E               	iorwf	ldexp@value^(0+256),w
 13290  1C95  1D03               	skipz
 13291  1C96  2C9E               	goto	l8136
 13292  1C97  3000               	movlw	0
 13293  1C98  00BE               	movwf	?_ldexp^(0+256)
 13294  1C99  3000               	movlw	0
 13295  1C9A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13296  1C9B  3000               	movlw	0
 13297  1C9C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13298  1C9D  0008               	return
 13299  1C9E                     l8136:	
 13300  1C9E  0840               	movf	(ldexp@value^(0+256)+2),w
 13301  1C9F  397F               	andlw	127
 13302  1CA0  00C3               	movwf	??_ldexp^(0+256)
 13303  1CA1  01C4               	clrf	(??_ldexp^(0+256)+1)
 13304  1CA2  35C3               	lslf	??_ldexp^(0+256),f
 13305  1CA3  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13306  1CA4  0843               	movf	??_ldexp^(0+256),w
 13307  1CA5  07C1               	addwf	ldexp@newexp^(0+256),f
 13308  1CA6  0844               	movf	(??_ldexp+1)^(0+256),w
 13309  1CA7  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13310  1CA8  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13311  1CA9  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13312  1CAA  3901               	andlw	1
 13313  1CAB  00C3               	movwf	??_ldexp^(0+256)
 13314  1CAC  01C4               	clrf	(??_ldexp^(0+256)+1)
 13315  1CAD  0843               	movf	??_ldexp^(0+256),w
 13316  1CAE  07C1               	addwf	ldexp@newexp^(0+256),f
 13317  1CAF  0844               	movf	(??_ldexp+1)^(0+256),w
 13318  1CB0  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13319  1CB1  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13320  1CB2  2CC0               	goto	l8146
 13321  1CB3  3022               	movlw	34
 13322  1CB4  0024               	movlb	4	; select bank4
 13323  1CB5  00CD               	movwf	_errno^(0+512)
 13324  1CB6  3000               	movlw	0
 13325  1CB7  00CE               	movwf	(_errno^(0+512)+1)
 13326  1CB8  3000               	movlw	0
 13327  1CB9  0022               	movlb	2	; select bank2
 13328  1CBA  00BE               	movwf	?_ldexp^(0+256)
 13329  1CBB  3000               	movlw	0
 13330  1CBC  00BF               	movwf	(?_ldexp+1)^(0+256)
 13331  1CBD  3000               	movlw	0
 13332  1CBE  00C0               	movwf	(?_ldexp+2)^(0+256)
 13333  1CBF  0008               	return
 13334  1CC0                     l8146:	
 13335  1CC0  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13336  1CC1  3A80               	xorlw	128
 13337  1CC2  00C3               	movwf	??_ldexp^(0+256)
 13338  1CC3  3081               	movlw	129
 13339  1CC4  0243               	subwf	??_ldexp^(0+256),w
 13340  1CC5  1D03               	skipz
 13341  1CC6  2CC9               	goto	u8605
 13342  1CC7  3000               	movlw	0
 13343  1CC8  0241               	subwf	ldexp@newexp^(0+256),w
 13344  1CC9                     u8605:	
 13345  1CC9  1C03               	skipc
 13346  1CCA  2D10               	goto	l8170
 13347  1CCB  3022               	movlw	34
 13348  1CCC  0024               	movlb	4	; select bank4
 13349  1CCD  00CD               	movwf	_errno^(0+512)
 13350  1CCE  3000               	movlw	0
 13351  1CCF  00CE               	movwf	(_errno^(0+512)+1)
 13352  1CD0  0022               	movlb	2	; select bank2
 13353  1CD1  083E               	movf	ldexp@value^(0+256),w
 13354  1CD2  0021               	movlb	1	; select bank1
 13355  1CD3  00A0               	movwf	___ftge@ff1^(0+128)
 13356  1CD4  0022               	movlb	2	; select bank2
 13357  1CD5  083F               	movf	(ldexp@value+1)^(0+256),w
 13358  1CD6  0021               	movlb	1	; select bank1
 13359  1CD7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13360  1CD8  0022               	movlb	2	; select bank2
 13361  1CD9  0840               	movf	(ldexp@value+2)^(0+256),w
 13362  1CDA  0021               	movlb	1	; select bank1
 13363  1CDB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13364  1CDC  3000               	movlw	0
 13365  1CDD  00A3               	movwf	___ftge@ff2^(0+128)
 13366  1CDE  3000               	movlw	0
 13367  1CDF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13368  1CE0  3000               	movlw	0
 13369  1CE1  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13370  1CE2  31A1  2184  319C   	fcall	___ftge
 13371  1CE5  1803               	btfsc	3,0
 13372  1CE6  2D08               	goto	l8166
 13373  1CE7  30FF               	movlw	255
 13374  1CE8  0022               	movlb	2	; select bank2
 13375  1CE9  00C5               	movwf	_ldexp$2650^(0+256)
 13376  1CEA  307F               	movlw	127
 13377  1CEB  00C6               	movwf	(_ldexp$2650+1)^(0+256)
 13378  1CEC  307F               	movlw	127
 13379  1CED  00C7               	movwf	(_ldexp$2650+2)^(0+256)
 13380  1CEE  0845               	movf	_ldexp$2650^(0+256),w
 13381  1CEF  0021               	movlb	1	; select bank1
 13382  1CF0  00BE               	movwf	___ftneg@f1^(0+128)
 13383  1CF1  0022               	movlb	2	; select bank2
 13384  1CF2  0846               	movf	(_ldexp$2650+1)^(0+256),w
 13385  1CF3  0021               	movlb	1	; select bank1
 13386  1CF4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13387  1CF5  0022               	movlb	2	; select bank2
 13388  1CF6  0847               	movf	(_ldexp$2650+2)^(0+256),w
 13389  1CF7  0021               	movlb	1	; select bank1
 13390  1CF8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13391  1CF9  31AD  25B0         	fcall	___ftneg
 13392  1CFB  0021               	movlb	1	; select bank1
 13393  1CFC  083E               	movf	?___ftneg^(0+128),w
 13394  1CFD  0022               	movlb	2	; select bank2
 13395  1CFE  00BE               	movwf	?_ldexp^(0+256)
 13396  1CFF  0021               	movlb	1	; select bank1
 13397  1D00  083F               	movf	(?___ftneg+1)^(0+128),w
 13398  1D01  0022               	movlb	2	; select bank2
 13399  1D02  00BF               	movwf	(?_ldexp+1)^(0+256)
 13400  1D03  0021               	movlb	1	; select bank1
 13401  1D04  0840               	movf	(?___ftneg+2)^(0+128),w
 13402  1D05  0022               	movlb	2	; select bank2
 13403  1D06  00C0               	movwf	(?_ldexp+2)^(0+256)
 13404  1D07  0008               	return
 13405  1D08                     l8166:	
 13406  1D08  30FF               	movlw	255
 13407  1D09  0022               	movlb	2	; select bank2
 13408  1D0A  00BE               	movwf	?_ldexp^(0+256)
 13409  1D0B  307F               	movlw	127
 13410  1D0C  00BF               	movwf	(?_ldexp+1)^(0+256)
 13411  1D0D  307F               	movlw	127
 13412  1D0E  00C0               	movwf	(?_ldexp+2)^(0+256)
 13413  1D0F  0008               	return
 13414  1D10                     l8170:	
 13415  1D10  0022               	movlb	2	; select bank2
 13416  1D11  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13417  1D12  00C4               	movwf	(??_ldexp^(0+256)+1)
 13418  1D13  0841               	movf	ldexp@newexp^(0+256),w
 13419  1D14  00C3               	movwf	??_ldexp^(0+256)
 13420  1D15  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13421  1D16  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13422  1D17  0CC3               	rrf	??_ldexp^(0+256),f
 13423  1D18  0840               	movf	(ldexp@value^(0+256)+2),w
 13424  1D19  0643               	xorwf	??_ldexp^(0+256),w
 13425  1D1A  3980               	andlw	-128
 13426  1D1B  0643               	xorwf	??_ldexp^(0+256),w
 13427  1D1C  00C0               	movwf	(ldexp@value^(0+256)+2)
 13428  1D1D  0841               	movf	ldexp@newexp^(0+256),w
 13429  1D1E  3901               	andlw	1
 13430  1D1F  00C3               	movwf	??_ldexp^(0+256)
 13431  1D20  0CC3               	rrf	??_ldexp^(0+256),f
 13432  1D21  0CC3               	rrf	??_ldexp^(0+256),f
 13433  1D22  083F               	movf	(ldexp@value^(0+256)+1),w
 13434  1D23  0643               	xorwf	??_ldexp^(0+256),w
 13435  1D24  397F               	andlw	-129
 13436  1D25  0643               	xorwf	??_ldexp^(0+256),w
 13437  1D26  00BF               	movwf	(ldexp@value^(0+256)+1)
 13438  1D27  0008               	return
 13439  1D28                     __end_of_ldexp:	
 13440                           
 13441                           	psect	text31
 13442  2F4D                     __ptext31:	
 13443 ;; *************** function ___lltoft *****************
 13444 ;; Defined at:
 13445 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;  c               4    8[BANK1 ] unsigned long 
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;  exp             1   13[BANK1 ] unsigned char 
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  3    8[BANK1 ] float 
 13452 ;; Registers used:
 13453 ;;		wreg, status,2, status,0, pclath, cstack
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13459 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13460 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13461 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13462 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13463 ;;Total ram usage:        6 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    4
 13466 ;; This function calls:
 13467 ;;		___ftpack
 13468 ;; This function is called by:
 13469 ;;		_pow
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           
 13474                           ;psect for function ___lltoft
 13475  2F4D                     ___lltoft:	
 13476                           
 13477                           ;incstack = 0
 13478                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13479  2F4D  308E               	movlw	142
 13480  2F4E  0021               	movlb	1	; select bank1
 13481  2F4F  00AC               	movwf	??___lltoft^(0+128)
 13482  2F50  082C               	movf	??___lltoft^(0+128),w
 13483  2F51  00AD               	movwf	___lltoft@exp^(0+128)
 13484  2F52                     l8288:	
 13485  2F52  30FF               	movlw	255
 13486  2F53  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13487  2F54  1903               	btfsc	3,2
 13488  2F55  2F62               	goto	l8290
 13489  2F56  3001               	movlw	1
 13490  2F57                     u8725:	
 13491  2F57  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13492  2F58  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13493  2F59  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13494  2F5A  0CA8               	rrf	___lltoft@c^(0+128),f
 13495  2F5B  0B89               	decfsz	9,f
 13496  2F5C  2F57               	goto	u8725
 13497  2F5D  3001               	movlw	1
 13498  2F5E  00AC               	movwf	??___lltoft^(0+128)
 13499  2F5F  082C               	movf	??___lltoft^(0+128),w
 13500  2F60  07AD               	addwf	___lltoft@exp^(0+128),f
 13501  2F61  2F52               	goto	l8288
 13502  2F62                     l8290:	
 13503  2F62  0828               	movf	___lltoft@c^(0+128),w
 13504  2F63  00A0               	movwf	___ftpack@arg^(0+128)
 13505  2F64  0829               	movf	(___lltoft@c+1)^(0+128),w
 13506  2F65  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13507  2F66  082A               	movf	(___lltoft@c+2)^(0+128),w
 13508  2F67  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13509  2F68  082D               	movf	___lltoft@exp^(0+128),w
 13510  2F69  00AC               	movwf	??___lltoft^(0+128)
 13511  2F6A  082C               	movf	??___lltoft^(0+128),w
 13512  2F6B  00A3               	movwf	___ftpack@exp^(0+128)
 13513  2F6C  01A4               	clrf	___ftpack@sign^(0+128)
 13514  2F6D  31A6  2637         	fcall	___ftpack
 13515  2F6F  0021               	movlb	1	; select bank1
 13516  2F70  0820               	movf	?___ftpack^(0+128),w
 13517  2F71  00A8               	movwf	?___lltoft^(0+128)
 13518  2F72  0821               	movf	(?___ftpack+1)^(0+128),w
 13519  2F73  00A9               	movwf	(?___lltoft+1)^(0+128)
 13520  2F74  0822               	movf	(?___ftpack+2)^(0+128),w
 13521  2F75  00AA               	movwf	(?___lltoft+2)^(0+128)
 13522  2F76  0008               	return
 13523  2F77                     __end_of___lltoft:	
 13524                           
 13525                           	psect	text32
 13526  244F                     __ptext32:	
 13527 ;; *************** function _read_top_tactile *****************
 13528 ;; Defined at:
 13529 ;;		line 50 in file "tactiles.c"
 13530 ;; Parameters:    Size  Location     Type
 13531 ;;		None
 13532 ;; Auto vars:     Size  Location     Type
 13533 ;;		None
 13534 ;; Return value:  Size  Location     Type
 13535 ;;                  1    wreg      void 
 13536 ;; Registers used:
 13537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13538 ;; Tracked objects:
 13539 ;;		On entry : 0/0
 13540 ;;		On exit  : 0/0
 13541 ;;		Unchanged: 0/0
 13542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13545 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13546 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13547 ;;Total ram usage:        1 bytes
 13548 ;; Hardware stack levels used:    1
 13549 ;; Hardware stack levels required when called:    5
 13550 ;; This function calls:
 13551 ;;		_set_leds_top
 13552 ;;		_wait_ms
 13553 ;; This function is called by:
 13554 ;;		_main
 13555 ;; This function uses a non-reentrant model
 13556 ;;
 13557                           
 13558                           
 13559                           ;psect for function _read_top_tactile
 13560  244F                     _read_top_tactile:	
 13561                           
 13562                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13563                           
 13564                           ;incstack = 0
 13565                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13566  244F  0020               	movlb	0	; select bank0
 13567  2450  1A8F               	btfsc	15,5	;volatile
 13568  2451  2C59               	goto	l9120
 13569                           
 13570                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13571  2452  0023               	movlb	3	; select bank3
 13572  2453  0846               	movf	_topTactile_pressed^(0+384),w
 13573  2454  1903               	btfsc	3,2
 13574  2455  2C64               	goto	l974
 13575                           
 13576                           ;tactiles.c: 62: topTactile_pressed--;
 13577  2456  3001               	movlw	1
 13578  2457  02C6               	subwf	_topTactile_pressed^(0+384),f
 13579                           
 13580                           ;tactiles.c: 63: }
 13581                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13582  2458  2C64               	goto	l974
 13583  2459                     l9120:	
 13584  2459  3019               	movlw	25
 13585  245A  0023               	movlb	3	; select bank3
 13586  245B  0246               	subwf	_topTactile_pressed^(0+384),w
 13587  245C  1803               	skipnc
 13588  245D  2C64               	goto	l974
 13589                           
 13590                           ;tactiles.c: 65: topTactile_pressed++;
 13591  245E  3001               	movlw	1
 13592  245F  0021               	movlb	1	; select bank1
 13593  2460  00B2               	movwf	??_read_top_tactile^(0+128)
 13594  2461  0832               	movf	??_read_top_tactile^(0+128),w
 13595  2462  0023               	movlb	3	; select bank3
 13596  2463  07C6               	addwf	_topTactile_pressed^(0+384),f
 13597  2464                     l974:	
 13598                           
 13599                           ;tactiles.c: 66: }
 13600                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13601  2464  0846               	movf	_topTactile_pressed^(0+384),w
 13602  2465  1D03               	btfss	3,2
 13603  2466  0008               	return
 13604                           
 13605                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13606  2467  0020               	movlb	0	; select bank0
 13607  2468  085A               	movf	_top_push_state,w
 13608  2469  3E01               	addlw	1
 13609  246A  00DA               	movwf	_top_push_state
 13610  246B  3000               	movlw	0
 13611  246C  3D5B               	addwfc	_top_push_state+1,w
 13612  246D  00DB               	movwf	_top_push_state+1
 13613                           
 13614                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13615  246E  085B               	movf	_top_push_state+1,w
 13616  246F  3A80               	xorlw	128
 13617  2470  0021               	movlb	1	; select bank1
 13618  2471  00B2               	movwf	??_read_top_tactile^(0+128)
 13619  2472  3080               	movlw	128
 13620  2473  0232               	subwf	??_read_top_tactile^(0+128),w
 13621  2474  1D03               	skipz
 13622  2475  2C79               	goto	u10125
 13623  2476  3007               	movlw	7
 13624  2477  0020               	movlb	0	; select bank0
 13625  2478  025A               	subwf	_top_push_state,w
 13626  2479                     u10125:	
 13627  2479  1C03               	skipc
 13628  247A  2C80               	goto	l9130
 13629                           
 13630                           ;tactiles.c: 75: top_push_state = 1;
 13631  247B  3001               	movlw	1
 13632  247C  0020               	movlb	0	; select bank0
 13633  247D  00DA               	movwf	_top_push_state
 13634  247E  3000               	movlw	0
 13635  247F  00DB               	movwf	_top_push_state+1
 13636  2480                     l9130:	
 13637                           
 13638                           ;tactiles.c: 76: }
 13639                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13640  2480  0020               	movlb	0	; select bank0
 13641  2481  085B               	movf	_top_push_state+1,w
 13642  2482  0021               	movlb	1	; select bank1
 13643  2483  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13644  2484  0020               	movlb	0	; select bank0
 13645  2485  085A               	movf	_top_push_state,w
 13646  2486  0021               	movlb	1	; select bank1
 13647  2487  00A0               	movwf	set_leds_top@x^(0+128)
 13648  2488  3001               	movlw	1
 13649  2489  00A2               	movwf	set_leds_top@ledState^(0+128)
 13650  248A  3000               	movlw	0
 13651  248B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13652  248C  31A5  25E3  31A4   	fcall	_set_leds_top
 13653                           
 13654                           ;tactiles.c: 78: mod_time_changed = 1;
 13655  248F  0023               	movlb	3	; select bank3
 13656  2490  01E4               	clrf	_mod_time_changed^(0+384)
 13657  2491  0AE4               	incf	_mod_time_changed^(0+384),f
 13658  2492                     l978:	
 13659                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13660                           
 13661  2492  0020               	movlb	0	; select bank0
 13662  2493  1E8F               	btfss	15,5	;volatile
 13663  2494  2C92               	goto	l978
 13664                           
 13665                           ;tactiles.c: 82: }
 13666                           ;tactiles.c: 83: wait_ms(20);
 13667  2495  3014               	movlw	20
 13668  2496  0021               	movlb	1	; select bank1
 13669  2497  00AC               	movwf	wait_ms@timeSec^(0+128)
 13670  2498  3000               	movlw	0
 13671  2499  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13672  249A  31A0  206F         	fcall	_wait_ms
 13673  249C  0008               	return
 13674  249D                     __end_of_read_top_tactile:	
 13675                           
 13676                           	psect	text33
 13677  2405                     __ptext33:	
 13678 ;; *************** function _read_bottom_tactile *****************
 13679 ;; Defined at:
 13680 ;;		line 18 in file "tactiles.c"
 13681 ;; Parameters:    Size  Location     Type
 13682 ;;		None
 13683 ;; Auto vars:     Size  Location     Type
 13684 ;;		None
 13685 ;; Return value:  Size  Location     Type
 13686 ;;                  1    wreg      void 
 13687 ;; Registers used:
 13688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13689 ;; Tracked objects:
 13690 ;;		On entry : 0/0
 13691 ;;		On exit  : 0/0
 13692 ;;		Unchanged: 0/0
 13693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13696 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13697 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13698 ;;Total ram usage:        1 bytes
 13699 ;; Hardware stack levels used:    1
 13700 ;; Hardware stack levels required when called:    5
 13701 ;; This function calls:
 13702 ;;		_set_leds_bottom
 13703 ;;		_wait_ms
 13704 ;; This function is called by:
 13705 ;;		_main
 13706 ;; This function uses a non-reentrant model
 13707 ;;
 13708                           
 13709                           
 13710                           ;psect for function _read_bottom_tactile
 13711  2405                     _read_bottom_tactile:	
 13712                           
 13713                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13714                           
 13715                           ;incstack = 0
 13716                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13717  2405  0020               	movlb	0	; select bank0
 13718  2406  1B0F               	btfsc	15,6	;volatile
 13719  2407  2C0F               	goto	l9098
 13720                           
 13721                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13722  2408  0023               	movlb	3	; select bank3
 13723  2409  083B               	movf	_bottomTactile_pressed^(0+384),w
 13724  240A  1903               	btfsc	3,2
 13725  240B  2C1A               	goto	l962
 13726                           
 13727                           ;tactiles.c: 29: bottomTactile_pressed--;
 13728  240C  3001               	movlw	1
 13729  240D  02BB               	subwf	_bottomTactile_pressed^(0+384),f
 13730                           
 13731                           ;tactiles.c: 30: }
 13732                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13733  240E  2C1A               	goto	l962
 13734  240F                     l9098:	
 13735  240F  3019               	movlw	25
 13736  2410  0023               	movlb	3	; select bank3
 13737  2411  023B               	subwf	_bottomTactile_pressed^(0+384),w
 13738  2412  1803               	skipnc
 13739  2413  2C1A               	goto	l962
 13740                           
 13741                           ;tactiles.c: 32: bottomTactile_pressed++;
 13742  2414  3001               	movlw	1
 13743  2415  0021               	movlb	1	; select bank1
 13744  2416  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13745  2417  0832               	movf	??_read_bottom_tactile^(0+128),w
 13746  2418  0023               	movlb	3	; select bank3
 13747  2419  07BB               	addwf	_bottomTactile_pressed^(0+384),f
 13748  241A                     l962:	
 13749                           
 13750                           ;tactiles.c: 33: }
 13751                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13752  241A  083B               	movf	_bottomTactile_pressed^(0+384),w
 13753  241B  1D03               	btfss	3,2
 13754  241C  0008               	return
 13755                           
 13756                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13757  241D  0020               	movlb	0	; select bank0
 13758  241E  0856               	movf	_bottom_push_state,w
 13759  241F  3E01               	addlw	1
 13760  2420  00D6               	movwf	_bottom_push_state
 13761  2421  3000               	movlw	0
 13762  2422  3D57               	addwfc	_bottom_push_state+1,w
 13763  2423  00D7               	movwf	_bottom_push_state+1
 13764                           
 13765                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13766  2424  0857               	movf	_bottom_push_state+1,w
 13767  2425  3A80               	xorlw	128
 13768  2426  0021               	movlb	1	; select bank1
 13769  2427  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13770  2428  3080               	movlw	128
 13771  2429  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13772  242A  1D03               	skipz
 13773  242B  2C2F               	goto	u10065
 13774  242C  3006               	movlw	6
 13775  242D  0020               	movlb	0	; select bank0
 13776  242E  0256               	subwf	_bottom_push_state,w
 13777  242F                     u10065:	
 13778  242F  1C03               	skipc
 13779  2430  2C36               	goto	l9108
 13780                           
 13781                           ;tactiles.c: 39: bottom_push_state = 1;
 13782  2431  3001               	movlw	1
 13783  2432  0020               	movlb	0	; select bank0
 13784  2433  00D6               	movwf	_bottom_push_state
 13785  2434  3000               	movlw	0
 13786  2435  00D7               	movwf	_bottom_push_state+1
 13787  2436                     l9108:	
 13788                           
 13789                           ;tactiles.c: 40: }
 13790                           ;tactiles.c: 41: modulation_changed = 1;
 13791  2436  0023               	movlb	3	; select bank3
 13792  2437  01C2               	clrf	_modulation_changed^(0+384)
 13793  2438  0AC2               	incf	_modulation_changed^(0+384),f
 13794                           
 13795                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13796  2439  0020               	movlb	0	; select bank0
 13797  243A  0857               	movf	_bottom_push_state+1,w
 13798  243B  0021               	movlb	1	; select bank1
 13799  243C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13800  243D  0020               	movlb	0	; select bank0
 13801  243E  0856               	movf	_bottom_push_state,w
 13802  243F  0021               	movlb	1	; select bank1
 13803  2440  00A0               	movwf	set_leds_bottom@x^(0+128)
 13804  2441  31A1  2149  31A4   	fcall	_set_leds_bottom
 13805  2444                     l966:	
 13806                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13807                           
 13808  2444  0020               	movlb	0	; select bank0
 13809  2445  1F0F               	btfss	15,6	;volatile
 13810  2446  2C44               	goto	l966
 13811                           
 13812                           ;tactiles.c: 45: }
 13813                           ;tactiles.c: 46: wait_ms(20);
 13814  2447  3014               	movlw	20
 13815  2448  0021               	movlb	1	; select bank1
 13816  2449  00AC               	movwf	wait_ms@timeSec^(0+128)
 13817  244A  3000               	movlw	0
 13818  244B  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13819  244C  31A0  206F         	fcall	_wait_ms
 13820  244E  0008               	return
 13821  244F                     __end_of_read_bottom_tactile:	
 13822                           
 13823                           	psect	text34
 13824  1AEA                     __ptext34:	
 13825 ;; *************** function _map *****************
 13826 ;; Defined at:
 13827 ;;		line 177 in file "user.c"
 13828 ;; Parameters:    Size  Location     Type
 13829 ;;  x               3   62[BANK1 ] float 
 13830 ;;  in_min          3   65[BANK1 ] float 
 13831 ;;  in_max          3   68[BANK1 ] float 
 13832 ;;  out_min         3   71[BANK1 ] float 
 13833 ;;  out_max         3   74[BANK1 ] float 
 13834 ;; Auto vars:     Size  Location     Type
 13835 ;;		None
 13836 ;; Return value:  Size  Location     Type
 13837 ;;                  3   62[BANK1 ] float 
 13838 ;; Registers used:
 13839 ;;		wreg, status,2, status,0, pclath, cstack
 13840 ;; Tracked objects:
 13841 ;;		On entry : 0/0
 13842 ;;		On exit  : 0/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13845 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13846 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13848 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13849 ;;Total ram usage:       18 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; Hardware stack levels required when called:    5
 13852 ;; This function calls:
 13853 ;;		___ftadd
 13854 ;;		___ftdiv
 13855 ;;		___ftmul
 13856 ;;		___ftneg
 13857 ;; This function is called by:
 13858 ;;		_main
 13859 ;; This function uses a non-reentrant model
 13860 ;;
 13861                           
 13862                           
 13863                           ;psect for function _map
 13864  1AEA                     _map:	
 13865                           
 13866                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13867                           
 13868                           ;incstack = 0
 13869                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13870  1AEA  0021               	movlb	1	; select bank1
 13871  1AEB  0864               	movf	map@in_max^(0+128),w
 13872  1AEC  00C1               	movwf	___ftadd@f1^(0+128)
 13873  1AED  0865               	movf	(map@in_max+1)^(0+128),w
 13874  1AEE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13875  1AEF  0866               	movf	(map@in_max+2)^(0+128),w
 13876  1AF0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13877  1AF1  0861               	movf	map@in_min^(0+128),w
 13878  1AF2  00BE               	movwf	___ftneg@f1^(0+128)
 13879  1AF3  0862               	movf	(map@in_min+1)^(0+128),w
 13880  1AF4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13881  1AF5  0863               	movf	(map@in_min+2)^(0+128),w
 13882  1AF6  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13883  1AF7  31AD  25B0  319A   	fcall	___ftneg
 13884  1AFA  0021               	movlb	1	; select bank1
 13885  1AFB  083E               	movf	?___ftneg^(0+128),w
 13886  1AFC  00C4               	movwf	___ftadd@f2^(0+128)
 13887  1AFD  083F               	movf	(?___ftneg+1)^(0+128),w
 13888  1AFE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13889  1AFF  0840               	movf	(?___ftneg+2)^(0+128),w
 13890  1B00  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13891  1B01  3190  2031  319A   	fcall	___ftadd
 13892  1B04  0021               	movlb	1	; select bank1
 13893  1B05  0841               	movf	?___ftadd^(0+128),w
 13894  1B06  00CE               	movwf	___ftdiv@f2^(0+128)
 13895  1B07  0842               	movf	(?___ftadd+1)^(0+128),w
 13896  1B08  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13897  1B09  0843               	movf	(?___ftadd+2)^(0+128),w
 13898  1B0A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13899  1B0B  086A               	movf	map@out_max^(0+128),w
 13900  1B0C  00C1               	movwf	___ftadd@f1^(0+128)
 13901  1B0D  086B               	movf	(map@out_max+1)^(0+128),w
 13902  1B0E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13903  1B0F  086C               	movf	(map@out_max+2)^(0+128),w
 13904  1B10  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13905  1B11  0867               	movf	map@out_min^(0+128),w
 13906  1B12  00BE               	movwf	___ftneg@f1^(0+128)
 13907  1B13  0868               	movf	(map@out_min+1)^(0+128),w
 13908  1B14  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13909  1B15  0869               	movf	(map@out_min+2)^(0+128),w
 13910  1B16  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13911  1B17  31AD  25B0  319A   	fcall	___ftneg
 13912  1B1A  0021               	movlb	1	; select bank1
 13913  1B1B  083E               	movf	?___ftneg^(0+128),w
 13914  1B1C  00C4               	movwf	___ftadd@f2^(0+128)
 13915  1B1D  083F               	movf	(?___ftneg+1)^(0+128),w
 13916  1B1E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13917  1B1F  0840               	movf	(?___ftneg+2)^(0+128),w
 13918  1B20  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13919  1B21  3190  2031  319A   	fcall	___ftadd
 13920  1B24  0021               	movlb	1	; select bank1
 13921  1B25  0841               	movf	?___ftadd^(0+128),w
 13922  1B26  00AE               	movwf	___ftmul@f1^(0+128)
 13923  1B27  0842               	movf	(?___ftadd+1)^(0+128),w
 13924  1B28  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13925  1B29  0843               	movf	(?___ftadd+2)^(0+128),w
 13926  1B2A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13927  1B2B  085E               	movf	map@x^(0+128),w
 13928  1B2C  00C1               	movwf	___ftadd@f1^(0+128)
 13929  1B2D  085F               	movf	(map@x+1)^(0+128),w
 13930  1B2E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13931  1B2F  0860               	movf	(map@x+2)^(0+128),w
 13932  1B30  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13933  1B31  0861               	movf	map@in_min^(0+128),w
 13934  1B32  00BE               	movwf	___ftneg@f1^(0+128)
 13935  1B33  0862               	movf	(map@in_min+1)^(0+128),w
 13936  1B34  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13937  1B35  0863               	movf	(map@in_min+2)^(0+128),w
 13938  1B36  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13939  1B37  31AD  25B0  319A   	fcall	___ftneg
 13940  1B3A  0021               	movlb	1	; select bank1
 13941  1B3B  083E               	movf	?___ftneg^(0+128),w
 13942  1B3C  00C4               	movwf	___ftadd@f2^(0+128)
 13943  1B3D  083F               	movf	(?___ftneg+1)^(0+128),w
 13944  1B3E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13945  1B3F  0840               	movf	(?___ftneg+2)^(0+128),w
 13946  1B40  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13947  1B41  3190  2031  319A   	fcall	___ftadd
 13948  1B44  0021               	movlb	1	; select bank1
 13949  1B45  0841               	movf	?___ftadd^(0+128),w
 13950  1B46  00B1               	movwf	___ftmul@f2^(0+128)
 13951  1B47  0842               	movf	(?___ftadd+1)^(0+128),w
 13952  1B48  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13953  1B49  0843               	movf	(?___ftadd+2)^(0+128),w
 13954  1B4A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13955  1B4B  3187  273B  319A   	fcall	___ftmul
 13956  1B4E  0021               	movlb	1	; select bank1
 13957  1B4F  082E               	movf	?___ftmul^(0+128),w
 13958  1B50  00D1               	movwf	___ftdiv@f1^(0+128)
 13959  1B51  082F               	movf	(?___ftmul+1)^(0+128),w
 13960  1B52  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13961  1B53  0830               	movf	(?___ftmul+2)^(0+128),w
 13962  1B54  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13963  1B55  319D  2528  319A   	fcall	___ftdiv
 13964  1B58  0021               	movlb	1	; select bank1
 13965  1B59  084E               	movf	?___ftdiv^(0+128),w
 13966  1B5A  00ED               	movwf	_map$2844^(0+128)
 13967  1B5B  084F               	movf	(?___ftdiv+1)^(0+128),w
 13968  1B5C  00EE               	movwf	(_map$2844+1)^(0+128)
 13969  1B5D  0850               	movf	(?___ftdiv+2)^(0+128),w
 13970  1B5E  00EF               	movwf	(_map$2844+2)^(0+128)
 13971                           
 13972                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13973  1B5F  0867               	movf	map@out_min^(0+128),w
 13974  1B60  00C1               	movwf	___ftadd@f1^(0+128)
 13975  1B61  0868               	movf	(map@out_min+1)^(0+128),w
 13976  1B62  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13977  1B63  0869               	movf	(map@out_min+2)^(0+128),w
 13978  1B64  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13979  1B65  086D               	movf	_map$2844^(0+128),w
 13980  1B66  00C4               	movwf	___ftadd@f2^(0+128)
 13981  1B67  086E               	movf	(_map$2844+1)^(0+128),w
 13982  1B68  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13983  1B69  086F               	movf	(_map$2844+2)^(0+128),w
 13984  1B6A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13985  1B6B  3190  2031         	fcall	___ftadd
 13986  1B6D  0021               	movlb	1	; select bank1
 13987  1B6E  0841               	movf	?___ftadd^(0+128),w
 13988  1B6F  00DE               	movwf	?_map^(0+128)
 13989  1B70  0842               	movf	(?___ftadd+1)^(0+128),w
 13990  1B71  00DF               	movwf	(?_map+1)^(0+128)
 13991  1B72  0843               	movf	(?___ftadd+2)^(0+128),w
 13992  1B73  00E0               	movwf	(?_map+2)^(0+128)
 13993  1B74  0008               	return
 13994  1B75                     __end_of_map:	
 13995                           
 13996                           	psect	text35
 13997  07EF                     __ptext35:	
 13998 ;; *************** function _initSwitchBypass *****************
 13999 ;; Defined at:
 14000 ;;		line 29 in file "SwitchBypass.c"
 14001 ;; Parameters:    Size  Location     Type
 14002 ;;		None
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;  initState       2   26[BANK1 ] int 
 14005 ;; Return value:  Size  Location     Type
 14006 ;;                  1    wreg      void 
 14007 ;; Registers used:
 14008 ;;		wreg, status,2, status,0, pclath, cstack
 14009 ;; Tracked objects:
 14010 ;;		On entry : 0/0
 14011 ;;		On exit  : 0/0
 14012 ;;		Unchanged: 0/0
 14013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14015 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14017 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14018 ;;Total ram usage:        2 bytes
 14019 ;; Hardware stack levels used:    1
 14020 ;; Hardware stack levels required when called:    7
 14021 ;; This function calls:
 14022 ;;		_getSwitchBypassState
 14023 ;;		_setSwitchBypassState
 14024 ;; This function is called by:
 14025 ;;		_main
 14026 ;; This function uses a non-reentrant model
 14027 ;;
 14028                           
 14029                           
 14030                           ;psect for function _initSwitchBypass
 14031  07EF                     _initSwitchBypass:	
 14032                           
 14033                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14034                           
 14035                           ;incstack = 0
 14036                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14037  07EF  31AD  259C  3187   	fcall	_getSwitchBypassState
 14038  07F2  0021               	movlb	1	; select bank1
 14039  07F3  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14040  07F4  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14041  07F5  0820               	movf	?_getSwitchBypassState^(0+128),w
 14042  07F6  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14043                           
 14044                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14045  07F7  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14046  07F8  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14047  07F9  083A               	movf	initSwitchBypass@initState^(0+128),w
 14048  07FA  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14049  07FB  31AE  266A         	fcall	_setSwitchBypassState
 14050  07FD  0008               	return
 14051  07FE                     __end_of_initSwitchBypass:	
 14052                           
 14053                           	psect	text36
 14054  2E6A                     __ptext36:	
 14055 ;; *************** function _setSwitchBypassState *****************
 14056 ;; Defined at:
 14057 ;;		line 140 in file "SwitchBypass.c"
 14058 ;; Parameters:    Size  Location     Type
 14059 ;;  f_state         2   22[BANK1 ] int 
 14060 ;; Auto vars:     Size  Location     Type
 14061 ;;		None
 14062 ;; Return value:  Size  Location     Type
 14063 ;;                  1    wreg      void 
 14064 ;; Registers used:
 14065 ;;		wreg, status,2, status,0, pclath, cstack
 14066 ;; Tracked objects:
 14067 ;;		On entry : 0/0
 14068 ;;		On exit  : 0/0
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14071 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14073 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14074 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14075 ;;Total ram usage:        4 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; Hardware stack levels required when called:    6
 14078 ;; This function calls:
 14079 ;;		_setSwitchBypassRelays
 14080 ;; This function is called by:
 14081 ;;		_initSwitchBypass
 14082 ;;		_updateSwitchBypass
 14083 ;; This function uses a non-reentrant model
 14084 ;;
 14085                           
 14086                           
 14087                           ;psect for function _setSwitchBypassState
 14088  2E6A                     _setSwitchBypassState:	
 14089                           
 14090                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 14091                           
 14092                           ;incstack = 0
 14093                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14094  2E6A  0020               	movlb	0	; select bank0
 14095  2E6B  085F               	movf	_switchBypass_state,w
 14096  2E6C  0021               	movlb	1	; select bank1
 14097  2E6D  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14098  2E6E  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14099  2E6F  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14100  2E70  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14101  2E71  1D03               	skipz
 14102  2E72  2E75               	goto	u8925
 14103  2E73  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14104  2E74  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14105  2E75                     u8925:	
 14106  2E75  1903               	btfsc	3,2
 14107  2E76  0008               	return
 14108                           
 14109                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 14110  2E77  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14111  2E78  0022               	movlb	2	; select bank2
 14112  2E79  1C03               	skipc
 14113  2E7A  110D               	bcf	13,2	;volatile
 14114  2E7B  1803               	skipnc
 14115  2E7C  150D               	bsf	13,2	;volatile
 14116                           
 14117                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 14118  2E7D  118D               	bcf	13,3	;volatile
 14119                           
 14120                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 14121  2E7E  0021               	movlb	1	; select bank1
 14122  2E7F  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14123  2E80  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14124  2E81  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14125  2E82  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14126  2E83  31A0  20A1         	fcall	_setSwitchBypassRelays
 14127  2E85  0008               	return
 14128  2E86                     __end_of_setSwitchBypassState:	
 14129                           
 14130                           	psect	text37
 14131  20A1                     __ptext37:	
 14132 ;; *************** function _setSwitchBypassRelays *****************
 14133 ;; Defined at:
 14134 ;;		line 148 in file "SwitchBypass.c"
 14135 ;; Parameters:    Size  Location     Type
 14136 ;;  f_state         2   18[BANK1 ] int 
 14137 ;; Auto vars:     Size  Location     Type
 14138 ;;		None
 14139 ;; Return value:  Size  Location     Type
 14140 ;;                  1    wreg      void 
 14141 ;; Registers used:
 14142 ;;		wreg, status,2, status,0, pclath, cstack
 14143 ;; Tracked objects:
 14144 ;;		On entry : 0/0
 14145 ;;		On exit  : 0/0
 14146 ;;		Unchanged: 0/0
 14147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14148 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14150 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14151 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14152 ;;Total ram usage:        4 bytes
 14153 ;; Hardware stack levels used:    1
 14154 ;; Hardware stack levels required when called:    5
 14155 ;; This function calls:
 14156 ;;		_updateSwitchBypassState
 14157 ;;		_wait_ms
 14158 ;; This function is called by:
 14159 ;;		_updateSwitchBypass
 14160 ;;		_setSwitchBypassState
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           
 14165                           ;psect for function _setSwitchBypassRelays
 14166  20A1                     _setSwitchBypassRelays:	
 14167                           
 14168                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 14169                           
 14170                           ;incstack = 0
 14171                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14172  20A1  0021               	movlb	1	; select bank1
 14173  20A2  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14174  20A3  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14175  20A4  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14176  20A5  0020               	movlb	0	; select bank0
 14177  20A6  00DF               	movwf	_switchBypass_state
 14178                           
 14179                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 14180  20A7  0021               	movlb	1	; select bank1
 14181  20A8  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14182  20A9  0027               	movlb	7	; select bank7
 14183  20AA  1C03               	skipc
 14184  20AB  110D               	bcf	13,2	;volatile
 14185  20AC  1803               	skipnc
 14186  20AD  150D               	bsf	13,2	;volatile
 14187                           
 14188                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 14189  20AE  0021               	movlb	1	; select bank1
 14190  20AF  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14191  20B0  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14192  20B1  1D03               	btfss	3,2
 14193  20B2  28B6               	goto	u8620
 14194  20B3  0027               	movlb	7	; select bank7
 14195  20B4  148D               	bsf	13,1	;volatile
 14196  20B5  28B8               	goto	l8214
 14197  20B6                     u8620:	
 14198  20B6  0027               	movlb	7	; select bank7
 14199  20B7  108D               	bcf	13,1	;volatile
 14200  20B8                     l8214:	
 14201                           
 14202                           ;SwitchBypass.c: 153: wait_ms(20);
 14203  20B8  3014               	movlw	20
 14204  20B9  0021               	movlb	1	; select bank1
 14205  20BA  00AC               	movwf	wait_ms@timeSec^(0+128)
 14206  20BB  3000               	movlw	0
 14207  20BC  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14208  20BD  31A0  206F  31A0   	fcall	_wait_ms
 14209                           
 14210                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 14211  20C0  0027               	movlb	7	; select bank7
 14212  20C1  110D               	bcf	13,2	;volatile
 14213                           
 14214                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 14215  20C2  108D               	bcf	13,1	;volatile
 14216                           
 14217                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 14218  20C3  0020               	movlb	0	; select bank0
 14219  20C4  085F               	movf	_switchBypass_state,w
 14220  20C5  0021               	movlb	1	; select bank1
 14221  20C6  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14222  20C7  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14223  20C8  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14224  20C9  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14225  20CA  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14226  20CB  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14227  20CC  3180  2002  31A0   	fcall	_updateSwitchBypassState
 14228                           
 14229                           ;SwitchBypass.c: 159: wait_ms(20);
 14230  20CF  3014               	movlw	20
 14231  20D0  0021               	movlb	1	; select bank1
 14232  20D1  00AC               	movwf	wait_ms@timeSec^(0+128)
 14233  20D2  3000               	movlw	0
 14234  20D3  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14235  20D4  31A0  206F         	fcall	_wait_ms
 14236  20D6  0008               	return
 14237  20D7                     __end_of_setSwitchBypassRelays:	
 14238                           
 14239                           	psect	text38
 14240  206F                     __ptext38:	
 14241 ;; *************** function _wait_ms *****************
 14242 ;; Defined at:
 14243 ;;		line 23 in file "system.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;  timemsl         4   14[BANK1 ] long 
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		wreg, status,2, status,0, pclath, cstack
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14257 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14258 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14260 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14261 ;;Total ram usage:        6 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    4
 14264 ;; This function calls:
 14265 ;;		___lmul
 14266 ;; This function is called by:
 14267 ;;		_ring_tactiles
 14268 ;;		_solidring_tactiles
 14269 ;;		_read_bottom_tactile
 14270 ;;		_read_top_tactile
 14271 ;;		_setSwitchBypassRelays
 14272 ;;		_setDoublePressState
 14273 ;;		_showError_Alternating
 14274 ;;		_show_error
 14275 ;;		_show_cancel
 14276 ;;		_star_tactiles
 14277 ;;		_initExpModeState
 14278 ;; This function uses a non-reentrant model
 14279 ;;
 14280                           
 14281                           
 14282                           ;psect for function _wait_ms
 14283  206F                     _wait_ms:	
 14284                           
 14285                           ;system.c: 25: long timemsl = 0;
 14286                           
 14287                           ;incstack = 0
 14288                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14289  206F  3000               	movlw	0
 14290  2070  0021               	movlb	1	; select bank1
 14291  2071  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14292  2072  3000               	movlw	0
 14293  2073  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14294  2074  3000               	movlw	0
 14295  2075  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14296  2076  3000               	movlw	0
 14297  2077  00AE               	movwf	wait_ms@timemsl^(0+128)
 14298                           
 14299                           ;system.c: 26: timemsl = timeSec * 1000l;
 14300  2078  082C               	movf	wait_ms@timeSec^(0+128),w
 14301  2079  00A0               	movwf	___lmul@multiplier^(0+128)
 14302  207A  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14303  207B  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14304  207C  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14305  207D  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14306  207E  3000               	movlw	0
 14307  207F  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14308  2080  3000               	movlw	0
 14309  2081  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14310  2082  3003               	movlw	3
 14311  2083  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14312  2084  30E8               	movlw	232
 14313  2085  00A4               	movwf	___lmul@multiplicand^(0+128)
 14314  2086  3190  2001  31A0   	fcall	___lmul
 14315  2089  0021               	movlb	1	; select bank1
 14316  208A  0823               	movf	(?___lmul+3)^(0+128),w
 14317  208B  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14318  208C  0822               	movf	(?___lmul+2)^(0+128),w
 14319  208D  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14320  208E  0821               	movf	(?___lmul+1)^(0+128),w
 14321  208F  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14322  2090  0820               	movf	?___lmul^(0+128),w
 14323  2091  00AE               	movwf	wait_ms@timemsl^(0+128)
 14324  2092                     l384:	
 14325                           ;system.c: 27: for( ; timemsl; timemsl--);
 14326                           
 14327  2092  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14328  2093  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14329  2094  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14330  2095  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14331  2096  1903               	btfsc	3,2
 14332  2097  0008               	return
 14333  2098  30FF               	movlw	255
 14334  2099  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14335  209A  30FF               	movlw	255
 14336  209B  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14337  209C  30FF               	movlw	255
 14338  209D  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14339  209E  30FF               	movlw	255
 14340  209F  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14341  20A0  2892               	goto	l384
 14342  20A1                     __end_of_wait_ms:	
 14343                           
 14344                           	psect	text39
 14345  1001                     __ptext39:	
 14346 ;; *************** function ___lmul *****************
 14347 ;; Defined at:
 14348 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14349 ;; Parameters:    Size  Location     Type
 14350 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14351 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14352 ;; Auto vars:     Size  Location     Type
 14353 ;;  product         4    8[BANK1 ] unsigned long 
 14354 ;; Return value:  Size  Location     Type
 14355 ;;                  4    0[BANK1 ] unsigned long 
 14356 ;; Registers used:
 14357 ;;		wreg, status,2, status,0
 14358 ;; Tracked objects:
 14359 ;;		On entry : 0/0
 14360 ;;		On exit  : 0/0
 14361 ;;		Unchanged: 0/0
 14362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14363 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14364 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14366 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14367 ;;Total ram usage:       12 bytes
 14368 ;; Hardware stack levels used:    1
 14369 ;; Hardware stack levels required when called:    3
 14370 ;; This function calls:
 14371 ;;		Nothing
 14372 ;; This function is called by:
 14373 ;;		_wait_ms
 14374 ;; This function uses a non-reentrant model
 14375 ;;
 14376                           
 14377                           
 14378                           ;psect for function ___lmul
 14379  1001                     ___lmul:	
 14380                           
 14381                           ;incstack = 0
 14382                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14383  1001  3000               	movlw	0
 14384  1002  0021               	movlb	1	; select bank1
 14385  1003  00AB               	movwf	(___lmul@product+3)^(0+128)
 14386  1004  3000               	movlw	0
 14387  1005  00AA               	movwf	(___lmul@product+2)^(0+128)
 14388  1006  3000               	movlw	0
 14389  1007  00A9               	movwf	(___lmul@product+1)^(0+128)
 14390  1008  3000               	movlw	0
 14391  1009  00A8               	movwf	___lmul@product^(0+128)
 14392  100A                     l7660:	
 14393  100A  1C20               	btfss	___lmul@multiplier^(0+128),0
 14394  100B  2814               	goto	l7664
 14395  100C  0824               	movf	___lmul@multiplicand^(0+128),w
 14396  100D  07A8               	addwf	___lmul@product^(0+128),f
 14397  100E  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14398  100F  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14399  1010  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14400  1011  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14401  1012  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14402  1013  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14403  1014                     l7664:	
 14404  1014  3001               	movlw	1
 14405  1015                     u7655:	
 14406  1015  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14407  1016  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14408  1017  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14409  1018  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14410  1019  0B89               	decfsz	9,f
 14411  101A  2815               	goto	u7655
 14412  101B  3001               	movlw	1
 14413  101C                     u7665:	
 14414  101C  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14415  101D  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14416  101E  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14417  101F  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14418  1020  0B89               	decfsz	9,f
 14419  1021  281C               	goto	u7665
 14420  1022  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14421  1023  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14422  1024  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14423  1025  0420               	iorwf	___lmul@multiplier^(0+128),w
 14424  1026  1D03               	skipz
 14425  1027  280A               	goto	l7660
 14426  1028  082B               	movf	(___lmul@product+3)^(0+128),w
 14427  1029  00A3               	movwf	(?___lmul+3)^(0+128)
 14428  102A  082A               	movf	(___lmul@product+2)^(0+128),w
 14429  102B  00A2               	movwf	(?___lmul+2)^(0+128)
 14430  102C  0829               	movf	(___lmul@product+1)^(0+128),w
 14431  102D  00A1               	movwf	(?___lmul+1)^(0+128)
 14432  102E  0828               	movf	___lmul@product^(0+128),w
 14433  102F  00A0               	movwf	?___lmul^(0+128)
 14434  1030  0008               	return
 14435  1031                     __end_of___lmul:	
 14436                           
 14437                           	psect	text40
 14438  0002                     __ptext40:	
 14439 ;; *************** function _updateSwitchBypassState *****************
 14440 ;; Defined at:
 14441 ;;		line 96 in file "state_manager.c"
 14442 ;; Parameters:    Size  Location     Type
 14443 ;;  state           2    0[BANK1 ] int 
 14444 ;; Auto vars:     Size  Location     Type
 14445 ;;		None
 14446 ;; Return value:  Size  Location     Type
 14447 ;;                  1    wreg      void 
 14448 ;; Registers used:
 14449 ;;		None
 14450 ;; Tracked objects:
 14451 ;;		On entry : 0/0
 14452 ;;		On exit  : 0/0
 14453 ;;		Unchanged: 0/0
 14454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14455 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14458 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14459 ;;Total ram usage:        2 bytes
 14460 ;; Hardware stack levels used:    1
 14461 ;; Hardware stack levels required when called:    3
 14462 ;; This function calls:
 14463 ;;		Nothing
 14464 ;; This function is called by:
 14465 ;;		_setSwitchBypassRelays
 14466 ;; This function uses a non-reentrant model
 14467 ;;
 14468                           
 14469                           
 14470                           ;psect for function _updateSwitchBypassState
 14471  0002                     _updateSwitchBypassState:	
 14472                           
 14473                           ;incstack = 0
 14474                           ; Regs used in _updateSwitchBypassState: []
 14475  0002  0008               	return
 14476  0003                     __end_of_updateSwitchBypassState:	
 14477                           
 14478                           	psect	text41
 14479  2D9C                     __ptext41:	
 14480 ;; *************** function _getSwitchBypassState *****************
 14481 ;; Defined at:
 14482 ;;		line 103 in file "state_manager.c"
 14483 ;; Parameters:    Size  Location     Type
 14484 ;;		None
 14485 ;; Auto vars:     Size  Location     Type
 14486 ;;		None
 14487 ;; Return value:  Size  Location     Type
 14488 ;;                  2    0[BANK1 ] int 
 14489 ;; Registers used:
 14490 ;;		status,2
 14491 ;; Tracked objects:
 14492 ;;		On entry : 0/0
 14493 ;;		On exit  : 0/0
 14494 ;;		Unchanged: 0/0
 14495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14496 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14499 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14500 ;;Total ram usage:        2 bytes
 14501 ;; Hardware stack levels used:    1
 14502 ;; Hardware stack levels required when called:    3
 14503 ;; This function calls:
 14504 ;;		Nothing
 14505 ;; This function is called by:
 14506 ;;		_initSwitchBypass
 14507 ;; This function uses a non-reentrant model
 14508 ;;
 14509                           
 14510                           
 14511                           ;psect for function _getSwitchBypassState
 14512  2D9C                     _getSwitchBypassState:	
 14513                           
 14514                           ;state_manager.c: 108: return 0;
 14515                           
 14516                           ;incstack = 0
 14517                           ; Regs used in _getSwitchBypassState: [status,2]
 14518  2D9C  0021               	movlb	1	; select bank1
 14519  2D9D  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14520  2D9E  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14521  2D9F  0008               	return
 14522  2DA0                     __end_of_getSwitchBypassState:	
 14523                           
 14524                           	psect	text42
 14525  2590                     __ptext42:	
 14526 ;; *************** function _getModulationDelayTime *****************
 14527 ;; Defined at:
 14528 ;;		line 35 in file "modulation.c"
 14529 ;; Parameters:    Size  Location     Type
 14530 ;;		None
 14531 ;; Auto vars:     Size  Location     Type
 14532 ;;  subDiv          2   14[BANK2 ] int 
 14533 ;; Return value:  Size  Location     Type
 14534 ;;                  1    wreg      void 
 14535 ;; Registers used:
 14536 ;;		wreg, status,2, status,0, pclath, cstack
 14537 ;; Tracked objects:
 14538 ;;		On entry : 0/0
 14539 ;;		On exit  : 0/0
 14540 ;;		Unchanged: 0/0
 14541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14543 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14545 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14546 ;;Total ram usage:        2 bytes
 14547 ;; Hardware stack levels used:    1
 14548 ;; Hardware stack levels required when called:    5
 14549 ;; This function calls:
 14550 ;;		___altoft
 14551 ;;		___awtoft
 14552 ;;		___ftdiv
 14553 ;;		___fttol
 14554 ;;		_getModulationSubdivision
 14555 ;; This function is called by:
 14556 ;;		_main
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560                           
 14561                           ;psect for function _getModulationDelayTime
 14562  2590                     _getModulationDelayTime:	
 14563                           
 14564                           ;modulation.c: 36: adjust_mod_delay = 0;
 14565                           
 14566                           ;incstack = 0
 14567                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14568  2590  0023               	movlb	3	; select bank3
 14569  2591  01BA               	clrf	_adjust_mod_delay^(0+384)
 14570                           
 14571                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14572  2592  31A0  203F  31A5   	fcall	_getModulationSubdivision
 14573  2595  0021               	movlb	1	; select bank1
 14574  2596  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14575  2597  0022               	movlb	2	; select bank2
 14576  2598  00AF               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14577  2599  0021               	movlb	1	; select bank1
 14578  259A  0820               	movf	?_getModulationSubdivision^(0+128),w
 14579  259B  0022               	movlb	2	; select bank2
 14580  259C  00AE               	movwf	getModulationDelayTime@subDiv^(0+256)
 14581                           
 14582                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14583  259D  0020               	movlb	0	; select bank0
 14584  259E  0855               	movf	_delay_time+3,w	;volatile
 14585  259F  0021               	movlb	1	; select bank1
 14586  25A0  00AB               	movwf	(___altoft@c+3)^(0+128)
 14587  25A1  0020               	movlb	0	; select bank0
 14588  25A2  0854               	movf	_delay_time+2,w	;volatile
 14589  25A3  0021               	movlb	1	; select bank1
 14590  25A4  00AA               	movwf	(___altoft@c+2)^(0+128)
 14591  25A5  0020               	movlb	0	; select bank0
 14592  25A6  0853               	movf	_delay_time+1,w	;volatile
 14593  25A7  0021               	movlb	1	; select bank1
 14594  25A8  00A9               	movwf	(___altoft@c+1)^(0+128)
 14595  25A9  0020               	movlb	0	; select bank0
 14596  25AA  0852               	movf	_delay_time,w	;volatile
 14597  25AB  0021               	movlb	1	; select bank1
 14598  25AC  00A8               	movwf	___altoft@c^(0+128)
 14599  25AD  31A1  21C0  31A5   	fcall	___altoft
 14600  25B0  0021               	movlb	1	; select bank1
 14601  25B1  0828               	movf	?___altoft^(0+128),w
 14602  25B2  00D1               	movwf	___ftdiv@f1^(0+128)
 14603  25B3  0829               	movf	(?___altoft+1)^(0+128),w
 14604  25B4  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14605  25B5  082A               	movf	(?___altoft+2)^(0+128),w
 14606  25B6  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14607  25B7  0022               	movlb	2	; select bank2
 14608  25B8  082F               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14609  25B9  0021               	movlb	1	; select bank1
 14610  25BA  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14611  25BB  0022               	movlb	2	; select bank2
 14612  25BC  082E               	movf	getModulationDelayTime@subDiv^(0+256),w
 14613  25BD  0021               	movlb	1	; select bank1
 14614  25BE  00A8               	movwf	___awtoft@c^(0+128)
 14615  25BF  31AE  26E2  31A5   	fcall	___awtoft
 14616  25C2  0021               	movlb	1	; select bank1
 14617  25C3  0828               	movf	?___awtoft^(0+128),w
 14618  25C4  00CE               	movwf	___ftdiv@f2^(0+128)
 14619  25C5  0829               	movf	(?___awtoft+1)^(0+128),w
 14620  25C6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14621  25C7  082A               	movf	(?___awtoft+2)^(0+128),w
 14622  25C8  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14623  25C9  319D  2528  31A5   	fcall	___ftdiv
 14624  25CC  0021               	movlb	1	; select bank1
 14625  25CD  084E               	movf	?___ftdiv^(0+128),w
 14626  25CE  0022               	movlb	2	; select bank2
 14627  25CF  00A0               	movwf	___fttol@f1^(0+256)
 14628  25D0  0021               	movlb	1	; select bank1
 14629  25D1  084F               	movf	(?___ftdiv+1)^(0+128),w
 14630  25D2  0022               	movlb	2	; select bank2
 14631  25D3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14632  25D4  0021               	movlb	1	; select bank1
 14633  25D5  0850               	movf	(?___ftdiv+2)^(0+128),w
 14634  25D6  0022               	movlb	2	; select bank2
 14635  25D7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14636  25D8  319A  2263         	fcall	___fttol
 14637  25DA  0022               	movlb	2	; select bank2
 14638  25DB  0821               	movf	(?___fttol^(0+256)+1),w
 14639  25DC  0023               	movlb	3	; select bank3
 14640  25DD  00DA               	movwf	(_mod_delay_time+1)^(0+384)
 14641  25DE  0022               	movlb	2	; select bank2
 14642  25DF  0820               	movf	?___fttol^(0+256),w
 14643  25E0  0023               	movlb	3	; select bank3
 14644  25E1  00D9               	movwf	_mod_delay_time^(0+384)
 14645  25E2  0008               	return
 14646  25E3                     __end_of_getModulationDelayTime:	
 14647                           
 14648                           	psect	text43
 14649  203F                     __ptext43:	
 14650 ;; *************** function _getModulationSubdivision *****************
 14651 ;; Defined at:
 14652 ;;		line 26 in file "modulation.c"
 14653 ;; Parameters:    Size  Location     Type
 14654 ;;		None
 14655 ;; Auto vars:     Size  Location     Type
 14656 ;;		None
 14657 ;; Return value:  Size  Location     Type
 14658 ;;                  2    0[BANK1 ] int 
 14659 ;; Registers used:
 14660 ;;		wreg, status,2, status,0
 14661 ;; Tracked objects:
 14662 ;;		On entry : 0/0
 14663 ;;		On exit  : 0/0
 14664 ;;		Unchanged: 0/0
 14665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14666 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14669 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14670 ;;Total ram usage:        2 bytes
 14671 ;; Hardware stack levels used:    1
 14672 ;; Hardware stack levels required when called:    3
 14673 ;; This function calls:
 14674 ;;		Nothing
 14675 ;; This function is called by:
 14676 ;;		_getModulationDelayTime
 14677 ;;		_updateModulationArray
 14678 ;; This function uses a non-reentrant model
 14679 ;;
 14680                           
 14681                           
 14682                           ;psect for function _getModulationSubdivision
 14683  203F                     _getModulationSubdivision:	
 14684                           
 14685                           ;modulation.c: 27: if (delay_time >= 2400) {
 14686                           
 14687                           ;incstack = 0
 14688                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14689  203F  0020               	movlb	0	; select bank0
 14690  2040  1BD5               	btfsc	_delay_time+3,7	;volatile
 14691  2041  2854               	goto	l8378
 14692  2042  0855               	movf	_delay_time+3,w	;volatile
 14693  2043  1D03               	btfss	3,2
 14694  2044  284E               	goto	l8372
 14695  2045  0854               	movf	_delay_time+2,w	;volatile
 14696  2046  1D03               	btfss	3,2
 14697  2047  284E               	goto	l8372
 14698  2048  3060               	movlw	96
 14699  2049  0252               	subwf	_delay_time,w	;volatile
 14700  204A  3009               	movlw	9
 14701  204B  3B53               	subwfb	_delay_time+1,w	;volatile
 14702  204C  1C03               	btfss	3,0
 14703  204D  2854               	goto	l8378
 14704  204E                     l8372:	
 14705                           
 14706                           ;modulation.c: 28: return 120;
 14707  204E  3078               	movlw	120
 14708  204F  0021               	movlb	1	; select bank1
 14709  2050  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14710  2051  3000               	movlw	0
 14711  2052  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14712                           
 14713                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14714  2053  0008               	return
 14715  2054                     l8378:	
 14716  2054  0020               	movlb	0	; select bank0
 14717  2055  1BD5               	btfsc	_delay_time+3,7	;volatile
 14718  2056  2869               	goto	l8386
 14719  2057  0855               	movf	_delay_time+3,w	;volatile
 14720  2058  1D03               	btfss	3,2
 14721  2059  2863               	goto	l8380
 14722  205A  0854               	movf	_delay_time+2,w	;volatile
 14723  205B  1D03               	btfss	3,2
 14724  205C  2863               	goto	l8380
 14725  205D  3058               	movlw	88
 14726  205E  0252               	subwf	_delay_time,w	;volatile
 14727  205F  3002               	movlw	2
 14728  2060  3B53               	subwfb	_delay_time+1,w	;volatile
 14729  2061  1C03               	btfss	3,0
 14730  2062  2869               	goto	l8386
 14731  2063                     l8380:	
 14732                           
 14733                           ;modulation.c: 30: return 60;
 14734  2063  303C               	movlw	60
 14735  2064  0021               	movlb	1	; select bank1
 14736  2065  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14737  2066  3000               	movlw	0
 14738  2067  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14739                           
 14740                           ;modulation.c: 31: } else {
 14741  2068  0008               	return
 14742  2069                     l8386:	
 14743                           
 14744                           ;modulation.c: 32: return 30;
 14745  2069  301E               	movlw	30
 14746  206A  0021               	movlb	1	; select bank1
 14747  206B  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14748  206C  3000               	movlw	0
 14749  206D  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14750  206E  0008               	return
 14751  206F                     __end_of_getModulationSubdivision:	
 14752                           
 14753                           	psect	text44
 14754  1859                     __ptext44:	
 14755 ;; *************** function _calcCosArray *****************
 14756 ;; Defined at:
 14757 ;;		line 18 in file "modulation.c"
 14758 ;; Parameters:    Size  Location     Type
 14759 ;;		None
 14760 ;; Auto vars:     Size  Location     Type
 14761 ;;  tmpVal          3   54[BANK2 ] int 
 14762 ;;  iAngle          1   57[BANK2 ] unsigned char 
 14763 ;; Return value:  Size  Location     Type
 14764 ;;                  1    wreg      void 
 14765 ;; Registers used:
 14766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14767 ;; Tracked objects:
 14768 ;;		On entry : 0/0
 14769 ;;		On exit  : 0/0
 14770 ;;		Unchanged: 0/0
 14771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14773 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14774 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14775 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14776 ;;Total ram usage:        8 bytes
 14777 ;; Hardware stack levels used:    1
 14778 ;; Hardware stack levels required when called:    8
 14779 ;; This function calls:
 14780 ;;		___awtoft
 14781 ;;		___ftdiv
 14782 ;;		___ftmul
 14783 ;;		___wmul
 14784 ;;		_cos
 14785 ;; This function is called by:
 14786 ;;		_main
 14787 ;; This function uses a non-reentrant model
 14788 ;;
 14789                           
 14790                           
 14791                           ;psect for function _calcCosArray
 14792  1859                     _calcCosArray:	
 14793                           
 14794                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14795                           
 14796                           ;incstack = 0
 14797                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14798  1859  0022               	movlb	2	; select bank2
 14799  185A  01D9               	clrf	calcCosArray@iAngle^(0+256)
 14800  185B                     L17:	
 14801  185B  3078               	movlw	120
 14802  185C  0259               	subwf	calcCosArray@iAngle^(0+256),w
 14803  185D  1803               	btfsc	3,0
 14804  185E  0008               	return
 14805                           
 14806                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14807  185F  3000               	movlw	0
 14808  1860  0021               	movlb	1	; select bank1
 14809  1861  00CE               	movwf	___ftdiv@f2^(0+128)
 14810  1862  3034               	movlw	52
 14811  1863  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14812  1864  3043               	movlw	67
 14813  1865  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14814  1866  3010               	movlw	16
 14815  1867  00AE               	movwf	___ftmul@f1^(0+128)
 14816  1868  3049               	movlw	73
 14817  1869  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14818  186A  3040               	movlw	64
 14819  186B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14820  186C  0022               	movlb	2	; select bank2
 14821  186D  0859               	movf	calcCosArray@iAngle^(0+256),w
 14822  186E  00D2               	movwf	??_calcCosArray^(0+256)
 14823  186F  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 14824  1870  0852               	movf	??_calcCosArray^(0+256),w
 14825  1871  00AE               	movwf	___wmul@multiplier^(0+256)
 14826  1872  0853               	movf	(??_calcCosArray+1)^(0+256),w
 14827  1873  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14828  1874  3003               	movlw	3
 14829  1875  00B0               	movwf	___wmul@multiplicand^(0+256)
 14830  1876  3000               	movlw	0
 14831  1877  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14832  1878  31AE  264E  3198   	fcall	___wmul
 14833  187B  0022               	movlb	2	; select bank2
 14834  187C  082F               	movf	(?___wmul+1)^(0+256),w
 14835  187D  0021               	movlb	1	; select bank1
 14836  187E  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14837  187F  0022               	movlb	2	; select bank2
 14838  1880  082E               	movf	?___wmul^(0+256),w
 14839  1881  0021               	movlb	1	; select bank1
 14840  1882  00A8               	movwf	___awtoft@c^(0+128)
 14841  1883  31AE  26E2  3198   	fcall	___awtoft
 14842  1886  0021               	movlb	1	; select bank1
 14843  1887  0828               	movf	?___awtoft^(0+128),w
 14844  1888  00B1               	movwf	___ftmul@f2^(0+128)
 14845  1889  0829               	movf	(?___awtoft+1)^(0+128),w
 14846  188A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14847  188B  082A               	movf	(?___awtoft+2)^(0+128),w
 14848  188C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14849  188D  3187  273B  3198   	fcall	___ftmul
 14850  1890  0021               	movlb	1	; select bank1
 14851  1891  082E               	movf	?___ftmul^(0+128),w
 14852  1892  00D1               	movwf	___ftdiv@f1^(0+128)
 14853  1893  082F               	movf	(?___ftmul+1)^(0+128),w
 14854  1894  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14855  1895  0830               	movf	(?___ftmul+2)^(0+128),w
 14856  1896  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14857  1897  319D  2528  3198   	fcall	___ftdiv
 14858  189A  0021               	movlb	1	; select bank1
 14859  189B  084E               	movf	?___ftdiv^(0+128),w
 14860  189C  0022               	movlb	2	; select bank2
 14861  189D  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 14862  189E  0021               	movlb	1	; select bank1
 14863  189F  084F               	movf	(?___ftdiv+1)^(0+128),w
 14864  18A0  0022               	movlb	2	; select bank2
 14865  18A1  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 14866  18A2  0021               	movlb	1	; select bank1
 14867  18A3  0850               	movf	(?___ftdiv+2)^(0+128),w
 14868  18A4  0022               	movlb	2	; select bank2
 14869  18A5  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 14870                           
 14871                           ;modulation.c: 21: tmpVal = cos(tmpVal);
 14872  18A6  0856               	movf	calcCosArray@tmpVal^(0+256),w
 14873  18A7  00CC               	movwf	cos@f^(0+256)
 14874  18A8  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 14875  18A9  00CD               	movwf	(cos@f+1)^(0+256)
 14876  18AA  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 14877  18AB  00CE               	movwf	(cos@f+2)^(0+256)
 14878  18AC  31A7  2784  3198   	fcall	_cos
 14879  18AF  0022               	movlb	2	; select bank2
 14880  18B0  084C               	movf	?_cos^(0+256),w
 14881  18B1  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 14882  18B2  084D               	movf	(?_cos+1)^(0+256),w
 14883  18B3  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 14884  18B4  084E               	movf	(?_cos+2)^(0+256),w
 14885  18B5  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 14886                           
 14887                           ;modulation.c: 22: cosArray[iAngle] = tmpVal;
 14888  18B6  0859               	movf	calcCosArray@iAngle^(0+256),w
 14889  18B7  00D2               	movwf	??_calcCosArray^(0+256)
 14890  18B8  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 14891  18B9  0852               	movf	??_calcCosArray^(0+256),w
 14892  18BA  00AE               	movwf	___wmul@multiplier^(0+256)
 14893  18BB  0853               	movf	(??_calcCosArray+1)^(0+256),w
 14894  18BC  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14895  18BD  3003               	movlw	3
 14896  18BE  00B0               	movwf	___wmul@multiplicand^(0+256)
 14897  18BF  3000               	movlw	0
 14898  18C0  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14899  18C1  31AE  264E  3198   	fcall	___wmul
 14900  18C4  3082               	movlw	130
 14901  18C5  0022               	movlb	2	; select bank2
 14902  18C6  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 14903  18C7  3024               	movlw	36
 14904  18C8  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 14905  18C9  082E               	movf	?___wmul^(0+256),w
 14906  18CA  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 14907  18CB  0086               	movwf	6
 14908  18CC  082F               	movf	(?___wmul+1)^(0+256),w
 14909  18CD  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 14910  18CE  0087               	movwf	7
 14911  18CF  0856               	movf	calcCosArray@tmpVal^(0+256),w
 14912  18D0  3FC0               	movwi [0]fsr1
 14913  18D1  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 14914  18D2  3FC1               	movwi [1]fsr1
 14915  18D3  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 14916  18D4  3FC2               	movwi [2]fsr1
 14917  18D5  3001               	movlw	1
 14918  18D6  00D2               	movwf	??_calcCosArray^(0+256)
 14919  18D7  0852               	movf	??_calcCosArray^(0+256),w
 14920  18D8  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 14921  18D9  285B               	goto	L17
 14922  18DA                     __end_of_calcCosArray:	
 14923                           
 14924                           	psect	text45
 14925  2784                     __ptext45:	
 14926 ;; *************** function _cos *****************
 14927 ;; Defined at:
 14928 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 14929 ;; Parameters:    Size  Location     Type
 14930 ;;  f               3   44[BANK2 ] void 
 14931 ;; Auto vars:     Size  Location     Type
 14932 ;;		None
 14933 ;; Return value:  Size  Location     Type
 14934 ;;                  3   44[BANK2 ] void 
 14935 ;; Registers used:
 14936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14937 ;; Tracked objects:
 14938 ;;		On entry : 0/0
 14939 ;;		On exit  : 0/0
 14940 ;;		Unchanged: 0/0
 14941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14942 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14943 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14945 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14946 ;;Total ram usage:        6 bytes
 14947 ;; Hardware stack levels used:    1
 14948 ;; Hardware stack levels required when called:    7
 14949 ;; This function calls:
 14950 ;;		___ftadd
 14951 ;;		___ftge
 14952 ;;		_sin
 14953 ;; This function is called by:
 14954 ;;		_calcCosArray
 14955 ;; This function uses a non-reentrant model
 14956 ;;
 14957                           
 14958                           
 14959                           ;psect for function _cos
 14960  2784                     _cos:	
 14961                           
 14962                           ;incstack = 0
 14963                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14964  2784  3010               	movlw	16
 14965  2785  0021               	movlb	1	; select bank1
 14966  2786  00A0               	movwf	___ftge@ff1^(0+128)
 14967  2787  3049               	movlw	73
 14968  2788  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14969  2789  3040               	movlw	64
 14970  278A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14971  278B  0022               	movlb	2	; select bank2
 14972  278C  084C               	movf	cos@f^(0+256),w
 14973  278D  0021               	movlb	1	; select bank1
 14974  278E  00A3               	movwf	___ftge@ff2^(0+128)
 14975  278F  0022               	movlb	2	; select bank2
 14976  2790  084D               	movf	(cos@f+1)^(0+256),w
 14977  2791  0021               	movlb	1	; select bank1
 14978  2792  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14979  2793  0022               	movlb	2	; select bank2
 14980  2794  084E               	movf	(cos@f+2)^(0+256),w
 14981  2795  0021               	movlb	1	; select bank1
 14982  2796  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14983  2797  31A1  2184  31A7   	fcall	___ftge
 14984  279A  1803               	btfsc	3,0
 14985  279B  2FCE               	goto	l8548
 14986  279C  30CC               	movlw	204
 14987  279D  0021               	movlb	1	; select bank1
 14988  279E  00C1               	movwf	___ftadd@f1^(0+128)
 14989  279F  3096               	movlw	150
 14990  27A0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14991  27A1  30C0               	movlw	192
 14992  27A2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14993  27A3  0022               	movlb	2	; select bank2
 14994  27A4  084C               	movf	cos@f^(0+256),w
 14995  27A5  0021               	movlb	1	; select bank1
 14996  27A6  00C4               	movwf	___ftadd@f2^(0+128)
 14997  27A7  0022               	movlb	2	; select bank2
 14998  27A8  084D               	movf	(cos@f+1)^(0+256),w
 14999  27A9  0021               	movlb	1	; select bank1
 15000  27AA  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15001  27AB  0022               	movlb	2	; select bank2
 15002  27AC  084E               	movf	(cos@f+2)^(0+256),w
 15003  27AD  0021               	movlb	1	; select bank1
 15004  27AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15005  27AF  3190  2031  31A7   	fcall	___ftadd
 15006  27B2  0021               	movlb	1	; select bank1
 15007  27B3  0841               	movf	?___ftadd^(0+128),w
 15008  27B4  0022               	movlb	2	; select bank2
 15009  27B5  00CF               	movwf	_cos$2858^(0+256)
 15010  27B6  0021               	movlb	1	; select bank1
 15011  27B7  0842               	movf	(?___ftadd+1)^(0+128),w
 15012  27B8  0022               	movlb	2	; select bank2
 15013  27B9  00D0               	movwf	(_cos$2858+1)^(0+256)
 15014  27BA  0021               	movlb	1	; select bank1
 15015  27BB  0843               	movf	(?___ftadd+2)^(0+128),w
 15016  27BC  0022               	movlb	2	; select bank2
 15017  27BD  00D1               	movwf	(_cos$2858+2)^(0+256)
 15018  27BE  084F               	movf	_cos$2858^(0+256),w
 15019  27BF  00BE               	movwf	sin@f^(0+256)
 15020  27C0  0850               	movf	(_cos$2858+1)^(0+256),w
 15021  27C1  00BF               	movwf	(sin@f+1)^(0+256)
 15022  27C2  0851               	movf	(_cos$2858+2)^(0+256),w
 15023  27C3  00C0               	movwf	(sin@f+2)^(0+256)
 15024  27C4  3188  2021         	fcall	_sin
 15025  27C6  0022               	movlb	2	; select bank2
 15026  27C7  083E               	movf	?_sin^(0+256),w
 15027  27C8  00CC               	movwf	?_cos^(0+256)
 15028  27C9  083F               	movf	(?_sin+1)^(0+256),w
 15029  27CA  00CD               	movwf	(?_cos+1)^(0+256)
 15030  27CB  0840               	movf	(?_sin+2)^(0+256),w
 15031  27CC  00CE               	movwf	(?_cos+2)^(0+256)
 15032  27CD  0008               	return
 15033  27CE                     l8548:	
 15034  27CE  3010               	movlw	16
 15035  27CF  0021               	movlb	1	; select bank1
 15036  27D0  00C1               	movwf	___ftadd@f1^(0+128)
 15037  27D1  30C9               	movlw	201
 15038  27D2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15039  27D3  303F               	movlw	63
 15040  27D4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15041  27D5  0022               	movlb	2	; select bank2
 15042  27D6  084C               	movf	cos@f^(0+256),w
 15043  27D7  0021               	movlb	1	; select bank1
 15044  27D8  00C4               	movwf	___ftadd@f2^(0+128)
 15045  27D9  0022               	movlb	2	; select bank2
 15046  27DA  084D               	movf	(cos@f+1)^(0+256),w
 15047  27DB  0021               	movlb	1	; select bank1
 15048  27DC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15049  27DD  0022               	movlb	2	; select bank2
 15050  27DE  084E               	movf	(cos@f+2)^(0+256),w
 15051  27DF  0021               	movlb	1	; select bank1
 15052  27E0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15053  27E1  3190  2031  31A7   	fcall	___ftadd
 15054  27E4  0021               	movlb	1	; select bank1
 15055  27E5  0841               	movf	?___ftadd^(0+128),w
 15056  27E6  0022               	movlb	2	; select bank2
 15057  27E7  00CF               	movwf	_cos$2858^(0+256)
 15058  27E8  0021               	movlb	1	; select bank1
 15059  27E9  0842               	movf	(?___ftadd+1)^(0+128),w
 15060  27EA  0022               	movlb	2	; select bank2
 15061  27EB  00D0               	movwf	(_cos$2858+1)^(0+256)
 15062  27EC  0021               	movlb	1	; select bank1
 15063  27ED  0843               	movf	(?___ftadd+2)^(0+128),w
 15064  27EE  0022               	movlb	2	; select bank2
 15065  27EF  00D1               	movwf	(_cos$2858+2)^(0+256)
 15066  27F0  084F               	movf	_cos$2858^(0+256),w
 15067  27F1  00BE               	movwf	sin@f^(0+256)
 15068  27F2  0850               	movf	(_cos$2858+1)^(0+256),w
 15069  27F3  00BF               	movwf	(sin@f+1)^(0+256)
 15070  27F4  0851               	movf	(_cos$2858+2)^(0+256),w
 15071  27F5  00C0               	movwf	(sin@f+2)^(0+256)
 15072  27F6  3188  2021         	fcall	_sin
 15073  27F8  0022               	movlb	2	; select bank2
 15074  27F9  083E               	movf	?_sin^(0+256),w
 15075  27FA  00CC               	movwf	?_cos^(0+256)
 15076  27FB  083F               	movf	(?_sin+1)^(0+256),w
 15077  27FC  00CD               	movwf	(?_cos+1)^(0+256)
 15078  27FD  0840               	movf	(?_sin+2)^(0+256),w
 15079  27FE  00CE               	movwf	(?_cos+2)^(0+256)
 15080  27FF  0008               	return
 15081  2800                     __end_of_cos:	
 15082                           
 15083                           	psect	text46
 15084  0821                     __ptext46:	
 15085 ;; *************** function _sin *****************
 15086 ;; Defined at:
 15087 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15088 ;; Parameters:    Size  Location     Type
 15089 ;;  f               3   30[BANK2 ] void 
 15090 ;; Auto vars:     Size  Location     Type
 15091 ;;  x2              3   40[BANK2 ] void 
 15092 ;;  y               3   34[BANK2 ] void 
 15093 ;;  sgn             1   43[BANK2 ] unsigned char 
 15094 ;; Return value:  Size  Location     Type
 15095 ;;                  3   30[BANK2 ] unsigned char 
 15096 ;; Registers used:
 15097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15098 ;; Tracked objects:
 15099 ;;		On entry : 0/0
 15100 ;;		On exit  : 0/0
 15101 ;;		Unchanged: 0/0
 15102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15103 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15104 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15105 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15106 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15107 ;;Total ram usage:       14 bytes
 15108 ;; Hardware stack levels used:    1
 15109 ;; Hardware stack levels required when called:    6
 15110 ;; This function calls:
 15111 ;;		___ftadd
 15112 ;;		___ftdiv
 15113 ;;		___ftge
 15114 ;;		___ftmul
 15115 ;;		___ftneg
 15116 ;;		___ftsub
 15117 ;;		_eval_poly
 15118 ;;		_floor
 15119 ;; This function is called by:
 15120 ;;		_cos
 15121 ;; This function uses a non-reentrant model
 15122 ;;
 15123                           
 15124                           
 15125                           ;psect for function _sin
 15126  0821                     _sin:	
 15127                           
 15128                           ;incstack = 0
 15129                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15130  0821  0022               	movlb	2	; select bank2
 15131  0822  01CB               	clrf	sin@sgn^(0+256)
 15132  0823  083E               	movf	sin@f^(0+256),w
 15133  0824  0021               	movlb	1	; select bank1
 15134  0825  00A0               	movwf	___ftge@ff1^(0+128)
 15135  0826  0022               	movlb	2	; select bank2
 15136  0827  083F               	movf	(sin@f+1)^(0+256),w
 15137  0828  0021               	movlb	1	; select bank1
 15138  0829  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15139  082A  0022               	movlb	2	; select bank2
 15140  082B  0840               	movf	(sin@f+2)^(0+256),w
 15141  082C  0021               	movlb	1	; select bank1
 15142  082D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15143  082E  3000               	movlw	0
 15144  082F  00A3               	movwf	___ftge@ff2^(0+128)
 15145  0830  3000               	movlw	0
 15146  0831  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15147  0832  3000               	movlw	0
 15148  0833  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15149  0834  31A1  2184  3188   	fcall	___ftge
 15150  0837  1803               	btfsc	3,0
 15151  0838  2856               	goto	l8258
 15152  0839  0022               	movlb	2	; select bank2
 15153  083A  083E               	movf	sin@f^(0+256),w
 15154  083B  0021               	movlb	1	; select bank1
 15155  083C  00BE               	movwf	___ftneg@f1^(0+128)
 15156  083D  0022               	movlb	2	; select bank2
 15157  083E  083F               	movf	(sin@f+1)^(0+256),w
 15158  083F  0021               	movlb	1	; select bank1
 15159  0840  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15160  0841  0022               	movlb	2	; select bank2
 15161  0842  0840               	movf	(sin@f+2)^(0+256),w
 15162  0843  0021               	movlb	1	; select bank1
 15163  0844  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15164  0845  31AD  25B0  3188   	fcall	___ftneg
 15165  0848  0021               	movlb	1	; select bank1
 15166  0849  083E               	movf	?___ftneg^(0+128),w
 15167  084A  0022               	movlb	2	; select bank2
 15168  084B  00BE               	movwf	sin@f^(0+256)
 15169  084C  0021               	movlb	1	; select bank1
 15170  084D  083F               	movf	(?___ftneg+1)^(0+128),w
 15171  084E  0022               	movlb	2	; select bank2
 15172  084F  00BF               	movwf	(sin@f+1)^(0+256)
 15173  0850  0021               	movlb	1	; select bank1
 15174  0851  0840               	movf	(?___ftneg+2)^(0+128),w
 15175  0852  0022               	movlb	2	; select bank2
 15176  0853  00C0               	movwf	(sin@f+2)^(0+256)
 15177  0854  01CB               	clrf	sin@sgn^(0+256)
 15178  0855  0ACB               	incf	sin@sgn^(0+256),f
 15179  0856                     l8258:	
 15180  0856  30FA               	movlw	250
 15181  0857  0021               	movlb	1	; select bank1
 15182  0858  00AE               	movwf	___ftmul@f1^(0+128)
 15183  0859  3022               	movlw	34
 15184  085A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15185  085B  303E               	movlw	62
 15186  085C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15187  085D  0022               	movlb	2	; select bank2
 15188  085E  083E               	movf	sin@f^(0+256),w
 15189  085F  0021               	movlb	1	; select bank1
 15190  0860  00B1               	movwf	___ftmul@f2^(0+128)
 15191  0861  0022               	movlb	2	; select bank2
 15192  0862  083F               	movf	(sin@f+1)^(0+256),w
 15193  0863  0021               	movlb	1	; select bank1
 15194  0864  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15195  0865  0022               	movlb	2	; select bank2
 15196  0866  0840               	movf	(sin@f+2)^(0+256),w
 15197  0867  0021               	movlb	1	; select bank1
 15198  0868  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15199  0869  3187  273B  3188   	fcall	___ftmul
 15200  086C  0021               	movlb	1	; select bank1
 15201  086D  082E               	movf	?___ftmul^(0+128),w
 15202  086E  0022               	movlb	2	; select bank2
 15203  086F  00BE               	movwf	sin@f^(0+256)
 15204  0870  0021               	movlb	1	; select bank1
 15205  0871  082F               	movf	(?___ftmul+1)^(0+128),w
 15206  0872  0022               	movlb	2	; select bank2
 15207  0873  00BF               	movwf	(sin@f+1)^(0+256)
 15208  0874  0021               	movlb	1	; select bank1
 15209  0875  0830               	movf	(?___ftmul+2)^(0+128),w
 15210  0876  0022               	movlb	2	; select bank2
 15211  0877  00C0               	movwf	(sin@f+2)^(0+256)
 15212  0878  083E               	movf	sin@f^(0+256),w
 15213  0879  00AE               	movwf	floor@x^(0+256)
 15214  087A  083F               	movf	(sin@f+1)^(0+256),w
 15215  087B  00AF               	movwf	(floor@x+1)^(0+256)
 15216  087C  0840               	movf	(sin@f+2)^(0+256),w
 15217  087D  00B0               	movwf	(floor@x+2)^(0+256)
 15218  087E  319E  267C  3188   	fcall	_floor
 15219  0881  0022               	movlb	2	; select bank2
 15220  0882  082E               	movf	?_floor^(0+256),w
 15221  0883  00B7               	movwf	___ftsub@f2^(0+256)
 15222  0884  082F               	movf	(?_floor+1)^(0+256),w
 15223  0885  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15224  0886  0830               	movf	(?_floor+2)^(0+256),w
 15225  0887  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15226  0888  083E               	movf	sin@f^(0+256),w
 15227  0889  00BA               	movwf	___ftsub@f1^(0+256)
 15228  088A  083F               	movf	(sin@f+1)^(0+256),w
 15229  088B  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15230  088C  0840               	movf	(sin@f+2)^(0+256),w
 15231  088D  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15232  088E  31AF  27A3  3188   	fcall	___ftsub
 15233  0891  0022               	movlb	2	; select bank2
 15234  0892  0837               	movf	?___ftsub^(0+256),w
 15235  0893  00BE               	movwf	sin@f^(0+256)
 15236  0894  0838               	movf	(?___ftsub+1)^(0+256),w
 15237  0895  00BF               	movwf	(sin@f+1)^(0+256)
 15238  0896  0839               	movf	(?___ftsub+2)^(0+256),w
 15239  0897  00C0               	movwf	(sin@f+2)^(0+256)
 15240  0898  3000               	movlw	0
 15241  0899  0021               	movlb	1	; select bank1
 15242  089A  00AE               	movwf	___ftmul@f1^(0+128)
 15243  089B  3080               	movlw	128
 15244  089C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15245  089D  3040               	movlw	64
 15246  089E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15247  089F  0022               	movlb	2	; select bank2
 15248  08A0  083E               	movf	sin@f^(0+256),w
 15249  08A1  0021               	movlb	1	; select bank1
 15250  08A2  00B1               	movwf	___ftmul@f2^(0+128)
 15251  08A3  0022               	movlb	2	; select bank2
 15252  08A4  083F               	movf	(sin@f+1)^(0+256),w
 15253  08A5  0021               	movlb	1	; select bank1
 15254  08A6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15255  08A7  0022               	movlb	2	; select bank2
 15256  08A8  0840               	movf	(sin@f+2)^(0+256),w
 15257  08A9  0021               	movlb	1	; select bank1
 15258  08AA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15259  08AB  3187  273B  3188   	fcall	___ftmul
 15260  08AE  0021               	movlb	1	; select bank1
 15261  08AF  082E               	movf	?___ftmul^(0+128),w
 15262  08B0  0022               	movlb	2	; select bank2
 15263  08B1  00BE               	movwf	sin@f^(0+256)
 15264  08B2  0021               	movlb	1	; select bank1
 15265  08B3  082F               	movf	(?___ftmul+1)^(0+128),w
 15266  08B4  0022               	movlb	2	; select bank2
 15267  08B5  00BF               	movwf	(sin@f+1)^(0+256)
 15268  08B6  0021               	movlb	1	; select bank1
 15269  08B7  0830               	movf	(?___ftmul+2)^(0+128),w
 15270  08B8  0022               	movlb	2	; select bank2
 15271  08B9  00C0               	movwf	(sin@f+2)^(0+256)
 15272  08BA  3000               	movlw	0
 15273  08BB  0021               	movlb	1	; select bank1
 15274  08BC  00A0               	movwf	___ftge@ff1^(0+128)
 15275  08BD  3000               	movlw	0
 15276  08BE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15277  08BF  3040               	movlw	64
 15278  08C0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15279  08C1  0022               	movlb	2	; select bank2
 15280  08C2  083E               	movf	sin@f^(0+256),w
 15281  08C3  0021               	movlb	1	; select bank1
 15282  08C4  00A3               	movwf	___ftge@ff2^(0+128)
 15283  08C5  0022               	movlb	2	; select bank2
 15284  08C6  083F               	movf	(sin@f+1)^(0+256),w
 15285  08C7  0021               	movlb	1	; select bank1
 15286  08C8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15287  08C9  0022               	movlb	2	; select bank2
 15288  08CA  0840               	movf	(sin@f+2)^(0+256),w
 15289  08CB  0021               	movlb	1	; select bank1
 15290  08CC  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15291  08CD  31A1  2184  3188   	fcall	___ftge
 15292  08D0  1803               	btfsc	3,0
 15293  08D1  28F2               	goto	l8270
 15294  08D2  3000               	movlw	0
 15295  08D3  0022               	movlb	2	; select bank2
 15296  08D4  00B7               	movwf	___ftsub@f2^(0+256)
 15297  08D5  3000               	movlw	0
 15298  08D6  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15299  08D7  3040               	movlw	64
 15300  08D8  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15301  08D9  083E               	movf	sin@f^(0+256),w
 15302  08DA  00BA               	movwf	___ftsub@f1^(0+256)
 15303  08DB  083F               	movf	(sin@f+1)^(0+256),w
 15304  08DC  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15305  08DD  0840               	movf	(sin@f+2)^(0+256),w
 15306  08DE  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15307  08DF  31AF  27A3  3188   	fcall	___ftsub
 15308  08E2  0022               	movlb	2	; select bank2
 15309  08E3  0837               	movf	?___ftsub^(0+256),w
 15310  08E4  00BE               	movwf	sin@f^(0+256)
 15311  08E5  0838               	movf	(?___ftsub+1)^(0+256),w
 15312  08E6  00BF               	movwf	(sin@f+1)^(0+256)
 15313  08E7  0839               	movf	(?___ftsub+2)^(0+256),w
 15314  08E8  00C0               	movwf	(sin@f+2)^(0+256)
 15315  08E9  084B               	movf	sin@sgn^(0+256),w
 15316  08EA  1D03               	btfss	3,2
 15317  08EB  28EE               	goto	u8680
 15318  08EC  3001               	movlw	1
 15319  08ED  28EF               	goto	u8690
 15320  08EE                     u8680:	
 15321  08EE  3000               	movlw	0
 15322  08EF                     u8690:	
 15323  08EF  00C1               	movwf	??_sin^(0+256)
 15324  08F0  0841               	movf	??_sin^(0+256),w
 15325  08F1  00CB               	movwf	sin@sgn^(0+256)
 15326  08F2                     l8270:	
 15327  08F2  3000               	movlw	0
 15328  08F3  0021               	movlb	1	; select bank1
 15329  08F4  00A0               	movwf	___ftge@ff1^(0+128)
 15330  08F5  3080               	movlw	128
 15331  08F6  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15332  08F7  303F               	movlw	63
 15333  08F8  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15334  08F9  0022               	movlb	2	; select bank2
 15335  08FA  083E               	movf	sin@f^(0+256),w
 15336  08FB  0021               	movlb	1	; select bank1
 15337  08FC  00A3               	movwf	___ftge@ff2^(0+128)
 15338  08FD  0022               	movlb	2	; select bank2
 15339  08FE  083F               	movf	(sin@f+1)^(0+256),w
 15340  08FF  0021               	movlb	1	; select bank1
 15341  0900  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15342  0901  0022               	movlb	2	; select bank2
 15343  0902  0840               	movf	(sin@f+2)^(0+256),w
 15344  0903  0021               	movlb	1	; select bank1
 15345  0904  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15346  0905  31A1  2184  3188   	fcall	___ftge
 15347  0908  1803               	btfsc	3,0
 15348  0909  2936               	goto	l2348
 15349  090A  3000               	movlw	0
 15350  090B  0021               	movlb	1	; select bank1
 15351  090C  00C1               	movwf	___ftadd@f1^(0+128)
 15352  090D  3000               	movlw	0
 15353  090E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15354  090F  3040               	movlw	64
 15355  0910  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15356  0911  0022               	movlb	2	; select bank2
 15357  0912  083E               	movf	sin@f^(0+256),w
 15358  0913  0021               	movlb	1	; select bank1
 15359  0914  00BE               	movwf	___ftneg@f1^(0+128)
 15360  0915  0022               	movlb	2	; select bank2
 15361  0916  083F               	movf	(sin@f+1)^(0+256),w
 15362  0917  0021               	movlb	1	; select bank1
 15363  0918  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15364  0919  0022               	movlb	2	; select bank2
 15365  091A  0840               	movf	(sin@f+2)^(0+256),w
 15366  091B  0021               	movlb	1	; select bank1
 15367  091C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15368  091D  31AD  25B0  3188   	fcall	___ftneg
 15369  0920  0021               	movlb	1	; select bank1
 15370  0921  083E               	movf	?___ftneg^(0+128),w
 15371  0922  00C4               	movwf	___ftadd@f2^(0+128)
 15372  0923  083F               	movf	(?___ftneg+1)^(0+128),w
 15373  0924  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15374  0925  0840               	movf	(?___ftneg+2)^(0+128),w
 15375  0926  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15376  0927  3190  2031  3188   	fcall	___ftadd
 15377  092A  0021               	movlb	1	; select bank1
 15378  092B  0841               	movf	?___ftadd^(0+128),w
 15379  092C  0022               	movlb	2	; select bank2
 15380  092D  00BE               	movwf	sin@f^(0+256)
 15381  092E  0021               	movlb	1	; select bank1
 15382  092F  0842               	movf	(?___ftadd+1)^(0+128),w
 15383  0930  0022               	movlb	2	; select bank2
 15384  0931  00BF               	movwf	(sin@f+1)^(0+256)
 15385  0932  0021               	movlb	1	; select bank1
 15386  0933  0843               	movf	(?___ftadd+2)^(0+128),w
 15387  0934  0022               	movlb	2	; select bank2
 15388  0935  00C0               	movwf	(sin@f+2)^(0+256)
 15389  0936                     l2348:	
 15390  0936  0022               	movlb	2	; select bank2
 15391  0937  083E               	movf	sin@f^(0+256),w
 15392  0938  0021               	movlb	1	; select bank1
 15393  0939  00AE               	movwf	___ftmul@f1^(0+128)
 15394  093A  0022               	movlb	2	; select bank2
 15395  093B  083F               	movf	(sin@f+1)^(0+256),w
 15396  093C  0021               	movlb	1	; select bank1
 15397  093D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15398  093E  0022               	movlb	2	; select bank2
 15399  093F  0840               	movf	(sin@f+2)^(0+256),w
 15400  0940  0021               	movlb	1	; select bank1
 15401  0941  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15402  0942  0022               	movlb	2	; select bank2
 15403  0943  083E               	movf	sin@f^(0+256),w
 15404  0944  0021               	movlb	1	; select bank1
 15405  0945  00B1               	movwf	___ftmul@f2^(0+128)
 15406  0946  0022               	movlb	2	; select bank2
 15407  0947  083F               	movf	(sin@f+1)^(0+256),w
 15408  0948  0021               	movlb	1	; select bank1
 15409  0949  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15410  094A  0022               	movlb	2	; select bank2
 15411  094B  0840               	movf	(sin@f+2)^(0+256),w
 15412  094C  0021               	movlb	1	; select bank1
 15413  094D  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15414  094E  3187  273B  3188   	fcall	___ftmul
 15415  0951  0021               	movlb	1	; select bank1
 15416  0952  082E               	movf	?___ftmul^(0+128),w
 15417  0953  0022               	movlb	2	; select bank2
 15418  0954  00C8               	movwf	sin@x2^(0+256)
 15419  0955  0021               	movlb	1	; select bank1
 15420  0956  082F               	movf	(?___ftmul+1)^(0+128),w
 15421  0957  0022               	movlb	2	; select bank2
 15422  0958  00C9               	movwf	(sin@x2+1)^(0+256)
 15423  0959  0021               	movlb	1	; select bank1
 15424  095A  0830               	movf	(?___ftmul+2)^(0+128),w
 15425  095B  0022               	movlb	2	; select bank2
 15426  095C  00CA               	movwf	(sin@x2+2)^(0+256)
 15427  095D  0848               	movf	sin@x2^(0+256),w
 15428  095E  00B4               	movwf	eval_poly@x^(0+256)
 15429  095F  0849               	movf	(sin@x2+1)^(0+256),w
 15430  0960  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15431  0961  084A               	movf	(sin@x2+2)^(0+256),w
 15432  0962  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15433  0963  3048               	movlw	low (sin@coeff_b| (0+32768))
 15434  0964  00B7               	movwf	eval_poly@d^(0+256)
 15435  0965  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15436  0966  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15437  0967  3003               	movlw	3
 15438  0968  00B9               	movwf	eval_poly@n^(0+256)
 15439  0969  3000               	movlw	0
 15440  096A  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15441  096B  31A6  269C  3188   	fcall	_eval_poly
 15442  096E  0022               	movlb	2	; select bank2
 15443  096F  0834               	movf	?_eval_poly^(0+256),w
 15444  0970  00C2               	movwf	sin@y^(0+256)
 15445  0971  0835               	movf	(?_eval_poly+1)^(0+256),w
 15446  0972  00C3               	movwf	(sin@y+1)^(0+256)
 15447  0973  0836               	movf	(?_eval_poly+2)^(0+256),w
 15448  0974  00C4               	movwf	(sin@y+2)^(0+256)
 15449  0975  3004               	movlw	4
 15450  0976  00B9               	movwf	eval_poly@n^(0+256)
 15451  0977  3000               	movlw	0
 15452  0978  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15453  0979  3039               	movlw	low (sin@coeff_a| (0+32768))
 15454  097A  00B7               	movwf	eval_poly@d^(0+256)
 15455  097B  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15456  097C  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15457  097D  0848               	movf	sin@x2^(0+256),w
 15458  097E  00B4               	movwf	eval_poly@x^(0+256)
 15459  097F  0849               	movf	(sin@x2+1)^(0+256),w
 15460  0980  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15461  0981  084A               	movf	(sin@x2+2)^(0+256),w
 15462  0982  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15463  0983  31A6  269C  3188   	fcall	_eval_poly
 15464  0986  0022               	movlb	2	; select bank2
 15465  0987  0834               	movf	?_eval_poly^(0+256),w
 15466  0988  0021               	movlb	1	; select bank1
 15467  0989  00D1               	movwf	___ftdiv@f1^(0+128)
 15468  098A  0022               	movlb	2	; select bank2
 15469  098B  0835               	movf	(?_eval_poly+1)^(0+256),w
 15470  098C  0021               	movlb	1	; select bank1
 15471  098D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15472  098E  0022               	movlb	2	; select bank2
 15473  098F  0836               	movf	(?_eval_poly+2)^(0+256),w
 15474  0990  0021               	movlb	1	; select bank1
 15475  0991  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15476  0992  0022               	movlb	2	; select bank2
 15477  0993  0842               	movf	sin@y^(0+256),w
 15478  0994  0021               	movlb	1	; select bank1
 15479  0995  00CE               	movwf	___ftdiv@f2^(0+128)
 15480  0996  0022               	movlb	2	; select bank2
 15481  0997  0843               	movf	(sin@y+1)^(0+256),w
 15482  0998  0021               	movlb	1	; select bank1
 15483  0999  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15484  099A  0022               	movlb	2	; select bank2
 15485  099B  0844               	movf	(sin@y+2)^(0+256),w
 15486  099C  0021               	movlb	1	; select bank1
 15487  099D  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15488  099E  319D  2528  3188   	fcall	___ftdiv
 15489  09A1  0021               	movlb	1	; select bank1
 15490  09A2  084E               	movf	?___ftdiv^(0+128),w
 15491  09A3  0022               	movlb	2	; select bank2
 15492  09A4  00C5               	movwf	_sin$2861^(0+256)
 15493  09A5  0021               	movlb	1	; select bank1
 15494  09A6  084F               	movf	(?___ftdiv+1)^(0+128),w
 15495  09A7  0022               	movlb	2	; select bank2
 15496  09A8  00C6               	movwf	(_sin$2861+1)^(0+256)
 15497  09A9  0021               	movlb	1	; select bank1
 15498  09AA  0850               	movf	(?___ftdiv+2)^(0+128),w
 15499  09AB  0022               	movlb	2	; select bank2
 15500  09AC  00C7               	movwf	(_sin$2861+2)^(0+256)
 15501  09AD  0845               	movf	_sin$2861^(0+256),w
 15502  09AE  0021               	movlb	1	; select bank1
 15503  09AF  00AE               	movwf	___ftmul@f1^(0+128)
 15504  09B0  0022               	movlb	2	; select bank2
 15505  09B1  0846               	movf	(_sin$2861+1)^(0+256),w
 15506  09B2  0021               	movlb	1	; select bank1
 15507  09B3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15508  09B4  0022               	movlb	2	; select bank2
 15509  09B5  0847               	movf	(_sin$2861+2)^(0+256),w
 15510  09B6  0021               	movlb	1	; select bank1
 15511  09B7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15512  09B8  0022               	movlb	2	; select bank2
 15513  09B9  083E               	movf	sin@f^(0+256),w
 15514  09BA  0021               	movlb	1	; select bank1
 15515  09BB  00B1               	movwf	___ftmul@f2^(0+128)
 15516  09BC  0022               	movlb	2	; select bank2
 15517  09BD  083F               	movf	(sin@f+1)^(0+256),w
 15518  09BE  0021               	movlb	1	; select bank1
 15519  09BF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15520  09C0  0022               	movlb	2	; select bank2
 15521  09C1  0840               	movf	(sin@f+2)^(0+256),w
 15522  09C2  0021               	movlb	1	; select bank1
 15523  09C3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15524  09C4  3187  273B  3188   	fcall	___ftmul
 15525  09C7  0021               	movlb	1	; select bank1
 15526  09C8  082E               	movf	?___ftmul^(0+128),w
 15527  09C9  0022               	movlb	2	; select bank2
 15528  09CA  00BE               	movwf	sin@f^(0+256)
 15529  09CB  0021               	movlb	1	; select bank1
 15530  09CC  082F               	movf	(?___ftmul+1)^(0+128),w
 15531  09CD  0022               	movlb	2	; select bank2
 15532  09CE  00BF               	movwf	(sin@f+1)^(0+256)
 15533  09CF  0021               	movlb	1	; select bank1
 15534  09D0  0830               	movf	(?___ftmul+2)^(0+128),w
 15535  09D1  0022               	movlb	2	; select bank2
 15536  09D2  00C0               	movwf	(sin@f+2)^(0+256)
 15537  09D3  084B               	movf	sin@sgn^(0+256),w
 15538  09D4  1903               	btfsc	3,2
 15539  09D5  0008               	return
 15540  09D6  083E               	movf	sin@f^(0+256),w
 15541  09D7  0021               	movlb	1	; select bank1
 15542  09D8  00BE               	movwf	___ftneg@f1^(0+128)
 15543  09D9  0022               	movlb	2	; select bank2
 15544  09DA  083F               	movf	(sin@f+1)^(0+256),w
 15545  09DB  0021               	movlb	1	; select bank1
 15546  09DC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15547  09DD  0022               	movlb	2	; select bank2
 15548  09DE  0840               	movf	(sin@f+2)^(0+256),w
 15549  09DF  0021               	movlb	1	; select bank1
 15550  09E0  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15551  09E1  31AD  25B0         	fcall	___ftneg
 15552  09E3  0021               	movlb	1	; select bank1
 15553  09E4  083E               	movf	?___ftneg^(0+128),w
 15554  09E5  0022               	movlb	2	; select bank2
 15555  09E6  00BE               	movwf	?_sin^(0+256)
 15556  09E7  0021               	movlb	1	; select bank1
 15557  09E8  083F               	movf	(?___ftneg+1)^(0+128),w
 15558  09E9  0022               	movlb	2	; select bank2
 15559  09EA  00BF               	movwf	(?_sin+1)^(0+256)
 15560  09EB  0021               	movlb	1	; select bank1
 15561  09EC  0840               	movf	(?___ftneg+2)^(0+128),w
 15562  09ED  0022               	movlb	2	; select bank2
 15563  09EE  00C0               	movwf	(?_sin+2)^(0+256)
 15564  09EF  0008               	return
 15565  09F0                     __end_of_sin:	
 15566                           
 15567                           	psect	text47
 15568  1E7C                     __ptext47:	
 15569 ;; *************** function _floor *****************
 15570 ;; Defined at:
 15571 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15572 ;; Parameters:    Size  Location     Type
 15573 ;;  x               3   14[BANK2 ] unsigned char 
 15574 ;; Auto vars:     Size  Location     Type
 15575 ;;  i               3   18[BANK2 ] unsigned char 
 15576 ;;  expon           2   21[BANK2 ] int 
 15577 ;; Return value:  Size  Location     Type
 15578 ;;                  3   14[BANK2 ] int 
 15579 ;; Registers used:
 15580 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15586 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15587 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15588 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15589 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15590 ;;Total ram usage:        9 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    5
 15593 ;; This function calls:
 15594 ;;		___altoft
 15595 ;;		___ftadd
 15596 ;;		___ftge
 15597 ;;		___fttol
 15598 ;;		_frexp
 15599 ;; This function is called by:
 15600 ;;		_sin
 15601 ;;		_exp
 15602 ;; This function uses a non-reentrant model
 15603 ;;
 15604                           
 15605                           
 15606                           ;psect for function _floor
 15607  1E7C                     _floor:	
 15608                           
 15609                           ;incstack = 0
 15610                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15611  1E7C  0022               	movlb	2	; select bank2
 15612  1E7D  082E               	movf	floor@x^(0+256),w
 15613  1E7E  0021               	movlb	1	; select bank1
 15614  1E7F  00A0               	movwf	frexp@value^(0+128)
 15615  1E80  0022               	movlb	2	; select bank2
 15616  1E81  082F               	movf	(floor@x+1)^(0+256),w
 15617  1E82  0021               	movlb	1	; select bank1
 15618  1E83  00A1               	movwf	(frexp@value+1)^(0+128)
 15619  1E84  0022               	movlb	2	; select bank2
 15620  1E85  0830               	movf	(floor@x+2)^(0+256),w
 15621  1E86  0021               	movlb	1	; select bank1
 15622  1E87  00A2               	movwf	(frexp@value+2)^(0+128)
 15623  1E88  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15624  1E89  0022               	movlb	2	; select bank2
 15625  1E8A  00B1               	movwf	??_floor^(0+256)
 15626  1E8B  0831               	movf	??_floor^(0+256),w
 15627  1E8C  0021               	movlb	1	; select bank1
 15628  1E8D  00A3               	movwf	frexp@eptr^(0+128)
 15629  1E8E  31A2  2277  319E   	fcall	_frexp
 15630  1E91  0022               	movlb	2	; select bank2
 15631  1E92  1FB6               	btfss	(floor@expon+1)^(0+256),7
 15632  1E93  2EBA               	goto	l8106
 15633  1E94  082E               	movf	floor@x^(0+256),w
 15634  1E95  0021               	movlb	1	; select bank1
 15635  1E96  00A0               	movwf	___ftge@ff1^(0+128)
 15636  1E97  0022               	movlb	2	; select bank2
 15637  1E98  082F               	movf	(floor@x+1)^(0+256),w
 15638  1E99  0021               	movlb	1	; select bank1
 15639  1E9A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15640  1E9B  0022               	movlb	2	; select bank2
 15641  1E9C  0830               	movf	(floor@x+2)^(0+256),w
 15642  1E9D  0021               	movlb	1	; select bank1
 15643  1E9E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15644  1E9F  3000               	movlw	0
 15645  1EA0  00A3               	movwf	___ftge@ff2^(0+128)
 15646  1EA1  3000               	movlw	0
 15647  1EA2  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15648  1EA3  3000               	movlw	0
 15649  1EA4  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15650  1EA5  31A1  2184  319E   	fcall	___ftge
 15651  1EA8  1803               	btfsc	3,0
 15652  1EA9  2EB2               	goto	l8102
 15653  1EAA  3000               	movlw	0
 15654  1EAB  0022               	movlb	2	; select bank2
 15655  1EAC  00AE               	movwf	?_floor^(0+256)
 15656  1EAD  3080               	movlw	128
 15657  1EAE  00AF               	movwf	(?_floor+1)^(0+256)
 15658  1EAF  30BF               	movlw	191
 15659  1EB0  00B0               	movwf	(?_floor+2)^(0+256)
 15660  1EB1  0008               	return
 15661  1EB2                     l8102:	
 15662  1EB2  3000               	movlw	0
 15663  1EB3  0022               	movlb	2	; select bank2
 15664  1EB4  00AE               	movwf	?_floor^(0+256)
 15665  1EB5  3000               	movlw	0
 15666  1EB6  00AF               	movwf	(?_floor+1)^(0+256)
 15667  1EB7  3000               	movlw	0
 15668  1EB8  00B0               	movwf	(?_floor+2)^(0+256)
 15669  1EB9  0008               	return
 15670  1EBA                     l8106:	
 15671  1EBA  3000               	movlw	0
 15672  1EBB  0236               	subwf	(floor@expon+1)^(0+256),w
 15673  1EBC  3015               	movlw	21
 15674  1EBD  1903               	skipnz
 15675  1EBE  0235               	subwf	floor@expon^(0+256),w
 15676  1EBF  1803               	btfsc	3,0
 15677  1EC0  0008               	return
 15678  1EC1  082E               	movf	floor@x^(0+256),w
 15679  1EC2  00A0               	movwf	___fttol@f1^(0+256)
 15680  1EC3  082F               	movf	(floor@x+1)^(0+256),w
 15681  1EC4  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15682  1EC5  0830               	movf	(floor@x+2)^(0+256),w
 15683  1EC6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15684  1EC7  319A  2263  319E   	fcall	___fttol
 15685  1ECA  0022               	movlb	2	; select bank2
 15686  1ECB  0823               	movf	(?___fttol+3)^(0+256),w
 15687  1ECC  0021               	movlb	1	; select bank1
 15688  1ECD  00AB               	movwf	(___altoft@c+3)^(0+128)
 15689  1ECE  0022               	movlb	2	; select bank2
 15690  1ECF  0822               	movf	(?___fttol+2)^(0+256),w
 15691  1ED0  0021               	movlb	1	; select bank1
 15692  1ED1  00AA               	movwf	(___altoft@c+2)^(0+128)
 15693  1ED2  0022               	movlb	2	; select bank2
 15694  1ED3  0821               	movf	(?___fttol+1)^(0+256),w
 15695  1ED4  0021               	movlb	1	; select bank1
 15696  1ED5  00A9               	movwf	(___altoft@c+1)^(0+128)
 15697  1ED6  0022               	movlb	2	; select bank2
 15698  1ED7  0820               	movf	?___fttol^(0+256),w
 15699  1ED8  0021               	movlb	1	; select bank1
 15700  1ED9  00A8               	movwf	___altoft@c^(0+128)
 15701  1EDA  31A1  21C0  319E   	fcall	___altoft
 15702  1EDD  0021               	movlb	1	; select bank1
 15703  1EDE  0828               	movf	?___altoft^(0+128),w
 15704  1EDF  0022               	movlb	2	; select bank2
 15705  1EE0  00B2               	movwf	floor@i^(0+256)
 15706  1EE1  0021               	movlb	1	; select bank1
 15707  1EE2  0829               	movf	(?___altoft+1)^(0+128),w
 15708  1EE3  0022               	movlb	2	; select bank2
 15709  1EE4  00B3               	movwf	(floor@i+1)^(0+256)
 15710  1EE5  0021               	movlb	1	; select bank1
 15711  1EE6  082A               	movf	(?___altoft+2)^(0+128),w
 15712  1EE7  0022               	movlb	2	; select bank2
 15713  1EE8  00B4               	movwf	(floor@i+2)^(0+256)
 15714  1EE9  082E               	movf	floor@x^(0+256),w
 15715  1EEA  0021               	movlb	1	; select bank1
 15716  1EEB  00A0               	movwf	___ftge@ff1^(0+128)
 15717  1EEC  0022               	movlb	2	; select bank2
 15718  1EED  082F               	movf	(floor@x+1)^(0+256),w
 15719  1EEE  0021               	movlb	1	; select bank1
 15720  1EEF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15721  1EF0  0022               	movlb	2	; select bank2
 15722  1EF1  0830               	movf	(floor@x+2)^(0+256),w
 15723  1EF2  0021               	movlb	1	; select bank1
 15724  1EF3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15725  1EF4  0022               	movlb	2	; select bank2
 15726  1EF5  0832               	movf	floor@i^(0+256),w
 15727  1EF6  0021               	movlb	1	; select bank1
 15728  1EF7  00A3               	movwf	___ftge@ff2^(0+128)
 15729  1EF8  0022               	movlb	2	; select bank2
 15730  1EF9  0833               	movf	(floor@i+1)^(0+256),w
 15731  1EFA  0021               	movlb	1	; select bank1
 15732  1EFB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15733  1EFC  0022               	movlb	2	; select bank2
 15734  1EFD  0834               	movf	(floor@i+2)^(0+256),w
 15735  1EFE  0021               	movlb	1	; select bank1
 15736  1EFF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15737  1F00  31A1  2184  319E   	fcall	___ftge
 15738  1F03  1803               	btfsc	3,0
 15739  1F04  2F27               	goto	l8116
 15740  1F05  3000               	movlw	0
 15741  1F06  0021               	movlb	1	; select bank1
 15742  1F07  00C1               	movwf	___ftadd@f1^(0+128)
 15743  1F08  3080               	movlw	128
 15744  1F09  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15745  1F0A  30BF               	movlw	191
 15746  1F0B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15747  1F0C  0022               	movlb	2	; select bank2
 15748  1F0D  0832               	movf	floor@i^(0+256),w
 15749  1F0E  0021               	movlb	1	; select bank1
 15750  1F0F  00C4               	movwf	___ftadd@f2^(0+128)
 15751  1F10  0022               	movlb	2	; select bank2
 15752  1F11  0833               	movf	(floor@i+1)^(0+256),w
 15753  1F12  0021               	movlb	1	; select bank1
 15754  1F13  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15755  1F14  0022               	movlb	2	; select bank2
 15756  1F15  0834               	movf	(floor@i+2)^(0+256),w
 15757  1F16  0021               	movlb	1	; select bank1
 15758  1F17  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15759  1F18  3190  2031         	fcall	___ftadd
 15760  1F1A  0021               	movlb	1	; select bank1
 15761  1F1B  0841               	movf	?___ftadd^(0+128),w
 15762  1F1C  0022               	movlb	2	; select bank2
 15763  1F1D  00AE               	movwf	?_floor^(0+256)
 15764  1F1E  0021               	movlb	1	; select bank1
 15765  1F1F  0842               	movf	(?___ftadd+1)^(0+128),w
 15766  1F20  0022               	movlb	2	; select bank2
 15767  1F21  00AF               	movwf	(?_floor+1)^(0+256)
 15768  1F22  0021               	movlb	1	; select bank1
 15769  1F23  0843               	movf	(?___ftadd+2)^(0+128),w
 15770  1F24  0022               	movlb	2	; select bank2
 15771  1F25  00B0               	movwf	(?_floor+2)^(0+256)
 15772  1F26  0008               	return
 15773  1F27                     l8116:	
 15774  1F27  0022               	movlb	2	; select bank2
 15775  1F28  0832               	movf	floor@i^(0+256),w
 15776  1F29  00AE               	movwf	?_floor^(0+256)
 15777  1F2A  0833               	movf	(floor@i+1)^(0+256),w
 15778  1F2B  00AF               	movwf	(?_floor+1)^(0+256)
 15779  1F2C  0834               	movf	(floor@i+2)^(0+256),w
 15780  1F2D  00B0               	movwf	(?_floor+2)^(0+256)
 15781  1F2E  0008               	return
 15782  1F2F                     __end_of_floor:	
 15783                           
 15784                           	psect	text48
 15785  2277                     __ptext48:	
 15786 ;; *************** function _frexp *****************
 15787 ;; Defined at:
 15788 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15789 ;; Parameters:    Size  Location     Type
 15790 ;;  value           3    0[BANK1 ] int 
 15791 ;;  eptr            1    3[BANK1 ] PTR int 
 15792 ;;		 -> log@exponent(2), floor@expon(2), 
 15793 ;; Auto vars:     Size  Location     Type
 15794 ;;		None
 15795 ;; Return value:  Size  Location     Type
 15796 ;;                  3    0[BANK1 ] PTR int 
 15797 ;; Registers used:
 15798 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15799 ;; Tracked objects:
 15800 ;;		On entry : 0/0
 15801 ;;		On exit  : 0/0
 15802 ;;		Unchanged: 0/0
 15803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15804 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15806 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15807 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15808 ;;Total ram usage:        6 bytes
 15809 ;; Hardware stack levels used:    1
 15810 ;; Hardware stack levels required when called:    3
 15811 ;; This function calls:
 15812 ;;		Nothing
 15813 ;; This function is called by:
 15814 ;;		_floor
 15815 ;;		_log
 15816 ;; This function uses a non-reentrant model
 15817 ;;
 15818                           
 15819                           
 15820                           ;psect for function _frexp
 15821  2277                     _frexp:	
 15822                           
 15823                           ;incstack = 0
 15824                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15825  2277  0021               	movlb	1	; select bank1
 15826  2278  0822               	movf	(frexp@value+2)^(0+128),w
 15827  2279  0421               	iorwf	(frexp@value+1)^(0+128),w
 15828  227A  0420               	iorwf	frexp@value^(0+128),w
 15829  227B  1D03               	skipz
 15830  227C  2A8B               	goto	l7968
 15831  227D  0823               	movf	frexp@eptr^(0+128),w
 15832  227E  0086               	movwf	6
 15833  227F  3001               	movlw	1	; select bank2/3
 15834  2280  0087               	movwf	7
 15835  2281  3000               	movlw	0
 15836  2282  3FC0               	movwi [0]fsr1
 15837  2283  3FC1               	movwi [1]fsr1
 15838  2284  3000               	movlw	0
 15839  2285  00A0               	movwf	?_frexp^(0+128)
 15840  2286  3000               	movlw	0
 15841  2287  00A1               	movwf	(?_frexp+1)^(0+128)
 15842  2288  3000               	movlw	0
 15843  2289  00A2               	movwf	(?_frexp+2)^(0+128)
 15844  228A  0008               	return
 15845  228B                     l7968:	
 15846  228B  0822               	movf	(frexp@value^(0+128)+2),w
 15847  228C  397F               	andlw	127
 15848  228D  00A4               	movwf	??_frexp^(0+128)
 15849  228E  01A5               	clrf	(??_frexp^(0+128)+1)
 15850  228F  35A4               	lslf	??_frexp^(0+128),f
 15851  2290  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15852  2291  0823               	movf	frexp@eptr^(0+128),w
 15853  2292  0086               	movwf	6
 15854  2293  3001               	movlw	1	; select bank2/3
 15855  2294  0087               	movwf	7
 15856  2295  0824               	movf	??_frexp^(0+128),w
 15857  2296  3FC0               	movwi [0]fsr1
 15858  2297  0825               	movf	(??_frexp+1)^(0+128),w
 15859  2298  3FC1               	movwi [1]fsr1
 15860  2299  0D21               	rlf	(frexp@value^(0+128)+1),w
 15861  229A  0D21               	rlf	(frexp@value^(0+128)+1),w
 15862  229B  3901               	andlw	1
 15863  229C  00A4               	movwf	??_frexp^(0+128)
 15864  229D  01A5               	clrf	(??_frexp^(0+128)+1)
 15865  229E  0823               	movf	frexp@eptr^(0+128),w
 15866  229F  0086               	movwf	6
 15867  22A0  3001               	movlw	1	; select bank2/3
 15868  22A1  0087               	movwf	7
 15869  22A2  0824               	movf	??_frexp^(0+128),w
 15870  22A3  0481               	iorwf	1,f
 15871  22A4  3141               	addfsr 1,1
 15872  22A5  0825               	movf	(??_frexp+1)^(0+128),w
 15873  22A6  0481               	iorwf	1,f
 15874  22A7  0823               	movf	frexp@eptr^(0+128),w
 15875  22A8  0086               	movwf	6
 15876  22A9  3001               	movlw	1	; select bank2/3
 15877  22AA  0087               	movwf	7
 15878  22AB  3082               	movlw	130
 15879  22AC  0781               	addwf	1,f
 15880  22AD  3141               	addfsr 1,1
 15881  22AE  30FF               	movlw	255
 15882  22AF  3D81               	addwfc	1,f
 15883  22B0  317F               	addfsr 1,-1
 15884  22B1  0822               	movf	(frexp@value^(0+128)+2),w
 15885  22B2  3980               	andlw	-128
 15886  22B3  383F               	iorlw	63
 15887  22B4  00A2               	movwf	(frexp@value^(0+128)+2)
 15888  22B5  13A1               	bcf	(frexp@value^(0+128)+1),7
 15889  22B6  0008               	return
 15890  22B7                     __end_of_frexp:	
 15891                           
 15892                           	psect	text49
 15893  1A63                     __ptext49:	
 15894 ;; *************** function ___fttol *****************
 15895 ;; Defined at:
 15896 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15897 ;; Parameters:    Size  Location     Type
 15898 ;;  f1              3    0[BANK2 ] float 
 15899 ;; Auto vars:     Size  Location     Type
 15900 ;;  lval            4    9[BANK2 ] unsigned long 
 15901 ;;  exp1            1   13[BANK2 ] unsigned char 
 15902 ;;  sign1           1    8[BANK2 ] unsigned char 
 15903 ;; Return value:  Size  Location     Type
 15904 ;;                  4    0[BANK2 ] long 
 15905 ;; Registers used:
 15906 ;;		wreg, status,2, status,0
 15907 ;; Tracked objects:
 15908 ;;		On entry : 0/0
 15909 ;;		On exit  : 0/0
 15910 ;;		Unchanged: 0/0
 15911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15912 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15913 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15914 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15915 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15916 ;;Total ram usage:       14 bytes
 15917 ;; Hardware stack levels used:    1
 15918 ;; Hardware stack levels required when called:    3
 15919 ;; This function calls:
 15920 ;;		Nothing
 15921 ;; This function is called by:
 15922 ;;		_main
 15923 ;;		_set_subdivision
 15924 ;;		_scaleA100kPot
 15925 ;;		_scaleA10kPot
 15926 ;;		_scaleiA10kPot
 15927 ;;		_getModulationDelayTime
 15928 ;;		_modCos
 15929 ;;		_modTri
 15930 ;;		_modSaw
 15931 ;;		_pow
 15932 ;;		_exp
 15933 ;;		_floor
 15934 ;;		_scaleiA100kPot
 15935 ;; This function uses a non-reentrant model
 15936 ;;
 15937                           
 15938                           
 15939                           ;psect for function ___fttol
 15940  1A63                     ___fttol:	
 15941                           
 15942                           ;incstack = 0
 15943                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15944  1A63  0022               	movlb	2	; select bank2
 15945  1A64  0820               	movf	___fttol@f1^(0+256),w
 15946  1A65  00A4               	movwf	??___fttol^(0+256)
 15947  1A66  0821               	movf	(___fttol@f1+1)^(0+256),w
 15948  1A67  00A5               	movwf	(??___fttol^(0+256)+1)
 15949  1A68  0822               	movf	(___fttol@f1+2)^(0+256),w
 15950  1A69  00A6               	movwf	(??___fttol^(0+256)+2)
 15951  1A6A  1003               	clrc
 15952  1A6B  0D25               	rlf	(??___fttol^(0+256)+1),w
 15953  1A6C  0D26               	rlf	(??___fttol^(0+256)+2),w
 15954  1A6D  00A7               	movwf	(??___fttol+3)^(0+256)
 15955  1A6E  0827               	movf	(??___fttol+3)^(0+256),w
 15956  1A6F  00AD               	movwf	___fttol@exp1^(0+256)
 15957  1A70  082D               	movf	___fttol@exp1^(0+256),w
 15958  1A71  1D03               	btfss	3,2
 15959  1A72  2A7C               	goto	l7924
 15960  1A73  3000               	movlw	0
 15961  1A74  00A3               	movwf	(?___fttol+3)^(0+256)
 15962  1A75  3000               	movlw	0
 15963  1A76  00A2               	movwf	(?___fttol+2)^(0+256)
 15964  1A77  3000               	movlw	0
 15965  1A78  00A1               	movwf	(?___fttol+1)^(0+256)
 15966  1A79  3000               	movlw	0
 15967  1A7A  00A0               	movwf	?___fttol^(0+256)
 15968  1A7B  0008               	return
 15969  1A7C                     l7924:	
 15970  1A7C  0820               	movf	___fttol@f1^(0+256),w
 15971  1A7D  00A4               	movwf	??___fttol^(0+256)
 15972  1A7E  0821               	movf	(___fttol@f1+1)^(0+256),w
 15973  1A7F  00A5               	movwf	(??___fttol^(0+256)+1)
 15974  1A80  0822               	movf	(___fttol@f1+2)^(0+256),w
 15975  1A81  00A6               	movwf	(??___fttol^(0+256)+2)
 15976  1A82  3017               	movlw	23
 15977  1A83                     u8285:	
 15978  1A83  36A6               	lsrf	(??___fttol^(0+256)+2),f
 15979  1A84  0CA5               	rrf	(??___fttol^(0+256)+1),f
 15980  1A85  0CA4               	rrf	??___fttol^(0+256),f
 15981  1A86  0B89               	decfsz	9,f
 15982  1A87  2A83               	goto	u8285
 15983  1A88  0824               	movf	??___fttol^(0+256),w
 15984  1A89  00A7               	movwf	(??___fttol+3)^(0+256)
 15985  1A8A  0827               	movf	(??___fttol+3)^(0+256),w
 15986  1A8B  00A8               	movwf	___fttol@sign1^(0+256)
 15987  1A8C  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 15988  1A8D  30FF               	movlw	255
 15989  1A8E  05A0               	andwf	___fttol@f1^(0+256),f
 15990  1A8F  30FF               	movlw	255
 15991  1A90  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 15992  1A91  3000               	movlw	0
 15993  1A92  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 15994  1A93  0820               	movf	___fttol@f1^(0+256),w
 15995  1A94  00A9               	movwf	___fttol@lval^(0+256)
 15996  1A95  0821               	movf	(___fttol@f1+1)^(0+256),w
 15997  1A96  00AA               	movwf	(___fttol@lval^(0+256)+1)
 15998  1A97  0822               	movf	(___fttol@f1+2)^(0+256),w
 15999  1A98  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16000  1A99  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16001  1A9A  308E               	movlw	142
 16002  1A9B  02AD               	subwf	___fttol@exp1^(0+256),f
 16003  1A9C  1FAD               	btfss	___fttol@exp1^(0+256),7
 16004  1A9D  2ABA               	goto	l7944
 16005  1A9E  082D               	movf	___fttol@exp1^(0+256),w
 16006  1A9F  3A80               	xorlw	128
 16007  1AA0  3E8F               	addlw	143
 16008  1AA1  1803               	skipnc
 16009  1AA2  2AAC               	goto	l7942
 16010  1AA3  3000               	movlw	0
 16011  1AA4  00A3               	movwf	(?___fttol+3)^(0+256)
 16012  1AA5  3000               	movlw	0
 16013  1AA6  00A2               	movwf	(?___fttol+2)^(0+256)
 16014  1AA7  3000               	movlw	0
 16015  1AA8  00A1               	movwf	(?___fttol+1)^(0+256)
 16016  1AA9  3000               	movlw	0
 16017  1AAA  00A0               	movwf	?___fttol^(0+256)
 16018  1AAB  0008               	return
 16019  1AAC                     l7942:	
 16020  1AAC  3001               	movlw	1
 16021  1AAD                     u8315:	
 16022  1AAD  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16023  1AAE  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16024  1AAF  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16025  1AB0  0CA9               	rrf	___fttol@lval^(0+256),f
 16026  1AB1  0B89               	decfsz	9,f
 16027  1AB2  2AAD               	goto	u8315
 16028  1AB3  3001               	movlw	1
 16029  1AB4  00A4               	movwf	??___fttol^(0+256)
 16030  1AB5  0824               	movf	??___fttol^(0+256),w
 16031  1AB6  07AD               	addwf	___fttol@exp1^(0+256),f
 16032  1AB7  1903               	btfsc	3,2
 16033  1AB8  2AD3               	goto	l7952
 16034  1AB9  2AAC               	goto	l7942
 16035  1ABA                     l7944:	
 16036  1ABA  3018               	movlw	24
 16037  1ABB  022D               	subwf	___fttol@exp1^(0+256),w
 16038  1ABC  1C03               	skipc
 16039  1ABD  2AD0               	goto	l2218
 16040  1ABE  3000               	movlw	0
 16041  1ABF  00A3               	movwf	(?___fttol+3)^(0+256)
 16042  1AC0  3000               	movlw	0
 16043  1AC1  00A2               	movwf	(?___fttol+2)^(0+256)
 16044  1AC2  3000               	movlw	0
 16045  1AC3  00A1               	movwf	(?___fttol+1)^(0+256)
 16046  1AC4  3000               	movlw	0
 16047  1AC5  00A0               	movwf	?___fttol^(0+256)
 16048  1AC6  0008               	return
 16049  1AC7                     l7950:	
 16050  1AC7  3001               	movlw	1
 16051  1AC8                     u8345:	
 16052  1AC8  35A9               	lslf	___fttol@lval^(0+256),f
 16053  1AC9  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16054  1ACA  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16055  1ACB  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16056  1ACC  0B89               	decfsz	9,f
 16057  1ACD  2AC8               	goto	u8345
 16058  1ACE  3001               	movlw	1
 16059  1ACF  02AD               	subwf	___fttol@exp1^(0+256),f
 16060  1AD0                     l2218:	
 16061  1AD0  082D               	movf	___fttol@exp1^(0+256),w
 16062  1AD1  1D03               	btfss	3,2
 16063  1AD2  2AC7               	goto	l7950
 16064  1AD3                     l7952:	
 16065  1AD3  0828               	movf	___fttol@sign1^(0+256),w
 16066  1AD4  1903               	btfsc	3,2
 16067  1AD5  2AE1               	goto	l7956
 16068  1AD6  09A9               	comf	___fttol@lval^(0+256),f
 16069  1AD7  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16070  1AD8  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16071  1AD9  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16072  1ADA  0AA9               	incf	___fttol@lval^(0+256),f
 16073  1ADB  1903               	skipnz
 16074  1ADC  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16075  1ADD  1903               	skipnz
 16076  1ADE  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16077  1ADF  1903               	skipnz
 16078  1AE0  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16079  1AE1                     l7956:	
 16080  1AE1  082C               	movf	(___fttol@lval+3)^(0+256),w
 16081  1AE2  00A3               	movwf	(?___fttol+3)^(0+256)
 16082  1AE3  082B               	movf	(___fttol@lval+2)^(0+256),w
 16083  1AE4  00A2               	movwf	(?___fttol+2)^(0+256)
 16084  1AE5  082A               	movf	(___fttol@lval+1)^(0+256),w
 16085  1AE6  00A1               	movwf	(?___fttol+1)^(0+256)
 16086  1AE7  0829               	movf	___fttol@lval^(0+256),w
 16087  1AE8  00A0               	movwf	?___fttol^(0+256)
 16088  1AE9  0008               	return
 16089  1AEA                     __end_of___fttol:	
 16090                           
 16091                           	psect	text50
 16092  2184                     __ptext50:	
 16093 ;; *************** function ___ftge *****************
 16094 ;; Defined at:
 16095 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16096 ;; Parameters:    Size  Location     Type
 16097 ;;  ff1             3    0[BANK1 ] float 
 16098 ;;  ff2             3    3[BANK1 ] float 
 16099 ;; Auto vars:     Size  Location     Type
 16100 ;;		None
 16101 ;; Return value:  Size  Location     Type
 16102 ;;		None               void
 16103 ;; Registers used:
 16104 ;;		wreg, status,2, status,0
 16105 ;; Tracked objects:
 16106 ;;		On entry : 0/0
 16107 ;;		On exit  : 0/0
 16108 ;;		Unchanged: 0/0
 16109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16110 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16112 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16113 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16114 ;;Total ram usage:        9 bytes
 16115 ;; Hardware stack levels used:    1
 16116 ;; Hardware stack levels required when called:    3
 16117 ;; This function calls:
 16118 ;;		Nothing
 16119 ;; This function is called by:
 16120 ;;		_modCos
 16121 ;;		_modTri
 16122 ;;		_modSaw
 16123 ;;		_modSquare
 16124 ;;		_cos
 16125 ;;		_pow
 16126 ;;		_sin
 16127 ;;		_exp
 16128 ;;		_floor
 16129 ;;		_ldexp
 16130 ;;		_log
 16131 ;; This function uses a non-reentrant model
 16132 ;;
 16133                           
 16134                           
 16135                           ;psect for function ___ftge
 16136  2184                     ___ftge:	
 16137                           
 16138                           ;incstack = 0
 16139                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16140  2184  0021               	movlb	1	; select bank1
 16141  2185  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16142  2186  299B               	goto	l7844
 16143  2187  0920               	comf	___ftge@ff1^(0+128),w
 16144  2188  00A6               	movwf	??___ftge^(0+128)
 16145  2189  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16146  218A  00A7               	movwf	(??___ftge^(0+128)+1)
 16147  218B  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16148  218C  00A8               	movwf	(??___ftge^(0+128)+2)
 16149  218D  0AA6               	incf	??___ftge^(0+128),f
 16150  218E  1903               	skipnz
 16151  218F  0AA7               	incf	(??___ftge^(0+128)+1),f
 16152  2190  1903               	skipnz
 16153  2191  0AA8               	incf	(??___ftge^(0+128)+2),f
 16154  2192  3000               	movlw	0
 16155  2193  0726               	addwf	??___ftge^(0+128),w
 16156  2194  00A0               	movwf	___ftge@ff1^(0+128)
 16157  2195  3000               	movlw	0
 16158  2196  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16159  2197  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16160  2198  3080               	movlw	128
 16161  2199  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16162  219A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16163  219B                     l7844:	
 16164  219B  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16165  219C  29B1               	goto	l7848
 16166  219D  0923               	comf	___ftge@ff2^(0+128),w
 16167  219E  00A6               	movwf	??___ftge^(0+128)
 16168  219F  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16169  21A0  00A7               	movwf	(??___ftge^(0+128)+1)
 16170  21A1  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16171  21A2  00A8               	movwf	(??___ftge^(0+128)+2)
 16172  21A3  0AA6               	incf	??___ftge^(0+128),f
 16173  21A4  1903               	skipnz
 16174  21A5  0AA7               	incf	(??___ftge^(0+128)+1),f
 16175  21A6  1903               	skipnz
 16176  21A7  0AA8               	incf	(??___ftge^(0+128)+2),f
 16177  21A8  3000               	movlw	0
 16178  21A9  0726               	addwf	??___ftge^(0+128),w
 16179  21AA  00A3               	movwf	___ftge@ff2^(0+128)
 16180  21AB  3000               	movlw	0
 16181  21AC  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16182  21AD  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16183  21AE  3080               	movlw	128
 16184  21AF  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16185  21B0  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16186  21B1                     l7848:	
 16187  21B1  3080               	movlw	128
 16188  21B2  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16189  21B3  3080               	movlw	128
 16190  21B4  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16191  21B5  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16192  21B6  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16193  21B7  1D03               	skipz
 16194  21B8  0008               	return
 16195  21B9  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16196  21BA  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16197  21BB  1D03               	skipz
 16198  21BC  0008               	return
 16199  21BD  0823               	movf	___ftge@ff2^(0+128),w
 16200  21BE  0220               	subwf	___ftge@ff1^(0+128),w
 16201  21BF  0008               	return
 16202  21C0                     __end_of___ftge:	
 16203                           
 16204                           	psect	text51
 16205  21C0                     __ptext51:	
 16206 ;; *************** function ___altoft *****************
 16207 ;; Defined at:
 16208 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16209 ;; Parameters:    Size  Location     Type
 16210 ;;  c               4    8[BANK1 ] long 
 16211 ;; Auto vars:     Size  Location     Type
 16212 ;;  sign            1   15[BANK1 ] unsigned char 
 16213 ;;  exp             1   14[BANK1 ] unsigned char 
 16214 ;; Return value:  Size  Location     Type
 16215 ;;                  3    8[BANK1 ] float 
 16216 ;; Registers used:
 16217 ;;		wreg, status,2, status,0, pclath, cstack
 16218 ;; Tracked objects:
 16219 ;;		On entry : 0/0
 16220 ;;		On exit  : 0/0
 16221 ;;		Unchanged: 0/0
 16222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16223 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16224 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16225 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16226 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16227 ;;Total ram usage:        8 bytes
 16228 ;; Hardware stack levels used:    1
 16229 ;; Hardware stack levels required when called:    4
 16230 ;; This function calls:
 16231 ;;		___ftpack
 16232 ;; This function is called by:
 16233 ;;		_getModulationDelayTime
 16234 ;;		_floor
 16235 ;; This function uses a non-reentrant model
 16236 ;;
 16237                           
 16238                           
 16239                           ;psect for function ___altoft
 16240  21C0                     ___altoft:	
 16241                           
 16242                           ;incstack = 0
 16243                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16244  21C0  0021               	movlb	1	; select bank1
 16245  21C1  01AF               	clrf	___altoft@sign^(0+128)
 16246  21C2  308E               	movlw	142
 16247  21C3  00AC               	movwf	??___altoft^(0+128)
 16248  21C4  082C               	movf	??___altoft^(0+128),w
 16249  21C5  00AE               	movwf	___altoft@exp^(0+128)
 16250  21C6  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 16251  21C7  29D5               	goto	l7764
 16252  21C8  09A8               	comf	___altoft@c^(0+128),f
 16253  21C9  09A9               	comf	(___altoft@c+1)^(0+128),f
 16254  21CA  09AA               	comf	(___altoft@c+2)^(0+128),f
 16255  21CB  09AB               	comf	(___altoft@c+3)^(0+128),f
 16256  21CC  0AA8               	incf	___altoft@c^(0+128),f
 16257  21CD  1903               	skipnz
 16258  21CE  0AA9               	incf	(___altoft@c+1)^(0+128),f
 16259  21CF  1903               	skipnz
 16260  21D0  0AAA               	incf	(___altoft@c+2)^(0+128),f
 16261  21D1  1903               	skipnz
 16262  21D2  0AAB               	incf	(___altoft@c+3)^(0+128),f
 16263  21D3  01AF               	clrf	___altoft@sign^(0+128)
 16264  21D4  0AAF               	incf	___altoft@sign^(0+128),f
 16265  21D5                     l7764:	
 16266  21D5  30FF               	movlw	255
 16267  21D6  052B               	andwf	(___altoft@c+3)^(0+128),w
 16268  21D7  1903               	btfsc	3,2
 16269  21D8  29E5               	goto	l7766
 16270  21D9  3001               	movlw	1
 16271  21DA                     u7865:	
 16272  21DA  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 16273  21DB  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 16274  21DC  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 16275  21DD  0CA8               	rrf	___altoft@c^(0+128),f
 16276  21DE  0B89               	decfsz	9,f
 16277  21DF  29DA               	goto	u7865
 16278  21E0  3001               	movlw	1
 16279  21E1  00AC               	movwf	??___altoft^(0+128)
 16280  21E2  082C               	movf	??___altoft^(0+128),w
 16281  21E3  07AE               	addwf	___altoft@exp^(0+128),f
 16282  21E4  29D5               	goto	l7764
 16283  21E5                     l7766:	
 16284  21E5  0828               	movf	___altoft@c^(0+128),w
 16285  21E6  00A0               	movwf	___ftpack@arg^(0+128)
 16286  21E7  0829               	movf	(___altoft@c+1)^(0+128),w
 16287  21E8  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16288  21E9  082A               	movf	(___altoft@c+2)^(0+128),w
 16289  21EA  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16290  21EB  082E               	movf	___altoft@exp^(0+128),w
 16291  21EC  00AC               	movwf	??___altoft^(0+128)
 16292  21ED  082C               	movf	??___altoft^(0+128),w
 16293  21EE  00A3               	movwf	___ftpack@exp^(0+128)
 16294  21EF  082F               	movf	___altoft@sign^(0+128),w
 16295  21F0  00AD               	movwf	(??___altoft+1)^(0+128)
 16296  21F1  082D               	movf	(??___altoft+1)^(0+128),w
 16297  21F2  00A4               	movwf	___ftpack@sign^(0+128)
 16298  21F3  31A6  2637         	fcall	___ftpack
 16299  21F5  0021               	movlb	1	; select bank1
 16300  21F6  0820               	movf	?___ftpack^(0+128),w
 16301  21F7  00A8               	movwf	?___altoft^(0+128)
 16302  21F8  0821               	movf	(?___ftpack+1)^(0+128),w
 16303  21F9  00A9               	movwf	(?___altoft+1)^(0+128)
 16304  21FA  0822               	movf	(?___ftpack+2)^(0+128),w
 16305  21FB  00AA               	movwf	(?___altoft+2)^(0+128)
 16306  21FC  0008               	return
 16307  21FD                     __end_of___altoft:	
 16308                           
 16309                           	psect	text52
 16310  269C                     __ptext52:	
 16311 ;; *************** function _eval_poly *****************
 16312 ;; Defined at:
 16313 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16314 ;; Parameters:    Size  Location     Type
 16315 ;;  x               3   20[BANK2 ] float 
 16316 ;;  d               2   23[BANK2 ] PTR const 
 16317 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16318 ;;  n               2   25[BANK2 ] int 
 16319 ;; Auto vars:     Size  Location     Type
 16320 ;;  res             3   27[BANK2 ] int 
 16321 ;; Return value:  Size  Location     Type
 16322 ;;                  3   20[BANK2 ] int 
 16323 ;; Registers used:
 16324 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16325 ;; Tracked objects:
 16326 ;;		On entry : 0/0
 16327 ;;		On exit  : 0/0
 16328 ;;		Unchanged: 0/0
 16329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16330 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16331 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16333 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16334 ;;Total ram usage:       10 bytes
 16335 ;; Hardware stack levels used:    1
 16336 ;; Hardware stack levels required when called:    5
 16337 ;; This function calls:
 16338 ;;		___ftadd
 16339 ;;		___ftmul
 16340 ;;		___wmul
 16341 ;; This function is called by:
 16342 ;;		_sin
 16343 ;;		_exp
 16344 ;;		_log
 16345 ;; This function uses a non-reentrant model
 16346 ;;
 16347                           
 16348                           
 16349                           ;psect for function _eval_poly
 16350  269C                     _eval_poly:	
 16351                           
 16352                           ;incstack = 0
 16353                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16354  269C  0022               	movlb	2	; select bank2
 16355  269D  083A               	movf	(eval_poly@n+1)^(0+256),w
 16356  269E  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16357  269F  0839               	movf	eval_poly@n^(0+256),w
 16358  26A0  00AE               	movwf	___wmul@multiplier^(0+256)
 16359  26A1  3003               	movlw	3
 16360  26A2  00B0               	movwf	___wmul@multiplicand^(0+256)
 16361  26A3  3000               	movlw	0
 16362  26A4  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16363  26A5  31AE  264E  31A6   	fcall	___wmul
 16364  26A8  0022               	movlb	2	; select bank2
 16365  26A9  0837               	movf	eval_poly@d^(0+256),w
 16366  26AA  072E               	addwf	?___wmul^(0+256),w
 16367  26AB  0084               	movwf	4
 16368  26AC  0838               	movf	(eval_poly@d+1)^(0+256),w
 16369  26AD  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16370  26AE  0085               	movwf	5
 16371  26AF  3F00               	moviw [0]fsr0
 16372  26B0  00BB               	movwf	eval_poly@res^(0+256)
 16373  26B1  3F01               	moviw [1]fsr0
 16374  26B2  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16375  26B3  3F02               	moviw [2]fsr0
 16376  26B4                     L19:	
 16377  26B4  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16378  26B5  0839               	movf	eval_poly@n^(0+256),w
 16379  26B6  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16380  26B7  1903               	btfsc	3,2
 16381  26B8  2F07               	goto	l8126
 16382  26B9  30FF               	movlw	255
 16383  26BA  07B9               	addwf	eval_poly@n^(0+256),f
 16384  26BB  30FF               	movlw	255
 16385  26BC  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16386  26BD  083A               	movf	(eval_poly@n+1)^(0+256),w
 16387  26BE  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16388  26BF  0839               	movf	eval_poly@n^(0+256),w
 16389  26C0  00AE               	movwf	___wmul@multiplier^(0+256)
 16390  26C1  3003               	movlw	3
 16391  26C2  00B0               	movwf	___wmul@multiplicand^(0+256)
 16392  26C3  3000               	movlw	0
 16393  26C4  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16394  26C5  31AE  264E  31A6   	fcall	___wmul
 16395  26C8  0022               	movlb	2	; select bank2
 16396  26C9  0837               	movf	eval_poly@d^(0+256),w
 16397  26CA  072E               	addwf	?___wmul^(0+256),w
 16398  26CB  0084               	movwf	4
 16399  26CC  0838               	movf	(eval_poly@d+1)^(0+256),w
 16400  26CD  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16401  26CE  0085               	movwf	5
 16402  26CF  3F00               	moviw [0]fsr0
 16403  26D0  0021               	movlb	1	; select bank1
 16404  26D1  00C1               	movwf	___ftadd@f1^(0+128)
 16405  26D2  3F01               	moviw [1]fsr0
 16406  26D3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16407  26D4  3F02               	moviw [2]fsr0
 16408  26D5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16409  26D6  0022               	movlb	2	; select bank2
 16410  26D7  083B               	movf	eval_poly@res^(0+256),w
 16411  26D8  0021               	movlb	1	; select bank1
 16412  26D9  00AE               	movwf	___ftmul@f1^(0+128)
 16413  26DA  0022               	movlb	2	; select bank2
 16414  26DB  083C               	movf	(eval_poly@res+1)^(0+256),w
 16415  26DC  0021               	movlb	1	; select bank1
 16416  26DD  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16417  26DE  0022               	movlb	2	; select bank2
 16418  26DF  083D               	movf	(eval_poly@res+2)^(0+256),w
 16419  26E0  0021               	movlb	1	; select bank1
 16420  26E1  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16421  26E2  0022               	movlb	2	; select bank2
 16422  26E3  0834               	movf	eval_poly@x^(0+256),w
 16423  26E4  0021               	movlb	1	; select bank1
 16424  26E5  00B1               	movwf	___ftmul@f2^(0+128)
 16425  26E6  0022               	movlb	2	; select bank2
 16426  26E7  0835               	movf	(eval_poly@x+1)^(0+256),w
 16427  26E8  0021               	movlb	1	; select bank1
 16428  26E9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16429  26EA  0022               	movlb	2	; select bank2
 16430  26EB  0836               	movf	(eval_poly@x+2)^(0+256),w
 16431  26EC  0021               	movlb	1	; select bank1
 16432  26ED  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16433  26EE  3187  273B  31A6   	fcall	___ftmul
 16434  26F1  0021               	movlb	1	; select bank1
 16435  26F2  082E               	movf	?___ftmul^(0+128),w
 16436  26F3  00C4               	movwf	___ftadd@f2^(0+128)
 16437  26F4  082F               	movf	(?___ftmul+1)^(0+128),w
 16438  26F5  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16439  26F6  0830               	movf	(?___ftmul+2)^(0+128),w
 16440  26F7  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16441  26F8  3190  2031  31A6   	fcall	___ftadd
 16442  26FB  0021               	movlb	1	; select bank1
 16443  26FC  0841               	movf	?___ftadd^(0+128),w
 16444  26FD  0022               	movlb	2	; select bank2
 16445  26FE  00BB               	movwf	eval_poly@res^(0+256)
 16446  26FF  0021               	movlb	1	; select bank1
 16447  2700  0842               	movf	(?___ftadd+1)^(0+128),w
 16448  2701  0022               	movlb	2	; select bank2
 16449  2702  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16450  2703  0021               	movlb	1	; select bank1
 16451  2704  0843               	movf	(?___ftadd+2)^(0+128),w
 16452  2705  0022               	movlb	2	; select bank2
 16453  2706  2EB4               	goto	L19
 16454  2707                     l8126:	
 16455  2707  083B               	movf	eval_poly@res^(0+256),w
 16456  2708  00B4               	movwf	?_eval_poly^(0+256)
 16457  2709  083C               	movf	(eval_poly@res+1)^(0+256),w
 16458  270A  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16459  270B  083D               	movf	(eval_poly@res+2)^(0+256),w
 16460  270C  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16461  270D  0008               	return
 16462  270E                     __end_of_eval_poly:	
 16463                           
 16464                           	psect	text53
 16465  2E4E                     __ptext53:	
 16466 ;; *************** function ___wmul *****************
 16467 ;; Defined at:
 16468 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16469 ;; Parameters:    Size  Location     Type
 16470 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16471 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16472 ;; Auto vars:     Size  Location     Type
 16473 ;;  product         2   18[BANK2 ] unsigned int 
 16474 ;; Return value:  Size  Location     Type
 16475 ;;                  2   14[BANK2 ] unsigned int 
 16476 ;; Registers used:
 16477 ;;		wreg, status,2, status,0
 16478 ;; Tracked objects:
 16479 ;;		On entry : 0/0
 16480 ;;		On exit  : 0/0
 16481 ;;		Unchanged: 0/0
 16482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16483 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16484 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16486 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16487 ;;Total ram usage:        6 bytes
 16488 ;; Hardware stack levels used:    1
 16489 ;; Hardware stack levels required when called:    3
 16490 ;; This function calls:
 16491 ;;		Nothing
 16492 ;; This function is called by:
 16493 ;;		_calcCosArray
 16494 ;;		_updateModulationArray
 16495 ;;		_modCos
 16496 ;;		_eval_poly
 16497 ;; This function uses a non-reentrant model
 16498 ;;
 16499                           
 16500                           
 16501                           ;psect for function ___wmul
 16502  2E4E                     ___wmul:	
 16503                           
 16504                           ;incstack = 0
 16505                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16506  2E4E  0022               	movlb	2	; select bank2
 16507  2E4F  01B2               	clrf	___wmul@product^(0+256)
 16508  2E50  01B3               	clrf	(___wmul@product+1)^(0+256)
 16509  2E51                     l7742:	
 16510  2E51  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16511  2E52  2E57               	goto	l1960
 16512  2E53  0830               	movf	___wmul@multiplicand^(0+256),w
 16513  2E54  07B2               	addwf	___wmul@product^(0+256),f
 16514  2E55  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16515  2E56  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16516  2E57                     l1960:	
 16517  2E57  3001               	movlw	1
 16518  2E58                     u7825:	
 16519  2E58  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16520  2E59  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16521  2E5A  0B89               	decfsz	9,f
 16522  2E5B  2E58               	goto	u7825
 16523  2E5C  3001               	movlw	1
 16524  2E5D                     u7835:	
 16525  2E5D  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16526  2E5E  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16527  2E5F  0B89               	decfsz	9,f
 16528  2E60  2E5D               	goto	u7835
 16529  2E61  082E               	movf	___wmul@multiplier^(0+256),w
 16530  2E62  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16531  2E63  1D03               	btfss	3,2
 16532  2E64  2E51               	goto	l7742
 16533  2E65  0833               	movf	(___wmul@product+1)^(0+256),w
 16534  2E66  00AF               	movwf	(?___wmul+1)^(0+256)
 16535  2E67  0832               	movf	___wmul@product^(0+256),w
 16536  2E68  00AE               	movwf	?___wmul^(0+256)
 16537  2E69  0008               	return
 16538  2E6A                     __end_of___wmul:	
 16539                           
 16540                           	psect	text54
 16541  073B                     __ptext54:	
 16542 ;; *************** function ___ftmul *****************
 16543 ;; Defined at:
 16544 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16545 ;; Parameters:    Size  Location     Type
 16546 ;;  f1              3   14[BANK1 ] float 
 16547 ;;  f2              3   17[BANK1 ] float 
 16548 ;; Auto vars:     Size  Location     Type
 16549 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16550 ;;  sign            1   29[BANK1 ] unsigned char 
 16551 ;;  cntr            1   28[BANK1 ] unsigned char 
 16552 ;;  exp             1   24[BANK1 ] unsigned char 
 16553 ;; Return value:  Size  Location     Type
 16554 ;;                  3   14[BANK1 ] float 
 16555 ;; Registers used:
 16556 ;;		wreg, status,2, status,0, pclath, cstack
 16557 ;; Tracked objects:
 16558 ;;		On entry : 0/0
 16559 ;;		On exit  : 0/0
 16560 ;;		Unchanged: 0/0
 16561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16562 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16563 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16564 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16565 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16566 ;;Total ram usage:       16 bytes
 16567 ;; Hardware stack levels used:    1
 16568 ;; Hardware stack levels required when called:    4
 16569 ;; This function calls:
 16570 ;;		___ftpack
 16571 ;; This function is called by:
 16572 ;;		_set_subdivision
 16573 ;;		_map
 16574 ;;		_scaleA100kPot
 16575 ;;		_scaleA10kPot
 16576 ;;		_scaleiA10kPot
 16577 ;;		_calcCosArray
 16578 ;;		_modCos
 16579 ;;		_modTri
 16580 ;;		_modSaw
 16581 ;;		_pow
 16582 ;;		_sin
 16583 ;;		_eval_poly
 16584 ;;		_exp
 16585 ;;		_log
 16586 ;;		_scalePotValue
 16587 ;;		_scaleiA100kPot
 16588 ;; This function uses a non-reentrant model
 16589 ;;
 16590                           
 16591                           
 16592                           ;psect for function ___ftmul
 16593  073B                     ___ftmul:	
 16594                           
 16595                           ;incstack = 0
 16596                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16597  073B  0021               	movlb	1	; select bank1
 16598  073C  082E               	movf	___ftmul@f1^(0+128),w
 16599  073D  00B4               	movwf	??___ftmul^(0+128)
 16600  073E  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16601  073F  00B5               	movwf	(??___ftmul^(0+128)+1)
 16602  0740  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16603  0741  00B6               	movwf	(??___ftmul^(0+128)+2)
 16604  0742  1003               	clrc
 16605  0743  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16606  0744  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16607  0745  00B7               	movwf	(??___ftmul+3)^(0+128)
 16608  0746  0837               	movf	(??___ftmul+3)^(0+128),w
 16609  0747  00B8               	movwf	___ftmul@exp^(0+128)
 16610  0748  0838               	movf	___ftmul@exp^(0+128),w
 16611  0749  1D03               	btfss	3,2
 16612  074A  2F52               	goto	l7866
 16613  074B  3000               	movlw	0
 16614  074C  00AE               	movwf	?___ftmul^(0+128)
 16615  074D  3000               	movlw	0
 16616  074E  00AF               	movwf	(?___ftmul+1)^(0+128)
 16617  074F  3000               	movlw	0
 16618  0750  00B0               	movwf	(?___ftmul+2)^(0+128)
 16619  0751  0008               	return
 16620  0752                     l7866:	
 16621  0752  0831               	movf	___ftmul@f2^(0+128),w
 16622  0753  00B4               	movwf	??___ftmul^(0+128)
 16623  0754  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16624  0755  00B5               	movwf	(??___ftmul^(0+128)+1)
 16625  0756  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16626  0757  00B6               	movwf	(??___ftmul^(0+128)+2)
 16627  0758  1003               	clrc
 16628  0759  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16629  075A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16630  075B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16631  075C  0837               	movf	(??___ftmul+3)^(0+128),w
 16632  075D  00BD               	movwf	___ftmul@sign^(0+128)
 16633  075E  083D               	movf	___ftmul@sign^(0+128),w
 16634  075F  1D03               	btfss	3,2
 16635  0760  2F68               	goto	l7872
 16636  0761  3000               	movlw	0
 16637  0762  00AE               	movwf	?___ftmul^(0+128)
 16638  0763  3000               	movlw	0
 16639  0764  00AF               	movwf	(?___ftmul+1)^(0+128)
 16640  0765  3000               	movlw	0
 16641  0766  00B0               	movwf	(?___ftmul+2)^(0+128)
 16642  0767  0008               	return
 16643  0768                     l7872:	
 16644  0768  083D               	movf	___ftmul@sign^(0+128),w
 16645  0769  3E7B               	addlw	123
 16646  076A  00B4               	movwf	??___ftmul^(0+128)
 16647  076B  0834               	movf	??___ftmul^(0+128),w
 16648  076C  07B8               	addwf	___ftmul@exp^(0+128),f
 16649  076D  082E               	movf	___ftmul@f1^(0+128),w
 16650  076E  00B4               	movwf	??___ftmul^(0+128)
 16651  076F  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16652  0770  00B5               	movwf	(??___ftmul^(0+128)+1)
 16653  0771  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16654  0772  00B6               	movwf	(??___ftmul^(0+128)+2)
 16655  0773  3010               	movlw	16
 16656  0774                     u8165:	
 16657  0774  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16658  0775  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16659  0776  0CB4               	rrf	??___ftmul^(0+128),f
 16660  0777  0B89               	decfsz	9,f
 16661  0778  2F74               	goto	u8165
 16662  0779  0834               	movf	??___ftmul^(0+128),w
 16663  077A  00B7               	movwf	(??___ftmul+3)^(0+128)
 16664  077B  0837               	movf	(??___ftmul+3)^(0+128),w
 16665  077C  00BD               	movwf	___ftmul@sign^(0+128)
 16666  077D  0831               	movf	___ftmul@f2^(0+128),w
 16667  077E  00B4               	movwf	??___ftmul^(0+128)
 16668  077F  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16669  0780  00B5               	movwf	(??___ftmul^(0+128)+1)
 16670  0781  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16671  0782  00B6               	movwf	(??___ftmul^(0+128)+2)
 16672  0783  3010               	movlw	16
 16673  0784                     u8175:	
 16674  0784  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16675  0785  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16676  0786  0CB4               	rrf	??___ftmul^(0+128),f
 16677  0787  0B89               	decfsz	9,f
 16678  0788  2F84               	goto	u8175
 16679  0789  0834               	movf	??___ftmul^(0+128),w
 16680  078A  00B7               	movwf	(??___ftmul+3)^(0+128)
 16681  078B  0837               	movf	(??___ftmul+3)^(0+128),w
 16682  078C  06BD               	xorwf	___ftmul@sign^(0+128),f
 16683  078D  3080               	movlw	128
 16684  078E  00B4               	movwf	??___ftmul^(0+128)
 16685  078F  0834               	movf	??___ftmul^(0+128),w
 16686  0790  05BD               	andwf	___ftmul@sign^(0+128),f
 16687  0791  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16688  0792  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16689  0793  30FF               	movlw	255
 16690  0794  05B1               	andwf	___ftmul@f2^(0+128),f
 16691  0795  30FF               	movlw	255
 16692  0796  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16693  0797  3000               	movlw	0
 16694  0798  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16695  0799  3000               	movlw	0
 16696  079A  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16697  079B  3000               	movlw	0
 16698  079C  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16699  079D  3000               	movlw	0
 16700  079E  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16701  079F  3007               	movlw	7
 16702  07A0  00B4               	movwf	??___ftmul^(0+128)
 16703  07A1  0834               	movf	??___ftmul^(0+128),w
 16704  07A2  00BC               	movwf	___ftmul@cntr^(0+128)
 16705  07A3                     l7884:	
 16706  07A3  1C2E               	btfss	___ftmul@f1^(0+128),0
 16707  07A4  2FAB               	goto	l7888
 16708  07A5  0831               	movf	___ftmul@f2^(0+128),w
 16709  07A6  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16710  07A7  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16711  07A8  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16712  07A9  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16713  07AA  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16714  07AB                     l7888:	
 16715  07AB  3001               	movlw	1
 16716  07AC                     u8195:	
 16717  07AC  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16718  07AD  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16719  07AE  0CAE               	rrf	___ftmul@f1^(0+128),f
 16720  07AF  0B89               	decfsz	9,f
 16721  07B0  2FAC               	goto	u8195
 16722  07B1  3001               	movlw	1
 16723  07B2                     u8205:	
 16724  07B2  35B1               	lslf	___ftmul@f2^(0+128),f
 16725  07B3  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16726  07B4  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16727  07B5  0B89               	decfsz	9,f
 16728  07B6  2FB2               	goto	u8205
 16729  07B7  3001               	movlw	1
 16730  07B8  02BC               	subwf	___ftmul@cntr^(0+128),f
 16731  07B9  1D03               	btfss	3,2
 16732  07BA  2FA3               	goto	l7884
 16733  07BB  3009               	movlw	9
 16734  07BC  00B4               	movwf	??___ftmul^(0+128)
 16735  07BD  0834               	movf	??___ftmul^(0+128),w
 16736  07BE  00BC               	movwf	___ftmul@cntr^(0+128)
 16737  07BF                     l7896:	
 16738  07BF  1C2E               	btfss	___ftmul@f1^(0+128),0
 16739  07C0  2FC7               	goto	l7900
 16740  07C1  0831               	movf	___ftmul@f2^(0+128),w
 16741  07C2  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16742  07C3  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16743  07C4  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16744  07C5  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16745  07C6  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16746  07C7                     l7900:	
 16747  07C7  3001               	movlw	1
 16748  07C8                     u8235:	
 16749  07C8  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16750  07C9  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16751  07CA  0CAE               	rrf	___ftmul@f1^(0+128),f
 16752  07CB  0B89               	decfsz	9,f
 16753  07CC  2FC8               	goto	u8235
 16754  07CD  3001               	movlw	1
 16755  07CE                     u8245:	
 16756  07CE  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16757  07CF  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16758  07D0  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16759  07D1  0B89               	decfsz	9,f
 16760  07D2  2FCE               	goto	u8245
 16761  07D3  3001               	movlw	1
 16762  07D4  02BC               	subwf	___ftmul@cntr^(0+128),f
 16763  07D5  1D03               	btfss	3,2
 16764  07D6  2FBF               	goto	l7896
 16765  07D7  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16766  07D8  00A0               	movwf	___ftpack@arg^(0+128)
 16767  07D9  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16768  07DA  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16769  07DB  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16770  07DC  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16771  07DD  0838               	movf	___ftmul@exp^(0+128),w
 16772  07DE  00B4               	movwf	??___ftmul^(0+128)
 16773  07DF  0834               	movf	??___ftmul^(0+128),w
 16774  07E0  00A3               	movwf	___ftpack@exp^(0+128)
 16775  07E1  083D               	movf	___ftmul@sign^(0+128),w
 16776  07E2  00B5               	movwf	(??___ftmul+1)^(0+128)
 16777  07E3  0835               	movf	(??___ftmul+1)^(0+128),w
 16778  07E4  00A4               	movwf	___ftpack@sign^(0+128)
 16779  07E5  31A6  2637         	fcall	___ftpack
 16780  07E7  0021               	movlb	1	; select bank1
 16781  07E8  0820               	movf	?___ftpack^(0+128),w
 16782  07E9  00AE               	movwf	?___ftmul^(0+128)
 16783  07EA  0821               	movf	(?___ftpack+1)^(0+128),w
 16784  07EB  00AF               	movwf	(?___ftmul+1)^(0+128)
 16785  07EC  0822               	movf	(?___ftpack+2)^(0+128),w
 16786  07ED  00B0               	movwf	(?___ftmul+2)^(0+128)
 16787  07EE  0008               	return
 16788  07EF                     __end_of___ftmul:	
 16789                           
 16790                           	psect	text55
 16791  2FA3                     __ptext55:	
 16792 ;; *************** function ___ftsub *****************
 16793 ;; Defined at:
 16794 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16795 ;; Parameters:    Size  Location     Type
 16796 ;;  f2              3   23[BANK2 ] float 
 16797 ;;  f1              3   26[BANK2 ] float 
 16798 ;; Auto vars:     Size  Location     Type
 16799 ;;		None
 16800 ;; Return value:  Size  Location     Type
 16801 ;;                  3   23[BANK2 ] float 
 16802 ;; Registers used:
 16803 ;;		wreg, status,2, status,0, pclath, cstack
 16804 ;; Tracked objects:
 16805 ;;		On entry : 0/0
 16806 ;;		On exit  : 0/0
 16807 ;;		Unchanged: 0/0
 16808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16809 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16812 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16813 ;;Total ram usage:        6 bytes
 16814 ;; Hardware stack levels used:    1
 16815 ;; Hardware stack levels required when called:    5
 16816 ;; This function calls:
 16817 ;;		___ftadd
 16818 ;; This function is called by:
 16819 ;;		_sin
 16820 ;;		_exp
 16821 ;; This function uses a non-reentrant model
 16822 ;;
 16823                           
 16824                           
 16825                           ;psect for function ___ftsub
 16826  2FA3                     ___ftsub:	
 16827                           
 16828                           ;incstack = 0
 16829                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16830  2FA3  0022               	movlb	2	; select bank2
 16831  2FA4  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16832  2FA5  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 16833  2FA6  0437               	iorwf	___ftsub@f2^(0+256),w
 16834  2FA7  1903               	skipnz
 16835  2FA8  2FAB               	goto	l8088
 16836  2FA9  3080               	movlw	128
 16837  2FAA  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 16838  2FAB                     l8088:	
 16839  2FAB  083A               	movf	___ftsub@f1^(0+256),w
 16840  2FAC  0021               	movlb	1	; select bank1
 16841  2FAD  00C1               	movwf	___ftadd@f1^(0+128)
 16842  2FAE  0022               	movlb	2	; select bank2
 16843  2FAF  083B               	movf	(___ftsub@f1+1)^(0+256),w
 16844  2FB0  0021               	movlb	1	; select bank1
 16845  2FB1  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16846  2FB2  0022               	movlb	2	; select bank2
 16847  2FB3  083C               	movf	(___ftsub@f1+2)^(0+256),w
 16848  2FB4  0021               	movlb	1	; select bank1
 16849  2FB5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16850  2FB6  0022               	movlb	2	; select bank2
 16851  2FB7  0837               	movf	___ftsub@f2^(0+256),w
 16852  2FB8  0021               	movlb	1	; select bank1
 16853  2FB9  00C4               	movwf	___ftadd@f2^(0+128)
 16854  2FBA  0022               	movlb	2	; select bank2
 16855  2FBB  0838               	movf	(___ftsub@f2+1)^(0+256),w
 16856  2FBC  0021               	movlb	1	; select bank1
 16857  2FBD  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16858  2FBE  0022               	movlb	2	; select bank2
 16859  2FBF  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16860  2FC0  0021               	movlb	1	; select bank1
 16861  2FC1  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16862  2FC2  3190  2031         	fcall	___ftadd
 16863  2FC4  0021               	movlb	1	; select bank1
 16864  2FC5  0841               	movf	?___ftadd^(0+128),w
 16865  2FC6  0022               	movlb	2	; select bank2
 16866  2FC7  00B7               	movwf	?___ftsub^(0+256)
 16867  2FC8  0021               	movlb	1	; select bank1
 16868  2FC9  0842               	movf	(?___ftadd+1)^(0+128),w
 16869  2FCA  0022               	movlb	2	; select bank2
 16870  2FCB  00B8               	movwf	(?___ftsub+1)^(0+256)
 16871  2FCC  0021               	movlb	1	; select bank1
 16872  2FCD  0843               	movf	(?___ftadd+2)^(0+128),w
 16873  2FCE  0022               	movlb	2	; select bank2
 16874  2FCF  00B9               	movwf	(?___ftsub+2)^(0+256)
 16875  2FD0  0008               	return
 16876  2FD1                     __end_of___ftsub:	
 16877                           
 16878                           	psect	text56
 16879  1031                     __ptext56:	
 16880 ;; *************** function ___ftadd *****************
 16881 ;; Defined at:
 16882 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16883 ;; Parameters:    Size  Location     Type
 16884 ;;  f1              3   33[BANK1 ] float 
 16885 ;;  f2              3   36[BANK1 ] float 
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;  exp1            1   45[BANK1 ] unsigned char 
 16888 ;;  exp2            1   44[BANK1 ] unsigned char 
 16889 ;;  sign            1   43[BANK1 ] unsigned char 
 16890 ;; Return value:  Size  Location     Type
 16891 ;;                  3   33[BANK1 ] float 
 16892 ;; Registers used:
 16893 ;;		wreg, status,2, status,0, pclath, cstack
 16894 ;; Tracked objects:
 16895 ;;		On entry : 0/0
 16896 ;;		On exit  : 0/0
 16897 ;;		Unchanged: 0/0
 16898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16899 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16900 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16901 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16902 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16903 ;;Total ram usage:       13 bytes
 16904 ;; Hardware stack levels used:    1
 16905 ;; Hardware stack levels required when called:    4
 16906 ;; This function calls:
 16907 ;;		___ftpack
 16908 ;; This function is called by:
 16909 ;;		_map
 16910 ;;		_scaleiA10kPot
 16911 ;;		_modCos
 16912 ;;		_modTri
 16913 ;;		_modSaw
 16914 ;;		_cos
 16915 ;;		___ftsub
 16916 ;;		_sin
 16917 ;;		_eval_poly
 16918 ;;		_floor
 16919 ;;		_log
 16920 ;;		_scalePotValue
 16921 ;; This function uses a non-reentrant model
 16922 ;;
 16923                           
 16924                           
 16925                           ;psect for function ___ftadd
 16926  1031                     ___ftadd:	
 16927                           
 16928                           ;incstack = 0
 16929                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16930  1031  0021               	movlb	1	; select bank1
 16931  1032  0841               	movf	___ftadd@f1^(0+128),w
 16932  1033  00C7               	movwf	??___ftadd^(0+128)
 16933  1034  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16934  1035  00C8               	movwf	(??___ftadd^(0+128)+1)
 16935  1036  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16936  1037  00C9               	movwf	(??___ftadd^(0+128)+2)
 16937  1038  1003               	clrc
 16938  1039  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16939  103A  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16940  103B  00CA               	movwf	(??___ftadd+3)^(0+128)
 16941  103C  084A               	movf	(??___ftadd+3)^(0+128),w
 16942  103D  00CD               	movwf	___ftadd@exp1^(0+128)
 16943  103E  0844               	movf	___ftadd@f2^(0+128),w
 16944  103F  00C7               	movwf	??___ftadd^(0+128)
 16945  1040  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16946  1041  00C8               	movwf	(??___ftadd^(0+128)+1)
 16947  1042  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16948  1043  00C9               	movwf	(??___ftadd^(0+128)+2)
 16949  1044  1003               	clrc
 16950  1045  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16951  1046  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16952  1047  00CA               	movwf	(??___ftadd+3)^(0+128)
 16953  1048  084A               	movf	(??___ftadd+3)^(0+128),w
 16954  1049  00CC               	movwf	___ftadd@exp2^(0+128)
 16955  104A  084D               	movf	___ftadd@exp1^(0+128),w
 16956  104B  1903               	btfsc	3,2
 16957  104C  2859               	goto	l7776
 16958  104D  084C               	movf	___ftadd@exp2^(0+128),w
 16959  104E  024D               	subwf	___ftadd@exp1^(0+128),w
 16960  104F  1803               	skipnc
 16961  1050  2860               	goto	l7780
 16962  1051  034D               	decf	___ftadd@exp1^(0+128),w
 16963  1052  3AFF               	xorlw	255
 16964  1053  074C               	addwf	___ftadd@exp2^(0+128),w
 16965  1054  00C7               	movwf	??___ftadd^(0+128)
 16966  1055  3019               	movlw	25
 16967  1056  0247               	subwf	??___ftadd^(0+128),w
 16968  1057  1C03               	skipc
 16969  1058  2860               	goto	l7780
 16970  1059                     l7776:	
 16971  1059  0844               	movf	___ftadd@f2^(0+128),w
 16972  105A  00C1               	movwf	?___ftadd^(0+128)
 16973  105B  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16974  105C  00C2               	movwf	(?___ftadd+1)^(0+128)
 16975  105D  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16976  105E  00C3               	movwf	(?___ftadd+2)^(0+128)
 16977  105F  0008               	return
 16978  1060                     l7780:	
 16979  1060  084C               	movf	___ftadd@exp2^(0+128),w
 16980  1061  1903               	btfsc	3,2
 16981  1062  0008               	return
 16982  1063  084D               	movf	___ftadd@exp1^(0+128),w
 16983  1064  024C               	subwf	___ftadd@exp2^(0+128),w
 16984  1065  1803               	skipnc
 16985  1066  286F               	goto	l7786
 16986  1067  034C               	decf	___ftadd@exp2^(0+128),w
 16987  1068  3AFF               	xorlw	255
 16988  1069  074D               	addwf	___ftadd@exp1^(0+128),w
 16989  106A  00C7               	movwf	??___ftadd^(0+128)
 16990  106B  3019               	movlw	25
 16991  106C  0247               	subwf	??___ftadd^(0+128),w
 16992  106D  1803               	btfsc	3,0
 16993  106E  0008               	return
 16994  106F                     l7786:	
 16995  106F  3006               	movlw	6
 16996  1070  00C7               	movwf	??___ftadd^(0+128)
 16997  1071  0847               	movf	??___ftadd^(0+128),w
 16998  1072  00CB               	movwf	___ftadd@sign^(0+128)
 16999  1073  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17000  1074  17CB               	bsf	___ftadd@sign^(0+128),7
 17001  1075  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17002  1076  174B               	bsf	___ftadd@sign^(0+128),6
 17003  1077  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17004  1078  30FF               	movlw	255
 17005  1079  05C1               	andwf	___ftadd@f1^(0+128),f
 17006  107A  30FF               	movlw	255
 17007  107B  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17008  107C  3000               	movlw	0
 17009  107D  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17010  107E  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17011  107F  30FF               	movlw	255
 17012  1080  05C4               	andwf	___ftadd@f2^(0+128),f
 17013  1081  30FF               	movlw	255
 17014  1082  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17015  1083  3000               	movlw	0
 17016  1084  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17017  1085  084C               	movf	___ftadd@exp2^(0+128),w
 17018  1086  024D               	subwf	___ftadd@exp1^(0+128),w
 17019  1087  1803               	skipnc
 17020  1088  28AB               	goto	l7808
 17021  1089                     l7798:	
 17022  1089  3001               	movlw	1
 17023  108A                     u7975:	
 17024  108A  35C4               	lslf	___ftadd@f2^(0+128),f
 17025  108B  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17026  108C  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17027  108D  0B89               	decfsz	9,f
 17028  108E  288A               	goto	u7975
 17029  108F  3001               	movlw	1
 17030  1090  02CC               	subwf	___ftadd@exp2^(0+128),f
 17031  1091  084C               	movf	___ftadd@exp2^(0+128),w
 17032  1092  064D               	xorwf	___ftadd@exp1^(0+128),w
 17033  1093  1903               	skipnz
 17034  1094  28A6               	goto	l7806
 17035  1095  3001               	movlw	1
 17036  1096  02CB               	subwf	___ftadd@sign^(0+128),f
 17037  1097  084B               	movf	___ftadd@sign^(0+128),w
 17038  1098  3907               	andlw	7
 17039  1099  1903               	btfsc	3,2
 17040  109A  28A6               	goto	l7806
 17041  109B  2889               	goto	l7798
 17042  109C                     l7804:	
 17043  109C  3001               	movlw	1
 17044  109D                     u8005:	
 17045  109D  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17046  109E  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17047  109F  0CC1               	rrf	___ftadd@f1^(0+128),f
 17048  10A0  0B89               	decfsz	9,f
 17049  10A1  289D               	goto	u8005
 17050  10A2  3001               	movlw	1
 17051  10A3  00C7               	movwf	??___ftadd^(0+128)
 17052  10A4  0847               	movf	??___ftadd^(0+128),w
 17053  10A5  07CD               	addwf	___ftadd@exp1^(0+128),f
 17054  10A6                     l7806:	
 17055  10A6  084D               	movf	___ftadd@exp1^(0+128),w
 17056  10A7  064C               	xorwf	___ftadd@exp2^(0+128),w
 17057  10A8  1903               	btfsc	3,2
 17058  10A9  28D0               	goto	l2158
 17059  10AA  289C               	goto	l7804
 17060  10AB                     l7808:	
 17061  10AB  084D               	movf	___ftadd@exp1^(0+128),w
 17062  10AC  024C               	subwf	___ftadd@exp2^(0+128),w
 17063  10AD  1803               	skipnc
 17064  10AE  28D0               	goto	l2158
 17065  10AF                     l7810:	
 17066  10AF  3001               	movlw	1
 17067  10B0                     u8035:	
 17068  10B0  35C1               	lslf	___ftadd@f1^(0+128),f
 17069  10B1  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17070  10B2  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17071  10B3  0B89               	decfsz	9,f
 17072  10B4  28B0               	goto	u8035
 17073  10B5  3001               	movlw	1
 17074  10B6  02CD               	subwf	___ftadd@exp1^(0+128),f
 17075  10B7  084C               	movf	___ftadd@exp2^(0+128),w
 17076  10B8  064D               	xorwf	___ftadd@exp1^(0+128),w
 17077  10B9  1903               	skipnz
 17078  10BA  28CC               	goto	l7818
 17079  10BB  3001               	movlw	1
 17080  10BC  02CB               	subwf	___ftadd@sign^(0+128),f
 17081  10BD  084B               	movf	___ftadd@sign^(0+128),w
 17082  10BE  3907               	andlw	7
 17083  10BF  1903               	btfsc	3,2
 17084  10C0  28CC               	goto	l7818
 17085  10C1  28AF               	goto	l7810
 17086  10C2                     l7816:	
 17087  10C2  3001               	movlw	1
 17088  10C3                     u8065:	
 17089  10C3  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17090  10C4  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17091  10C5  0CC4               	rrf	___ftadd@f2^(0+128),f
 17092  10C6  0B89               	decfsz	9,f
 17093  10C7  28C3               	goto	u8065
 17094  10C8  3001               	movlw	1
 17095  10C9  00C7               	movwf	??___ftadd^(0+128)
 17096  10CA  0847               	movf	??___ftadd^(0+128),w
 17097  10CB  07CC               	addwf	___ftadd@exp2^(0+128),f
 17098  10CC                     l7818:	
 17099  10CC  084D               	movf	___ftadd@exp1^(0+128),w
 17100  10CD  064C               	xorwf	___ftadd@exp2^(0+128),w
 17101  10CE  1D03               	skipz
 17102  10CF  28C2               	goto	l7816
 17103  10D0                     l2158:	
 17104  10D0  1FCB               	btfss	___ftadd@sign^(0+128),7
 17105  10D1  28E2               	goto	l7822
 17106  10D2  30FF               	movlw	255
 17107  10D3  06C1               	xorwf	___ftadd@f1^(0+128),f
 17108  10D4  30FF               	movlw	255
 17109  10D5  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17110  10D6  30FF               	movlw	255
 17111  10D7  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17112  10D8  3001               	movlw	1
 17113  10D9  07C1               	addwf	___ftadd@f1^(0+128),f
 17114  10DA  3000               	movlw	0
 17115  10DB  1803               	skipnc
 17116  10DC  3001               	movlw	1
 17117  10DD  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17118  10DE  3000               	movlw	0
 17119  10DF  1803               	skipnc
 17120  10E0  3001               	movlw	1
 17121  10E1  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17122  10E2                     l7822:	
 17123  10E2  1F4B               	btfss	___ftadd@sign^(0+128),6
 17124  10E3  28F4               	goto	l7826
 17125  10E4  30FF               	movlw	255
 17126  10E5  06C4               	xorwf	___ftadd@f2^(0+128),f
 17127  10E6  30FF               	movlw	255
 17128  10E7  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17129  10E8  30FF               	movlw	255
 17130  10E9  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17131  10EA  3001               	movlw	1
 17132  10EB  07C4               	addwf	___ftadd@f2^(0+128),f
 17133  10EC  3000               	movlw	0
 17134  10ED  1803               	skipnc
 17135  10EE  3001               	movlw	1
 17136  10EF  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17137  10F0  3000               	movlw	0
 17138  10F1  1803               	skipnc
 17139  10F2  3001               	movlw	1
 17140  10F3  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17141  10F4                     l7826:	
 17142  10F4  01CB               	clrf	___ftadd@sign^(0+128)
 17143  10F5  0841               	movf	___ftadd@f1^(0+128),w
 17144  10F6  07C4               	addwf	___ftadd@f2^(0+128),f
 17145  10F7  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17146  10F8  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17147  10F9  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17148  10FA  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17149  10FB  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17150  10FC  290F               	goto	l7836
 17151  10FD  30FF               	movlw	255
 17152  10FE  06C4               	xorwf	___ftadd@f2^(0+128),f
 17153  10FF  30FF               	movlw	255
 17154  1100  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17155  1101  30FF               	movlw	255
 17156  1102  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17157  1103  3001               	movlw	1
 17158  1104  07C4               	addwf	___ftadd@f2^(0+128),f
 17159  1105  3000               	movlw	0
 17160  1106  1803               	skipnc
 17161  1107  3001               	movlw	1
 17162  1108  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17163  1109  3000               	movlw	0
 17164  110A  1803               	skipnc
 17165  110B  3001               	movlw	1
 17166  110C  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17167  110D  01CB               	clrf	___ftadd@sign^(0+128)
 17168  110E  0ACB               	incf	___ftadd@sign^(0+128),f
 17169  110F                     l7836:	
 17170  110F  0844               	movf	___ftadd@f2^(0+128),w
 17171  1110  00A0               	movwf	___ftpack@arg^(0+128)
 17172  1111  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17173  1112  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17174  1113  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17175  1114  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17176  1115  084D               	movf	___ftadd@exp1^(0+128),w
 17177  1116  00C7               	movwf	??___ftadd^(0+128)
 17178  1117  0847               	movf	??___ftadd^(0+128),w
 17179  1118  00A3               	movwf	___ftpack@exp^(0+128)
 17180  1119  084B               	movf	___ftadd@sign^(0+128),w
 17181  111A  00C8               	movwf	(??___ftadd+1)^(0+128)
 17182  111B  0848               	movf	(??___ftadd+1)^(0+128),w
 17183  111C  00A4               	movwf	___ftpack@sign^(0+128)
 17184  111D  31A6  2637         	fcall	___ftpack
 17185  111F  0021               	movlb	1	; select bank1
 17186  1120  0820               	movf	?___ftpack^(0+128),w
 17187  1121  00C1               	movwf	?___ftadd^(0+128)
 17188  1122  0821               	movf	(?___ftpack+1)^(0+128),w
 17189  1123  00C2               	movwf	(?___ftadd+1)^(0+128)
 17190  1124  0822               	movf	(?___ftpack+2)^(0+128),w
 17191  1125  00C3               	movwf	(?___ftadd+2)^(0+128)
 17192  1126  0008               	return
 17193  1127                     __end_of___ftadd:	
 17194                           
 17195                           	psect	text57
 17196  2DB0                     __ptext57:	
 17197 ;; *************** function ___ftneg *****************
 17198 ;; Defined at:
 17199 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17200 ;; Parameters:    Size  Location     Type
 17201 ;;  f1              3   30[BANK1 ] float 
 17202 ;; Auto vars:     Size  Location     Type
 17203 ;;		None
 17204 ;; Return value:  Size  Location     Type
 17205 ;;                  3   30[BANK1 ] float 
 17206 ;; Registers used:
 17207 ;;		wreg
 17208 ;; Tracked objects:
 17209 ;;		On entry : 0/0
 17210 ;;		On exit  : 0/0
 17211 ;;		Unchanged: 0/0
 17212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17213 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17216 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17217 ;;Total ram usage:        3 bytes
 17218 ;; Hardware stack levels used:    1
 17219 ;; Hardware stack levels required when called:    3
 17220 ;; This function calls:
 17221 ;;		Nothing
 17222 ;; This function is called by:
 17223 ;;		_map
 17224 ;;		_scaleiA10kPot
 17225 ;;		_modCos
 17226 ;;		_modTri
 17227 ;;		_modSaw
 17228 ;;		_pow
 17229 ;;		_sin
 17230 ;;		_exp
 17231 ;;		_ldexp
 17232 ;;		_scalePotValue
 17233 ;; This function uses a non-reentrant model
 17234 ;;
 17235                           
 17236                           
 17237                           ;psect for function ___ftneg
 17238  2DB0                     ___ftneg:	
 17239                           
 17240                           ;incstack = 0
 17241                           ; Regs used in ___ftneg: [wreg]
 17242  2DB0  0021               	movlb	1	; select bank1
 17243  2DB1  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17244  2DB2  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17245  2DB3  043E               	iorwf	___ftneg@f1^(0+128),w
 17246  2DB4  1903               	skipnz
 17247  2DB5  0008               	return
 17248  2DB6  3080               	movlw	128
 17249  2DB7  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17250  2DB8  0008               	return
 17251  2DB9                     __end_of___ftneg:	
 17252                           
 17253                           	psect	text58
 17254  1D28                     __ptext58:	
 17255 ;; *************** function ___ftdiv *****************
 17256 ;; Defined at:
 17257 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17258 ;; Parameters:    Size  Location     Type
 17259 ;;  f2              3   46[BANK1 ] float 
 17260 ;;  f1              3   49[BANK1 ] float 
 17261 ;; Auto vars:     Size  Location     Type
 17262 ;;  f3              3   57[BANK1 ] float 
 17263 ;;  sign            1   61[BANK1 ] unsigned char 
 17264 ;;  exp             1   60[BANK1 ] unsigned char 
 17265 ;;  cntr            1   56[BANK1 ] unsigned char 
 17266 ;; Return value:  Size  Location     Type
 17267 ;;                  3   46[BANK1 ] float 
 17268 ;; Registers used:
 17269 ;;		wreg, status,2, status,0, pclath, cstack
 17270 ;; Tracked objects:
 17271 ;;		On entry : 0/0
 17272 ;;		On exit  : 0/0
 17273 ;;		Unchanged: 0/0
 17274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17275 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17276 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17277 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17278 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17279 ;;Total ram usage:       16 bytes
 17280 ;; Hardware stack levels used:    1
 17281 ;; Hardware stack levels required when called:    4
 17282 ;; This function calls:
 17283 ;;		___ftpack
 17284 ;; This function is called by:
 17285 ;;		_map
 17286 ;;		_scaleA100kPot
 17287 ;;		_scaleA10kPot
 17288 ;;		_scaleiA10kPot
 17289 ;;		_calcCosArray
 17290 ;;		_getModulationDelayTime
 17291 ;;		_modCos
 17292 ;;		_modTri
 17293 ;;		_modSaw
 17294 ;;		_sin
 17295 ;;		_exp
 17296 ;;		_scalePotValue
 17297 ;;		_scaleiA100kPot
 17298 ;; This function uses a non-reentrant model
 17299 ;;
 17300                           
 17301                           
 17302                           ;psect for function ___ftdiv
 17303  1D28                     ___ftdiv:	
 17304                           
 17305                           ;incstack = 0
 17306                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17307  1D28  0021               	movlb	1	; select bank1
 17308  1D29  0851               	movf	___ftdiv@f1^(0+128),w
 17309  1D2A  00D4               	movwf	??___ftdiv^(0+128)
 17310  1D2B  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17311  1D2C  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17312  1D2D  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17313  1D2E  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17314  1D2F  1003               	clrc
 17315  1D30  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17316  1D31  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17317  1D32  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17318  1D33  0857               	movf	(??___ftdiv+3)^(0+128),w
 17319  1D34  00DC               	movwf	___ftdiv@exp^(0+128)
 17320  1D35  085C               	movf	___ftdiv@exp^(0+128),w
 17321  1D36  1D03               	btfss	3,2
 17322  1D37  2D3F               	goto	l8048
 17323  1D38  3000               	movlw	0
 17324  1D39  00CE               	movwf	?___ftdiv^(0+128)
 17325  1D3A  3000               	movlw	0
 17326  1D3B  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17327  1D3C  3000               	movlw	0
 17328  1D3D  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17329  1D3E  0008               	return
 17330  1D3F                     l8048:	
 17331  1D3F  084E               	movf	___ftdiv@f2^(0+128),w
 17332  1D40  00D4               	movwf	??___ftdiv^(0+128)
 17333  1D41  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17334  1D42  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17335  1D43  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17336  1D44  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17337  1D45  1003               	clrc
 17338  1D46  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17339  1D47  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17340  1D48  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17341  1D49  0857               	movf	(??___ftdiv+3)^(0+128),w
 17342  1D4A  00DD               	movwf	___ftdiv@sign^(0+128)
 17343  1D4B  085D               	movf	___ftdiv@sign^(0+128),w
 17344  1D4C  1D03               	btfss	3,2
 17345  1D4D  2D55               	goto	l8054
 17346  1D4E  3000               	movlw	0
 17347  1D4F  00CE               	movwf	?___ftdiv^(0+128)
 17348  1D50  3000               	movlw	0
 17349  1D51  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17350  1D52  3000               	movlw	0
 17351  1D53  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17352  1D54  0008               	return
 17353  1D55                     l8054:	
 17354  1D55  3000               	movlw	0
 17355  1D56  00D9               	movwf	___ftdiv@f3^(0+128)
 17356  1D57  3000               	movlw	0
 17357  1D58  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17358  1D59  3000               	movlw	0
 17359  1D5A  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17360  1D5B  3089               	movlw	137
 17361  1D5C  075D               	addwf	___ftdiv@sign^(0+128),w
 17362  1D5D  00D4               	movwf	??___ftdiv^(0+128)
 17363  1D5E  0854               	movf	??___ftdiv^(0+128),w
 17364  1D5F  02DC               	subwf	___ftdiv@exp^(0+128),f
 17365  1D60  0851               	movf	___ftdiv@f1^(0+128),w
 17366  1D61  00D4               	movwf	??___ftdiv^(0+128)
 17367  1D62  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17368  1D63  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17369  1D64  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17370  1D65  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17371  1D66  3010               	movlw	16
 17372  1D67                     u8465:	
 17373  1D67  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17374  1D68  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17375  1D69  0CD4               	rrf	??___ftdiv^(0+128),f
 17376  1D6A  0B89               	decfsz	9,f
 17377  1D6B  2D67               	goto	u8465
 17378  1D6C  0854               	movf	??___ftdiv^(0+128),w
 17379  1D6D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17380  1D6E  0857               	movf	(??___ftdiv+3)^(0+128),w
 17381  1D6F  00DD               	movwf	___ftdiv@sign^(0+128)
 17382  1D70  084E               	movf	___ftdiv@f2^(0+128),w
 17383  1D71  00D4               	movwf	??___ftdiv^(0+128)
 17384  1D72  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17385  1D73  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17386  1D74  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17387  1D75  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17388  1D76  3010               	movlw	16
 17389  1D77                     u8475:	
 17390  1D77  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17391  1D78  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17392  1D79  0CD4               	rrf	??___ftdiv^(0+128),f
 17393  1D7A  0B89               	decfsz	9,f
 17394  1D7B  2D77               	goto	u8475
 17395  1D7C  0854               	movf	??___ftdiv^(0+128),w
 17396  1D7D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17397  1D7E  0857               	movf	(??___ftdiv+3)^(0+128),w
 17398  1D7F  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17399  1D80  3080               	movlw	128
 17400  1D81  00D4               	movwf	??___ftdiv^(0+128)
 17401  1D82  0854               	movf	??___ftdiv^(0+128),w
 17402  1D83  05DD               	andwf	___ftdiv@sign^(0+128),f
 17403  1D84  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17404  1D85  30FF               	movlw	255
 17405  1D86  05D1               	andwf	___ftdiv@f1^(0+128),f
 17406  1D87  30FF               	movlw	255
 17407  1D88  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17408  1D89  3000               	movlw	0
 17409  1D8A  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17410  1D8B  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17411  1D8C  30FF               	movlw	255
 17412  1D8D  05CE               	andwf	___ftdiv@f2^(0+128),f
 17413  1D8E  30FF               	movlw	255
 17414  1D8F  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17415  1D90  3000               	movlw	0
 17416  1D91  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17417  1D92  3018               	movlw	24
 17418  1D93  00D4               	movwf	??___ftdiv^(0+128)
 17419  1D94  0854               	movf	??___ftdiv^(0+128),w
 17420  1D95  00D8               	movwf	___ftdiv@cntr^(0+128)
 17421  1D96                     l8068:	
 17422  1D96  3001               	movlw	1
 17423  1D97                     u8485:	
 17424  1D97  35D9               	lslf	___ftdiv@f3^(0+128),f
 17425  1D98  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17426  1D99  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17427  1D9A  0B89               	decfsz	9,f
 17428  1D9B  2D97               	goto	u8485
 17429  1D9C  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17430  1D9D  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17431  1D9E  1D03               	skipz
 17432  1D9F  2DA6               	goto	u8495
 17433  1DA0  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17434  1DA1  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17435  1DA2  1D03               	skipz
 17436  1DA3  2DA6               	goto	u8495
 17437  1DA4  084E               	movf	___ftdiv@f2^(0+128),w
 17438  1DA5  0251               	subwf	___ftdiv@f1^(0+128),w
 17439  1DA6                     u8495:	
 17440  1DA6  1C03               	skipc
 17441  1DA7  2DAF               	goto	l8076
 17442  1DA8  084E               	movf	___ftdiv@f2^(0+128),w
 17443  1DA9  02D1               	subwf	___ftdiv@f1^(0+128),f
 17444  1DAA  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17445  1DAB  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17446  1DAC  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17447  1DAD  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17448  1DAE  1459               	bsf	___ftdiv@f3^(0+128),0
 17449  1DAF                     l8076:	
 17450  1DAF  3001               	movlw	1
 17451  1DB0                     u8505:	
 17452  1DB0  35D1               	lslf	___ftdiv@f1^(0+128),f
 17453  1DB1  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17454  1DB2  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17455  1DB3  0B89               	decfsz	9,f
 17456  1DB4  2DB0               	goto	u8505
 17457  1DB5  3001               	movlw	1
 17458  1DB6  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17459  1DB7  1D03               	btfss	3,2
 17460  1DB8  2D96               	goto	l8068
 17461  1DB9  0859               	movf	___ftdiv@f3^(0+128),w
 17462  1DBA  00A0               	movwf	___ftpack@arg^(0+128)
 17463  1DBB  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17464  1DBC  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17465  1DBD  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17466  1DBE  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17467  1DBF  085C               	movf	___ftdiv@exp^(0+128),w
 17468  1DC0  00D4               	movwf	??___ftdiv^(0+128)
 17469  1DC1  0854               	movf	??___ftdiv^(0+128),w
 17470  1DC2  00A3               	movwf	___ftpack@exp^(0+128)
 17471  1DC3  085D               	movf	___ftdiv@sign^(0+128),w
 17472  1DC4  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17473  1DC5  0855               	movf	(??___ftdiv+1)^(0+128),w
 17474  1DC6  00A4               	movwf	___ftpack@sign^(0+128)
 17475  1DC7  31A6  2637         	fcall	___ftpack
 17476  1DC9  0021               	movlb	1	; select bank1
 17477  1DCA  0820               	movf	?___ftpack^(0+128),w
 17478  1DCB  00CE               	movwf	?___ftdiv^(0+128)
 17479  1DCC  0821               	movf	(?___ftpack+1)^(0+128),w
 17480  1DCD  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17481  1DCE  0822               	movf	(?___ftpack+2)^(0+128),w
 17482  1DCF  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17483  1DD0  0008               	return
 17484  1DD1                     __end_of___ftdiv:	
 17485                           
 17486                           	psect	text59
 17487  2EE2                     __ptext59:	
 17488 ;; *************** function ___awtoft *****************
 17489 ;; Defined at:
 17490 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17491 ;; Parameters:    Size  Location     Type
 17492 ;;  c               2    8[BANK1 ] int 
 17493 ;; Auto vars:     Size  Location     Type
 17494 ;;  sign            1   13[BANK1 ] unsigned char 
 17495 ;; Return value:  Size  Location     Type
 17496 ;;                  3    8[BANK1 ] float 
 17497 ;; Registers used:
 17498 ;;		wreg, status,2, status,0, pclath, cstack
 17499 ;; Tracked objects:
 17500 ;;		On entry : 0/0
 17501 ;;		On exit  : 0/0
 17502 ;;		Unchanged: 0/0
 17503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17504 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17505 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17506 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17507 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17508 ;;Total ram usage:        6 bytes
 17509 ;; Hardware stack levels used:    1
 17510 ;; Hardware stack levels required when called:    4
 17511 ;; This function calls:
 17512 ;;		___ftpack
 17513 ;; This function is called by:
 17514 ;;		_main
 17515 ;;		_set_subdivision
 17516 ;;		_calcCosArray
 17517 ;;		_getModulationDelayTime
 17518 ;;		_updateModulationArray
 17519 ;;		_exp
 17520 ;;		_log
 17521 ;; This function uses a non-reentrant model
 17522 ;;
 17523                           
 17524                           
 17525                           ;psect for function ___awtoft
 17526  2EE2                     ___awtoft:	
 17527                           
 17528                           ;incstack = 0
 17529                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17530  2EE2  0021               	movlb	1	; select bank1
 17531  2EE3  01AD               	clrf	___awtoft@sign^(0+128)
 17532  2EE4  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17533  2EE5  2EED               	goto	l8038
 17534  2EE6  09A8               	comf	___awtoft@c^(0+128),f
 17535  2EE7  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17536  2EE8  0AA8               	incf	___awtoft@c^(0+128),f
 17537  2EE9  1903               	skipnz
 17538  2EEA  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17539  2EEB  01AD               	clrf	___awtoft@sign^(0+128)
 17540  2EEC  0AAD               	incf	___awtoft@sign^(0+128),f
 17541  2EED                     l8038:	
 17542  2EED  0828               	movf	___awtoft@c^(0+128),w
 17543  2EEE  00A0               	movwf	___ftpack@arg^(0+128)
 17544  2EEF  0829               	movf	(___awtoft@c+1)^(0+128),w
 17545  2EF0  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17546  2EF1  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17547  2EF2  308E               	movlw	142
 17548  2EF3  00AB               	movwf	??___awtoft^(0+128)
 17549  2EF4  082B               	movf	??___awtoft^(0+128),w
 17550  2EF5  00A3               	movwf	___ftpack@exp^(0+128)
 17551  2EF6  082D               	movf	___awtoft@sign^(0+128),w
 17552  2EF7  00AC               	movwf	(??___awtoft+1)^(0+128)
 17553  2EF8  082C               	movf	(??___awtoft+1)^(0+128),w
 17554  2EF9  00A4               	movwf	___ftpack@sign^(0+128)
 17555  2EFA  31A6  2637         	fcall	___ftpack
 17556  2EFC  0021               	movlb	1	; select bank1
 17557  2EFD  0820               	movf	?___ftpack^(0+128),w
 17558  2EFE  00A8               	movwf	?___awtoft^(0+128)
 17559  2EFF  0821               	movf	(?___ftpack+1)^(0+128),w
 17560  2F00  00A9               	movwf	(?___awtoft+1)^(0+128)
 17561  2F01  0822               	movf	(?___ftpack+2)^(0+128),w
 17562  2F02  00AA               	movwf	(?___awtoft+2)^(0+128)
 17563  2F03  0008               	return
 17564  2F04                     __end_of___awtoft:	
 17565                           
 17566                           	psect	text60
 17567  2637                     __ptext60:	
 17568 ;; *************** function ___ftpack *****************
 17569 ;; Defined at:
 17570 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17571 ;; Parameters:    Size  Location     Type
 17572 ;;  arg             3    0[BANK1 ] unsigned um
 17573 ;;  exp             1    3[BANK1 ] unsigned char 
 17574 ;;  sign            1    4[BANK1 ] unsigned char 
 17575 ;; Auto vars:     Size  Location     Type
 17576 ;;		None
 17577 ;; Return value:  Size  Location     Type
 17578 ;;                  3    0[BANK1 ] float 
 17579 ;; Registers used:
 17580 ;;		wreg, status,2, status,0
 17581 ;; Tracked objects:
 17582 ;;		On entry : 0/0
 17583 ;;		On exit  : 0/0
 17584 ;;		Unchanged: 0/0
 17585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17586 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17588 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17589 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17590 ;;Total ram usage:        8 bytes
 17591 ;; Hardware stack levels used:    1
 17592 ;; Hardware stack levels required when called:    3
 17593 ;; This function calls:
 17594 ;;		Nothing
 17595 ;; This function is called by:
 17596 ;;		___altoft
 17597 ;;		___awtoft
 17598 ;;		___ftadd
 17599 ;;		___ftdiv
 17600 ;;		___ftmul
 17601 ;;		___lltoft
 17602 ;; This function uses a non-reentrant model
 17603 ;;
 17604                           
 17605                           
 17606                           ;psect for function ___ftpack
 17607  2637                     ___ftpack:	
 17608                           
 17609                           ;incstack = 0
 17610                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17611  2637  0021               	movlb	1	; select bank1
 17612  2638  0823               	movf	___ftpack@exp^(0+128),w
 17613  2639  1903               	btfsc	3,2
 17614  263A  2E40               	goto	l7676
 17615  263B  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17616  263C  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17617  263D  0420               	iorwf	___ftpack@arg^(0+128),w
 17618  263E  1D03               	skipz
 17619  263F  2E51               	goto	l7682
 17620  2640                     l7676:	
 17621  2640  3000               	movlw	0
 17622  2641  00A0               	movwf	?___ftpack^(0+128)
 17623  2642  3000               	movlw	0
 17624  2643  00A1               	movwf	(?___ftpack+1)^(0+128)
 17625  2644  3000               	movlw	0
 17626  2645  00A2               	movwf	(?___ftpack+2)^(0+128)
 17627  2646  0008               	return
 17628  2647                     l7680:	
 17629  2647  3001               	movlw	1
 17630  2648  00A5               	movwf	??___ftpack^(0+128)
 17631  2649  0825               	movf	??___ftpack^(0+128),w
 17632  264A  07A3               	addwf	___ftpack@exp^(0+128),f
 17633  264B  3001               	movlw	1
 17634  264C                     u7705:	
 17635  264C  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17636  264D  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17637  264E  0CA0               	rrf	___ftpack@arg^(0+128),f
 17638  264F  0B89               	decfsz	9,f
 17639  2650  2E4C               	goto	u7705
 17640  2651                     l7682:	
 17641  2651  30FE               	movlw	254
 17642  2652  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17643  2653  1903               	btfsc	3,2
 17644  2654  2E6A               	goto	l2127
 17645  2655  2E47               	goto	l7680
 17646  2656                     l7684:	
 17647  2656  3001               	movlw	1
 17648  2657  00A5               	movwf	??___ftpack^(0+128)
 17649  2658  0825               	movf	??___ftpack^(0+128),w
 17650  2659  07A3               	addwf	___ftpack@exp^(0+128),f
 17651  265A  3001               	movlw	1
 17652  265B  07A0               	addwf	___ftpack@arg^(0+128),f
 17653  265C  3000               	movlw	0
 17654  265D  1803               	skipnc
 17655  265E  3001               	movlw	1
 17656  265F  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17657  2660  3000               	movlw	0
 17658  2661  1803               	skipnc
 17659  2662  3001               	movlw	1
 17660  2663  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17661  2664  3001               	movlw	1
 17662  2665                     u7725:	
 17663  2665  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17664  2666  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17665  2667  0CA0               	rrf	___ftpack@arg^(0+128),f
 17666  2668  0B89               	decfsz	9,f
 17667  2669  2E65               	goto	u7725
 17668  266A                     l2127:	
 17669  266A  30FF               	movlw	255
 17670  266B  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17671  266C  1903               	btfsc	3,2
 17672  266D  2E77               	goto	l7692
 17673  266E  2E56               	goto	l7684
 17674  266F                     l7690:	
 17675  266F  3001               	movlw	1
 17676  2670  02A3               	subwf	___ftpack@exp^(0+128),f
 17677  2671  3001               	movlw	1
 17678  2672                     u7745:	
 17679  2672  35A0               	lslf	___ftpack@arg^(0+128),f
 17680  2673  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17681  2674  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17682  2675  0B89               	decfsz	9,f
 17683  2676  2E72               	goto	u7745
 17684  2677                     l7692:	
 17685  2677  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17686  2678  2E7D               	goto	l2134
 17687  2679  3002               	movlw	2
 17688  267A  0223               	subwf	___ftpack@exp^(0+128),w
 17689  267B  1803               	skipnc
 17690  267C  2E6F               	goto	l7690
 17691  267D                     l2134:	
 17692  267D  1823               	btfsc	___ftpack@exp^(0+128),0
 17693  267E  2E85               	goto	l2135
 17694  267F  30FF               	movlw	255
 17695  2680  05A0               	andwf	___ftpack@arg^(0+128),f
 17696  2681  307F               	movlw	127
 17697  2682  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17698  2683  30FF               	movlw	255
 17699  2684  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17700  2685                     l2135:	
 17701  2685  1003               	clrc
 17702  2686  0CA3               	rrf	___ftpack@exp^(0+128),f
 17703  2687  0823               	movf	___ftpack@exp^(0+128),w
 17704  2688  00A5               	movwf	??___ftpack^(0+128)
 17705  2689  01A6               	clrf	(??___ftpack^(0+128)+1)
 17706  268A  01A7               	clrf	(??___ftpack^(0+128)+2)
 17707  268B  3010               	movlw	16
 17708  268C                     u7785:	
 17709  268C  35A5               	lslf	??___ftpack^(0+128),f
 17710  268D  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17711  268E  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17712  268F  0B89               	decfsz	9,f
 17713  2690  2E8C               	goto	u7785
 17714  2691  0825               	movf	??___ftpack^(0+128),w
 17715  2692  04A0               	iorwf	___ftpack@arg^(0+128),f
 17716  2693  0826               	movf	(??___ftpack+1)^(0+128),w
 17717  2694  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17718  2695  0827               	movf	(??___ftpack+2)^(0+128),w
 17719  2696  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17720  2697  0824               	movf	___ftpack@sign^(0+128),w
 17721  2698  1903               	btfsc	3,2
 17722  2699  0008               	return
 17723  269A  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17724  269B  0008               	return
 17725  269C                     __end_of___ftpack:	
 17726                           
 17727                           	psect	text61
 17728  2DDB                     __ptext61:	
 17729 ;; *************** function _adc_convert *****************
 17730 ;; Defined at:
 17731 ;;		line 122 in file "user.c"
 17732 ;; Parameters:    Size  Location     Type
 17733 ;;  channel         1    wreg     unsigned char 
 17734 ;; Auto vars:     Size  Location     Type
 17735 ;;  channel         1    3[BANK1 ] unsigned char 
 17736 ;; Return value:  Size  Location     Type
 17737 ;;                  2    0[BANK1 ] unsigned int 
 17738 ;; Registers used:
 17739 ;;		wreg, status,2, status,0
 17740 ;; Tracked objects:
 17741 ;;		On entry : 0/0
 17742 ;;		On exit  : 0/0
 17743 ;;		Unchanged: 0/0
 17744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17745 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17746 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17747 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17748 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17749 ;;Total ram usage:        4 bytes
 17750 ;; Hardware stack levels used:    1
 17751 ;; Hardware stack levels required when called:    3
 17752 ;; This function calls:
 17753 ;;		Nothing
 17754 ;; This function is called by:
 17755 ;;		_main
 17756 ;; This function uses a non-reentrant model
 17757 ;;
 17758                           
 17759                           
 17760                           ;psect for function _adc_convert
 17761  2DDB                     _adc_convert:	
 17762                           
 17763                           ;incstack = 0
 17764                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17765                           ;adc_convert@channel stored from wreg
 17766  2DDB  0021               	movlb	1	; select bank1
 17767  2DDC  00A3               	movwf	adc_convert@channel^(0+128)
 17768                           
 17769                           ;user.c: 123: ADCON0bits.CHS = channel;
 17770  2DDD  0823               	movf	adc_convert@channel^(0+128),w
 17771  2DDE  00A2               	movwf	??_adc_convert^(0+128)
 17772  2DDF  0DA2               	rlf	??_adc_convert^(0+128),f
 17773  2DE0  0DA2               	rlf	??_adc_convert^(0+128),f
 17774  2DE1  081D               	movf	29,w	;volatile
 17775  2DE2  0622               	xorwf	??_adc_convert^(0+128),w
 17776  2DE3  3983               	andlw	-125
 17777  2DE4  0622               	xorwf	??_adc_convert^(0+128),w
 17778  2DE5  009D               	movwf	29	;volatile
 17779                           
 17780                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17781  2DE6  149D               	bsf	29,1	;volatile
 17782  2DE7                     l586:	
 17783                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17784                           
 17785  2DE7  189D               	btfsc	29,1	;volatile
 17786  2DE8  2DE7               	goto	l586
 17787                           
 17788                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17789  2DE9  081C               	movf	28,w	;volatile
 17790  2DEA  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17791  2DEB  081B               	movf	27,w	;volatile
 17792  2DEC  00A0               	movwf	?_adc_convert^(0+128)
 17793  2DED  0008               	return
 17794  2DEE                     __end_of_adc_convert:	
 17795                           
 17796                           	psect	text62
 17797  2379                     __ptext62:	
 17798 ;; *************** function _USARTInit *****************
 17799 ;; Defined at:
 17800 ;;		line 31 in file "usart_pic16.c"
 17801 ;; Parameters:    Size  Location     Type
 17802 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17803 ;; Auto vars:     Size  Location     Type
 17804 ;;		None
 17805 ;; Return value:  Size  Location     Type
 17806 ;;                  1    wreg      void 
 17807 ;; Registers used:
 17808 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17809 ;; Tracked objects:
 17810 ;;		On entry : 0/0
 17811 ;;		On exit  : 0/0
 17812 ;;		Unchanged: 0/0
 17813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17814 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17816 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17817 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17818 ;;Total ram usage:        3 bytes
 17819 ;; Hardware stack levels used:    1
 17820 ;; Hardware stack levels required when called:    3
 17821 ;; This function calls:
 17822 ;;		Nothing
 17823 ;; This function is called by:
 17824 ;;		_main
 17825 ;; This function uses a non-reentrant model
 17826 ;;
 17827                           
 17828                           
 17829                           ;psect for function _USARTInit
 17830  2379                     _USARTInit:	
 17831                           
 17832                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17833                           
 17834                           ;incstack = 0
 17835                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17836  2379  30FF               	movlw	255
 17837  237A  0020               	movlb	0	; select bank0
 17838  237B  00CC               	movwf	_UQEnd	;volatile
 17839  237C  0021               	movlb	1	; select bank1
 17840  237D  00A2               	movwf	??_USARTInit^(0+128)
 17841  237E  0822               	movf	??_USARTInit^(0+128),w
 17842  237F  0020               	movlb	0	; select bank0
 17843  2380  00CD               	movwf	_UQFront	;volatile
 17844                           
 17845                           ;usart_pic16.c: 37: switch(baud_rate)
 17846  2381  2B8C               	goto	l8694
 17847  2382                     l8684:	
 17848                           ;usart_pic16.c: 38: {
 17849                           ;usart_pic16.c: 39: case 9600:
 17850                           
 17851                           
 17852                           ;usart_pic16.c: 40: SPBRG=103;
 17853  2382  3067               	movlw	103
 17854  2383  2B89               	goto	L22
 17855  2384                     l8686:	
 17856                           ;usart_pic16.c: 42: case 19200:
 17857                           
 17858                           ;usart_pic16.c: 41: break;
 17859                           
 17860                           
 17861                           ;usart_pic16.c: 43: SPBRG=51;
 17862  2384  3033               	movlw	51
 17863  2385  2B89               	goto	L22
 17864  2386                     l8688:	
 17865                           ;usart_pic16.c: 45: case 31250:
 17866                           
 17867                           ;usart_pic16.c: 44: break;
 17868                           
 17869                           
 17870                           ;usart_pic16.c: 46: SPBRG = 31;
 17871  2386  301F               	movlw	31
 17872  2387  2B89               	goto	L22
 17873  2388                     l8690:	
 17874                           ;usart_pic16.c: 48: case 38400:
 17875                           
 17876                           ;usart_pic16.c: 47: break;
 17877                           
 17878                           
 17879                           ;usart_pic16.c: 49: SPBRG=25;
 17880  2388  3019               	movlw	25
 17881  2389                     L22:	
 17882  2389  0023               	movlb	3	; select bank3
 17883  238A  009B               	movwf	27	;volatile
 17884                           
 17885                           ;usart_pic16.c: 51: }
 17886                           
 17887                           ;usart_pic16.c: 50: break;
 17888  238B  2BAF               	goto	l1712
 17889  238C                     l8694:	
 17890                           
 17891                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17892                           ; Switch size 1, requested type "space"
 17893                           ; Number of cases is 4, Range of values is 37 to 150
 17894                           ; switch strategies available:
 17895                           ; Name         Instructions Cycles
 17896                           ; simple_byte           13     7 (average)
 17897                           ; direct_byte          237     9 (fixed)
 17898                           ; jumptable            263     9 (fixed)
 17899                           ;	Chosen strategy is simple_byte
 17900  238C  0021               	movlb	1	; select bank1
 17901  238D  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17902  238E  3A25               	xorlw	37	; case 37
 17903  238F  1903               	skipnz
 17904  2390  2B9B               	goto	l9808
 17905  2391  3A6E               	xorlw	110	; case 75
 17906  2392  1903               	skipnz
 17907  2393  2BA0               	goto	l9810
 17908  2394  3A31               	xorlw	49	; case 122
 17909  2395  1903               	skipnz
 17910  2396  2BA5               	goto	l9812
 17911  2397  3AEC               	xorlw	236	; case 150
 17912  2398  1903               	skipnz
 17913  2399  2BAA               	goto	l9814
 17914  239A  2BAF               	goto	l1712
 17915  239B                     l9808:	
 17916                           
 17917                           ; Switch size 1, requested type "space"
 17918                           ; Number of cases is 1, Range of values is 128 to 128
 17919                           ; switch strategies available:
 17920                           ; Name         Instructions Cycles
 17921                           ; simple_byte            4     3 (average)
 17922                           ; direct_byte           11     9 (fixed)
 17923                           ; jumptable            263     9 (fixed)
 17924                           ;	Chosen strategy is simple_byte
 17925  239B  0820               	movf	USARTInit@baud_rate^(0+128),w
 17926  239C  3A80               	xorlw	128	; case 128
 17927  239D  1903               	skipnz
 17928  239E  2B82               	goto	l8684
 17929  239F  2BAF               	goto	l1712
 17930  23A0                     l9810:	
 17931                           
 17932                           ; Switch size 1, requested type "space"
 17933                           ; Number of cases is 1, Range of values is 0 to 0
 17934                           ; switch strategies available:
 17935                           ; Name         Instructions Cycles
 17936                           ; simple_byte            4     3 (average)
 17937                           ; direct_byte            8     6 (fixed)
 17938                           ; jumptable            260     6 (fixed)
 17939                           ;	Chosen strategy is simple_byte
 17940  23A0  0820               	movf	USARTInit@baud_rate^(0+128),w
 17941  23A1  3A00               	xorlw	0	; case 0
 17942  23A2  1903               	skipnz
 17943  23A3  2B84               	goto	l8686
 17944  23A4  2BAF               	goto	l1712
 17945  23A5                     l9812:	
 17946                           
 17947                           ; Switch size 1, requested type "space"
 17948                           ; Number of cases is 1, Range of values is 18 to 18
 17949                           ; switch strategies available:
 17950                           ; Name         Instructions Cycles
 17951                           ; simple_byte            4     3 (average)
 17952                           ; direct_byte           11     9 (fixed)
 17953                           ; jumptable            263     9 (fixed)
 17954                           ;	Chosen strategy is simple_byte
 17955  23A5  0820               	movf	USARTInit@baud_rate^(0+128),w
 17956  23A6  3A12               	xorlw	18	; case 18
 17957  23A7  1903               	skipnz
 17958  23A8  2B86               	goto	l8688
 17959  23A9  2BAF               	goto	l1712
 17960  23AA                     l9814:	
 17961                           
 17962                           ; Switch size 1, requested type "space"
 17963                           ; Number of cases is 1, Range of values is 0 to 0
 17964                           ; switch strategies available:
 17965                           ; Name         Instructions Cycles
 17966                           ; simple_byte            4     3 (average)
 17967                           ; direct_byte            8     6 (fixed)
 17968                           ; jumptable            260     6 (fixed)
 17969                           ;	Chosen strategy is simple_byte
 17970  23AA  0820               	movf	USARTInit@baud_rate^(0+128),w
 17971  23AB  3A00               	xorlw	0	; case 0
 17972  23AC  1903               	skipnz
 17973  23AD  2B88               	goto	l8690
 17974  23AE  2BAF               	goto	l1712
 17975  23AF                     l1712:	
 17976                           
 17977                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 17978  23AF  0023               	movlb	3	; select bank3
 17979  23B0  131E               	bcf	30,6	;volatile
 17980                           
 17981                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 17982  23B1  169E               	bsf	30,5	;volatile
 17983                           
 17984                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 17985  23B2  121E               	bcf	30,4	;volatile
 17986                           
 17987                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 17988  23B3  151E               	bsf	30,2	;volatile
 17989                           
 17990                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 17991  23B4  179D               	bsf	29,7	;volatile
 17992                           
 17993                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 17994  23B5  131D               	bcf	29,6	;volatile
 17995                           
 17996                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 17997  23B6  161D               	bsf	29,4	;volatile
 17998                           
 17999                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18000  23B7  119D               	bcf	29,3	;volatile
 18001                           
 18002                           ;usart_pic16.c: 65: RCIE=1;
 18003  23B8  0021               	movlb	1	; select bank1
 18004  23B9  1691               	bsf	17,5	;volatile
 18005                           
 18006                           ;usart_pic16.c: 66: PEIE=1;
 18007  23BA  170B               	bsf	11,6	;volatile
 18008                           
 18009                           ;usart_pic16.c: 68: (GIE = 1);
 18010  23BB  178B               	bsf	11,7	;volatile
 18011  23BC  0008               	return
 18012  23BD                     __end_of_USARTInit:	
 18013                           
 18014                           	psect	text63
 18015  270E                     __ptext63:	
 18016 ;; *************** function _ReadSavedSettings *****************
 18017 ;; Defined at:
 18018 ;;		line 234 in file "user.c"
 18019 ;; Parameters:    Size  Location     Type
 18020 ;;		None
 18021 ;; Auto vars:     Size  Location     Type
 18022 ;;		None
 18023 ;; Return value:  Size  Location     Type
 18024 ;;                  1    wreg      void 
 18025 ;; Registers used:
 18026 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18027 ;; Tracked objects:
 18028 ;;		On entry : 0/0
 18029 ;;		On exit  : 0/0
 18030 ;;		Unchanged: 0/0
 18031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18034 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18035 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18036 ;;Total ram usage:        1 bytes
 18037 ;; Hardware stack levels used:    1
 18038 ;; Hardware stack levels required when called:    4
 18039 ;; This function calls:
 18040 ;;		_FLASH_ReadWord
 18041 ;;		_set_leds_bottom
 18042 ;;		_set_leds_top
 18043 ;; This function is called by:
 18044 ;;		_main
 18045 ;; This function uses a non-reentrant model
 18046 ;;
 18047                           
 18048                           
 18049                           ;psect for function _ReadSavedSettings
 18050  270E                     _ReadSavedSettings:	
 18051                           
 18052                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 18053                           
 18054                           ;incstack = 0
 18055                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18056  270E  3081               	movlw	129
 18057  270F  0021               	movlb	1	; select bank1
 18058  2710  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18059  2711  301F               	movlw	31
 18060  2712  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18061  2713  31AE  26A2  31A7   	fcall	_FLASH_ReadWord
 18062  2716  0021               	movlb	1	; select bank1
 18063  2717  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18064  2718  0020               	movlb	0	; select bank0
 18065  2719  00DB               	movwf	_top_push_state+1
 18066  271A  0021               	movlb	1	; select bank1
 18067  271B  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18068  271C  0020               	movlb	0	; select bank0
 18069  271D  00DA               	movwf	_top_push_state
 18070                           
 18071                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 18072  271E  3082               	movlw	130
 18073  271F  0021               	movlb	1	; select bank1
 18074  2720  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18075  2721  301F               	movlw	31
 18076  2722  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18077  2723  31AE  26A2  31A7   	fcall	_FLASH_ReadWord
 18078  2726  0021               	movlb	1	; select bank1
 18079  2727  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18080  2728  0020               	movlb	0	; select bank0
 18081  2729  00D7               	movwf	_bottom_push_state+1
 18082  272A  0021               	movlb	1	; select bank1
 18083  272B  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18084  272C  0020               	movlb	0	; select bank0
 18085  272D  00D6               	movwf	_bottom_push_state
 18086                           
 18087                           ;user.c: 239: if (top_push_state > 6) {
 18088  272E  085B               	movf	_top_push_state+1,w
 18089  272F  3A80               	xorlw	128
 18090  2730  0021               	movlb	1	; select bank1
 18091  2731  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18092  2732  3080               	movlw	128
 18093  2733  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18094  2734  1D03               	skipz
 18095  2735  2F39               	goto	u9285
 18096  2736  3007               	movlw	7
 18097  2737  0020               	movlb	0	; select bank0
 18098  2738  025A               	subwf	_top_push_state,w
 18099  2739                     u9285:	
 18100  2739  1C03               	skipc
 18101  273A  2F40               	goto	l633
 18102                           
 18103                           ;user.c: 241: top_push_state = 6;
 18104  273B  3006               	movlw	6
 18105  273C  0020               	movlb	0	; select bank0
 18106  273D  00DA               	movwf	_top_push_state
 18107  273E  3000               	movlw	0
 18108  273F  00DB               	movwf	_top_push_state+1
 18109  2740                     l633:	
 18110                           
 18111                           ;user.c: 242: }
 18112                           ;user.c: 243: if (bottom_push_state > 5) {
 18113  2740  0020               	movlb	0	; select bank0
 18114  2741  0857               	movf	_bottom_push_state+1,w
 18115  2742  3A80               	xorlw	128
 18116  2743  0021               	movlb	1	; select bank1
 18117  2744  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18118  2745  3080               	movlw	128
 18119  2746  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18120  2747  1D03               	skipz
 18121  2748  2F4C               	goto	u9295
 18122  2749  3006               	movlw	6
 18123  274A  0020               	movlb	0	; select bank0
 18124  274B  0256               	subwf	_bottom_push_state,w
 18125  274C                     u9295:	
 18126  274C  1C03               	skipc
 18127  274D  2F53               	goto	l8748
 18128                           
 18129                           ;user.c: 245: bottom_push_state = 1;
 18130  274E  3001               	movlw	1
 18131  274F  0020               	movlb	0	; select bank0
 18132  2750  00D6               	movwf	_bottom_push_state
 18133  2751  3000               	movlw	0
 18134  2752  00D7               	movwf	_bottom_push_state+1
 18135  2753                     l8748:	
 18136                           
 18137                           ;user.c: 246: }
 18138                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 18139  2753  0020               	movlb	0	; select bank0
 18140  2754  085F               	movf	_switchBypass_state,w
 18141  2755  1D03               	btfss	3,2
 18142  2756  2F5A               	goto	u9300
 18143  2757  0027               	movlb	7	; select bank7
 18144  2758  148D               	bsf	13,1	;volatile
 18145  2759  2F5C               	goto	l8750
 18146  275A                     u9300:	
 18147  275A  0027               	movlb	7	; select bank7
 18148  275B  108D               	bcf	13,1	;volatile
 18149  275C                     l8750:	
 18150                           
 18151                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 18152  275C  0020               	movlb	0	; select bank0
 18153  275D  0C5F               	rrf	_switchBypass_state,w
 18154  275E  0027               	movlb	7	; select bank7
 18155  275F  1C03               	skipc
 18156  2760  110D               	bcf	13,2	;volatile
 18157  2761  1803               	skipnc
 18158  2762  150D               	bsf	13,2	;volatile
 18159                           
 18160                           ;user.c: 251: LATBbits.LATB2 = 0;
 18161  2763  0022               	movlb	2	; select bank2
 18162  2764  110D               	bcf	13,2	;volatile
 18163                           
 18164                           ;user.c: 252: LATBbits.LATB3 = 0;
 18165  2765  118D               	bcf	13,3	;volatile
 18166                           
 18167                           ;user.c: 254: LATBbits.LATB4 = 0;
 18168  2766  120D               	bcf	13,4	;volatile
 18169                           
 18170                           ;user.c: 255: LATBbits.LATB5 = 0;
 18171  2767  128D               	bcf	13,5	;volatile
 18172                           
 18173                           ;user.c: 257: LATBbits.LATB1 = 0;
 18174  2768  108D               	bcf	13,1	;volatile
 18175                           
 18176                           ;user.c: 258: LATBbits.LATB0 = 0;
 18177  2769  100D               	bcf	13,0	;volatile
 18178                           
 18179                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18180  276A  0020               	movlb	0	; select bank0
 18181  276B  085B               	movf	_top_push_state+1,w
 18182  276C  0021               	movlb	1	; select bank1
 18183  276D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18184  276E  0020               	movlb	0	; select bank0
 18185  276F  085A               	movf	_top_push_state,w
 18186  2770  0021               	movlb	1	; select bank1
 18187  2771  00A0               	movwf	set_leds_top@x^(0+128)
 18188  2772  3001               	movlw	1
 18189  2773  00A2               	movwf	set_leds_top@ledState^(0+128)
 18190  2774  3000               	movlw	0
 18191  2775  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18192  2776  31A5  25E3  31A7   	fcall	_set_leds_top
 18193                           
 18194                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18195  2779  0020               	movlb	0	; select bank0
 18196  277A  0857               	movf	_bottom_push_state+1,w
 18197  277B  0021               	movlb	1	; select bank1
 18198  277C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18199  277D  0020               	movlb	0	; select bank0
 18200  277E  0856               	movf	_bottom_push_state,w
 18201  277F  0021               	movlb	1	; select bank1
 18202  2780  00A0               	movwf	set_leds_bottom@x^(0+128)
 18203  2781  31A1  2149         	fcall	_set_leds_bottom
 18204  2783  0008               	return
 18205  2784                     __end_of_ReadSavedSettings:	
 18206                           
 18207                           	psect	text64
 18208  25E3                     __ptext64:	
 18209 ;; *************** function _set_leds_top *****************
 18210 ;; Defined at:
 18211 ;;		line 16 in file "LEDs.c"
 18212 ;; Parameters:    Size  Location     Type
 18213 ;;  x               2    0[BANK1 ] int 
 18214 ;;  ledState        2    2[BANK1 ] int 
 18215 ;; Auto vars:     Size  Location     Type
 18216 ;;		None
 18217 ;; Return value:  Size  Location     Type
 18218 ;;                  1    wreg      void 
 18219 ;; Registers used:
 18220 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18221 ;; Tracked objects:
 18222 ;;		On entry : 0/0
 18223 ;;		On exit  : 0/0
 18224 ;;		Unchanged: 0/0
 18225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18226 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18229 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18230 ;;Total ram usage:        4 bytes
 18231 ;; Hardware stack levels used:    1
 18232 ;; Hardware stack levels required when called:    3
 18233 ;; This function calls:
 18234 ;;		Nothing
 18235 ;; This function is called by:
 18236 ;;		_ReadSavedSettings
 18237 ;;		_ring_tactiles
 18238 ;;		_solidring_tactiles
 18239 ;;		_read_top_tactile
 18240 ;;		_setPresetDisplay
 18241 ;;		_resetRingLEDs
 18242 ;;		_setExpressionDisplay
 18243 ;;		_star_tactiles
 18244 ;; This function uses a non-reentrant model
 18245 ;;
 18246                           
 18247                           
 18248                           ;psect for function _set_leds_top
 18249  25E3                     _set_leds_top:	
 18250                           
 18251                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18252                           
 18253                           ;incstack = 0
 18254                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18255  25E3  0027               	movlb	7	; select bank7
 18256  25E4  100C               	bcf	12,0	;volatile
 18257                           
 18258                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18259  25E5  108C               	bcf	12,1	;volatile
 18260                           
 18261                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18262  25E6  110C               	bcf	12,2	;volatile
 18263                           
 18264                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18265  25E7  118C               	bcf	12,3	;volatile
 18266                           
 18267                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18268  25E8  120C               	bcf	12,4	;volatile
 18269                           
 18270                           ;LEDs.c: 22: switch (x) {
 18271  25E9  2E19               	goto	l7718
 18272  25EA                     l7706:	
 18273                           ;LEDs.c: 23: case 1:
 18274                           
 18275                           
 18276                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18277  25EA  0021               	movlb	1	; select bank1
 18278  25EB  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18279  25EC  0027               	movlb	7	; select bank7
 18280  25ED  1C03               	skipc
 18281  25EE  100C               	bcf	12,0	;volatile
 18282  25EF  1803               	skipnc
 18283  25F0  140C               	bsf	12,0	;volatile
 18284                           
 18285                           ;LEDs.c: 25: break;
 18286  25F1  0008               	return
 18287  25F2                     l7708:	
 18288                           ;LEDs.c: 26: case 2:
 18289                           
 18290                           
 18291                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18292  25F2  0021               	movlb	1	; select bank1
 18293  25F3  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18294  25F4  0027               	movlb	7	; select bank7
 18295  25F5  1C03               	skipc
 18296  25F6  108C               	bcf	12,1	;volatile
 18297  25F7  1803               	skipnc
 18298  25F8  148C               	bsf	12,1	;volatile
 18299                           
 18300                           ;LEDs.c: 28: break;
 18301  25F9  0008               	return
 18302  25FA                     l7710:	
 18303                           ;LEDs.c: 29: case 3:
 18304                           
 18305                           
 18306                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18307  25FA  0021               	movlb	1	; select bank1
 18308  25FB  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18309  25FC  0027               	movlb	7	; select bank7
 18310  25FD  1C03               	skipc
 18311  25FE  110C               	bcf	12,2	;volatile
 18312  25FF  1803               	skipnc
 18313  2600  150C               	bsf	12,2	;volatile
 18314                           
 18315                           ;LEDs.c: 31: break;
 18316  2601  0008               	return
 18317  2602                     l7712:	
 18318                           ;LEDs.c: 32: case 4:
 18319                           
 18320                           
 18321                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18322  2602  0021               	movlb	1	; select bank1
 18323  2603  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18324  2604  0027               	movlb	7	; select bank7
 18325  2605  1C03               	skipc
 18326  2606  118C               	bcf	12,3	;volatile
 18327  2607  1803               	skipnc
 18328  2608  158C               	bsf	12,3	;volatile
 18329                           
 18330                           ;LEDs.c: 34: break;
 18331  2609  0008               	return
 18332  260A                     l7714:	
 18333                           ;LEDs.c: 35: case 5:
 18334                           
 18335                           
 18336                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18337  260A  0021               	movlb	1	; select bank1
 18338  260B  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18339  260C  0027               	movlb	7	; select bank7
 18340  260D  1C03               	skipc
 18341  260E  120C               	bcf	12,4	;volatile
 18342  260F  1803               	skipnc
 18343  2610  160C               	bsf	12,4	;volatile
 18344                           
 18345                           ;LEDs.c: 39: break;
 18346                           
 18347                           ;LEDs.c: 38: case 6:
 18348                           
 18349                           ;LEDs.c: 37: break;
 18350  2611  0008               	return
 18351  2612                     l792:	
 18352                           ;LEDs.c: 40: case 100:
 18353                           
 18354                           
 18355                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18356  2612  0027               	movlb	7	; select bank7
 18357  2613  140C               	bsf	12,0	;volatile
 18358                           
 18359                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18360  2614  148C               	bsf	12,1	;volatile
 18361                           
 18362                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18363  2615  150C               	bsf	12,2	;volatile
 18364                           
 18365                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18366  2616  158C               	bsf	12,3	;volatile
 18367                           
 18368                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18369  2617  160C               	bsf	12,4	;volatile
 18370                           
 18371                           ;LEDs.c: 47: }
 18372                           
 18373                           ;LEDs.c: 46: break;
 18374  2618  0008               	return
 18375  2619                     l7718:	
 18376                           
 18377                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18378                           ; Switch size 1, requested type "space"
 18379                           ; Number of cases is 1, Range of values is 0 to 0
 18380                           ; switch strategies available:
 18381                           ; Name         Instructions Cycles
 18382                           ; simple_byte            4     3 (average)
 18383                           ; direct_byte            8     6 (fixed)
 18384                           ; jumptable            260     6 (fixed)
 18385                           ;	Chosen strategy is simple_byte
 18386  2619  0021               	movlb	1	; select bank1
 18387  261A  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18388  261B  3A00               	xorlw	0	; case 0
 18389  261C  1903               	skipnz
 18390  261D  2E1F               	goto	l9816
 18391  261E  2E36               	goto	l793
 18392  261F                     l9816:	
 18393                           
 18394                           ; Switch size 1, requested type "space"
 18395                           ; Number of cases is 7, Range of values is 1 to 100
 18396                           ; switch strategies available:
 18397                           ; Name         Instructions Cycles
 18398                           ; simple_byte           22    12 (average)
 18399                           ; direct_byte          209     9 (fixed)
 18400                           ; jumptable            263     9 (fixed)
 18401                           ;	Chosen strategy is simple_byte
 18402  261F  0820               	movf	set_leds_top@x^(0+128),w
 18403  2620  3A01               	xorlw	1	; case 1
 18404  2621  1903               	skipnz
 18405  2622  2DEA               	goto	l7706
 18406  2623  3A03               	xorlw	3	; case 2
 18407  2624  1903               	skipnz
 18408  2625  2DF2               	goto	l7708
 18409  2626  3A01               	xorlw	1	; case 3
 18410  2627  1903               	skipnz
 18411  2628  2DFA               	goto	l7710
 18412  2629  3A07               	xorlw	7	; case 4
 18413  262A  1903               	skipnz
 18414  262B  2E02               	goto	l7712
 18415  262C  3A01               	xorlw	1	; case 5
 18416  262D  1903               	skipnz
 18417  262E  2E0A               	goto	l7714
 18418  262F  3A03               	xorlw	3	; case 6
 18419  2630  1903               	skipnz
 18420  2631  2E36               	goto	l793
 18421  2632  3A62               	xorlw	98	; case 100
 18422  2633  1903               	skipnz
 18423  2634  2E12               	goto	l792
 18424  2635  2E36               	goto	l793
 18425  2636                     l793:	
 18426  2636  0008               	return
 18427  2637                     __end_of_set_leds_top:	
 18428                           
 18429                           	psect	text65
 18430  2149                     __ptext65:	
 18431 ;; *************** function _set_leds_bottom *****************
 18432 ;; Defined at:
 18433 ;;		line 51 in file "LEDs.c"
 18434 ;; Parameters:    Size  Location     Type
 18435 ;;  x               2    0[BANK1 ] int 
 18436 ;; Auto vars:     Size  Location     Type
 18437 ;;		None
 18438 ;; Return value:  Size  Location     Type
 18439 ;;                  1    wreg      void 
 18440 ;; Registers used:
 18441 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18442 ;; Tracked objects:
 18443 ;;		On entry : 0/0
 18444 ;;		On exit  : 0/0
 18445 ;;		Unchanged: 0/0
 18446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18447 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18450 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18451 ;;Total ram usage:        2 bytes
 18452 ;; Hardware stack levels used:    1
 18453 ;; Hardware stack levels required when called:    3
 18454 ;; This function calls:
 18455 ;;		Nothing
 18456 ;; This function is called by:
 18457 ;;		_ReadSavedSettings
 18458 ;;		_ring_tactiles
 18459 ;;		_solidring_tactiles
 18460 ;;		_read_bottom_tactile
 18461 ;;		_setPresetDisplay
 18462 ;;		_resetRingLEDs
 18463 ;;		_setExpressionDisplay
 18464 ;;		_star_tactiles
 18465 ;; This function uses a non-reentrant model
 18466 ;;
 18467                           
 18468                           
 18469                           ;psect for function _set_leds_bottom
 18470  2149                     _set_leds_bottom:	
 18471                           
 18472                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18473                           
 18474                           ;incstack = 0
 18475                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18476  2149  0022               	movlb	2	; select bank2
 18477  214A  100F               	bcf	15,0	;volatile
 18478                           
 18479                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18480  214B  108F               	bcf	15,1	;volatile
 18481                           
 18482                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18483  214C  110F               	bcf	15,2	;volatile
 18484                           
 18485                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18486  214D  118F               	bcf	15,3	;volatile
 18487                           
 18488                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18489  214E  120F               	bcf	15,4	;volatile
 18490                           
 18491                           ;LEDs.c: 57: switch (x) {
 18492  214F  2966               	goto	l7734
 18493  2150                     l797:	
 18494                           ;LEDs.c: 58: case 1:
 18495                           
 18496                           
 18497                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18498  2150  0022               	movlb	2	; select bank2
 18499  2151  140F               	bsf	15,0	;volatile
 18500                           
 18501                           ;LEDs.c: 60: break;
 18502  2152  0008               	return
 18503  2153                     l799:	
 18504                           ;LEDs.c: 61: case 2:
 18505                           
 18506                           
 18507                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18508  2153  0022               	movlb	2	; select bank2
 18509  2154  148F               	bsf	15,1	;volatile
 18510                           
 18511                           ;LEDs.c: 63: break;
 18512  2155  0008               	return
 18513  2156                     l800:	
 18514                           ;LEDs.c: 64: case 3:
 18515                           
 18516                           
 18517                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18518  2156  0022               	movlb	2	; select bank2
 18519  2157  150F               	bsf	15,2	;volatile
 18520                           
 18521                           ;LEDs.c: 66: break;
 18522  2158  0008               	return
 18523  2159                     l801:	
 18524                           ;LEDs.c: 67: case 4:
 18525                           
 18526                           
 18527                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18528  2159  0022               	movlb	2	; select bank2
 18529  215A  158F               	bsf	15,3	;volatile
 18530                           
 18531                           ;LEDs.c: 69: break;
 18532  215B  0008               	return
 18533  215C                     l802:	
 18534                           ;LEDs.c: 70: case 5:
 18535                           
 18536                           
 18537                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18538  215C  0022               	movlb	2	; select bank2
 18539  215D  160F               	bsf	15,4	;volatile
 18540                           
 18541                           ;LEDs.c: 74: break;
 18542                           
 18543                           ;LEDs.c: 73: case 6:
 18544                           
 18545                           ;LEDs.c: 72: break;
 18546  215E  0008               	return
 18547  215F                     l804:	
 18548                           ;LEDs.c: 75: case 100:
 18549                           
 18550                           
 18551                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18552  215F  0022               	movlb	2	; select bank2
 18553  2160  140F               	bsf	15,0	;volatile
 18554                           
 18555                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18556  2161  148F               	bsf	15,1	;volatile
 18557                           
 18558                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18559  2162  150F               	bsf	15,2	;volatile
 18560                           
 18561                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18562  2163  158F               	bsf	15,3	;volatile
 18563                           
 18564                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18565  2164  160F               	bsf	15,4	;volatile
 18566                           
 18567                           ;LEDs.c: 82: }
 18568                           
 18569                           ;LEDs.c: 81: break;
 18570  2165  0008               	return
 18571  2166                     l7734:	
 18572                           
 18573                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18574                           ; Switch size 1, requested type "space"
 18575                           ; Number of cases is 1, Range of values is 0 to 0
 18576                           ; switch strategies available:
 18577                           ; Name         Instructions Cycles
 18578                           ; simple_byte            4     3 (average)
 18579                           ; direct_byte            8     6 (fixed)
 18580                           ; jumptable            260     6 (fixed)
 18581                           ;	Chosen strategy is simple_byte
 18582  2166  0021               	movlb	1	; select bank1
 18583  2167  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18584  2168  3A00               	xorlw	0	; case 0
 18585  2169  1903               	skipnz
 18586  216A  296C               	goto	l9818
 18587  216B  2983               	goto	l805
 18588  216C                     l9818:	
 18589                           
 18590                           ; Switch size 1, requested type "space"
 18591                           ; Number of cases is 7, Range of values is 1 to 100
 18592                           ; switch strategies available:
 18593                           ; Name         Instructions Cycles
 18594                           ; simple_byte           22    12 (average)
 18595                           ; direct_byte          209     9 (fixed)
 18596                           ; jumptable            263     9 (fixed)
 18597                           ;	Chosen strategy is simple_byte
 18598  216C  0820               	movf	set_leds_bottom@x^(0+128),w
 18599  216D  3A01               	xorlw	1	; case 1
 18600  216E  1903               	skipnz
 18601  216F  2950               	goto	l797
 18602  2170  3A03               	xorlw	3	; case 2
 18603  2171  1903               	skipnz
 18604  2172  2953               	goto	l799
 18605  2173  3A01               	xorlw	1	; case 3
 18606  2174  1903               	skipnz
 18607  2175  2956               	goto	l800
 18608  2176  3A07               	xorlw	7	; case 4
 18609  2177  1903               	skipnz
 18610  2178  2959               	goto	l801
 18611  2179  3A01               	xorlw	1	; case 5
 18612  217A  1903               	skipnz
 18613  217B  295C               	goto	l802
 18614  217C  3A03               	xorlw	3	; case 6
 18615  217D  1903               	skipnz
 18616  217E  2983               	goto	l805
 18617  217F  3A62               	xorlw	98	; case 100
 18618  2180  1903               	skipnz
 18619  2181  295F               	goto	l804
 18620  2182  2983               	goto	l805
 18621  2183                     l805:	
 18622  2183  0008               	return
 18623  2184                     __end_of_set_leds_bottom:	
 18624                           
 18625                           	psect	text66
 18626  2EA2                     __ptext66:	
 18627 ;; *************** function _FLASH_ReadWord *****************
 18628 ;; Defined at:
 18629 ;;		line 58 in file "memory.c"
 18630 ;; Parameters:    Size  Location     Type
 18631 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18632 ;; Auto vars:     Size  Location     Type
 18633 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18634 ;; Return value:  Size  Location     Type
 18635 ;;                  2    0[BANK1 ] unsigned int 
 18636 ;; Registers used:
 18637 ;;		wreg, status,2, status,0
 18638 ;; Tracked objects:
 18639 ;;		On entry : 0/0
 18640 ;;		On exit  : 0/0
 18641 ;;		Unchanged: 0/0
 18642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18643 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18644 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18646 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18647 ;;Total ram usage:        3 bytes
 18648 ;; Hardware stack levels used:    1
 18649 ;; Hardware stack levels required when called:    3
 18650 ;; This function calls:
 18651 ;;		Nothing
 18652 ;; This function is called by:
 18653 ;;		_ReadSavedSettings
 18654 ;;		_FLASH_WriteWord
 18655 ;; This function uses a non-reentrant model
 18656 ;;
 18657                           
 18658                           
 18659                           ;psect for function _FLASH_ReadWord
 18660  2EA2                     _FLASH_ReadWord:	
 18661                           
 18662                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18663                           
 18664                           ;incstack = 0
 18665                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18666  2EA2  3000               	movlw	0
 18667  2EA3  1B8B               	btfsc	11,7	;volatile
 18668  2EA4  3001               	movlw	1
 18669  2EA5  0021               	movlb	1	; select bank1
 18670  2EA6  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18671                           
 18672                           ;memory.c: 61: INTCONbits.GIE = 0;
 18673  2EA7  138B               	bcf	11,7	;volatile
 18674                           
 18675                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18676  2EA8  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18677  2EA9  0023               	movlb	3	; select bank3
 18678  2EAA  0091               	movwf	17	;volatile
 18679                           
 18680                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18681  2EAB  0021               	movlb	1	; select bank1
 18682  2EAC  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18683  2EAD  0023               	movlb	3	; select bank3
 18684  2EAE  0092               	movwf	18	;volatile
 18685                           
 18686                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18687  2EAF  1315               	bcf	21,6	;volatile
 18688                           
 18689                           ;memory.c: 66: PMCON1bits.RD = 1;
 18690  2EB0  1415               	bsf	21,0	;volatile
 18691                           
 18692                           ;memory.c: 67: __nop();
 18693  2EB1  0000               	nop
 18694                           
 18695                           ;memory.c: 68: __nop();
 18696  2EB2  0000               	nop
 18697                           
 18698                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18699  2EB3  0021               	movlb	1	; select bank1
 18700  2EB4  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18701  2EB5  1C03               	skipc
 18702  2EB6  138B               	bcf	11,7	;volatile
 18703  2EB7  1803               	skipnc
 18704  2EB8  178B               	bsf	11,7	;volatile
 18705                           
 18706                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18707  2EB9  0023               	movlb	3	; select bank3
 18708  2EBA  0814               	movf	20,w	;volatile
 18709  2EBB  0021               	movlb	1	; select bank1
 18710  2EBC  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18711  2EBD  0023               	movlb	3	; select bank3
 18712  2EBE  0813               	movf	19,w	;volatile
 18713  2EBF  0021               	movlb	1	; select bank1
 18714  2EC0  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18715  2EC1  0008               	return
 18716  2EC2                     __end_of_FLASH_ReadWord:	
 18717                           
 18718                           	psect	text67
 18719  2F27                     __ptext67:	
 18720 ;; *************** function _InitializeTaps *****************
 18721 ;; Defined at:
 18722 ;;		line 228 in file "user.c"
 18723 ;; Parameters:    Size  Location     Type
 18724 ;;		None
 18725 ;; Auto vars:     Size  Location     Type
 18726 ;;  itap            2    1[BANK1 ] int 
 18727 ;; Return value:  Size  Location     Type
 18728 ;;                  1    wreg      void 
 18729 ;; Registers used:
 18730 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18731 ;; Tracked objects:
 18732 ;;		On entry : 0/0
 18733 ;;		On exit  : 0/0
 18734 ;;		Unchanged: 0/0
 18735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18737 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18738 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18739 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18740 ;;Total ram usage:        3 bytes
 18741 ;; Hardware stack levels used:    1
 18742 ;; Hardware stack levels required when called:    3
 18743 ;; This function calls:
 18744 ;;		Nothing
 18745 ;; This function is called by:
 18746 ;;		_main
 18747 ;; This function uses a non-reentrant model
 18748 ;;
 18749                           
 18750                           
 18751                           ;psect for function _InitializeTaps
 18752  2F27                     _InitializeTaps:	
 18753                           
 18754                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18755                           
 18756                           ;incstack = 0
 18757                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18758  2F27  0021               	movlb	1	; select bank1
 18759  2F28  01A1               	clrf	InitializeTaps@itap^(0+128)
 18760  2F29  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18761  2F2A                     L23:	
 18762  2F2A  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18763  2F2B  3A80               	xorlw	128
 18764  2F2C  00A0               	movwf	??_InitializeTaps^(0+128)
 18765  2F2D  3080               	movlw	128
 18766  2F2E  0220               	subwf	??_InitializeTaps^(0+128),w
 18767  2F2F  1D03               	skipz
 18768  2F30  2F33               	goto	u9255
 18769  2F31  300C               	movlw	12
 18770  2F32  0221               	subwf	InitializeTaps@itap^(0+128),w
 18771  2F33                     u9255:	
 18772  2F33  1803               	btfsc	3,0
 18773  2F34  0008               	return
 18774                           
 18775                           ;user.c: 230: tap[itap] = 0;
 18776  2F35  0021               	movlb	1	; select bank1
 18777  2F36  0821               	movf	InitializeTaps@itap^(0+128),w
 18778  2F37  00A0               	movwf	??_InitializeTaps^(0+128)
 18779  2F38  3001               	movlw	1
 18780  2F39                     u9265:	
 18781  2F39  35A0               	lslf	??_InitializeTaps^(0+128),f
 18782  2F3A  3EFF               	addlw	-1
 18783  2F3B  1D03               	skipz
 18784  2F3C  2F39               	goto	u9265
 18785  2F3D  3520               	lslf	??_InitializeTaps^(0+128),w
 18786  2F3E  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18787  2F3F  0086               	movwf	6
 18788  2F40  3002               	movlw	2	; select bank5/6
 18789  2F41  0087               	movwf	7
 18790  2F42  3000               	movlw	0
 18791  2F43  3FC0               	movwi [0]fsr1
 18792  2F44  3000               	movlw	0
 18793  2F45  3FC1               	movwi [1]fsr1
 18794  2F46  3FC2               	movwi [2]fsr1
 18795  2F47  3FC3               	movwi [3]fsr1
 18796  2F48  3001               	movlw	1
 18797  2F49  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18798  2F4A  3000               	movlw	0
 18799  2F4B  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18800  2F4C  2F2A               	goto	L23
 18801  2F4D                     __end_of_InitializeTaps:	
 18802                           
 18803                           	psect	text68
 18804  200F                     __ptext68:	
 18805 ;; *************** function _InitApp *****************
 18806 ;; Defined at:
 18807 ;;		line 23 in file "user.c"
 18808 ;; Parameters:    Size  Location     Type
 18809 ;;		None
 18810 ;; Auto vars:     Size  Location     Type
 18811 ;;		None
 18812 ;; Return value:  Size  Location     Type
 18813 ;;                  1    wreg      void 
 18814 ;; Registers used:
 18815 ;;		wreg, status,2, status,0, pclath, cstack
 18816 ;; Tracked objects:
 18817 ;;		On entry : 0/0
 18818 ;;		On exit  : 0/0
 18819 ;;		Unchanged: 0/0
 18820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18825 ;;Total ram usage:        0 bytes
 18826 ;; Hardware stack levels used:    1
 18827 ;; Hardware stack levels required when called:    5
 18828 ;; This function calls:
 18829 ;;		_init_adc
 18830 ;;		_init_pwm
 18831 ;; This function is called by:
 18832 ;;		_main
 18833 ;; This function uses a non-reentrant model
 18834 ;;
 18835                           
 18836                           
 18837                           ;psect for function _InitApp
 18838  200F                     _InitApp:	
 18839                           
 18840                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18841                           
 18842                           ;incstack = 0
 18843                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18844  200F  0021               	movlb	1	; select bank1
 18845  2010  100D               	bcf	13,0	;volatile
 18846                           
 18847                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18848  2011  108D               	bcf	13,1	;volatile
 18849                           
 18850                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18851  2012  110D               	bcf	13,2	;volatile
 18852                           
 18853                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18854  2013  118D               	bcf	13,3	;volatile
 18855                           
 18856                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18857  2014  120D               	bcf	13,4	;volatile
 18858                           
 18859                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18860  2015  128D               	bcf	13,5	;volatile
 18861                           
 18862                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18863  2016  140E               	bsf	14,0	;volatile
 18864                           
 18865                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18866  2017  120E               	bcf	14,4	;volatile
 18867                           
 18868                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18869  2018  128E               	bcf	14,5	;volatile
 18870                           
 18871                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18872  2019  100F               	bcf	15,0	;volatile
 18873                           
 18874                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18875  201A  108F               	bcf	15,1	;volatile
 18876                           
 18877                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18878  201B  110F               	bcf	15,2	;volatile
 18879                           
 18880                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18881  201C  118F               	bcf	15,3	;volatile
 18882                           
 18883                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18884  201D  120F               	bcf	15,4	;volatile
 18885                           
 18886                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18887  201E  168F               	bsf	15,5	;volatile
 18888                           
 18889                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18890  201F  170F               	bsf	15,6	;volatile
 18891                           
 18892                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18893  2020  178F               	bsf	15,7	;volatile
 18894                           
 18895                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18896  2021  1410               	bsf	16,0	;volatile
 18897                           
 18898                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18899  2022  1490               	bsf	16,1	;volatile
 18900                           
 18901                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18902  2023  0023               	movlb	3	; select bank3
 18903  2024  1010               	bcf	16,0	;volatile
 18904                           
 18905                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18906  2025  1090               	bcf	16,1	;volatile
 18907                           
 18908                           ;user.c: 53: PORTEbits.RE0 = 0;
 18909  2026  0020               	movlb	0	; select bank0
 18910  2027  1010               	bcf	16,0	;volatile
 18911                           
 18912                           ;user.c: 54: PORTEbits.RE1 = 0;
 18913  2028  1090               	bcf	16,1	;volatile
 18914                           
 18915                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18916  2029  0026               	movlb	6	; select bank6
 18917  202A  100C               	bcf	12,0	;volatile
 18918                           
 18919                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18920  202B  108C               	bcf	12,1	;volatile
 18921                           
 18922                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18923  202C  110C               	bcf	12,2	;volatile
 18924                           
 18925                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18926  202D  118C               	bcf	12,3	;volatile
 18927                           
 18928                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18929  202E  120C               	bcf	12,4	;volatile
 18930                           
 18931                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18932  202F  128C               	bcf	12,5	;volatile
 18933                           
 18934                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18935  2030  170C               	bsf	12,6	;volatile
 18936                           
 18937                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18938  2031  0028               	movlb	8	; select bank8
 18939  2032  130C               	bcf	12,6	;volatile
 18940                           
 18941                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18942  2033  0026               	movlb	6	; select bank6
 18943  2034  108D               	bcf	13,1	;volatile
 18944                           
 18945                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18946  2035  110D               	bcf	13,2	;volatile
 18947                           
 18948                           ;user.c: 68: init_adc();
 18949  2036  31AD  25B9  31A0   	fcall	_init_adc
 18950                           
 18951                           ;user.c: 69: init_pwm();
 18952  2039  31A3  2338         	fcall	_init_pwm
 18953                           
 18954                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18955  203B  178B               	bsf	11,7	;volatile
 18956                           
 18957                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18958  203C  168B               	bsf	11,5	;volatile
 18959                           
 18960                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18961  203D  110B               	bcf	11,2	;volatile
 18962  203E  0008               	return
 18963  203F                     __end_of_InitApp:	
 18964                           
 18965                           	psect	text69
 18966  2338                     __ptext69:	
 18967 ;; *************** function _init_pwm *****************
 18968 ;; Defined at:
 18969 ;;		line 129 in file "user.c"
 18970 ;; Parameters:    Size  Location     Type
 18971 ;;		None
 18972 ;; Auto vars:     Size  Location     Type
 18973 ;;		None
 18974 ;; Return value:  Size  Location     Type
 18975 ;;                  1    wreg      void 
 18976 ;; Registers used:
 18977 ;;		wreg, status,2, status,0, pclath, cstack
 18978 ;; Tracked objects:
 18979 ;;		On entry : 0/0
 18980 ;;		On exit  : 0/0
 18981 ;;		Unchanged: 0/0
 18982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18987 ;;Total ram usage:        0 bytes
 18988 ;; Hardware stack levels used:    1
 18989 ;; Hardware stack levels required when called:    4
 18990 ;; This function calls:
 18991 ;;		_init_timer0
 18992 ;;		_init_timer2
 18993 ;; This function is called by:
 18994 ;;		_InitApp
 18995 ;; This function uses a non-reentrant model
 18996 ;;
 18997                           
 18998                           
 18999                           ;psect for function _init_pwm
 19000  2338                     _init_pwm:	
 19001                           
 19002                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19003                           
 19004                           ;incstack = 0
 19005                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19006  2338  0022               	movlb	2	; select bank2
 19007  2339  101D               	bcf	29,0	;volatile
 19008                           
 19009                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19010  233A  0021               	movlb	1	; select bank1
 19011  233B  110E               	bcf	14,2	;volatile
 19012                           
 19013                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19014  233C  108E               	bcf	14,1	;volatile
 19015                           
 19016                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19017  233D  0026               	movlb	6	; select bank6
 19018  233E  100D               	bcf	13,0	;volatile
 19019                           
 19020                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19021  233F  118D               	bcf	13,3	;volatile
 19022                           
 19023                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19024  2340  120D               	bcf	13,4	;volatile
 19025                           
 19026                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19027  2341  0021               	movlb	1	; select bank1
 19028  2342  1310               	bcf	16,6	;volatile
 19029                           
 19030                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19031  2343  1290               	bcf	16,5	;volatile
 19032                           
 19033                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19034  2344  1210               	bcf	16,4	;volatile
 19035                           
 19036                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19037  2345  1190               	bcf	16,3	;volatile
 19038                           
 19039                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19040  2346  1110               	bcf	16,2	;volatile
 19041                           
 19042                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19043  2347  300F               	movlw	15
 19044  2348  0025               	movlb	5	; select bank5
 19045  2349  0493               	iorwf	19,f	;volatile
 19046                           
 19047                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19048  234A  300F               	movlw	15
 19049  234B  049A               	iorwf	26,f	;volatile
 19050                           
 19051                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19052  234C  300F               	movlw	15
 19053  234D  0026               	movlb	6	; select bank6
 19054  234E  0493               	iorwf	19,f	;volatile
 19055                           
 19056                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19057  234F  300F               	movlw	15
 19058  2350  049A               	iorwf	26,f	;volatile
 19059                           
 19060                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19061  2351  300F               	movlw	15
 19062  2352  049E               	iorwf	30,f	;volatile
 19063                           
 19064                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19065  2353  300F               	movlw	15
 19066  2354  002C               	movlb	12	; select bank12
 19067  2355  0493               	iorwf	19,f	;volatile
 19068                           
 19069                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19070  2356  300F               	movlw	15
 19071  2357  0496               	iorwf	22,f	;volatile
 19072                           
 19073                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19074  2358  300F               	movlw	15
 19075  2359  0499               	iorwf	25,f	;volatile
 19076                           
 19077                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19078  235A  300F               	movlw	15
 19079  235B  049C               	iorwf	28,f	;volatile
 19080                           
 19081                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19082  235C  300F               	movlw	15
 19083  235D  049F               	iorwf	31,f	;volatile
 19084                           
 19085                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19086  235E  0025               	movlb	5	; select bank5
 19087  235F  019D               	clrf	29	;volatile
 19088                           
 19089                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19090  2360  019E               	clrf	30	;volatile
 19091                           
 19092                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19093  2361  019F               	clrf	31	;volatile
 19094                           
 19095                           ;user.c: 154: CCPR1 = 50;
 19096  2362  3000               	movlw	0
 19097  2363  0092               	movwf	18	;volatile
 19098  2364  3032               	movlw	50
 19099  2365  0091               	movwf	17	;volatile
 19100                           
 19101                           ;user.c: 155: CCPR2 = 100;
 19102  2366  3000               	movlw	0
 19103  2367  0099               	movwf	25	;volatile
 19104  2368  3064               	movlw	100
 19105  2369  0098               	movwf	24	;volatile
 19106                           
 19107                           ;user.c: 156: CCPR3 = 150;
 19108  236A  3000               	movlw	0
 19109  236B  0026               	movlb	6	; select bank6
 19110  236C  0092               	movwf	18	;volatile
 19111  236D  3096               	movlw	150
 19112  236E  0091               	movwf	17	;volatile
 19113                           
 19114                           ;user.c: 157: CCPR4 = 200;
 19115  236F  3000               	movlw	0
 19116  2370  0099               	movwf	25	;volatile
 19117  2371  30C8               	movlw	200
 19118  2372  0098               	movwf	24	;volatile
 19119                           
 19120                           ;user.c: 158: init_timer2();
 19121  2373  31AD  25A7  31A3   	fcall	_init_timer2
 19122                           
 19123                           ;user.c: 159: init_timer0();
 19124  2376  31AD  25A0         	fcall	_init_timer0
 19125  2378  0008               	return
 19126  2379                     __end_of_init_pwm:	
 19127                           
 19128                           	psect	text70
 19129  2DA7                     __ptext70:	
 19130 ;; *************** function _init_timer2 *****************
 19131 ;; Defined at:
 19132 ;;		line 162 in file "user.c"
 19133 ;; Parameters:    Size  Location     Type
 19134 ;;		None
 19135 ;; Auto vars:     Size  Location     Type
 19136 ;;		None
 19137 ;; Return value:  Size  Location     Type
 19138 ;;                  1    wreg      void 
 19139 ;; Registers used:
 19140 ;;		wreg, status,2, status,0
 19141 ;; Tracked objects:
 19142 ;;		On entry : 0/0
 19143 ;;		On exit  : 0/0
 19144 ;;		Unchanged: 0/0
 19145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19150 ;;Total ram usage:        0 bytes
 19151 ;; Hardware stack levels used:    1
 19152 ;; Hardware stack levels required when called:    3
 19153 ;; This function calls:
 19154 ;;		Nothing
 19155 ;; This function is called by:
 19156 ;;		_init_pwm
 19157 ;; This function uses a non-reentrant model
 19158 ;;
 19159                           
 19160                           
 19161                           ;psect for function _init_timer2
 19162  2DA7                     _init_timer2:	
 19163                           
 19164                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19165                           
 19166                           ;incstack = 0
 19167                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19168  2DA7  3087               	movlw	-121
 19169  2DA8  0020               	movlb	0	; select bank0
 19170  2DA9  059C               	andwf	28,f	;volatile
 19171                           
 19172                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19173  2DAA  30FC               	movlw	-4
 19174  2DAB  059C               	andwf	28,f	;volatile
 19175                           
 19176                           ;user.c: 165: PR2 = 0xFF;
 19177  2DAC  30FF               	movlw	255
 19178  2DAD  009B               	movwf	27	;volatile
 19179                           
 19180                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19181  2DAE  151C               	bsf	28,2	;volatile
 19182  2DAF  0008               	return
 19183  2DB0                     __end_of_init_timer2:	
 19184                           
 19185                           	psect	text71
 19186  2DA0                     __ptext71:	
 19187 ;; *************** function _init_timer0 *****************
 19188 ;; Defined at:
 19189 ;;		line 169 in file "user.c"
 19190 ;; Parameters:    Size  Location     Type
 19191 ;;		None
 19192 ;; Auto vars:     Size  Location     Type
 19193 ;;		None
 19194 ;; Return value:  Size  Location     Type
 19195 ;;                  1    wreg      void 
 19196 ;; Registers used:
 19197 ;;		None
 19198 ;; Tracked objects:
 19199 ;;		On entry : 0/0
 19200 ;;		On exit  : 0/0
 19201 ;;		Unchanged: 0/0
 19202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19207 ;;Total ram usage:        0 bytes
 19208 ;; Hardware stack levels used:    1
 19209 ;; Hardware stack levels required when called:    3
 19210 ;; This function calls:
 19211 ;;		Nothing
 19212 ;; This function is called by:
 19213 ;;		_init_pwm
 19214 ;; This function uses a non-reentrant model
 19215 ;;
 19216                           
 19217                           
 19218                           ;psect for function _init_timer0
 19219  2DA0                     _init_timer0:	
 19220                           
 19221                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19222                           
 19223                           ;incstack = 0
 19224                           ; Regs used in _init_timer0: []
 19225  2DA0  0021               	movlb	1	; select bank1
 19226  2DA1  1295               	bcf	21,5	;volatile
 19227                           
 19228                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19229  2DA2  1195               	bcf	21,3	;volatile
 19230                           
 19231                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19232  2DA3  1015               	bcf	21,0	;volatile
 19233                           
 19234                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19235  2DA4  1495               	bsf	21,1	;volatile
 19236                           
 19237                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19238  2DA5  1115               	bcf	21,2	;volatile
 19239  2DA6  0008               	return
 19240  2DA7                     __end_of_init_timer0:	
 19241                           
 19242                           	psect	text72
 19243  2DB9                     __ptext72:	
 19244 ;; *************** function _init_adc *****************
 19245 ;; Defined at:
 19246 ;;		line 115 in file "user.c"
 19247 ;; Parameters:    Size  Location     Type
 19248 ;;		None
 19249 ;; Auto vars:     Size  Location     Type
 19250 ;;		None
 19251 ;; Return value:  Size  Location     Type
 19252 ;;                  1    wreg      void 
 19253 ;; Registers used:
 19254 ;;		wreg, status,2, status,0
 19255 ;; Tracked objects:
 19256 ;;		On entry : 0/0
 19257 ;;		On exit  : 0/0
 19258 ;;		Unchanged: 0/0
 19259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19264 ;;Total ram usage:        0 bytes
 19265 ;; Hardware stack levels used:    1
 19266 ;; Hardware stack levels required when called:    3
 19267 ;; This function calls:
 19268 ;;		Nothing
 19269 ;; This function is called by:
 19270 ;;		_InitApp
 19271 ;; This function uses a non-reentrant model
 19272 ;;
 19273                           
 19274                           
 19275                           ;psect for function _init_adc
 19276  2DB9                     _init_adc:	
 19277                           
 19278                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19279                           
 19280                           ;incstack = 0
 19281                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19282  2DB9  0021               	movlb	1	; select bank1
 19283  2DBA  179E               	bsf	30,7	;volatile
 19284                           
 19285                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19286  2DBB  081E               	movf	30,w	;volatile
 19287  2DBC  398F               	andlw	-113
 19288  2DBD  3860               	iorlw	96
 19289  2DBE  009E               	movwf	30	;volatile
 19290                           
 19291                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19292  2DBF  30FC               	movlw	-4
 19293  2DC0  059E               	andwf	30,f	;volatile
 19294                           
 19295                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19296  2DC1  141D               	bsf	29,0	;volatile
 19297  2DC2  0008               	return
 19298  2DC3                     __end_of_init_adc:	
 19299                           
 19300                           	psect	text73
 19301  2D98                     __ptext73:	
 19302 ;; *************** function _ConfigureOscillator *****************
 19303 ;; Defined at:
 19304 ;;		line 18 in file "system.c"
 19305 ;; Parameters:    Size  Location     Type
 19306 ;;		None
 19307 ;; Auto vars:     Size  Location     Type
 19308 ;;		None
 19309 ;; Return value:  Size  Location     Type
 19310 ;;                  1    wreg      void 
 19311 ;; Registers used:
 19312 ;;		wreg, status,2, status,0
 19313 ;; Tracked objects:
 19314 ;;		On entry : 0/0
 19315 ;;		On exit  : 0/0
 19316 ;;		Unchanged: 0/0
 19317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19322 ;;Total ram usage:        0 bytes
 19323 ;; Hardware stack levels used:    1
 19324 ;; Hardware stack levels required when called:    3
 19325 ;; This function calls:
 19326 ;;		Nothing
 19327 ;; This function is called by:
 19328 ;;		_main
 19329 ;; This function uses a non-reentrant model
 19330 ;;
 19331                           
 19332                           
 19333                           ;psect for function _ConfigureOscillator
 19334  2D98                     _ConfigureOscillator:	
 19335                           
 19336                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19337                           
 19338                           ;incstack = 0
 19339                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19340  2D98  30FC               	movlw	-4
 19341  2D99  0021               	movlb	1	; select bank1
 19342  2D9A  0599               	andwf	25,f	;volatile
 19343  2D9B  0008               	return
 19344  2D9C                     __end_of_ConfigureOscillator:	
 19345                           
 19346                           	psect	intentry
 19347  0004                     __pintentry:	
 19348 ;; *************** function _isr *****************
 19349 ;; Defined at:
 19350 ;;		line 28 in file "interrupts.c"
 19351 ;; Parameters:    Size  Location     Type
 19352 ;;		None
 19353 ;; Auto vars:     Size  Location     Type
 19354 ;;  subDiv          1   13[COMMON] unsigned char 
 19355 ;; Return value:  Size  Location     Type
 19356 ;;                  1    wreg      void 
 19357 ;; Registers used:
 19358 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19359 ;; Tracked objects:
 19360 ;;		On entry : 0/0
 19361 ;;		On exit  : 0/0
 19362 ;;		Unchanged: 0/0
 19363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19365 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19366 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19367 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19368 ;;Total ram usage:        7 bytes
 19369 ;; Hardware stack levels used:    1
 19370 ;; Hardware stack levels required when called:    2
 19371 ;; This function calls:
 19372 ;;		_modulation
 19373 ;;		i1___awdiv
 19374 ;;		i1_getModulationSubdivision
 19375 ;;		i1_set_leds_top
 19376 ;; This function is called by:
 19377 ;;		Interrupt level 1
 19378 ;; This function uses a non-reentrant model
 19379 ;;
 19380                           
 19381  0004                     _isr:	
 19382                           
 19383                           ;incstack = 0
 19384                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19385  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19386  0005  3180               	pagesel	$
 19387  0006  0020               	movlb	0	; select bank0
 19388  0007  087F               	movf	127,w
 19389  0008  00BF               	movwf	??_isr+5
 19390                           
 19391                           ;interrupts.c: 31: extern char isInitialized;
 19392                           ;interrupts.c: 32: extern volatile long timer;
 19393                           ;interrupts.c: 33: extern volatile long sub_timer;
 19394                           ;interrupts.c: 34: extern volatile long tap_timer;
 19395                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19396                           ;interrupts.c: 36: extern int mod_delay_time;
 19397                           ;interrupts.c: 40: extern int top_push_state;
 19398                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19399                           ;interrupts.c: 42: extern volatile long mod_timer;
 19400                           ;interrupts.c: 43: extern volatile long delay_time;
 19401                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 19402  0009  1D0B               	btfss	11,2	;volatile
 19403  000A  2AD8               	goto	i1l135
 19404                           
 19405                           ;interrupts.c: 47: if (isInitialized == 0) {
 19406  000B  0023               	movlb	3	; select bank3
 19407  000C  083E               	movf	_isInitialized^(0+384),w
 19408  000D  1903               	btfsc	3,2
 19409  000E  2AD7               	goto	i1l6996
 19410                           
 19411                           ;interrupts.c: 52: }
 19412                           ;interrupts.c: 63: if (timer == 0) {
 19413                           
 19414                           ;interrupts.c: 51: return;
 19415                           
 19416                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 19417  000F  0020               	movlb	0	; select bank0
 19418  0010  084B               	movf	_timer+3,w	;volatile
 19419  0011  044A               	iorwf	_timer+2,w	;volatile
 19420  0012  0449               	iorwf	_timer+1,w	;volatile
 19421  0013  0448               	iorwf	_timer,w	;volatile
 19422  0014  1D03               	skipz
 19423  0015  281B               	goto	i1l136
 19424                           
 19425                           ;interrupts.c: 64: tmpModDelay = mod_delay_time;
 19426  0016  0023               	movlb	3	; select bank3
 19427  0017  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19428  0018  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19429  0019  0859               	movf	_mod_delay_time^(0+384),w
 19430  001A  00B8               	movwf	_tmpModDelay^(0+384)
 19431  001B                     i1l136:	
 19432                           
 19433                           ;interrupts.c: 65: }
 19434                           ;interrupts.c: 66: timer = timer + 1;
 19435  001B  3001               	movlw	1
 19436  001C  0020               	movlb	0	; select bank0
 19437  001D  00BA               	movwf	??_isr
 19438  001E  3000               	movlw	0
 19439  001F  00BB               	movwf	??_isr+1
 19440  0020  3000               	movlw	0
 19441  0021  00BC               	movwf	??_isr+2
 19442  0022  3000               	movlw	0
 19443  0023  00BD               	movwf	??_isr+3
 19444  0024  0848               	movf	_timer,w	;volatile
 19445  0025  07BA               	addwf	??_isr,f
 19446  0026  0849               	movf	_timer+1,w	;volatile
 19447  0027  3DBB               	addwfc	??_isr+1,f
 19448  0028  084A               	movf	_timer+2,w	;volatile
 19449  0029  3DBC               	addwfc	??_isr+2,f
 19450  002A  084B               	movf	_timer+3,w	;volatile
 19451  002B  3DBD               	addwfc	??_isr+3,f
 19452  002C  083D               	movf	??_isr+3,w
 19453  002D  00CB               	movwf	_timer+3	;volatile
 19454  002E  083C               	movf	??_isr+2,w
 19455  002F  00CA               	movwf	_timer+2	;volatile
 19456  0030  083B               	movf	??_isr+1,w
 19457  0031  00C9               	movwf	_timer+1	;volatile
 19458  0032  083A               	movf	??_isr,w
 19459  0033  00C8               	movwf	_timer	;volatile
 19460                           
 19461                           ;interrupts.c: 67: sub_timer = sub_timer + 1;
 19462  0034  3001               	movlw	1
 19463  0035  00BA               	movwf	??_isr
 19464  0036  3000               	movlw	0
 19465  0037  00BB               	movwf	??_isr+1
 19466  0038  3000               	movlw	0
 19467  0039  00BC               	movwf	??_isr+2
 19468  003A  3000               	movlw	0
 19469  003B  00BD               	movwf	??_isr+3
 19470  003C  0840               	movf	_sub_timer,w	;volatile
 19471  003D  07BA               	addwf	??_isr,f
 19472  003E  0841               	movf	_sub_timer+1,w	;volatile
 19473  003F  3DBB               	addwfc	??_isr+1,f
 19474  0040  0842               	movf	_sub_timer+2,w	;volatile
 19475  0041  3DBC               	addwfc	??_isr+2,f
 19476  0042  0843               	movf	_sub_timer+3,w	;volatile
 19477  0043  3DBD               	addwfc	??_isr+3,f
 19478  0044  083D               	movf	??_isr+3,w
 19479  0045  00C3               	movwf	_sub_timer+3	;volatile
 19480  0046  083C               	movf	??_isr+2,w
 19481  0047  00C2               	movwf	_sub_timer+2	;volatile
 19482  0048  083B               	movf	??_isr+1,w
 19483  0049  00C1               	movwf	_sub_timer+1	;volatile
 19484  004A  083A               	movf	??_isr,w
 19485  004B  00C0               	movwf	_sub_timer	;volatile
 19486                           
 19487                           ;interrupts.c: 68: tap_timer = tap_timer + 1;
 19488  004C  3001               	movlw	1
 19489  004D  00BA               	movwf	??_isr
 19490  004E  3000               	movlw	0
 19491  004F  00BB               	movwf	??_isr+1
 19492  0050  3000               	movlw	0
 19493  0051  00BC               	movwf	??_isr+2
 19494  0052  3000               	movlw	0
 19495  0053  00BD               	movwf	??_isr+3
 19496  0054  0844               	movf	_tap_timer,w	;volatile
 19497  0055  07BA               	addwf	??_isr,f
 19498  0056  0845               	movf	_tap_timer+1,w	;volatile
 19499  0057  3DBB               	addwfc	??_isr+1,f
 19500  0058  0846               	movf	_tap_timer+2,w	;volatile
 19501  0059  3DBC               	addwfc	??_isr+2,f
 19502  005A  0847               	movf	_tap_timer+3,w	;volatile
 19503  005B  3DBD               	addwfc	??_isr+3,f
 19504  005C  083D               	movf	??_isr+3,w
 19505  005D  00C7               	movwf	_tap_timer+3	;volatile
 19506  005E  083C               	movf	??_isr+2,w
 19507  005F  00C6               	movwf	_tap_timer+2	;volatile
 19508  0060  083B               	movf	??_isr+1,w
 19509  0061  00C5               	movwf	_tap_timer+1	;volatile
 19510  0062  083A               	movf	??_isr,w
 19511  0063  00C4               	movwf	_tap_timer	;volatile
 19512                           
 19513                           ;interrupts.c: 69: mod_timer = mod_timer + 1;
 19514  0064  3001               	movlw	1
 19515  0065  00BA               	movwf	??_isr
 19516  0066  3000               	movlw	0
 19517  0067  00BB               	movwf	??_isr+1
 19518  0068  3000               	movlw	0
 19519  0069  00BC               	movwf	??_isr+2
 19520  006A  3000               	movlw	0
 19521  006B  00BD               	movwf	??_isr+3
 19522  006C  0023               	movlb	3	; select bank3
 19523  006D  0824               	movf	_mod_timer^(0+384),w	;volatile
 19524  006E  0020               	movlb	0	; select bank0
 19525  006F  07BA               	addwf	??_isr,f
 19526  0070  0023               	movlb	3	; select bank3
 19527  0071  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19528  0072  0020               	movlb	0	; select bank0
 19529  0073  3DBB               	addwfc	??_isr+1,f
 19530  0074  0023               	movlb	3	; select bank3
 19531  0075  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19532  0076  0020               	movlb	0	; select bank0
 19533  0077  3DBC               	addwfc	??_isr+2,f
 19534  0078  0023               	movlb	3	; select bank3
 19535  0079  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19536  007A  0020               	movlb	0	; select bank0
 19537  007B  3DBD               	addwfc	??_isr+3,f
 19538  007C  083D               	movf	??_isr+3,w
 19539  007D  0023               	movlb	3	; select bank3
 19540  007E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19541  007F  0020               	movlb	0	; select bank0
 19542  0080  083C               	movf	??_isr+2,w
 19543  0081  0023               	movlb	3	; select bank3
 19544  0082  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19545  0083  0020               	movlb	0	; select bank0
 19546  0084  083B               	movf	??_isr+1,w
 19547  0085  0023               	movlb	3	; select bank3
 19548  0086  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19549  0087  0020               	movlb	0	; select bank0
 19550  0088  083A               	movf	??_isr,w
 19551  0089  0023               	movlb	3	; select bank3
 19552  008A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19553                           
 19554                           ;interrupts.c: 70: double_timer++;
 19555  008B  3001               	movlw	1
 19556  008C  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19557  008D  3000               	movlw	0
 19558  008E  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19559  008F  3000               	movlw	0
 19560  0090  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19561  0091  3000               	movlw	0
 19562  0092  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19563                           
 19564                           ;interrupts.c: 72: char subDiv = getModulationSubdivision();
 19565  0093  31AF  2777  3180   	fcall	i1_getModulationSubdivision
 19566  0096  0870               	movf	?i1_getModulationSubdivision,w
 19567  0097  0020               	movlb	0	; select bank0
 19568  0098  00BA               	movwf	??_isr
 19569  0099  083A               	movf	??_isr,w
 19570  009A  00FD               	movwf	isr@subDiv
 19571                           
 19572                           ;interrupts.c: 77: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 19573  009B  0023               	movlb	3	; select bank3
 19574  009C  0838               	movf	_tmpModDelay^(0+384),w
 19575  009D  0020               	movlb	0	; select bank0
 19576  009E  00BA               	movwf	??_isr
 19577  009F  0023               	movlb	3	; select bank3
 19578  00A0  0839               	movf	(_tmpModDelay+1)^(0+384),w
 19579  00A1  0020               	movlb	0	; select bank0
 19580  00A2  00BB               	movwf	??_isr+1
 19581  00A3  3000               	movlw	0
 19582  00A4  1BBB               	btfsc	??_isr+1,7
 19583  00A5  30FF               	movlw	255
 19584  00A6  00BC               	movwf	??_isr+2
 19585  00A7  00BD               	movwf	??_isr+3
 19586  00A8  0023               	movlb	3	; select bank3
 19587  00A9  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19588  00AA  3A80               	xorlw	128
 19589  00AB  0020               	movlb	0	; select bank0
 19590  00AC  00BE               	movwf	??_isr+4
 19591  00AD  083D               	movf	??_isr+3,w
 19592  00AE  3A80               	xorlw	128
 19593  00AF  023E               	subwf	??_isr+4,w
 19594  00B0  0023               	movlb	3	; select bank3
 19595  00B1  1D03               	skipz
 19596  00B2  28C3               	goto	u674_23
 19597  00B3  0020               	movlb	0	; select bank0
 19598  00B4  083C               	movf	??_isr+2,w
 19599  00B5  0023               	movlb	3	; select bank3
 19600  00B6  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19601  00B7  1D03               	skipz
 19602  00B8  28C3               	goto	u674_23
 19603  00B9  0020               	movlb	0	; select bank0
 19604  00BA  083B               	movf	??_isr+1,w
 19605  00BB  0023               	movlb	3	; select bank3
 19606  00BC  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19607  00BD  1D03               	skipz
 19608  00BE  28C3               	goto	u674_23
 19609  00BF  0020               	movlb	0	; select bank0
 19610  00C0  083A               	movf	??_isr,w
 19611  00C1  0023               	movlb	3	; select bank3
 19612  00C2  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19613  00C3                     u674_23:	
 19614  00C3  1C03               	skipc
 19615  00C4  28EF               	goto	i1l137
 19616  00C5  087D               	movf	isr@subDiv,w
 19617  00C6  0020               	movlb	0	; select bank0
 19618  00C7  00BA               	movwf	??_isr
 19619  00C8  01BB               	clrf	??_isr+1
 19620  00C9  0023               	movlb	3	; select bank3
 19621  00CA  0858               	movf	(_mod_counter+1)^(0+384),w
 19622  00CB  0020               	movlb	0	; select bank0
 19623  00CC  063B               	xorwf	??_isr+1,w
 19624  00CD  1D03               	skipz
 19625  00CE  28D3               	goto	u675_25
 19626  00CF  0023               	movlb	3	; select bank3
 19627  00D0  0857               	movf	_mod_counter^(0+384),w
 19628  00D1  0020               	movlb	0	; select bank0
 19629  00D2  063A               	xorwf	??_isr,w
 19630  00D3                     u675_25:	
 19631  00D3  1D03               	skipz
 19632  00D4  28EF               	goto	i1l137
 19633  00D5  0023               	movlb	3	; select bank3
 19634  00D6  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19635  00D7  0639               	xorwf	(_tmpModDelay+1)^(0+384),w
 19636  00D8  1D03               	skipz
 19637  00D9  28DC               	goto	u676_25
 19638  00DA  0859               	movf	_mod_delay_time^(0+384),w
 19639  00DB  0638               	xorwf	_tmpModDelay^(0+384),w
 19640  00DC                     u676_25:	
 19641  00DC  1D03               	skipz
 19642  00DD  28EF               	goto	i1l137
 19643                           
 19644                           ;interrupts.c: 78: tmpModDelay = (delay_time - sub_timer);
 19645  00DE  0020               	movlb	0	; select bank0
 19646  00DF  0940               	comf	_sub_timer,w	;volatile
 19647  00E0  00BA               	movwf	??_isr
 19648  00E1  0941               	comf	_sub_timer+1,w	;volatile
 19649  00E2  00BB               	movwf	??_isr+1
 19650  00E3  0ABA               	incf	??_isr,f
 19651  00E4  1903               	skipnz
 19652  00E5  0ABB               	incf	??_isr+1,f
 19653  00E6  0852               	movf	_delay_time,w	;volatile
 19654  00E7  073A               	addwf	??_isr,w
 19655  00E8  0023               	movlb	3	; select bank3
 19656  00E9  00B8               	movwf	_tmpModDelay^(0+384)
 19657  00EA  0020               	movlb	0	; select bank0
 19658  00EB  0853               	movf	_delay_time+1,w	;volatile
 19659  00EC  3D3B               	addwfc	??_isr+1,w
 19660  00ED  0023               	movlb	3	; select bank3
 19661  00EE  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19662  00EF                     i1l137:	
 19663                           
 19664                           ;interrupts.c: 79: }
 19665                           ;interrupts.c: 81: if (longBypass_start == 1) {
 19666  00EF  0022               	movlb	2	; select bank2
 19667  00F0  036A               	decf	_longBypass_start^(0+256),w
 19668  00F1  1D03               	btfss	3,2
 19669  00F2  290A               	goto	i1l6900
 19670                           
 19671                           ;interrupts.c: 82: longBypass_timer++;
 19672  00F3  3001               	movlw	1
 19673  00F4  0023               	movlb	3	; select bank3
 19674  00F5  07B2               	addwf	_longBypass_timer^(0+384),f	;volatile
 19675  00F6  3000               	movlw	0
 19676  00F7  3DB3               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19677                           
 19678                           ;interrupts.c: 83: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19679  00F8  0833               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19680  00F9  0020               	movlb	0	; select bank0
 19681  00FA  0259               	subwf	_long_press_limit+1,w
 19682  00FB  1D03               	skipz
 19683  00FC  2901               	goto	u678_25
 19684  00FD  0023               	movlb	3	; select bank3
 19685  00FE  0832               	movf	_longBypass_timer^(0+384),w	;volatile
 19686  00FF  0020               	movlb	0	; select bank0
 19687  0100  0258               	subwf	_long_press_limit,w
 19688  0101                     u678_25:	
 19689  0101  1803               	skipnc
 19690  0102  290A               	goto	i1l6900
 19691  0103  0859               	movf	_long_press_limit+1,w
 19692  0104  0023               	movlb	3	; select bank3
 19693  0105  00B3               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19694  0106  0020               	movlb	0	; select bank0
 19695  0107  0858               	movf	_long_press_limit,w
 19696  0108  0023               	movlb	3	; select bank3
 19697  0109  00B2               	movwf	_longBypass_timer^(0+384)	;volatile
 19698  010A                     i1l6900:	
 19699                           
 19700                           ;interrupts.c: 84: }
 19701                           ;interrupts.c: 85: if (longTap_start == 1) {
 19702  010A  0022               	movlb	2	; select bank2
 19703  010B  036B               	decf	_longTap_start^(0+256),w
 19704  010C  1D03               	btfss	3,2
 19705  010D  2925               	goto	i1l6906
 19706                           
 19707                           ;interrupts.c: 86: longTap_timer++;
 19708  010E  3001               	movlw	1
 19709  010F  0023               	movlb	3	; select bank3
 19710  0110  07B4               	addwf	_longTap_timer^(0+384),f	;volatile
 19711  0111  3000               	movlw	0
 19712  0112  3DB5               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19713                           
 19714                           ;interrupts.c: 87: if (longTap_timer > long_press_limit) {
 19715  0113  0835               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19716  0114  0020               	movlb	0	; select bank0
 19717  0115  0259               	subwf	_long_press_limit+1,w
 19718  0116  1D03               	skipz
 19719  0117  291C               	goto	u680_25
 19720  0118  0023               	movlb	3	; select bank3
 19721  0119  0834               	movf	_longTap_timer^(0+384),w	;volatile
 19722  011A  0020               	movlb	0	; select bank0
 19723  011B  0258               	subwf	_long_press_limit,w
 19724  011C                     u680_25:	
 19725  011C  1803               	skipnc
 19726  011D  2925               	goto	i1l6906
 19727                           
 19728                           ;interrupts.c: 88: longTap_timer = long_press_limit;
 19729  011E  0859               	movf	_long_press_limit+1,w
 19730  011F  0023               	movlb	3	; select bank3
 19731  0120  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19732  0121  0020               	movlb	0	; select bank0
 19733  0122  0858               	movf	_long_press_limit,w
 19734  0123  0023               	movlb	3	; select bank3
 19735  0124  00B4               	movwf	_longTap_timer^(0+384)	;volatile
 19736  0125                     i1l6906:	
 19737                           
 19738                           ;interrupts.c: 89: }
 19739                           ;interrupts.c: 90: }
 19740                           ;interrupts.c: 92: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19741  0125  0020               	movlb	0	; select bank0
 19742  0126  085D               	movf	_longTap_state,w	;volatile
 19743  0127  1D03               	btfss	3,2
 19744  0128  2985               	goto	i1l6932
 19745  0129  084E               	movf	_doubleTap_state,w	;volatile
 19746  012A  1D03               	btfss	3,2
 19747  012B  2985               	goto	i1l6932
 19748  012C  0851               	movf	_presetSaveMode,w
 19749  012D  1D03               	btfss	3,2
 19750  012E  2985               	goto	i1l6932
 19751                           
 19752                           ;interrupts.c: 94: if (timer >= baseline_mod_time) {
 19753  012F  084B               	movf	_timer+3,w	;volatile
 19754  0130  3A80               	xorlw	128
 19755  0131  00BA               	movwf	??_isr
 19756  0132  0023               	movlb	3	; select bank3
 19757  0133  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
 19758  0134  3A80               	xorlw	128
 19759  0135  0020               	movlb	0	; select bank0
 19760  0136  023A               	subwf	??_isr,w
 19761  0137  1D03               	skipz
 19762  0138  2949               	goto	u684_23
 19763  0139  0023               	movlb	3	; select bank3
 19764  013A  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
 19765  013B  0020               	movlb	0	; select bank0
 19766  013C  024A               	subwf	_timer+2,w	;volatile
 19767  013D  1D03               	skipz
 19768  013E  2949               	goto	u684_23
 19769  013F  0023               	movlb	3	; select bank3
 19770  0140  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
 19771  0141  0020               	movlb	0	; select bank0
 19772  0142  0249               	subwf	_timer+1,w	;volatile
 19773  0143  1D03               	skipz
 19774  0144  2949               	goto	u684_23
 19775  0145  0023               	movlb	3	; select bank3
 19776  0146  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
 19777  0147  0020               	movlb	0	; select bank0
 19778  0148  0248               	subwf	_timer,w	;volatile
 19779  0149                     u684_23:	
 19780  0149  1C03               	skipc
 19781  014A  2973               	goto	i1l6928
 19782                           
 19783                           ;interrupts.c: 97: LATBbits.LATB4 = 1;
 19784  014B  0022               	movlb	2	; select bank2
 19785  014C  160D               	bsf	13,4	;volatile
 19786                           
 19787                           ;interrupts.c: 99: timer = 0;
 19788  014D  3000               	movlw	0
 19789  014E  0020               	movlb	0	; select bank0
 19790  014F  00CB               	movwf	_timer+3	;volatile
 19791  0150  3000               	movlw	0
 19792  0151  00CA               	movwf	_timer+2	;volatile
 19793  0152  3000               	movlw	0
 19794  0153  00C9               	movwf	_timer+1	;volatile
 19795  0154  3000               	movlw	0
 19796  0155  00C8               	movwf	_timer	;volatile
 19797                           
 19798                           ;interrupts.c: 101: if (modulation_changed == 1) {
 19799  0156  0023               	movlb	3	; select bank3
 19800  0157  0342               	decf	_modulation_changed^(0+384),w
 19801  0158  1D03               	btfss	3,2
 19802  0159  2973               	goto	i1l6928
 19803                           
 19804                           ;interrupts.c: 104: modulation_changed = 0;
 19805  015A  01C2               	clrf	_modulation_changed^(0+384)
 19806                           
 19807                           ;interrupts.c: 105: mod_time_changed = 0;
 19808  015B  01E4               	clrf	_mod_time_changed^(0+384)
 19809                           
 19810                           ;interrupts.c: 106: sub_timer = delay_time;
 19811  015C  0020               	movlb	0	; select bank0
 19812  015D  0855               	movf	_delay_time+3,w	;volatile
 19813  015E  00C3               	movwf	_sub_timer+3	;volatile
 19814  015F  0854               	movf	_delay_time+2,w	;volatile
 19815  0160  00C2               	movwf	_sub_timer+2	;volatile
 19816  0161  0853               	movf	_delay_time+1,w	;volatile
 19817  0162  00C1               	movwf	_sub_timer+1	;volatile
 19818  0163  0852               	movf	_delay_time,w	;volatile
 19819  0164  00C0               	movwf	_sub_timer	;volatile
 19820                           
 19821                           ;interrupts.c: 107: tmpModDelay = mod_delay_time;
 19822  0165  0023               	movlb	3	; select bank3
 19823  0166  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19824  0167  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19825  0168  0859               	movf	_mod_delay_time^(0+384),w
 19826  0169  00B8               	movwf	_tmpModDelay^(0+384)
 19827                           
 19828                           ;interrupts.c: 108: mod_timer = tmpModDelay;
 19829  016A  0838               	movf	_tmpModDelay^(0+384),w
 19830  016B  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19831  016C  0839               	movf	(_tmpModDelay+1)^(0+384),w
 19832  016D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19833  016E  0D89               	rlf	9,f
 19834  016F  3B89               	subwfb	9,f
 19835  0170  0989               	comf	9,f
 19836  0171  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19837  0172  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19838  0173                     i1l6928:	
 19839                           
 19840                           ;interrupts.c: 116: }
 19841                           ;interrupts.c: 117: }
 19842                           ;interrupts.c: 119: if (timer >= 30) {
 19843  0173  0020               	movlb	0	; select bank0
 19844  0174  1BCB               	btfsc	_timer+3,7	;volatile
 19845  0175  2985               	goto	i1l6932
 19846  0176  084B               	movf	_timer+3,w	;volatile
 19847  0177  1D03               	btfss	3,2
 19848  0178  2983               	goto	i1l6930
 19849  0179  084A               	movf	_timer+2,w	;volatile
 19850  017A  1D03               	btfss	3,2
 19851  017B  2983               	goto	i1l6930
 19852  017C  0849               	movf	_timer+1,w	;volatile
 19853  017D  1D03               	btfss	3,2
 19854  017E  2983               	goto	i1l6930
 19855  017F  301E               	movlw	30
 19856  0180  0248               	subwf	_timer,w	;volatile
 19857  0181  1C03               	btfss	3,0
 19858  0182  2985               	goto	i1l6932
 19859  0183                     i1l6930:	
 19860                           
 19861                           ;interrupts.c: 121: LATBbits.LATB4 = 0;
 19862  0183  0022               	movlb	2	; select bank2
 19863  0184  120D               	bcf	13,4	;volatile
 19864  0185                     i1l6932:	
 19865                           
 19866                           ;interrupts.c: 123: }
 19867                           ;interrupts.c: 124: }
 19868                           ;interrupts.c: 133: if (presetSaveMode < 1 && mode2_state == 0) {
 19869  0185  0020               	movlb	0	; select bank0
 19870  0186  0851               	movf	_presetSaveMode,w
 19871  0187  1D03               	btfss	3,2
 19872  0188  29D7               	goto	i1l6950
 19873  0189  0850               	movf	_mode2_state,w
 19874  018A  1D03               	btfss	3,2
 19875  018B  29D7               	goto	i1l6950
 19876                           
 19877                           ;interrupts.c: 134: if (sub_timer >= delay_time ) {
 19878  018C  0843               	movf	_sub_timer+3,w	;volatile
 19879  018D  3A80               	xorlw	128
 19880  018E  00BA               	movwf	??_isr
 19881  018F  0855               	movf	_delay_time+3,w	;volatile
 19882  0190  3A80               	xorlw	128
 19883  0191  023A               	subwf	??_isr,w
 19884  0192  1D03               	skipz
 19885  0193  299E               	goto	u689_23
 19886  0194  0854               	movf	_delay_time+2,w	;volatile
 19887  0195  0242               	subwf	_sub_timer+2,w	;volatile
 19888  0196  1D03               	skipz
 19889  0197  299E               	goto	u689_23
 19890  0198  0853               	movf	_delay_time+1,w	;volatile
 19891  0199  0241               	subwf	_sub_timer+1,w	;volatile
 19892  019A  1D03               	skipz
 19893  019B  299E               	goto	u689_23
 19894  019C  0852               	movf	_delay_time,w	;volatile
 19895  019D  0240               	subwf	_sub_timer,w	;volatile
 19896  019E                     u689_23:	
 19897  019E  1C03               	skipc
 19898  019F  29B9               	goto	i1l6944
 19899                           
 19900                           ;interrupts.c: 135: if (suspend_blink == 0) {
 19901  01A0  0022               	movlb	2	; select bank2
 19902  01A1  086D               	movf	_suspend_blink^(0+256),w	;volatile
 19903  01A2  1D03               	btfss	3,2
 19904  01A3  29B0               	goto	i1l6942
 19905                           
 19906                           ;interrupts.c: 136: set_leds_top(top_push_state, 1);
 19907  01A4  0020               	movlb	0	; select bank0
 19908  01A5  085B               	movf	_top_push_state+1,w
 19909  01A6  00F1               	movwf	i1set_leds_top@x+1
 19910  01A7  085A               	movf	_top_push_state,w
 19911  01A8  00F0               	movwf	i1set_leds_top@x
 19912  01A9  3001               	movlw	1
 19913  01AA  00F2               	movwf	i1set_leds_top@ledState
 19914  01AB  3000               	movlw	0
 19915  01AC  00F3               	movwf	i1set_leds_top@ledState+1
 19916  01AD  31A3  23BD  3180   	fcall	i1_set_leds_top
 19917  01B0                     i1l6942:	
 19918                           
 19919                           ;interrupts.c: 137: }
 19920                           ;interrupts.c: 139: sub_timer = 0;
 19921  01B0  3000               	movlw	0
 19922  01B1  0020               	movlb	0	; select bank0
 19923  01B2  00C3               	movwf	_sub_timer+3	;volatile
 19924  01B3  3000               	movlw	0
 19925  01B4  00C2               	movwf	_sub_timer+2	;volatile
 19926  01B5  3000               	movlw	0
 19927  01B6  00C1               	movwf	_sub_timer+1	;volatile
 19928  01B7  3000               	movlw	0
 19929  01B8  00C0               	movwf	_sub_timer	;volatile
 19930  01B9                     i1l6944:	
 19931                           
 19932                           ;interrupts.c: 140: }
 19933                           ;interrupts.c: 142: if (sub_timer >= 20) {
 19934  01B9  1BC3               	btfsc	_sub_timer+3,7	;volatile
 19935  01BA  29D7               	goto	i1l6950
 19936  01BB  0843               	movf	_sub_timer+3,w	;volatile
 19937  01BC  1D03               	btfss	3,2
 19938  01BD  29C8               	goto	i1l6946
 19939  01BE  0842               	movf	_sub_timer+2,w	;volatile
 19940  01BF  1D03               	btfss	3,2
 19941  01C0  29C8               	goto	i1l6946
 19942  01C1  0841               	movf	_sub_timer+1,w	;volatile
 19943  01C2  1D03               	btfss	3,2
 19944  01C3  29C8               	goto	i1l6946
 19945  01C4  3014               	movlw	20
 19946  01C5  0240               	subwf	_sub_timer,w	;volatile
 19947  01C6  1C03               	btfss	3,0
 19948  01C7  29D7               	goto	i1l6950
 19949  01C8                     i1l6946:	
 19950                           
 19951                           ;interrupts.c: 143: if (suspend_blink == 0) {
 19952  01C8  0022               	movlb	2	; select bank2
 19953  01C9  086D               	movf	_suspend_blink^(0+256),w	;volatile
 19954  01CA  1D03               	btfss	3,2
 19955  01CB  29D7               	goto	i1l6950
 19956                           
 19957                           ;interrupts.c: 144: set_leds_top(top_push_state, 0);
 19958  01CC  0020               	movlb	0	; select bank0
 19959  01CD  085B               	movf	_top_push_state+1,w
 19960  01CE  00F1               	movwf	i1set_leds_top@x+1
 19961  01CF  085A               	movf	_top_push_state,w
 19962  01D0  00F0               	movwf	i1set_leds_top@x
 19963  01D1  3000               	movlw	0
 19964  01D2  00F2               	movwf	i1set_leds_top@ledState
 19965  01D3  00F3               	movwf	i1set_leds_top@ledState+1
 19966  01D4  31A3  23BD  3180   	fcall	i1_set_leds_top
 19967  01D7                     i1l6950:	
 19968                           
 19969                           ;interrupts.c: 145: }
 19970                           ;interrupts.c: 146: }
 19971                           ;interrupts.c: 147: }
 19972                           ;interrupts.c: 152: if (presetSaveMode == 1) {
 19973  01D7  0020               	movlb	0	; select bank0
 19974  01D8  0351               	decf	_presetSaveMode,w
 19975  01D9  1D03               	btfss	3,2
 19976  01DA  2A07               	goto	i1l6962
 19977                           
 19978                           ;interrupts.c: 153: if (double_timer >= 250) {
 19979  01DB  0023               	movlb	3	; select bank3
 19980  01DC  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19981  01DD  29F6               	goto	i1l6958
 19982  01DE  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19983  01DF  1D03               	btfss	3,2
 19984  01E0  29EB               	goto	i1l6954
 19985  01E1  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19986  01E2  1D03               	btfss	3,2
 19987  01E3  29EB               	goto	i1l6954
 19988  01E4  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19989  01E5  1D03               	btfss	3,2
 19990  01E6  29EB               	goto	i1l6954
 19991  01E7  30FA               	movlw	250
 19992  01E8  0220               	subwf	_double_timer^(0+384),w	;volatile
 19993  01E9  1C03               	btfss	3,0
 19994  01EA  29F6               	goto	i1l6958
 19995  01EB                     i1l6954:	
 19996                           
 19997                           ;interrupts.c: 154: LATBbits.LATB0 = 1;
 19998  01EB  0022               	movlb	2	; select bank2
 19999  01EC  140D               	bsf	13,0	;volatile
 20000                           
 20001                           ;interrupts.c: 155: double_timer = 0;
 20002  01ED  3000               	movlw	0
 20003  01EE  0023               	movlb	3	; select bank3
 20004  01EF  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 20005  01F0  3000               	movlw	0
 20006  01F1  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 20007  01F2  3000               	movlw	0
 20008  01F3  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 20009  01F4  3000               	movlw	0
 20010  01F5  00A0               	movwf	_double_timer^(0+384)	;volatile
 20011  01F6                     i1l6958:	
 20012                           
 20013                           ;interrupts.c: 156: }
 20014                           ;interrupts.c: 157: if (double_timer >= 30) {
 20015  01F6  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20016  01F7  2A07               	goto	i1l6962
 20017  01F8  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20018  01F9  1D03               	btfss	3,2
 20019  01FA  2A05               	goto	i1l6960
 20020  01FB  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20021  01FC  1D03               	btfss	3,2
 20022  01FD  2A05               	goto	i1l6960
 20023  01FE  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20024  01FF  1D03               	btfss	3,2
 20025  0200  2A05               	goto	i1l6960
 20026  0201  301E               	movlw	30
 20027  0202  0220               	subwf	_double_timer^(0+384),w	;volatile
 20028  0203  1C03               	btfss	3,0
 20029  0204  2A07               	goto	i1l6962
 20030  0205                     i1l6960:	
 20031                           
 20032                           ;interrupts.c: 158: LATBbits.LATB0 = 0;
 20033  0205  0022               	movlb	2	; select bank2
 20034  0206  100D               	bcf	13,0	;volatile
 20035  0207                     i1l6962:	
 20036                           
 20037                           ;interrupts.c: 159: }
 20038                           ;interrupts.c: 160: }
 20039                           ;interrupts.c: 179: if (mod_timer >= tmpModDelay) {
 20040  0207  0023               	movlb	3	; select bank3
 20041  0208  0838               	movf	_tmpModDelay^(0+384),w
 20042  0209  0020               	movlb	0	; select bank0
 20043  020A  00BA               	movwf	??_isr
 20044  020B  0023               	movlb	3	; select bank3
 20045  020C  0839               	movf	(_tmpModDelay+1)^(0+384),w
 20046  020D  0020               	movlb	0	; select bank0
 20047  020E  00BB               	movwf	??_isr+1
 20048  020F  3000               	movlw	0
 20049  0210  1BBB               	btfsc	??_isr+1,7
 20050  0211  30FF               	movlw	255
 20051  0212  00BC               	movwf	??_isr+2
 20052  0213  00BD               	movwf	??_isr+3
 20053  0214  0023               	movlb	3	; select bank3
 20054  0215  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20055  0216  3A80               	xorlw	128
 20056  0217  0020               	movlb	0	; select bank0
 20057  0218  00BE               	movwf	??_isr+4
 20058  0219  083D               	movf	??_isr+3,w
 20059  021A  3A80               	xorlw	128
 20060  021B  023E               	subwf	??_isr+4,w
 20061  021C  0023               	movlb	3	; select bank3
 20062  021D  1D03               	skipz
 20063  021E  2A2F               	goto	u696_23
 20064  021F  0020               	movlb	0	; select bank0
 20065  0220  083C               	movf	??_isr+2,w
 20066  0221  0023               	movlb	3	; select bank3
 20067  0222  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20068  0223  1D03               	skipz
 20069  0224  2A2F               	goto	u696_23
 20070  0225  0020               	movlb	0	; select bank0
 20071  0226  083B               	movf	??_isr+1,w
 20072  0227  0023               	movlb	3	; select bank3
 20073  0228  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20074  0229  1D03               	skipz
 20075  022A  2A2F               	goto	u696_23
 20076  022B  0020               	movlb	0	; select bank0
 20077  022C  083A               	movf	??_isr,w
 20078  022D  0023               	movlb	3	; select bank3
 20079  022E  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20080  022F                     u696_23:	
 20081  022F  1C03               	skipc
 20082  0230  2A9F               	goto	i1l6978
 20083                           
 20084                           ;interrupts.c: 180: mod_timer = 0;
 20085  0231  3000               	movlw	0
 20086  0232  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20087  0233  3000               	movlw	0
 20088  0234  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20089  0235  3000               	movlw	0
 20090  0236  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20091  0237  3000               	movlw	0
 20092  0238  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20093                           
 20094                           ;interrupts.c: 182: if (mod_counter >= subDiv) {
 20095  0239  0858               	movf	(_mod_counter+1)^(0+384),w
 20096  023A  3A80               	xorlw	128
 20097  023B  0020               	movlb	0	; select bank0
 20098  023C  00BA               	movwf	??_isr
 20099  023D  3080               	movlw	128
 20100  023E  023A               	subwf	??_isr,w
 20101  023F  1D03               	skipz
 20102  0240  2A44               	goto	u697_25
 20103  0241  087D               	movf	isr@subDiv,w
 20104  0242  0023               	movlb	3	; select bank3
 20105  0243  0257               	subwf	_mod_counter^(0+384),w
 20106  0244                     u697_25:	
 20107  0244  1C03               	skipc
 20108  0245  2A4D               	goto	i1l6970
 20109                           
 20110                           ;interrupts.c: 183: mod_counter = 0;
 20111  0246  0023               	movlb	3	; select bank3
 20112  0247  01D7               	clrf	_mod_counter^(0+384)
 20113  0248  01D8               	clrf	(_mod_counter+1)^(0+384)
 20114                           
 20115                           ;interrupts.c: 184: tmpModDelay = mod_delay_time;
 20116  0249  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20117  024A  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 20118  024B  0859               	movf	_mod_delay_time^(0+384),w
 20119  024C  00B8               	movwf	_tmpModDelay^(0+384)
 20120  024D                     i1l6970:	
 20121                           
 20122                           ;interrupts.c: 188: }
 20123                           ;interrupts.c: 192: mod_value = modArray[mod_counter];
 20124  024D  0023               	movlb	3	; select bank3
 20125  024E  0858               	movf	(_mod_counter+1)^(0+384),w
 20126  024F  0020               	movlb	0	; select bank0
 20127  0250  00BB               	movwf	??_isr+1
 20128  0251  0023               	movlb	3	; select bank3
 20129  0252  0857               	movf	_mod_counter^(0+384),w
 20130  0253  0020               	movlb	0	; select bank0
 20131  0254  00BA               	movwf	??_isr
 20132  0255  35BA               	lslf	??_isr,f
 20133  0256  0DBB               	rlf	??_isr+1,f
 20134  0257  308A               	movlw	138
 20135  0258  00BC               	movwf	??_isr+2
 20136  0259  3023               	movlw	35
 20137  025A  00BD               	movwf	??_isr+3
 20138  025B  083A               	movf	??_isr,w
 20139  025C  073C               	addwf	??_isr+2,w
 20140  025D  0086               	movwf	6
 20141  025E  083B               	movf	??_isr+1,w
 20142  025F  3D3D               	addwfc	??_isr+3,w
 20143  0260  0087               	movwf	7
 20144  0261  3F40               	moviw [0]fsr1
 20145  0262  0024               	movlb	4	; select bank4
 20146  0263  00CF               	movwf	_mod_value^(0+512)
 20147  0264  3F41               	moviw [1]fsr1
 20148  0265  00D0               	movwf	(_mod_value+1)^(0+512)
 20149                           
 20150                           ;interrupts.c: 199: mod_value = modulation(mod_value, adjusted_pot_value);
 20151  0266  084F               	movf	_mod_value^(0+512),w
 20152  0267  0020               	movlb	0	; select bank0
 20153  0268  00AE               	movwf	modulation@x
 20154  0269  0024               	movlb	4	; select bank4
 20155  026A  0850               	movf	(_mod_value+1)^(0+512),w
 20156  026B  0020               	movlb	0	; select bank0
 20157  026C  00AF               	movwf	modulation@x+1
 20158  026D  0D89               	rlf	9,f
 20159  026E  3B89               	subwfb	9,f
 20160  026F  0989               	comf	9,f
 20161  0270  00B0               	movwf	modulation@x+2
 20162  0271  00B1               	movwf	modulation@x+3
 20163  0272  0024               	movlb	4	; select bank4
 20164  0273  0841               	movf	_adjusted_pot_value^(0+512),w
 20165  0274  0020               	movlb	0	; select bank0
 20166  0275  00B2               	movwf	modulation@y
 20167  0276  0024               	movlb	4	; select bank4
 20168  0277  0842               	movf	(_adjusted_pot_value+1)^(0+512),w
 20169  0278  0020               	movlb	0	; select bank0
 20170  0279  00B3               	movwf	modulation@y+1
 20171  027A  0D89               	rlf	9,f
 20172  027B  3B89               	subwfb	9,f
 20173  027C  0989               	comf	9,f
 20174  027D  00B4               	movwf	modulation@y+2
 20175  027E  00B5               	movwf	modulation@y+3
 20176  027F  31A2  22F7  3180   	fcall	_modulation
 20177  0282  0020               	movlb	0	; select bank0
 20178  0283  082F               	movf	?_modulation+1,w
 20179  0284  0024               	movlb	4	; select bank4
 20180  0285  00D0               	movwf	(_mod_value+1)^(0+512)
 20181  0286  0020               	movlb	0	; select bank0
 20182  0287  082E               	movf	?_modulation,w
 20183  0288  0024               	movlb	4	; select bank4
 20184  0289  00CF               	movwf	_mod_value^(0+512)
 20185                           
 20186                           ;interrupts.c: 200: CCPR3 = mod_value / 2;
 20187  028A  3002               	movlw	2
 20188  028B  00F0               	movwf	i1___awdiv@divisor
 20189  028C  3000               	movlw	0
 20190  028D  00F1               	movwf	i1___awdiv@divisor+1
 20191  028E  0850               	movf	(_mod_value+1)^(0+512),w
 20192  028F  00F3               	movwf	i1___awdiv@dividend+1
 20193  0290  084F               	movf	_mod_value^(0+512),w
 20194  0291  00F2               	movwf	i1___awdiv@dividend
 20195  0292  31A4  24ED  3180   	fcall	i1___awdiv
 20196  0295  0871               	movf	?i1___awdiv+1,w
 20197  0296  0026               	movlb	6	; select bank6
 20198  0297  0092               	movwf	18	;volatile
 20199  0298  0870               	movf	?i1___awdiv,w
 20200  0299  0091               	movwf	17	;volatile
 20201                           
 20202                           ;interrupts.c: 201: mod_counter++;
 20203  029A  3001               	movlw	1
 20204  029B  0023               	movlb	3	; select bank3
 20205  029C  07D7               	addwf	_mod_counter^(0+384),f
 20206  029D  3000               	movlw	0
 20207  029E  3DD8               	addwfc	(_mod_counter+1)^(0+384),f
 20208  029F                     i1l6978:	
 20209                           
 20210                           ;interrupts.c: 203: }
 20211                           ;interrupts.c: 205: if (preset_programmning_on == 1) {
 20212  029F  0343               	decf	_preset_programmning_on^(0+384),w
 20213  02A0  1D03               	btfss	3,2
 20214  02A1  2AD1               	goto	i1l6990
 20215                           
 20216                           ;interrupts.c: 206: preset_blink++;
 20217  02A2  3001               	movlw	1
 20218  02A3  0020               	movlb	0	; select bank0
 20219  02A4  00BA               	movwf	??_isr
 20220  02A5  083A               	movf	??_isr,w
 20221  02A6  0022               	movlb	2	; select bank2
 20222  02A7  07EC               	addwf	_preset_blink^(0+256),f
 20223                           
 20224                           ;interrupts.c: 208: if (preset_blink >= blink_delay) {
 20225  02A8  0023               	movlb	3	; select bank3
 20226  02A9  084C               	movf	(_blink_delay+1)^(0+384),w
 20227  02AA  3A80               	xorlw	128
 20228  02AB  3C80               	sublw	128
 20229  02AC  1D03               	skipz
 20230  02AD  2AB1               	goto	u699_25
 20231  02AE  084B               	movf	_blink_delay^(0+384),w
 20232  02AF  0022               	movlb	2	; select bank2
 20233  02B0  026C               	subwf	_preset_blink^(0+256),w
 20234  02B1                     u699_25:	
 20235  02B1  1C03               	skipc
 20236  02B2  2ACF               	goto	i1l157
 20237                           
 20238                           ;interrupts.c: 209: LATBbits.LATB1 = 1;
 20239  02B3  0022               	movlb	2	; select bank2
 20240  02B4  148D               	bsf	13,1	;volatile
 20241                           
 20242                           ;interrupts.c: 210: if (preset_blink > blink_delay*2) {
 20243  02B5  0023               	movlb	3	; select bank3
 20244  02B6  084C               	movf	(_blink_delay+1)^(0+384),w
 20245  02B7  0020               	movlb	0	; select bank0
 20246  02B8  00BB               	movwf	??_isr+1
 20247  02B9  0023               	movlb	3	; select bank3
 20248  02BA  084B               	movf	_blink_delay^(0+384),w
 20249  02BB  0020               	movlb	0	; select bank0
 20250  02BC  00BA               	movwf	??_isr
 20251  02BD  35BA               	lslf	??_isr,f
 20252  02BE  0DBB               	rlf	??_isr+1,f
 20253  02BF  083B               	movf	??_isr+1,w
 20254  02C0  3A80               	xorlw	128
 20255  02C1  00BC               	movwf	??_isr+2
 20256  02C2  3080               	movlw	128
 20257  02C3  023C               	subwf	??_isr+2,w
 20258  02C4  1D03               	skipz
 20259  02C5  2ACA               	goto	u700_25
 20260  02C6  0022               	movlb	2	; select bank2
 20261  02C7  086C               	movf	_preset_blink^(0+256),w
 20262  02C8  0020               	movlb	0	; select bank0
 20263  02C9  023A               	subwf	??_isr,w
 20264  02CA                     u700_25:	
 20265  02CA  1803               	skipnc
 20266  02CB  2AD7               	goto	i1l6996
 20267                           
 20268                           ;interrupts.c: 211: preset_blink = 0;
 20269  02CC  0022               	movlb	2	; select bank2
 20270  02CD  01EC               	clrf	_preset_blink^(0+256)
 20271                           
 20272                           ;interrupts.c: 212: }
 20273                           ;interrupts.c: 214: } else {
 20274  02CE  2AD7               	goto	i1l6996
 20275  02CF                     i1l157:	
 20276                           
 20277                           ;interrupts.c: 215: LATBbits.LATB1 = 0;
 20278  02CF  0022               	movlb	2	; select bank2
 20279  02D0  2AD6               	goto	i1l6994
 20280  02D1                     i1l6990:	
 20281                           ;interrupts.c: 216: }
 20282                           ;interrupts.c: 218: } else {
 20283                           
 20284                           
 20285                           ;interrupts.c: 219: if (preset_blink > 0) {
 20286  02D1  0022               	movlb	2	; select bank2
 20287  02D2  086C               	movf	_preset_blink^(0+256),w
 20288  02D3  1903               	btfsc	3,2
 20289  02D4  2AD7               	goto	i1l6996
 20290                           
 20291                           ;interrupts.c: 220: preset_blink = 0;
 20292  02D5  01EC               	clrf	_preset_blink^(0+256)
 20293  02D6                     i1l6994:	
 20294                           
 20295                           ;interrupts.c: 221: LATBbits.LATB1 = 0;
 20296  02D6  108D               	bcf	13,1	;volatile
 20297  02D7                     i1l6996:	
 20298                           
 20299                           ;interrupts.c: 222: }
 20300                           ;interrupts.c: 223: }
 20301                           ;interrupts.c: 227: INTCONbits.TMR0IF = 0;
 20302  02D7  110B               	bcf	11,2	;volatile
 20303  02D8                     i1l135:	
 20304  02D8  0020               	movlb	0	; select bank0
 20305  02D9  083F               	movf	??_isr+5,w
 20306  02DA  00FF               	movwf	127
 20307  02DB  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20308  02DC  0009               	retfie
 20309  02DD                     __end_of_isr:	
 20310                           
 20311                           	psect	text75
 20312  23BD                     __ptext75:	
 20313 ;; *************** function i1_set_leds_top *****************
 20314 ;; Defined at:
 20315 ;;		line 16 in file "LEDs.c"
 20316 ;; Parameters:    Size  Location     Type
 20317 ;;  x               2    0[COMMON] int 
 20318 ;;  ledState        2    2[COMMON] int 
 20319 ;; Auto vars:     Size  Location     Type
 20320 ;;		None
 20321 ;; Return value:  Size  Location     Type
 20322 ;;                  1    wreg      void 
 20323 ;; Registers used:
 20324 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20325 ;; Tracked objects:
 20326 ;;		On entry : 0/0
 20327 ;;		On exit  : 0/0
 20328 ;;		Unchanged: 0/0
 20329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20330 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20333 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20334 ;;Total ram usage:        4 bytes
 20335 ;; Hardware stack levels used:    1
 20336 ;; This function calls:
 20337 ;;		Nothing
 20338 ;; This function is called by:
 20339 ;;		_isr
 20340 ;; This function uses a non-reentrant model
 20341 ;;
 20342                           
 20343                           
 20344                           ;psect for function i1_set_leds_top
 20345  23BD                     i1_set_leds_top:	
 20346                           
 20347                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20348                           
 20349                           ;incstack = 0
 20350                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20351  23BD  0027               	movlb	7	; select bank7
 20352  23BE  100C               	bcf	12,0	;volatile
 20353                           
 20354                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20355  23BF  108C               	bcf	12,1	;volatile
 20356                           
 20357                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20358  23C0  110C               	bcf	12,2	;volatile
 20359                           
 20360                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20361  23C1  118C               	bcf	12,3	;volatile
 20362                           
 20363                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20364  23C2  120C               	bcf	12,4	;volatile
 20365                           
 20366                           ;LEDs.c: 22: switch (x) {
 20367  23C3  2BE8               	goto	i1l6806
 20368  23C4                     i1l6794:	
 20369                           ;LEDs.c: 23: case 1:
 20370                           
 20371                           
 20372                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20373  23C4  0C72               	rrf	i1set_leds_top@ledState,w
 20374  23C5  1C03               	skipc
 20375  23C6  100C               	bcf	12,0	;volatile
 20376  23C7  1803               	skipnc
 20377  23C8  140C               	bsf	12,0	;volatile
 20378                           
 20379                           ;LEDs.c: 25: break;
 20380  23C9  0008               	return
 20381  23CA                     i1l6796:	
 20382                           ;LEDs.c: 26: case 2:
 20383                           
 20384                           
 20385                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20386  23CA  0C72               	rrf	i1set_leds_top@ledState,w
 20387  23CB  1C03               	skipc
 20388  23CC  108C               	bcf	12,1	;volatile
 20389  23CD  1803               	skipnc
 20390  23CE  148C               	bsf	12,1	;volatile
 20391                           
 20392                           ;LEDs.c: 28: break;
 20393  23CF  0008               	return
 20394  23D0                     i1l6798:	
 20395                           ;LEDs.c: 29: case 3:
 20396                           
 20397                           
 20398                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20399  23D0  0C72               	rrf	i1set_leds_top@ledState,w
 20400  23D1  1C03               	skipc
 20401  23D2  110C               	bcf	12,2	;volatile
 20402  23D3  1803               	skipnc
 20403  23D4  150C               	bsf	12,2	;volatile
 20404                           
 20405                           ;LEDs.c: 31: break;
 20406  23D5  0008               	return
 20407  23D6                     i1l6800:	
 20408                           ;LEDs.c: 32: case 4:
 20409                           
 20410                           
 20411                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20412  23D6  0C72               	rrf	i1set_leds_top@ledState,w
 20413  23D7  1C03               	skipc
 20414  23D8  118C               	bcf	12,3	;volatile
 20415  23D9  1803               	skipnc
 20416  23DA  158C               	bsf	12,3	;volatile
 20417                           
 20418                           ;LEDs.c: 34: break;
 20419  23DB  0008               	return
 20420  23DC                     i1l6802:	
 20421                           ;LEDs.c: 35: case 5:
 20422                           
 20423                           
 20424                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20425  23DC  0C72               	rrf	i1set_leds_top@ledState,w
 20426  23DD  1C03               	skipc
 20427  23DE  120C               	bcf	12,4	;volatile
 20428  23DF  1803               	skipnc
 20429  23E0  160C               	bsf	12,4	;volatile
 20430                           
 20431                           ;LEDs.c: 39: break;
 20432                           
 20433                           ;LEDs.c: 38: case 6:
 20434                           
 20435                           ;LEDs.c: 37: break;
 20436  23E1  0008               	return
 20437  23E2                     i1l792:	
 20438                           ;LEDs.c: 40: case 100:
 20439                           
 20440                           
 20441                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20442  23E2  140C               	bsf	12,0	;volatile
 20443                           
 20444                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20445  23E3  148C               	bsf	12,1	;volatile
 20446                           
 20447                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20448  23E4  150C               	bsf	12,2	;volatile
 20449                           
 20450                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20451  23E5  158C               	bsf	12,3	;volatile
 20452                           
 20453                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20454  23E6  160C               	bsf	12,4	;volatile
 20455                           
 20456                           ;LEDs.c: 47: }
 20457                           
 20458                           ;LEDs.c: 46: break;
 20459  23E7  0008               	return
 20460  23E8                     i1l6806:	
 20461                           
 20462                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20463                           ; Switch size 1, requested type "space"
 20464                           ; Number of cases is 1, Range of values is 0 to 0
 20465                           ; switch strategies available:
 20466                           ; Name         Instructions Cycles
 20467                           ; simple_byte            4     3 (average)
 20468                           ; direct_byte            8     6 (fixed)
 20469                           ; jumptable            260     6 (fixed)
 20470                           ;	Chosen strategy is simple_byte
 20471  23E8  0871               	movf	i1set_leds_top@x+1,w
 20472  23E9  3A00               	xorlw	0	; case 0
 20473  23EA  1903               	skipnz
 20474  23EB  2BED               	goto	i1l9820
 20475  23EC  2C04               	goto	i1l793
 20476  23ED                     i1l9820:	
 20477                           
 20478                           ; Switch size 1, requested type "space"
 20479                           ; Number of cases is 7, Range of values is 1 to 100
 20480                           ; switch strategies available:
 20481                           ; Name         Instructions Cycles
 20482                           ; simple_byte           22    12 (average)
 20483                           ; direct_byte          209     9 (fixed)
 20484                           ; jumptable            263     9 (fixed)
 20485                           ;	Chosen strategy is simple_byte
 20486  23ED  0870               	movf	i1set_leds_top@x,w
 20487  23EE  3A01               	xorlw	1	; case 1
 20488  23EF  1903               	skipnz
 20489  23F0  2BC4               	goto	i1l6794
 20490  23F1  3A03               	xorlw	3	; case 2
 20491  23F2  1903               	skipnz
 20492  23F3  2BCA               	goto	i1l6796
 20493  23F4  3A01               	xorlw	1	; case 3
 20494  23F5  1903               	skipnz
 20495  23F6  2BD0               	goto	i1l6798
 20496  23F7  3A07               	xorlw	7	; case 4
 20497  23F8  1903               	skipnz
 20498  23F9  2BD6               	goto	i1l6800
 20499  23FA  3A01               	xorlw	1	; case 5
 20500  23FB  1903               	skipnz
 20501  23FC  2BDC               	goto	i1l6802
 20502  23FD  3A03               	xorlw	3	; case 6
 20503  23FE  1903               	skipnz
 20504  23FF  2C04               	goto	i1l793
 20505  2400  3A62               	xorlw	98	; case 100
 20506  2401  1903               	skipnz
 20507  2402  2BE2               	goto	i1l792
 20508  2403  2C04               	goto	i1l793
 20509  2404                     i1l793:	
 20510  2404  0008               	return
 20511  2405                     __end_ofi1_set_leds_top:	
 20512                           
 20513                           	psect	text76
 20514  2F77                     __ptext76:	
 20515 ;; *************** function i1_getModulationSubdivision *****************
 20516 ;; Defined at:
 20517 ;;		line 26 in file "modulation.c"
 20518 ;; Parameters:    Size  Location     Type
 20519 ;;		None
 20520 ;; Auto vars:     Size  Location     Type
 20521 ;;		None
 20522 ;; Return value:  Size  Location     Type
 20523 ;;                  2    0[COMMON] int 
 20524 ;; Registers used:
 20525 ;;		wreg, status,2, status,0
 20526 ;; Tracked objects:
 20527 ;;		On entry : 0/0
 20528 ;;		On exit  : 0/0
 20529 ;;		Unchanged: 0/0
 20530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20531 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20535 ;;Total ram usage:        2 bytes
 20536 ;; Hardware stack levels used:    1
 20537 ;; This function calls:
 20538 ;;		Nothing
 20539 ;; This function is called by:
 20540 ;;		_isr
 20541 ;; This function uses a non-reentrant model
 20542 ;;
 20543                           
 20544                           
 20545                           ;psect for function i1_getModulationSubdivision
 20546  2F77                     i1_getModulationSubdivision:	
 20547                           
 20548                           ;modulation.c: 27: if (delay_time >= 2400) {
 20549                           
 20550                           ;incstack = 0
 20551                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20552  2F77  0020               	movlb	0	; select bank0
 20553  2F78  1BD5               	btfsc	_delay_time+3,7	;volatile
 20554  2F79  2F8B               	goto	i1l6820
 20555  2F7A  0855               	movf	_delay_time+3,w	;volatile
 20556  2F7B  1D03               	btfss	3,2
 20557  2F7C  2F86               	goto	i1l6814
 20558  2F7D  0854               	movf	_delay_time+2,w	;volatile
 20559  2F7E  1D03               	btfss	3,2
 20560  2F7F  2F86               	goto	i1l6814
 20561  2F80  3060               	movlw	96
 20562  2F81  0252               	subwf	_delay_time,w	;volatile
 20563  2F82  3009               	movlw	9
 20564  2F83  3B53               	subwfb	_delay_time+1,w	;volatile
 20565  2F84  1C03               	btfss	3,0
 20566  2F85  2F8B               	goto	i1l6820
 20567  2F86                     i1l6814:	
 20568                           
 20569                           ;modulation.c: 28: return 120;
 20570  2F86  3078               	movlw	120
 20571  2F87  00F0               	movwf	?i1_getModulationSubdivision
 20572  2F88  3000               	movlw	0
 20573  2F89  00F1               	movwf	?i1_getModulationSubdivision+1
 20574                           
 20575                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20576  2F8A  0008               	return
 20577  2F8B                     i1l6820:	
 20578  2F8B  1BD5               	btfsc	_delay_time+3,7	;volatile
 20579  2F8C  2F9E               	goto	i1l6828
 20580  2F8D  0855               	movf	_delay_time+3,w	;volatile
 20581  2F8E  1D03               	btfss	3,2
 20582  2F8F  2F99               	goto	i1l6822
 20583  2F90  0854               	movf	_delay_time+2,w	;volatile
 20584  2F91  1D03               	btfss	3,2
 20585  2F92  2F99               	goto	i1l6822
 20586  2F93  3058               	movlw	88
 20587  2F94  0252               	subwf	_delay_time,w	;volatile
 20588  2F95  3002               	movlw	2
 20589  2F96  3B53               	subwfb	_delay_time+1,w	;volatile
 20590  2F97  1C03               	btfss	3,0
 20591  2F98  2F9E               	goto	i1l6828
 20592  2F99                     i1l6822:	
 20593                           
 20594                           ;modulation.c: 30: return 60;
 20595  2F99  303C               	movlw	60
 20596  2F9A  00F0               	movwf	?i1_getModulationSubdivision
 20597  2F9B  3000               	movlw	0
 20598  2F9C  00F1               	movwf	?i1_getModulationSubdivision+1
 20599                           
 20600                           ;modulation.c: 31: } else {
 20601  2F9D  0008               	return
 20602  2F9E                     i1l6828:	
 20603                           
 20604                           ;modulation.c: 32: return 30;
 20605  2F9E  301E               	movlw	30
 20606  2F9F  00F0               	movwf	?i1_getModulationSubdivision
 20607  2FA0  3000               	movlw	0
 20608  2FA1  00F1               	movwf	?i1_getModulationSubdivision+1
 20609  2FA2  0008               	return
 20610  2FA3                     __end_ofi1_getModulationSubdivision:	
 20611                           
 20612                           	psect	text77
 20613  24ED                     __ptext77:	
 20614 ;; *************** function i1___awdiv *****************
 20615 ;; Defined at:
 20616 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20617 ;; Parameters:    Size  Location     Type
 20618 ;;  divisor         2    0[COMMON] int 
 20619 ;;  dividend        2    2[COMMON] int 
 20620 ;; Auto vars:     Size  Location     Type
 20621 ;;  __awdiv         2    7[COMMON] int 
 20622 ;;  __awdiv         1    6[COMMON] unsigned char 
 20623 ;;  __awdiv         1    5[COMMON] unsigned char 
 20624 ;; Return value:  Size  Location     Type
 20625 ;;                  2    0[COMMON] int 
 20626 ;; Registers used:
 20627 ;;		wreg, status,2, status,0
 20628 ;; Tracked objects:
 20629 ;;		On entry : 0/0
 20630 ;;		On exit  : 0/0
 20631 ;;		Unchanged: 0/0
 20632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20634 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20635 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20636 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20637 ;;Total ram usage:        9 bytes
 20638 ;; Hardware stack levels used:    1
 20639 ;; This function calls:
 20640 ;;		Nothing
 20641 ;; This function is called by:
 20642 ;;		_isr
 20643 ;; This function uses a non-reentrant model
 20644 ;;
 20645                           
 20646                           
 20647                           ;psect for function i1___awdiv
 20648  24ED                     i1___awdiv:	
 20649                           
 20650                           ;incstack = 0
 20651                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20652  24ED  01F6               	clrf	i1___awdiv@sign
 20653  24EE  1FF1               	btfss	i1___awdiv@divisor+1,7
 20654  24EF  2CF7               	goto	i1l6840
 20655  24F0  09F0               	comf	i1___awdiv@divisor,f
 20656  24F1  09F1               	comf	i1___awdiv@divisor+1,f
 20657  24F2  0AF0               	incf	i1___awdiv@divisor,f
 20658  24F3  1903               	skipnz
 20659  24F4  0AF1               	incf	i1___awdiv@divisor+1,f
 20660  24F5  01F6               	clrf	i1___awdiv@sign
 20661  24F6  0AF6               	incf	i1___awdiv@sign,f
 20662  24F7                     i1l6840:	
 20663  24F7  1FF3               	btfss	i1___awdiv@dividend+1,7
 20664  24F8  2D02               	goto	i1l6846
 20665  24F9  09F2               	comf	i1___awdiv@dividend,f
 20666  24FA  09F3               	comf	i1___awdiv@dividend+1,f
 20667  24FB  0AF2               	incf	i1___awdiv@dividend,f
 20668  24FC  1903               	skipnz
 20669  24FD  0AF3               	incf	i1___awdiv@dividend+1,f
 20670  24FE  3001               	movlw	1
 20671  24FF  00F4               	movwf	??i1___awdiv
 20672  2500  0874               	movf	??i1___awdiv,w
 20673  2501  06F6               	xorwf	i1___awdiv@sign,f
 20674  2502                     i1l6846:	
 20675  2502  01F7               	clrf	i1___awdiv@quotient
 20676  2503  01F8               	clrf	i1___awdiv@quotient+1
 20677  2504  0870               	movf	i1___awdiv@divisor,w
 20678  2505  0471               	iorwf	i1___awdiv@divisor+1,w
 20679  2506  1903               	btfsc	3,2
 20680  2507  2D31               	goto	i1l6868
 20681  2508  01F5               	clrf	i1___awdiv@counter
 20682  2509  0AF5               	incf	i1___awdiv@counter,f
 20683  250A                     i1l6856:	
 20684  250A  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20685  250B  2D16               	goto	i1l6858
 20686  250C  3001               	movlw	1
 20687  250D                     u664_25:	
 20688  250D  35F0               	lslf	i1___awdiv@divisor,f
 20689  250E  0DF1               	rlf	i1___awdiv@divisor+1,f
 20690  250F  0B89               	decfsz	9,f
 20691  2510  2D0D               	goto	u664_25
 20692  2511  3001               	movlw	1
 20693  2512  00F4               	movwf	??i1___awdiv
 20694  2513  0874               	movf	??i1___awdiv,w
 20695  2514  07F5               	addwf	i1___awdiv@counter,f
 20696  2515  2D0A               	goto	i1l6856
 20697  2516                     i1l6858:	
 20698  2516  3001               	movlw	1
 20699  2517                     u666_25:	
 20700  2517  35F7               	lslf	i1___awdiv@quotient,f
 20701  2518  0DF8               	rlf	i1___awdiv@quotient+1,f
 20702  2519  0B89               	decfsz	9,f
 20703  251A  2D17               	goto	u666_25
 20704  251B  0871               	movf	i1___awdiv@divisor+1,w
 20705  251C  0273               	subwf	i1___awdiv@dividend+1,w
 20706  251D  1D03               	skipz
 20707  251E  2D21               	goto	u667_25
 20708  251F  0870               	movf	i1___awdiv@divisor,w
 20709  2520  0272               	subwf	i1___awdiv@dividend,w
 20710  2521                     u667_25:	
 20711  2521  1C03               	skipc
 20712  2522  2D28               	goto	i1l6864
 20713  2523  0870               	movf	i1___awdiv@divisor,w
 20714  2524  02F2               	subwf	i1___awdiv@dividend,f
 20715  2525  0871               	movf	i1___awdiv@divisor+1,w
 20716  2526  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20717  2527  1477               	bsf	i1___awdiv@quotient,0
 20718  2528                     i1l6864:	
 20719  2528  3001               	movlw	1
 20720  2529                     u668_25:	
 20721  2529  36F1               	lsrf	i1___awdiv@divisor+1,f
 20722  252A  0CF0               	rrf	i1___awdiv@divisor,f
 20723  252B  0B89               	decfsz	9,f
 20724  252C  2D29               	goto	u668_25
 20725  252D  3001               	movlw	1
 20726  252E  02F5               	subwf	i1___awdiv@counter,f
 20727  252F  1D03               	btfss	3,2
 20728  2530  2D16               	goto	i1l6858
 20729  2531                     i1l6868:	
 20730  2531  0876               	movf	i1___awdiv@sign,w
 20731  2532  1903               	btfsc	3,2
 20732  2533  2D39               	goto	i1l6872
 20733  2534  09F7               	comf	i1___awdiv@quotient,f
 20734  2535  09F8               	comf	i1___awdiv@quotient+1,f
 20735  2536  0AF7               	incf	i1___awdiv@quotient,f
 20736  2537  1903               	skipnz
 20737  2538  0AF8               	incf	i1___awdiv@quotient+1,f
 20738  2539                     i1l6872:	
 20739  2539  0878               	movf	i1___awdiv@quotient+1,w
 20740  253A  00F1               	movwf	?i1___awdiv+1
 20741  253B  0877               	movf	i1___awdiv@quotient,w
 20742  253C  00F0               	movwf	?i1___awdiv
 20743  253D  0008               	return
 20744  253E                     __end_ofi1___awdiv:	
 20745                           
 20746                           	psect	text78
 20747  22F7                     __ptext78:	
 20748 ;; *************** function _modulation *****************
 20749 ;; Defined at:
 20750 ;;		line 222 in file "user.c"
 20751 ;; Parameters:    Size  Location     Type
 20752 ;;  x               4   14[BANK0 ] long 
 20753 ;;  y               4   18[BANK0 ] long 
 20754 ;; Auto vars:     Size  Location     Type
 20755 ;;		None
 20756 ;; Return value:  Size  Location     Type
 20757 ;;                  4   14[BANK0 ] long 
 20758 ;; Registers used:
 20759 ;;		wreg, status,2, status,0, pclath, cstack
 20760 ;; Tracked objects:
 20761 ;;		On entry : 0/0
 20762 ;;		On exit  : 0/0
 20763 ;;		Unchanged: 0/0
 20764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20765 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20767 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20768 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20769 ;;Total ram usage:       12 bytes
 20770 ;; Hardware stack levels used:    1
 20771 ;; Hardware stack levels required when called:    1
 20772 ;; This function calls:
 20773 ;;		i1___aldiv
 20774 ;;		i1___lmul
 20775 ;; This function is called by:
 20776 ;;		_isr
 20777 ;; This function uses a non-reentrant model
 20778 ;;
 20779                           
 20780                           
 20781                           ;psect for function _modulation
 20782  22F7                     _modulation:	
 20783                           
 20784                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 20785                           
 20786                           ;incstack = 0
 20787                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 20788  22F7  3000               	movlw	0
 20789  22F8  0020               	movlb	0	; select bank0
 20790  22F9  00A3               	movwf	i1___aldiv@divisor+3
 20791  22FA  3000               	movlw	0
 20792  22FB  00A2               	movwf	i1___aldiv@divisor+2
 20793  22FC  3003               	movlw	3
 20794  22FD  00A1               	movwf	i1___aldiv@divisor+1
 20795  22FE  30E8               	movlw	232
 20796  22FF  00A0               	movwf	i1___aldiv@divisor
 20797  2300  300C               	movlw	12
 20798  2301  00B6               	movwf	??_modulation
 20799  2302  30F2               	movlw	242
 20800  2303  00B7               	movwf	??_modulation+1
 20801  2304  3001               	movlw	1
 20802  2305  00B8               	movwf	??_modulation+2
 20803  2306  3000               	movlw	0
 20804  2307  00B9               	movwf	??_modulation+3
 20805  2308  0835               	movf	modulation@y+3,w
 20806  2309  00F3               	movwf	i1___lmul@multiplier+3
 20807  230A  0834               	movf	modulation@y+2,w
 20808  230B  00F2               	movwf	i1___lmul@multiplier+2
 20809  230C  0833               	movf	modulation@y+1,w
 20810  230D  00F1               	movwf	i1___lmul@multiplier+1
 20811  230E  0832               	movf	modulation@y,w
 20812  230F  00F0               	movwf	i1___lmul@multiplier
 20813  2310  0831               	movf	modulation@x+3,w
 20814  2311  00F7               	movwf	i1___lmul@multiplicand+3
 20815  2312  0830               	movf	modulation@x+2,w
 20816  2313  00F6               	movwf	i1___lmul@multiplicand+2
 20817  2314  082F               	movf	modulation@x+1,w
 20818  2315  00F5               	movwf	i1___lmul@multiplicand+1
 20819  2316  082E               	movf	modulation@x,w
 20820  2317  00F4               	movwf	i1___lmul@multiplicand
 20821  2318  31AF  27D1  31A2   	fcall	i1___lmul
 20822  231B  0870               	movf	?i1___lmul,w
 20823  231C  0020               	movlb	0	; select bank0
 20824  231D  07B6               	addwf	??_modulation,f
 20825  231E  0871               	movf	?i1___lmul+1,w
 20826  231F  3DB7               	addwfc	??_modulation+1,f
 20827  2320  0872               	movf	?i1___lmul+2,w
 20828  2321  3DB8               	addwfc	??_modulation+2,f
 20829  2322  0873               	movf	?i1___lmul+3,w
 20830  2323  3DB9               	addwfc	??_modulation+3,f
 20831  2324  0839               	movf	??_modulation+3,w
 20832  2325  00A7               	movwf	i1___aldiv@dividend+3
 20833  2326  0838               	movf	??_modulation+2,w
 20834  2327  00A6               	movwf	i1___aldiv@dividend+2
 20835  2328  0837               	movf	??_modulation+1,w
 20836  2329  00A5               	movwf	i1___aldiv@dividend+1
 20837  232A  0836               	movf	??_modulation,w
 20838  232B  00A4               	movwf	i1___aldiv@dividend
 20839  232C  3198  20DA         	fcall	i1___aldiv
 20840  232E  0020               	movlb	0	; select bank0
 20841  232F  0823               	movf	?i1___aldiv+3,w
 20842  2330  00B1               	movwf	?_modulation+3
 20843  2331  0822               	movf	?i1___aldiv+2,w
 20844  2332  00B0               	movwf	?_modulation+2
 20845  2333  0821               	movf	?i1___aldiv+1,w
 20846  2334  00AF               	movwf	?_modulation+1
 20847  2335  0820               	movf	?i1___aldiv,w
 20848  2336  00AE               	movwf	?_modulation
 20849  2337  0008               	return
 20850  2338                     __end_of_modulation:	
 20851                           
 20852                           	psect	text79
 20853  2FD1                     __ptext79:	
 20854 ;; *************** function i1___lmul *****************
 20855 ;; Defined at:
 20856 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 20857 ;; Parameters:    Size  Location     Type
 20858 ;;  multiplier      4    0[COMMON] unsigned long 
 20859 ;;  multiplicand    4    4[COMMON] unsigned long 
 20860 ;; Auto vars:     Size  Location     Type
 20861 ;;  __lmul          4    8[COMMON] unsigned long 
 20862 ;; Return value:  Size  Location     Type
 20863 ;;                  4    0[COMMON] unsigned long 
 20864 ;; Registers used:
 20865 ;;		wreg, status,2, status,0
 20866 ;; Tracked objects:
 20867 ;;		On entry : 0/0
 20868 ;;		On exit  : 0/0
 20869 ;;		Unchanged: 0/0
 20870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20871 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20872 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20874 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20875 ;;Total ram usage:       12 bytes
 20876 ;; Hardware stack levels used:    1
 20877 ;; This function calls:
 20878 ;;		Nothing
 20879 ;; This function is called by:
 20880 ;;		_modulation
 20881 ;; This function uses a non-reentrant model
 20882 ;;
 20883                           
 20884                           
 20885                           ;psect for function i1___lmul
 20886  2FD1                     i1___lmul:	
 20887                           
 20888                           ;incstack = 0
 20889                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 20890  2FD1  3000               	movlw	0
 20891  2FD2  00FB               	movwf	i1___lmul@product+3
 20892  2FD3  3000               	movlw	0
 20893  2FD4  00FA               	movwf	i1___lmul@product+2
 20894  2FD5  3000               	movlw	0
 20895  2FD6  00F9               	movwf	i1___lmul@product+1
 20896  2FD7  3000               	movlw	0
 20897  2FD8  00F8               	movwf	i1___lmul@product
 20898  2FD9                     i1l6096:	
 20899  2FD9  1C70               	btfss	i1___lmul@multiplier,0
 20900  2FDA  2FE3               	goto	i1l6100
 20901  2FDB  0874               	movf	i1___lmul@multiplicand,w
 20902  2FDC  07F8               	addwf	i1___lmul@product,f
 20903  2FDD  0875               	movf	i1___lmul@multiplicand+1,w
 20904  2FDE  3DF9               	addwfc	i1___lmul@product+1,f
 20905  2FDF  0876               	movf	i1___lmul@multiplicand+2,w
 20906  2FE0  3DFA               	addwfc	i1___lmul@product+2,f
 20907  2FE1  0877               	movf	i1___lmul@multiplicand+3,w
 20908  2FE2  3DFB               	addwfc	i1___lmul@product+3,f
 20909  2FE3                     i1l6100:	
 20910  2FE3  3001               	movlw	1
 20911  2FE4                     u540_25:	
 20912  2FE4  35F4               	lslf	i1___lmul@multiplicand,f
 20913  2FE5  0DF5               	rlf	i1___lmul@multiplicand+1,f
 20914  2FE6  0DF6               	rlf	i1___lmul@multiplicand+2,f
 20915  2FE7  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20916  2FE8  0B89               	decfsz	9,f
 20917  2FE9  2FE4               	goto	u540_25
 20918  2FEA  3001               	movlw	1
 20919  2FEB                     u541_25:	
 20920  2FEB  36F3               	lsrf	i1___lmul@multiplier+3,f
 20921  2FEC  0CF2               	rrf	i1___lmul@multiplier+2,f
 20922  2FED  0CF1               	rrf	i1___lmul@multiplier+1,f
 20923  2FEE  0CF0               	rrf	i1___lmul@multiplier,f
 20924  2FEF  0B89               	decfsz	9,f
 20925  2FF0  2FEB               	goto	u541_25
 20926  2FF1  0873               	movf	i1___lmul@multiplier+3,w
 20927  2FF2  0472               	iorwf	i1___lmul@multiplier+2,w
 20928  2FF3  0471               	iorwf	i1___lmul@multiplier+1,w
 20929  2FF4  0470               	iorwf	i1___lmul@multiplier,w
 20930  2FF5  1D03               	skipz
 20931  2FF6  2FD9               	goto	i1l6096
 20932  2FF7  087B               	movf	i1___lmul@product+3,w
 20933  2FF8  00F3               	movwf	?i1___lmul+3
 20934  2FF9  087A               	movf	i1___lmul@product+2,w
 20935  2FFA  00F2               	movwf	?i1___lmul+2
 20936  2FFB  0879               	movf	i1___lmul@product+1,w
 20937  2FFC  00F1               	movwf	?i1___lmul+1
 20938  2FFD  0878               	movf	i1___lmul@product,w
 20939  2FFE  00F0               	movwf	?i1___lmul
 20940  2FFF  0008               	return
 20941  3000                     __end_ofi1___lmul:	
 20942                           
 20943                           	psect	text80
 20944  18DA                     __ptext80:	
 20945 ;; *************** function i1___aldiv *****************
 20946 ;; Defined at:
 20947 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 20948 ;; Parameters:    Size  Location     Type
 20949 ;;  divisor         4    0[BANK0 ] long 
 20950 ;;  dividend        4    4[BANK0 ] long 
 20951 ;; Auto vars:     Size  Location     Type
 20952 ;;  __aldiv         4   10[BANK0 ] long 
 20953 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 20954 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 20955 ;; Return value:  Size  Location     Type
 20956 ;;                  4    0[BANK0 ] long 
 20957 ;; Registers used:
 20958 ;;		wreg, status,2, status,0
 20959 ;; Tracked objects:
 20960 ;;		On entry : 0/0
 20961 ;;		On exit  : 0/0
 20962 ;;		Unchanged: 0/0
 20963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20964 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20965 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20966 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20967 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20968 ;;Total ram usage:       15 bytes
 20969 ;; Hardware stack levels used:    1
 20970 ;; This function calls:
 20971 ;;		Nothing
 20972 ;; This function is called by:
 20973 ;;		_modulation
 20974 ;; This function uses a non-reentrant model
 20975 ;;
 20976                           
 20977                           
 20978                           ;psect for function i1___aldiv
 20979  18DA                     i1___aldiv:	
 20980                           
 20981                           ;incstack = 0
 20982                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 20983  18DA  0020               	movlb	0	; select bank0
 20984  18DB  01A9               	clrf	i1___aldiv@sign
 20985  18DC  1FA3               	btfss	i1___aldiv@divisor+3,7
 20986  18DD  28EB               	goto	i1l2015
 20987  18DE  09A0               	comf	i1___aldiv@divisor,f
 20988  18DF  09A1               	comf	i1___aldiv@divisor+1,f
 20989  18E0  09A2               	comf	i1___aldiv@divisor+2,f
 20990  18E1  09A3               	comf	i1___aldiv@divisor+3,f
 20991  18E2  0AA0               	incf	i1___aldiv@divisor,f
 20992  18E3  1903               	skipnz
 20993  18E4  0AA1               	incf	i1___aldiv@divisor+1,f
 20994  18E5  1903               	skipnz
 20995  18E6  0AA2               	incf	i1___aldiv@divisor+2,f
 20996  18E7  1903               	skipnz
 20997  18E8  0AA3               	incf	i1___aldiv@divisor+3,f
 20998  18E9  01A9               	clrf	i1___aldiv@sign
 20999  18EA  0AA9               	incf	i1___aldiv@sign,f
 21000  18EB                     i1l2015:	
 21001  18EB  1FA7               	btfss	i1___aldiv@dividend+3,7
 21002  18EC  28FC               	goto	i1l6118
 21003  18ED  09A4               	comf	i1___aldiv@dividend,f
 21004  18EE  09A5               	comf	i1___aldiv@dividend+1,f
 21005  18EF  09A6               	comf	i1___aldiv@dividend+2,f
 21006  18F0  09A7               	comf	i1___aldiv@dividend+3,f
 21007  18F1  0AA4               	incf	i1___aldiv@dividend,f
 21008  18F2  1903               	skipnz
 21009  18F3  0AA5               	incf	i1___aldiv@dividend+1,f
 21010  18F4  1903               	skipnz
 21011  18F5  0AA6               	incf	i1___aldiv@dividend+2,f
 21012  18F6  1903               	skipnz
 21013  18F7  0AA7               	incf	i1___aldiv@dividend+3,f
 21014  18F8  3001               	movlw	1
 21015  18F9  00FC               	movwf	??i1___aldiv
 21016  18FA  087C               	movf	??i1___aldiv,w
 21017  18FB  06A9               	xorwf	i1___aldiv@sign,f
 21018  18FC                     i1l6118:	
 21019  18FC  3000               	movlw	0
 21020  18FD  00AD               	movwf	i1___aldiv@quotient+3
 21021  18FE  3000               	movlw	0
 21022  18FF  00AC               	movwf	i1___aldiv@quotient+2
 21023  1900  3000               	movlw	0
 21024  1901  00AB               	movwf	i1___aldiv@quotient+1
 21025  1902  3000               	movlw	0
 21026  1903  00AA               	movwf	i1___aldiv@quotient
 21027  1904  0823               	movf	i1___aldiv@divisor+3,w
 21028  1905  0422               	iorwf	i1___aldiv@divisor+2,w
 21029  1906  0421               	iorwf	i1___aldiv@divisor+1,w
 21030  1907  0420               	iorwf	i1___aldiv@divisor,w
 21031  1908  1903               	skipnz
 21032  1909  2945               	goto	i1l6140
 21033  190A  01A8               	clrf	i1___aldiv@counter
 21034  190B  0AA8               	incf	i1___aldiv@counter,f
 21035  190C                     i1l6126:	
 21036  190C  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21037  190D  291A               	goto	i1l6128
 21038  190E  3001               	movlw	1
 21039  190F                     u546_25:	
 21040  190F  35A0               	lslf	i1___aldiv@divisor,f
 21041  1910  0DA1               	rlf	i1___aldiv@divisor+1,f
 21042  1911  0DA2               	rlf	i1___aldiv@divisor+2,f
 21043  1912  0DA3               	rlf	i1___aldiv@divisor+3,f
 21044  1913  0B89               	decfsz	9,f
 21045  1914  290F               	goto	u546_25
 21046  1915  3001               	movlw	1
 21047  1916  00FC               	movwf	??i1___aldiv
 21048  1917  087C               	movf	??i1___aldiv,w
 21049  1918  07A8               	addwf	i1___aldiv@counter,f
 21050  1919  290C               	goto	i1l6126
 21051  191A                     i1l6128:	
 21052  191A  3001               	movlw	1
 21053  191B                     u548_25:	
 21054  191B  35AA               	lslf	i1___aldiv@quotient,f
 21055  191C  0DAB               	rlf	i1___aldiv@quotient+1,f
 21056  191D  0DAC               	rlf	i1___aldiv@quotient+2,f
 21057  191E  0DAD               	rlf	i1___aldiv@quotient+3,f
 21058  191F  0B89               	decfsz	9,f
 21059  1920  291B               	goto	u548_25
 21060  1921  0823               	movf	i1___aldiv@divisor+3,w
 21061  1922  0227               	subwf	i1___aldiv@dividend+3,w
 21062  1923  1D03               	skipz
 21063  1924  292F               	goto	u549_25
 21064  1925  0822               	movf	i1___aldiv@divisor+2,w
 21065  1926  0226               	subwf	i1___aldiv@dividend+2,w
 21066  1927  1D03               	skipz
 21067  1928  292F               	goto	u549_25
 21068  1929  0821               	movf	i1___aldiv@divisor+1,w
 21069  192A  0225               	subwf	i1___aldiv@dividend+1,w
 21070  192B  1D03               	skipz
 21071  192C  292F               	goto	u549_25
 21072  192D  0820               	movf	i1___aldiv@divisor,w
 21073  192E  0224               	subwf	i1___aldiv@dividend,w
 21074  192F                     u549_25:	
 21075  192F  1C03               	skipc
 21076  1930  293A               	goto	i1l6136
 21077  1931  0820               	movf	i1___aldiv@divisor,w
 21078  1932  02A4               	subwf	i1___aldiv@dividend,f
 21079  1933  0821               	movf	i1___aldiv@divisor+1,w
 21080  1934  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21081  1935  0822               	movf	i1___aldiv@divisor+2,w
 21082  1936  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21083  1937  0823               	movf	i1___aldiv@divisor+3,w
 21084  1938  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21085  1939  142A               	bsf	i1___aldiv@quotient,0
 21086  193A                     i1l6136:	
 21087  193A  3001               	movlw	1
 21088  193B                     u550_25:	
 21089  193B  36A3               	lsrf	i1___aldiv@divisor+3,f
 21090  193C  0CA2               	rrf	i1___aldiv@divisor+2,f
 21091  193D  0CA1               	rrf	i1___aldiv@divisor+1,f
 21092  193E  0CA0               	rrf	i1___aldiv@divisor,f
 21093  193F  0B89               	decfsz	9,f
 21094  1940  293B               	goto	u550_25
 21095  1941  3001               	movlw	1
 21096  1942  02A8               	subwf	i1___aldiv@counter,f
 21097  1943  1D03               	btfss	3,2
 21098  1944  291A               	goto	i1l6128
 21099  1945                     i1l6140:	
 21100  1945  0829               	movf	i1___aldiv@sign,w
 21101  1946  1903               	btfsc	3,2
 21102  1947  2953               	goto	i1l6144
 21103  1948  09AA               	comf	i1___aldiv@quotient,f
 21104  1949  09AB               	comf	i1___aldiv@quotient+1,f
 21105  194A  09AC               	comf	i1___aldiv@quotient+2,f
 21106  194B  09AD               	comf	i1___aldiv@quotient+3,f
 21107  194C  0AAA               	incf	i1___aldiv@quotient,f
 21108  194D  1903               	skipnz
 21109  194E  0AAB               	incf	i1___aldiv@quotient+1,f
 21110  194F  1903               	skipnz
 21111  1950  0AAC               	incf	i1___aldiv@quotient+2,f
 21112  1951  1903               	skipnz
 21113  1952  0AAD               	incf	i1___aldiv@quotient+3,f
 21114  1953                     i1l6144:	
 21115  1953  082D               	movf	i1___aldiv@quotient+3,w
 21116  1954  00A3               	movwf	?i1___aldiv+3
 21117  1955  082C               	movf	i1___aldiv@quotient+2,w
 21118  1956  00A2               	movwf	?i1___aldiv+2
 21119  1957  082B               	movf	i1___aldiv@quotient+1,w
 21120  1958  00A1               	movwf	?i1___aldiv+1
 21121  1959  082A               	movf	i1___aldiv@quotient,w
 21122  195A  00A0               	movwf	?i1___aldiv
 21123  195B  0008               	return
 21124  195C                     __end_ofi1___aldiv:	
 21125  007E                     btemp	set	126	;btemp
 21126  007E                     int$flags	set	126
 21127  007E                     wtemp	set	126
 21128  007E                     wtemp0	set	126
 21129  0080                     wtemp1	set	128
 21130  0082                     wtemp2	set	130
 21131  0084                     wtemp3	set	132
 21132  0086                     wtemp4	set	134
 21133  0088                     wtemp5	set	136
 21134  007F                     wtemp6	set	127
 21135  007E                     ttemp	set	126
 21136  007E                     ttemp0	set	126
 21137  0081                     ttemp1	set	129
 21138  0084                     ttemp2	set	132
 21139  0087                     ttemp3	set	135
 21140  007F                     ttemp4	set	127
 21141  007E                     ltemp	set	126
 21142  007E                     ltemp0	set	126
 21143  0082                     ltemp1	set	130
 21144  0086                     ltemp2	set	134
 21145  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         287
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      80
    BANK3            80      9      80
    BANK4            80     14      69
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  888938
                                              0 BANK4     14    14      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcCosArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               12    12      0  162398
                                             48 BANK2     12    12      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29916
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   34282
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   31031
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   30187
                                             34 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              20    14      6   29971
                                             14 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14064
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  163760
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  153110
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  153159
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  137191
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42795
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   76054
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   26100
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               2     2      0   15382
                                             14 BANK2      2     2      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0  104328
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   84615
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   72910
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   17096
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18319
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8987
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8429
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      E      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     22F      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     22F      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Jan 15 18:30:04 2017

                        _update_mode 20D7                         ___altoft@exp 00AE  
                        __CFG_CP$OFF 0000                        ___altoft@sign 00AF  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E7  
                       ___awdiv@sign 00A6                   _topTactile_pressed 01C6  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 0BD3  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l364 05DA  
                                l800 2156                                  l384 2092  
                                l801 2159                                  l633 2740  
                                l802 215C                 __size_of_adc_convert 0013  
                                l804 215F                                  l805 2183  
                                l586 2DE7                                  l792 2612  
                                l793 2636                                  l962 241A  
                                l797 2150                                  l966 2444  
                                l974 2464                                  l799 2153  
                                l978 2492                                  _GIE 005F  
                                l997 2F05                                  l989 2107  
                                l999 2F0B                                  _RB1 0069  
                                _PR2 001B         solidring_tactiles@ring_delay 00B4  
                                _cos 2784                                  _map 1AEA  
                                _exp 1363                                  _log 1F2F  
                                _isr 0004                                  _tap 02A0  
                                _sin 0821                                  _pow 1127  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
                set_subdivision@tmpX 0135              __end_of_set_leds_bottom 2184  
                       __CFG_LVP$OFF 0000                       i1___aldiv@sign 0029  
                       ___ftdiv@cntr 00D8                         ___ftdiv@sign 00DD  
                               l1000 2F12                                 l1001 2F26  
                               l1004 1807                                 l1015 1851  
                               l2015 196D                                 l2134 267D  
                               l2135 2685                                 l2127 266A  
                               l1432 0CA4                                 l2218 1AD0  
                               l2330 114B                                 l1418 0BEA  
                               l2158 10D0                                 l1712 23AF  
                               l2348 0936                                 ?_cos 014C  
                               l1960 2E57                                 ?_map 00DE  
                               l8102 1EB2                                 l8006 24D1  
                               l8106 1EBA                                 l8026 212B  
                               l9002 0BFC                                 l8116 1F27  
                               l8300 1F53                                 ?_exp 0148  
                               ?_log 013E                                 l8038 2EED  
                               l8054 1D55                                 l8126 2707  
                               l8214 20B8                                 l8230 1689  
                               l8206 2F1A                                 l8048 1D3F  
                               l9120 2459                                 l8136 1C9E  
                               l9024 0C46                                 l9016 0C1E  
                               l9040 0C75                                 l9130 2480  
                               l8170 1D10                                 l8146 1CC0  
                               l8322 1370                                 l8306 1F66  
                               l9050 0C9C                                 l9042 0C84  
                               l9018 0C3B                                 l8076 1DAF  
                               l8068 1D96                                 l9108 2436  
                               l8332 1395                                 l9220 1B95  
                               l9212 1B83                                 l8244 14F1  
                               ?_isr 0070                                 l7710 25FA  
                               l8270 08F2                                 l8166 1D08  
                               l9150 1C0B                                 l9222 1B9B  
                               l9214 1B89                                 l9038 0C6D  
                               l7712 2602                                 l8088 2FAB  
                               l8344 13F4                                 l9216 1B8D  
                               l8600 198E                                 l9072 0D63  
                               l9080 0DA0                                 l9304 041C  
                               l7714 260A                                 l7706 25EA  
                               l7810 10AF                                 l8258 0856  
                               l8290 2F62                                 l8338 13B9  
                               l8442 11B9                                 l8434 115F  
                               l9234 1BFA                                 l9218 1B91  
                               l9226 1BA2                                 l8522 2264  
                               l8530 226F                                 l8514 2254  
                               l8610 19BC                                 l8602 199C  
                               l9066 0CF3                                 l9058 0CE7  
                               l9314 047A                                 l7708 25F2  
                               l7804 109C                                 l7900 07C7  
                               l8380 2063                                 l8372 204E  
                               l7660 100A                                 l8428 1153  
                               l9156 1C18                                 l9172 1DDA  
                               l9228 1BBB                                 l9068 0D3D  
                               l9332 0570                                 l7734 2166  
                               l7718 2619                                 l7822 10E2  
                               l7806 10A6                                 l7742 2E51  
                               l8366 149C                                 l8446 11D9  
                               l8630 2549                                 l8614 19C7  
                               l9318 04BA                                 l7680 2647  
                               l7816 10C2                                 l7808 10AB  
                               l7664 1014                                 l8288 2F52  
                               l9192 19EA                                 l8560 0A25  
                               l8800 0FBB                                 l9344 05DC  
                               l9328 0530                                 l7690 266F  
                               l7682 2651                                 l7826 10F4  
                               l7818 10CC                                 l8386 2069  
                               l8378 2054                                 l9098 240F  
                               l9178 1DE9                                 l8802 0E14  
                               l8618 19D5                                 l9362 06F7  
                               l9354 066D                                 l9290 03A1  
                               l9274 0382                                 l7692 2677  
                               l7684 2656                                 l7676 2640  
                               l7836 110F                                 l7780 1060  
                               l7764 21D5                                 l7844 219B  
                               l7924 1A7C                                 l8548 27CE  
                               l8636 2554                                 l8564 0B67  
                               l8804 0FC1                                 l9348 061C  
                               l9284 0392                                 ?_sin 013E  
                               l8750 275C                                 l7766 21E5  
                               l7950 1AC7                                 l7942 1AAC  
                               l8662 258B                                 l8654 257A  
                               l8646 255C                                 l8574 2234  
                               l8814 0FE4                                 l9374 0731  
                               l9358 06AD                                 l7776 1059  
                               l7872 0768                                 l7848 21B1  
                               l7952 1AD3                                 l7944 1ABA  
                               l8648 2568                                 l8808 0FCA  
                               l8912 12A2                                 l8592 197E  
                               l8832 20FA                                 l8840 210B  
                               l9810 23A0                                 l8690 2388  
                               l7786 106F                                 l7866 0752  
                               l8658 2583                                 l8748 2753  
                               l9812 23A5                                 l8684 2382  
                               l7884 07A3                                 l7956 1AE1  
                               l9804 0FAA                                 l8932 12D8  
                               l8916 12B4                                 l8860 1836  
                               ?_pow 0155                                 l9814 23AA  
                               l8686 2384                                 l8694 238C  
                               l7798 1089                                 l9806 1BA7  
                               l8790 0F04                                 l8918 12BC  
                               l8838 2104                                 l8870 184D  
                               l8862 183B                                 l8854 182A  
                               l9816 261F                                 l9808 239B  
                               l8688 2386                                 l7896 07BF  
                               l7888 07AB                                 l7968 228B  
                               l8792 0F4A                                 l8784 0E32  
                               l8960 1326                                 l8952 130C  
                               l8944 12ED                                 l8880 1253  
                               l8872 1855                                 l9818 216C  
                               l8794 0F90                                 l8786 0E78  
                               l8778 0DFD                                 l8962 132C  
                               l8970 1340                                 l8946 12F1  
                               l8788 0EBE                                 l8892 1274  
                               l8884 1266                                 l8798 0FA4  
                               l7998 24AD                                 l8976 134C  
                               l8996 0BDF                                 _PEIE 005E  
                               _RCIE 048D                                 u8005 109D  
                               u8035 10B0                                 u8205 07B2  
                               u8065 10C3                                 u9105 19BD  
                               u8235 07C8                                 u8315 1AAD  
                               u9300 275A                                 u8245 07CE  
                               u8165 0774                                 u9205 257B  
                               u8175 0784                                 u7705 264C  
                               u8505 1DB0                                 u8345 1AC8  
                               u9065 1991                                 u8195 07AC  
                               u8620 20B6                                 u7725 2665  
                               u8285 1A83                                 u8605 1CC9  
                               u9165 255F                                 u9325 0DD7  
                               u9085 199D                                 u9255 2F33  
                               u7655 1015                                 u9335 0DEB  
                               u9095 19B1                                 u8800 13D3  
                               u9265 2F39                                 u7745 2672  
                               u8465 1D67                                 u7825 2E58  
                               u7665 101C                                 u9185 2569  
                               u9345 0DFB                                 u8385 24AB  
                               u8475 1D77                                 u7835 2E5D  
                               u9195 2573                                 u9355 0E1B  
                               u8395 24CF                                 u9285 2739  
                               u8485 1D97                                 u8725 2F57  
                               u9295 274C                                 u8495 1DA6  
                               u8680 08EE                                 u7785 268C  
                               u7865 21DA                                 u8905 11AA  
                               u9545 124C                                 u9465 1819  
                               u8690 08EF                                 u8835 1493  
                               u9555 125F                                 u9395 20EA  
                               u8925 2E75                                 u8790 13D2  
                               u7975 108A                                 u8935 080B  
                               u8945 2245                                 u9585 127E  
                               u9835 0C27                                 u9695 12FD  
                               u8985 2E3F                                 u9945 0CB5  
                               u9865 0C50                                 u9955 0CCC  
                               u9965 0CFC                                 u9975 0D11  
                               u9985 0D25                   scaleA100kPot@input 0167  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                  _scaleA10kPot$2850 01EA                    _scaleA10kPot$2851 01ED  
                               _iCnt 01BD                                 _main 035E  
                       ___ftpack@arg 00A0                                 cos@f 014C  
                       ___ftpack@exp 00A3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 map@x 00DE  
                               btemp 007E                                 exp@x 0148  
                               log@x 013E                        __CFG_BOREN$ON 0000  
                               sin@f 013E                                 sin@y 0142  
                               ltemp 007E                                 pow@x 0155  
                               pow@y 0158                                 start 02DD  
                               ttemp 007E                                 wtemp 007E  
       __end_of_getSwitchBypassState 2DA0                      _expressModeCnst 01E2  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 2E86  
                    ?i1_set_leds_top 0070                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 00BC                         ___ftmul@sign 00BD  
                    __end_of_InitApp 203F                         ___fttol@exp1 012D  
                              ??_cos 00F0                                ??_map 00ED  
              __size_of_calcCosArray 0081                                ??_exp 014B  
                              ??_log 0141                         ___fttol@lval 0129  
                              ??_isr 003A                                ??_sin 0141  
                              ??_pow 015B                      _switchBypass_up 0263  
          __size_of_initSwitchBypass 000F                      __end_of___aldiv 19DE  
                              ?_main 0070                       i1___awdiv@sign 0076  
       getModulationDelayTime@subDiv 012E                      __end_of___awdiv 2590  
                    __end_of___ftadd 1127                                _CCPR1 0291  
                              _CCPR2 0298                                _CCPR3 0311  
                              _CCPR4 0318                                _CCPR5 031C  
                      __CFG_WDTE$OFF 0000                      __end_of___ftdiv 1DD1  
                    __end_of___ftneg 2DB9                                u10005 0D42  
                              u10125 2479                                u10205 1BF5  
                              u10065 242F                                u10305 05C7  
                              u10315 05D5                      __end_of___ftmul 07EF  
                              u10325 05FA                                u10245 03FA  
                              u10335 061A                                u10255 041A  
                              u10345 068B                                u10265 0498  
                              u10355 06AB                                u10275 04B8  
                    ___awdiv@divisor 00A0                                u10285 054E  
                              u10295 056E                      __end_of___ftsub 2FD1  
                    __end_of___fttol 1AEA                                i1l135 02D8  
                              i1l136 001B                                i1l137 00EF  
                              i1l157 02CF                                i1l792 23E2  
                              i1l793 2404                      ___awdiv@counter 00A5  
                              _RCREG 0199                                _SPBRG 019B  
                 __end_ofsin@coeff_a 2848                   __end_ofsin@coeff_b 2854  
                              _TXREG 019A                                _UQEnd 004C  
                _ConfigureOscillator 2D98          __size_of_setLongBypassState 0021  
                   _setPresetDisplay 210F                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                       ___lltoft@exp 00AD                      _switchTap_state 01E6  
                  ??_setLongTapState 00A2                        ___awtoft@sign 00AD  
                              _floor 1E7C                                _ldexp 1C91  
                              _frexp 2277                                _myBuf 03A0  
                              _errno 024D             _getModulationSubdivision 203F  
                      ___ftpack@sign 00A4                                _timer 0048  
                   __end_ofi1___lmul 3000                                sin@x2 0148  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    __end_of_wait_ms 20A1                                pow@yi 0163  
                    scaleA10kPot@pwm 01E7                   __size_of_USARTInit 0044  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
        __end_of_read_bottom_tactile 244F                   __size_ofi1___aldiv 0082  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0132       __size_of_setSwitchBypassRelays 0036  
      __end_of_setSwitchBypassRelays 20D7                         _calcCosArray 1859  
                        exp@exponent 0152                 ?_ConfigureOscillator 0070  
                 _updateSwitchBypass 123D                          ldexp@newexp 0141  
            __end_of_updateSwitchTap 0DBA                      __initialization 02DF  
                        log@exponent 0142          updateModulationArray@iAngle 015B  
            _updateSwitchBypassState 0002                         __end_of_main 073B  
            __size_of_InitializeTaps 0026                  i1___lmul@multiplier 0070  
             __size_of_scaleA100kPot 0085                          modCos@angle 0134  
                ?_updateSwitchBypass 0070                       __CFG_LPBOR$OFF 0000  
             ring_tactiles@iLed_1532 00B5                          modCos@shift 013F  
                    _set_subdivision 1B75          updateModulationArray@subDiv 0157  
                             ??_main 0255                        ___fttol@sign1 0128  
 __end_ofi1_getModulationSubdivision 2FA3           i1_getModulationSubdivision 2F77  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0           __end_of_solidring_tactiles 22F7  
                   ?_set_leds_bottom 00A0                               ?_floor 012E  
                             ?_ldexp 013E                               ?_frexp 00A0  
                   __end_of___altoft 21FD                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
                   __end_of___awtoft 2F04                     __end_of___ftpack 269C  
               ??_updateSwitchBypass 00BC                     __end_of___lltoft 2F77  
                             i1l2015 18EB                               i1l6100 2FE3  
                             i1l6140 1945                               i1l6126 190C  
                             i1l6118 18FC                               i1l6144 1953  
                             i1l6136 193A                               i1l6128 191A  
                             i1l6096 2FD9                               i1l6800 23D6  
                             i1l6802 23DC                               i1l6820 2F8B  
                             i1l6900 010A                               i1l6822 2F99  
                             i1l6814 2F86                               i1l6806 23E8  
                             i1l6840 24F7                               i1l6930 0183  
                             i1l6906 0125                               i1l6828 2F9E  
                             i1l6932 0185                               i1l6846 2502  
                             i1l6942 01B0                               i1l6950 01D7  
                             i1l6872 2539                               i1l6864 2528  
                             i1l6856 250A                               i1l6960 0205  
                             i1l6944 01B9                               i1l6928 0173  
                             i1l6858 2516                               i1l6794 23C4  
                             i1l6970 024D                               i1l6954 01EB  
                             i1l6962 0207                               i1l6946 01C8  
                             i1l6868 2531                               i1l6796 23CA  
                             i1l6798 23D0                               i1l6990 02D1  
                             i1l6958 01F6                               i1l6994 02D6  
                             i1l6978 029F                               i1l9820 23ED  
                             i1l6996 02D7                               _PMADRH 0192  
                             _PMADRL 0191                               _PMDATH 0194  
                             _PMDATL 0193                               _PMCON2 0196  
                             u540_25 2FE4                               u700_25 02CA  
                             u541_25 2FEB                               u550_25 193B  
                             u546_25 190F                               u548_25 191B  
                             u549_25 192F                               u664_25 250D  
                             u680_25 011C                               u674_23 00C3  
                             u666_25 2517                               u667_25 2521  
                             u675_25 00D3                               u684_23 0149  
                             u668_25 2529                               u676_25 00DC  
                             u678_25 0101                               u696_23 022F  
                             u689_23 019E                               u697_25 0244  
                             u699_25 02B1                       _debounce_count 0245  
                        modSaw@angle 012E                       _debounce_mode1 0247  
                     _debounce_mode2 0249                          modSaw@shift 013C  
                             _URBuff 0320                            ??_InitApp 00A0  
              ??_ConfigureOscillator 00A0             __end_of_read_top_tactile 249D  
            ?_getModulationDelayTime 0070                       __CFG_PWRTE$OFF 0000  
                             ___ftge 2184                               ___lmul 1001  
                          ??___aldiv 00A8                               ___wmul 2E4E  
                  _update_selectMode 1800                            ??___awdiv 00A4  
                          ??___ftadd 00C7                       __CFG_STVREN$ON 0000  
                          ??___ftdiv 00D4                            ??___ftneg 00C1  
                          ??___ftmul 00B4                            ??___ftsub 00F0  
                          ??___fttol 0124                          modTri@angle 012E  
                             _modCos 1654                     __end_of_init_adc 2DC3  
                             _modSaw 14BC                               _modTri 09F0  
                   __end_of_init_pwm 2379                   ?_update_selectMode 0070  
                        modTri@shift 0137                     ___awdiv@quotient 00A7  
              __end_of_resetRingLEDs 2E34                               _tmpVal 0253  
                  __end_of_USARTInit 23BD                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 195C                               floor@i 0132  
                             floor@x 012E                ___ftmul@f3_as_product 00B9  
                  __end_ofi1___awdiv 253E              FLASH_ReadWord@flashAddr 00A0  
                             sin@sgn 014B                     __end_of_showSave 2E02  
                ??_update_selectMode 00A7                 _getSwitchBypassState 2D9C  
                          ??_wait_ms 00AE                 _setSwitchBypassState 2E6A  
                      _scaleA100kPot 19DE         __end_of_setExpressionDisplay 2E1A  
             __size_of_scaleiA10kPot 00AB               setLongTapState@f_state 00A0  
                   __end_ofexp@coeff 281E                     __end_oflog@coeff 2839  
            __end_of__initialization 035A                           ___altoft@c 00A8  
     __end_of_getModulationDelayTime 25E3                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 01BC  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 005A            ??_updateSwitchBypassState 00A2  
                         ___ftneg@f1 00BE                  _switchBypass_toggle 0251  
                         ___awtoft@c 00A8                __end_of_ring_tactiles 24ED  
          __end_of_update_selectMode 1859              __end_of_set_subdivision 1C00  
                         ___ftmul@f1 00AE                           ___ftmul@f2 00B1  
                         ___ftsub@f1 013A                           ___ftsub@f2 0137  
                         ___fttol@f1 0120                     ?_updateSwitchTap 0070  
                       ?_update_mode 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 2001                         __pidataBANK2 0003  
                       __pidataBANK3 2EC2                         __pidataBANK4 07FE  
                         ___lltoft@c 00A8                        __end_of_floor 1F2F  
                      __end_of_ldexp 1D28                        __end_of_frexp 22B7  
                   _initSwitchBypass 07EF                            ?i1___lmul 0070  
              _updateModulationArray 0DBA                      _doubleTap_state 004E  
                     _OPTION_REGbits 0095                         modCos@period 0142  
                       modCos@tmpVal 0145                ?_getSwitchBypassState 00A0  
              ?_setSwitchBypassState 00B6                       ?_scaleA100kPot 0167  
                            ??_floor 0131                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                        ?_setPedalMode 0070  
                         __pbssBANK0 0040                           __pbssBANK2 016A  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pbssBANK5 02A0                           __pbssBANK6 0320  
                         __pbssBANK7 03A0                   __size_of_eval_poly 0072  
                   ??i1_set_leds_top 0074                      __CFG_VCAPEN$OFF 0000  
                 __size_of_modSawRev 001C                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 2149                           _delay_time 0052  
                   _long_press_limit 0058         __size_of_setDoublePressState 003D  
                         _delayfound 024B                           __pmaintext 035E  
                     _InitializeTaps 2F27                              ?___ftge 00A0  
                            ?___lmul 00A0                              ?___wmul 012E  
     updateModulationArray@thisAngle 0159                           __pintentry 0004  
                      _scaleiA10kPot 1DD1                           _blink_rate 005C  
                      ??_adc_convert 00A2                              ?_modCos 0134  
                          ?___altoft 00A8                              ?_modSaw 012E  
                            ?_modTri 012E                       ___lmul@product 00A8  
                    _setLongTapState 2E34                            ?___awtoft 00A8  
                          ?___ftpack 00A0                  modSquare@inflection 014B  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                       _FLASH_ReadWord 2EA2  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 0003  
                        modulation@x 002E                          modulation@y 0032  
                         _ldexp$2650 0145                      _debounce_bypass 0243  
                     ??_setPedalMode 00A7                   USARTWriteInt@F3536 0234  
                      _suspend_blink 016D         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 013F                              _UQFront 004D  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 01BA                              _InitApp 200F  
               __end_of_scaleA10kPot 1C91               __end_of_InitializeTaps 2F4D  
                      ?_set_leds_top 00A0                           _knob1_prev 01CD  
         __size_of_update_selectMode 0059                   i1___awdiv@quotient 0077  
                         _knob2_prev 01CF                           _knob3_prev 01D1  
                         _knob4_prev 01D3                           _knob5_prev 01D5  
                   ?_set_subdivision 012E                            ?_showSave 0070  
                            ___aldiv 195C                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 253E  
                    __size_of___lmul 0030                              ___ftadd 1031  
                            ___ftdiv 1D28                              ___ftneg 2DB0  
                         _knob_1_pos 01A8                           _knob_2_pos 01AA  
                    __size_of___wmul 001C                              ___ftmul 073B  
                         _knob_3_pos 01AC                              ___ftsub 2FA3  
                            ___fttol 1A63                           _knob_4_pos 01AE  
                         _knob_5_pos 01B0                    _switchTap_pressed 016E  
                         ??___altoft 00AC                 _setExpressionDisplay 2E02  
             ?_updateModulationArray 0070                      __size_of_modCos 01AC  
             __end_of_FLASH_ReadWord 2EC2                      __size_of_modSaw 0198  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01E3                    __end_of_eval_poly 270E  
                 InitializeTaps@itap 00A1                           ??___lltoft 00AC  
                            __ptext1 1800                              __ptext2 20D7  
                            __ptext3 0BD3                              __ptext4 2E34  
                            __ptext5 195C                              __ptext6 123D  
                            __ptext7 0800                              __ptext8 223A  
                            __ptext9 2DEE           __end_of_setLongBypassState 0821  
        ?i1_getModulationSubdivision 0070               ??_getSwitchBypassState 00A2  
                  __end_of_modSawRev 2EA2                            _T2CONbits 001C  
                       __size_of_cos 007C                         __size_of_map 008B  
                       __size_of_exp 0159                         __size_of_log 00D1  
                       __size_of_isr 02D9               ??_setSwitchBypassState 00B8  
                       __size_of_sin 01CF                         __size_of_pow 0116  
                __end_of_adc_convert 2DEE                         modTri@period 013A  
                  __end_of_modSquare 223A                      ??_scaleA100kPot 00F0  
                   ___aldiv@dividend 00A4                         modTri@tmpVal 013D  
                            _wait_ms 206F                              clrloop0 2DD0  
               end_of_initialization 035A                              exp@sign 0154  
                         _modulation 22F7                              init_ram 2DC3  
                         ??_init_adc 00A0                              initloop 2DC4  
                         ??_init_pwm 00A0         updateSwitchBypassState@state 00A0  
                 _solidring_tactiles 22B7                        _longTap_timer 01B4  
                      _longTap_state 005D                        _longTap_start 016B  
                     ??_set_leds_top 00A4                    ?_read_top_tactile 0070  
                    ?_InitializeTaps 0070                              pow@sign 0162  
                  scaleA10kPot@input 0167              __end_of_setLongTapState 2E4E  
              _setSwitchBypassRelays 20A1               i1set_leds_top@ledState 0072  
                 ??_read_top_tactile 00B2                            _RCSTAbits 019D  
                         ??_showSave 00B7                     _mod_time_changed 01E4  
                   _longBypass_timer 01B2                     ___aldiv@quotient 00AB  
                   _longBypass_state 004F                     _longBypass_start 016A  
       __size_of_read_bottom_tactile 004A                  ?_solidring_tactiles 0070  
                       __pstringtext 2800            FLASH_ReadWord@GIEBitValue 00A2  
              ?_setExpressionDisplay 0070                 __size_of_update_mode 0038  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 01E3  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
                          _USARTInit 2379                            _TRISBbits 008D  
                          _TRISCbits 008E                            _TRISDbits 008F  
                          _TRISEbits 0090                            _TRISFbits 030C  
                          _TRISGbits 030D                            i1___aldiv 18DA  
                          i1___awdiv 24ED                 ??_solidring_tactiles 00B2  
        __end_of_ConfigureOscillator 2D9C                           map@out_max 00EA  
                         map@out_min 00E7          __size_of_updateSwitchBypass 0126  
           __end_of_initSwitchBypass 07FE                          _CCP1CONbits 0293  
                        ___ftdiv@exp 00DC             __size_of_set_leds_bottom 003B  
                        _CCP2CONbits 029A                            _TXSTAbits 019E  
               _switchBypass_pressed 01B6                          _CCP3CONbits 0313  
                        _CCP4CONbits 031A                          _CCP5CONbits 031E  
                        _CCP6CONbits 0613                      ??_scaleiA10kPot 00F0  
                        _CCP7CONbits 0616                          ___ftmul@exp 00B8  
                 adc_convert@channel 00A3                          _CCP8CONbits 0619  
                        _CCP9CONbits 061C                 set_leds_top@ledState 00A2  
                     __end_of___ftge 21C0                 __end_of_setPedalMode 2F27  
                     __end_of___lmul 1031                       __end_of___wmul 2E6A  
                       _double_timer 01A0                          _adc_convert 2DDB  
   __end_of_getModulationSubdivision 206F                       _switchTap_down 01C5  
                     __end_of_modCos 1800                       __end_of_modSaw 1654  
                     __end_of_modTri 0BD3                       modSawRev@angle 0142  
                         floor@expon 0135                i1___lmul@multiplicand 0074  
                  __size_ofi1___lmul 002F                  start_initialization 02DF  
                         ?_USARTInit 00A0                           eval_poly@d 0137  
                         eval_poly@n 0139                           eval_poly@x 0134  
              _bottomTactile_pressed 01BB                  _setDoublePressState 223A  
                         ldexp@value 013E                           ?i1___aldiv 0020  
                        __end_of_cos 2800                          __end_of_map 1B75  
                        __end_of_exp 14BC                          __end_of_log 2000  
                        __end_of_isr 02DD                           ?i1___awdiv 0070  
                        __end_of_sin 09F0                          __end_of_pow 123D  
              __size_of_scaleA10kPot 0091                   _adjusted_pot_value 0241  
                        ?_modulation 002E                   scaleiA10kPot@input 0167  
                         frexp@value 00A0               __size_of_resetRingLEDs 001A  
             ?_setSwitchBypassRelays 00B2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                             ??___ftge 00A6  
                           ??___lmul 00A8               ??_setExpressionDisplay 00A4  
                           ??___wmul 00F0                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 0052                          __pdataBANK2 016F  
                        __pdataBANK3 01C7                          __pdataBANK4 0263  
                           ??_modCos 013A                             ??_modSaw 00F0  
                 i1___aldiv@dividend 0024                             ??_modTri 00F0  
                      _tap_iteration 01DD             __size_of_updateSwitchTap 01E7  
                  __size_of___altoft 003D                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065                          __pbssBIGRAM 238A  
                       _scaleA10kPot 1C00                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
               __end_of_set_leds_top 2637                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 005F  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01E7  
                      __pcstackBANK4 0255               __size_of_ring_tactiles 0050  
                     _expSwitchState 01E1     updateModulationArray@iAngle_2349 0156  
                   i1___lmul@product 0078                     scaleiA10kPot@pwm 01E7  
           ?_updateSwitchBypassState 00A0                           sin@coeff_a 2839  
                         sin@coeff_b 2848                   i1___aldiv@quotient 002A  
                   modCos@inflection 0137                        ?_calcCosArray 0070  
                           ?_InitApp 0070                ??_setDoublePressState 00BA  
                  __size_of_init_adc 000A                    __size_of_init_pwm 0041  
                          _main$2841 025A                            _main$2842 025D  
                          _main$2843 0260              ??_updateModulationArray 0150  
                           ?___aldiv 00A0                    ??_set_leds_bottom 00A2  
                 _currentBypassState 01E0                             ?___awdiv 00A0  
                           ?___ftadd 00C1                             ?___ftdiv 00CE  
                           ?___ftneg 00BE                             ?___ftmul 00AE  
                           ?___ftsub 0137                             ?___fttol 0120  
                  __size_of_showSave 0014                   _modulation_changed 01C2  
                  i1___awdiv@divisor 0070                   _scaleA100kPot$2846 01EA  
                 _scaleA100kPot$2847 01ED                    i1___awdiv@counter 0075  
                        _blink_delay 01CB                  __size_of_modulation 0041  
                      _resetRingLEDs 2E1A                          _blink_state 01DF  
                          _eval_poly 269C                          ??_USARTInit 00A2  
                           _CCPTMRS0 029D                             _CCPTMRS1 029E  
                           _CCPTMRS2 029F                          ??i1___aldiv 007C  
                           ?_wait_ms 00AC                          ??i1___awdiv 0074  
                          _modSawRev 2E86             ??_getModulationDelayTime 00F0  
                _read_bottom_tactile 2405                       __size_of_floor 00B3  
                     __size_of_ldexp 0097                       __size_of_frexp 0040  
                          _modSquare 21FD                   calcCosArray@iAngle 0159  
                     _presetModeCnst 01E5                   _setLongBypassState 0800  
                __end_of_init_timer0 2DA7                  __end_of_init_timer2 2DB0  
                          _mod_value 024F                            _mod_timer 01A4  
                   ??_InitializeTaps 00A0                      ___aldiv@divisor 00A0  
  __size_of_getModulationSubdivision 0030                      ___aldiv@counter 00A9  
          ?_getModulationSubdivision 00A0                       _presetSaveMode 0051  
                     ___wmul@product 0132                       ??_calcCosArray 0152  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 01D9                            clear_ram0 2DCF  
                 calcCosArray@tmpVal 0156                            _tap_timer 0044  
                ?_setLongBypassState 00A0                            _tap_total 023D  
              __size_of_setPedalMode 0023                        set_leds_top@x 00A0  
                           _PIR1bits 0011                        _ring_tactiles 249D  
                    _longBypass_down 01BF                     ??_FLASH_ReadWord 00A2  
                    _longBypass_save 01C0                 ?_read_bottom_tactile 0070  
            __size_ofi1_set_leds_top 0048            initSwitchBypass@initState 00BA  
                          map@in_max 00E4                            map@in_min 00E1  
                     ?_resetRingLEDs 0070                            _sub_timer 0040  
                         _ADCON0bits 009D                             i1___lmul 2FD1  
                         _ADCON1bits 009E             __size_of_set_subdivision 008B  
                  ___wmul@multiplier 012E                     set_subdivision@x 012E  
                   set_subdivision@y 0130            __size_of_read_top_tactile 004E  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0004                          _modCos$2854 013C  
      __size_of_setSwitchBypassState 001C                           ?_modSawRev 0142  
              __end_of_scaleA100kPot 1A63                    ??_updateSwitchTap 00BC  
                  ___lmul@multiplier 00A0                           ?_modSquare 0148  
                    modSquare@tmpVal 014E                         _setPedalMode 2F04  
                  _ReadSavedSettings 270E                    ?_initSwitchBypass 0070  
                  ring_tactiles@iLed 00B3                       wait_ms@timeSec 00AC  
                 ?_ReadSavedSettings 0070                          _modSaw$2856 0134  
                        _modSaw$2857 0137                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                 ??_initSwitchBypass 00BA                     __size_of_InitApp 0030  
                     ?_ring_tactiles 0070                            modSaw@mod 013A  
                        _mode1_state 01C1                        ??_update_mode 00A7  
                        _mode2_state 0050                            isr@subDiv 007D  
              ??_read_bottom_tactile 00B2                          _modTri$2855 0134  
                updateSwitchTap@iCnt 00C4                  ??_ReadSavedSettings 00A4  
                         _APFCONbits 011D                     __size_of___aldiv 0082  
                   __size_of___awdiv 0052                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                         ?_adc_convert 00A0  
                   __size_of___ftneg 0009                             ___altoft 21C0  
                   __size_of___ftmul 00B4                     __size_of___ftsub 002E  
                   __size_of___fttol 0087                             _cos$2858 014F  
                           ___awtoft 2EE2                __size_of_set_leds_top 0054  
                           ___ftpack 2637                    _baseline_mod_time 01C7  
                           _map$2844 00ED                             ___lltoft 2F4D  
             _preset_programmning_on 01C3                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2613 014F  
                           _exp$2862 014C                          _init_timer0 2DA0  
                        _init_timer2 2DA7                             _cosArray 2482  
         __end_of_updateSwitchBypass 1363                             __ptext10 22B7  
                           __ptext11 249D                             __ptext20 2E86  
                           __ptext12 2F04                             __ptext21 14BC  
                           __ptext13 210F                             __ptext30 1C91  
                           __ptext22 253E                             __ptext14 2E02  
                           __ptext31 2F4D                             __ptext23 1B75  
                           __ptext15 2E1A                             __ptext40 0002  
                           __ptext32 244F                             __ptext24 1DD1  
                           __ptext16 0DBA                             __ptext41 2D9C  
                           __ptext33 2405                             __ptext25 1C00  
                           __ptext17 09F0                             __ptext50 2184  
                           __ptext42 2590                             __ptext34 1AEA  
                           __ptext26 19DE                             __ptext18 21FD  
                           __ptext51 21C0                             __ptext43 203F  
                           __ptext35 07EF                             __ptext27 1127  
                           __ptext19 1654                             __ptext60 2637  
                           __ptext52 269C                             __ptext44 1859  
                           __ptext36 2E6A                             __ptext28 1F2F  
                           __ptext61 2DDB                             __ptext53 2E4E  
                           __ptext45 2784                             __ptext37 20A1  
                           __ptext29 1363                             __ptext70 2DA7  
                           __ptext62 2379                             __ptext54 073B  
                           __ptext46 0821                             __ptext38 206F  
                           __ptext71 2DA0                             __ptext63 270E  
                           __ptext55 2FA3                             __ptext47 1E7C  
                           __ptext39 1001                             __ptext80 18DA  
                           __ptext72 2DB9                             __ptext64 25E3  
                           __ptext56 1031                             __ptext48 2277  
                           __ptext73 2D98                             __ptext65 2149  
                           __ptext57 2DB0                             __ptext49 1A63  
                           __ptext66 2EA2                             __ptext58 1D28  
                           __ptext75 23BD                             __ptext67 2F27  
                           __ptext59 2EE2                             __ptext76 2F77  
                           __ptext68 200F                             __ptext77 24ED  
                           __ptext69 2338                             __ptext78 22F7  
                           __ptext79 2FD1                             _sin$2861 0145  
          __end_of_ReadSavedSettings 2784                     __size_of_wait_ms 0032  
        __size_of_solidring_tactiles 0040      __size_of_getModulationDelayTime 0053  
                           _ledState 0239                             _pow$2860 015F  
                           _pow$2859 015C                        _presetChannel 016F  
                       ??_modulation 0036                          _mod_counter 01D7  
                           _modArray 238A              ??_setSwitchBypassRelays 00B4  
                           _init_adc 2DB9                        __size_of_main 03DD  
                           _init_pwm 2338     updateModulationArray@angleFactor 0154  
       __size_of_ConfigureOscillator 0004                         _set_leds_top 25E3  
                           _showSave 2DEE                             _num_taps 005E  
              __end_of_scaleiA10kPot 1E7C                             int$flags 007E  
                    ??_resetRingLEDs 00A4                      i1set_leds_top@x 0070  
                     modSquare@angle 0148                  __end_of_update_mode 210F  
                           exp@coeff 2800                             _symmetry 01DB  
                modSawRev@inflection 0145                             log@coeff 281E  
                 __end_of_modulation 2338                 __end_of_calcCosArray 18DA  
                         _INTCONbits 000B                          ??_eval_poly 00F0  
          __size_of_setPresetDisplay 003A                          _tap_history 0220  
                        ??_modSawRev 0148                    ??_set_subdivision 00F0  
                        ??_modSquare 00F0                             intlevel1 0000  
                    _set_leds_bottom 2149                           _PMCON1bits 0195  
                    ??_ring_tactiles 00B2                    __CFG_CLKOUTEN$OFF 0000  
                    _reset_sub_delay 01C4                           _OSCCONbits 0099  
                       _preset_blink 016C               _getModulationDelayTime 2590  
                     i1_set_leds_top 23BD       __size_of_updateModulationArray 0246  
   __size_of_updateSwitchBypassState 0001        __end_of_updateModulationArray 1000  
                      _isInitialized 01BE        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$2852 01EA                   _scaleiA10kPot$2853 01ED  
           __size_of_setLongTapState 001A                          _tmpModDelay 01B8  
                   _read_top_tactile 244F         ??i1_getModulationSubdivision 0072  
                       ___aldiv@sign 00AA           __size_of_ReadSavedSettings 0076  
        __end_of_setDoublePressState 2277                         _CCP10CONbits 061F  
                  _bottom_push_state 0056           setPresetDisplay@ledChannel 00A6  
             __end_ofi1_set_leds_top 2405  
